{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NjI2MDc4", "number": 367, "title": "Report date data as a standardized format", "bodyText": "Issue #, if available: #342\nDescription of changes:\n\nfetch format information from field mappings\nparse date data and return it as the JDBC/MySQL standard format (yyyy-MM-dd hh:mm:ss.SSS)\nunit tests for testing all supported date formats\n\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-02-15T00:06:42Z", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/367", "merged": true, "mergeCommit": {"oid": "7c57d72ad22b1df39b5f89838a41fbf2e8a76829"}, "closed": true, "closedAt": "2020-02-28T18:17:31Z", "author": {"login": "jordanw-bq"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDv29_AH2gAyMzc1NjI2MDc4OjhiZDAxYWM3OTVkMWViYjBlNGE3ZTczODBlNGE2NmUyZjBhNDhjZGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIzLJygFqTM2NjU1NTc4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8bd01ac795d1ebb0e4a7e7380e4a66e2f0a48cde", "author": {"user": {"login": "jordanw-bq", "name": "Jordan Wilson"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/8bd01ac795d1ebb0e4a7e7380e4a66e2f0a48cde", "committedDate": "2020-02-13T00:33:26Z", "message": "expose date fields using a standardized date format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9c797314f8160d667d9a2e4312647eb5e5d7aca", "author": {"user": {"login": "jordanw-bq", "name": "Jordan Wilson"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/c9c797314f8160d667d9a2e4312647eb5e5d7aca", "committedDate": "2020-02-14T21:25:09Z", "message": "move date format logic to new class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "795a0bb91a034adb768c365b2d56a581c6f54b29", "author": {"user": {"login": "jordanw-bq", "name": "Jordan Wilson"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/795a0bb91a034adb768c365b2d56a581c6f54b29", "committedDate": "2020-02-14T23:39:18Z", "message": "add tests for DateTimeFormatter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1afa19283cc0cfc57e50a398df1fe1b278ef911d", "author": {"user": {"login": "jordanw-bq", "name": "Jordan Wilson"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/1afa19283cc0cfc57e50a398df1fe1b278ef911d", "committedDate": "2020-02-14T23:50:29Z", "message": "added some negative tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b220ce4dd17c06ec1841924fb91e1d6b01fe91bc", "author": {"user": {"login": "jordanw-bq", "name": "Jordan Wilson"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/b220ce4dd17c06ec1841924fb91e1d6b01fe91bc", "committedDate": "2020-02-15T00:18:58Z", "message": "style fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ae4195a41419305c44483944bae841795d59393", "author": {"user": {"login": "jordanw-bq", "name": "Jordan Wilson"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/2ae4195a41419305c44483944bae841795d59393", "committedDate": "2020-02-18T19:35:20Z", "message": "testing locale fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNTc4MDg4", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/367#pullrequestreview-361578088", "createdAt": "2020-02-20T01:25:02Z", "commit": {"oid": "2ae4195a41419305c44483944bae841795d59393"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMToyNTowMlrOFr9vig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMTo0Nzo0NFrOFr-iLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY0NDY4Mg==", "bodyText": "Please rename to follow Java convention CamelCase. To make it shorter, I think you can remove prefix testApplyJDBCDateFormat_, ex. testEpochSecond(), testBasicDate() etc.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/367#discussion_r381644682", "createdAt": "2020-02-20T01:25:02Z", "author": {"login": "dai-chen"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/executor/format/DateFieldFormatterTest.java", "diffHunk": "@@ -0,0 +1,627 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.format;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.Assert.*;\n+\n+public class DateFieldFormatterTest\n+{\n+\n+  @Test\n+  public void testApplyJDBCDateFormat_kibana_sample_data_ecommerce_order_date()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ae4195a41419305c44483944bae841795d59393"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY0NTEyNw==", "bodyText": "remove unused code?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/367#discussion_r381645127", "createdAt": "2020-02-20T01:25:47Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/DateFormat.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.format;\n+\n+// import java.text.SimpleDateFormat;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+// import java.util.TimeZone;\n+\n+public enum DateFormat {\n+  // Special cases that are parsed separately\n+  DATE_OPTIONAL_TIME(\"\"),\n+  EPOCH_MILLIS(\"\"),\n+  EPOCH_SECOND(\"\"),\n+\n+  BASIC_DATE(Date.BASIC_DATE),\n+  BASIC_DATE_TIME(Date.BASIC_DATE + Time.T + Time.BASIC_TIME + Time.MILLIS + Time.TZ),\n+  BASIC_DATE_TIME_NO_MILLIS(Date.BASIC_DATE + Time.T + Time.BASIC_TIME + Time.TZ),\n+\n+  BASIC_ORDINAL_DATE(Date.BASIC_ORDINAL_DATE),\n+  BASIC_ORDINAL_DATE_TIME(Date.BASIC_ORDINAL_DATE + Time.T + Time.BASIC_TIME + Time.MILLIS + Time.TZ),\n+  BASIC_ORDINAL_DATE_TIME_NO_MILLIS(Date.BASIC_ORDINAL_DATE+ Time.T + Time.BASIC_TIME + Time.TZ),\n+\n+  BASIC_TIME(Time.BASIC_TIME + Time.MILLIS + Time.TZ),\n+  BASIC_TIME_NO_MILLIS(Time.BASIC_TIME + Time.TZ),\n+\n+  BASIC_T_TIME(Time.T + Time.BASIC_TIME + Time.MILLIS + Time.TZ),\n+  BASIC_T_TIME_NO_MILLIS(Time.T + Time.BASIC_TIME + Time.TZ),\n+\n+  BASIC_WEEK_DATE(Date.BASIC_WEEK_DATE),\n+  BASIC_WEEK_DATE_TIME(Date.BASIC_WEEK_DATE + Time.T + Time.BASIC_TIME + Time.MILLIS + Time.TZ),\n+  BASIC_WEEK_DATE_TIME_NO_MILLIS(Date.BASIC_WEEK_DATE + Time.T + Time.BASIC_TIME + Time.TZ),\n+\n+  DATE(Date.DATE),\n+  DATE_HOUR(Date.DATE + Time.T + Time.HOUR),\n+  DATE_HOUR_MINUTE(Date.DATE + Time.T + Time.HOUR_MINUTE),\n+  DATE_HOUR_MINUTE_SECOND(Date.DATE + Time.T + Time.TIME),\n+  DATE_HOUR_MINUTE_SECOND_FRACTION(Date.DATE + Time.T + Time.TIME + Time.MILLIS),\n+  DATE_HOUR_MINUTE_SECOND_MILLIS(Date.DATE + Time.T + Time.TIME + Time.MILLIS),\n+  DATE_TIME(Date.DATE + Time.T + Time.TIME + Time.MILLIS + Time.TZZ),\n+  DATE_TIME_NO_MILLIS(Date.DATE + Time.T + Time.TIME + Time.TZZ),\n+\n+  HOUR(Time.HOUR),\n+  HOUR_MINUTE(Time.HOUR_MINUTE),\n+  HOUR_MINUTE_SECOND(Time.TIME),\n+  HOUR_MINUTE_SECOND_FRACTION(Time.TIME + Time.MILLIS),\n+  HOUR_MINUTE_SECOND_MILLIS(Time.TIME + Time.MILLIS),\n+\n+  ORDINAL_DATE(Date.ORDINAL_DATE),\n+  ORDINAL_DATE_TIME(Date.ORDINAL_DATE + Time.T + Time.TIME + Time.MILLIS + Time.TZZ),\n+  ORDINAL_DATE_TIME_NO_MILLIS(Date.ORDINAL_DATE + Time.T + Time.TIME + Time.TZZ),\n+\n+  TIME(Time.TIME + Time.MILLIS + Time.TZZ),\n+  TIME_NO_MILLIS(Time.TIME + Time.TZZ),\n+\n+  T_TIME(Time.T + Time.TIME + Time.MILLIS + Time.TZZ),\n+  T_TIME_NO_MILLIS(Time.T + Time.TIME + Time.TZZ),\n+\n+  WEEK_DATE(Date.WEEK_DATE),\n+  WEEK_DATE_TIME(Date.WEEK_DATE + Time.T + Time.TIME + Time.MILLIS + Time.TZZ),\n+  WEEK_DATE_TIME_NO_MILLIS(Date.WEEK_DATE + Time.T + Time.TIME + Time.TZZ),\n+\n+  // Note: input mapping is \"weekyear\", but output value is \"week_year\"\n+  WEEK_YEAR(Date.WEEKYEAR),\n+  WEEKYEAR_WEEK(Date.WEEKYEAR_WEEK),\n+  WEEKYEAR_WEEK_DAY(Date.WEEK_DATE),\n+\n+  YEAR(Date.YEAR),\n+  YEAR_MONTH(Date.YEAR_MONTH),\n+  YEAR_MONTH_DAY(Date.DATE);\n+\n+  private static class Date {\n+    static String BASIC_DATE = \"yyyyMMdd\";\n+    static String BASIC_ORDINAL_DATE = \"yyyyDDD\";\n+    static String BASIC_WEEK_DATE = \"YYYY'W'wwu\";\n+\n+    static String DATE = \"yyyy-MM-dd\";\n+    static String ORDINAL_DATE = \"yyyy-DDD\";\n+\n+    static String YEAR = \"yyyy\";\n+    static String YEAR_MONTH = \"yyyy-MM\";\n+\n+    static String WEEK_DATE = \"YYYY-'W'ww-u\";\n+    static String WEEKYEAR = \"YYYY\";\n+    static String WEEKYEAR_WEEK = \"YYYY-'W'ww\";\n+  }\n+\n+  private static class Time {\n+    static String T = \"'T'\";\n+    static String BASIC_TIME = \"HHmmss\";\n+    static String TIME = \"HH:mm:ss\";\n+\n+    static String HOUR = \"HH\";\n+    static String HOUR_MINUTE = \"HH:mm\";\n+\n+    static String MILLIS = \".SSS\";\n+    static String TZ = \"Z\";\n+    static String TZZ = \"XX\";\n+  }\n+\n+  private String formatString;\n+\n+  DateFormat(String formatString) {\n+    this.formatString = formatString;\n+  }\n+\n+  public String getFormatString() {\n+    return formatString;\n+  }\n+\n+  public String nameLowerCase() {\n+    return name().toLowerCase();\n+  }\n+\n+  public static String getFormattedDate(java.util.Date date, String dateFormat) {\n+    Instant instant = date.toInstant();\n+    ZonedDateTime zdt = ZonedDateTime.ofInstant(instant, ZoneId.of(\"Etc/UTC\"));\n+    // return zdt.format(DateTimeFormatter.ofPattern(dateFormat));\n+    return zdt.format(DateTimeFormatter.ofPattern(dateFormat));\n+    // return DateTimeFormatter.ofLocalizedDateTime().format(date.toInstant());\n+    // SimpleDateFormat formatter = new SimpleDateFormat(dateFormat);\n+    // formatter.applyLocalizedPattern(dateFormat);\n+    // formatter.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    // return formatter.format(date);\n+    // formatter.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ae4195a41419305c44483944bae841795d59393"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY0OTUwMw==", "bodyText": "Please add JavaDoc for new class and its public methods.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/367#discussion_r381649503", "createdAt": "2020-02-20T01:33:04Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/DateFieldFormatter.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.format;\n+\n+import org.apache.commons.lang3.time.DateUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.text.ParseException;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DateFieldFormatter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ae4195a41419305c44483944bae841795d59393"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY1NTgzMg==", "bodyText": "I think you should pick columns of DATE type into a Set in your constructor to save this for loop. Otherwise it runs for each row in the result set.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/367#discussion_r381655832", "createdAt": "2020-02-20T01:44:27Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/DateFieldFormatter.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.format;\n+\n+import org.apache.commons.lang3.time.DateUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.text.ParseException;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DateFieldFormatter {\n+    private static final Logger LOG = LogManager.getLogger(DateFieldFormatter.class);\n+    private static final String FORMAT_JDBC = \"yyyy-MM-dd HH:mm:ss.SSS\";\n+\n+    private static final String FORMAT_DOT_DATE_AND_TIME = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\";\n+    private static final String FORMAT_DOT_KIBANA_SAMPLE_DATA_LOGS_EXCEPTION = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";\n+    private static final String FORMAT_DOT_KIBANA_SAMPLE_DATA_FLIGHTS_EXCEPTION = \"yyyy-MM-dd'T'HH:mm:ss\";\n+    private static final String FORMAT_DOT_KIBANA_SAMPLE_DATA_ECOMMERCE_EXCEPTION = \"yyyy-MM-dd'T'HH:mm:ssXXX\";\n+    private static final String FORMAT_DOT_DATE = \"yyyy-MM-dd\";\n+\n+    private final Map<String, String> dateFieldFormatMap;\n+    private List<Schema.Column> columns;\n+\n+    public DateFieldFormatter(Map<String, String> dateFieldFormatMap, List<Schema.Column> columns) {\n+        this.dateFieldFormatMap = dateFieldFormatMap;\n+        this.columns = columns;\n+    }\n+\n+    public void applyJDBCDateFormat(Map<String, Object> rowSource) {\n+        for (Schema.Column column : columns) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ae4195a41419305c44483944bae841795d59393"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY1NzY0Ng==", "bodyText": "I think you may not need to touch this class or the LocalClusterState either. Because LocalClusterState has the mapping, you can just use it outside or in your new added Formatter class.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/367#discussion_r381657646", "createdAt": "2020-02-20T01:47:44Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/visitor/ESMappingLoader.java", "diffHunk": "@@ -105,9 +105,25 @@ private void defineIndexType(String indexName) {\n \n     private void loadAllFieldsWithType(String indexName) {\n         FieldMappings mappings = getFieldMappings(indexName);\n+        saveDateFormats(mappings);\n         mappings.flat(this::defineFieldName);\n     }\n \n+    private void saveDateFormats(FieldMappings mappings) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ae4195a41419305c44483944bae841795d59393"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "428f18970e40190eed673188b99f41a613730bc8", "author": {"user": {"login": "jordanw-bq", "name": "Jordan Wilson"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/428f18970e40190eed673188b99f41a613730bc8", "committedDate": "2020-02-21T22:13:19Z", "message": "addressed code review comments and build failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65a2e4934815568369d5ed538be44a4100092dcd", "author": {"user": {"login": "jordanw-bq", "name": "Jordan Wilson"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/65a2e4934815568369d5ed538be44a4100092dcd", "committedDate": "2020-02-21T22:22:26Z", "message": "Merge branch 'master' into 342-standardized-datetime\n\n# Conflicts:\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/SelectResultSet.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e430222dba5fd1687bacb6a1febaef9cdad33dd", "author": {"user": {"login": "jordanw-bq", "name": "Jordan Wilson"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/0e430222dba5fd1687bacb6a1febaef9cdad33dd", "committedDate": "2020-02-21T22:25:12Z", "message": "post-merge fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1a87102569779beb1f882847226693af25878b8", "author": {"user": {"login": "jordanw-bq", "name": "Jordan Wilson"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/a1a87102569779beb1f882847226693af25878b8", "committedDate": "2020-02-21T23:30:10Z", "message": "additional fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTgyMTA5", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/367#pullrequestreview-362982109", "createdAt": "2020-02-21T23:55:09Z", "commit": {"oid": "a1a87102569779beb1f882847226693af25878b8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMzo1NToxMFrOFtH09A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMzo1NToxMFrOFtH09A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1ODQ4NA==", "bodyText": "As my other comment said, this is not thread safe.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/367#discussion_r382858484", "createdAt": "2020-02-21T23:55:10Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/parser/FieldMaker.java", "diffHunk": "@@ -118,6 +119,7 @@ private Field makeFieldImpl(SQLExpr expr, String alias, String tableAlias) throw\n             if (alias == null) {\n                 alias = \"cast_\" + castExpr.getExpr().toString();\n             }\n+            LocalClusterState.state().putAliasInMap(alias, castExpr.getExpr().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1a87102569779beb1f882847226693af25878b8"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f92185c4a1ad4b3767e57d6b183f56398fcb787a", "author": {"user": {"login": "jordanw-bq", "name": "Jordan Wilson"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/f92185c4a1ad4b3767e57d6b183f56398fcb787a", "committedDate": "2020-02-24T20:02:58Z", "message": "get CAST alias info from result set class, rather than cluster state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f31ca79ba9018701d291bf845198468543bef7b", "author": {"user": {"login": "jordanw-bq", "name": "Jordan Wilson"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/6f31ca79ba9018701d291bf845198468543bef7b", "committedDate": "2020-02-24T20:06:05Z", "message": "remove unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0d406ae9c19d6bcf78971b690a2a0bdaf0a8dd4", "author": {"user": {"login": "jordanw-bq", "name": "Jordan Wilson"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/e0d406ae9c19d6bcf78971b690a2a0bdaf0a8dd4", "committedDate": "2020-02-24T20:09:39Z", "message": "remove unused import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NDYyNDQx", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/367#pullrequestreview-364462441", "createdAt": "2020-02-25T21:30:34Z", "commit": {"oid": "e0d406ae9c19d6bcf78971b690a2a0bdaf0a8dd4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NTIxMTc3", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/367#pullrequestreview-364521177", "createdAt": "2020-02-25T23:18:39Z", "commit": {"oid": "e0d406ae9c19d6bcf78971b690a2a0bdaf0a8dd4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMzoxODozOVrOFuY2Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMzoxODozOVrOFuY2Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE4NTg3OA==", "bodyText": "What is the difference between DateFormat.Date and FORMAT_DOT_DATE?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/367#discussion_r384185878", "createdAt": "2020-02-25T23:18:39Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/DateFieldFormatter.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.LocalClusterState;\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.mapping.FieldMappings;\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.mapping.TypeMappings;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.commons.lang3.time.DateUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.text.ParseException;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Formatter to transform date fields into a consistent format for consumption by clients.\n+ */\n+public class DateFieldFormatter {\n+    private static final Logger LOG = LogManager.getLogger(DateFieldFormatter.class);\n+    private static final String FORMAT_JDBC = \"yyyy-MM-dd HH:mm:ss.SSS\";\n+\n+    private static final String FORMAT_DOT_DATE_AND_TIME = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\";\n+    private static final String FORMAT_DOT_KIBANA_SAMPLE_DATA_LOGS_EXCEPTION = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";\n+    private static final String FORMAT_DOT_KIBANA_SAMPLE_DATA_FLIGHTS_EXCEPTION = \"yyyy-MM-dd'T'HH:mm:ss\";\n+    private static final String FORMAT_DOT_KIBANA_SAMPLE_DATA_ECOMMERCE_EXCEPTION = \"yyyy-MM-dd'T'HH:mm:ssXXX\";\n+    private static final String FORMAT_DOT_DATE = \"yyyy-MM-dd\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d406ae9c19d6bcf78971b690a2a0bdaf0a8dd4"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2583eedd5f1d05cc29132477ead47af06408ce35", "author": {"user": {"login": "jordanw-bq", "name": "Jordan Wilson"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/2583eedd5f1d05cc29132477ead47af06408ce35", "committedDate": "2020-02-25T23:25:23Z", "message": "reduce duplication & reference enum value"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NTMwOTI4", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/367#pullrequestreview-364530928", "createdAt": "2020-02-25T23:42:57Z", "commit": {"oid": "e0d406ae9c19d6bcf78971b690a2a0bdaf0a8dd4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMzo0Mjo1N1rOFuZZTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMzo0Mjo1N1rOFuZZTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5NDg5Mg==", "bodyText": "How does multiple date format covered?\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/date.html#multiple-date-formats", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/367#discussion_r384194892", "createdAt": "2020-02-25T23:42:57Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/DateFieldFormatter.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.LocalClusterState;\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.mapping.FieldMappings;\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.mapping.TypeMappings;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.commons.lang3.time.DateUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.text.ParseException;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Formatter to transform date fields into a consistent format for consumption by clients.\n+ */\n+public class DateFieldFormatter {\n+    private static final Logger LOG = LogManager.getLogger(DateFieldFormatter.class);\n+    private static final String FORMAT_JDBC = \"yyyy-MM-dd HH:mm:ss.SSS\";\n+\n+    private static final String FORMAT_DOT_DATE_AND_TIME = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\";\n+    private static final String FORMAT_DOT_KIBANA_SAMPLE_DATA_LOGS_EXCEPTION = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";\n+    private static final String FORMAT_DOT_KIBANA_SAMPLE_DATA_FLIGHTS_EXCEPTION = \"yyyy-MM-dd'T'HH:mm:ss\";\n+    private static final String FORMAT_DOT_KIBANA_SAMPLE_DATA_ECOMMERCE_EXCEPTION = \"yyyy-MM-dd'T'HH:mm:ssXXX\";\n+    private static final String FORMAT_DOT_DATE = \"yyyy-MM-dd\";\n+\n+    private final Map<String, String> dateFieldFormatMap;\n+    private final Map<String, String> fieldAliasMap;\n+    private Set<String> dateColumns;\n+\n+    public DateFieldFormatter(String indexName, List<Schema.Column> columns, Map<String, String> fieldAliasMap) {\n+        this.dateFieldFormatMap = getDateFieldFormatMap(indexName);\n+        this.dateColumns = getDateColumns(columns);\n+        this.fieldAliasMap = fieldAliasMap;\n+    }\n+\n+    @VisibleForTesting\n+    protected DateFieldFormatter(Map<String, String> dateFieldFormatMap,\n+                                 List<Schema.Column> columns,\n+                                 Map<String, String> fieldAliasMap) {\n+        this.dateFieldFormatMap = dateFieldFormatMap;\n+        this.dateColumns = getDateColumns(columns);\n+        this.fieldAliasMap = fieldAliasMap;\n+    }\n+\n+    /**\n+     * Apply the JDBC date format ({@code yyyy-MM-dd HH:mm:ss.SSS}) to date values in the current row.\n+     *\n+     * @param rowSource The row in which to format the date values.\n+     */\n+    public void applyJDBCDateFormat(Map<String, Object> rowSource) {\n+        for (String columnName : dateColumns) {\n+            Object columnOriginalDate = rowSource.get(columnName);\n+            if (columnOriginalDate == null) {\n+                // Don't try to parse null date values\n+                continue;\n+            }\n+\n+            String columnFormat = getFormatForColumn(columnName);\n+            if (columnFormat == null) {\n+                LOG.warn(\"Could not determine date format for column {}; returning original value\", columnName);\n+                continue;\n+            }\n+            DateFormat format = DateFormat.valueOf(columnFormat.toUpperCase());\n+\n+            Date date = parseDateString(format, columnOriginalDate.toString());\n+            if (date != null) {\n+                rowSource.put(columnName, DateFormat.getFormattedDate(date, FORMAT_JDBC));\n+            } else {\n+                LOG.warn(\"Could not parse date value; returning original value\");\n+            }\n+        }\n+    }\n+\n+    private String getFormatForColumn(String columnName) {\n+        // Handle special cases for column names\n+        if (fieldAliasMap.get(columnName) != null) {\n+            // Column was aliased, and we need to find the base name for the column\n+            columnName = fieldAliasMap.get(columnName);\n+        } else if (columnName.split(\"\\\\.\").length == 2) {\n+            // Column is part of a join, and is qualified by the table alias\n+            columnName = columnName.split(\"\\\\.\")[1];\n+        }\n+        return dateFieldFormatMap.get(columnName);\n+    }\n+\n+    private Set<String> getDateColumns(List<Schema.Column> columns) {\n+        return columns.stream()\n+            .filter(column -> column.getType().equals(Schema.Type.DATE.nameLowerCase()))\n+            .map(Schema.Column::getName)\n+            .collect(Collectors.toSet());\n+    }\n+\n+    private Map<String, String> getDateFieldFormatMap(String indexName) {\n+        LocalClusterState state = LocalClusterState.state();\n+        Map<String, String> formatMap = new HashMap<>();\n+\n+        String[] indices = indexName.split(\"\\\\|\");\n+        Collection<TypeMappings> typeProperties = state.getFieldMappings(indices)\n+            .allMappings();\n+\n+        for (TypeMappings mappings: typeProperties) {\n+            FieldMappings fieldMappings = mappings.firstMapping();\n+            for (Map.Entry<String, Map<String, Object>> field : fieldMappings.data().entrySet()) {\n+                String fieldName = field.getKey();\n+                Map<String, Object> properties = field.getValue();\n+\n+                if (properties.containsKey(\"format\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d406ae9c19d6bcf78971b690a2a0bdaf0a8dd4"}, "originalPosition": 129}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NTMxNTM5", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/367#pullrequestreview-364531539", "createdAt": "2020-02-25T23:44:35Z", "commit": {"oid": "e0d406ae9c19d6bcf78971b690a2a0bdaf0a8dd4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMzo0NDozNVrOFuZbfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMzo0NDozNVrOFuZbfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5NTQ1NQ==", "bodyText": "Is it possible the columnFormat is not included in the DateFormat? For example, custom-date-formats, https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html#custom-date-formats", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/367#discussion_r384195455", "createdAt": "2020-02-25T23:44:35Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/DateFieldFormatter.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.LocalClusterState;\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.mapping.FieldMappings;\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.mapping.TypeMappings;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.commons.lang3.time.DateUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.text.ParseException;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Formatter to transform date fields into a consistent format for consumption by clients.\n+ */\n+public class DateFieldFormatter {\n+    private static final Logger LOG = LogManager.getLogger(DateFieldFormatter.class);\n+    private static final String FORMAT_JDBC = \"yyyy-MM-dd HH:mm:ss.SSS\";\n+\n+    private static final String FORMAT_DOT_DATE_AND_TIME = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\";\n+    private static final String FORMAT_DOT_KIBANA_SAMPLE_DATA_LOGS_EXCEPTION = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";\n+    private static final String FORMAT_DOT_KIBANA_SAMPLE_DATA_FLIGHTS_EXCEPTION = \"yyyy-MM-dd'T'HH:mm:ss\";\n+    private static final String FORMAT_DOT_KIBANA_SAMPLE_DATA_ECOMMERCE_EXCEPTION = \"yyyy-MM-dd'T'HH:mm:ssXXX\";\n+    private static final String FORMAT_DOT_DATE = \"yyyy-MM-dd\";\n+\n+    private final Map<String, String> dateFieldFormatMap;\n+    private final Map<String, String> fieldAliasMap;\n+    private Set<String> dateColumns;\n+\n+    public DateFieldFormatter(String indexName, List<Schema.Column> columns, Map<String, String> fieldAliasMap) {\n+        this.dateFieldFormatMap = getDateFieldFormatMap(indexName);\n+        this.dateColumns = getDateColumns(columns);\n+        this.fieldAliasMap = fieldAliasMap;\n+    }\n+\n+    @VisibleForTesting\n+    protected DateFieldFormatter(Map<String, String> dateFieldFormatMap,\n+                                 List<Schema.Column> columns,\n+                                 Map<String, String> fieldAliasMap) {\n+        this.dateFieldFormatMap = dateFieldFormatMap;\n+        this.dateColumns = getDateColumns(columns);\n+        this.fieldAliasMap = fieldAliasMap;\n+    }\n+\n+    /**\n+     * Apply the JDBC date format ({@code yyyy-MM-dd HH:mm:ss.SSS}) to date values in the current row.\n+     *\n+     * @param rowSource The row in which to format the date values.\n+     */\n+    public void applyJDBCDateFormat(Map<String, Object> rowSource) {\n+        for (String columnName : dateColumns) {\n+            Object columnOriginalDate = rowSource.get(columnName);\n+            if (columnOriginalDate == null) {\n+                // Don't try to parse null date values\n+                continue;\n+            }\n+\n+            String columnFormat = getFormatForColumn(columnName);\n+            if (columnFormat == null) {\n+                LOG.warn(\"Could not determine date format for column {}; returning original value\", columnName);\n+                continue;\n+            }\n+            DateFormat format = DateFormat.valueOf(columnFormat.toUpperCase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d406ae9c19d6bcf78971b690a2a0bdaf0a8dd4"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5b2eac464d872595be216b5a2d356a25633ac63", "author": {"user": {"login": "jordanw-bq", "name": "Jordan Wilson"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/b5b2eac464d872595be216b5a2d356a25633ac63", "committedDate": "2020-02-26T00:53:21Z", "message": "setting default timezone to UTC while parsing date values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5649f001d5d7635d64df5adf2529ad9a80b6332", "author": {"user": {"login": "jordanw-bq", "name": "Jordan Wilson"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/e5649f001d5d7635d64df5adf2529ad9a80b6332", "committedDate": "2020-02-26T20:19:28Z", "message": "add support for custom & multiple formats"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1532683b470d5018ce8e85ff7f766c4553ac33f8", "author": {"user": {"login": "jordanw-bq", "name": "Jordan Wilson"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/1532683b470d5018ce8e85ff7f766c4553ac33f8", "committedDate": "2020-02-27T00:12:49Z", "message": "add case for Kibana flights date data with T but no time field"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MDgzOTc2", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/367#pullrequestreview-366083976", "createdAt": "2020-02-28T00:02:58Z", "commit": {"oid": "1532683b470d5018ce8e85ff7f766c4553ac33f8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NTU1Nzgw", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/367#pullrequestreview-366555780", "createdAt": "2020-02-28T17:14:49Z", "commit": {"oid": "1532683b470d5018ce8e85ff7f766c4553ac33f8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 750, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}