{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5NzkwMDg2", "number": 931, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMDowODoxOFrOFFUylw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMDowODoxOFrOFFUylw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTI3ODMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/AggregatorFunction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMDowODoxOFrOIFypTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMDowODoxOFrOIFypTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk0MzU2Ng==", "bodyText": "I assume SQL COUNT() should work with all types. If so, is it more maintainable to generate function signatures from all core types like this way: \n  \n    \n      sql/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/predicate/BinaryPredicateOperator.java\n    \n    \n         Line 172\n      in\n      2aeb80b\n    \n    \n    \n    \n\n        \n          \n           ExprCoreType.coreTypes().stream()", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/931#discussion_r542943566", "createdAt": "2020-12-15T00:08:18Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/AggregatorFunction.java", "diffHunk": "@@ -92,6 +94,12 @@ private static FunctionResolver count() {\n                 arguments -> new CountAggregator(arguments, INTEGER))\n             .put(new FunctionSignature(functionName, Collections.singletonList(BOOLEAN)),\n                 arguments -> new CountAggregator(arguments, INTEGER))\n+            .put(new FunctionSignature(functionName, Collections.singletonList(DATE)),\n+                arguments -> new CountAggregator(arguments, INTEGER))\n+            .put(new FunctionSignature(functionName, Collections.singletonList(DATETIME)),\n+                arguments -> new CountAggregator(arguments, INTEGER))\n+            .put(new FunctionSignature(functionName, Collections.singletonList(TIMESTAMP)),\n+                arguments -> new CountAggregator(arguments, INTEGER))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c826138ef833996125ddc9f2455993f7f1c7bcff"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1875, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}