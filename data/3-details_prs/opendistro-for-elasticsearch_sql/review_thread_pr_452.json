{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMDI1MDgy", "number": 452, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjowNzo1N1rOD4HAxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjowNzo1N1rOD4HAxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTYxNzMzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/AggregationIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjowNzo1N1rOGOwPQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjowODo0OVrOGO8C2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEyMzU4Nw==", "bodyText": "So this one is testing ORDER BY count DESC, should we assert the rows in reversed order?\nProbably we need to replace the Hamcrest matcher containsInAnyOrder:\n    @SuppressWarnings(\"unchecked\")\n    public static void verifyDataRows(JSONObject response, Matcher<JSONArray>... matchers) {\n        verify(response.getJSONArray(\"datarows\"), matchers);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static <T> void verify(JSONArray array, Matcher<T>... matchers) {\n        List<T> objects = new ArrayList<>();\n        array.iterator().forEachRemaining(o -> objects.add((T) o));\n        assertEquals(matchers.length, objects.size());\n        assertThat(objects, containsInAnyOrder(matchers));\n    }", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/452#discussion_r418123587", "createdAt": "2020-04-30T16:07:57Z", "author": {"login": "dai-chen"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/AggregationIT.java", "diffHunk": "@@ -426,59 +426,61 @@ public void termsWithOrder() throws Exception {\n     }\n \n     @Test\n-    public void orderByAscTest() throws IOException {\n-\n-        JSONObject result = executeQuery(String.format(\"SELECT COUNT(*) FROM %s GROUP BY age ORDER BY COUNT(*)\",\n-                TEST_INDEX_ACCOUNT));\n-        JSONObject ageAgg = getAggregation(result, \"age\");\n-        JSONArray buckets = ageAgg.getJSONArray(\"buckets\");\n-\n-        int previousBucketCount = 0;\n-        int currentBucketCount;\n-        for (int i = 0; i < buckets.length(); ++i) {\n-            currentBucketCount = (int) buckets.query(String.format(Locale.ROOT, \"/%d/COUNT(*)/value\", i));\n-\n-            if (0 == i) {\n-                previousBucketCount = currentBucketCount;\n-                continue;\n-            }\n+    public void orderByAscTest() {\n+        JSONObject response = executeJdbcRequest(String.format(\"SELECT COUNT(*) FROM %s \" +\n+                \"GROUP BY gender ORDER BY COUNT(*)\", TEST_INDEX_ACCOUNT));\n+\n+        verifySchema(response, schema(\"COUNT(*)\", null, \"integer\"));\n+        verifyDataRows(response,\n+                rows(493),\n+                rows(507));\n+    }\n \n-            Assert.assertThat(currentBucketCount, greaterThanOrEqualTo(previousBucketCount));\n-            previousBucketCount = currentBucketCount;\n-        }\n+    @Test\n+    public void orderByAliasAscTest() {\n+        JSONObject response = executeJdbcRequest(String.format(\"SELECT COUNT(*) as count FROM %s \" +\n+                \"GROUP BY gender ORDER BY count\", TEST_INDEX_ACCOUNT));\n+\n+        verifySchema(response, schema(\"count\", \"count\", \"integer\"));\n+        verifyDataRows(response,\n+                rows(493),\n+                rows(507));\n     }\n \n     @Test\n     public void orderByDescTest() throws IOException {\n+        JSONObject response = executeJdbcRequest(String.format(\"SELECT COUNT(*) FROM %s \" +\n+                \"GROUP BY gender ORDER BY COUNT(*) DESC\", TEST_INDEX_ACCOUNT));\n \n-        JSONObject result = executeQuery(String.format(\"SELECT COUNT(*) FROM %s GROUP BY age\" +\n-                \" ORDER BY COUNT(*) DESC\", TEST_INDEX_ACCOUNT));\n-        JSONObject ageAgg = getAggregation(result, \"age\");\n-        JSONArray buckets = ageAgg.getJSONArray(\"buckets\");\n-\n-        int previousBucketCount = 0;\n-        int currentBucketCount;\n-        for (int i = 0; i < buckets.length(); ++i) {\n-            currentBucketCount = (int) buckets.query(String.format(Locale.ROOT, \"/%d/COUNT(*)/value\", i));\n-\n-            if (0 == i) {\n-                previousBucketCount = currentBucketCount;\n-                continue;\n-            }\n+        verifySchema(response, schema(\"COUNT(*)\", null, \"integer\"));\n+        verifyDataRows(response,\n+                rows(493),\n+                rows(507));\n+    }\n \n-            Assert.assertThat(currentBucketCount, lessThanOrEqualTo(previousBucketCount));\n-            previousBucketCount = currentBucketCount;\n-        }\n+    @Test\n+    public void orderByAliasDescTest() throws IOException {\n+        JSONObject response = executeJdbcRequest(String.format(\"SELECT COUNT(*) as count FROM %s \" +\n+                \"GROUP BY gender ORDER BY count DESC\", TEST_INDEX_ACCOUNT));\n+\n+        verifySchema(response, schema(\"count\", \"count\", \"integer\"));\n+        verifyDataRows(response,\n+                rows(493),\n+                rows(507));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72bb7a27da9f7333992840af266316a756795169"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNzAxOQ==", "bodyText": "sure. done.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/452#discussion_r418317019", "createdAt": "2020-04-30T22:08:49Z", "author": {"login": "penghuo"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/AggregationIT.java", "diffHunk": "@@ -426,59 +426,61 @@ public void termsWithOrder() throws Exception {\n     }\n \n     @Test\n-    public void orderByAscTest() throws IOException {\n-\n-        JSONObject result = executeQuery(String.format(\"SELECT COUNT(*) FROM %s GROUP BY age ORDER BY COUNT(*)\",\n-                TEST_INDEX_ACCOUNT));\n-        JSONObject ageAgg = getAggregation(result, \"age\");\n-        JSONArray buckets = ageAgg.getJSONArray(\"buckets\");\n-\n-        int previousBucketCount = 0;\n-        int currentBucketCount;\n-        for (int i = 0; i < buckets.length(); ++i) {\n-            currentBucketCount = (int) buckets.query(String.format(Locale.ROOT, \"/%d/COUNT(*)/value\", i));\n-\n-            if (0 == i) {\n-                previousBucketCount = currentBucketCount;\n-                continue;\n-            }\n+    public void orderByAscTest() {\n+        JSONObject response = executeJdbcRequest(String.format(\"SELECT COUNT(*) FROM %s \" +\n+                \"GROUP BY gender ORDER BY COUNT(*)\", TEST_INDEX_ACCOUNT));\n+\n+        verifySchema(response, schema(\"COUNT(*)\", null, \"integer\"));\n+        verifyDataRows(response,\n+                rows(493),\n+                rows(507));\n+    }\n \n-            Assert.assertThat(currentBucketCount, greaterThanOrEqualTo(previousBucketCount));\n-            previousBucketCount = currentBucketCount;\n-        }\n+    @Test\n+    public void orderByAliasAscTest() {\n+        JSONObject response = executeJdbcRequest(String.format(\"SELECT COUNT(*) as count FROM %s \" +\n+                \"GROUP BY gender ORDER BY count\", TEST_INDEX_ACCOUNT));\n+\n+        verifySchema(response, schema(\"count\", \"count\", \"integer\"));\n+        verifyDataRows(response,\n+                rows(493),\n+                rows(507));\n     }\n \n     @Test\n     public void orderByDescTest() throws IOException {\n+        JSONObject response = executeJdbcRequest(String.format(\"SELECT COUNT(*) FROM %s \" +\n+                \"GROUP BY gender ORDER BY COUNT(*) DESC\", TEST_INDEX_ACCOUNT));\n \n-        JSONObject result = executeQuery(String.format(\"SELECT COUNT(*) FROM %s GROUP BY age\" +\n-                \" ORDER BY COUNT(*) DESC\", TEST_INDEX_ACCOUNT));\n-        JSONObject ageAgg = getAggregation(result, \"age\");\n-        JSONArray buckets = ageAgg.getJSONArray(\"buckets\");\n-\n-        int previousBucketCount = 0;\n-        int currentBucketCount;\n-        for (int i = 0; i < buckets.length(); ++i) {\n-            currentBucketCount = (int) buckets.query(String.format(Locale.ROOT, \"/%d/COUNT(*)/value\", i));\n-\n-            if (0 == i) {\n-                previousBucketCount = currentBucketCount;\n-                continue;\n-            }\n+        verifySchema(response, schema(\"COUNT(*)\", null, \"integer\"));\n+        verifyDataRows(response,\n+                rows(493),\n+                rows(507));\n+    }\n \n-            Assert.assertThat(currentBucketCount, lessThanOrEqualTo(previousBucketCount));\n-            previousBucketCount = currentBucketCount;\n-        }\n+    @Test\n+    public void orderByAliasDescTest() throws IOException {\n+        JSONObject response = executeJdbcRequest(String.format(\"SELECT COUNT(*) as count FROM %s \" +\n+                \"GROUP BY gender ORDER BY count DESC\", TEST_INDEX_ACCOUNT));\n+\n+        verifySchema(response, schema(\"count\", \"count\", \"integer\"));\n+        verifyDataRows(response,\n+                rows(493),\n+                rows(507));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEyMzU4Nw=="}, "originalCommit": {"oid": "72bb7a27da9f7333992840af266316a756795169"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2063, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}