{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNjQ1NDgz", "number": 663, "title": "Expression pushdown optimization", "bodyText": "Issue #, if available:\nDescription of changes:\n\nNew script language: Register the expression in new query engine as a script language in Elasticsearch. In this case, we don't need to maintain painless source for each expression.\nThe first half: serialize the expression and send it along with DSL request.\nThe second half: the code in DSL is deserialized to run on each node as if built-in painless script.\nExpression visitor: Add expression node visitor because both first and second half needs to visit expression tree.\n\nLimitation:\n\nLucene query optimization: For now, the entire expression would be pushed down to a script query. There will be another PR for Lucene query API pushdown soon.\nMulti-field name: Assumption is made that the inner field name is always \"keyword\", so \"text.keyword\" is used to get doc value for multi-field.\nSerialization: for now JDK serializer is in use. Due to not all expressions serializable, ex. arithmetic expression, pipelining filter operator will be used as before if serialization error happens.\n\nTesting: Add UT and pass all ITs. Because of explain API missing in new engine, new IT will be added later.\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-08-05T21:12:19Z", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663", "merged": true, "mergeCommit": {"oid": "032e3ba39135172b72e6a809ca106d64a229e2a2"}, "closed": true, "closedAt": "2020-08-11T15:42:18Z", "author": {"login": "dai-chen"}, "timelineItems": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc2zYeWgH2gAyNDYzNjQ1NDgzOjUxOThhMzhiMmNjNWZjNjY0M2RkNGJmZWUyNDA1NDc3Nzk1NDlkY2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc94lDUgH2gAyNDYzNjQ1NDgzOjU5NTI5MzA0ZmMyZTA0ZDY1MGUwZmFhNDEwMzUwMjBmMDk1YTcyNWQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5198a38b2cc5fc6643dd4bfee240547779549dcd", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/5198a38b2cc5fc6643dd4bfee240547779549dcd", "committedDate": "2020-07-20T15:29:53Z", "message": "Test serializer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75005eb7382ec2590e61d5ee2c6a845e5081d8a8", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/75005eb7382ec2590e61d5ee2c6a845e5081d8a8", "committedDate": "2020-07-30T23:20:52Z", "message": "Merge branch 'develop' into expression-pushdown-optimization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "705397b12a35ae6c65aa5ce39478389f58253c52", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/705397b12a35ae6c65aa5ce39478389f58253c52", "committedDate": "2020-07-31T00:02:13Z", "message": "Add JDK serializer impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "defdd08a12f331edec92c2749c612677b5394f6e", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/defdd08a12f331edec92c2749c612677b5394f6e", "committedDate": "2020-07-31T17:31:26Z", "message": "Add UT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a51c26942d3477d845543a5f7f377b7f397f4bc", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/6a51c26942d3477d845543a5f7f377b7f397f4bc", "committedDate": "2020-07-31T21:57:52Z", "message": "Support boolean literal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24a44238e0ea056668bc4a80c98126b4964186a4", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/24a44238e0ea056668bc4a80c98126b4964186a4", "committedDate": "2020-07-31T22:04:29Z", "message": "Add UT for comparison expression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2283de19ba8c6395f714a65d20de10ee3b29546a", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/2283de19ba8c6395f714a65d20de10ee3b29546a", "committedDate": "2020-07-31T22:10:04Z", "message": "Add UT for function expression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd377270e1ac5440d24e66720804cbb8567ce47d", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/bd377270e1ac5440d24e66720804cbb8567ce47d", "committedDate": "2020-07-31T22:16:27Z", "message": "Add UT for multiple fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e4364b6ff3fab6c0f9450637e9941714920c48d", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/8e4364b6ff3fab6c0f9450637e9941714920c48d", "committedDate": "2020-08-03T20:15:56Z", "message": "Use expr value factory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e42d86bdc588e46acd19d4f1f03f1527240e511", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/5e42d86bdc588e46acd19d4f1f03f1527240e511", "committedDate": "2020-08-03T23:55:23Z", "message": "Add comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1614040dfc25499c32e8448390a8fbd518657d80", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/1614040dfc25499c32e8448390a8fbd518657d80", "committedDate": "2020-08-03T23:55:55Z", "message": "Merge branch 'develop' into expression-pushdown-optimization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cca0479ae69839d559c6f5479a8b58b67170828b", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/cca0479ae69839d559c6f5479a8b58b67170828b", "committedDate": "2020-08-04T15:50:35Z", "message": "Test coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de03a5806d8eed5e1bac80270b74a35436d7b96e", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/de03a5806d8eed5e1bac80270b74a35436d7b96e", "committedDate": "2020-08-04T21:14:02Z", "message": "Refactor package and class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f77a7399457e2a4336c284643bf22e78aa07d152", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/f77a7399457e2a4336c284643bf22e78aa07d152", "committedDate": "2020-08-04T21:25:39Z", "message": "Add UT for script factory and leaf factory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c95c2e1db8b0aeb29a19a28a55a0a2f6ff10c619", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/c95c2e1db8b0aeb29a19a28a55a0a2f6ff10c619", "committedDate": "2020-08-05T00:17:06Z", "message": "Add support for date doc value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3193fdcc8befbde1fcd5979cba1b5e9e21b105de", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/3193fdcc8befbde1fcd5979cba1b5e9e21b105de", "committedDate": "2020-08-05T00:41:24Z", "message": "More UT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f29b402fde847ed0794f231a8e09f425cee9f9f3", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/f29b402fde847ed0794f231a8e09f425cee9f9f3", "committedDate": "2020-08-05T15:17:45Z", "message": "Refactor edge case UT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bb9405fe4f195211996de1169fa0f5500e35f9e", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/8bb9405fe4f195211996de1169fa0f5500e35f9e", "committedDate": "2020-08-05T16:11:55Z", "message": "Add UT for value factory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c0b0d54aad0f83898e97fd0fd3bbce7778bfbf3", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/0c0b0d54aad0f83898e97fd0fd3bbce7778bfbf3", "committedDate": "2020-08-05T16:18:59Z", "message": "Add UT for serializer error case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45bf93d368bb48572d847914964f7b9ab6212a6d", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/45bf93d368bb48572d847914964f7b9ab6212a6d", "committedDate": "2020-08-05T16:48:31Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ccd3845e3431eb63c54939f491580b1c06f2919", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/8ccd3845e3431eb63c54939f491580b1c06f2919", "committedDate": "2020-08-05T21:37:16Z", "message": "Add expression visitor and UT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d0c97b642b58a1c32b6de878e3dde47ddec3108", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/4d0c97b642b58a1c32b6de878e3dde47ddec3108", "committedDate": "2020-08-05T21:52:36Z", "message": "Use expression visitor in script engine"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f839f8fea18e54891bb030b6794135aa22ac1016", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/f839f8fea18e54891bb030b6794135aa22ac1016", "committedDate": "2020-08-05T22:48:13Z", "message": "Add UT for visitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bac7b589a60f2de473bbe6924e5c6095f5911d1", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/0bac7b589a60f2de473bbe6924e5c6095f5911d1", "committedDate": "2020-08-05T23:10:44Z", "message": "Push down query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da2ece36b77c8d02fe31cd532851e4d138612c15", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/da2ece36b77c8d02fe31cd532851e4d138612c15", "committedDate": "2020-08-06T01:36:14Z", "message": "Handle text keyword"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81acd11a2ef184d7d8605e0a48acd048854a3a12", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/81acd11a2ef184d7d8605e0a48acd048854a3a12", "committedDate": "2020-08-06T16:56:48Z", "message": "Cast long/double doc value to int/float"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ddcab4cf0638b5f03a275ac8e0c5c60e53c017a", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/0ddcab4cf0638b5f03a275ac8e0c5c60e53c017a", "committedDate": "2020-08-06T17:44:40Z", "message": "Don't push down if illegal state exception thrown"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d259fc3007a9e48258d0ab229a7b10f1a147119", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/6d259fc3007a9e48258d0ab229a7b10f1a147119", "committedDate": "2020-08-06T18:16:40Z", "message": "Fix broken IT due to field type change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "154358a1b3e0a5a3a93c9abcdcccda482b087fc3", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/154358a1b3e0a5a3a93c9abcdcccda482b087fc3", "committedDate": "2020-08-06T20:19:42Z", "message": "Prepare PR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTIxNjY0", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#pullrequestreview-462921664", "createdAt": "2020-08-06T22:37:46Z", "commit": {"oid": "154358a1b3e0a5a3a93c9abcdcccda482b087fc3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMjozNzo0NlrOG9Geyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMjozNzo0NlrOG9Geyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyMjUwNw==", "bodyText": "Add some comments? Why not construct the different value based on Type?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#discussion_r466722507", "createdAt": "2020-08-06T22:37:46Z", "author": {"login": "penghuo"}, "path": "elasticsearch/src/main/java/com/amazon/opendistroforelasticsearch/sql/elasticsearch/data/value/ElasticsearchExprValueFactory.java", "diffHunk": "@@ -121,6 +124,49 @@ private ExprValue construct(String field, JsonNode value) {\n     }\n   }\n \n+  /**\n+   * Construct ExprValue from field and its value object. Throw exception if trying\n+   * to construct from field of unsupported type.\n+   *\n+   * @param field   field name\n+   * @param value   value object\n+   * @return        ExprValue\n+   */\n+  public ExprValue construct(String field, Object value) {\n+    if (value == null) {\n+      return nullValue();\n+    }\n+\n+    ExprType type = type(field);\n+    if (type.equals(INTEGER)) {\n+      return constructInteger((Integer) value);\n+    } else if (type.equals(LONG)) {\n+      return constructLong((Long) value);\n+    } else if (type.equals(FLOAT)) {\n+      return constructFloat((Float) value);\n+    } else if (type.equals(DOUBLE)) {\n+      return constructDouble((Double) value);\n+    } else if (type.equals(STRING)) {\n+      return constructString((String) value);\n+    } else if (type.equals(BOOLEAN)) {\n+      return constructBoolean((Boolean) value);\n+    } else if (type.equals(TIMESTAMP)) {\n+      if (value instanceof Number) {\n+        return constructTimestamp((Long) value);\n+      } else if (value instanceof Instant) {\n+        return constructTimestamp((Instant) value);\n+      } else {\n+        return constructTimestamp(String.valueOf(value));\n+      }\n+    } else if (ES_TEXT.isCompatible(type)) {\n+      return new ElasticsearchExprTextValue((String) value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154358a1b3e0a5a3a93c9abcdcccda482b087fc3"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTI1ODY5", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#pullrequestreview-462925869", "createdAt": "2020-08-06T22:48:33Z", "commit": {"oid": "154358a1b3e0a5a3a93c9abcdcccda482b087fc3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMjo0ODozM1rOG9GtCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMjo0ODozM1rOG9GtCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyNjE1NA==", "bodyText": "What happen if there are multiple filter, e.g. source=index | filter a = 1 | filter b = 1", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#discussion_r466726154", "createdAt": "2020-08-06T22:48:33Z", "author": {"login": "penghuo"}, "path": "elasticsearch/src/main/java/com/amazon/opendistroforelasticsearch/sql/elasticsearch/storage/ElasticsearchIndex.java", "diffHunk": "@@ -87,6 +92,20 @@ public PhysicalPlan implement(LogicalPlan plan) {\n      * index scan.\n      */\n     return plan.accept(new DefaultImplementor<ElasticsearchIndexScan>() {\n+          @Override\n+          public PhysicalPlan visitFilter(LogicalFilter node, ElasticsearchIndexScan context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154358a1b3e0a5a3a93c9abcdcccda482b087fc3"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTI2NzAw", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#pullrequestreview-462926700", "createdAt": "2020-08-06T22:50:44Z", "commit": {"oid": "154358a1b3e0a5a3a93c9abcdcccda482b087fc3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMjo1MDo0NFrOG9Gv6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMjo1MDo0NFrOG9Gv6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyNjg4OQ==", "bodyText": "our expression -> core engine expression?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#discussion_r466726889", "createdAt": "2020-08-06T22:50:44Z", "author": {"login": "penghuo"}, "path": "elasticsearch/src/main/java/com/amazon/opendistroforelasticsearch/sql/elasticsearch/storage/script/ExpressionScriptEngine.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.elasticsearch.storage.script;\n+\n+import com.amazon.opendistroforelasticsearch.sql.elasticsearch.storage.script.filter.ExpressionFilterScriptFactory;\n+import com.amazon.opendistroforelasticsearch.sql.elasticsearch.storage.serialization.ExpressionSerializer;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import lombok.RequiredArgsConstructor;\n+import org.elasticsearch.script.FilterScript;\n+import org.elasticsearch.script.ScriptContext;\n+import org.elasticsearch.script.ScriptEngine;\n+\n+/**\n+ * Custom expression script engine that supports using our expression code in DSL", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154358a1b3e0a5a3a93c9abcdcccda482b087fc3"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTI3MTUy", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#pullrequestreview-462927152", "createdAt": "2020-08-06T22:51:55Z", "commit": {"oid": "154358a1b3e0a5a3a93c9abcdcccda482b087fc3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMjo1MTo1NVrOG9GxYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMjo1MTo1NVrOG9GxYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyNzI2Nw==", "bodyText": "we ourserlves?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#discussion_r466727267", "createdAt": "2020-08-06T22:51:55Z", "author": {"login": "penghuo"}, "path": "elasticsearch/src/main/java/com/amazon/opendistroforelasticsearch/sql/elasticsearch/storage/script/filter/ExpressionFilterScript.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.elasticsearch.storage.script.filter;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.FLOAT;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.elasticsearch.data.type.ElasticsearchDataType.ES_TEXT_KEYWORD;\n+import static java.util.stream.Collectors.toMap;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprBooleanValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprTupleValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.elasticsearch.data.value.ElasticsearchExprValueFactory;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.ExpressionNodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.expression.ReferenceExpression;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.time.chrono.ChronoZonedDateTime;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import lombok.EqualsAndHashCode;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.elasticsearch.SpecialPermission;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+import org.elasticsearch.script.FilterScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+/**\n+ * Expression script executor that executes the expression on each document\n+ * and determine if the document is supposed to be filtered out or not.\n+ */\n+@EqualsAndHashCode(callSuper = false)\n+class ExpressionFilterScript extends FilterScript {\n+\n+  /**\n+   * Expression to execute.\n+   */\n+  private final Expression expression;\n+\n+  public ExpressionFilterScript(Expression expression,\n+                                SearchLookup lookup,\n+                                LeafReaderContext context,\n+                                Map<String, Object> params) {\n+    super(params, lookup, context);\n+    this.expression = expression;\n+  }\n+\n+  @Override\n+  public boolean execute() {\n+    // Check we ourselves are not being called by unprivileged code.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154358a1b3e0a5a3a93c9abcdcccda482b087fc3"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTMxODA5", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#pullrequestreview-462931809", "createdAt": "2020-08-06T23:04:15Z", "commit": {"oid": "154358a1b3e0a5a3a93c9abcdcccda482b087fc3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMzowNDoxNVrOG9HA4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMzowNDoxNVrOG9HA4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjczMTIzNQ==", "bodyText": "Missing handling?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#discussion_r466731235", "createdAt": "2020-08-06T23:04:15Z", "author": {"login": "penghuo"}, "path": "elasticsearch/src/main/java/com/amazon/opendistroforelasticsearch/sql/elasticsearch/storage/script/filter/ExpressionFilterScript.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.elasticsearch.storage.script.filter;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.FLOAT;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.elasticsearch.data.type.ElasticsearchDataType.ES_TEXT_KEYWORD;\n+import static java.util.stream.Collectors.toMap;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprBooleanValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprTupleValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.elasticsearch.data.value.ElasticsearchExprValueFactory;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.ExpressionNodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.expression.ReferenceExpression;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.time.chrono.ChronoZonedDateTime;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import lombok.EqualsAndHashCode;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.elasticsearch.SpecialPermission;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+import org.elasticsearch.script.FilterScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+/**\n+ * Expression script executor that executes the expression on each document\n+ * and determine if the document is supposed to be filtered out or not.\n+ */\n+@EqualsAndHashCode(callSuper = false)\n+class ExpressionFilterScript extends FilterScript {\n+\n+  /**\n+   * Expression to execute.\n+   */\n+  private final Expression expression;\n+\n+  public ExpressionFilterScript(Expression expression,\n+                                SearchLookup lookup,\n+                                LeafReaderContext context,\n+                                Map<String, Object> params) {\n+    super(params, lookup, context);\n+    this.expression = expression;\n+  }\n+\n+  @Override\n+  public boolean execute() {\n+    // Check we ourselves are not being called by unprivileged code.\n+    SpecialPermission.check();\n+\n+    return AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> {\n+      Set<ReferenceExpression> fields = extractFields(expression);\n+      ElasticsearchExprValueFactory valueFactory = buildValueFactory(fields);\n+      Map<String, ExprValue> valueEnv = buildValueEnv(fields, valueFactory);\n+      ExprValue result = evaluateExpression(valueEnv);\n+      return (Boolean) result.value();\n+    });\n+  }\n+\n+  private Set<ReferenceExpression> extractFields(Expression expr) {\n+    Set<ReferenceExpression> fields = new HashSet<>();\n+    expr.accept(new ExpressionNodeVisitor<Object, Set<ReferenceExpression>>() {\n+      @Override\n+      public Object visitReference(ReferenceExpression node, Set<ReferenceExpression> context) {\n+        context.add(node);\n+        return null;\n+      }\n+    }, fields);\n+    return fields;\n+  }\n+\n+  private ElasticsearchExprValueFactory buildValueFactory(Set<ReferenceExpression> fields) {\n+    Map<String, ExprType> typeEnv = fields.stream()\n+                                          .collect(toMap(\n+                                              ReferenceExpression::getAttr,\n+                                              ReferenceExpression::type));\n+    return new ElasticsearchExprValueFactory(typeEnv);\n+  }\n+\n+  private Map<String, ExprValue> buildValueEnv(Set<ReferenceExpression> fields,\n+                                               ElasticsearchExprValueFactory valueFactory) {\n+    Map<String, ExprValue> valueEnv = new HashMap<>();\n+    for (ReferenceExpression field : fields) {\n+      String fieldName = field.getAttr();\n+      ExprValue exprValue = valueFactory.construct(fieldName, getDocValue(field));\n+      valueEnv.put(fieldName, exprValue);\n+    }\n+    return valueEnv;\n+  }\n+\n+  private Object getDocValue(ReferenceExpression field) {\n+    String fieldName = getDocValueName(field);\n+    ScriptDocValues<?> docValue = getDoc().get(fieldName);\n+    if (docValue == null || docValue.isEmpty()) {\n+      return null;\n+    }\n+\n+    Object value = docValue.get(0);\n+    if (value instanceof ChronoZonedDateTime) {\n+      return ((ChronoZonedDateTime<?>) value).toInstant();\n+    }\n+    return castNumberToFieldType(value, field.type());\n+  }\n+\n+  /**\n+   * Text field doesn't have doc value (exception thrown even when you call \"get\")\n+   * Limitation: assume inner field name is always \"keyword\".\n+   */\n+  private String getDocValueName(ReferenceExpression field) {\n+    String fieldName = field.getAttr();\n+    if (field.type() == ES_TEXT_KEYWORD) {\n+      fieldName += \".keyword\";\n+    }\n+    return fieldName;\n+  }\n+\n+  /**\n+   * DocValue only support long and double so cast to integer and float if needed.\n+   * The doc value must be Long and Double for expr type Long/Integer and Double/Float respectively.\n+   * Otherwise there must be bugs in our engine that causes the mismatch.\n+   */\n+  private Object castNumberToFieldType(Object value, ExprType type) {\n+    if (type == INTEGER) {\n+      return ((Long) value).intValue();\n+    } else if (type == FLOAT) {\n+      return ((Double) value).floatValue();\n+    } else {\n+      return value;\n+    }\n+  }\n+\n+  private ExprValue evaluateExpression(Map<String, ExprValue> valueEnv) {\n+    ExprTupleValue tupleValue = ExprTupleValue.fromExprValueMap(valueEnv);\n+    ExprValue result = expression.valueOf(tupleValue.bindingTuples());\n+\n+    if (result.isNull()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154358a1b3e0a5a3a93c9abcdcccda482b087fc3"}, "originalPosition": 157}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTMzMTQ3", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#pullrequestreview-462933147", "createdAt": "2020-08-06T23:07:40Z", "commit": {"oid": "154358a1b3e0a5a3a93c9abcdcccda482b087fc3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMzowNzo0MFrOG9HFRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMzowNzo0MFrOG9HFRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjczMjM1OQ==", "bodyText": "NP, Could we impl BindingTuple and encapsulate these logic in that to achive the same concept of valueEnv.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#discussion_r466732359", "createdAt": "2020-08-06T23:07:40Z", "author": {"login": "penghuo"}, "path": "elasticsearch/src/main/java/com/amazon/opendistroforelasticsearch/sql/elasticsearch/storage/script/filter/ExpressionFilterScript.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.elasticsearch.storage.script.filter;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.FLOAT;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.elasticsearch.data.type.ElasticsearchDataType.ES_TEXT_KEYWORD;\n+import static java.util.stream.Collectors.toMap;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprBooleanValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprTupleValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.elasticsearch.data.value.ElasticsearchExprValueFactory;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.ExpressionNodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.expression.ReferenceExpression;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.time.chrono.ChronoZonedDateTime;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import lombok.EqualsAndHashCode;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.elasticsearch.SpecialPermission;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+import org.elasticsearch.script.FilterScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+/**\n+ * Expression script executor that executes the expression on each document\n+ * and determine if the document is supposed to be filtered out or not.\n+ */\n+@EqualsAndHashCode(callSuper = false)\n+class ExpressionFilterScript extends FilterScript {\n+\n+  /**\n+   * Expression to execute.\n+   */\n+  private final Expression expression;\n+\n+  public ExpressionFilterScript(Expression expression,\n+                                SearchLookup lookup,\n+                                LeafReaderContext context,\n+                                Map<String, Object> params) {\n+    super(params, lookup, context);\n+    this.expression = expression;\n+  }\n+\n+  @Override\n+  public boolean execute() {\n+    // Check we ourselves are not being called by unprivileged code.\n+    SpecialPermission.check();\n+\n+    return AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> {\n+      Set<ReferenceExpression> fields = extractFields(expression);\n+      ElasticsearchExprValueFactory valueFactory = buildValueFactory(fields);\n+      Map<String, ExprValue> valueEnv = buildValueEnv(fields, valueFactory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154358a1b3e0a5a3a93c9abcdcccda482b087fc3"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTQyOTQ0", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#pullrequestreview-462942944", "createdAt": "2020-08-06T23:28:29Z", "commit": {"oid": "154358a1b3e0a5a3a93c9abcdcccda482b087fc3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNjY2OTc4", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#pullrequestreview-463666978", "createdAt": "2020-08-07T22:15:13Z", "commit": {"oid": "154358a1b3e0a5a3a93c9abcdcccda482b087fc3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6eafcb9c5497925481b18bd2725a811d6af9923", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/f6eafcb9c5497925481b18bd2725a811d6af9923", "committedDate": "2020-08-07T22:26:59Z", "message": "Address PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af8beb3c988bf091b9f697ab135ecc08ecc6f4c8", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/af8beb3c988bf091b9f697ab135ecc08ecc6f4c8", "committedDate": "2020-08-08T00:30:05Z", "message": "Address PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59529304fc2e04d650e0faa41035020f095a725d", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/59529304fc2e04d650e0faa41035020f095a725d", "committedDate": "2020-08-11T15:30:37Z", "message": "Merge branch 'develop' into expression-pushdown-optimization"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 611, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}