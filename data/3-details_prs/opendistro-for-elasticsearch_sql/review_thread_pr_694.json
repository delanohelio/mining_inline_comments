{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5Njc3MzE4", "number": 694, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTo0MzoxMVrOEcQmpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzoyNToxOFrOEcTzzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDY3NjIyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTo0MzoxMVrOHGra1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTo0MzoxMVrOHGra1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc2NDg4NA==", "bodyText": "suggest to use exprValue.string() in future to get rid of the static getStringValue method.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/694#discussion_r476764884", "createdAt": "2020-08-25T21:43:11Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java", "diffHunk": "@@ -58,4 +135,30 @@ private FunctionResolver dayOfMonth() {\n   private ExprValue exprDayOfMonth(ExprValue date) {\n     return new ExprIntegerValue(getDateValue(date).getMonthValue());\n   }\n+\n+  /**\n+   * Time implementation for ExprValue.\n+   * @param exprValue ExprValue of Time type or String.\n+   * @return ExprValue.\n+   */\n+  private ExprValue exprTime(ExprValue exprValue) {\n+    if (exprValue instanceof ExprStringValue) {\n+      return new ExprTimeValue(getStringValue(exprValue));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7360e195b57c62261bbdb2ad62a5ca8bcadda8"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDc3MjA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprValueUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMjowMjoxOFrOHGsYXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzo1MzowMVrOHGyk9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc4MDYzOQ==", "bodyText": "could we get rid of the static method incase we already have the method impl in ExprValue.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/694#discussion_r476780639", "createdAt": "2020-08-25T22:02:18Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprValueUtils.java", "diffHunk": "@@ -166,12 +173,33 @@ public static Boolean getBooleanValue(ExprValue exprValue) {\n   }\n \n   /**\n-   * Get {@link ZonedDateTime} from ExprValue of Date type.\n+   * Get {@link LocalDate} from ExprValue of Date type.\n    */\n-  public static ZonedDateTime getDateValue(ExprValue exprValue) {\n+  public static LocalDate getDateValue(ExprValue exprValue) {\n     return exprValue.dateValue();\n   }\n \n+  /**\n+   * Get {@link LocalTime} from ExprValue of Time type.\n+   */\n+  public static LocalTime getTimeValue(ExprValue exprValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7360e195b57c62261bbdb2ad62a5ca8bcadda8"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg4MjE2Nw==", "bodyText": "yes, will remove all similar static methods and use the impl instead", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/694#discussion_r476882167", "createdAt": "2020-08-25T23:53:01Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprValueUtils.java", "diffHunk": "@@ -166,12 +173,33 @@ public static Boolean getBooleanValue(ExprValue exprValue) {\n   }\n \n   /**\n-   * Get {@link ZonedDateTime} from ExprValue of Date type.\n+   * Get {@link LocalDate} from ExprValue of Date type.\n    */\n-  public static ZonedDateTime getDateValue(ExprValue exprValue) {\n+  public static LocalDate getDateValue(ExprValue exprValue) {\n     return exprValue.dateValue();\n   }\n \n+  /**\n+   * Get {@link LocalTime} from ExprValue of Time type.\n+   */\n+  public static LocalTime getTimeValue(ExprValue exprValue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc4MDYzOQ=="}, "originalCommit": {"oid": "ea7360e195b57c62261bbdb2ad62a5ca8bcadda8"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MTIwMTQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprDatetimeValue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzoyNToxOFrOHGwxyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMTowMToxOVrOHG1tHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg1MjY4Mw==", "bodyText": "Just wonder any reason not use lombok annotation for equal and hashCode?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/694#discussion_r476852683", "createdAt": "2020-08-25T23:25:18Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprDatetimeValue.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.data.model;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.exception.SemanticCheckException;\n+import com.google.common.base.Objects;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n+import lombok.RequiredArgsConstructor;\n+\n+@RequiredArgsConstructor\n+public class ExprDatetimeValue extends AbstractExprValue {\n+  private static final DateTimeFormatter formatter = DateTimeFormatter\n+      .ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n+  private final LocalDateTime datetime;\n+\n+  /**\n+   * Constructor with datetime string as input.\n+   */\n+  public ExprDatetimeValue(String datetime) {\n+    try {\n+      this.datetime = LocalDateTime.parse(datetime, formatter);\n+    } catch (DateTimeParseException e) {\n+      throw new SemanticCheckException(String.format(\"datetime:%s in unsupported format, please \"\n+          + \"use yyyy-MM-dd HH:mm:ss\", datetime));\n+    }\n+  }\n+\n+  @Override\n+  public LocalDateTime datetimeValue() {\n+    return datetime;\n+  }\n+\n+  @Override\n+  public LocalDate dateValue() {\n+    return datetime.toLocalDate();\n+  }\n+\n+  @Override\n+  public LocalTime timeValue() {\n+    return datetime.toLocalTime();\n+  }\n+\n+  @Override\n+  public Instant timestampValue() {\n+    return ZonedDateTime.of(datetime, ZoneId.of(\"UTC\")).toInstant();\n+  }\n+\n+  @Override\n+  public int compare(ExprValue other) {\n+    return datetime.compareTo(other.datetimeValue());\n+  }\n+\n+  @Override\n+  public boolean equal(ExprValue other) {\n+    return datetime.equals(other.datetimeValue());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7360e195b57c62261bbdb2ad62a5ca8bcadda8"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkzMzQwNA==", "bodyText": "for the equal method, because  it is an implementation of abstract method", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/694#discussion_r476933404", "createdAt": "2020-08-26T01:01:19Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprDatetimeValue.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.data.model;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.exception.SemanticCheckException;\n+import com.google.common.base.Objects;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n+import lombok.RequiredArgsConstructor;\n+\n+@RequiredArgsConstructor\n+public class ExprDatetimeValue extends AbstractExprValue {\n+  private static final DateTimeFormatter formatter = DateTimeFormatter\n+      .ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n+  private final LocalDateTime datetime;\n+\n+  /**\n+   * Constructor with datetime string as input.\n+   */\n+  public ExprDatetimeValue(String datetime) {\n+    try {\n+      this.datetime = LocalDateTime.parse(datetime, formatter);\n+    } catch (DateTimeParseException e) {\n+      throw new SemanticCheckException(String.format(\"datetime:%s in unsupported format, please \"\n+          + \"use yyyy-MM-dd HH:mm:ss\", datetime));\n+    }\n+  }\n+\n+  @Override\n+  public LocalDateTime datetimeValue() {\n+    return datetime;\n+  }\n+\n+  @Override\n+  public LocalDate dateValue() {\n+    return datetime.toLocalDate();\n+  }\n+\n+  @Override\n+  public LocalTime timeValue() {\n+    return datetime.toLocalTime();\n+  }\n+\n+  @Override\n+  public Instant timestampValue() {\n+    return ZonedDateTime.of(datetime, ZoneId.of(\"UTC\")).toInstant();\n+  }\n+\n+  @Override\n+  public int compare(ExprValue other) {\n+    return datetime.compareTo(other.datetimeValue());\n+  }\n+\n+  @Override\n+  public boolean equal(ExprValue other) {\n+    return datetime.equals(other.datetimeValue());\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg1MjY4Mw=="}, "originalCommit": {"oid": "ea7360e195b57c62261bbdb2ad62a5ca8bcadda8"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1996, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}