{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4Nzg2NjE5", "number": 469, "title": "Implement get index mapping in ES storage engine", "bodyText": "Issue #, if available:\nDescription of changes: Add get index mapping logic to Elasticsearch storage engine. The method in ES storage is used by query engine to fetch index mapping and do analysis, such as semantic check.\nImplementation:\n\nElasticsearchStorageEngine: Storage engine implementation for Elasticsearch which simply returns ElasticsearchIndex for now.\nElasticsearchIndex: Implement get index mapping (field types) method by ElasticsearchClient underlying.\nElasticsearchClient: Abstraction for different Elasticsearch clients. In our plan, apart from a ElasticsearchNodeClient, another ElasticsearchRestClient will be added soon for entire engine running outside Elasticsearch container.\n\nTesting: Added and passed all unit test and coverage required. Integration test will be added later when executor is in place.\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-05-15T20:13:31Z", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/469", "merged": true, "mergeCommit": {"oid": "ce2c08b39cc6825c12138cd3d5da100bece3b8f6"}, "closed": true, "closedAt": "2020-05-18T17:06:50Z", "author": {"login": "dai-chen"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcg-4GdgH2gAyNDE4Nzg2NjE5OjE1MzU5YWVhOGVkY2IzN2NjN2FmY2VhYmI1ZDg0ZWZhNTYwNjRlNDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcihn_HgH2gAyNDE4Nzg2NjE5OjVhNjZkZDEwZjFkOGQzMTg4NzIwZWYwZTY3Y2VkZjMyYmE3Nzc2Mzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "15359aea8edcb37cc7afceabb5d84efa56064e47", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/15359aea8edcb37cc7afceabb5d84efa56064e47", "committedDate": "2020-05-13T20:27:03Z", "message": "Add elasticsearch storage implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3246707ec5b4589be217976aa7ad49a160cc1b11", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/3246707ec5b4589be217976aa7ad49a160cc1b11", "committedDate": "2020-05-13T22:06:37Z", "message": "Add elasticsearch storage implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e81e2fa1d616d6fbdbd79c1af8af8c0665c8b77", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/1e81e2fa1d616d6fbdbd79c1af8af8c0665c8b77", "committedDate": "2020-05-14T18:14:33Z", "message": "Add more test cases for better coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55ef633dbf58f9bedaa8c6a09e723a671463b3bf", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/55ef633dbf58f9bedaa8c6a09e723a671463b3bf", "committedDate": "2020-05-14T18:41:48Z", "message": "Exclude security access from test coverage verification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "361b5da06a597c9235f7aa0dd6024ac46fbbf7c3", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/361b5da06a597c9235f7aa0dd6024ac46fbbf7c3", "committedDate": "2020-05-15T18:35:15Z", "message": "Add more ES type for test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d1981061814cb6eceeadb7665ff4bbbc20130a2", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/8d1981061814cb6eceeadb7665ff4bbbc20130a2", "committedDate": "2020-05-15T18:59:08Z", "message": "Refactor and more JavaDocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf6bff1ee7067fae53cd067472f2b4fffb7030c5", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/cf6bff1ee7067fae53cd067472f2b4fffb7030c5", "committedDate": "2020-05-15T21:53:07Z", "message": "Add toString for es domain class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDEzMzI3", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/469#pullrequestreview-413013327", "createdAt": "2020-05-15T23:12:15Z", "commit": {"oid": "cf6bff1ee7067fae53cd067472f2b4fffb7030c5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzoxMjoxNVrOGWWGDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzoxMjoxNVrOGWWGDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4Mzg1NQ==", "bodyText": "remove this?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/469#discussion_r426083855", "createdAt": "2020-05-15T23:12:15Z", "author": {"login": "penghuo"}, "path": "elasticsearch/build.gradle", "diffHunk": "@@ -1,10 +1,65 @@\n-apply plugin: 'java'\n+plugins {\n+    id 'java'\n+    id \"io.freefair.lombok\"\n+    id 'jacoco'\n+}\n \n repositories {\n     mavenCentral()\n }\n \n dependencies {\n+    compile project(':core')\n     compile group: 'org.elasticsearch', name: 'elasticsearch', version: \"${es_version}\"\n-    testCompile group: 'junit', name: 'junit', version: '4.12'\n+\n+    testImplementation('org.junit.jupiter:junit-jupiter:5.6.2')\n+    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '2.1'\n+    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.3.3'\n+    testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.3.3'\n+}\n+\n+test {\n+    useJUnitPlatform()\n+    testLogging {\n+        events \"passed\", \"skipped\", \"failed\"\n+    }\n+}\n+\n+jacoco {\n+    toolVersion = \"0.8.3\"\n+}\n+jacocoTestReport {\n+    reports {\n+        html.enabled true\n+    }\n+    afterEvaluate {\n+        classDirectories.setFrom(files(classDirectories.files.collect {\n+            fileTree(dir: it,\n+                    exclude: ['**/ast/**'])\n+        }))\n+    }\n+}\n+test.finalizedBy(project.tasks.jacocoTestReport)\n+\n+jacocoTestCoverageVerification {\n+    violationRules {\n+        rule {\n+            element = 'CLASS'\n+            excludes = [\n+                'com.amazon.opendistroforelasticsearch.sql.elasticsearch.security.SecurityAccess'\n+            ]\n+            limit {\n+                minimum = 1.0\n+            }\n+\n+        }\n+    }\n+    afterEvaluate {\n+        classDirectories.setFrom(files(classDirectories.files.collect {\n+            fileTree(dir: it,\n+                    exclude: ['**/ast/**'])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf6bff1ee7067fae53cd067472f2b4fffb7030c5"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDE2OTcy", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/469#pullrequestreview-413016972", "createdAt": "2020-05-15T23:27:39Z", "commit": {"oid": "cf6bff1ee7067fae53cd067472f2b4fffb7030c5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzoyNzozOVrOGWWSeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzoyNzozOVrOGWWSeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4NzAzMw==", "bodyText": "The null value should be filtered out.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/469#discussion_r426087033", "createdAt": "2020-05-15T23:27:39Z", "author": {"login": "penghuo"}, "path": "elasticsearch/src/main/java/com/amazon/opendistroforelasticsearch/sql/elasticsearch/mapping/IndexMapping.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.elasticsearch.mapping;\n+\n+import com.google.common.collect.ImmutableMap;\n+import lombok.ToString;\n+import org.elasticsearch.cluster.metadata.MappingMetaData;\n+\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.emptyMap;\n+\n+/**\n+ * Elasticsearch index mapping. Because there is no specific behavior for different field types,\n+ * string is used to represent field types.\n+ */\n+@ToString\n+public class IndexMapping {\n+\n+    /**\n+     * Field mappings from field name to field type in Elasticsearch date type system.\n+     */\n+    private final Map<String, String> fieldMappings;\n+\n+    public IndexMapping(Map<String, String> fieldMappings) {\n+        this.fieldMappings = fieldMappings;\n+    }\n+\n+    public IndexMapping(MappingMetaData metaData) {\n+        this.fieldMappings = flatMappings(metaData.getSourceAsMap());\n+    }\n+\n+    /**\n+     * How many fields in the index (after flatten)\n+     * @return  field size\n+     */\n+    public int size() {\n+        return fieldMappings.size();\n+    }\n+\n+    /**\n+     * Return field type by its name.\n+     * @param fieldName     field name\n+     * @return              field type in string\n+     */\n+    public String getFieldType(String fieldName) {\n+        return fieldMappings.get(fieldName);\n+    }\n+\n+    /**\n+     * Get all field types and transform raw string type to expected type.\n+     * @param transform     transform function to transform field type in string to another type\n+     * @param <Type>        expected field type class\n+     * @return              mapping from field name to field type\n+     */\n+    public <Type> Map<String, Type> getAllFieldTypes(Function<String, Type> transform) {\n+        return fieldMappings.entrySet().\n+                             stream().\n+                             collect(Collectors.toMap(\n+                                 Map.Entry::getKey,\n+                                 e -> transform.apply(e.getValue())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf6bff1ee7067fae53cd067472f2b4fffb7030c5"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDE3MzQw", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/469#pullrequestreview-413017340", "createdAt": "2020-05-15T23:28:47Z", "commit": {"oid": "cf6bff1ee7067fae53cd067472f2b4fffb7030c5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzoyODo0N1rOGWWTqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzoyODo0N1rOGWWTqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4NzMzOQ==", "bodyText": "Is it possible to return null value? or we accept null value as return value?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/469#discussion_r426087339", "createdAt": "2020-05-15T23:28:47Z", "author": {"login": "penghuo"}, "path": "elasticsearch/src/main/java/com/amazon/opendistroforelasticsearch/sql/elasticsearch/mapping/IndexMapping.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.elasticsearch.mapping;\n+\n+import com.google.common.collect.ImmutableMap;\n+import lombok.ToString;\n+import org.elasticsearch.cluster.metadata.MappingMetaData;\n+\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.emptyMap;\n+\n+/**\n+ * Elasticsearch index mapping. Because there is no specific behavior for different field types,\n+ * string is used to represent field types.\n+ */\n+@ToString\n+public class IndexMapping {\n+\n+    /**\n+     * Field mappings from field name to field type in Elasticsearch date type system.\n+     */\n+    private final Map<String, String> fieldMappings;\n+\n+    public IndexMapping(Map<String, String> fieldMappings) {\n+        this.fieldMappings = fieldMappings;\n+    }\n+\n+    public IndexMapping(MappingMetaData metaData) {\n+        this.fieldMappings = flatMappings(metaData.getSourceAsMap());\n+    }\n+\n+    /**\n+     * How many fields in the index (after flatten)\n+     * @return  field size\n+     */\n+    public int size() {\n+        return fieldMappings.size();\n+    }\n+\n+    /**\n+     * Return field type by its name.\n+     * @param fieldName     field name\n+     * @return              field type in string\n+     */\n+    public String getFieldType(String fieldName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf6bff1ee7067fae53cd067472f2b4fffb7030c5"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDE3OTk2", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/469#pullrequestreview-413017996", "createdAt": "2020-05-15T23:31:31Z", "commit": {"oid": "cf6bff1ee7067fae53cd067472f2b4fffb7030c5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ad3a3d9569a70edefdae67531bb97a6fbdc1612", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/8ad3a3d9569a70edefdae67531bb97a6fbdc1612", "committedDate": "2020-05-15T23:59:03Z", "message": "Remove useless jacoco dir exclude"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTk4Mjg2", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/469#pullrequestreview-413198286", "createdAt": "2020-05-17T21:00:21Z", "commit": {"oid": "cf6bff1ee7067fae53cd067472f2b4fffb7030c5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a66dd10f1d8d3188720ef0e67cedf32ba777639", "author": {"user": {"login": "dai-chen", "name": "Chen Dai"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/5a66dd10f1d8d3188720ef0e67cedf32ba777639", "committedDate": "2020-05-18T15:30:03Z", "message": "Add JavaDoc and UT for non exist field case"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 671, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}