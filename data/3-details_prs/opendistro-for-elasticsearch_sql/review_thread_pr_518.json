{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMjQxMjcx", "number": 518, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjoyNDo0MlrOEFm8hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1NToxNVrOEFnmgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzE2NDIxOnYy", "diffSide": "RIGHT", "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/StatsCommandIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjoyNDo0MlrOGj5m1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMjowNTo0MlrOGnSlPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI5NzE3Mg==", "bodyText": "when should we use plan text comparsion? when shoud with use matchers like verifyColumn?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/518#discussion_r440297172", "createdAt": "2020-06-15T16:24:42Z", "author": {"login": "penghuo"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/StatsCommandIT.java", "diffHunk": "@@ -81,4 +80,22 @@ public void testStatsCount() throws IOException {\n   }\n \n   // TODO: each stats aggregate function should be tested here when implemented\n+\n+  @Test\n+  public void testStatsNested() throws IOException {\n+    String result =\n+        executeQueryToString(\n+            String.format(\"source=%s | stats avg(abs(age)*2) as AGE\", TEST_INDEX_ACCOUNT));\n+    assertEquals(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d86a1cce00f1ef781e25abce40af80b9f7a95284"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg1MjA5NA==", "bodyText": "To my understanding, we can use verifyColumn like matchers in most of time, but some cases that some other content other than columns and datarows are also important to veriy, so we can flexibly choose text comparison. For example, to verify the formats, or verify the explain results etc.\nAs for the case this comment referred to, I would like to verify schema, column names, result set of the aggregation, so I chose to compare text.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/518#discussion_r443852094", "createdAt": "2020-06-22T22:05:42Z", "author": {"login": "chloe-zh"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/StatsCommandIT.java", "diffHunk": "@@ -81,4 +80,22 @@ public void testStatsCount() throws IOException {\n   }\n \n   // TODO: each stats aggregate function should be tested here when implemented\n+\n+  @Test\n+  public void testStatsNested() throws IOException {\n+    String result =\n+        executeQueryToString(\n+            String.format(\"source=%s | stats avg(abs(age)*2) as AGE\", TEST_INDEX_ACCOUNT));\n+    assertEquals(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI5NzE3Mg=="}, "originalCommit": {"oid": "d86a1cce00f1ef781e25abce40af80b9f7a95284"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzE3OTQwOnYy", "diffSide": "RIGHT", "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/OperatorIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjoyODo0OVrOGj5wbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzoxOToyNVrOGkF4ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI5OTYzMQ==", "bodyText": "where age %s 32 = 0 ? Moudlo? age % 32", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/518#discussion_r440299631", "createdAt": "2020-06-15T16:28:49Z", "author": {"login": "penghuo"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/OperatorIT.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.legacy.TestsConstants.TEST_INDEX_BANK;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.rows;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifyDataRows;\n+\n+import java.io.IOException;\n+import org.json.JSONObject;\n+import org.junit.Ignore;\n+import org.junit.jupiter.api.Test;\n+\n+public class OperatorIT extends PPLIntegTestCase {\n+  @Override\n+  public void init() throws IOException {\n+    loadIndex(Index.BANK);\n+  }\n+\n+  @Test\n+  public void testAddOperator() throws IOException {\n+    JSONObject result =\n+        executeQuery(\n+            String.format(\n+                \"source=%s | where age = 31 + 1 | fields age\",\n+                TEST_INDEX_BANK));\n+    verifyDataRows(result, rows(32));\n+  }\n+\n+  @Test\n+  public void testSubtractOperator() throws IOException {\n+    JSONObject result =\n+        executeQuery(\n+            String.format(\n+                \"source=%s | where age = 33 - 1 | fields age\",\n+                TEST_INDEX_BANK));\n+    verifyDataRows(result, rows(32));\n+  }\n+\n+  @Test\n+  public void testMultiplyOperator() throws IOException {\n+    JSONObject result =\n+        executeQuery(\n+            String.format(\n+                \"source=%s | where age = 16 * 2 | fields age\",\n+                TEST_INDEX_BANK));\n+    verifyDataRows(result, rows(32));\n+  }\n+\n+  @Test\n+  public void testDivideOperator() throws IOException {\n+    JSONObject result =\n+        executeQuery(\n+            String.format(\n+                \"source=%s | where age / 2 = 16 | fields age\",\n+                TEST_INDEX_BANK));\n+    verifyDataRows(result, rows(32), rows(33));\n+  }\n+\n+  @Test\n+  public void testModuleOperator() throws IOException {\n+    JSONObject result =\n+        executeQuery(\n+            String.format(\n+                \"source=%s | where age %s 32 = 0 | fields age\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d86a1cce00f1ef781e25abce40af80b9f7a95284"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5ODI4Mg==", "bodyText": "To escape % character", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/518#discussion_r440498282", "createdAt": "2020-06-15T23:19:25Z", "author": {"login": "chloe-zh"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/OperatorIT.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.legacy.TestsConstants.TEST_INDEX_BANK;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.rows;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifyDataRows;\n+\n+import java.io.IOException;\n+import org.json.JSONObject;\n+import org.junit.Ignore;\n+import org.junit.jupiter.api.Test;\n+\n+public class OperatorIT extends PPLIntegTestCase {\n+  @Override\n+  public void init() throws IOException {\n+    loadIndex(Index.BANK);\n+  }\n+\n+  @Test\n+  public void testAddOperator() throws IOException {\n+    JSONObject result =\n+        executeQuery(\n+            String.format(\n+                \"source=%s | where age = 31 + 1 | fields age\",\n+                TEST_INDEX_BANK));\n+    verifyDataRows(result, rows(32));\n+  }\n+\n+  @Test\n+  public void testSubtractOperator() throws IOException {\n+    JSONObject result =\n+        executeQuery(\n+            String.format(\n+                \"source=%s | where age = 33 - 1 | fields age\",\n+                TEST_INDEX_BANK));\n+    verifyDataRows(result, rows(32));\n+  }\n+\n+  @Test\n+  public void testMultiplyOperator() throws IOException {\n+    JSONObject result =\n+        executeQuery(\n+            String.format(\n+                \"source=%s | where age = 16 * 2 | fields age\",\n+                TEST_INDEX_BANK));\n+    verifyDataRows(result, rows(32));\n+  }\n+\n+  @Test\n+  public void testDivideOperator() throws IOException {\n+    JSONObject result =\n+        executeQuery(\n+            String.format(\n+                \"source=%s | where age / 2 = 16 | fields age\",\n+                TEST_INDEX_BANK));\n+    verifyDataRows(result, rows(32), rows(33));\n+  }\n+\n+  @Test\n+  public void testModuleOperator() throws IOException {\n+    JSONObject result =\n+        executeQuery(\n+            String.format(\n+                \"source=%s | where age %s 32 = 0 | fields age\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI5OTYzMQ=="}, "originalCommit": {"oid": "d86a1cce00f1ef781e25abce40af80b9f7a95284"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzE4NDk4OnYy", "diffSide": "RIGHT", "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/OperatorIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjozMDoyM1rOGj50JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzoxOTozOVrOGkF4sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMDU4MA==", "bodyText": "consider to add null and missing related test cases.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/518#discussion_r440300580", "createdAt": "2020-06-15T16:30:23Z", "author": {"login": "penghuo"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/OperatorIT.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.legacy.TestsConstants.TEST_INDEX_BANK;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.rows;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifyDataRows;\n+\n+import java.io.IOException;\n+import org.json.JSONObject;\n+import org.junit.Ignore;\n+import org.junit.jupiter.api.Test;\n+\n+public class OperatorIT extends PPLIntegTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d86a1cce00f1ef781e25abce40af80b9f7a95284"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5ODM1NA==", "bodyText": "Ok sure, will do.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/518#discussion_r440498354", "createdAt": "2020-06-15T23:19:39Z", "author": {"login": "chloe-zh"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/OperatorIT.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.legacy.TestsConstants.TEST_INDEX_BANK;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.rows;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifyDataRows;\n+\n+import java.io.IOException;\n+import org.json.JSONObject;\n+import org.junit.Ignore;\n+import org.junit.jupiter.api.Test;\n+\n+public class OperatorIT extends PPLIntegTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMDU4MA=="}, "originalCommit": {"oid": "d86a1cce00f1ef781e25abce40af80b9f7a95284"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzE5MjEyOnYy", "diffSide": "LEFT", "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/QueryAnalysisIT.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjozMjoyN1rOGj54xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNTowMTozOFrOGk1rtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMTc2NA==", "bodyText": "why remove this IT? it should fail syntax check, right?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/518#discussion_r440301764", "createdAt": "2020-06-15T16:32:27Z", "author": {"login": "penghuo"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/QueryAnalysisIT.java", "diffHunk": "@@ -86,12 +85,6 @@ public void evalCommandShouldPassSemanticCheck() {\n   /**\n    * Commands that fail semantic analysis should throw {@link SemanticCheckException}.\n    */\n-  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d86a1cce00f1ef781e25abce40af80b9f7a95284"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5ODg0Nw==", "bodyText": "yes it will fails syntax since I removed unsupported stats functions from grammar file.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/518#discussion_r440498847", "createdAt": "2020-06-15T23:21:17Z", "author": {"login": "chloe-zh"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/QueryAnalysisIT.java", "diffHunk": "@@ -86,12 +85,6 @@ public void evalCommandShouldPassSemanticCheck() {\n   /**\n    * Commands that fail semantic analysis should throw {@link SemanticCheckException}.\n    */\n-  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMTc2NA=="}, "originalCommit": {"oid": "d86a1cce00f1ef781e25abce40af80b9f7a95284"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI4MTQ2MQ==", "bodyText": "Created another PR to add syntax check: #523", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/518#discussion_r441281461", "createdAt": "2020-06-17T05:01:38Z", "author": {"login": "chloe-zh"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/QueryAnalysisIT.java", "diffHunk": "@@ -86,12 +85,6 @@ public void evalCommandShouldPassSemanticCheck() {\n   /**\n    * Commands that fail semantic analysis should throw {@link SemanticCheckException}.\n    */\n-  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMTc2NA=="}, "originalCommit": {"oid": "d86a1cce00f1ef781e25abce40af80b9f7a95284"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzI0OTQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/predicate/BinaryPredicateOperator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo0ODo0M1rOGj6dvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzoyNDo0OFrOGkF-xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxMTIzMQ==", "bodyText": "The comments is not very related to the valueComparisonTable defined in here. If there is no special handling for NULL and MISSING, the behavior should follow the generic rule defined in here. https://asterixdb.apache.org/docs/0.9.3/sqlpp/manual.html#Operator_expressions", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/518#discussion_r440311231", "createdAt": "2020-06-15T16:48:43Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/predicate/BinaryPredicateOperator.java", "diffHunk": "@@ -163,6 +168,49 @@ public static void register(BuiltinFunctionRepository repository) {\n           .put(LITERAL_MISSING, LITERAL_MISSING, LITERAL_TRUE)\n           .build();\n \n+  /**\n+   * The notEqualTo logic.\n+   * A       B       A != B\n+   * NULL    NULL    FALSE\n+   * NULL    MISSING TRUE\n+   * MISSING NULL    TRUE\n+   * MISSING MISSING FALSE\n+   */\n+  private static Table<ExprValue, ExprValue, ExprValue> notEqualTable =\n+      new ImmutableTable.Builder<ExprValue, ExprValue, ExprValue>()\n+          .put(LITERAL_NULL, LITERAL_NULL, LITERAL_FALSE)\n+          .put(LITERAL_NULL, LITERAL_MISSING, LITERAL_TRUE)\n+          .put(LITERAL_MISSING, LITERAL_NULL, LITERAL_TRUE)\n+          .put(LITERAL_MISSING, LITERAL_MISSING, LITERAL_FALSE)\n+          .build();\n+\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d86a1cce00f1ef781e25abce40af80b9f7a95284"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5OTkxMA==", "bodyText": "Looks good, I will refer to this manual and make corresponding changes, thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/518#discussion_r440499910", "createdAt": "2020-06-15T23:24:48Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/predicate/BinaryPredicateOperator.java", "diffHunk": "@@ -163,6 +168,49 @@ public static void register(BuiltinFunctionRepository repository) {\n           .put(LITERAL_MISSING, LITERAL_MISSING, LITERAL_TRUE)\n           .build();\n \n+  /**\n+   * The notEqualTo logic.\n+   * A       B       A != B\n+   * NULL    NULL    FALSE\n+   * NULL    MISSING TRUE\n+   * MISSING NULL    TRUE\n+   * MISSING MISSING FALSE\n+   */\n+  private static Table<ExprValue, ExprValue, ExprValue> notEqualTable =\n+      new ImmutableTable.Builder<ExprValue, ExprValue, ExprValue>()\n+          .put(LITERAL_NULL, LITERAL_NULL, LITERAL_FALSE)\n+          .put(LITERAL_NULL, LITERAL_MISSING, LITERAL_TRUE)\n+          .put(LITERAL_MISSING, LITERAL_NULL, LITERAL_TRUE)\n+          .put(LITERAL_MISSING, LITERAL_MISSING, LITERAL_FALSE)\n+          .build();\n+\n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxMTIzMQ=="}, "originalCommit": {"oid": "d86a1cce00f1ef781e25abce40af80b9f7a95284"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzI2ODQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/predicate/BinaryPredicateOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1NDoxNVrOGj6qKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNTowMjo0M1rOGk1s-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNDQwOQ==", "bodyText": "could we define notEqual as the combination of not(equal)", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/518#discussion_r440314409", "createdAt": "2020-06-15T16:54:15Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/predicate/BinaryPredicateOperator.java", "diffHunk": "@@ -210,8 +260,85 @@ private static FunctionResolver equal() {\n     );\n   }\n \n-  private static Map<FunctionSignature, FunctionBuilder> predicateFunction(\n+  private static FunctionResolver notEqual() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d86a1cce00f1ef781e25abce40af80b9f7a95284"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI4MTc4NQ==", "bodyText": "I was also thinking about it didn't figure it out yet", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/518#discussion_r441281785", "createdAt": "2020-06-17T05:02:43Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/predicate/BinaryPredicateOperator.java", "diffHunk": "@@ -210,8 +260,85 @@ private static FunctionResolver equal() {\n     );\n   }\n \n-  private static Map<FunctionSignature, FunctionBuilder> predicateFunction(\n+  private static FunctionResolver notEqual() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNDQwOQ=="}, "originalCommit": {"oid": "d86a1cce00f1ef781e25abce40af80b9f7a95284"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzI3MTY4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprValue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1NToxNVrOGj6sbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNToxNjozMVrOGk17Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNDk4OA==", "bodyText": "How does this interface been used?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/518#discussion_r440314988", "createdAt": "2020-06-15T16:55:15Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprValue.java", "diffHunk": "@@ -31,6 +31,11 @@\n    */\n   ExprType type();\n \n+  /**\n+   * Compare the Object value of itself to the ExprValue v.\n+   */\n+  int compareTo(ExprValue v);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d86a1cce00f1ef781e25abce40af80b9f7a95284"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI4NTQwMg==", "bodyText": "To compare the values of instances of the ExprValue subclasses exactly like basic java objects, for example, the comparison betweenExprIntegerValue instances like\nExprIntegerValue v1 = new ExprIntegerValue(1);\nExprIntegerValue v2 = new ExprIntegerValue(2);\n\nThen the comparison between v1 and v2 has the same behavior of the comparison between integers 1 and 2, aka:\nv1.compareTo(v2) -> -1\nv2.compareTo(v1) -> 1\nv1.compareTo(v1) -> 0", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/518#discussion_r441285402", "createdAt": "2020-06-17T05:16:31Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprValue.java", "diffHunk": "@@ -31,6 +31,11 @@\n    */\n   ExprType type();\n \n+  /**\n+   * Compare the Object value of itself to the ExprValue v.\n+   */\n+  int compareTo(ExprValue v);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNDk4OA=="}, "originalCommit": {"oid": "d86a1cce00f1ef781e25abce40af80b9f7a95284"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2107, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}