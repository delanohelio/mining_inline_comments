{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNzU3MDEx", "number": 534, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMDo0Njo0N1rOEJQt-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowMToxN1rOEKMVnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTQ2NTUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/OperatorUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMDo0Njo0N1rOGpuO2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMDo1NTozOVrOGpudBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwMjI2NA==", "bodyText": "I checked a few methods in JDK, such as Pattern.matches. I think it's more intuitive to put pattern as first argument for this util method as well as like operator argument?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/534#discussion_r446402264", "createdAt": "2020-06-26T20:46:47Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/OperatorUtils.java", "diffHunk": "@@ -171,4 +171,69 @@ public String toString() {\n    */\n   public static final BiPredicate<ExprValue, ExprValue> COMPARE_WITH_NULL_OR_MISSING =\n       (left, right) -> left.isMissing() || right.isMissing() || left.isNull() || right.isNull();\n+\n+  /**\n+   * Wildcard pattern matcher util.\n+   * Percent (%) character for wildcard,\n+   * Underscore (_) character for a single character match.\n+   * @param pattern string pattern to match.\n+   * @return if text matches pattern returns true; else return false.\n+   */\n+  public static boolean matches(String text, String pattern) {\n+    return Pattern.compile(patternToRegex(pattern)).matcher(text).matches();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70847b187adee79cb4865687f54aa3e70b490f7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwNTI3NA==", "bodyText": "Good point! Will change the argument order in the util method to follow the JDK custom. As for the like operator, I think it would be better to keep consistent with the PPL specification, which is text like pattern.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/534#discussion_r446405274", "createdAt": "2020-06-26T20:54:07Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/OperatorUtils.java", "diffHunk": "@@ -171,4 +171,69 @@ public String toString() {\n    */\n   public static final BiPredicate<ExprValue, ExprValue> COMPARE_WITH_NULL_OR_MISSING =\n       (left, right) -> left.isMissing() || right.isMissing() || left.isNull() || right.isNull();\n+\n+  /**\n+   * Wildcard pattern matcher util.\n+   * Percent (%) character for wildcard,\n+   * Underscore (_) character for a single character match.\n+   * @param pattern string pattern to match.\n+   * @return if text matches pattern returns true; else return false.\n+   */\n+  public static boolean matches(String text, String pattern) {\n+    return Pattern.compile(patternToRegex(pattern)).matcher(text).matches();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwMjI2NA=="}, "originalCommit": {"oid": "c70847b187adee79cb4865687f54aa3e70b490f7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwNTg5NA==", "bodyText": "I see. I wan't aware of that. Thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/534#discussion_r446405894", "createdAt": "2020-06-26T20:55:39Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/OperatorUtils.java", "diffHunk": "@@ -171,4 +171,69 @@ public String toString() {\n    */\n   public static final BiPredicate<ExprValue, ExprValue> COMPARE_WITH_NULL_OR_MISSING =\n       (left, right) -> left.isMissing() || right.isMissing() || left.isNull() || right.isNull();\n+\n+  /**\n+   * Wildcard pattern matcher util.\n+   * Percent (%) character for wildcard,\n+   * Underscore (_) character for a single character match.\n+   * @param pattern string pattern to match.\n+   * @return if text matches pattern returns true; else return false.\n+   */\n+  public static boolean matches(String text, String pattern) {\n+    return Pattern.compile(patternToRegex(pattern)).matcher(text).matches();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwMjI2NA=="}, "originalCommit": {"oid": "c70847b187adee79cb4865687f54aa3e70b490f7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTQ4MTY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/predicate/BinaryPredicateOperator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMDo1MzoxMVrOGpuY3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOTowMzoxNVrOGqePWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwNDgyOQ==", "bodyText": "Just did a quick look and found this method is very similar to others, ex. compareValue, equalPredicate and binaryPredicate. The equalPredicate method signature looks most generic. I'm curious is there any chance to only keep or reuse a most generic function generator method.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/534#discussion_r446404829", "createdAt": "2020-06-26T20:53:11Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/predicate/BinaryPredicateOperator.java", "diffHunk": "@@ -475,4 +513,34 @@ public String toString() {\n       }\n     };\n   }\n+\n+  private static <T, R> FunctionBuilder likePattern(FunctionName functionName,\n+                                                    BiFunction<T, T, R> function,\n+                                                    Function<ExprValue, T> observer,\n+                                                    ExprType returnType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70847b187adee79cb4865687f54aa3e70b490f7"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwOTY5Mg==", "bodyText": "Yes that's also I'm considering, I will take a look into it", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/534#discussion_r446409692", "createdAt": "2020-06-26T21:05:20Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/predicate/BinaryPredicateOperator.java", "diffHunk": "@@ -475,4 +513,34 @@ public String toString() {\n       }\n     };\n   }\n+\n+  private static <T, R> FunctionBuilder likePattern(FunctionName functionName,\n+                                                    BiFunction<T, T, R> function,\n+                                                    Function<ExprValue, T> observer,\n+                                                    ExprType returnType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwNDgyOQ=="}, "originalCommit": {"oid": "c70847b187adee79cb4865687f54aa3e70b490f7"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE4ODgyNw==", "bodyText": "Used generic function bundles generating method binaryOperator in OperatorUtils, but some for special cases are remained and added java doc for them.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/534#discussion_r447188827", "createdAt": "2020-06-29T19:03:15Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/predicate/BinaryPredicateOperator.java", "diffHunk": "@@ -475,4 +513,34 @@ public String toString() {\n       }\n     };\n   }\n+\n+  private static <T, R> FunctionBuilder likePattern(FunctionName functionName,\n+                                                    BiFunction<T, T, R> function,\n+                                                    Function<ExprValue, T> observer,\n+                                                    ExprType returnType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwNDgyOQ=="}, "originalCommit": {"oid": "c70847b187adee79cb4865687f54aa3e70b490f7"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTIzMzU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/OperatorUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowMToxN1rOGrGAeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowMToxN1rOGrGAeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0MDM3Nw==", "bodyText": "could you seperate it from OperatorUtils in case is more focus on SQL regex to Java regex.\nby define the ESCAPE is defined in SQL language, how do we support it?\nis it possible to seperate the translation rule from translation logic.\nfor example,\nTranslationRule.Buidler.put(\"//%\", %\").put(\"%\", \".*\").build()\nThen, apply rule on the input REGEX.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/534#discussion_r447840377", "createdAt": "2020-06-30T17:01:17Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/OperatorUtils.java", "diffHunk": "@@ -171,4 +171,69 @@ public String toString() {\n    */\n   public static final BiPredicate<ExprValue, ExprValue> COMPARE_WITH_NULL_OR_MISSING =\n       (left, right) -> left.isMissing() || right.isMissing() || left.isNull() || right.isNull();\n+\n+  /**\n+   * Wildcard pattern matcher util.\n+   * Percent (%) character for wildcard,\n+   * Underscore (_) character for a single character match.\n+   * @param pattern string pattern to match.\n+   * @return if text matches pattern returns true; else return false.\n+   */\n+  public static boolean matches(String pattern, String text) {\n+    return Pattern.compile(patternToRegex(pattern)).matcher(text).matches();\n+  }\n+\n+  private static final char DEFAULT_ESCAPE = '\\\\';\n+\n+  private static String patternToRegex(String patternString) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "314b0e06cf0acb8f5b06c85504b2cd85f507f477"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2120, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}