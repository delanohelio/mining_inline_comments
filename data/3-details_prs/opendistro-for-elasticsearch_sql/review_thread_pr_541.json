{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMTYzNjc3", "number": 541, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzoxMDoxMFrOEKMlYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjoxOTo0MFrOEdaF7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTI3Mzk1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/MinAggregator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzoxMDoxMFrOGrGX9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMToxNjoxMFrOGrTm_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0NjM4OQ==", "bodyText": "So if any field is NULL, then null is returned as result? Are we following some spec here? I checked MySQL and ANSI SQL, it seems \"All aggregate functions except COUNT(*) will ignore NULL values when computing their results.\" Unless all fields are null, result won't be null eventually.\nFor example, the result is 2 for the following test data and query.\nCREATE TABLE Test(age INT);\n\nINSERT INTO Test VALUES(1);\nINSERT INTO Test VALUES(null);\nINSERT INTO Test VALUES(2);\n\nSELECT MAX(age) FROM Test", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/541#discussion_r447846389", "createdAt": "2020-06-30T17:10:10Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/MinAggregator.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.aggregation;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.doubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.floatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getDoubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getFloatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getIntegerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getLongValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.integerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.longValue;\n+import static com.amazon.opendistroforelasticsearch.sql.utils.ExpressionUtils.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprNullValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.exception.ExpressionEvaluationException;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.storage.bindingtuple.BindingTuple;\n+import java.util.List;\n+\n+/**\n+ * The minimum aggregator aggregate the value evaluated by the expression.\n+ * If the expression evaluated result is NULL or MISSING, then the result is NULL.\n+ */\n+public class MinAggregator extends Aggregator<MinAggregator.MinState> {\n+\n+  public MinAggregator(List<Expression> arguments, ExprType returnType) {\n+    super(BuiltinFunctionName.MIN.getName(), arguments, returnType);\n+  }\n+\n+\n+  @Override\n+  public MinState create() {\n+    return new MinState(returnType);\n+  }\n+\n+  @Override\n+  public MinState iterate(BindingTuple tuple, MinState state) {\n+    Expression expression = getArguments().get(0);\n+    ExprValue value = expression.valueOf(tuple);\n+    if (value.isNull() || value.isMissing()) {\n+      state.isNullResult = true;\n+    } else {\n+      state.min(value);\n+    }\n+    return state;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return String.format(\"min(%s)\", format(getArguments()));\n+  }\n+\n+  protected class MinState implements AggregationState {\n+    private final ExprType type;\n+    private ExprValue minResult;\n+    private boolean isNullResult;\n+\n+    public MinState(ExprType type) {\n+      this.type = type;\n+      minResult = doubleValue(Double.MAX_VALUE);\n+      isNullResult = false;\n+    }\n+\n+    public void min(ExprValue value) {\n+      switch (type) {\n+        case INTEGER:\n+          minResult = integerValue(Math.min(getIntegerValue(minResult), getIntegerValue(value)));\n+          break;\n+        case LONG:\n+          minResult = longValue(Math.min(getLongValue(minResult), getLongValue(value)));\n+          break;\n+        case FLOAT:\n+          minResult = floatValue(Math.min(getFloatValue(minResult), getFloatValue(value)));\n+          break;\n+        case DOUBLE:\n+          minResult = doubleValue(Math.min(getDoubleValue(minResult), getDoubleValue(value)));\n+          break;\n+        default:\n+          throw new ExpressionEvaluationException(\n+              String.format(\"unexpected type [%s] in min aggregation\", type));\n+      }\n+    }\n+\n+    @Override\n+    public ExprValue result() {\n+      return isNullResult ? ExprNullValue.of() : minResult;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a82d3a6edb0180828a04913b9bc70621f2ca849"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2MzIzMA==", "bodyText": "+1, we should follow https://asterixdb.apache.org/docs/0.9.3/sqlpp/manual.html#Aggregation_functions ARRAY_XXXX\nOur previous implementation of SUM, AVG, COUNT also need to be changed.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/541#discussion_r448063230", "createdAt": "2020-07-01T01:16:10Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/MinAggregator.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.aggregation;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.doubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.floatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getDoubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getFloatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getIntegerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getLongValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.integerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.longValue;\n+import static com.amazon.opendistroforelasticsearch.sql.utils.ExpressionUtils.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprNullValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.exception.ExpressionEvaluationException;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.storage.bindingtuple.BindingTuple;\n+import java.util.List;\n+\n+/**\n+ * The minimum aggregator aggregate the value evaluated by the expression.\n+ * If the expression evaluated result is NULL or MISSING, then the result is NULL.\n+ */\n+public class MinAggregator extends Aggregator<MinAggregator.MinState> {\n+\n+  public MinAggregator(List<Expression> arguments, ExprType returnType) {\n+    super(BuiltinFunctionName.MIN.getName(), arguments, returnType);\n+  }\n+\n+\n+  @Override\n+  public MinState create() {\n+    return new MinState(returnType);\n+  }\n+\n+  @Override\n+  public MinState iterate(BindingTuple tuple, MinState state) {\n+    Expression expression = getArguments().get(0);\n+    ExprValue value = expression.valueOf(tuple);\n+    if (value.isNull() || value.isMissing()) {\n+      state.isNullResult = true;\n+    } else {\n+      state.min(value);\n+    }\n+    return state;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return String.format(\"min(%s)\", format(getArguments()));\n+  }\n+\n+  protected class MinState implements AggregationState {\n+    private final ExprType type;\n+    private ExprValue minResult;\n+    private boolean isNullResult;\n+\n+    public MinState(ExprType type) {\n+      this.type = type;\n+      minResult = doubleValue(Double.MAX_VALUE);\n+      isNullResult = false;\n+    }\n+\n+    public void min(ExprValue value) {\n+      switch (type) {\n+        case INTEGER:\n+          minResult = integerValue(Math.min(getIntegerValue(minResult), getIntegerValue(value)));\n+          break;\n+        case LONG:\n+          minResult = longValue(Math.min(getLongValue(minResult), getLongValue(value)));\n+          break;\n+        case FLOAT:\n+          minResult = floatValue(Math.min(getFloatValue(minResult), getFloatValue(value)));\n+          break;\n+        case DOUBLE:\n+          minResult = doubleValue(Math.min(getDoubleValue(minResult), getDoubleValue(value)));\n+          break;\n+        default:\n+          throw new ExpressionEvaluationException(\n+              String.format(\"unexpected type [%s] in min aggregation\", type));\n+      }\n+    }\n+\n+    @Override\n+    public ExprValue result() {\n+      return isNullResult ? ExprNullValue.of() : minResult;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0NjM4OQ=="}, "originalCommit": {"oid": "2a82d3a6edb0180828a04913b9bc70621f2ca849"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDQwOTMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/AvgAggregator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo0NzowNlrOG1JKBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDozMDozNFrOHIgL3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NzczNQ==", "bodyText": "Can this isEmptyCollection be replaced by count == 0? Because I notice count already represents the count of non-null/missing value only. Same question for all other aggregators.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/541#discussion_r458377735", "createdAt": "2020-07-21T20:47:06Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/AvgAggregator.java", "diffHunk": "@@ -63,19 +62,19 @@ public String toString() {\n   /**\n    * Average State.\n    */\n-  protected class AvgState implements AggregationState {\n+  protected static class AvgState implements AggregationState {\n     private int count;\n     private double total;\n-    private boolean isNullResult = false;\n+    private boolean isEmptyCollection = true;\n \n-    public AvgState() {\n+    AvgState() {\n       this.count = 0;\n       this.total = 0d;\n     }\n \n     @Override\n     public ExprValue result() {\n-      return isNullResult ? ExprNullValue.of() : ExprValueUtils.doubleValue(total / count);\n+      return isEmptyCollection ? ExprNullValue.of() : ExprValueUtils.doubleValue(total / count);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68556f8b7510421addcb94b68d898538d9387fcc"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3Nzk4MQ==", "bodyText": "made this change in avg/count/sum, but for min and max, we don't have to count the number so still using isEmptyCollection.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/541#discussion_r478677981", "createdAt": "2020-08-27T20:30:34Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/AvgAggregator.java", "diffHunk": "@@ -63,19 +62,19 @@ public String toString() {\n   /**\n    * Average State.\n    */\n-  protected class AvgState implements AggregationState {\n+  protected static class AvgState implements AggregationState {\n     private int count;\n     private double total;\n-    private boolean isNullResult = false;\n+    private boolean isEmptyCollection = true;\n \n-    public AvgState() {\n+    AvgState() {\n       this.count = 0;\n       this.total = 0d;\n     }\n \n     @Override\n     public ExprValue result() {\n-      return isNullResult ? ExprNullValue.of() : ExprValueUtils.doubleValue(total / count);\n+      return isEmptyCollection ? ExprNullValue.of() : ExprValueUtils.doubleValue(total / count);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NzczNQ=="}, "originalCommit": {"oid": "68556f8b7510421addcb94b68d898538d9387fcc"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDQ0MDU4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/MinAggregator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo1NjoyNlrOG1JdSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo1NjoyNlrOG1JdSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4MjY2Ng==", "bodyText": "Just a thought: if we see more aggregate functions like MIN and MAX later (ex. window functions), probably we can consider using a single class for generalization. Because I notice only several lines different between MinAggregator and MaxAggregator.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/541#discussion_r458382666", "createdAt": "2020-07-21T20:56:26Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/MinAggregator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.aggregation;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.LITERAL_NULL;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.doubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.floatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getDoubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getFloatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getIntegerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getLongValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getStringValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.integerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.longValue;\n+import static com.amazon.opendistroforelasticsearch.sql.utils.ExpressionUtils.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprNullValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType;\n+import com.amazon.opendistroforelasticsearch.sql.exception.ExpressionEvaluationException;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.storage.bindingtuple.BindingTuple;\n+import java.util.List;\n+\n+/**\n+ * The minimum aggregator aggregate the value evaluated by the expression.\n+ * If the expression evaluated result is NULL or MISSING, then the result is NULL.\n+ */\n+public class MinAggregator extends Aggregator<MinAggregator.MinState> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68556f8b7510421addcb94b68d898538d9387fcc"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjcwMTA2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/MinAggregator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjoxMzoyNVrOHIjDCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDo0NDo0N1rOHXF52A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyNDg3Mw==", "bodyText": "np: could you add parentheses or split it into multi-line?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/541#discussion_r478724873", "createdAt": "2020-08-27T22:13:25Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/MinAggregator.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.aggregation;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.LITERAL_NULL;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.doubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.floatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getDoubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getFloatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getIntegerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getLongValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getStringValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.integerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.longValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.DOUBLE;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.FLOAT;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.LONG;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.SHORT;\n+import static com.amazon.opendistroforelasticsearch.sql.utils.ExpressionUtils.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprNullValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType;\n+import com.amazon.opendistroforelasticsearch.sql.exception.ExpressionEvaluationException;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.storage.bindingtuple.BindingTuple;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * The minimum aggregator aggregate the value evaluated by the expression.\n+ * If the expression evaluated result is NULL or MISSING, then the result is NULL.\n+ */\n+public class MinAggregator extends Aggregator<MinAggregator.MinState> {\n+\n+  public MinAggregator(List<Expression> arguments, ExprCoreType returnType) {\n+    super(BuiltinFunctionName.MIN.getName(), arguments, returnType);\n+  }\n+\n+\n+  @Override\n+  public MinState create() {\n+    return new MinState(returnType);\n+  }\n+\n+  @Override\n+  public MinState iterate(BindingTuple tuple, MinState state) {\n+    Expression expression = getArguments().get(0);\n+    ExprValue value = expression.valueOf(tuple);\n+    if (!(value.isNull() || value.isMissing())) {\n+      state.isEmptyCollection = false;\n+      state.min(value);\n+    }\n+    return state;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return String.format(\"min(%s)\", format(getArguments()));\n+  }\n+\n+  protected static class MinState implements AggregationState {\n+    private ExprValue minResult;\n+    private boolean isEmptyCollection;\n+\n+    MinState(ExprCoreType type) {\n+      minResult = isNumber(type) ? doubleValue(Double.MAX_VALUE) : LITERAL_NULL;\n+      isEmptyCollection = true;\n+    }\n+\n+    public void min(ExprValue value) {\n+      minResult = minResult.isNull() ? value : minResult.compareTo(value) < 0 ? minResult : value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ec824fc0edfe49bb885fcde6b9ab2f895fd4c9f"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3NjAyNA==", "bodyText": "Done, thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/541#discussion_r493976024", "createdAt": "2020-09-24T00:44:47Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/MinAggregator.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.aggregation;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.LITERAL_NULL;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.doubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.floatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getDoubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getFloatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getIntegerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getLongValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getStringValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.integerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.longValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.DOUBLE;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.FLOAT;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.LONG;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.SHORT;\n+import static com.amazon.opendistroforelasticsearch.sql.utils.ExpressionUtils.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprNullValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType;\n+import com.amazon.opendistroforelasticsearch.sql.exception.ExpressionEvaluationException;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.storage.bindingtuple.BindingTuple;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * The minimum aggregator aggregate the value evaluated by the expression.\n+ * If the expression evaluated result is NULL or MISSING, then the result is NULL.\n+ */\n+public class MinAggregator extends Aggregator<MinAggregator.MinState> {\n+\n+  public MinAggregator(List<Expression> arguments, ExprCoreType returnType) {\n+    super(BuiltinFunctionName.MIN.getName(), arguments, returnType);\n+  }\n+\n+\n+  @Override\n+  public MinState create() {\n+    return new MinState(returnType);\n+  }\n+\n+  @Override\n+  public MinState iterate(BindingTuple tuple, MinState state) {\n+    Expression expression = getArguments().get(0);\n+    ExprValue value = expression.valueOf(tuple);\n+    if (!(value.isNull() || value.isMissing())) {\n+      state.isEmptyCollection = false;\n+      state.min(value);\n+    }\n+    return state;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return String.format(\"min(%s)\", format(getArguments()));\n+  }\n+\n+  protected static class MinState implements AggregationState {\n+    private ExprValue minResult;\n+    private boolean isEmptyCollection;\n+\n+    MinState(ExprCoreType type) {\n+      minResult = isNumber(type) ? doubleValue(Double.MAX_VALUE) : LITERAL_NULL;\n+      isEmptyCollection = true;\n+    }\n+\n+    public void min(ExprValue value) {\n+      minResult = minResult.isNull() ? value : minResult.compareTo(value) < 0 ? minResult : value;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyNDg3Mw=="}, "originalCommit": {"oid": "6ec824fc0edfe49bb885fcde6b9ab2f895fd4c9f"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjcwOTAxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/MinAggregator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjoxNjoyOFrOHIjHhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxODozMzoyMlrOHJQnlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyNjAyMA==", "bodyText": "Trying to understand why we need different initial values for minResult. Can we just use literal null?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/541#discussion_r478726020", "createdAt": "2020-08-27T22:16:28Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/MinAggregator.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.aggregation;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.LITERAL_NULL;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.doubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.floatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getDoubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getFloatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getIntegerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getLongValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getStringValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.integerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.longValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.DOUBLE;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.FLOAT;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.LONG;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.SHORT;\n+import static com.amazon.opendistroforelasticsearch.sql.utils.ExpressionUtils.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprNullValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType;\n+import com.amazon.opendistroforelasticsearch.sql.exception.ExpressionEvaluationException;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.storage.bindingtuple.BindingTuple;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * The minimum aggregator aggregate the value evaluated by the expression.\n+ * If the expression evaluated result is NULL or MISSING, then the result is NULL.\n+ */\n+public class MinAggregator extends Aggregator<MinAggregator.MinState> {\n+\n+  public MinAggregator(List<Expression> arguments, ExprCoreType returnType) {\n+    super(BuiltinFunctionName.MIN.getName(), arguments, returnType);\n+  }\n+\n+\n+  @Override\n+  public MinState create() {\n+    return new MinState(returnType);\n+  }\n+\n+  @Override\n+  public MinState iterate(BindingTuple tuple, MinState state) {\n+    Expression expression = getArguments().get(0);\n+    ExprValue value = expression.valueOf(tuple);\n+    if (!(value.isNull() || value.isMissing())) {\n+      state.isEmptyCollection = false;\n+      state.min(value);\n+    }\n+    return state;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return String.format(\"min(%s)\", format(getArguments()));\n+  }\n+\n+  protected static class MinState implements AggregationState {\n+    private ExprValue minResult;\n+    private boolean isEmptyCollection;\n+\n+    MinState(ExprCoreType type) {\n+      minResult = isNumber(type) ? doubleValue(Double.MAX_VALUE) : LITERAL_NULL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ec824fc0edfe49bb885fcde6b9ab2f895fd4c9f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3MTUwOA==", "bodyText": "Yes sounds good", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/541#discussion_r479471508", "createdAt": "2020-08-28T18:33:22Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/MinAggregator.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.aggregation;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.LITERAL_NULL;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.doubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.floatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getDoubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getFloatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getIntegerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getLongValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getStringValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.integerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.longValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.DOUBLE;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.FLOAT;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.LONG;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.SHORT;\n+import static com.amazon.opendistroforelasticsearch.sql.utils.ExpressionUtils.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprNullValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType;\n+import com.amazon.opendistroforelasticsearch.sql.exception.ExpressionEvaluationException;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.storage.bindingtuple.BindingTuple;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * The minimum aggregator aggregate the value evaluated by the expression.\n+ * If the expression evaluated result is NULL or MISSING, then the result is NULL.\n+ */\n+public class MinAggregator extends Aggregator<MinAggregator.MinState> {\n+\n+  public MinAggregator(List<Expression> arguments, ExprCoreType returnType) {\n+    super(BuiltinFunctionName.MIN.getName(), arguments, returnType);\n+  }\n+\n+\n+  @Override\n+  public MinState create() {\n+    return new MinState(returnType);\n+  }\n+\n+  @Override\n+  public MinState iterate(BindingTuple tuple, MinState state) {\n+    Expression expression = getArguments().get(0);\n+    ExprValue value = expression.valueOf(tuple);\n+    if (!(value.isNull() || value.isMissing())) {\n+      state.isEmptyCollection = false;\n+      state.min(value);\n+    }\n+    return state;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return String.format(\"min(%s)\", format(getArguments()));\n+  }\n+\n+  protected static class MinState implements AggregationState {\n+    private ExprValue minResult;\n+    private boolean isEmptyCollection;\n+\n+    MinState(ExprCoreType type) {\n+      minResult = isNumber(type) ? doubleValue(Double.MAX_VALUE) : LITERAL_NULL;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyNjAyMA=="}, "originalCommit": {"oid": "6ec824fc0edfe49bb885fcde6b9ab2f895fd4c9f"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjcxNjYwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/MinAggregator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjoxOTo0MFrOHIjMAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxODozMzozMVrOHJQn1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyNzE3MQ==", "bodyText": "So isEmptyCollection is true only when minResult is not updated initially right? Could we remove this flag and just return minResult?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/541#discussion_r478727171", "createdAt": "2020-08-27T22:19:40Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/MinAggregator.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.aggregation;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.LITERAL_NULL;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.doubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.floatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getDoubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getFloatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getIntegerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getLongValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getStringValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.integerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.longValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.DOUBLE;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.FLOAT;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.LONG;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.SHORT;\n+import static com.amazon.opendistroforelasticsearch.sql.utils.ExpressionUtils.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprNullValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType;\n+import com.amazon.opendistroforelasticsearch.sql.exception.ExpressionEvaluationException;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.storage.bindingtuple.BindingTuple;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * The minimum aggregator aggregate the value evaluated by the expression.\n+ * If the expression evaluated result is NULL or MISSING, then the result is NULL.\n+ */\n+public class MinAggregator extends Aggregator<MinAggregator.MinState> {\n+\n+  public MinAggregator(List<Expression> arguments, ExprCoreType returnType) {\n+    super(BuiltinFunctionName.MIN.getName(), arguments, returnType);\n+  }\n+\n+\n+  @Override\n+  public MinState create() {\n+    return new MinState(returnType);\n+  }\n+\n+  @Override\n+  public MinState iterate(BindingTuple tuple, MinState state) {\n+    Expression expression = getArguments().get(0);\n+    ExprValue value = expression.valueOf(tuple);\n+    if (!(value.isNull() || value.isMissing())) {\n+      state.isEmptyCollection = false;\n+      state.min(value);\n+    }\n+    return state;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return String.format(\"min(%s)\", format(getArguments()));\n+  }\n+\n+  protected static class MinState implements AggregationState {\n+    private ExprValue minResult;\n+    private boolean isEmptyCollection;\n+\n+    MinState(ExprCoreType type) {\n+      minResult = isNumber(type) ? doubleValue(Double.MAX_VALUE) : LITERAL_NULL;\n+      isEmptyCollection = true;\n+    }\n+\n+    public void min(ExprValue value) {\n+      minResult = minResult.isNull() ? value : minResult.compareTo(value) < 0 ? minResult : value;\n+    }\n+\n+    @Override\n+    public ExprValue result() {\n+      return isEmptyCollection ? ExprNullValue.of() : minResult;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ec824fc0edfe49bb885fcde6b9ab2f895fd4c9f"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3MTU3NA==", "bodyText": "Done, thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/541#discussion_r479471574", "createdAt": "2020-08-28T18:33:31Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/MinAggregator.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.aggregation;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.LITERAL_NULL;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.doubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.floatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getDoubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getFloatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getIntegerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getLongValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getStringValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.integerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.longValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.DOUBLE;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.FLOAT;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.LONG;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.SHORT;\n+import static com.amazon.opendistroforelasticsearch.sql.utils.ExpressionUtils.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprNullValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType;\n+import com.amazon.opendistroforelasticsearch.sql.exception.ExpressionEvaluationException;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.storage.bindingtuple.BindingTuple;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * The minimum aggregator aggregate the value evaluated by the expression.\n+ * If the expression evaluated result is NULL or MISSING, then the result is NULL.\n+ */\n+public class MinAggregator extends Aggregator<MinAggregator.MinState> {\n+\n+  public MinAggregator(List<Expression> arguments, ExprCoreType returnType) {\n+    super(BuiltinFunctionName.MIN.getName(), arguments, returnType);\n+  }\n+\n+\n+  @Override\n+  public MinState create() {\n+    return new MinState(returnType);\n+  }\n+\n+  @Override\n+  public MinState iterate(BindingTuple tuple, MinState state) {\n+    Expression expression = getArguments().get(0);\n+    ExprValue value = expression.valueOf(tuple);\n+    if (!(value.isNull() || value.isMissing())) {\n+      state.isEmptyCollection = false;\n+      state.min(value);\n+    }\n+    return state;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return String.format(\"min(%s)\", format(getArguments()));\n+  }\n+\n+  protected static class MinState implements AggregationState {\n+    private ExprValue minResult;\n+    private boolean isEmptyCollection;\n+\n+    MinState(ExprCoreType type) {\n+      minResult = isNumber(type) ? doubleValue(Double.MAX_VALUE) : LITERAL_NULL;\n+      isEmptyCollection = true;\n+    }\n+\n+    public void min(ExprValue value) {\n+      minResult = minResult.isNull() ? value : minResult.compareTo(value) < 0 ? minResult : value;\n+    }\n+\n+    @Override\n+    public ExprValue result() {\n+      return isEmptyCollection ? ExprNullValue.of() : minResult;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyNzE3MQ=="}, "originalCommit": {"oid": "6ec824fc0edfe49bb885fcde6b9ab2f895fd4c9f"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2128, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}