{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxNzk2MzY4", "number": 731, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMToyMDo0OVrOEisgcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzo1ODo1N1rOEjXhPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODE2MjQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/ast/dsl/AstDSL.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMToyMDo0OVrOHQuMiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMTowMjowOVrOHQxVIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI5NjEzOQ==", "bodyText": "Nit: Extra line", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/731#discussion_r487296139", "createdAt": "2020-09-11T21:20:49Z", "author": {"login": "lyndonb-bq"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/ast/dsl/AstDSL.java", "diffHunk": "@@ -308,4 +332,5 @@ public static RareTopN rareTopN(UnresolvedPlan input, CommandType commandType,\n     return new RareTopN(input, commandType, noOfResults, Arrays.asList(fields), groupList)\n         .attach(input);\n   }\n+  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "480fdf8c5dc86e60007eb4e4a49d7ee93eb9d2a8"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NzQ4OA==", "bodyText": "removed", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/731#discussion_r487347488", "createdAt": "2020-09-12T01:02:09Z", "author": {"login": "rupal-bq"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/ast/dsl/AstDSL.java", "diffHunk": "@@ -308,4 +332,5 @@ public static RareTopN rareTopN(UnresolvedPlan input, CommandType commandType,\n     return new RareTopN(input, commandType, noOfResults, Arrays.asList(fields), groupList)\n         .attach(input);\n   }\n+  ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI5NjEzOQ=="}, "originalCommit": {"oid": "480fdf8c5dc86e60007eb4e4a49d7ee93eb9d2a8"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODIxNDE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/HeadOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMTo0MzoyN1rOHQurfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMTowMjo1MVrOHQxVWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMwNDA2Mg==", "bodyText": "This if statement logically equivalent to:\nif (isNull || isMissing || !booleanValue)\nWould suggest simplifying it to that", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/731#discussion_r487304062", "createdAt": "2020-09-11T21:43:27Z", "author": {"login": "lyndonb-bq"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/HeadOperator.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.planner.physical;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprBooleanValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.LiteralExpression;\n+import java.util.Collections;\n+import java.util.List;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.NonNull;\n+\n+@Getter\n+@EqualsAndHashCode\n+public class HeadOperator extends PhysicalPlan {\n+\n+  @Getter\n+  private final PhysicalPlan input;\n+  @Getter\n+  private final Boolean keepLast;\n+  @Getter\n+  private final Expression whileExpr;\n+  @Getter\n+  private final Integer number;\n+\n+  private static final Integer DEFAULT_LIMIT = 10;\n+  private static final Boolean IGNORE_LAST = false;\n+\n+  @EqualsAndHashCode.Exclude\n+  private int recordCount = 0;\n+  @EqualsAndHashCode.Exclude\n+  private boolean foundFirstFalse = false;\n+  @EqualsAndHashCode.Exclude\n+  private ExprValue next;\n+\n+  @NonNull\n+  public HeadOperator(PhysicalPlan input) {\n+    this(input, IGNORE_LAST, new LiteralExpression(ExprBooleanValue.of(true)), DEFAULT_LIMIT);\n+  }\n+\n+  /**\n+   * HeadOperator Constructor.\n+   *\n+   * @param input     Input {@link PhysicalPlan}\n+   * @param keepLast  Controls whether the last result in the result set is retained. The last\n+   *                  result returned is the result that caused the whileExpr to evaluate\n+   *                  to false or NULL.\n+   * @param whileExpr The search returns results until this expression evaluates to false\n+   * @param number    Number of specified results\n+   */\n+  @NonNull\n+  public HeadOperator(PhysicalPlan input, Boolean keepLast, Expression whileExpr, Integer number) {\n+    this.input = input;\n+    this.keepLast = keepLast;\n+    this.whileExpr = whileExpr;\n+    this.number = number;\n+  }\n+\n+  @Override\n+  public <R, C> R accept(PhysicalPlanNodeVisitor<R, C> visitor, C context) {\n+    return visitor.visitHead(this, context);\n+  }\n+\n+  @Override\n+  public List<PhysicalPlan> getChild() {\n+    return Collections.singletonList(input);\n+  }\n+\n+  @Override\n+  public boolean hasNext() {\n+    while (input.hasNext() && !foundFirstFalse) {\n+      ExprValue inputVal = input.next();\n+      ExprValue exprValue = whileExpr.valueOf(inputVal.bindingTuples());\n+\n+      if (recordCount < number) {\n+        if (!(!(exprValue.isNull() || exprValue.isMissing()) && (exprValue.booleanValue()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "480fdf8c5dc86e60007eb4e4a49d7ee93eb9d2a8"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NzU0NA==", "bodyText": "Thanks, Lyndon. I upated PR with the simplified logic and removed while loop.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/731#discussion_r487347544", "createdAt": "2020-09-12T01:02:51Z", "author": {"login": "rupal-bq"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/HeadOperator.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.planner.physical;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprBooleanValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.LiteralExpression;\n+import java.util.Collections;\n+import java.util.List;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.NonNull;\n+\n+@Getter\n+@EqualsAndHashCode\n+public class HeadOperator extends PhysicalPlan {\n+\n+  @Getter\n+  private final PhysicalPlan input;\n+  @Getter\n+  private final Boolean keepLast;\n+  @Getter\n+  private final Expression whileExpr;\n+  @Getter\n+  private final Integer number;\n+\n+  private static final Integer DEFAULT_LIMIT = 10;\n+  private static final Boolean IGNORE_LAST = false;\n+\n+  @EqualsAndHashCode.Exclude\n+  private int recordCount = 0;\n+  @EqualsAndHashCode.Exclude\n+  private boolean foundFirstFalse = false;\n+  @EqualsAndHashCode.Exclude\n+  private ExprValue next;\n+\n+  @NonNull\n+  public HeadOperator(PhysicalPlan input) {\n+    this(input, IGNORE_LAST, new LiteralExpression(ExprBooleanValue.of(true)), DEFAULT_LIMIT);\n+  }\n+\n+  /**\n+   * HeadOperator Constructor.\n+   *\n+   * @param input     Input {@link PhysicalPlan}\n+   * @param keepLast  Controls whether the last result in the result set is retained. The last\n+   *                  result returned is the result that caused the whileExpr to evaluate\n+   *                  to false or NULL.\n+   * @param whileExpr The search returns results until this expression evaluates to false\n+   * @param number    Number of specified results\n+   */\n+  @NonNull\n+  public HeadOperator(PhysicalPlan input, Boolean keepLast, Expression whileExpr, Integer number) {\n+    this.input = input;\n+    this.keepLast = keepLast;\n+    this.whileExpr = whileExpr;\n+    this.number = number;\n+  }\n+\n+  @Override\n+  public <R, C> R accept(PhysicalPlanNodeVisitor<R, C> visitor, C context) {\n+    return visitor.visitHead(this, context);\n+  }\n+\n+  @Override\n+  public List<PhysicalPlan> getChild() {\n+    return Collections.singletonList(input);\n+  }\n+\n+  @Override\n+  public boolean hasNext() {\n+    while (input.hasNext() && !foundFirstFalse) {\n+      ExprValue inputVal = input.next();\n+      ExprValue exprValue = whileExpr.valueOf(inputVal.bindingTuples());\n+\n+      if (recordCount < number) {\n+        if (!(!(exprValue.isNull() || exprValue.isMissing()) && (exprValue.booleanValue()))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMwNDA2Mg=="}, "originalCommit": {"oid": "480fdf8c5dc86e60007eb4e4a49d7ee93eb9d2a8"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTIwMjI0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/RareTopNOperatorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzo1NToyN1rOHRrigw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMToyNDoyNVrOHRtFfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwMTE4Nw==", "bodyText": "2019 -> 2020", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/731#discussion_r488301187", "createdAt": "2020-09-14T23:55:27Z", "author": {"login": "penghuo"}, "path": "core/src/test/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/RareTopNOperatorTest.java", "diffHunk": "@@ -1,3 +1,18 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c65bd3cd58bf146a29c706bfc1dbe1a3117c7c4"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyNjUyNg==", "bodyText": "fixed", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/731#discussion_r488326526", "createdAt": "2020-09-15T01:24:25Z", "author": {"login": "rupal-bq"}, "path": "core/src/test/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/RareTopNOperatorTest.java", "diffHunk": "@@ -1,3 +1,18 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwMTE4Nw=="}, "originalCommit": {"oid": "6c65bd3cd58bf146a29c706bfc1dbe1a3117c7c4"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTIwOTU5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/HeadOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzo1ODo1N1rOHRrmtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMToyNDozMFrOHRtFng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwMjI2MQ==", "bodyText": "Doc", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/731#discussion_r488302261", "createdAt": "2020-09-14T23:58:57Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/HeadOperator.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.planner.physical;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprBooleanValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.LiteralExpression;\n+import java.util.Collections;\n+import java.util.List;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.NonNull;\n+\n+@Getter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c65bd3cd58bf146a29c706bfc1dbe1a3117c7c4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyNjU1OA==", "bodyText": "added", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/731#discussion_r488326558", "createdAt": "2020-09-15T01:24:30Z", "author": {"login": "rupal-bq"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/HeadOperator.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.planner.physical;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprBooleanValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.LiteralExpression;\n+import java.util.Collections;\n+import java.util.List;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.NonNull;\n+\n+@Getter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwMjI2MQ=="}, "originalCommit": {"oid": "6c65bd3cd58bf146a29c706bfc1dbe1a3117c7c4"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2018, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}