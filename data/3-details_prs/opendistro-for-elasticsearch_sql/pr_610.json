{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1ODI2ODc0", "number": 610, "title": "ODBC: Adding BASIC & AWS_SIGV4 auth in M Connector ", "bodyText": "Issue #595\nDescription of changes:\n\nAdded BASIC auth\nAdded AWS_SIGV4 auth\nAdded unit test for checking the connection\nAdded error handling\n\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-07-23T16:30:44Z", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/610", "merged": true, "mergeCommit": {"oid": "9dac0acbe899bf2e54206ef0652651570f180296"}, "closed": true, "closedAt": "2020-07-25T01:20:35Z", "author": {"login": "rupal-bq"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc2U7rsgH2gAyNDU1ODI2ODc0OjQyN2JkNzlhMTM4YmMxM2Y1M2UwNzFjODQ4NWQ4NzI2YWExOWQxZGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc4OOm2AFqTQ1NTI0OTAzOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "427bd79a138bc13f53e071c8485d8726aa19d1dd", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/427bd79a138bc13f53e071c8485d8726aa19d1dd", "committedDate": "2020-07-19T04:01:17Z", "message": "pbi connector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "401a05360a74b165b372f274e1c01b61a5c06ebd", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/401a05360a74b165b372f274e1c01b61a5c06ebd", "committedDate": "2020-07-19T04:21:22Z", "message": "update names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11856cdce473256a3048d967b447b43197181604", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/11856cdce473256a3048d967b447b43197181604", "committedDate": "2020-07-20T02:42:45Z", "message": "- add mez file\n- add docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6932698c592fdc2d74d9d92e9a044bc01b979f6", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/e6932698c592fdc2d74d9d92e9a044bc01b979f6", "committedDate": "2020-07-20T02:46:49Z", "message": "nit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4158974559d9fc35e6ea0a610aaf0063ad0397fe", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/4158974559d9fc35e6ea0a610aaf0063ad0397fe", "committedDate": "2020-07-20T02:49:26Z", "message": "nit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "586793f0d70894c6042fd9177e83c88f24cf4164", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/586793f0d70894c6042fd9177e83c88f24cf4164", "committedDate": "2020-07-20T03:13:33Z", "message": "image resize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cb48a4fffa2aa88b59917da2961cba7e4849580", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/9cb48a4fffa2aa88b59917da2961cba7e4849580", "committedDate": "2020-07-20T03:17:21Z", "message": "resize image"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c234b8829b0f5b1864bfe500f2b9053c79c7b12d", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/c234b8829b0f5b1864bfe500f2b9053c79c7b12d", "committedDate": "2020-07-20T03:32:00Z", "message": "remove extra lines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d0c0509eea739936f4ee4b81307d0566cb39dad", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/0d0c0509eea739936f4ee4b81307d0566cb39dad", "committedDate": "2020-07-20T03:45:54Z", "message": "nit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50d4ccf583d527b263bd8465d29b80f32a9f0a62", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/50d4ccf583d527b263bd8465d29b80f32a9f0a62", "committedDate": "2020-07-20T03:46:55Z", "message": "update mez file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "023fb674a86c080f802c32fcd46f11c5bfeadba8", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/023fb674a86c080f802c32fcd46f11c5bfeadba8", "committedDate": "2020-07-21T17:39:34Z", "message": "rename connector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b857c003716461562dbce6fa10df6090eeaad3d", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/0b857c003716461562dbce6fa10df6090eeaad3d", "committedDate": "2020-07-21T17:40:37Z", "message": "rename mez file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06ae48656b35034cd62dd826569b08c9b075a3d9", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/06ae48656b35034cd62dd826569b08c9b075a3d9", "committedDate": "2020-07-23T03:04:10Z", "message": "- add basic & aws auth\n- add unit test\n- add errors\n- enable direct query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2ff22274877393d4777bff958616d371ec1de32", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/b2ff22274877393d4777bff958616d371ec1de32", "committedDate": "2020-07-23T03:19:22Z", "message": "Merge branch 'develop' of https://github.com/rupal-bq/sql into feature/odbc/pbi\n\n# Conflicts:\n#\tsql-odbc/.gitignore\n#\tsql-odbc/src/PowerBIConnector/OdfeSqlOdbcPBIConnector.mproj\n#\tsql-odbc/src/PowerBIConnector/OdfeSqlOdbcPBIConnector.pq\n#\tsql-odbc/src/PowerBIConnector/OdfeSqlOdbcPBIConnector.query.pq\n#\tsql-odbc/src/PowerBIConnector/bin/Release/OdfeSqlOdbcPBIConnector.mez"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f6ff5d99d07e525874fde3a9ab6987dbe5bfadf", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/3f6ff5d99d07e525874fde3a9ab6987dbe5bfadf", "committedDate": "2020-07-23T03:21:15Z", "message": "add connector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad73d915d13dce97ea855154d9428e67b09368a9", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ad73d915d13dce97ea855154d9428e67b09368a9", "committedDate": "2020-07-23T03:41:43Z", "message": "update doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91d5cbebad32016daa6445db98ad0fc938a0be65", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/91d5cbebad32016daa6445db98ad0fc938a0be65", "committedDate": "2020-07-23T03:59:03Z", "message": "add ssl for auth"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddc725bd3cfd70d3501ae325871eaab73b669fd3", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ddc725bd3cfd70d3501ae325871eaab73b669fd3", "committedDate": "2020-07-23T16:25:05Z", "message": "update docs for errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9463517addc5113cbc8bfc60ca7069b6a9e4b83", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/b9463517addc5113cbc8bfc60ca7069b6a9e4b83", "committedDate": "2020-07-23T20:07:00Z", "message": "Merge branch 'develop' of https://github.com/rupal-bq/sql into feature/odbc/pbi"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MDYzOTU0", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/610#pullrequestreview-455063954", "createdAt": "2020-07-24T17:29:45Z", "commit": {"oid": "b9463517addc5113cbc8bfc60ca7069b6a9e4b83"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzoyOTo0NVrOG232tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzoyOTo0NVrOG232tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE5MTQxMg==", "bodyText": "Can you verify whether ODFE SQL supports this [skip,]take syntax? If it doesn't, then we may want to change this to LIMIT <take> OFFSET <skip>", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/610#discussion_r460191412", "createdAt": "2020-07-24T17:29:45Z", "author": {"login": "jordanw-bq"}, "path": "sql-odbc/src/PowerBIConnector/OdfeSqlOdbcPBIConnector.pq", "diffHunk": "@@ -1,42 +1,214 @@\n-\ufeff// This file contains your Data Connector logic\n+// This file contains Data Connector logic\n section OdfeSqlOdbcPBIConnector;\n \n+// When set to true, additional trace information will be written out to the User log. \n+// This should be set to false before release. Tracing is done through a call to \n+// Diagnostics.LogValue(). When EnableTraceOutput is set to false, the call becomes a \n+// no-op and simply returns the original value.\n+EnableTraceOutput = true;\n+\n [DataSource.Kind=\"OdfeSqlOdbcPBIConnector\", Publish=\"OdfeSqlOdbcPBIConnector.Publish\"]\n shared OdfeSqlOdbcPBIConnector.Contents = Value.ReplaceType(OdfeSqlOdbcPBIConnectorImpl, OdfeSqlOdbcPBIConnectorType); \n \n // Wrapper function to provide additional UI customization.\n OdfeSqlOdbcPBIConnectorType = type function (\n         Host as (type text meta [\n             Documentation.FieldCaption = \"Host\",\n-            Documentation.FieldDescription = \"The hostname of the Open Distro For Elasticsearc server.\",\n+            Documentation.FieldDescription = \"The hostname of the Open Distro For Elasticsearch server.\",\n             Documentation.SampleValues = { \"localhost\" }\n         ]),\n-        Port as (type number meta [\n+        optional Port as (type number meta [\n             Documentation.FieldCaption = \"Port\",\n-            Documentation.FieldDescription = \"The port the Open Distro For Elasticsearc server is running on.\",\n+            Documentation.FieldDescription = \"The port of the Open Distro For Elasticsearch server is running on.\",\n             Documentation.SampleValues = { 9200 }\n         ])\n     )\n     as table meta [\n         Documentation.Name = \"Open Distro For Elasticsearch\"\n     ];\n \n-OdfeSqlOdbcPBIConnectorImpl = (Host as text, Port as number) as table =>\n+OdfeSqlOdbcPBIConnectorImpl = (Host as text, optional Port as number) as table =>\n     let\n+        Credential = Extension.CurrentCredential(),\n+        AuthenticationMode = Credential[AuthenticationKind],\n+\n+        // Sets connection string properties for authentication.\n+        CredentialConnectionString =\n+            if AuthenticationMode = \"UsernamePassword\" then\n+                [\n+                    Auth = \"BASIC\",\n+                    UID = Credential[Username],\n+                    PWD = Credential[Password]\n+                ]\n+            else if AuthenticationMode = \"Key\" then\n+                [\n+                    Auth = \"AWS_SIGV4\",\n+                    Region = Credential[Key]\n+                ]\n+            else \n+                [\n+                    Auth = \"NONE\"\n+                ],\n+\n+        // Sets connection string properties for encrypted connections.\n+        EncryptedConnectionString =\n+            if Credential[EncryptConnection] = null or Credential[EncryptConnection] = true then\n+                [\n+                    UseSSL = 1\n+                ]\n+            else\n+                [\n+                    UseSSL = 0\n+                ],\n+\n+        // Set host & port in connection string. \n+        // Do not include port in connection string for aws server connection.\n+        Server = \n+            if Port <> null then\n+            [\n+                Host = Host,\n+                Port = Port\n+            ]\n+            else\n+            [\n+                Host = Host\n+            ],\n+\n         ConnectionString = [\n-            Driver = \"ODFE SQL ODBC Driver\",\n-            Host = Host,\n-            Port = Port\n+            Driver = \"ODFE SQL ODBC Driver\"\n         ],\n-        OdbcDatasource = Odbc.DataSource(ConnectionString)\n+\n+        SqlCapabilities = Diagnostics.LogValue(\"SqlCapabilities_Options\", [\n+            GroupByCapabilities = ODBC[SQL_GB][SQL_GB_COLLATE]\n+        ]),\n+\n+        SQLGetInfo = Diagnostics.LogValue(\"SQLGetInfo_Options\", [\n+            SQL_SQL92_PREDICATES = ODBC[SQL_SP][All],\n+            SQL_AGGREGATE_FUNCTIONS = ODBC[SQL_AF][All]\n+        ]),\n+\n+        SQLGetTypeInfo = (types) => \n+            if (EnableTraceOutput <> true) then types else\n+            let\n+                // Outputting the entire table might be too large, and result in the value being truncated.\n+                // We can output a row at a time instead with Table.TransformRows()\n+                rows = Table.TransformRows(types, each Diagnostics.LogValue(\"SQLGetTypeInfo \" & _[TYPE_NAME], _)),\n+                toTable = Table.FromRecords(rows)\n+            in\n+                Value.ReplaceType(toTable, Value.Type(types)),\n+\n+        // SQLColumns is a function handler that receives the results of an ODBC call to SQLColumns().\n+        SQLColumns = (catalogName, schemaName, tableName, columnName, source) =>\n+            if (EnableTraceOutput <> true) then source else\n+            // the if statement conditions will force the values to evaluated/written to diagnostics\n+            if (Diagnostics.LogValue(\"SQLColumns.TableName\", tableName) <> \"***\" and Diagnostics.LogValue(\"SQLColumns.ColumnName\", columnName) <> \"***\") then\n+                let\n+                    // Outputting the entire table might be too large, and result in the value being truncated.\n+                    // We can output a row at a time instead with Table.TransformRows()\n+                    rows = Table.TransformRows(source, each Diagnostics.LogValue(\"SQLColumns\", _)),\n+                    toTable = Table.FromRecords(rows)\n+                in\n+                    Value.ReplaceType(toTable, Value.Type(source))\n+            else\n+                source,\n+             \n+        // Add support for `LIMIT` and `OFFSET` clauses (rather than `TOP`)\n+        AstVisitor = [\n+            // format is \"LIMIT [<skip>,]<take>\" - ex. LIMIT 2,10 or LIMIT 10", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9463517addc5113cbc8bfc60ca7069b6a9e4b83"}, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MDY1ODUz", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/610#pullrequestreview-455065853", "createdAt": "2020-07-24T17:32:42Z", "commit": {"oid": "b9463517addc5113cbc8bfc60ca7069b6a9e4b83"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzozMjo0M1rOG238kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzozMjo0M1rOG238kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE5MjkxMw==", "bodyText": "These are values that we can change at the driver level. Unless those changes break other applications, lets set Capabilities and GetInfo values there instead\nCan you remove these lines (SQLCapabilities & SQLGetInfo) and verify if we get the same connection behaviour?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/610#discussion_r460192913", "createdAt": "2020-07-24T17:32:43Z", "author": {"login": "jordanw-bq"}, "path": "sql-odbc/src/PowerBIConnector/OdfeSqlOdbcPBIConnector.pq", "diffHunk": "@@ -1,42 +1,214 @@\n-\ufeff// This file contains your Data Connector logic\n+// This file contains Data Connector logic\n section OdfeSqlOdbcPBIConnector;\n \n+// When set to true, additional trace information will be written out to the User log. \n+// This should be set to false before release. Tracing is done through a call to \n+// Diagnostics.LogValue(). When EnableTraceOutput is set to false, the call becomes a \n+// no-op and simply returns the original value.\n+EnableTraceOutput = true;\n+\n [DataSource.Kind=\"OdfeSqlOdbcPBIConnector\", Publish=\"OdfeSqlOdbcPBIConnector.Publish\"]\n shared OdfeSqlOdbcPBIConnector.Contents = Value.ReplaceType(OdfeSqlOdbcPBIConnectorImpl, OdfeSqlOdbcPBIConnectorType); \n \n // Wrapper function to provide additional UI customization.\n OdfeSqlOdbcPBIConnectorType = type function (\n         Host as (type text meta [\n             Documentation.FieldCaption = \"Host\",\n-            Documentation.FieldDescription = \"The hostname of the Open Distro For Elasticsearc server.\",\n+            Documentation.FieldDescription = \"The hostname of the Open Distro For Elasticsearch server.\",\n             Documentation.SampleValues = { \"localhost\" }\n         ]),\n-        Port as (type number meta [\n+        optional Port as (type number meta [\n             Documentation.FieldCaption = \"Port\",\n-            Documentation.FieldDescription = \"The port the Open Distro For Elasticsearc server is running on.\",\n+            Documentation.FieldDescription = \"The port of the Open Distro For Elasticsearch server is running on.\",\n             Documentation.SampleValues = { 9200 }\n         ])\n     )\n     as table meta [\n         Documentation.Name = \"Open Distro For Elasticsearch\"\n     ];\n \n-OdfeSqlOdbcPBIConnectorImpl = (Host as text, Port as number) as table =>\n+OdfeSqlOdbcPBIConnectorImpl = (Host as text, optional Port as number) as table =>\n     let\n+        Credential = Extension.CurrentCredential(),\n+        AuthenticationMode = Credential[AuthenticationKind],\n+\n+        // Sets connection string properties for authentication.\n+        CredentialConnectionString =\n+            if AuthenticationMode = \"UsernamePassword\" then\n+                [\n+                    Auth = \"BASIC\",\n+                    UID = Credential[Username],\n+                    PWD = Credential[Password]\n+                ]\n+            else if AuthenticationMode = \"Key\" then\n+                [\n+                    Auth = \"AWS_SIGV4\",\n+                    Region = Credential[Key]\n+                ]\n+            else \n+                [\n+                    Auth = \"NONE\"\n+                ],\n+\n+        // Sets connection string properties for encrypted connections.\n+        EncryptedConnectionString =\n+            if Credential[EncryptConnection] = null or Credential[EncryptConnection] = true then\n+                [\n+                    UseSSL = 1\n+                ]\n+            else\n+                [\n+                    UseSSL = 0\n+                ],\n+\n+        // Set host & port in connection string. \n+        // Do not include port in connection string for aws server connection.\n+        Server = \n+            if Port <> null then\n+            [\n+                Host = Host,\n+                Port = Port\n+            ]\n+            else\n+            [\n+                Host = Host\n+            ],\n+\n         ConnectionString = [\n-            Driver = \"ODFE SQL ODBC Driver\",\n-            Host = Host,\n-            Port = Port\n+            Driver = \"ODFE SQL ODBC Driver\"\n         ],\n-        OdbcDatasource = Odbc.DataSource(ConnectionString)\n+\n+        SqlCapabilities = Diagnostics.LogValue(\"SqlCapabilities_Options\", [\n+            GroupByCapabilities = ODBC[SQL_GB][SQL_GB_COLLATE]\n+        ]),\n+\n+        SQLGetInfo = Diagnostics.LogValue(\"SQLGetInfo_Options\", [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9463517addc5113cbc8bfc60ca7069b6a9e4b83"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bd944c759017fb4c6666d08eae676d1e3a988ea", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/2bd944c759017fb4c6666d08eae676d1e3a988ea", "committedDate": "2020-07-24T20:09:56Z", "message": "- remove sqlgetinfo & sqlcapabilities values from connector"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MTc3MjAw", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/610#pullrequestreview-455177200", "createdAt": "2020-07-24T20:49:00Z", "commit": {"oid": "2bd944c759017fb4c6666d08eae676d1e3a988ea"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MTgwMDQx", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/610#pullrequestreview-455180041", "createdAt": "2020-07-24T20:54:31Z", "commit": {"oid": "2bd944c759017fb4c6666d08eae676d1e3a988ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMDo1NDozMVrOG29e1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMDo1NDozMVrOG29e1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI4MzYwNQ==", "bodyText": "Shouldn't this concatenate EncryptedConnectionString too?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/610#discussion_r460283605", "createdAt": "2020-07-24T20:54:31Z", "author": {"login": "jduo"}, "path": "sql-odbc/src/PowerBIConnector/OdfeSqlOdbcPBIConnector.pq", "diffHunk": "@@ -1,42 +1,203 @@\n-\ufeff// This file contains your Data Connector logic\n+// This file contains Data Connector logic\n section OdfeSqlOdbcPBIConnector;\n \n+// When set to true, additional trace information will be written out to the User log. \n+// This should be set to false before release. Tracing is done through a call to \n+// Diagnostics.LogValue(). When EnableTraceOutput is set to false, the call becomes a \n+// no-op and simply returns the original value.\n+EnableTraceOutput = true;\n+\n [DataSource.Kind=\"OdfeSqlOdbcPBIConnector\", Publish=\"OdfeSqlOdbcPBIConnector.Publish\"]\n shared OdfeSqlOdbcPBIConnector.Contents = Value.ReplaceType(OdfeSqlOdbcPBIConnectorImpl, OdfeSqlOdbcPBIConnectorType); \n \n // Wrapper function to provide additional UI customization.\n OdfeSqlOdbcPBIConnectorType = type function (\n         Host as (type text meta [\n             Documentation.FieldCaption = \"Host\",\n-            Documentation.FieldDescription = \"The hostname of the Open Distro For Elasticsearc server.\",\n+            Documentation.FieldDescription = \"The hostname of the Open Distro For Elasticsearch server.\",\n             Documentation.SampleValues = { \"localhost\" }\n         ]),\n-        Port as (type number meta [\n+        optional Port as (type number meta [\n             Documentation.FieldCaption = \"Port\",\n-            Documentation.FieldDescription = \"The port the Open Distro For Elasticsearc server is running on.\",\n+            Documentation.FieldDescription = \"The port of the Open Distro For Elasticsearch server is running on.\",\n             Documentation.SampleValues = { 9200 }\n         ])\n     )\n     as table meta [\n         Documentation.Name = \"Open Distro For Elasticsearch\"\n     ];\n \n-OdfeSqlOdbcPBIConnectorImpl = (Host as text, Port as number) as table =>\n+OdfeSqlOdbcPBIConnectorImpl = (Host as text, optional Port as number) as table =>\n     let\n+        Credential = Extension.CurrentCredential(),\n+        AuthenticationMode = Credential[AuthenticationKind],\n+\n+        // Sets connection string properties for authentication.\n+        CredentialConnectionString =\n+            if AuthenticationMode = \"UsernamePassword\" then\n+                [\n+                    Auth = \"BASIC\",\n+                    UID = Credential[Username],\n+                    PWD = Credential[Password]\n+                ]\n+            else if AuthenticationMode = \"Key\" then\n+                [\n+                    Auth = \"AWS_SIGV4\",\n+                    Region = Credential[Key]\n+                ]\n+            else \n+                [\n+                    Auth = \"NONE\"\n+                ],\n+\n+        // Sets connection string properties for encrypted connections.\n+        EncryptedConnectionString =\n+            if Credential[EncryptConnection] = null or Credential[EncryptConnection] = true then\n+                [\n+                    UseSSL = 1\n+                ]\n+            else\n+                [\n+                    UseSSL = 0\n+                ],\n+\n+        // Set host & port in connection string. \n+        // Do not include port in connection string for aws server connection.\n+        Server = \n+            if Port <> null then\n+            [\n+                Host = Host,\n+                Port = Port\n+            ]\n+            else\n+            [\n+                Host = Host\n+            ],\n+\n         ConnectionString = [\n-            Driver = \"ODFE SQL ODBC Driver\",\n-            Host = Host,\n-            Port = Port\n+            Driver = \"ODFE SQL ODBC Driver\"\n         ],\n-        OdbcDatasource = Odbc.DataSource(ConnectionString)\n+\n+        SQLGetTypeInfo = (types) => \n+            if (EnableTraceOutput <> true) then types else\n+            let\n+                // Outputting the entire table might be too large, and result in the value being truncated.\n+                // We can output a row at a time instead with Table.TransformRows()\n+                rows = Table.TransformRows(types, each Diagnostics.LogValue(\"SQLGetTypeInfo \" & _[TYPE_NAME], _)),\n+                toTable = Table.FromRecords(rows)\n+            in\n+                Value.ReplaceType(toTable, Value.Type(types)),\n+\n+        // SQLColumns is a function handler that receives the results of an ODBC call to SQLColumns().\n+        SQLColumns = (catalogName, schemaName, tableName, columnName, source) =>\n+            if (EnableTraceOutput <> true) then source else\n+            // the if statement conditions will force the values to evaluated/written to diagnostics\n+            if (Diagnostics.LogValue(\"SQLColumns.TableName\", tableName) <> \"***\" and Diagnostics.LogValue(\"SQLColumns.ColumnName\", columnName) <> \"***\") then\n+                let\n+                    // Outputting the entire table might be too large, and result in the value being truncated.\n+                    // We can output a row at a time instead with Table.TransformRows()\n+                    rows = Table.TransformRows(source, each Diagnostics.LogValue(\"SQLColumns\", _)),\n+                    toTable = Table.FromRecords(rows)\n+                in\n+                    Value.ReplaceType(toTable, Value.Type(source))\n+            else\n+                source,\n+             \n+        // Add support for `LIMIT` and `OFFSET` clauses (rather than `TOP`)\n+        AstVisitor = [\n+            // format is \"LIMIT [<skip>,]<take>\" - ex. LIMIT 2,10 or LIMIT 10\n+            LimitClause = (skip, take) =>\n+                if (take = null) then\n+                    ...\n+                else\n+                    let\n+                        skip =\n+                            if (skip = null or skip = 0) then\n+                                \"\"\n+                            else\n+                                Number.ToText(skip) & \",\"\n+                    in\n+                        [\n+                            Text = Text.Format(\"LIMIT #{0}#{1}\", { skip, take }),\n+                            Location = \"AfterQuerySpecification\"\n+                        ]\n+        ],\n+\n+        OdbcDatasource = Odbc.DataSource(ConnectionString & Server & CredentialConnectionString, [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bd944c759017fb4c6666d08eae676d1e3a988ea"}, "originalPosition": 135}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MTgwNzc5", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/610#pullrequestreview-455180779", "createdAt": "2020-07-24T20:55:59Z", "commit": {"oid": "2bd944c759017fb4c6666d08eae676d1e3a988ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMDo1NTo1OVrOG29hVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMDo1NTo1OVrOG29hVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI4NDI0Ng==", "bodyText": "Note that if you set this to true, PBI will always try encrypted connections. You need to add an error handler that tells PBI to try an unencrypted connection if it gets an SSL error. See the ImpalaODBC example on the PowerQuery SDK github.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/610#discussion_r460284246", "createdAt": "2020-07-24T20:55:59Z", "author": {"login": "jduo"}, "path": "sql-odbc/src/PowerBIConnector/OdfeSqlOdbcPBIConnector.pq", "diffHunk": "@@ -1,42 +1,203 @@\n-\ufeff// This file contains your Data Connector logic\n+// This file contains Data Connector logic\n section OdfeSqlOdbcPBIConnector;\n \n+// When set to true, additional trace information will be written out to the User log. \n+// This should be set to false before release. Tracing is done through a call to \n+// Diagnostics.LogValue(). When EnableTraceOutput is set to false, the call becomes a \n+// no-op and simply returns the original value.\n+EnableTraceOutput = true;\n+\n [DataSource.Kind=\"OdfeSqlOdbcPBIConnector\", Publish=\"OdfeSqlOdbcPBIConnector.Publish\"]\n shared OdfeSqlOdbcPBIConnector.Contents = Value.ReplaceType(OdfeSqlOdbcPBIConnectorImpl, OdfeSqlOdbcPBIConnectorType); \n \n // Wrapper function to provide additional UI customization.\n OdfeSqlOdbcPBIConnectorType = type function (\n         Host as (type text meta [\n             Documentation.FieldCaption = \"Host\",\n-            Documentation.FieldDescription = \"The hostname of the Open Distro For Elasticsearc server.\",\n+            Documentation.FieldDescription = \"The hostname of the Open Distro For Elasticsearch server.\",\n             Documentation.SampleValues = { \"localhost\" }\n         ]),\n-        Port as (type number meta [\n+        optional Port as (type number meta [\n             Documentation.FieldCaption = \"Port\",\n-            Documentation.FieldDescription = \"The port the Open Distro For Elasticsearc server is running on.\",\n+            Documentation.FieldDescription = \"The port of the Open Distro For Elasticsearch server is running on.\",\n             Documentation.SampleValues = { 9200 }\n         ])\n     )\n     as table meta [\n         Documentation.Name = \"Open Distro For Elasticsearch\"\n     ];\n \n-OdfeSqlOdbcPBIConnectorImpl = (Host as text, Port as number) as table =>\n+OdfeSqlOdbcPBIConnectorImpl = (Host as text, optional Port as number) as table =>\n     let\n+        Credential = Extension.CurrentCredential(),\n+        AuthenticationMode = Credential[AuthenticationKind],\n+\n+        // Sets connection string properties for authentication.\n+        CredentialConnectionString =\n+            if AuthenticationMode = \"UsernamePassword\" then\n+                [\n+                    Auth = \"BASIC\",\n+                    UID = Credential[Username],\n+                    PWD = Credential[Password]\n+                ]\n+            else if AuthenticationMode = \"Key\" then\n+                [\n+                    Auth = \"AWS_SIGV4\",\n+                    Region = Credential[Key]\n+                ]\n+            else \n+                [\n+                    Auth = \"NONE\"\n+                ],\n+\n+        // Sets connection string properties for encrypted connections.\n+        EncryptedConnectionString =\n+            if Credential[EncryptConnection] = null or Credential[EncryptConnection] = true then\n+                [\n+                    UseSSL = 1\n+                ]\n+            else\n+                [\n+                    UseSSL = 0\n+                ],\n+\n+        // Set host & port in connection string. \n+        // Do not include port in connection string for aws server connection.\n+        Server = \n+            if Port <> null then\n+            [\n+                Host = Host,\n+                Port = Port\n+            ]\n+            else\n+            [\n+                Host = Host\n+            ],\n+\n         ConnectionString = [\n-            Driver = \"ODFE SQL ODBC Driver\",\n-            Host = Host,\n-            Port = Port\n+            Driver = \"ODFE SQL ODBC Driver\"\n         ],\n-        OdbcDatasource = Odbc.DataSource(ConnectionString)\n+\n+        SQLGetTypeInfo = (types) => \n+            if (EnableTraceOutput <> true) then types else\n+            let\n+                // Outputting the entire table might be too large, and result in the value being truncated.\n+                // We can output a row at a time instead with Table.TransformRows()\n+                rows = Table.TransformRows(types, each Diagnostics.LogValue(\"SQLGetTypeInfo \" & _[TYPE_NAME], _)),\n+                toTable = Table.FromRecords(rows)\n+            in\n+                Value.ReplaceType(toTable, Value.Type(types)),\n+\n+        // SQLColumns is a function handler that receives the results of an ODBC call to SQLColumns().\n+        SQLColumns = (catalogName, schemaName, tableName, columnName, source) =>\n+            if (EnableTraceOutput <> true) then source else\n+            // the if statement conditions will force the values to evaluated/written to diagnostics\n+            if (Diagnostics.LogValue(\"SQLColumns.TableName\", tableName) <> \"***\" and Diagnostics.LogValue(\"SQLColumns.ColumnName\", columnName) <> \"***\") then\n+                let\n+                    // Outputting the entire table might be too large, and result in the value being truncated.\n+                    // We can output a row at a time instead with Table.TransformRows()\n+                    rows = Table.TransformRows(source, each Diagnostics.LogValue(\"SQLColumns\", _)),\n+                    toTable = Table.FromRecords(rows)\n+                in\n+                    Value.ReplaceType(toTable, Value.Type(source))\n+            else\n+                source,\n+             \n+        // Add support for `LIMIT` and `OFFSET` clauses (rather than `TOP`)\n+        AstVisitor = [\n+            // format is \"LIMIT [<skip>,]<take>\" - ex. LIMIT 2,10 or LIMIT 10\n+            LimitClause = (skip, take) =>\n+                if (take = null) then\n+                    ...\n+                else\n+                    let\n+                        skip =\n+                            if (skip = null or skip = 0) then\n+                                \"\"\n+                            else\n+                                Number.ToText(skip) & \",\"\n+                    in\n+                        [\n+                            Text = Text.Format(\"LIMIT #{0}#{1}\", { skip, take }),\n+                            Location = \"AfterQuerySpecification\"\n+                        ]\n+        ],\n+\n+        OdbcDatasource = Odbc.DataSource(ConnectionString & Server & CredentialConnectionString, [\n+            // Do not view the tables grouped by their schema names.\n+            HierarchicalNavigation = false,\n+            // Prevents execution of native SQL statements. Extensions should set this to true.\n+            HideNativeQuery = true,\n+            // Allows upconversion of numeric types\n+            SoftNumbers = true,\n+            // Allow upconversion / resizing of numeric and string types\n+            TolerateConcatOverflow = true,\n+            // Enables connection pooling via the system ODBC manager\n+            ClientConnectionPooling = true,\n+\n+            // These values should be set by previous steps\n+            AstVisitor = AstVisitor,\n+            SQLColumns = SQLColumns,\n+            SQLGetTypeInfo = SQLGetTypeInfo,\n+\n+            OnError = OnOdbcError,\n+\n+            // Connection string properties used for encrypted connections.\n+            CredentialConnectionString = EncryptedConnectionString\n+        ])\n     in\n         OdbcDatasource;\n \n+// Handles ODBC errors.\n+OnOdbcError = (errorRecord as record) =>\n+    let\n+        ErrorMessage = errorRecord[Message],\n+        ConnectionHostPort = errorRecord[Detail][DataSourcePath], \n+        \n+        IsDriverNotInstalled = Text.Contains(ErrorMessage, \"doesn't correspond to an installed ODBC driver\"),\n+        \n+        OdbcError = errorRecord[Detail][OdbcErrors]{0},\n+        OdbcErrorCode = OdbcError[NativeError],\n+        \n+        // Failed to connect to given host\n+        IsHostUnreachable = \n+            OdbcErrorCode = 202\n+    in\n+        if IsDriverNotInstalled then\n+            error Error.Record(\"\", \"The Open Distro For Elasticsearch SQL ODBC driver is not installed. Please install the driver\")\n+        else if IsHostUnreachable then \n+            error Error.Record(\"\", \"Couldn't reach server. Please double-check the host, port and auth.\")\n+        else \n+            error errorRecord;\n+\n // Data Source Kind description\n OdfeSqlOdbcPBIConnector = [\n+    // Required for use with Power BI Service.\n+    TestConnection = (dataSourcePath) => \n+        let\n+            json = Json.Document(dataSourcePath),\n+            Host = json[Host],\n+            Port = json[Port]\n+        in\n+            { \"OdfeSqlOdbcPBIConnector.Contents\", Host, Port },\n+\n+    // Authentication modes\n     Authentication = [\n-        Implicit = []\n+        Implicit = [\n+            Label = \"NONE\"\n+        ],\n+        UsernamePassword = [\n+            Label = \"BASIC\"\n+        ],\n+        Key = [\n+            Label = \"AWS_SIGV4\",\n+            KeyLabel = \"Region\"\n+        ]\n     ],\n+\n+    // Enable Encryption\n+    SupportsEncryption = true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bd944c759017fb4c6666d08eae676d1e3a988ea"}, "originalPosition": 209}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed0afb91caaf7daa2e14c71f9ed8ee636969932b", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ed0afb91caaf7daa2e14c71f9ed8ee636969932b", "committedDate": "2020-07-24T21:20:35Z", "message": "adding EncryptedConnectionString"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjA0NzYz", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/610#pullrequestreview-455204763", "createdAt": "2020-07-24T21:52:55Z", "commit": {"oid": "ed0afb91caaf7daa2e14c71f9ed8ee636969932b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjQwNDAx", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/610#pullrequestreview-455240401", "createdAt": "2020-07-25T00:09:58Z", "commit": {"oid": "ed0afb91caaf7daa2e14c71f9ed8ee636969932b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjQ5MDM5", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/610#pullrequestreview-455249039", "createdAt": "2020-07-25T01:20:28Z", "commit": {"oid": "ed0afb91caaf7daa2e14c71f9ed8ee636969932b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 597, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}