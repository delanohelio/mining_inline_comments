{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3Mjg2MzE0", "number": 620, "title": "Add Text and Keyword Data Type", "bodyText": "Description of changes\n\nAdd the Text and Keyword Data Type in Elasticsearch Storage Engine.\nRedefine ExprValue interface.\n1.add the observer method to retrieve the value.\n2. add the compareTo method.\n3. add the equlas method.\nSimplify the equal and notEqual operator definition in the BinaryPredicateOperator.\nAdd the doc for Data Types. https://github.com/penghuo/sql/blob/text-keyword-data-type/docs/user/general/datatype.rst\n\nTo Reviewers\n\nI am planning an follow up PR to redefine all the operators in BinaryPredicateOperator. The formal doc for operator will been added accordingly.\n\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-07-27T16:58:33Z", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/620", "merged": true, "mergeCommit": {"oid": "b258fdaa649505472467714f3cecde74693143c7"}, "closed": true, "closedAt": "2020-07-29T17:23:00Z", "author": {"login": "penghuo"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5Eq59gH2gAyNDU3Mjg2MzE0OmVlMGZkZWUzYTQ1YTdlZTNiMGMyOTYzY2UxMGUxYmM0NmM2ZjkzZWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5uLAMgFqTQ1NzcyMTQ1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ee0fdee3a45a7ee3b0c2963ce10e1bc46c6f93ed", "author": {"user": {"login": "penghuo", "name": "Peng Huo"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ee0fdee3a45a7ee3b0c2963ce10e1bc46c6f93ed", "committedDate": "2020-07-27T16:46:15Z", "message": "Add Text and Keyword Data Type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b44d420d0b836ffff636ba39d1a1d90c50439ffb", "author": {"user": {"login": "penghuo", "name": "Peng Huo"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/b44d420d0b836ffff636ba39d1a1d90c50439ffb", "committedDate": "2020-07-27T16:53:51Z", "message": "update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MDk2Mjg5", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/620#pullrequestreview-457096289", "createdAt": "2020-07-28T23:26:52Z", "commit": {"oid": "b44d420d0b836ffff636ba39d1a1d90c50439ffb"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMzoyNjo1MlrOG4jMBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMzozOTowMlrOG4jcBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk0OTk1Ng==", "bodyText": "np: the impl() for binary function returns Function as below rather than SerializableFunction?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/620#discussion_r461949956", "createdAt": "2020-07-28T23:26:52Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/function/FunctionDSL.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ *\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.function;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.FunctionExpression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.env.Environment;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import lombok.experimental.UtilityClass;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+/**\n+ * Function Define Utility.\n+ */\n+@UtilityClass\n+public class FunctionDSL {\n+  /**\n+   * Define overloaded function with implementation.\n+   *\n+   * @param functionName function name.\n+   * @param functions    a list of function implementation.\n+   * @return FunctionResolver.\n+   */\n+  public FunctionResolver define(FunctionName functionName,\n+                                 Function<FunctionName, Pair<FunctionSignature,\n+                                     FunctionBuilder>>... functions) {\n+    return define(functionName, Arrays.asList(functions));\n+  }\n+\n+  /**\n+   * Define overloaded function with implementation.\n+   *\n+   * @param functionName function name.\n+   * @param functions    a list of function implementation.\n+   * @return FunctionResolver.\n+   */\n+  public FunctionResolver define(FunctionName functionName,\n+                                 List<Function<FunctionName, Pair<FunctionSignature,\n+                                     FunctionBuilder>>> functions) {\n+\n+    FunctionResolver.FunctionResolverBuilder builder = FunctionResolver.builder();\n+    builder.functionName(functionName);\n+    for (Function<FunctionName, Pair<FunctionSignature, FunctionBuilder>> func : functions) {\n+      Pair<FunctionSignature, FunctionBuilder> functionBuilder = func.apply(functionName);\n+      builder.functionBundle(functionBuilder.getKey(), functionBuilder.getValue());\n+    }\n+    return builder.build();\n+  }\n+\n+  /**\n+   * Unary Function Implementation.\n+   *\n+   * @param function   {@link ExprValue} based unary function.\n+   * @param returnType return type.\n+   * @param argsType   argument type.\n+   * @return Unary Function Implementation.\n+   */\n+  public SerializableFunction<FunctionName, Pair<FunctionSignature, FunctionBuilder>> impl(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b44d420d0b836ffff636ba39d1a1d90c50439ffb"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NDA1NA==", "bodyText": "I may miss it somewhere. Where is this MISSING/NULL check logic for the impl() below?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/620#discussion_r461954054", "createdAt": "2020-07-28T23:39:02Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/function/FunctionDSL.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ *\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.function;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.FunctionExpression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.env.Environment;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import lombok.experimental.UtilityClass;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+/**\n+ * Function Define Utility.\n+ */\n+@UtilityClass\n+public class FunctionDSL {\n+  /**\n+   * Define overloaded function with implementation.\n+   *\n+   * @param functionName function name.\n+   * @param functions    a list of function implementation.\n+   * @return FunctionResolver.\n+   */\n+  public FunctionResolver define(FunctionName functionName,\n+                                 Function<FunctionName, Pair<FunctionSignature,\n+                                     FunctionBuilder>>... functions) {\n+    return define(functionName, Arrays.asList(functions));\n+  }\n+\n+  /**\n+   * Define overloaded function with implementation.\n+   *\n+   * @param functionName function name.\n+   * @param functions    a list of function implementation.\n+   * @return FunctionResolver.\n+   */\n+  public FunctionResolver define(FunctionName functionName,\n+                                 List<Function<FunctionName, Pair<FunctionSignature,\n+                                     FunctionBuilder>>> functions) {\n+\n+    FunctionResolver.FunctionResolverBuilder builder = FunctionResolver.builder();\n+    builder.functionName(functionName);\n+    for (Function<FunctionName, Pair<FunctionSignature, FunctionBuilder>> func : functions) {\n+      Pair<FunctionSignature, FunctionBuilder> functionBuilder = func.apply(functionName);\n+      builder.functionBundle(functionBuilder.getKey(), functionBuilder.getValue());\n+    }\n+    return builder.build();\n+  }\n+\n+  /**\n+   * Unary Function Implementation.\n+   *\n+   * @param function   {@link ExprValue} based unary function.\n+   * @param returnType return type.\n+   * @param argsType   argument type.\n+   * @return Unary Function Implementation.\n+   */\n+  public SerializableFunction<FunctionName, Pair<FunctionSignature, FunctionBuilder>> impl(\n+      SerializableFunction<ExprValue, ExprValue> function,\n+      ExprType returnType,\n+      ExprType argsType) {\n+\n+    return functionName -> {\n+      FunctionSignature functionSignature =\n+          new FunctionSignature(functionName, Collections.singletonList(argsType));\n+      FunctionBuilder functionBuilder =\n+          arguments -> new FunctionExpression(functionName, arguments) {\n+            @Override\n+            public ExprValue valueOf(Environment<Expression, ExprValue> valueEnv) {\n+              ExprValue value = arguments.get(0).valueOf(valueEnv);\n+              if (value.isMissing()) {\n+                return ExprValueUtils.missingValue();\n+              } else if (value.isNull()) {\n+                return ExprValueUtils.nullValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b44d420d0b836ffff636ba39d1a1d90c50439ffb"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e088f0a3c046063224ab7bc62c85295f72b4f161", "author": {"user": {"login": "penghuo", "name": "Peng Huo"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/e088f0a3c046063224ab7bc62c85295f72b4f161", "committedDate": "2020-07-29T15:35:08Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzIxNDUy", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/620#pullrequestreview-457721452", "createdAt": "2020-07-29T17:07:25Z", "commit": {"oid": "e088f0a3c046063224ab7bc62c85295f72b4f161"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 601, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}