{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4ODI2OTQ1", "number": 470, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjoxMzowMVrOD9B33Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjoyODoxNFrOD9CCYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzIwNDEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/scope/TypeSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjoxMzowMVrOGWVM6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxNToyMTo1NVrOGWa7Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2OTIyNA==", "bodyText": "We should change this to Field [%s] has\u00a0conflicting type [%s]", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/470#discussion_r426069224", "createdAt": "2020-05-15T22:13:01Z", "author": {"login": "abbashus"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/scope/TypeSupplier.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.antlr.semantic.scope;\n+\n+import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.SemanticAnalysisException;\n+import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.types.Type;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+/**\n+ * The TypeSupplier is construct by the symbolName and symbolType.\n+ * The TypeSupplier implement the {@link Supplier<Type>} interface to provide the {@link Type}.\n+ * The TypeSupplier maintain types to track different {@link Type} definition for the same symbolName.\n+ */\n+public class TypeSupplier implements Supplier<Type> {\n+    private final String symbolName;\n+    private final Type symbolType;\n+    private final Set<Type> types;\n+\n+    public TypeSupplier(String symbolName, Type symbolType) {\n+        this.symbolName = symbolName;\n+        this.symbolType = symbolType;\n+        this.types = new HashSet<>();\n+        this.types.add(symbolType);\n+    }\n+\n+    public TypeSupplier add(Type type) {\n+        types.add(type);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the {@link Type}\n+     * Throw {@link SemanticAnalysisException} if conflict found.\n+     * Currently, if the two type not equal, it been treated as conflict.\n+     */\n+    @Override\n+    public Type get() {\n+        if (types.size() > 1) {\n+            throw new SemanticAnalysisException(\n+                    String.format(\"Symbol [%s] have conflict type [%s]\", symbolName, types));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "570fb9e11e0061fa60c0e7ab3819ed9781797115"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2Mjk3MA==", "bodyText": "done.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/470#discussion_r426162970", "createdAt": "2020-05-16T15:21:55Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/scope/TypeSupplier.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.antlr.semantic.scope;\n+\n+import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.SemanticAnalysisException;\n+import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.types.Type;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+/**\n+ * The TypeSupplier is construct by the symbolName and symbolType.\n+ * The TypeSupplier implement the {@link Supplier<Type>} interface to provide the {@link Type}.\n+ * The TypeSupplier maintain types to track different {@link Type} definition for the same symbolName.\n+ */\n+public class TypeSupplier implements Supplier<Type> {\n+    private final String symbolName;\n+    private final Type symbolType;\n+    private final Set<Type> types;\n+\n+    public TypeSupplier(String symbolName, Type symbolType) {\n+        this.symbolName = symbolName;\n+        this.symbolType = symbolType;\n+        this.types = new HashSet<>();\n+        this.types.add(symbolType);\n+    }\n+\n+    public TypeSupplier add(Type type) {\n+        types.add(type);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the {@link Type}\n+     * Throw {@link SemanticAnalysisException} if conflict found.\n+     * Currently, if the two type not equal, it been treated as conflict.\n+     */\n+    @Override\n+    public Type get() {\n+        if (types.size() > 1) {\n+            throw new SemanticAnalysisException(\n+                    String.format(\"Symbol [%s] have conflict type [%s]\", symbolName, types));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2OTIyNA=="}, "originalCommit": {"oid": "570fb9e11e0061fa60c0e7ab3819ed9781797115"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzIwODU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/scope/TypeSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjoxNTozNVrOGWVPjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxNToyMDo0OVrOGWa63A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2OTkwMQ==", "bodyText": "np: type - >types , it been treated as conflict - > they are treated as conflicting", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/470#discussion_r426069901", "createdAt": "2020-05-15T22:15:35Z", "author": {"login": "abbashus"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/scope/TypeSupplier.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.antlr.semantic.scope;\n+\n+import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.SemanticAnalysisException;\n+import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.types.Type;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+/**\n+ * The TypeSupplier is construct by the symbolName and symbolType.\n+ * The TypeSupplier implement the {@link Supplier<Type>} interface to provide the {@link Type}.\n+ * The TypeSupplier maintain types to track different {@link Type} definition for the same symbolName.\n+ */\n+public class TypeSupplier implements Supplier<Type> {\n+    private final String symbolName;\n+    private final Type symbolType;\n+    private final Set<Type> types;\n+\n+    public TypeSupplier(String symbolName, Type symbolType) {\n+        this.symbolName = symbolName;\n+        this.symbolType = symbolType;\n+        this.types = new HashSet<>();\n+        this.types.add(symbolType);\n+    }\n+\n+    public TypeSupplier add(Type type) {\n+        types.add(type);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the {@link Type}\n+     * Throw {@link SemanticAnalysisException} if conflict found.\n+     * Currently, if the two type not equal, it been treated as conflict.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "570fb9e11e0061fa60c0e7ab3819ed9781797115"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2MjkwOA==", "bodyText": "done.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/470#discussion_r426162908", "createdAt": "2020-05-16T15:20:49Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/scope/TypeSupplier.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.antlr.semantic.scope;\n+\n+import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.SemanticAnalysisException;\n+import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.types.Type;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+/**\n+ * The TypeSupplier is construct by the symbolName and symbolType.\n+ * The TypeSupplier implement the {@link Supplier<Type>} interface to provide the {@link Type}.\n+ * The TypeSupplier maintain types to track different {@link Type} definition for the same symbolName.\n+ */\n+public class TypeSupplier implements Supplier<Type> {\n+    private final String symbolName;\n+    private final Type symbolType;\n+    private final Set<Type> types;\n+\n+    public TypeSupplier(String symbolName, Type symbolType) {\n+        this.symbolName = symbolName;\n+        this.symbolType = symbolType;\n+        this.types = new HashSet<>();\n+        this.types.add(symbolType);\n+    }\n+\n+    public TypeSupplier add(Type type) {\n+        types.add(type);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the {@link Type}\n+     * Throw {@link SemanticAnalysisException} if conflict found.\n+     * Currently, if the two type not equal, it been treated as conflict.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2OTkwMQ=="}, "originalCommit": {"oid": "570fb9e11e0061fa60c0e7ab3819ed9781797115"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzIxMjAxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerFieldTypeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjoxNzoyN1rOGWVRlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxNToxOTo0MVrOGWa6VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3MDQyMw==", "bodyText": "np: Conflict -> conflict", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/470#discussion_r426070423", "createdAt": "2020-05-15T22:17:27Z", "author": {"login": "abbashus"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerFieldTypeTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.antlr.semantic;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.util.MultipleIndexClusterUtils.mockMultipleIndexEnv;\n+\n+public class SemanticAnalyzerFieldTypeTest extends SemanticAnalyzerTestBase {\n+    @Before\n+    public void setup() {\n+        mockMultipleIndexEnv();\n+    }\n+\n+    /**\n+     * id has same type in account1 and account2.\n+     */\n+    @Test\n+    public void accessFieldTypeNotInQueryPassSemanticCheck() {\n+        validate(\"SELECT id FROM account* WHERE id = 1\");\n+    }\n+\n+    /**\n+     * address doesn't exist in account1.\n+     */\n+    @Test\n+    public void accessFieldTypeOnlyInOneIndexPassSemanticCheck() {\n+        validate(\"SELECT address FROM account* WHERE id = 30\");\n+    }\n+\n+    /**\n+     * age has different type in account1 and account2.\n+     */\n+    @Test\n+    public void accessConflictFieldTypeShouldFailSemanticCheck() {\n+        expectValidationFailWithErrorMessages(\"SELECT age FROM account* WHERE age = 30\",\n+                \"Symbol [age] have conflict type\");\n+    }\n+\n+    /**\n+     * age has different type in account1 and account2.\n+     */\n+    @Test\n+    public void mixNonConflictTypeAndConflictFieldTypeShouldFailSemanticCheck() {\n+        expectValidationFailWithErrorMessages(\"SELECT id, age FROM account* WHERE id = 1\",\n+                \"Symbol [age] have conflict type\");\n+    }\n+\n+    /**\n+     * age has different type in account1 and account2.\n+     */\n+    @Test\n+    public void ConflictFieldTypeWithAliasShouldFailSemanticCheck() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "570fb9e11e0061fa60c0e7ab3819ed9781797115"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2Mjc3Mw==", "bodyText": "done.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/470#discussion_r426162773", "createdAt": "2020-05-16T15:19:41Z", "author": {"login": "penghuo"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerFieldTypeTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.antlr.semantic;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.util.MultipleIndexClusterUtils.mockMultipleIndexEnv;\n+\n+public class SemanticAnalyzerFieldTypeTest extends SemanticAnalyzerTestBase {\n+    @Before\n+    public void setup() {\n+        mockMultipleIndexEnv();\n+    }\n+\n+    /**\n+     * id has same type in account1 and account2.\n+     */\n+    @Test\n+    public void accessFieldTypeNotInQueryPassSemanticCheck() {\n+        validate(\"SELECT id FROM account* WHERE id = 1\");\n+    }\n+\n+    /**\n+     * address doesn't exist in account1.\n+     */\n+    @Test\n+    public void accessFieldTypeOnlyInOneIndexPassSemanticCheck() {\n+        validate(\"SELECT address FROM account* WHERE id = 30\");\n+    }\n+\n+    /**\n+     * age has different type in account1 and account2.\n+     */\n+    @Test\n+    public void accessConflictFieldTypeShouldFailSemanticCheck() {\n+        expectValidationFailWithErrorMessages(\"SELECT age FROM account* WHERE age = 30\",\n+                \"Symbol [age] have conflict type\");\n+    }\n+\n+    /**\n+     * age has different type in account1 and account2.\n+     */\n+    @Test\n+    public void mixNonConflictTypeAndConflictFieldTypeShouldFailSemanticCheck() {\n+        expectValidationFailWithErrorMessages(\"SELECT id, age FROM account* WHERE id = 1\",\n+                \"Symbol [age] have conflict type\");\n+    }\n+\n+    /**\n+     * age has different type in account1 and account2.\n+     */\n+    @Test\n+    public void ConflictFieldTypeWithAliasShouldFailSemanticCheck() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3MDQyMw=="}, "originalCommit": {"oid": "570fb9e11e0061fa60c0e7ab3819ed9781797115"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzIzMTA2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/scope/TypeSupplierTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjoyODoxNFrOGWVdLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxNToxODo1NlrOGWa6HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3MzM4OA==", "bodyText": "np: wildcard import", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/470#discussion_r426073388", "createdAt": "2020-05-15T22:28:14Z", "author": {"login": "dai-chen"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/scope/TypeSupplierTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.antlr.semantic.scope;\n+\n+import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.SemanticAnalysisException;\n+import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.types.base.ESDataType;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.junit.Assert.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "570fb9e11e0061fa60c0e7ab3819ed9781797115"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2MjcxNg==", "bodyText": "done.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/470#discussion_r426162716", "createdAt": "2020-05-16T15:18:56Z", "author": {"login": "penghuo"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/scope/TypeSupplierTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.antlr.semantic.scope;\n+\n+import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.SemanticAnalysisException;\n+import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.types.base.ESDataType;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.junit.Assert.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3MzM4OA=="}, "originalCommit": {"oid": "570fb9e11e0061fa60c0e7ab3819ed9781797115"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2075, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}