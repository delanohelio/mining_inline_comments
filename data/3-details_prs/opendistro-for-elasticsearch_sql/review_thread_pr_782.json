{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0NDYzNjIy", "number": 782, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo1Nzo1MVrOEv3EsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo1Nzo1MVrOEv3EsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjIwODQ4OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/com/amazon/opendistroforelasticsearch/sql/sql/parser/context/QuerySpecification.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo1Nzo1MVrOHlFPRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjo1MToxMVrOHlHxhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY0NTE4OA==", "bodyText": "It is also could be sort by, right?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/782#discussion_r508645188", "createdAt": "2020-10-20T15:57:51Z", "author": {"login": "penghuo"}, "path": "sql/src/main/java/com/amazon/opendistroforelasticsearch/sql/sql/parser/context/QuerySpecification.java", "diffHunk": "@@ -86,6 +99,52 @@ public void collect(QuerySpecificationContext query, String queryString) {\n     query.accept(new QuerySpecificationCollector(queryString));\n   }\n \n+  /**\n+   * Replace unresolved expression if it's an alias or ordinal that represents\n+   * an actual expression in SELECT list.\n+   * @param expr item to be replaced\n+   * @return select item that the given expr represents\n+   */\n+  public UnresolvedExpression replaceIfAliasOrOrdinal(UnresolvedExpression expr) {\n+    if (isIntegerLiteral(expr)) {\n+      return getSelectItemByOrdinal(expr);\n+    } else if (isSelectAlias(expr)) {\n+      return getSelectItemByAlias(expr);\n+    } else {\n+      return expr;\n+    }\n+  }\n+\n+  private boolean isIntegerLiteral(UnresolvedExpression expr) {\n+    if (!(expr instanceof Literal)) {\n+      return false;\n+    }\n+\n+    if (((Literal) expr).getType() != DataType.INTEGER) {\n+      throw new SemanticCheckException(StringUtils.format(\n+          \"Non-integer constant [%s] found in GROUP BY clause\", expr));\n+    }\n+    return true;\n+  }\n+\n+  private UnresolvedExpression getSelectItemByOrdinal(UnresolvedExpression expr) {\n+    int ordinal = (Integer) ((Literal) expr).getValue();\n+    if (ordinal <= 0 || ordinal > selectItems.size()) {\n+      throw new SemanticCheckException(StringUtils.format(\n+          \"Group by ordinal [%d] is out of bound of select item list\", ordinal));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c84a54a7d621792cdd538d6e039b6b60cfe8c1c"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY4NjcyNA==", "bodyText": "I forgot to change the error message. Will do. Thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/782#discussion_r508686724", "createdAt": "2020-10-20T16:51:11Z", "author": {"login": "dai-chen"}, "path": "sql/src/main/java/com/amazon/opendistroforelasticsearch/sql/sql/parser/context/QuerySpecification.java", "diffHunk": "@@ -86,6 +99,52 @@ public void collect(QuerySpecificationContext query, String queryString) {\n     query.accept(new QuerySpecificationCollector(queryString));\n   }\n \n+  /**\n+   * Replace unresolved expression if it's an alias or ordinal that represents\n+   * an actual expression in SELECT list.\n+   * @param expr item to be replaced\n+   * @return select item that the given expr represents\n+   */\n+  public UnresolvedExpression replaceIfAliasOrOrdinal(UnresolvedExpression expr) {\n+    if (isIntegerLiteral(expr)) {\n+      return getSelectItemByOrdinal(expr);\n+    } else if (isSelectAlias(expr)) {\n+      return getSelectItemByAlias(expr);\n+    } else {\n+      return expr;\n+    }\n+  }\n+\n+  private boolean isIntegerLiteral(UnresolvedExpression expr) {\n+    if (!(expr instanceof Literal)) {\n+      return false;\n+    }\n+\n+    if (((Literal) expr).getType() != DataType.INTEGER) {\n+      throw new SemanticCheckException(StringUtils.format(\n+          \"Non-integer constant [%s] found in GROUP BY clause\", expr));\n+    }\n+    return true;\n+  }\n+\n+  private UnresolvedExpression getSelectItemByOrdinal(UnresolvedExpression expr) {\n+    int ordinal = (Integer) ((Literal) expr).getValue();\n+    if (ordinal <= 0 || ordinal > selectItems.size()) {\n+      throw new SemanticCheckException(StringUtils.format(\n+          \"Group by ordinal [%d] is out of bound of select item list\", ordinal));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY0NTE4OA=="}, "originalCommit": {"oid": "3c84a54a7d621792cdd538d6e039b6b60cfe8c1c"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1898, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}