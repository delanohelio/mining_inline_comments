{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNTQyNDAz", "number": 870, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODo0ODozN1rOFDFOdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxMTozNVrOFDzipQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4Nzc1NjcxOnYy", "diffSide": "RIGHT", "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSQLQueryAction.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODo0ODozN1rOICkFQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMDoyMTo1N1rOICvoWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU1OTIzMw==", "bodyText": "Could we pass this formatter object to create listener method directly without need to make formatter a global field?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/870#discussion_r539559233", "createdAt": "2020-12-09T18:48:37Z", "author": {"login": "dai-chen"}, "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSQLQueryAction.java", "diffHunk": "@@ -109,6 +121,13 @@ public RestChannelConsumer prepareRequest(SQLQueryRequest request, NodeClient no\n       return NOT_SUPPORTED_YET;\n     }\n \n+    Format format = request.format();\n+    if (format.equals(Format.CSV)) {\n+      formatter = new CsvResponseFormatter(request.escape());\n+    } else {\n+      formatter = new JdbcResponseFormatter(PRETTY);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99271a0b86d411def80e82f98e44d734c7c29682"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyNDc3MA==", "bodyText": "Ok, but in this case I extracted another property request: SqlRequest in RestSQLQueryAction to pass the sql request properties (including the format and sanitize option) to the listener", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/870#discussion_r539724770", "createdAt": "2020-12-09T23:27:11Z", "author": {"login": "chloe-zh"}, "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSQLQueryAction.java", "diffHunk": "@@ -109,6 +121,13 @@ public RestChannelConsumer prepareRequest(SQLQueryRequest request, NodeClient no\n       return NOT_SUPPORTED_YET;\n     }\n \n+    Format format = request.format();\n+    if (format.equals(Format.CSV)) {\n+      formatter = new CsvResponseFormatter(request.escape());\n+    } else {\n+      formatter = new JdbcResponseFormatter(PRETTY);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU1OTIzMw=="}, "originalCommit": {"oid": "99271a0b86d411def80e82f98e44d734c7c29682"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczNjM0MA==", "bodyText": "I just realized this formatter is actually only required by createQueryResponseListener instead of both execute and explain. In this case, how about we just pass request and create specific formatter in createQueryResponseListener?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/870#discussion_r539736340", "createdAt": "2020-12-09T23:52:00Z", "author": {"login": "dai-chen"}, "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSQLQueryAction.java", "diffHunk": "@@ -109,6 +121,13 @@ public RestChannelConsumer prepareRequest(SQLQueryRequest request, NodeClient no\n       return NOT_SUPPORTED_YET;\n     }\n \n+    Format format = request.format();\n+    if (format.equals(Format.CSV)) {\n+      formatter = new CsvResponseFormatter(request.escape());\n+    } else {\n+      formatter = new JdbcResponseFormatter(PRETTY);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU1OTIzMw=="}, "originalCommit": {"oid": "99271a0b86d411def80e82f98e44d734c7c29682"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc0ODQ0MQ==", "bodyText": "Yes that's also what I'm thinking about, the changes are done", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/870#discussion_r539748441", "createdAt": "2020-12-10T00:21:57Z", "author": {"login": "chloe-zh"}, "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSQLQueryAction.java", "diffHunk": "@@ -109,6 +121,13 @@ public RestChannelConsumer prepareRequest(SQLQueryRequest request, NodeClient no\n       return NOT_SUPPORTED_YET;\n     }\n \n+    Format format = request.format();\n+    if (format.equals(Format.CSV)) {\n+      formatter = new CsvResponseFormatter(request.escape());\n+    } else {\n+      formatter = new JdbcResponseFormatter(PRETTY);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU1OTIzMw=="}, "originalCommit": {"oid": "99271a0b86d411def80e82f98e44d734c7c29682"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4Nzc2ODA4OnYy", "diffSide": "RIGHT", "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSqlAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODo1MTowNFrOICkLrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzoyNzoyNFrOICuMSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU2MDg3OQ==", "bodyText": "Could we pass request params to SQLQueryRequest and hide all these request parsing logic in the query request class?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/870#discussion_r539560879", "createdAt": "2020-12-09T18:51:04Z", "author": {"login": "dai-chen"}, "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSqlAction.java", "diffHunk": "@@ -154,6 +154,10 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n                                                                     sqlRequest.getSql(),\n                                                                     request.path(),\n                                                                     format.getFormatName());\n+                // set escape option if csv format\n+                if (format.equals(Format.CSV)) {\n+                    newSqlRequest.escape(SqlRequestParam.getEscapeOption(request.params()));\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99271a0b86d411def80e82f98e44d734c7c29682"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyNDg3NA==", "bodyText": "Sure, will do", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/870#discussion_r539724874", "createdAt": "2020-12-09T23:27:24Z", "author": {"login": "chloe-zh"}, "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSqlAction.java", "diffHunk": "@@ -154,6 +154,10 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n                                                                     sqlRequest.getSql(),\n                                                                     request.path(),\n                                                                     format.getFormatName());\n+                // set escape option if csv format\n+                if (format.equals(Format.CSV)) {\n+                    newSqlRequest.escape(SqlRequestParam.getEscapeOption(request.params()));\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU2MDg3OQ=="}, "originalCommit": {"oid": "99271a0b86d411def80e82f98e44d734c7c29682"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzkwODU5OnYy", "diffSide": "RIGHT", "path": "docs/user/interfaces/protocol.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOToyMjo0MFrOIClcOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzoyNzo0MlrOICuM1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4MTQ5OA==", "bodyText": "I feel escape is not very clear. Could we use a different name? ex. sanitize=false means skip sanitizing operation.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/870#discussion_r539581498", "createdAt": "2020-12-09T19:22:40Z", "author": {"login": "dai-chen"}, "path": "docs/user/interfaces/protocol.rst", "diffHunk": "@@ -299,6 +299,39 @@ Result set::\n \tAmber,Duke,32\n \tDale,Adams,33\n \tHattie,Bond,36\n+\n+\n+The formatter sanitizes the csv result with the following rules:\n+1. If a header cell or data cell is starting with special character including '+', '-', '=' , '@', the sanitizer will insert a single-quote at the start of the cell.\n+2. If there exists one or more commas (','), the sanitizer will quote the cell with double quotes.\n+\n+For example::\n+\n+    >> curl -H 'Content-Type: application/json' -X PUT localhost:9200/userdata/_doc/1?refresh=true -d '{\n+      \"+firstname\": \"-Hattie\",\n+      \"=lastname\": \"@Bond\",\n+      \"address\": \"671 Bristol Street, Dente, TN\"\n+    }'\n+\t>> curl -H 'Content-Type: application/json' -X POST localhost:9200/_opendistro/_sql?format=csv -d '{\n+\t  \"query\" : \"SELECT firstname, lastname, address FROM userdata\"\n+\t}'\n+\n+Result set::\n+\n+    '+firstname,'=lastname,address\n+    'Hattie,'@Bond,\"671 Bristol Street, Dente, TN\"\n+\n+\n+To escape the sanitize and keep the csv result as the original, you can add the escape param and set it to true value. For example::\n+\n+\t>> curl -H 'Content-Type: application/json' -X POST localhost:9200/_opendistro/_sql?format=csv&escape=true -d '{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99271a0b86d411def80e82f98e44d734c7c29682"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyNTAxMw==", "bodyText": "Sounds making more sense, will do", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/870#discussion_r539725013", "createdAt": "2020-12-09T23:27:42Z", "author": {"login": "chloe-zh"}, "path": "docs/user/interfaces/protocol.rst", "diffHunk": "@@ -299,6 +299,39 @@ Result set::\n \tAmber,Duke,32\n \tDale,Adams,33\n \tHattie,Bond,36\n+\n+\n+The formatter sanitizes the csv result with the following rules:\n+1. If a header cell or data cell is starting with special character including '+', '-', '=' , '@', the sanitizer will insert a single-quote at the start of the cell.\n+2. If there exists one or more commas (','), the sanitizer will quote the cell with double quotes.\n+\n+For example::\n+\n+    >> curl -H 'Content-Type: application/json' -X PUT localhost:9200/userdata/_doc/1?refresh=true -d '{\n+      \"+firstname\": \"-Hattie\",\n+      \"=lastname\": \"@Bond\",\n+      \"address\": \"671 Bristol Street, Dente, TN\"\n+    }'\n+\t>> curl -H 'Content-Type: application/json' -X POST localhost:9200/_opendistro/_sql?format=csv -d '{\n+\t  \"query\" : \"SELECT firstname, lastname, address FROM userdata\"\n+\t}'\n+\n+Result set::\n+\n+    '+firstname,'=lastname,address\n+    'Hattie,'@Bond,\"671 Bristol Street, Dente, TN\"\n+\n+\n+To escape the sanitize and keep the csv result as the original, you can add the escape param and set it to true value. For example::\n+\n+\t>> curl -H 'Content-Type: application/json' -X POST localhost:9200/_opendistro/_sql?format=csv&escape=true -d '{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4MTQ5OA=="}, "originalCommit": {"oid": "99271a0b86d411def80e82f98e44d734c7c29682"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4Nzk3NjA1OnYy", "diffSide": "RIGHT", "path": "protocol/src/main/java/com/amazon/opendistroforelasticsearch/sql/protocol/response/format/CsvResponseFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOTozODozM1rOICmErQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzoyODoxOFrOICuN0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU5MTg1Mw==", "bodyText": "Could you double check in CSV should we use JDK's platform independent separator or not? https://stackoverflow.com/questions/207947/how-do-i-get-a-platform-dependent-new-line-character", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/870#discussion_r539591853", "createdAt": "2020-12-09T19:38:33Z", "author": {"login": "dai-chen"}, "path": "protocol/src/main/java/com/amazon/opendistroforelasticsearch/sql/protocol/response/format/CsvResponseFormatter.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.protocol.response.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.protocol.response.QueryResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Singular;\n+\n+@RequiredArgsConstructor\n+public class CsvResponseFormatter implements ResponseFormatter<QueryResult> {\n+  private static final String INLINE_SEPARATOR = \",\";\n+  private static final String INTERLINE_SEPARATOR = \"\\n\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99271a0b86d411def80e82f98e44d734c7c29682"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyNTI2Nw==", "bodyText": "Good point, will do!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/870#discussion_r539725267", "createdAt": "2020-12-09T23:28:18Z", "author": {"login": "chloe-zh"}, "path": "protocol/src/main/java/com/amazon/opendistroforelasticsearch/sql/protocol/response/format/CsvResponseFormatter.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.protocol.response.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.protocol.response.QueryResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Singular;\n+\n+@RequiredArgsConstructor\n+public class CsvResponseFormatter implements ResponseFormatter<QueryResult> {\n+  private static final String INLINE_SEPARATOR = \",\";\n+  private static final String INTERLINE_SEPARATOR = \"\\n\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU5MTg1Mw=="}, "originalCommit": {"oid": "99271a0b86d411def80e82f98e44d734c7c29682"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDc2OTQyOnYy", "diffSide": "RIGHT", "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSQLQueryAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDoyNDoxOFrOIDjjqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDoyNDoxOFrOIDjjqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5OTIxMA==", "bodyText": "Just curious why not just pass this request to createQueryResponseListener()? Any reason it has to be a class field?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/870#discussion_r540599210", "createdAt": "2020-12-11T00:24:18Z", "author": {"login": "dai-chen"}, "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSQLQueryAction.java", "diffHunk": "@@ -93,6 +105,7 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient nod\n    * @return            channel consumer\n    */\n   public RestChannelConsumer prepareRequest(SQLQueryRequest request, NodeClient nodeClient) {\n+    this.request = request;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c628a94694e12122185c335376947069a75ef1e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTI4NjYwOnYy", "diffSide": "RIGHT", "path": "docs/user/interfaces/protocol.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMzo0NjoyNlrOIDn1tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMzo0NjoyNlrOIDn1tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY2OTM2Ng==", "bodyText": "It should in seperate paragraph, right?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/870#discussion_r540669366", "createdAt": "2020-12-11T03:46:26Z", "author": {"login": "penghuo"}, "path": "docs/user/interfaces/protocol.rst", "diffHunk": "@@ -299,6 +299,39 @@ Result set::\n \tAmber,Duke,32\n \tDale,Adams,33\n \tHattie,Bond,36\n+\n+\n+The formatter sanitizes the csv result with the following rules:\n+1. If a header cell or data cell is starting with special character including '+', '-', '=' , '@', the sanitizer will insert a single-quote at the start of the cell.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2a502479814f8bbe780b099248a213e1b422242"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTM0MTY1OnYy", "diffSide": "RIGHT", "path": "protocol/src/main/java/com/amazon/opendistroforelasticsearch/sql/protocol/response/format/CsvResponseFormatter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxMDowMlrOIDoSCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxMDowMlrOIDoSCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY3NjYxOA==", "bodyText": "In case we already have CsvResult abstraction. Could we make the  code like following\nCsvResult result = new CsvResult(response)\nreturn result.getCsv()", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/870#discussion_r540676618", "createdAt": "2020-12-11T04:10:02Z", "author": {"login": "penghuo"}, "path": "protocol/src/main/java/com/amazon/opendistroforelasticsearch/sql/protocol/response/format/CsvResponseFormatter.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.protocol.response.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.protocol.response.QueryResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Singular;\n+\n+@RequiredArgsConstructor\n+public class CsvResponseFormatter implements ResponseFormatter<QueryResult> {\n+  private static final String INLINE_SEPARATOR = \",\";\n+  private static final String INTERLINE_SEPARATOR = System.lineSeparator();\n+  private static final Set<String> SENSITIVE_CHAR = ImmutableSet.of(\"=\", \"+\", \"-\", \"@\");\n+\n+  private final boolean sanitize;\n+\n+  public CsvResponseFormatter() {\n+    this.sanitize = true;\n+  }\n+\n+  @Override\n+  public String format(QueryResult response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2a502479814f8bbe780b099248a213e1b422242"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTM0NTAxOnYy", "diffSide": "RIGHT", "path": "protocol/src/main/java/com/amazon/opendistroforelasticsearch/sql/protocol/response/format/CsvResponseFormatter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxMTozNVrOIDoT8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxMTozNVrOIDoT8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY3NzEwNw==", "bodyText": "could we simply the logic as\nStream<String> headerAndData = (?);\nheaderAndData.stream().collect(Collectors.joining(INTERLINE_SEPARATOR))", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/870#discussion_r540677107", "createdAt": "2020-12-11T04:11:35Z", "author": {"login": "penghuo"}, "path": "protocol/src/main/java/com/amazon/opendistroforelasticsearch/sql/protocol/response/format/CsvResponseFormatter.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.protocol.response.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.protocol.response.QueryResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Singular;\n+\n+@RequiredArgsConstructor\n+public class CsvResponseFormatter implements ResponseFormatter<QueryResult> {\n+  private static final String INLINE_SEPARATOR = \",\";\n+  private static final String INTERLINE_SEPARATOR = System.lineSeparator();\n+  private static final Set<String> SENSITIVE_CHAR = ImmutableSet.of(\"=\", \"+\", \"-\", \"@\");\n+\n+  private final boolean sanitize;\n+\n+  public CsvResponseFormatter() {\n+    this.sanitize = true;\n+  }\n+\n+  @Override\n+  public String format(QueryResult response) {\n+    CsvResult result = buildCsvResult(response);\n+    String headers = String.join(INLINE_SEPARATOR, result.getHeaders());\n+    ImmutableList.Builder<String> dataLines = new ImmutableList.Builder<>();\n+    result.getData().forEach(line -> dataLines.add(String.join(INLINE_SEPARATOR, line)));\n+    return String.join(\n+        INTERLINE_SEPARATOR, headers, String.join(INTERLINE_SEPARATOR, dataLines.build()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2a502479814f8bbe780b099248a213e1b422242"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1933, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}