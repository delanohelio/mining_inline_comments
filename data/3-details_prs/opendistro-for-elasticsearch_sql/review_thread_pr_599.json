{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzNzgzMDUy", "number": 599, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDozOTozNVrOEQyatg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDozOTozNVrOEQyatg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDM4NzEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/arthmetic/MathematicalFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDozOTozNVrOG1I7Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo1NDoxMlrOG1JYaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3MzkzOQ==", "bodyText": "Could you document this special case?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/599#discussion_r458373939", "createdAt": "2020-07-21T20:39:35Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/arthmetic/MathematicalFunction.java", "diffHunk": "@@ -429,6 +439,154 @@ private static FunctionResolver truncate() {\n             .build());\n   }\n \n+  /**\n+   * Definition of acos(x) function.\n+   * Calculates the arc cosine of x, that is, the value whose cosine is x.\n+   * Returns NULL if x is not in the range -1 to 1.\n+   * The supported signature of acos function is\n+   * INTEGER/LONG/FLOAT/DOUBLE -> DOUBLE\n+   */\n+  private static FunctionResolver acos() {\n+    FunctionName functionName = BuiltinFunctionName.ACOS.getName();\n+    return new FunctionResolver(\n+        functionName,\n+        singleArgumentFunction(functionName, v -> v < -1 || v > 1 ? null : Math.acos(v)));\n+  }\n+\n+  /**\n+   * Definition of asin(x) function.\n+   * Calculates the arc sine of x, that is, the value whose sine is x.\n+   * Returns NULL if x is not in the range -1 to 1.\n+   * The supported signature of asin function is\n+   * INTEGER/LONG/FLOAT/DOUBLE -> DOUBLE\n+   */\n+  private static FunctionResolver asin() {\n+    FunctionName functionName = BuiltinFunctionName.ASIN.getName();\n+    return new FunctionResolver(\n+        functionName,\n+        singleArgumentFunction(functionName, v -> v < -1 || v > 1 ? null : Math.asin(v)));\n+  }\n+\n+  /**\n+   * Definition of atan(x) and atan(y, x) function.\n+   * atan(x) calculates the arc tangent of x, that is, the value whose tangent is x.\n+   * atan(y, x) calculates the arc tangent of y / x, except that the signs of both arguments\n+   * are used to determine the quadrant of the result.\n+   * The supported signature of atan function is\n+   * (x: INTEGER/LONG/FLOAT/DOUBLE, y: INTEGER/LONG/FLOAT/DOUBLE) -> DOUBLE\n+   */\n+  private static FunctionResolver atan() {\n+    FunctionName functionName = BuiltinFunctionName.ATAN.getName();\n+    return new FunctionResolver(functionName,\n+        new ImmutableMap.Builder<FunctionSignature, FunctionBuilder>()\n+            .put(\n+                new FunctionSignature(functionName, Arrays.asList(ExprCoreType.DOUBLE)),\n+                unaryOperator(\n+                    functionName, Math::atan, ExprValueUtils::getDoubleValue, ExprCoreType.DOUBLE))\n+            .put(\n+                new FunctionSignature(\n+                    functionName, Arrays.asList(ExprCoreType.DOUBLE, ExprCoreType.DOUBLE)),\n+                doubleArgFunc(functionName,\n+                    Math::atan2, ExprValueUtils::getDoubleValue, ExprValueUtils::getDoubleValue,\n+                    ExprCoreType.DOUBLE))\n+            .build());\n+  }\n+\n+  /**\n+   * Definition of atan2(y, x) function.\n+   * Calculates the arc tangent of y / x, except that the signs of both arguments\n+   * are used to determine the quadrant of the result.\n+   * The supported signature of atan2 function is\n+   * (x: INTEGER/LONG/FLOAT/DOUBLE, y: INTEGER/LONG/FLOAT/DOUBLE) -> DOUBLE\n+   */\n+  private static FunctionResolver atan2() {\n+    FunctionName functionName = BuiltinFunctionName.ATAN2.getName();\n+    return new FunctionResolver(functionName,\n+        new ImmutableMap.Builder<FunctionSignature, FunctionBuilder>()\n+            .put(\n+                new FunctionSignature(\n+                    functionName, Arrays.asList(ExprCoreType.DOUBLE, ExprCoreType.DOUBLE)),\n+                doubleArgFunc(functionName,\n+                    Math::atan2, ExprValueUtils::getDoubleValue, ExprValueUtils::getDoubleValue,\n+                    ExprCoreType.DOUBLE))\n+            .build());\n+  }\n+\n+  /**\n+   * Definition of cos(x) function.\n+   * Calculates the cosine of X, where X is given in radians\n+   * The supported signature of cos function is\n+   * INTEGER/LONG/FLOAT/DOUBLE -> DOUBLE\n+   */\n+  private static FunctionResolver cos() {\n+    FunctionName functionName = BuiltinFunctionName.COS.getName();\n+    return new FunctionResolver(functionName, singleArgumentFunction(functionName, Math::cos));\n+  }\n+\n+  /**\n+   * Definition of cot(x) function.\n+   * Calculates the cotangent of x\n+   * The supported signature of cot function is\n+   * INTEGER/LONG/FLOAT/DOUBLE -> DOUBLE\n+   */\n+  private static FunctionResolver cot() {\n+    FunctionName functionName = BuiltinFunctionName.COT.getName();\n+    return new FunctionResolver(\n+        functionName,\n+        singleArgumentFunction(functionName, v -> {\n+          if (v == 0) {\n+            throw new ArithmeticException(String.format(\"Out of range value for cot(%s)\", v));\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac98ce0826543136b9739051e0ba04f637e4b6bb"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4MTQxNg==", "bodyText": "Done, thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/599#discussion_r458381416", "createdAt": "2020-07-21T20:54:12Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/arthmetic/MathematicalFunction.java", "diffHunk": "@@ -429,6 +439,154 @@ private static FunctionResolver truncate() {\n             .build());\n   }\n \n+  /**\n+   * Definition of acos(x) function.\n+   * Calculates the arc cosine of x, that is, the value whose cosine is x.\n+   * Returns NULL if x is not in the range -1 to 1.\n+   * The supported signature of acos function is\n+   * INTEGER/LONG/FLOAT/DOUBLE -> DOUBLE\n+   */\n+  private static FunctionResolver acos() {\n+    FunctionName functionName = BuiltinFunctionName.ACOS.getName();\n+    return new FunctionResolver(\n+        functionName,\n+        singleArgumentFunction(functionName, v -> v < -1 || v > 1 ? null : Math.acos(v)));\n+  }\n+\n+  /**\n+   * Definition of asin(x) function.\n+   * Calculates the arc sine of x, that is, the value whose sine is x.\n+   * Returns NULL if x is not in the range -1 to 1.\n+   * The supported signature of asin function is\n+   * INTEGER/LONG/FLOAT/DOUBLE -> DOUBLE\n+   */\n+  private static FunctionResolver asin() {\n+    FunctionName functionName = BuiltinFunctionName.ASIN.getName();\n+    return new FunctionResolver(\n+        functionName,\n+        singleArgumentFunction(functionName, v -> v < -1 || v > 1 ? null : Math.asin(v)));\n+  }\n+\n+  /**\n+   * Definition of atan(x) and atan(y, x) function.\n+   * atan(x) calculates the arc tangent of x, that is, the value whose tangent is x.\n+   * atan(y, x) calculates the arc tangent of y / x, except that the signs of both arguments\n+   * are used to determine the quadrant of the result.\n+   * The supported signature of atan function is\n+   * (x: INTEGER/LONG/FLOAT/DOUBLE, y: INTEGER/LONG/FLOAT/DOUBLE) -> DOUBLE\n+   */\n+  private static FunctionResolver atan() {\n+    FunctionName functionName = BuiltinFunctionName.ATAN.getName();\n+    return new FunctionResolver(functionName,\n+        new ImmutableMap.Builder<FunctionSignature, FunctionBuilder>()\n+            .put(\n+                new FunctionSignature(functionName, Arrays.asList(ExprCoreType.DOUBLE)),\n+                unaryOperator(\n+                    functionName, Math::atan, ExprValueUtils::getDoubleValue, ExprCoreType.DOUBLE))\n+            .put(\n+                new FunctionSignature(\n+                    functionName, Arrays.asList(ExprCoreType.DOUBLE, ExprCoreType.DOUBLE)),\n+                doubleArgFunc(functionName,\n+                    Math::atan2, ExprValueUtils::getDoubleValue, ExprValueUtils::getDoubleValue,\n+                    ExprCoreType.DOUBLE))\n+            .build());\n+  }\n+\n+  /**\n+   * Definition of atan2(y, x) function.\n+   * Calculates the arc tangent of y / x, except that the signs of both arguments\n+   * are used to determine the quadrant of the result.\n+   * The supported signature of atan2 function is\n+   * (x: INTEGER/LONG/FLOAT/DOUBLE, y: INTEGER/LONG/FLOAT/DOUBLE) -> DOUBLE\n+   */\n+  private static FunctionResolver atan2() {\n+    FunctionName functionName = BuiltinFunctionName.ATAN2.getName();\n+    return new FunctionResolver(functionName,\n+        new ImmutableMap.Builder<FunctionSignature, FunctionBuilder>()\n+            .put(\n+                new FunctionSignature(\n+                    functionName, Arrays.asList(ExprCoreType.DOUBLE, ExprCoreType.DOUBLE)),\n+                doubleArgFunc(functionName,\n+                    Math::atan2, ExprValueUtils::getDoubleValue, ExprValueUtils::getDoubleValue,\n+                    ExprCoreType.DOUBLE))\n+            .build());\n+  }\n+\n+  /**\n+   * Definition of cos(x) function.\n+   * Calculates the cosine of X, where X is given in radians\n+   * The supported signature of cos function is\n+   * INTEGER/LONG/FLOAT/DOUBLE -> DOUBLE\n+   */\n+  private static FunctionResolver cos() {\n+    FunctionName functionName = BuiltinFunctionName.COS.getName();\n+    return new FunctionResolver(functionName, singleArgumentFunction(functionName, Math::cos));\n+  }\n+\n+  /**\n+   * Definition of cot(x) function.\n+   * Calculates the cotangent of x\n+   * The supported signature of cot function is\n+   * INTEGER/LONG/FLOAT/DOUBLE -> DOUBLE\n+   */\n+  private static FunctionResolver cot() {\n+    FunctionName functionName = BuiltinFunctionName.COT.getName();\n+    return new FunctionResolver(\n+        functionName,\n+        singleArgumentFunction(functionName, v -> {\n+          if (v == 0) {\n+            throw new ArithmeticException(String.format(\"Out of range value for cot(%s)\", v));\n+          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3MzkzOQ=="}, "originalCommit": {"oid": "ac98ce0826543136b9739051e0ba04f637e4b6bb"}, "originalPosition": 118}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1959, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}