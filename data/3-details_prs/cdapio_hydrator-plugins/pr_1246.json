{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MDQ2NzYx", "number": 1246, "title": "Backwards compatibility", "bodyText": "JIRA ticket: https://issues.cask.co/browse/PLUGIN-180", "createdAt": "2020-11-05T13:04:55Z", "url": "https://github.com/cdapio/hydrator-plugins/pull/1246", "merged": true, "mergeCommit": {"oid": "8a837116dc7b363e91712698cf03d7c48ebafd12"}, "closed": true, "closedAt": "2020-11-18T16:53:36Z", "author": {"login": "vjosadika"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZnQ_iAFqTUyNDU2ODgxNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABddwccYgFqTUzMzYwNzE5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NTY4ODE1", "url": "https://github.com/cdapio/hydrator-plugins/pull/1246#pullrequestreview-524568815", "createdAt": "2020-11-05T18:55:13Z", "commit": {"oid": "48f286f552bb9c6d638d416c8bed8ff72150dfbf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODo1NToxNFrOHuRvEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOToxMDowN1rOHuSQTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4NzEyMQ==", "bodyText": "we shouldnt do it. the exception should be logged. Please take a look at other places where we handle this case in the codebase", "url": "https://github.com/cdapio/hydrator-plugins/pull/1246#discussion_r518287121", "createdAt": "2020-11-05T18:55:14Z", "author": {"login": "CuriousVini"}, "path": "database-plugins/src/main/java/io/cdap/plugin/DBRecord.java", "diffHunk": "@@ -99,7 +101,18 @@ public StructuredRecord getRecord() {\n    */\n   public void readFields(ResultSet resultSet) throws SQLException {\n     ResultSetMetaData metadata = resultSet.getMetaData();\n-    List<Schema.Field> originalSchema = DBUtils.getOriginalSchema(resultSet);\n+    String outputSchemaString = conf.get(DBUtils.OVERRIDE_SCHEMA, null);\n+    Schema outputSchema = null;\n+\n+    if (!Strings.isNullOrEmpty(outputSchemaString)) {\n+      try {\n+        outputSchema = Schema.parseJson(outputSchemaString);\n+      } catch (IOException e) {\n+        e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48f286f552bb9c6d638d416c8bed8ff72150dfbf"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4Nzk0Nw==", "bodyText": "these changes are not needed. please revert them", "url": "https://github.com/cdapio/hydrator-plugins/pull/1246#discussion_r518287947", "createdAt": "2020-11-05T18:56:42Z", "author": {"login": "CuriousVini"}, "path": "database-plugins/src/main/java/io/cdap/plugin/db/batch/source/DBSource.java", "diffHunk": "@@ -318,20 +319,20 @@ private Connection getConnection() throws SQLException {\n     @Nullable\n     @Name(PATTERN_TO_REPLACE)\n     @Description(\"The pattern to replace in the field name in the table, it is typically used with the \" +\n-                   \"Replace With config. If Replace With is not set, the pattern will be removed in the field name.\")\n+      \"Replace With config. If Replace With is not set, the pattern will be removed in the field name.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48f286f552bb9c6d638d416c8bed8ff72150dfbf"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4ODMxMA==", "bodyText": "these changes are not needed . Please revert them", "url": "https://github.com/cdapio/hydrator-plugins/pull/1246#discussion_r518288310", "createdAt": "2020-11-05T18:57:22Z", "author": {"login": "CuriousVini"}, "path": "database-plugins/src/main/java/io/cdap/plugin/DBRecord.java", "diffHunk": "@@ -283,7 +312,7 @@ private void writeToDB(PreparedStatement stmt, Schema.Field field, int fieldInde\n         break;\n       default:\n         throw new SQLException(String.format(\"Column %s with value %s has an unsupported datatype %s\",\n-          field.getName(), fieldValue, fieldType));\n+                                             field.getName(), fieldValue, fieldType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48f286f552bb9c6d638d416c8bed8ff72150dfbf"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NTI1NA==", "bodyText": "not needed. Please remove.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1246#discussion_r518295254", "createdAt": "2020-11-05T19:09:30Z", "author": {"login": "CuriousVini"}, "path": "database-plugins/src/main/java/io/cdap/plugin/DBUtils.java", "diffHunk": "@@ -232,13 +246,23 @@ private static Schema getSchema(String typeName, int sqlType, int precision, int\n         break;\n \n       case Types.NUMERIC:\n-      case Types.DECIMAL:\n+        //variation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48f286f552bb9c6d638d416c8bed8ff72150dfbf"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NTYzMQ==", "bodyText": "This does not cover all cases. The schema type changes depending on precision and scale values:\ntype = scale != 0 ? Schema.Type.DOUBLE :\n          // with 10 digits we can represent 2^32 and LONG is required\n          precision > 9 ? Schema.Type.LONG : Schema.Type.INT;", "url": "https://github.com/cdapio/hydrator-plugins/pull/1246#discussion_r518295631", "createdAt": "2020-11-05T19:10:07Z", "author": {"login": "CuriousVini"}, "path": "database-plugins/src/main/java/io/cdap/plugin/DBRecord.java", "diffHunk": "@@ -124,23 +137,39 @@ public void readFields(ResultSet resultSet) throws SQLException {\n       int sqlType = metadata.getColumnType(i + 1);\n       int sqlPrecision = metadata.getPrecision(i + 1);\n       int sqlScale = metadata.getScale(i + 1);\n+      // handles backwards compatibility\n+      boolean handleDecimalAsDouble = false;\n+      if (sqlType == Types.DECIMAL && outputSchema != null) {\n+        Schema outputFieldSchema = field.getSchema();\n+        if (outputFieldSchema != null) {\n+          outputFieldSchema = outputFieldSchema.isNullable() ? outputFieldSchema.getNonNullable() : outputFieldSchema;\n+          handleDecimalAsDouble = outputFieldSchema.getType() == Schema.Type.DOUBLE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48f286f552bb9c6d638d416c8bed8ff72150dfbf"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NDg1MTMw", "url": "https://github.com/cdapio/hydrator-plugins/pull/1246#pullrequestreview-528485130", "createdAt": "2020-11-11T19:49:01Z", "commit": {"oid": "84efa6168f9c775b744acd7e10a3bbf111a51b2f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxOTo0OTowMlrOHxb45w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNTozMTowOVrOHxrJ4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU5OTIwNw==", "bodyText": "not needed", "url": "https://github.com/cdapio/hydrator-plugins/pull/1246#discussion_r521599207", "createdAt": "2020-11-11T19:49:02Z", "author": {"login": "CuriousVini"}, "path": "database-plugins/src/test/java/io/cdap/plugin/db/batch/source/DBSourceTestRun.java", "diffHunk": "@@ -351,8 +416,8 @@ public void testNonExistentDBTable() throws Exception {\n       .addConnection(sourceBadName.getName(), sink.getName())\n       .build();\n     ApplicationId appId = NamespaceId.DEFAULT.app(\"dbSourceNonExistingTest\");\n-    assertDeploymentFailure(appId, etlConfig, \"ETL Application with DB Source should have failed because of a \" +\n-      \"non-existent source table.\");\n+    assertDeploymentFailure(appId, etlConfig, \"ETL Application with DB Source should have failed because \"\n+      + \"of a \" + \"non-existent source table.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84efa6168f9c775b744acd7e10a3bbf111a51b2f"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU5OTI5MQ==", "bodyText": "Is this unintended?", "url": "https://github.com/cdapio/hydrator-plugins/pull/1246#discussion_r521599291", "createdAt": "2020-11-11T19:49:13Z", "author": {"login": "CuriousVini"}, "path": "database-plugins/src/test/java/io/cdap/plugin/db/batch/source/DBSourceTestRun.java", "diffHunk": "@@ -374,7 +439,7 @@ public void testNonExistentDBTable() throws Exception {\n       .addStage(sink)\n       .addConnection(sourceBadConn.getName(), sink.getName())\n       .build();\n-    assertDeploymentFailure(appId, etlConfig, \"ETL Application with DB Source should have failed because of a \" +\n-      \"non-existent source database.\");\n+    assertDeploymentFailure(appId, etlConfig, \"ETL Application with DB Source should have failed because \"\n+      + \"of a \" + \"non-existent source database.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84efa6168f9c775b744acd7e10a3bbf111a51b2f"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU5OTQxNA==", "bodyText": "same here. unintended?", "url": "https://github.com/cdapio/hydrator-plugins/pull/1246#discussion_r521599414", "createdAt": "2020-11-11T19:49:25Z", "author": {"login": "CuriousVini"}, "path": "database-plugins/src/test/java/io/cdap/plugin/db/batch/source/DBSourceTestRun.java", "diffHunk": "@@ -298,7 +362,8 @@ public void testUserNamePasswordCombinations() throws Exception {\n     // as source\n     Map<String, String> noUser = new HashMap<>(baseSourceProps);\n     noUser.put(DBConfig.PASSWORD, \"password\");\n-    database = new ETLStage(\"databaseSource\", new ETLPlugin(\"Database\", BatchSource.PLUGIN_TYPE, noUser, null));\n+    database = new ETLStage(\"databaseSource\", new ETLPlugin(\"Database\", BatchSource.PLUGIN_TYPE, noUser,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84efa6168f9c775b744acd7e10a3bbf111a51b2f"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg0NjEyOQ==", "bodyText": "Mark Schema outputSchema as nullable", "url": "https://github.com/cdapio/hydrator-plugins/pull/1246#discussion_r521846129", "createdAt": "2020-11-12T05:21:06Z", "author": {"login": "CuriousVini"}, "path": "database-plugins/src/main/java/io/cdap/plugin/DBUtils.java", "diffHunk": "@@ -149,21 +149,21 @@ public static DriverCleanup ensureJDBCDriverIsAvailable(Class<? extends Driver>\n    * Given the result set, get the metadata of the result set and return\n    * list of {@link io.cdap.cdap.api.data.schema.Schema.Field},\n    * where name of the field is same as column name and type of the field is obtained using\n-   * {@link DBUtils#getSchema(String, int, int, int, String)}\n+   * {@link DBUtils#getSchema(String, int, int, int, String, boolean)}\n    *\n    * @param resultSet result set of executed query\n    * @return list of schema fields\n    * @throws SQLException\n    */\n-  public static List<Schema.Field> getOriginalSchema(ResultSet resultSet) throws SQLException {\n-    return getSchemaFields(resultSet, null, null);\n+  public static List<Schema.Field> getOriginalSchema(ResultSet resultSet, Schema outputSchema) throws SQLException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84efa6168f9c775b744acd7e10a3bbf111a51b2f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg0NjIxNQ==", "bodyText": "Javadoc should be updated and should have same params as number of params in the method", "url": "https://github.com/cdapio/hydrator-plugins/pull/1246#discussion_r521846215", "createdAt": "2020-11-12T05:21:24Z", "author": {"login": "CuriousVini"}, "path": "database-plugins/src/main/java/io/cdap/plugin/DBUtils.java", "diffHunk": "@@ -149,21 +149,21 @@ public static DriverCleanup ensureJDBCDriverIsAvailable(Class<? extends Driver>\n    * Given the result set, get the metadata of the result set and return\n    * list of {@link io.cdap.cdap.api.data.schema.Schema.Field},\n    * where name of the field is same as column name and type of the field is obtained using\n-   * {@link DBUtils#getSchema(String, int, int, int, String)}\n+   * {@link DBUtils#getSchema(String, int, int, int, String, boolean)}\n    *\n    * @param resultSet result set of executed query\n    * @return list of schema fields\n    * @throws SQLException\n    */\n-  public static List<Schema.Field> getOriginalSchema(ResultSet resultSet) throws SQLException {\n-    return getSchemaFields(resultSet, null, null);\n+  public static List<Schema.Field> getOriginalSchema(ResultSet resultSet, Schema outputSchema) throws SQLException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg0NjEyOQ=="}, "originalCommit": {"oid": "84efa6168f9c775b744acd7e10a3bbf111a51b2f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg0NjI2Mg==", "bodyText": "Mark outpuschema as nullable", "url": "https://github.com/cdapio/hydrator-plugins/pull/1246#discussion_r521846262", "createdAt": "2020-11-12T05:21:35Z", "author": {"login": "CuriousVini"}, "path": "database-plugins/src/main/java/io/cdap/plugin/DBUtils.java", "diffHunk": "@@ -172,7 +172,8 @@ public static DriverCleanup ensureJDBCDriverIsAvailable(Class<? extends Driver>\n    * @throws SQLException\n    */\n   public static List<Schema.Field> getSchemaFields(ResultSet resultSet, @Nullable String patternToReplace,\n-                                                   @Nullable String replaceWith) throws SQLException {\n+                                                   @Nullable String replaceWith, Schema outputSchema)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84efa6168f9c775b744acd7e10a3bbf111a51b2f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg0NjcwOA==", "bodyText": "What is the difference between numeric and decimal type? Does this change need to be applied to numeric too?", "url": "https://github.com/cdapio/hydrator-plugins/pull/1246#discussion_r521846708", "createdAt": "2020-11-12T05:22:53Z", "author": {"login": "CuriousVini"}, "path": "database-plugins/src/main/java/io/cdap/plugin/DBUtils.java", "diffHunk": "@@ -232,13 +247,21 @@ private static Schema getSchema(String typeName, int sqlType, int precision, int\n         break;\n \n       case Types.NUMERIC:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84efa6168f9c775b744acd7e10a3bbf111a51b2f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg0NzMwMw==", "bodyText": "should not have duplicate code. Please refactor it.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1246#discussion_r521847303", "createdAt": "2020-11-12T05:24:41Z", "author": {"login": "CuriousVini"}, "path": "database-plugins/src/main/java/io/cdap/plugin/DBUtils.java", "diffHunk": "@@ -232,13 +247,21 @@ private static Schema getSchema(String typeName, int sqlType, int precision, int\n         break;\n \n       case Types.NUMERIC:\n-      case Types.DECIMAL:\n         // if there are no digits after the point, use integer types\n         type = scale != 0 ? Schema.Type.DOUBLE :\n           // with 10 digits we can represent 2^32 and LONG is required\n           precision > 9 ? Schema.Type.LONG : Schema.Type.INT;\n         break;\n-\n+      case Types.DECIMAL:\n+        if (handleAsDecimal) {\n+          return Schema.decimalOf(precision, scale);\n+        } else {\n+          // if there are no digits after the point, use integer types\n+          type = scale != 0 ? Schema.Type.DOUBLE :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84efa6168f9c775b744acd7e10a3bbf111a51b2f"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg0ODczMA==", "bodyText": "shouldnt duplicate the logic. Please refactor it.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1246#discussion_r521848730", "createdAt": "2020-11-12T05:29:07Z", "author": {"login": "CuriousVini"}, "path": "database-plugins/src/main/java/io/cdap/plugin/DBUtils.java", "diffHunk": "@@ -293,6 +316,23 @@ public static Object transformValue(int sqlType, int precision, int scale,\n           } else {\n             return decimal.intValue();\n           }\n+        }\n+        case Types.DECIMAL: {\n+          if (handleAsDecimal) {\n+            return original;\n+          } else {\n+            BigDecimal decimal = (BigDecimal) original;\n+            if (scale != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84efa6168f9c775b744acd7e10a3bbf111a51b2f"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg0OTMxNA==", "bodyText": "There is no need for handleAsDecimal  variable in this method. We can just pass Schema.Field field to the method and get the type of field to derive if decimal type needs to be handled.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1246#discussion_r521849314", "createdAt": "2020-11-12T05:31:09Z", "author": {"login": "CuriousVini"}, "path": "database-plugins/src/main/java/io/cdap/plugin/DBRecord.java", "diffHunk": "@@ -124,23 +137,37 @@ public void readFields(ResultSet resultSet) throws SQLException {\n       int sqlType = metadata.getColumnType(i + 1);\n       int sqlPrecision = metadata.getPrecision(i + 1);\n       int sqlScale = metadata.getScale(i + 1);\n+      // handles backwards compatibility\n+      boolean handleAsDecimal = false;\n+      Schema outputFieldSchema = field.getSchema();\n+      outputFieldSchema = outputFieldSchema.isNullable() ? outputFieldSchema.getNonNullable() : outputFieldSchema;\n+      if (sqlType == Types.DECIMAL && (outputSchema == null ||\n+        outputFieldSchema.getLogicalType() == Schema.LogicalType.DECIMAL)) {\n+        handleAsDecimal = true;\n+      }\n       setField(resultSet, recordBuilder, field, sqlType, sqlPrecision, sqlScale, nameMap.getOrDefault(field.getName(),\n-                                                                                                      field.getName()));\n+                                                                                                      field.getName()),\n+               handleAsDecimal);\n     }\n     record = recordBuilder.build();\n   }\n \n   private void setField(ResultSet resultSet, StructuredRecord.Builder recordBuilder, Schema.Field field, int sqlType,\n-                        int sqlPrecision, int sqlScale, String originalName) throws SQLException {\n+                        int sqlPrecision, int sqlScale, String originalName, boolean handleAsDecimal)\n+    throws SQLException {\n     // original name has to be used to get result from result set\n-    Object o = DBUtils.transformValue(sqlType, sqlPrecision, sqlScale, resultSet, originalName);\n+    Object o = DBUtils.transformValue(sqlType, sqlPrecision, sqlScale, resultSet, originalName,\n+                                      handleAsDecimal);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84efa6168f9c775b744acd7e10a3bbf111a51b2f"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxODgzMjEw", "url": "https://github.com/cdapio/hydrator-plugins/pull/1246#pullrequestreview-531883210", "createdAt": "2020-11-16T23:05:44Z", "commit": {"oid": "08dbc2f538801a97daf66cbbebc16eae04a3a039"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f7708e09423dc28243776565f557832d270d40c", "author": {"user": null}, "url": "https://github.com/cdapio/hydrator-plugins/commit/6f7708e09423dc28243776565f557832d270d40c", "committedDate": "2020-11-17T18:33:29Z", "message": "Backwards compatibility"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "08dbc2f538801a97daf66cbbebc16eae04a3a039", "author": {"user": null}, "url": "https://github.com/cdapio/hydrator-plugins/commit/08dbc2f538801a97daf66cbbebc16eae04a3a039", "committedDate": "2020-11-16T14:07:17Z", "message": "Fixed comments"}, "afterCommit": {"oid": "6f7708e09423dc28243776565f557832d270d40c", "author": {"user": null}, "url": "https://github.com/cdapio/hydrator-plugins/commit/6f7708e09423dc28243776565f557832d270d40c", "committedDate": "2020-11-17T18:33:29Z", "message": "Backwards compatibility"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNjA3MTkx", "url": "https://github.com/cdapio/hydrator-plugins/pull/1246#pullrequestreview-533607191", "createdAt": "2020-11-18T16:07:33Z", "commit": {"oid": "6f7708e09423dc28243776565f557832d270d40c"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1506, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}