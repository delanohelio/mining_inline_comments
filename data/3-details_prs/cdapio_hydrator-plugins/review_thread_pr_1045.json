{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxOTM2MTI3", "number": 1045, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzowMzozNlrODrAMoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDo0MDo1N1rODrD9KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDE4NTkyOnYy", "diffSide": "RIGHT", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzowMzozNlrOF7GUYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMDo0Mzo0NFrOF7ISyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxMzgyNQ==", "bodyText": "unused?", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397513825", "createdAt": "2020-03-24T23:03:36Z", "author": {"login": "CuriousVini"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -68,11 +64,14 @@\n   static final String IDENTITY_OPERATION_DESCRIPTION = \"Unchanged as part of a join\";\n   static final String RENAME_OPERATION_DESCRIPTION = \"Renamed as a part of a join\";\n \n+\n   private final JoinerConfig conf;\n   private Schema outputSchema;\n-  private Map<String, StageKeyInfo> stageKeyInfos;\n+  private Map<String, List<String>> perStageJoinKeys;\n   private Table<String, String, String> perStageSelectedFields;\n+  private Multimap<String, String> duplicateFields = ArrayListMultimap.create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0NjE4Nw==", "bodyText": "Good catch; removed.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397546187", "createdAt": "2020-03-25T00:43:44Z", "author": {"login": "rmstar"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -68,11 +64,14 @@\n   static final String IDENTITY_OPERATION_DESCRIPTION = \"Unchanged as part of a join\";\n   static final String RENAME_OPERATION_DESCRIPTION = \"Renamed as a part of a join\";\n \n+\n   private final JoinerConfig conf;\n   private Schema outputSchema;\n-  private Map<String, StageKeyInfo> stageKeyInfos;\n+  private Map<String, List<String>> perStageJoinKeys;\n   private Table<String, String, String> perStageSelectedFields;\n+  private Multimap<String, String> duplicateFields = ArrayListMultimap.create();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxMzgyNQ=="}, "originalCommit": {"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDE4Nzk3OnYy", "diffSide": "RIGHT", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzowNDoyNFrOF7GVkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMDo0NzoxM1rOF7IWhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDEyOA==", "bodyText": "nit: JoinerConfig.OUTPUT_SCHEMA", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397514128", "createdAt": "2020-03-24T23:04:24Z", "author": {"login": "CuriousVini"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -82,24 +81,39 @@ public Joiner(JoinerConfig conf) {\n   public void configurePipeline(MultiInputPipelineConfigurer pipelineConfigurer) {\n     MultiInputStageConfigurer stageConfigurer = pipelineConfigurer.getMultiInputStageConfigurer();\n     Map<String, Schema> inputSchemas = stageConfigurer.getInputSchemas();\n-    FailureCollector collector = init(inputSchemas,\n-                                      pipelineConfigurer.getMultiInputStageConfigurer().getFailureCollector());\n+    FailureCollector collector = pipelineConfigurer.getMultiInputStageConfigurer().getFailureCollector();\n+    init(inputSchemas, collector);\n     collector.getOrThrowException();\n-    //validate the input schema and get the output schema for it\n-    stageConfigurer.setOutputSchema(getOutputSchema(inputSchemas, collector));\n+    if (!conf.inputSchemasAvailable(inputSchemas) && !conf.containsMacro(conf.OUTPUT_SCHEMA) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMTYyNw==", "bodyText": "Can we move this check to init as well?", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397521627", "createdAt": "2020-03-24T23:25:51Z", "author": {"login": "CuriousVini"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -82,24 +81,39 @@ public Joiner(JoinerConfig conf) {\n   public void configurePipeline(MultiInputPipelineConfigurer pipelineConfigurer) {\n     MultiInputStageConfigurer stageConfigurer = pipelineConfigurer.getMultiInputStageConfigurer();\n     Map<String, Schema> inputSchemas = stageConfigurer.getInputSchemas();\n-    FailureCollector collector = init(inputSchemas,\n-                                      pipelineConfigurer.getMultiInputStageConfigurer().getFailureCollector());\n+    FailureCollector collector = pipelineConfigurer.getMultiInputStageConfigurer().getFailureCollector();\n+    init(inputSchemas, collector);\n     collector.getOrThrowException();\n-    //validate the input schema and get the output schema for it\n-    stageConfigurer.setOutputSchema(getOutputSchema(inputSchemas, collector));\n+    if (!conf.inputSchemasAvailable(inputSchemas) && !conf.containsMacro(conf.OUTPUT_SCHEMA) &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDEyOA=="}, "originalCommit": {"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0NzE0Mw==", "bodyText": "Fixed conf.OUTPUT_SCHEMA -> JoinerConfig.OUTPUT_SCHEMA.\nThe check doesn't belong in init because init is called from:\n\nhere, i.e. configurePipeline\nprepareRun\ninitialize\n\nMaking this check at configure time is sufficient; IMO we don't need to check this again in other places.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397547143", "createdAt": "2020-03-25T00:47:13Z", "author": {"login": "rmstar"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -82,24 +81,39 @@ public Joiner(JoinerConfig conf) {\n   public void configurePipeline(MultiInputPipelineConfigurer pipelineConfigurer) {\n     MultiInputStageConfigurer stageConfigurer = pipelineConfigurer.getMultiInputStageConfigurer();\n     Map<String, Schema> inputSchemas = stageConfigurer.getInputSchemas();\n-    FailureCollector collector = init(inputSchemas,\n-                                      pipelineConfigurer.getMultiInputStageConfigurer().getFailureCollector());\n+    FailureCollector collector = pipelineConfigurer.getMultiInputStageConfigurer().getFailureCollector();\n+    init(inputSchemas, collector);\n     collector.getOrThrowException();\n-    //validate the input schema and get the output schema for it\n-    stageConfigurer.setOutputSchema(getOutputSchema(inputSchemas, collector));\n+    if (!conf.inputSchemasAvailable(inputSchemas) && !conf.containsMacro(conf.OUTPUT_SCHEMA) &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDEyOA=="}, "originalCommit": {"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDE4ODYwOnYy", "diffSide": "RIGHT", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzowNDo0MFrOF7GV7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMDo0NzoxOVrOF7IWmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDIyMQ==", "bodyText": "same here: JoinerConfig.OUTPUT_SCHEMA", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397514221", "createdAt": "2020-03-24T23:04:40Z", "author": {"login": "CuriousVini"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -82,24 +81,39 @@ public Joiner(JoinerConfig conf) {\n   public void configurePipeline(MultiInputPipelineConfigurer pipelineConfigurer) {\n     MultiInputStageConfigurer stageConfigurer = pipelineConfigurer.getMultiInputStageConfigurer();\n     Map<String, Schema> inputSchemas = stageConfigurer.getInputSchemas();\n-    FailureCollector collector = init(inputSchemas,\n-                                      pipelineConfigurer.getMultiInputStageConfigurer().getFailureCollector());\n+    FailureCollector collector = pipelineConfigurer.getMultiInputStageConfigurer().getFailureCollector();\n+    init(inputSchemas, collector);\n     collector.getOrThrowException();\n-    //validate the input schema and get the output schema for it\n-    stageConfigurer.setOutputSchema(getOutputSchema(inputSchemas, collector));\n+    if (!conf.inputSchemasAvailable(inputSchemas) && !conf.containsMacro(conf.OUTPUT_SCHEMA) &&\n+      conf.getOutputSchema(collector) == null) {\n+      // If input schemas are unknown, an output schema must be provided.\n+      collector.addFailure(\"Output schema must be specified\", null).withConfigProperty(conf.OUTPUT_SCHEMA);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0NzE2Mw==", "bodyText": "fixed.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397547163", "createdAt": "2020-03-25T00:47:19Z", "author": {"login": "rmstar"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -82,24 +81,39 @@ public Joiner(JoinerConfig conf) {\n   public void configurePipeline(MultiInputPipelineConfigurer pipelineConfigurer) {\n     MultiInputStageConfigurer stageConfigurer = pipelineConfigurer.getMultiInputStageConfigurer();\n     Map<String, Schema> inputSchemas = stageConfigurer.getInputSchemas();\n-    FailureCollector collector = init(inputSchemas,\n-                                      pipelineConfigurer.getMultiInputStageConfigurer().getFailureCollector());\n+    FailureCollector collector = pipelineConfigurer.getMultiInputStageConfigurer().getFailureCollector();\n+    init(inputSchemas, collector);\n     collector.getOrThrowException();\n-    //validate the input schema and get the output schema for it\n-    stageConfigurer.setOutputSchema(getOutputSchema(inputSchemas, collector));\n+    if (!conf.inputSchemasAvailable(inputSchemas) && !conf.containsMacro(conf.OUTPUT_SCHEMA) &&\n+      conf.getOutputSchema(collector) == null) {\n+      // If input schemas are unknown, an output schema must be provided.\n+      collector.addFailure(\"Output schema must be specified\", null).withConfigProperty(conf.OUTPUT_SCHEMA);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDIyMQ=="}, "originalCommit": {"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDE5MDE2OnYy", "diffSide": "RIGHT", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzowNToyOFrOF7GW-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMDo1MzozMFrOF7IdzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDQ5MA==", "bodyText": "nit: Mark this as @VisibleForTesting", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397514490", "createdAt": "2020-03-24T23:05:28Z", "author": {"login": "CuriousVini"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -215,31 +259,57 @@ public StructuredRecord merge(StructuredRecord joinKey, Iterable<JoinElement<Str\n   }\n \n   FailureCollector init(Map<String, Schema> inputSchemas, FailureCollector failureCollector) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyNDI2Nw==", "bodyText": "looks like inputSchemasAvailable is called at many places. can we centralize that check in this method?", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397524267", "createdAt": "2020-03-24T23:33:01Z", "author": {"login": "CuriousVini"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -215,31 +259,57 @@ public StructuredRecord merge(StructuredRecord joinKey, Iterable<JoinElement<Str\n   }\n \n   FailureCollector init(Map<String, Schema> inputSchemas, FailureCollector failureCollector) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDQ5MA=="}, "originalCommit": {"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0OTAwNQ==", "bodyText": "Added @VisibleForTesting annotation.\ninputSchemasAvailable is called from:\n\nconfigurePipeline - part of check to verify that output schema is provided if input schemas are not known\nprepareRun - don't record lineage if input schemas are not available\ncreateOutputFieldInfos - bail out if input schemas are not available\nJoinerConfig.validateJoinKeySchemas - part of check to skip validation if input schemas are not available or joinKeys is a macro.\n\nSince it's used in many different contexts, I don't think it makes sense to centralize the check in init().", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397549005", "createdAt": "2020-03-25T00:53:30Z", "author": {"login": "rmstar"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -215,31 +259,57 @@ public StructuredRecord merge(StructuredRecord joinKey, Iterable<JoinElement<Str\n   }\n \n   FailureCollector init(Map<String, Schema> inputSchemas, FailureCollector failureCollector) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDQ5MA=="}, "originalCommit": {"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDE5MTAyOnYy", "diffSide": "RIGHT", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzowNTo1MFrOF7GXcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMDo0NzoyNVrOF7IWrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDYxMA==", "bodyText": "we can make this method private", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397514610", "createdAt": "2020-03-24T23:05:50Z", "author": {"login": "CuriousVini"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -215,31 +259,57 @@ public StructuredRecord merge(StructuredRecord joinKey, Iterable<JoinElement<Str\n   }\n \n   FailureCollector init(Map<String, Schema> inputSchemas, FailureCollector failureCollector) {\n-    Map<String, StageKeyInfo> keyInfos = new HashMap<>();\n-    StageKeyInfo prevKeyInfo = null;\n-    for (Map.Entry<String, List<String>> entry : conf.getPerStageJoinKeys().entrySet()) {\n+    validateJoinKeySchemas(inputSchemas, conf.getPerStageJoinKeys(), failureCollector);\n+    joinConfig = new JoinConfig(conf.getInputs());\n+    perStageSelectedFields = conf.getPerStageSelectedFields();\n+    return failureCollector;\n+  }\n+\n+  void validateJoinKeySchemas(Map<String, Schema> inputSchemas, Map<String, List<String>> joinKeys,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0NzE4MQ==", "bodyText": "fixed", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397547181", "createdAt": "2020-03-25T00:47:25Z", "author": {"login": "rmstar"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -215,31 +259,57 @@ public StructuredRecord merge(StructuredRecord joinKey, Iterable<JoinElement<Str\n   }\n \n   FailureCollector init(Map<String, Schema> inputSchemas, FailureCollector failureCollector) {\n-    Map<String, StageKeyInfo> keyInfos = new HashMap<>();\n-    StageKeyInfo prevKeyInfo = null;\n-    for (Map.Entry<String, List<String>> entry : conf.getPerStageJoinKeys().entrySet()) {\n+    validateJoinKeySchemas(inputSchemas, conf.getPerStageJoinKeys(), failureCollector);\n+    joinConfig = new JoinConfig(conf.getInputs());\n+    perStageSelectedFields = conf.getPerStageSelectedFields();\n+    return failureCollector;\n+  }\n+\n+  void validateJoinKeySchemas(Map<String, Schema> inputSchemas, Map<String, List<String>> joinKeys,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDYxMA=="}, "originalCommit": {"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDE5MjUzOnYy", "diffSide": "RIGHT", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzowNjozOFrOF7GYZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMDo1MzozNVrOF7Id4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDg1Mg==", "bodyText": "Annotate this with @VisibleForTesting", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397514852", "createdAt": "2020-03-24T23:06:38Z", "author": {"login": "CuriousVini"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -215,31 +259,57 @@ public StructuredRecord merge(StructuredRecord joinKey, Iterable<JoinElement<Str\n   }\n \n   FailureCollector init(Map<String, Schema> inputSchemas, FailureCollector failureCollector) {\n-    Map<String, StageKeyInfo> keyInfos = new HashMap<>();\n-    StageKeyInfo prevKeyInfo = null;\n-    for (Map.Entry<String, List<String>> entry : conf.getPerStageJoinKeys().entrySet()) {\n+    validateJoinKeySchemas(inputSchemas, conf.getPerStageJoinKeys(), failureCollector);\n+    joinConfig = new JoinConfig(conf.getInputs());\n+    perStageSelectedFields = conf.getPerStageSelectedFields();\n+    return failureCollector;\n+  }\n+\n+  void validateJoinKeySchemas(Map<String, Schema> inputSchemas, Map<String, List<String>> joinKeys,\n+                              FailureCollector collector) {\n+    perStageJoinKeys = joinKeys;\n+    conf.validateJoinKeySchemas(inputSchemas, joinKeys, collector);\n+\n+    List<Schema> prevSchemaList = null;\n+    for (Map.Entry<String, List<String>> entry : perStageJoinKeys.entrySet()) {\n+      ArrayList<Schema> schemaList = new ArrayList<>();\n       String stageName = entry.getKey();\n-      StageKeyInfo keyInfo = new StageKeyInfo(stageName, inputSchemas.get(stageName),\n-                                              entry.getValue(), failureCollector);\n-      if (prevKeyInfo != null && !prevKeyInfo.getSchema().equals(keyInfo.getSchema())) {\n-        failureCollector.addFailure(\n+\n+      Schema schema = inputSchemas.get(stageName);\n+      if (schema == null) {\n+        // Input schema will be null if the output schema of the previous node is a macro\n+        return;\n+      }\n+\n+      for (String joinKey : entry.getValue()) {\n+        Schema.Field field = schema.getField(joinKey);\n+        if (field == null) {\n+          collector.addFailure(\n+            String.format(\"Join key field '%s' is not present in input stage of '%s'.\", joinKey, stageName), null)\n+            .withConfigProperty(conf.JOIN_KEYS);\n+        }\n+        schemaList.add(field.getSchema());\n+      }\n+      if (prevSchemaList != null && !prevSchemaList.equals(schemaList)) {\n+        collector.addFailure(\n           String.format(\"For stage '%s', Schemas of join keys '%s' are expected to be: '%s', but found: '%s'.\",\n-                        stageName, entry.getValue(), prevKeyInfo.getFieldSchemas(), keyInfo.getFieldSchemas()), null)\n-          .withConfigProperty(JoinerConfig.JOIN_KEYS);\n-      } else {\n-        prevKeyInfo = keyInfo;\n+                        stageName, entry.getValue(), prevSchemaList.toString(), schemaList.toString()), null)\n+          .withConfigProperty(conf.JOIN_KEYS);\n       }\n-      keyInfos.put(stageName, keyInfo);\n+      prevSchemaList = schemaList;\n     }\n-\n-    stageKeyInfos = Collections.unmodifiableMap(keyInfos);\n-    joinConfig = new JoinConfig(conf.getInputs());\n-    perStageSelectedFields = conf.getPerStageSelectedFields();\n-    return failureCollector;\n   }\n \n   Schema getOutputSchema(Map<String, Schema> inputSchemas, FailureCollector collector) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0OTAyNg==", "bodyText": "fixed.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397549026", "createdAt": "2020-03-25T00:53:35Z", "author": {"login": "rmstar"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -215,31 +259,57 @@ public StructuredRecord merge(StructuredRecord joinKey, Iterable<JoinElement<Str\n   }\n \n   FailureCollector init(Map<String, Schema> inputSchemas, FailureCollector failureCollector) {\n-    Map<String, StageKeyInfo> keyInfos = new HashMap<>();\n-    StageKeyInfo prevKeyInfo = null;\n-    for (Map.Entry<String, List<String>> entry : conf.getPerStageJoinKeys().entrySet()) {\n+    validateJoinKeySchemas(inputSchemas, conf.getPerStageJoinKeys(), failureCollector);\n+    joinConfig = new JoinConfig(conf.getInputs());\n+    perStageSelectedFields = conf.getPerStageSelectedFields();\n+    return failureCollector;\n+  }\n+\n+  void validateJoinKeySchemas(Map<String, Schema> inputSchemas, Map<String, List<String>> joinKeys,\n+                              FailureCollector collector) {\n+    perStageJoinKeys = joinKeys;\n+    conf.validateJoinKeySchemas(inputSchemas, joinKeys, collector);\n+\n+    List<Schema> prevSchemaList = null;\n+    for (Map.Entry<String, List<String>> entry : perStageJoinKeys.entrySet()) {\n+      ArrayList<Schema> schemaList = new ArrayList<>();\n       String stageName = entry.getKey();\n-      StageKeyInfo keyInfo = new StageKeyInfo(stageName, inputSchemas.get(stageName),\n-                                              entry.getValue(), failureCollector);\n-      if (prevKeyInfo != null && !prevKeyInfo.getSchema().equals(keyInfo.getSchema())) {\n-        failureCollector.addFailure(\n+\n+      Schema schema = inputSchemas.get(stageName);\n+      if (schema == null) {\n+        // Input schema will be null if the output schema of the previous node is a macro\n+        return;\n+      }\n+\n+      for (String joinKey : entry.getValue()) {\n+        Schema.Field field = schema.getField(joinKey);\n+        if (field == null) {\n+          collector.addFailure(\n+            String.format(\"Join key field '%s' is not present in input stage of '%s'.\", joinKey, stageName), null)\n+            .withConfigProperty(conf.JOIN_KEYS);\n+        }\n+        schemaList.add(field.getSchema());\n+      }\n+      if (prevSchemaList != null && !prevSchemaList.equals(schemaList)) {\n+        collector.addFailure(\n           String.format(\"For stage '%s', Schemas of join keys '%s' are expected to be: '%s', but found: '%s'.\",\n-                        stageName, entry.getValue(), prevKeyInfo.getFieldSchemas(), keyInfo.getFieldSchemas()), null)\n-          .withConfigProperty(JoinerConfig.JOIN_KEYS);\n-      } else {\n-        prevKeyInfo = keyInfo;\n+                        stageName, entry.getValue(), prevSchemaList.toString(), schemaList.toString()), null)\n+          .withConfigProperty(conf.JOIN_KEYS);\n       }\n-      keyInfos.put(stageName, keyInfo);\n+      prevSchemaList = schemaList;\n     }\n-\n-    stageKeyInfos = Collections.unmodifiableMap(keyInfos);\n-    joinConfig = new JoinConfig(conf.getInputs());\n-    perStageSelectedFields = conf.getPerStageSelectedFields();\n-    return failureCollector;\n   }\n \n   Schema getOutputSchema(Map<String, Schema> inputSchemas, FailureCollector collector) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDg1Mg=="}, "originalCommit": {"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDE5NTM1OnYy", "diffSide": "RIGHT", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzowNzo0OVrOF7GaFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMDo1Mzo0MFrOF7Id9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNTI4NQ==", "bodyText": "nit: JoinerConfig.JOIN_KEYS", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397515285", "createdAt": "2020-03-24T23:07:49Z", "author": {"login": "CuriousVini"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -215,31 +259,57 @@ public StructuredRecord merge(StructuredRecord joinKey, Iterable<JoinElement<Str\n   }\n \n   FailureCollector init(Map<String, Schema> inputSchemas, FailureCollector failureCollector) {\n-    Map<String, StageKeyInfo> keyInfos = new HashMap<>();\n-    StageKeyInfo prevKeyInfo = null;\n-    for (Map.Entry<String, List<String>> entry : conf.getPerStageJoinKeys().entrySet()) {\n+    validateJoinKeySchemas(inputSchemas, conf.getPerStageJoinKeys(), failureCollector);\n+    joinConfig = new JoinConfig(conf.getInputs());\n+    perStageSelectedFields = conf.getPerStageSelectedFields();\n+    return failureCollector;\n+  }\n+\n+  void validateJoinKeySchemas(Map<String, Schema> inputSchemas, Map<String, List<String>> joinKeys,\n+                              FailureCollector collector) {\n+    perStageJoinKeys = joinKeys;\n+    conf.validateJoinKeySchemas(inputSchemas, joinKeys, collector);\n+\n+    List<Schema> prevSchemaList = null;\n+    for (Map.Entry<String, List<String>> entry : perStageJoinKeys.entrySet()) {\n+      ArrayList<Schema> schemaList = new ArrayList<>();\n       String stageName = entry.getKey();\n-      StageKeyInfo keyInfo = new StageKeyInfo(stageName, inputSchemas.get(stageName),\n-                                              entry.getValue(), failureCollector);\n-      if (prevKeyInfo != null && !prevKeyInfo.getSchema().equals(keyInfo.getSchema())) {\n-        failureCollector.addFailure(\n+\n+      Schema schema = inputSchemas.get(stageName);\n+      if (schema == null) {\n+        // Input schema will be null if the output schema of the previous node is a macro\n+        return;\n+      }\n+\n+      for (String joinKey : entry.getValue()) {\n+        Schema.Field field = schema.getField(joinKey);\n+        if (field == null) {\n+          collector.addFailure(\n+            String.format(\"Join key field '%s' is not present in input stage of '%s'.\", joinKey, stageName), null)\n+            .withConfigProperty(conf.JOIN_KEYS);\n+        }\n+        schemaList.add(field.getSchema());\n+      }\n+      if (prevSchemaList != null && !prevSchemaList.equals(schemaList)) {\n+        collector.addFailure(\n           String.format(\"For stage '%s', Schemas of join keys '%s' are expected to be: '%s', but found: '%s'.\",\n-                        stageName, entry.getValue(), prevKeyInfo.getFieldSchemas(), keyInfo.getFieldSchemas()), null)\n-          .withConfigProperty(JoinerConfig.JOIN_KEYS);\n-      } else {\n-        prevKeyInfo = keyInfo;\n+                        stageName, entry.getValue(), prevSchemaList.toString(), schemaList.toString()), null)\n+          .withConfigProperty(conf.JOIN_KEYS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0OTA0Ng==", "bodyText": "fixed.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397549046", "createdAt": "2020-03-25T00:53:40Z", "author": {"login": "rmstar"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -215,31 +259,57 @@ public StructuredRecord merge(StructuredRecord joinKey, Iterable<JoinElement<Str\n   }\n \n   FailureCollector init(Map<String, Schema> inputSchemas, FailureCollector failureCollector) {\n-    Map<String, StageKeyInfo> keyInfos = new HashMap<>();\n-    StageKeyInfo prevKeyInfo = null;\n-    for (Map.Entry<String, List<String>> entry : conf.getPerStageJoinKeys().entrySet()) {\n+    validateJoinKeySchemas(inputSchemas, conf.getPerStageJoinKeys(), failureCollector);\n+    joinConfig = new JoinConfig(conf.getInputs());\n+    perStageSelectedFields = conf.getPerStageSelectedFields();\n+    return failureCollector;\n+  }\n+\n+  void validateJoinKeySchemas(Map<String, Schema> inputSchemas, Map<String, List<String>> joinKeys,\n+                              FailureCollector collector) {\n+    perStageJoinKeys = joinKeys;\n+    conf.validateJoinKeySchemas(inputSchemas, joinKeys, collector);\n+\n+    List<Schema> prevSchemaList = null;\n+    for (Map.Entry<String, List<String>> entry : perStageJoinKeys.entrySet()) {\n+      ArrayList<Schema> schemaList = new ArrayList<>();\n       String stageName = entry.getKey();\n-      StageKeyInfo keyInfo = new StageKeyInfo(stageName, inputSchemas.get(stageName),\n-                                              entry.getValue(), failureCollector);\n-      if (prevKeyInfo != null && !prevKeyInfo.getSchema().equals(keyInfo.getSchema())) {\n-        failureCollector.addFailure(\n+\n+      Schema schema = inputSchemas.get(stageName);\n+      if (schema == null) {\n+        // Input schema will be null if the output schema of the previous node is a macro\n+        return;\n+      }\n+\n+      for (String joinKey : entry.getValue()) {\n+        Schema.Field field = schema.getField(joinKey);\n+        if (field == null) {\n+          collector.addFailure(\n+            String.format(\"Join key field '%s' is not present in input stage of '%s'.\", joinKey, stageName), null)\n+            .withConfigProperty(conf.JOIN_KEYS);\n+        }\n+        schemaList.add(field.getSchema());\n+      }\n+      if (prevSchemaList != null && !prevSchemaList.equals(schemaList)) {\n+        collector.addFailure(\n           String.format(\"For stage '%s', Schemas of join keys '%s' are expected to be: '%s', but found: '%s'.\",\n-                        stageName, entry.getValue(), prevKeyInfo.getFieldSchemas(), keyInfo.getFieldSchemas()), null)\n-          .withConfigProperty(JoinerConfig.JOIN_KEYS);\n-      } else {\n-        prevKeyInfo = keyInfo;\n+                        stageName, entry.getValue(), prevSchemaList.toString(), schemaList.toString()), null)\n+          .withConfigProperty(conf.JOIN_KEYS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNTI4NQ=="}, "originalCommit": {"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDE5NTQ0OnYy", "diffSide": "RIGHT", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzowNzo1M1rOF7GaJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMDo1Mzo0NFrOF7IeFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNTMwMQ==", "bodyText": "nit: JoinerConfig.JOIN_KEYS", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397515301", "createdAt": "2020-03-24T23:07:53Z", "author": {"login": "CuriousVini"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -215,31 +259,57 @@ public StructuredRecord merge(StructuredRecord joinKey, Iterable<JoinElement<Str\n   }\n \n   FailureCollector init(Map<String, Schema> inputSchemas, FailureCollector failureCollector) {\n-    Map<String, StageKeyInfo> keyInfos = new HashMap<>();\n-    StageKeyInfo prevKeyInfo = null;\n-    for (Map.Entry<String, List<String>> entry : conf.getPerStageJoinKeys().entrySet()) {\n+    validateJoinKeySchemas(inputSchemas, conf.getPerStageJoinKeys(), failureCollector);\n+    joinConfig = new JoinConfig(conf.getInputs());\n+    perStageSelectedFields = conf.getPerStageSelectedFields();\n+    return failureCollector;\n+  }\n+\n+  void validateJoinKeySchemas(Map<String, Schema> inputSchemas, Map<String, List<String>> joinKeys,\n+                              FailureCollector collector) {\n+    perStageJoinKeys = joinKeys;\n+    conf.validateJoinKeySchemas(inputSchemas, joinKeys, collector);\n+\n+    List<Schema> prevSchemaList = null;\n+    for (Map.Entry<String, List<String>> entry : perStageJoinKeys.entrySet()) {\n+      ArrayList<Schema> schemaList = new ArrayList<>();\n       String stageName = entry.getKey();\n-      StageKeyInfo keyInfo = new StageKeyInfo(stageName, inputSchemas.get(stageName),\n-                                              entry.getValue(), failureCollector);\n-      if (prevKeyInfo != null && !prevKeyInfo.getSchema().equals(keyInfo.getSchema())) {\n-        failureCollector.addFailure(\n+\n+      Schema schema = inputSchemas.get(stageName);\n+      if (schema == null) {\n+        // Input schema will be null if the output schema of the previous node is a macro\n+        return;\n+      }\n+\n+      for (String joinKey : entry.getValue()) {\n+        Schema.Field field = schema.getField(joinKey);\n+        if (field == null) {\n+          collector.addFailure(\n+            String.format(\"Join key field '%s' is not present in input stage of '%s'.\", joinKey, stageName), null)\n+            .withConfigProperty(conf.JOIN_KEYS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0OTA3Nw==", "bodyText": "fixed.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397549077", "createdAt": "2020-03-25T00:53:44Z", "author": {"login": "rmstar"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -215,31 +259,57 @@ public StructuredRecord merge(StructuredRecord joinKey, Iterable<JoinElement<Str\n   }\n \n   FailureCollector init(Map<String, Schema> inputSchemas, FailureCollector failureCollector) {\n-    Map<String, StageKeyInfo> keyInfos = new HashMap<>();\n-    StageKeyInfo prevKeyInfo = null;\n-    for (Map.Entry<String, List<String>> entry : conf.getPerStageJoinKeys().entrySet()) {\n+    validateJoinKeySchemas(inputSchemas, conf.getPerStageJoinKeys(), failureCollector);\n+    joinConfig = new JoinConfig(conf.getInputs());\n+    perStageSelectedFields = conf.getPerStageSelectedFields();\n+    return failureCollector;\n+  }\n+\n+  void validateJoinKeySchemas(Map<String, Schema> inputSchemas, Map<String, List<String>> joinKeys,\n+                              FailureCollector collector) {\n+    perStageJoinKeys = joinKeys;\n+    conf.validateJoinKeySchemas(inputSchemas, joinKeys, collector);\n+\n+    List<Schema> prevSchemaList = null;\n+    for (Map.Entry<String, List<String>> entry : perStageJoinKeys.entrySet()) {\n+      ArrayList<Schema> schemaList = new ArrayList<>();\n       String stageName = entry.getKey();\n-      StageKeyInfo keyInfo = new StageKeyInfo(stageName, inputSchemas.get(stageName),\n-                                              entry.getValue(), failureCollector);\n-      if (prevKeyInfo != null && !prevKeyInfo.getSchema().equals(keyInfo.getSchema())) {\n-        failureCollector.addFailure(\n+\n+      Schema schema = inputSchemas.get(stageName);\n+      if (schema == null) {\n+        // Input schema will be null if the output schema of the previous node is a macro\n+        return;\n+      }\n+\n+      for (String joinKey : entry.getValue()) {\n+        Schema.Field field = schema.getField(joinKey);\n+        if (field == null) {\n+          collector.addFailure(\n+            String.format(\"Join key field '%s' is not present in input stage of '%s'.\", joinKey, stageName), null)\n+            .withConfigProperty(conf.JOIN_KEYS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNTMwMQ=="}, "originalCommit": {"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDIwMjAxOnYy", "diffSide": "RIGHT", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/JoinerConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzoxMDozMVrOF7Gd5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMDo1Mzo1N1rOF7IecQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNjI2MA==", "bodyText": "better: return !inputSchemas.isEmpty() && inputSchemas.values().stream().noneMatch(Objects::isNull);", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397516260", "createdAt": "2020-03-24T23:10:31Z", "author": {"login": "CuriousVini"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/JoinerConfig.java", "diffHunk": "@@ -108,11 +121,30 @@ public String getRequiredInputs() {\n     return requiredInputs;\n   }\n \n+  @Nullable\n+  public Schema getOutputSchema(FailureCollector collector) {\n+    try {\n+      return Strings.isNullOrEmpty(schema) ? null : Schema.parseJson(schema);\n+    } catch (IOException e) {\n+      collector.addFailure(\"Invalid schema: \" + e.getMessage(), null).withConfigProperty(OUTPUT_SCHEMA);\n+    }\n+    // if there was an error that was added, it will throw an exception, otherwise, this statement will not be executed\n+    throw collector.getOrThrowException();\n+  }\n+\n+  public boolean inputSchemasAvailable(Map<String, Schema> inputSchemas) {\n+    // TODO: Remove isEmpty() check when CDAP-16351 is fixed\n+    return !inputSchemas.isEmpty() && !inputSchemas.values().stream().anyMatch(v -> v == null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNjM1OA==", "bodyText": "the method can be package private", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397516358", "createdAt": "2020-03-24T23:10:51Z", "author": {"login": "CuriousVini"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/JoinerConfig.java", "diffHunk": "@@ -108,11 +121,30 @@ public String getRequiredInputs() {\n     return requiredInputs;\n   }\n \n+  @Nullable\n+  public Schema getOutputSchema(FailureCollector collector) {\n+    try {\n+      return Strings.isNullOrEmpty(schema) ? null : Schema.parseJson(schema);\n+    } catch (IOException e) {\n+      collector.addFailure(\"Invalid schema: \" + e.getMessage(), null).withConfigProperty(OUTPUT_SCHEMA);\n+    }\n+    // if there was an error that was added, it will throw an exception, otherwise, this statement will not be executed\n+    throw collector.getOrThrowException();\n+  }\n+\n+  public boolean inputSchemasAvailable(Map<String, Schema> inputSchemas) {\n+    // TODO: Remove isEmpty() check when CDAP-16351 is fixed\n+    return !inputSchemas.isEmpty() && !inputSchemas.values().stream().anyMatch(v -> v == null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNjI2MA=="}, "originalCommit": {"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0OTE2OQ==", "bodyText": "fixed.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397549169", "createdAt": "2020-03-25T00:53:57Z", "author": {"login": "rmstar"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/JoinerConfig.java", "diffHunk": "@@ -108,11 +121,30 @@ public String getRequiredInputs() {\n     return requiredInputs;\n   }\n \n+  @Nullable\n+  public Schema getOutputSchema(FailureCollector collector) {\n+    try {\n+      return Strings.isNullOrEmpty(schema) ? null : Schema.parseJson(schema);\n+    } catch (IOException e) {\n+      collector.addFailure(\"Invalid schema: \" + e.getMessage(), null).withConfigProperty(OUTPUT_SCHEMA);\n+    }\n+    // if there was an error that was added, it will throw an exception, otherwise, this statement will not be executed\n+    throw collector.getOrThrowException();\n+  }\n+\n+  public boolean inputSchemasAvailable(Map<String, Schema> inputSchemas) {\n+    // TODO: Remove isEmpty() check when CDAP-16351 is fixed\n+    return !inputSchemas.isEmpty() && !inputSchemas.values().stream().anyMatch(v -> v == null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNjI2MA=="}, "originalCommit": {"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDI1MDExOnYy", "diffSide": "RIGHT", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzozMDo1OVrOF7G6TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMTowNDoyNFrOF7IpzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMzUzMw==", "bodyText": "!inputSchemas.isEmpty()  - this is same check as inputSchemasAvailable right?", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397523533", "createdAt": "2020-03-24T23:30:59Z", "author": {"login": "CuriousVini"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -477,7 +479,7 @@ public String toString() {\n \n   private void validateRequiredInputs(Map<String, Schema> inputSchemas, FailureCollector collector) {\n     for (String requiredInput : conf.getInputs()) {\n-      if (!inputSchemas.containsKey(requiredInput)) {\n+      if (!inputSchemas.isEmpty() && !inputSchemas.containsKey(requiredInput)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6"}, "originalPosition": 334}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1MDExMw==", "bodyText": "It's a bit different: inputSchemasAvailable returns true if:\n\ninputSchemas is not empty, and\nNone of the values (i.e. schemas) in inputSchemas is null.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397550113", "createdAt": "2020-03-25T00:57:18Z", "author": {"login": "rmstar"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -477,7 +479,7 @@ public String toString() {\n \n   private void validateRequiredInputs(Map<String, Schema> inputSchemas, FailureCollector collector) {\n     for (String requiredInput : conf.getInputs()) {\n-      if (!inputSchemas.containsKey(requiredInput)) {\n+      if (!inputSchemas.isEmpty() && !inputSchemas.containsKey(requiredInput)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMzUzMw=="}, "originalCommit": {"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6"}, "originalPosition": 334}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1MjA3Ng==", "bodyText": "I think we can use inputSchemasAvailable here like you suggested. will fix.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397552076", "createdAt": "2020-03-25T01:04:24Z", "author": {"login": "rmstar"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -477,7 +479,7 @@ public String toString() {\n \n   private void validateRequiredInputs(Map<String, Schema> inputSchemas, FailureCollector collector) {\n     for (String requiredInput : conf.getInputs()) {\n-      if (!inputSchemas.containsKey(requiredInput)) {\n+      if (!inputSchemas.isEmpty() && !inputSchemas.containsKey(requiredInput)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMzUzMw=="}, "originalCommit": {"oid": "c08e21e077b35a9dac3203d08d51a5ec47ea29a6"}, "originalPosition": 334}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDc2ODQ5OnYy", "diffSide": "RIGHT", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDoxODoyMlrOF7Lp1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDo1NzowNlrOF7MKUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwMTIzNg==", "bodyText": "nit: extra line", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397601236", "createdAt": "2020-03-25T04:18:22Z", "author": {"login": "CuriousVini"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -68,11 +64,13 @@\n   static final String IDENTITY_OPERATION_DESCRIPTION = \"Unchanged as part of a join\";\n   static final String RENAME_OPERATION_DESCRIPTION = \"Renamed as a part of a join\";\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dc61e037c1e02e154e90831a7f8a3f6027629f7"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwOTU1NA==", "bodyText": "fixed", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397609554", "createdAt": "2020-03-25T04:57:06Z", "author": {"login": "rmstar"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -68,11 +64,13 @@\n   static final String IDENTITY_OPERATION_DESCRIPTION = \"Unchanged as part of a join\";\n   static final String RENAME_OPERATION_DESCRIPTION = \"Renamed as a part of a join\";\n \n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwMTIzNg=="}, "originalCommit": {"oid": "2dc61e037c1e02e154e90831a7f8a3f6027629f7"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDgwMTY4OnYy", "diffSide": "RIGHT", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDo0MDo1N1rOF7L8og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDo1NzoxM1rOF7MKZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwNjA1MA==", "bodyText": "nit: indentation", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397606050", "createdAt": "2020-03-25T04:40:57Z", "author": {"login": "CuriousVini"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -214,32 +257,59 @@ public StructuredRecord merge(StructuredRecord joinKey, Iterable<JoinElement<Str\n     return outRecordBuilder.build();\n   }\n \n+  @VisibleForTesting\n   FailureCollector init(Map<String, Schema> inputSchemas, FailureCollector failureCollector) {\n-    Map<String, StageKeyInfo> keyInfos = new HashMap<>();\n-    StageKeyInfo prevKeyInfo = null;\n-    for (Map.Entry<String, List<String>> entry : conf.getPerStageJoinKeys().entrySet()) {\n+    validateJoinKeySchemas(inputSchemas, conf.getPerStageJoinKeys(), failureCollector);\n+    joinConfig = new JoinConfig(conf.getInputs());\n+    perStageSelectedFields = conf.getPerStageSelectedFields();\n+    return failureCollector;\n+  }\n+\n+  private void validateJoinKeySchemas(Map<String, Schema> inputSchemas, Map<String, List<String>> joinKeys,\n+                              FailureCollector collector) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dc61e037c1e02e154e90831a7f8a3f6027629f7"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwOTU3Mw==", "bodyText": "fixed", "url": "https://github.com/cdapio/hydrator-plugins/pull/1045#discussion_r397609573", "createdAt": "2020-03-25T04:57:13Z", "author": {"login": "rmstar"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/joiner/Joiner.java", "diffHunk": "@@ -214,32 +257,59 @@ public StructuredRecord merge(StructuredRecord joinKey, Iterable<JoinElement<Str\n     return outRecordBuilder.build();\n   }\n \n+  @VisibleForTesting\n   FailureCollector init(Map<String, Schema> inputSchemas, FailureCollector failureCollector) {\n-    Map<String, StageKeyInfo> keyInfos = new HashMap<>();\n-    StageKeyInfo prevKeyInfo = null;\n-    for (Map.Entry<String, List<String>> entry : conf.getPerStageJoinKeys().entrySet()) {\n+    validateJoinKeySchemas(inputSchemas, conf.getPerStageJoinKeys(), failureCollector);\n+    joinConfig = new JoinConfig(conf.getInputs());\n+    perStageSelectedFields = conf.getPerStageSelectedFields();\n+    return failureCollector;\n+  }\n+\n+  private void validateJoinKeySchemas(Map<String, Schema> inputSchemas, Map<String, List<String>> joinKeys,\n+                              FailureCollector collector) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwNjA1MA=="}, "originalCommit": {"oid": "2dc61e037c1e02e154e90831a7f8a3f6027629f7"}, "originalPosition": 158}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2500, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}