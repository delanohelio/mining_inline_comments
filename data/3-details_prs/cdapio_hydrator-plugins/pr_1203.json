{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNjEyOTgw", "number": 1203, "title": "Schema Auto-detection", "bodyText": "added: Schema Auto-detection support for delimited formats\nadded: Schema Auto-detection support for Avro format\nadded: Schema Auto-detection support for Parquet format\nadded: Get Schema button to File source widget\nJIRA: https://issues.cask.co/browse/PLUGIN-353", "createdAt": "2020-08-21T12:47:26Z", "url": "https://github.com/cdapio/hydrator-plugins/pull/1203", "merged": true, "mergeCommit": {"oid": "bf88239a267c098ef08dc31d94f20733373c3c14"}, "closed": true, "closedAt": "2020-09-30T17:14:37Z", "author": {"login": "ailegion"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCIEFRgFqTQ3MzgwMTIzOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKCFjMgBqjM3ODE3MzAxMDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczODAxMjM5", "url": "https://github.com/cdapio/hydrator-plugins/pull/1203#pullrequestreview-473801239", "createdAt": "2020-08-24T19:40:06Z", "commit": {"oid": "e7cb4f400c213120e75acc88ecc970dd7d2a5466"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxOTo0MDowNlrOHFzlaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxOTo0ODozN1rOHFz1vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg1MDA4OA==", "bodyText": "format context should be nullable", "url": "https://github.com/cdapio/hydrator-plugins/pull/1203#discussion_r475850088", "createdAt": "2020-08-24T19:40:06Z", "author": {"login": "CuriousVini"}, "path": "format-delimited/src/main/java/io/cdap/plugin/format/delimited/input/DelimitedConfig.java", "diffHunk": "@@ -49,4 +66,103 @@\n   public boolean getSkipHeader() {\n     return skipHeader == null ? false : skipHeader;\n   }\n+\n+  @Nullable\n+  @Override\n+  public Schema getSchema() {\n+    if (containsMacro(NAME_SCHEMA)) {\n+      return null;\n+    }\n+    if (schema == null || schema.equals(\"\")) {\n+      try {\n+        return getDefaultSchema(null);\n+      } catch (IOException e) {\n+        throw new IllegalArgumentException(\"Invalid schema: \" + e.getMessage(), e);\n+      }\n+    }\n+    return super.getSchema();\n+  }\n+\n+  /**\n+   * Reads delimiter from config\n+   * If not available returns default delimiter based on format\n+   * @return delimiter\n+   */\n+  private String getDefaultDelimiter() {\n+    String delimiter = getProperties().getProperties().get(DELIMITER);\n+    if (delimiter != null) {\n+      return delimiter;\n+    }\n+    final String format = getProperties().getProperties().get(FORMAT);\n+    switch (format) {\n+      case \"tsv\":\n+        return \"\\t\";\n+      default:\n+        return \",\";\n+    }\n+  }\n+\n+  /**\n+   * Extract schema from file\n+   *\n+   * @param context {@link FormatContext}\n+   * @return {@link Schema}\n+   * @throws IOException raised when error occurs during schema extraction\n+   */\n+  public Schema getDefaultSchema(FormatContext context) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7cb4f400c213120e75acc88ecc970dd7d2a5466"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg1Mzk5Mw==", "bodyText": "what would this return?", "url": "https://github.com/cdapio/hydrator-plugins/pull/1203#discussion_r475853993", "createdAt": "2020-08-24T19:48:02Z", "author": {"login": "CuriousVini"}, "path": "format-avro/src/main/java/io/cdap/plugin/format/avro/input/AvroInputFormatProvider.java", "diffHunk": "@@ -56,4 +73,78 @@ protected void addFormatProperties(Map<String, String> properties) {\n       properties.put(\"avro.schema.input.key\", schema.toString());\n     }\n   }\n+\n+  /**\n+   * Common config for Avro format\n+   */\n+  public static class Conf extends PathTrackingConfig {\n+\n+    @Macro\n+    @Nullable\n+    @Description(NAME_SCHEMA)\n+    public String schema;\n+\n+  }\n+\n+  @Nullable\n+  @Override\n+  public Schema getSchema(FormatContext context) {\n+    if (conf.containsMacro(\"schema\")) {\n+      return super.getSchema(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7cb4f400c213120e75acc88ecc970dd7d2a5466"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg1NDA5OQ==", "bodyText": "should be annotated as nullable", "url": "https://github.com/cdapio/hydrator-plugins/pull/1203#discussion_r475854099", "createdAt": "2020-08-24T19:48:16Z", "author": {"login": "CuriousVini"}, "path": "format-avro/src/main/java/io/cdap/plugin/format/avro/input/AvroInputFormatProvider.java", "diffHunk": "@@ -56,4 +73,78 @@ protected void addFormatProperties(Map<String, String> properties) {\n       properties.put(\"avro.schema.input.key\", schema.toString());\n     }\n   }\n+\n+  /**\n+   * Common config for Avro format\n+   */\n+  public static class Conf extends PathTrackingConfig {\n+\n+    @Macro\n+    @Nullable\n+    @Description(NAME_SCHEMA)\n+    public String schema;\n+\n+  }\n+\n+  @Nullable\n+  @Override\n+  public Schema getSchema(FormatContext context) {\n+    if (conf.containsMacro(\"schema\")) {\n+      return super.getSchema(context);\n+    }\n+    if (!Strings.isNullOrEmpty(conf.schema)) {\n+      return super.getSchema(context);\n+    }\n+    String filePath = conf.getProperties().getProperties().getOrDefault(\"path\", null);\n+    if (filePath == null) {\n+      return super.getSchema(context);\n+    }\n+    try {\n+      return getDefaultSchema(context);\n+    } catch (IOException e) {\n+      throw new IllegalArgumentException(\"Invalid schema: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  /**\n+   * Extract schema from file\n+   *\n+   * @param context {@link FormatContext}\n+   * @return {@link Schema}\n+   * @throws IOException raised when error occurs during schema extraction\n+   */\n+  public Schema getDefaultSchema(FormatContext context) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7cb4f400c213120e75acc88ecc970dd7d2a5466"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg1NDI2OA==", "bodyText": "nit: can be in one line", "url": "https://github.com/cdapio/hydrator-plugins/pull/1203#discussion_r475854268", "createdAt": "2020-08-24T19:48:37Z", "author": {"login": "CuriousVini"}, "path": "format-avro/src/main/java/io/cdap/plugin/format/avro/input/AvroInputFormatProvider.java", "diffHunk": "@@ -56,4 +73,78 @@ protected void addFormatProperties(Map<String, String> properties) {\n       properties.put(\"avro.schema.input.key\", schema.toString());\n     }\n   }\n+\n+  /**\n+   * Common config for Avro format\n+   */\n+  public static class Conf extends PathTrackingConfig {\n+\n+    @Macro\n+    @Nullable\n+    @Description(NAME_SCHEMA)\n+    public String schema;\n+\n+  }\n+\n+  @Nullable\n+  @Override\n+  public Schema getSchema(FormatContext context) {\n+    if (conf.containsMacro(\"schema\")) {\n+      return super.getSchema(context);\n+    }\n+    if (!Strings.isNullOrEmpty(conf.schema)) {\n+      return super.getSchema(context);\n+    }\n+    String filePath = conf.getProperties().getProperties().getOrDefault(\"path\", null);\n+    if (filePath == null) {\n+      return super.getSchema(context);\n+    }\n+    try {\n+      return getDefaultSchema(context);\n+    } catch (IOException e) {\n+      throw new IllegalArgumentException(\"Invalid schema: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  /**\n+   * Extract schema from file\n+   *\n+   * @param context {@link FormatContext}\n+   * @return {@link Schema}\n+   * @throws IOException raised when error occurs during schema extraction\n+   */\n+  public Schema getDefaultSchema(FormatContext context) throws IOException {\n+    String filePath = conf.getProperties().getProperties().getOrDefault(\"path\", null);\n+    SeekableInput seekableInput = null;\n+    FileReader<GenericRecord> dataFileReader = null;\n+    try {\n+      Job job = JobUtils.createInstance();\n+      Configuration hconf = job.getConfiguration();\n+      // set entries here, before FileSystem is used\n+      for (Map.Entry<String, String> entry : conf.getFileSystemProperties().entrySet()) {\n+        hconf.set(entry.getKey(), entry.getValue());\n+      }\n+      Path file = conf.getFilePathForSchemaGeneration(filePath, NAME, hconf);\n+      DatumReader<GenericRecord> dataReader = new GenericDatumReader<>();\n+      seekableInput = new FsInput(file, hconf);\n+      dataFileReader = DataFileReader\n+        .openReader(seekableInput, dataReader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7cb4f400c213120e75acc88ecc970dd7d2a5466"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2MDM4NTM0", "url": "https://github.com/cdapio/hydrator-plugins/pull/1203#pullrequestreview-476038534", "createdAt": "2020-08-26T23:03:15Z", "commit": {"oid": "e7cb4f400c213120e75acc88ecc970dd7d2a5466"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzowMzoxNlrOHHhMhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzowMzoxNlrOHHhMhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY0NTk1OA==", "bodyText": "@bdmogal  This schema generation goes a long way in auto detecting the column names. But we may have to extend this to infer other types as well.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1203#discussion_r477645958", "createdAt": "2020-08-26T23:03:16Z", "author": {"login": "meetdestiny"}, "path": "format-delimited/src/main/java/io/cdap/plugin/format/delimited/input/DelimitedConfig.java", "diffHunk": "@@ -49,4 +66,103 @@\n   public boolean getSkipHeader() {\n     return skipHeader == null ? false : skipHeader;\n   }\n+\n+  @Nullable\n+  @Override\n+  public Schema getSchema() {\n+    if (containsMacro(NAME_SCHEMA)) {\n+      return null;\n+    }\n+    if (schema == null || schema.equals(\"\")) {\n+      try {\n+        return getDefaultSchema(null);\n+      } catch (IOException e) {\n+        throw new IllegalArgumentException(\"Invalid schema: \" + e.getMessage(), e);\n+      }\n+    }\n+    return super.getSchema();\n+  }\n+\n+  /**\n+   * Reads delimiter from config\n+   * If not available returns default delimiter based on format\n+   * @return delimiter\n+   */\n+  private String getDefaultDelimiter() {\n+    String delimiter = getProperties().getProperties().get(DELIMITER);\n+    if (delimiter != null) {\n+      return delimiter;\n+    }\n+    final String format = getProperties().getProperties().get(FORMAT);\n+    switch (format) {\n+      case \"tsv\":\n+        return \"\\t\";\n+      default:\n+        return \",\";\n+    }\n+  }\n+\n+  /**\n+   * Extract schema from file\n+   *\n+   * @param context {@link FormatContext}\n+   * @return {@link Schema}\n+   * @throws IOException raised when error occurs during schema extraction\n+   */\n+  public Schema getDefaultSchema(FormatContext context) throws IOException {\n+    final String format = getProperties().getProperties().getOrDefault(FORMAT, \"delimited\");\n+    String delimiter = getProperties().getProperties().get(DELIMITER);\n+    if (format.equals(\"delimited\") && Strings.isNullOrEmpty(delimiter)) {\n+      throw new IllegalArgumentException(\"Delimiter is required when format is set to 'delimited'.\");\n+    }\n+    List<Schema.Field> fields = new ArrayList<>();\n+    String path = getProperties().getProperties().getOrDefault(\n+      \"path\", \"\"\n+    );\n+\n+    Job job = JobUtils.createInstance();\n+    Configuration conf = job.getConfiguration();\n+    // set entries here, before FileSystem is used\n+    for (Map.Entry<String, String> entry : getFileSystemProperties().entrySet()) {\n+      conf.set(entry.getKey(), entry.getValue());\n+    }\n+    FSDataInputStream input = null;\n+    BufferedReader bufferedReader = null;\n+    String line = null;\n+    try {\n+      final Path file = getFilePathForSchemaGeneration(path,\n+                                                       format.equals(\"delimited\") ? null : format, conf);\n+      final FileSystem fileSystem = FileSystem.get(file.toUri(), conf);\n+      input = fileSystem.open(file);\n+      bufferedReader = new BufferedReader(new InputStreamReader(input));\n+      line = bufferedReader.readLine();\n+      if (line == null) {\n+        return null;\n+      }\n+    } finally {\n+      if (bufferedReader != null) {\n+        bufferedReader.close();\n+      }\n+      if (input != null) {\n+        input.close();\n+      }\n+    }\n+    String[] columns = line.split(getDefaultDelimiter());\n+    int count = 1;\n+    for (String column : columns) {\n+      if (getSkipHeader()) {\n+        fields.add(Schema.Field.of(column, Schema.of(Schema.Type.STRING)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7cb4f400c213120e75acc88ecc970dd7d2a5466"}, "originalPosition": 129}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMDcxNTg4", "url": "https://github.com/cdapio/hydrator-plugins/pull/1203#pullrequestreview-490071588", "createdAt": "2020-09-16T22:51:52Z", "commit": {"oid": "edad506e4e5f2dc7e222be4f744f62e68117173a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a929cdb8caf4c77573950dee09928ce359fa55a8", "author": {"user": {"login": "ailegion", "name": "Ajdin Idrizi"}}, "url": "https://github.com/cdapio/hydrator-plugins/commit/a929cdb8caf4c77573950dee09928ce359fa55a8", "committedDate": "2020-09-18T09:21:50Z", "message": "added: SchemaAutodetection support for delimited formats"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "edad506e4e5f2dc7e222be4f744f62e68117173a", "author": {"user": {"login": "ailegion", "name": "Ajdin Idrizi"}}, "url": "https://github.com/cdapio/hydrator-plugins/commit/edad506e4e5f2dc7e222be4f744f62e68117173a", "committedDate": "2020-09-03T08:55:03Z", "message": "reverted: getSchema nullable annotation\nupdated: getDefaultSchema nullable annotation per PR review"}, "afterCommit": {"oid": "a929cdb8caf4c77573950dee09928ce359fa55a8", "author": {"user": {"login": "ailegion", "name": "Ajdin Idrizi"}}, "url": "https://github.com/cdapio/hydrator-plugins/commit/a929cdb8caf4c77573950dee09928ce359fa55a8", "committedDate": "2020-09-18T09:21:50Z", "message": "added: SchemaAutodetection support for delimited formats"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1483, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}