{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMjc1NTMy", "number": 1250, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTozNjoxNlrOE87o9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzowMjo1M1rOE8-zfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzI3MTU5OnYy", "diffSide": "RIGHT", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/source/FTPBatchSource.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTozNjoxNlrOH5WG9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTozODo0N1rOH6TNcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5MzEwOA==", "bodyText": "No need for this if condition. if fileSystemProperties == null && !authContainsSpecialCharacters(), we'll return empty hashmap at the end of the function.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1250#discussion_r529893108", "createdAt": "2020-11-24T21:36:16Z", "author": {"login": "rmstar"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/source/FTPBatchSource.java", "diffHunk": "@@ -181,15 +212,63 @@ public Schema getSchema() {\n       return SCHEMA;\n     }\n \n+    public String extractPasswordFromUrl() {\n+      int getLastIndexOfAtSign = path.lastIndexOf(\"@\");\n+      String authentication = path.substring(0, getLastIndexOfAtSign);\n+      return authentication.substring(authentication.lastIndexOf(\":\") + 1);\n+    }\n+\n+    public boolean authContainsSpecialCharacters() {\n+      Pattern regularPasswordWithoutSpecialCharacters = Pattern.compile(\"[^A-Za-z0-9]\");\n+      Matcher regularPassword = regularPasswordWithoutSpecialCharacters.matcher(extractPasswordFromUrl());\n+      return !regularPassword.matches();\n+    }\n+\n     Map<String, String> getFileSystemProperties() {\n-      if (fileSystemProperties == null) {\n+      if (fileSystemProperties == null && !authContainsSpecialCharacters()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9f420f82502ddf63f98ac7f61503f3d7639c5fe"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1NzAyNQ==", "bodyText": "I think we need this condition because when authentication in url contains special characters but File System Properties are empty, we'll return always an empty hashmap at the end of the function but this doesn't solve our problem.\nInstead, we need to extract the necessary parameters from url (host, port, username, password) when this scenario happens and add these parameters as File System Properties in order to solve the issue.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1250#discussion_r530257025", "createdAt": "2020-11-25T10:15:11Z", "author": {"login": "flakrimjusufi"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/source/FTPBatchSource.java", "diffHunk": "@@ -181,15 +212,63 @@ public Schema getSchema() {\n       return SCHEMA;\n     }\n \n+    public String extractPasswordFromUrl() {\n+      int getLastIndexOfAtSign = path.lastIndexOf(\"@\");\n+      String authentication = path.substring(0, getLastIndexOfAtSign);\n+      return authentication.substring(authentication.lastIndexOf(\":\") + 1);\n+    }\n+\n+    public boolean authContainsSpecialCharacters() {\n+      Pattern regularPasswordWithoutSpecialCharacters = Pattern.compile(\"[^A-Za-z0-9]\");\n+      Matcher regularPassword = regularPasswordWithoutSpecialCharacters.matcher(extractPasswordFromUrl());\n+      return !regularPassword.matches();\n+    }\n+\n     Map<String, String> getFileSystemProperties() {\n-      if (fileSystemProperties == null) {\n+      if (fileSystemProperties == null && !authContainsSpecialCharacters()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5MzEwOA=="}, "originalCommit": {"oid": "f9f420f82502ddf63f98ac7f61503f3d7639c5fe"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5MDQ3Nw==", "bodyText": "If  authentication in url contains special characters but File System Properties are empty, we will go into the if condition in line 237 and update fileSystemPropertiesMap.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1250#discussion_r530590477", "createdAt": "2020-11-25T19:09:32Z", "author": {"login": "rmstar"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/source/FTPBatchSource.java", "diffHunk": "@@ -181,15 +212,63 @@ public Schema getSchema() {\n       return SCHEMA;\n     }\n \n+    public String extractPasswordFromUrl() {\n+      int getLastIndexOfAtSign = path.lastIndexOf(\"@\");\n+      String authentication = path.substring(0, getLastIndexOfAtSign);\n+      return authentication.substring(authentication.lastIndexOf(\":\") + 1);\n+    }\n+\n+    public boolean authContainsSpecialCharacters() {\n+      Pattern regularPasswordWithoutSpecialCharacters = Pattern.compile(\"[^A-Za-z0-9]\");\n+      Matcher regularPassword = regularPasswordWithoutSpecialCharacters.matcher(extractPasswordFromUrl());\n+      return !regularPassword.matches();\n+    }\n+\n     Map<String, String> getFileSystemProperties() {\n-      if (fileSystemProperties == null) {\n+      if (fileSystemProperties == null && !authContainsSpecialCharacters()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5MzEwOA=="}, "originalCommit": {"oid": "f9f420f82502ddf63f98ac7f61503f3d7639c5fe"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg5NDE5NQ==", "bodyText": "You're right. Now I got your point. We don't need that if condition. I followed your suggestion and tested the scenarios after removing the condition and everything is working okay.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1250#discussion_r530894195", "createdAt": "2020-11-26T09:38:47Z", "author": {"login": "flakrimjusufi"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/source/FTPBatchSource.java", "diffHunk": "@@ -181,15 +212,63 @@ public Schema getSchema() {\n       return SCHEMA;\n     }\n \n+    public String extractPasswordFromUrl() {\n+      int getLastIndexOfAtSign = path.lastIndexOf(\"@\");\n+      String authentication = path.substring(0, getLastIndexOfAtSign);\n+      return authentication.substring(authentication.lastIndexOf(\":\") + 1);\n+    }\n+\n+    public boolean authContainsSpecialCharacters() {\n+      Pattern regularPasswordWithoutSpecialCharacters = Pattern.compile(\"[^A-Za-z0-9]\");\n+      Matcher regularPassword = regularPasswordWithoutSpecialCharacters.matcher(extractPasswordFromUrl());\n+      return !regularPassword.matches();\n+    }\n+\n     Map<String, String> getFileSystemProperties() {\n-      if (fileSystemProperties == null) {\n+      if (fileSystemProperties == null && !authContainsSpecialCharacters()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5MzEwOA=="}, "originalCommit": {"oid": "f9f420f82502ddf63f98ac7f61503f3d7639c5fe"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzcwMjIxOnYy", "diffSide": "RIGHT", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/source/FTPBatchSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjo0ODozM1rOH5aZVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDoyNDoyOVrOH5ssfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2MzM0OQ==", "bodyText": "add comment indicating what the uri looks like", "url": "https://github.com/cdapio/hydrator-plugins/pull/1250#discussion_r529963349", "createdAt": "2020-11-24T22:48:33Z", "author": {"login": "rmstar"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/source/FTPBatchSource.java", "diffHunk": "@@ -181,15 +212,63 @@ public Schema getSchema() {\n       return SCHEMA;\n     }\n \n+    public String extractPasswordFromUrl() {\n+      int getLastIndexOfAtSign = path.lastIndexOf(\"@\");\n+      String authentication = path.substring(0, getLastIndexOfAtSign);\n+      return authentication.substring(authentication.lastIndexOf(\":\") + 1);\n+    }\n+\n+    public boolean authContainsSpecialCharacters() {\n+      Pattern regularPasswordWithoutSpecialCharacters = Pattern.compile(\"[^A-Za-z0-9]\");\n+      Matcher regularPassword = regularPasswordWithoutSpecialCharacters.matcher(extractPasswordFromUrl());\n+      return !regularPassword.matches();\n+    }\n+\n     Map<String, String> getFileSystemProperties() {\n-      if (fileSystemProperties == null) {\n+      if (fileSystemProperties == null && !authContainsSpecialCharacters()) {\n         return new HashMap<>();\n       }\n+      HashMap<String, String> fileSystemPropertiesMap = new HashMap<>();\n+      if (fileSystemProperties != null) {\n+        fileSystemPropertiesMap.putAll(GSON.fromJson(fileSystemProperties, MAP_STRING_STRING_TYPE));\n+      }\n+\n       try {\n-        return GSON.fromJson(fileSystemProperties, MAP_STRING_STRING_TYPE);\n+        if (authContainsSpecialCharacters()) {\n+          Path urlInfo;\n+          String extractedPassword = extractPasswordFromUrl();\n+          String encodedPassword = URLEncoder.encode(extractedPassword);\n+          String validatePath = path.replace(extractedPassword, encodedPassword);\n+          try {\n+            urlInfo = new Path(validatePath);\n+          } catch (Exception e) {\n+            throw new IllegalArgumentException(String.format(\"Unable to parse url: %s %s\", e.getMessage(), e));\n+          }\n+          int port = urlInfo.toUri().getPort();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9f420f82502ddf63f98ac7f61503f3d7639c5fe"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI2MzE2NA==", "bodyText": "For Example:\nBefore encoding:\nftp://kimi:42@67]gfuss@192.168.0.179:21/kimi-look-here.txt\nThis will throw an IllegalArgumentException because of invalid characters in password.\nAfter encoding:\nftp://kimi:42%4067%5Dgfuss@192.168.0.179:21/kimi-look-here.txt\nThe Path (org.apache.hadoop.fs.Path) will be able to parse the url.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1250#discussion_r530263164", "createdAt": "2020-11-25T10:24:29Z", "author": {"login": "flakrimjusufi"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/source/FTPBatchSource.java", "diffHunk": "@@ -181,15 +212,63 @@ public Schema getSchema() {\n       return SCHEMA;\n     }\n \n+    public String extractPasswordFromUrl() {\n+      int getLastIndexOfAtSign = path.lastIndexOf(\"@\");\n+      String authentication = path.substring(0, getLastIndexOfAtSign);\n+      return authentication.substring(authentication.lastIndexOf(\":\") + 1);\n+    }\n+\n+    public boolean authContainsSpecialCharacters() {\n+      Pattern regularPasswordWithoutSpecialCharacters = Pattern.compile(\"[^A-Za-z0-9]\");\n+      Matcher regularPassword = regularPasswordWithoutSpecialCharacters.matcher(extractPasswordFromUrl());\n+      return !regularPassword.matches();\n+    }\n+\n     Map<String, String> getFileSystemProperties() {\n-      if (fileSystemProperties == null) {\n+      if (fileSystemProperties == null && !authContainsSpecialCharacters()) {\n         return new HashMap<>();\n       }\n+      HashMap<String, String> fileSystemPropertiesMap = new HashMap<>();\n+      if (fileSystemProperties != null) {\n+        fileSystemPropertiesMap.putAll(GSON.fromJson(fileSystemProperties, MAP_STRING_STRING_TYPE));\n+      }\n+\n       try {\n-        return GSON.fromJson(fileSystemProperties, MAP_STRING_STRING_TYPE);\n+        if (authContainsSpecialCharacters()) {\n+          Path urlInfo;\n+          String extractedPassword = extractPasswordFromUrl();\n+          String encodedPassword = URLEncoder.encode(extractedPassword);\n+          String validatePath = path.replace(extractedPassword, encodedPassword);\n+          try {\n+            urlInfo = new Path(validatePath);\n+          } catch (Exception e) {\n+            throw new IllegalArgumentException(String.format(\"Unable to parse url: %s %s\", e.getMessage(), e));\n+          }\n+          int port = urlInfo.toUri().getPort();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2MzM0OQ=="}, "originalCommit": {"oid": "f9f420f82502ddf63f98ac7f61503f3d7639c5fe"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzcyMzE4OnYy", "diffSide": "RIGHT", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/source/FTPBatchSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjo1MTo1NFrOH5anEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDoxNToxOVrOH5sU6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2Njg2Ng==", "bodyText": "Does this work as expected when  urlInfo.toUri().getPort() returns -1, i.e. port is undefined ?", "url": "https://github.com/cdapio/hydrator-plugins/pull/1250#discussion_r529966866", "createdAt": "2020-11-24T22:51:54Z", "author": {"login": "rmstar"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/source/FTPBatchSource.java", "diffHunk": "@@ -181,15 +212,63 @@ public Schema getSchema() {\n       return SCHEMA;\n     }\n \n+    public String extractPasswordFromUrl() {\n+      int getLastIndexOfAtSign = path.lastIndexOf(\"@\");\n+      String authentication = path.substring(0, getLastIndexOfAtSign);\n+      return authentication.substring(authentication.lastIndexOf(\":\") + 1);\n+    }\n+\n+    public boolean authContainsSpecialCharacters() {\n+      Pattern regularPasswordWithoutSpecialCharacters = Pattern.compile(\"[^A-Za-z0-9]\");\n+      Matcher regularPassword = regularPasswordWithoutSpecialCharacters.matcher(extractPasswordFromUrl());\n+      return !regularPassword.matches();\n+    }\n+\n     Map<String, String> getFileSystemProperties() {\n-      if (fileSystemProperties == null) {\n+      if (fileSystemProperties == null && !authContainsSpecialCharacters()) {\n         return new HashMap<>();\n       }\n+      HashMap<String, String> fileSystemPropertiesMap = new HashMap<>();\n+      if (fileSystemProperties != null) {\n+        fileSystemPropertiesMap.putAll(GSON.fromJson(fileSystemProperties, MAP_STRING_STRING_TYPE));\n+      }\n+\n       try {\n-        return GSON.fromJson(fileSystemProperties, MAP_STRING_STRING_TYPE);\n+        if (authContainsSpecialCharacters()) {\n+          Path urlInfo;\n+          String extractedPassword = extractPasswordFromUrl();\n+          String encodedPassword = URLEncoder.encode(extractedPassword);\n+          String validatePath = path.replace(extractedPassword, encodedPassword);\n+          try {\n+            urlInfo = new Path(validatePath);\n+          } catch (Exception e) {\n+            throw new IllegalArgumentException(String.format(\"Unable to parse url: %s %s\", e.getMessage(), e));\n+          }\n+          int port = urlInfo.toUri().getPort();\n+          String host = urlInfo.toUri().getAuthority().substring(urlInfo.toUri().getAuthority().lastIndexOf(\"@\") + 1);\n+          String user = urlInfo.toUri().getAuthority().split(\":\")[0];\n+          if (urlInfo.toUri().getScheme().equals(FTP_PROTOCOL)) {\n+            port = (port == -1) ? DEFAULT_FTP_PORT : port;\n+            String cleanHostFTP = host.replace(\":\" + port, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9f420f82502ddf63f98ac7f61503f3d7639c5fe"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1NzEzMA==", "bodyText": "In case when urlInfo.toUri().getPort() returns -1 or undefined we add the default FTP/SFTP port. This is how it's required in FTP File System and we've followed the same pattern.\nThis works as expected. After setting up the default port we are able to process what follows.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1250#discussion_r530257130", "createdAt": "2020-11-25T10:15:19Z", "author": {"login": "flakrimjusufi"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/source/FTPBatchSource.java", "diffHunk": "@@ -181,15 +212,63 @@ public Schema getSchema() {\n       return SCHEMA;\n     }\n \n+    public String extractPasswordFromUrl() {\n+      int getLastIndexOfAtSign = path.lastIndexOf(\"@\");\n+      String authentication = path.substring(0, getLastIndexOfAtSign);\n+      return authentication.substring(authentication.lastIndexOf(\":\") + 1);\n+    }\n+\n+    public boolean authContainsSpecialCharacters() {\n+      Pattern regularPasswordWithoutSpecialCharacters = Pattern.compile(\"[^A-Za-z0-9]\");\n+      Matcher regularPassword = regularPasswordWithoutSpecialCharacters.matcher(extractPasswordFromUrl());\n+      return !regularPassword.matches();\n+    }\n+\n     Map<String, String> getFileSystemProperties() {\n-      if (fileSystemProperties == null) {\n+      if (fileSystemProperties == null && !authContainsSpecialCharacters()) {\n         return new HashMap<>();\n       }\n+      HashMap<String, String> fileSystemPropertiesMap = new HashMap<>();\n+      if (fileSystemProperties != null) {\n+        fileSystemPropertiesMap.putAll(GSON.fromJson(fileSystemProperties, MAP_STRING_STRING_TYPE));\n+      }\n+\n       try {\n-        return GSON.fromJson(fileSystemProperties, MAP_STRING_STRING_TYPE);\n+        if (authContainsSpecialCharacters()) {\n+          Path urlInfo;\n+          String extractedPassword = extractPasswordFromUrl();\n+          String encodedPassword = URLEncoder.encode(extractedPassword);\n+          String validatePath = path.replace(extractedPassword, encodedPassword);\n+          try {\n+            urlInfo = new Path(validatePath);\n+          } catch (Exception e) {\n+            throw new IllegalArgumentException(String.format(\"Unable to parse url: %s %s\", e.getMessage(), e));\n+          }\n+          int port = urlInfo.toUri().getPort();\n+          String host = urlInfo.toUri().getAuthority().substring(urlInfo.toUri().getAuthority().lastIndexOf(\"@\") + 1);\n+          String user = urlInfo.toUri().getAuthority().split(\":\")[0];\n+          if (urlInfo.toUri().getScheme().equals(FTP_PROTOCOL)) {\n+            port = (port == -1) ? DEFAULT_FTP_PORT : port;\n+            String cleanHostFTP = host.replace(\":\" + port, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2Njg2Ng=="}, "originalCommit": {"oid": "f9f420f82502ddf63f98ac7f61503f3d7639c5fe"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzc0ODk5OnYy", "diffSide": "RIGHT", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/source/FTPBatchSource.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjo1NjowOFrOH5a3_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo1MTo0M1rOH6AKyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3MTE5OQ==", "bodyText": "Why are we removing the port from the path here? Looks like we don't do that if the password doesn't contain special characters?", "url": "https://github.com/cdapio/hydrator-plugins/pull/1250#discussion_r529971199", "createdAt": "2020-11-24T22:56:08Z", "author": {"login": "rmstar"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/source/FTPBatchSource.java", "diffHunk": "@@ -130,6 +138,29 @@ public String getReferenceName() {\n \n     @Override\n     public String getPath() {\n+      if (authContainsSpecialCharacters()) {\n+        Path urlInfo;\n+        String extractedPassword = extractPasswordFromUrl();\n+        String encodedPassword = URLEncoder.encode(extractedPassword);\n+        String validatePath = path.replace(extractedPassword, encodedPassword);\n+        try {\n+          urlInfo = new Path(validatePath);\n+        } catch (Exception e) {\n+          throw new IllegalArgumentException(String.format(\"Unable to parse url: %s %s\", e.getMessage(), e));\n+        }\n+        String host = urlInfo.toUri().getAuthority().substring(urlInfo.toUri().getAuthority().lastIndexOf(\"@\") + 1);\n+        String user = urlInfo.toUri().getAuthority().split(\":\")[0];\n+        String protocol = urlInfo.toUri().getScheme();\n+        int port = urlInfo.toUri().getPort();\n+        if (port == -1 && protocol.equals(FTP_PROTOCOL)) {\n+          port = DEFAULT_FTP_PORT;\n+        }\n+        if (port == -1 && protocol.equals(SFTP_PROTOCOL)) {\n+          port = DEFAULT_SFTP_PORT;\n+        }\n+        String cleanHost = host.replace(\":\" + port, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9f420f82502ddf63f98ac7f61503f3d7639c5fe"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1NjkzOA==", "bodyText": "We are removing the port from path here because of the format that is required in FTP File System when you add the necessary parameters as File System Properties.\nFor example this will fail in File System Properties if we don't remove the port because it doesn't match the required format;\nftp://kimi:42@67]gfuss@192.168.0.179:21/kimi-look-here.txt\n\"fs.ftp.host\" --> \"fs.ftp.host.192.168.0.179:21\"\n\"fs.ftp.user.\" + host  --> \"fs.ftp.user.192.168.0.179:21.kimi\"\n\"fs.ftp.password.\" + host --> \"fs.ftp.password.192.168.0.179:21.47@79]gfuss\"\nThe FTP or SFTP File system contains a \"fs.ftp.host.port\" which defaults to 21 in FTP or 22 in SFTP if the user doesn't specify the port in neither url or in File system properties, but if apparently we don't remove it from host, the job will fail because it is expecting a host like this:\n\"fs.ftp.host\" --> \"192.168.0.179\"\n\"fs.ftp.user.\" + host ---> \"fs.ftp.user.192.168.0.179\"  --> \"kimi\"\n\"fs.ftp.password.\" + host --> \"fs.ftp.password.192.168.0.179\" --> \"47@79]gfuss\"\n\"fs.ftp.host.port\" -> \"21\"\nI've tested this specific scenario in:\n\nCDAP 6.3.0\nCDAP 6.1.4\nCDAP 6.1.2\nCDAP 6.2.0\n\n...and removing the port from host and adding it as standalone \"fs.ftp.host.port\" in File System Properties was the only way to get the job through.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1250#discussion_r530256938", "createdAt": "2020-11-25T10:15:06Z", "author": {"login": "flakrimjusufi"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/source/FTPBatchSource.java", "diffHunk": "@@ -130,6 +138,29 @@ public String getReferenceName() {\n \n     @Override\n     public String getPath() {\n+      if (authContainsSpecialCharacters()) {\n+        Path urlInfo;\n+        String extractedPassword = extractPasswordFromUrl();\n+        String encodedPassword = URLEncoder.encode(extractedPassword);\n+        String validatePath = path.replace(extractedPassword, encodedPassword);\n+        try {\n+          urlInfo = new Path(validatePath);\n+        } catch (Exception e) {\n+          throw new IllegalArgumentException(String.format(\"Unable to parse url: %s %s\", e.getMessage(), e));\n+        }\n+        String host = urlInfo.toUri().getAuthority().substring(urlInfo.toUri().getAuthority().lastIndexOf(\"@\") + 1);\n+        String user = urlInfo.toUri().getAuthority().split(\":\")[0];\n+        String protocol = urlInfo.toUri().getScheme();\n+        int port = urlInfo.toUri().getPort();\n+        if (port == -1 && protocol.equals(FTP_PROTOCOL)) {\n+          port = DEFAULT_FTP_PORT;\n+        }\n+        if (port == -1 && protocol.equals(SFTP_PROTOCOL)) {\n+          port = DEFAULT_SFTP_PORT;\n+        }\n+        String cleanHost = host.replace(\":\" + port, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3MTE5OQ=="}, "originalCommit": {"oid": "f9f420f82502ddf63f98ac7f61503f3d7639c5fe"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4MjIxNw==", "bodyText": "I see, thanks for the explanation!", "url": "https://github.com/cdapio/hydrator-plugins/pull/1250#discussion_r530582217", "createdAt": "2020-11-25T18:51:43Z", "author": {"login": "rmstar"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/source/FTPBatchSource.java", "diffHunk": "@@ -130,6 +138,29 @@ public String getReferenceName() {\n \n     @Override\n     public String getPath() {\n+      if (authContainsSpecialCharacters()) {\n+        Path urlInfo;\n+        String extractedPassword = extractPasswordFromUrl();\n+        String encodedPassword = URLEncoder.encode(extractedPassword);\n+        String validatePath = path.replace(extractedPassword, encodedPassword);\n+        try {\n+          urlInfo = new Path(validatePath);\n+        } catch (Exception e) {\n+          throw new IllegalArgumentException(String.format(\"Unable to parse url: %s %s\", e.getMessage(), e));\n+        }\n+        String host = urlInfo.toUri().getAuthority().substring(urlInfo.toUri().getAuthority().lastIndexOf(\"@\") + 1);\n+        String user = urlInfo.toUri().getAuthority().split(\":\")[0];\n+        String protocol = urlInfo.toUri().getScheme();\n+        int port = urlInfo.toUri().getPort();\n+        if (port == -1 && protocol.equals(FTP_PROTOCOL)) {\n+          port = DEFAULT_FTP_PORT;\n+        }\n+        if (port == -1 && protocol.equals(SFTP_PROTOCOL)) {\n+          port = DEFAULT_SFTP_PORT;\n+        }\n+        String cleanHost = host.replace(\":\" + port, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3MTE5OQ=="}, "originalCommit": {"oid": "f9f420f82502ddf63f98ac7f61503f3d7639c5fe"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzc3MzgyOnYy", "diffSide": "RIGHT", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/source/FTPBatchSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzowMDoxMlrOH5bIcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDoxNToyNFrOH5sVJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3NTQwOA==", "bodyText": "we can use extractedPassword here.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1250#discussion_r529975408", "createdAt": "2020-11-24T23:00:12Z", "author": {"login": "rmstar"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/source/FTPBatchSource.java", "diffHunk": "@@ -181,15 +212,63 @@ public Schema getSchema() {\n       return SCHEMA;\n     }\n \n+    public String extractPasswordFromUrl() {\n+      int getLastIndexOfAtSign = path.lastIndexOf(\"@\");\n+      String authentication = path.substring(0, getLastIndexOfAtSign);\n+      return authentication.substring(authentication.lastIndexOf(\":\") + 1);\n+    }\n+\n+    public boolean authContainsSpecialCharacters() {\n+      Pattern regularPasswordWithoutSpecialCharacters = Pattern.compile(\"[^A-Za-z0-9]\");\n+      Matcher regularPassword = regularPasswordWithoutSpecialCharacters.matcher(extractPasswordFromUrl());\n+      return !regularPassword.matches();\n+    }\n+\n     Map<String, String> getFileSystemProperties() {\n-      if (fileSystemProperties == null) {\n+      if (fileSystemProperties == null && !authContainsSpecialCharacters()) {\n         return new HashMap<>();\n       }\n+      HashMap<String, String> fileSystemPropertiesMap = new HashMap<>();\n+      if (fileSystemProperties != null) {\n+        fileSystemPropertiesMap.putAll(GSON.fromJson(fileSystemProperties, MAP_STRING_STRING_TYPE));\n+      }\n+\n       try {\n-        return GSON.fromJson(fileSystemProperties, MAP_STRING_STRING_TYPE);\n+        if (authContainsSpecialCharacters()) {\n+          Path urlInfo;\n+          String extractedPassword = extractPasswordFromUrl();\n+          String encodedPassword = URLEncoder.encode(extractedPassword);\n+          String validatePath = path.replace(extractedPassword, encodedPassword);\n+          try {\n+            urlInfo = new Path(validatePath);\n+          } catch (Exception e) {\n+            throw new IllegalArgumentException(String.format(\"Unable to parse url: %s %s\", e.getMessage(), e));\n+          }\n+          int port = urlInfo.toUri().getPort();\n+          String host = urlInfo.toUri().getAuthority().substring(urlInfo.toUri().getAuthority().lastIndexOf(\"@\") + 1);\n+          String user = urlInfo.toUri().getAuthority().split(\":\")[0];\n+          if (urlInfo.toUri().getScheme().equals(FTP_PROTOCOL)) {\n+            port = (port == -1) ? DEFAULT_FTP_PORT : port;\n+            String cleanHostFTP = host.replace(\":\" + port, \"\");\n+            fileSystemPropertiesMap.put(\"fs.ftp.host\", cleanHostFTP);\n+            fileSystemPropertiesMap.put(String.format(\"fs.ftp.user.%s\", cleanHostFTP), user);\n+            fileSystemPropertiesMap.put(String.format(\"fs.ftp.password.%s\", cleanHostFTP), extractPasswordFromUrl());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9f420f82502ddf63f98ac7f61503f3d7639c5fe"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1NzE4OQ==", "bodyText": "Nice catch.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1250#discussion_r530257189", "createdAt": "2020-11-25T10:15:24Z", "author": {"login": "flakrimjusufi"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/source/FTPBatchSource.java", "diffHunk": "@@ -181,15 +212,63 @@ public Schema getSchema() {\n       return SCHEMA;\n     }\n \n+    public String extractPasswordFromUrl() {\n+      int getLastIndexOfAtSign = path.lastIndexOf(\"@\");\n+      String authentication = path.substring(0, getLastIndexOfAtSign);\n+      return authentication.substring(authentication.lastIndexOf(\":\") + 1);\n+    }\n+\n+    public boolean authContainsSpecialCharacters() {\n+      Pattern regularPasswordWithoutSpecialCharacters = Pattern.compile(\"[^A-Za-z0-9]\");\n+      Matcher regularPassword = regularPasswordWithoutSpecialCharacters.matcher(extractPasswordFromUrl());\n+      return !regularPassword.matches();\n+    }\n+\n     Map<String, String> getFileSystemProperties() {\n-      if (fileSystemProperties == null) {\n+      if (fileSystemProperties == null && !authContainsSpecialCharacters()) {\n         return new HashMap<>();\n       }\n+      HashMap<String, String> fileSystemPropertiesMap = new HashMap<>();\n+      if (fileSystemProperties != null) {\n+        fileSystemPropertiesMap.putAll(GSON.fromJson(fileSystemProperties, MAP_STRING_STRING_TYPE));\n+      }\n+\n       try {\n-        return GSON.fromJson(fileSystemProperties, MAP_STRING_STRING_TYPE);\n+        if (authContainsSpecialCharacters()) {\n+          Path urlInfo;\n+          String extractedPassword = extractPasswordFromUrl();\n+          String encodedPassword = URLEncoder.encode(extractedPassword);\n+          String validatePath = path.replace(extractedPassword, encodedPassword);\n+          try {\n+            urlInfo = new Path(validatePath);\n+          } catch (Exception e) {\n+            throw new IllegalArgumentException(String.format(\"Unable to parse url: %s %s\", e.getMessage(), e));\n+          }\n+          int port = urlInfo.toUri().getPort();\n+          String host = urlInfo.toUri().getAuthority().substring(urlInfo.toUri().getAuthority().lastIndexOf(\"@\") + 1);\n+          String user = urlInfo.toUri().getAuthority().split(\":\")[0];\n+          if (urlInfo.toUri().getScheme().equals(FTP_PROTOCOL)) {\n+            port = (port == -1) ? DEFAULT_FTP_PORT : port;\n+            String cleanHostFTP = host.replace(\":\" + port, \"\");\n+            fileSystemPropertiesMap.put(\"fs.ftp.host\", cleanHostFTP);\n+            fileSystemPropertiesMap.put(String.format(\"fs.ftp.user.%s\", cleanHostFTP), user);\n+            fileSystemPropertiesMap.put(String.format(\"fs.ftp.password.%s\", cleanHostFTP), extractPasswordFromUrl());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3NTQwOA=="}, "originalCommit": {"oid": "f9f420f82502ddf63f98ac7f61503f3d7639c5fe"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzc3NTg0OnYy", "diffSide": "RIGHT", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/source/FTPBatchSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzowMDozMFrOH5bJyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzowMDozMFrOH5bJyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3NTc1Mg==", "bodyText": "we can use extractedPassword here.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1250#discussion_r529975752", "createdAt": "2020-11-24T23:00:30Z", "author": {"login": "rmstar"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/source/FTPBatchSource.java", "diffHunk": "@@ -181,15 +212,63 @@ public Schema getSchema() {\n       return SCHEMA;\n     }\n \n+    public String extractPasswordFromUrl() {\n+      int getLastIndexOfAtSign = path.lastIndexOf(\"@\");\n+      String authentication = path.substring(0, getLastIndexOfAtSign);\n+      return authentication.substring(authentication.lastIndexOf(\":\") + 1);\n+    }\n+\n+    public boolean authContainsSpecialCharacters() {\n+      Pattern regularPasswordWithoutSpecialCharacters = Pattern.compile(\"[^A-Za-z0-9]\");\n+      Matcher regularPassword = regularPasswordWithoutSpecialCharacters.matcher(extractPasswordFromUrl());\n+      return !regularPassword.matches();\n+    }\n+\n     Map<String, String> getFileSystemProperties() {\n-      if (fileSystemProperties == null) {\n+      if (fileSystemProperties == null && !authContainsSpecialCharacters()) {\n         return new HashMap<>();\n       }\n+      HashMap<String, String> fileSystemPropertiesMap = new HashMap<>();\n+      if (fileSystemProperties != null) {\n+        fileSystemPropertiesMap.putAll(GSON.fromJson(fileSystemProperties, MAP_STRING_STRING_TYPE));\n+      }\n+\n       try {\n-        return GSON.fromJson(fileSystemProperties, MAP_STRING_STRING_TYPE);\n+        if (authContainsSpecialCharacters()) {\n+          Path urlInfo;\n+          String extractedPassword = extractPasswordFromUrl();\n+          String encodedPassword = URLEncoder.encode(extractedPassword);\n+          String validatePath = path.replace(extractedPassword, encodedPassword);\n+          try {\n+            urlInfo = new Path(validatePath);\n+          } catch (Exception e) {\n+            throw new IllegalArgumentException(String.format(\"Unable to parse url: %s %s\", e.getMessage(), e));\n+          }\n+          int port = urlInfo.toUri().getPort();\n+          String host = urlInfo.toUri().getAuthority().substring(urlInfo.toUri().getAuthority().lastIndexOf(\"@\") + 1);\n+          String user = urlInfo.toUri().getAuthority().split(\":\")[0];\n+          if (urlInfo.toUri().getScheme().equals(FTP_PROTOCOL)) {\n+            port = (port == -1) ? DEFAULT_FTP_PORT : port;\n+            String cleanHostFTP = host.replace(\":\" + port, \"\");\n+            fileSystemPropertiesMap.put(\"fs.ftp.host\", cleanHostFTP);\n+            fileSystemPropertiesMap.put(String.format(\"fs.ftp.user.%s\", cleanHostFTP), user);\n+            fileSystemPropertiesMap.put(String.format(\"fs.ftp.password.%s\", cleanHostFTP), extractPasswordFromUrl());\n+            fileSystemPropertiesMap.put(\"fs.ftp.host.port\", String.valueOf(port));\n+          } else {\n+            port = (port == -1) ? DEFAULT_SFTP_PORT : port;\n+            String cleanHostSFTP = host.replace(\":\" + port, \"\");\n+            fileSystemPropertiesMap.put(String.format(\"fs.sftp.user.%s\", cleanHostSFTP), user);\n+            fileSystemPropertiesMap.put(String.format(\"fs.sftp.password.%s.%s\", cleanHostSFTP, user),\n+                                        extractPasswordFromUrl());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9f420f82502ddf63f98ac7f61503f3d7639c5fe"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzc5MDA3OnYy", "diffSide": "RIGHT", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/source/FTPBatchSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzowMjo1M1rOH5bTAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDoxNToxNlrOH5sUug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3ODExMw==", "bodyText": "why are we url encoding the password? seems like we just set the un-encoded password in filesystem property fs.(s)ftp.password..", "url": "https://github.com/cdapio/hydrator-plugins/pull/1250#discussion_r529978113", "createdAt": "2020-11-24T23:02:53Z", "author": {"login": "rmstar"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/source/FTPBatchSource.java", "diffHunk": "@@ -181,15 +212,63 @@ public Schema getSchema() {\n       return SCHEMA;\n     }\n \n+    public String extractPasswordFromUrl() {\n+      int getLastIndexOfAtSign = path.lastIndexOf(\"@\");\n+      String authentication = path.substring(0, getLastIndexOfAtSign);\n+      return authentication.substring(authentication.lastIndexOf(\":\") + 1);\n+    }\n+\n+    public boolean authContainsSpecialCharacters() {\n+      Pattern regularPasswordWithoutSpecialCharacters = Pattern.compile(\"[^A-Za-z0-9]\");\n+      Matcher regularPassword = regularPasswordWithoutSpecialCharacters.matcher(extractPasswordFromUrl());\n+      return !regularPassword.matches();\n+    }\n+\n     Map<String, String> getFileSystemProperties() {\n-      if (fileSystemProperties == null) {\n+      if (fileSystemProperties == null && !authContainsSpecialCharacters()) {\n         return new HashMap<>();\n       }\n+      HashMap<String, String> fileSystemPropertiesMap = new HashMap<>();\n+      if (fileSystemProperties != null) {\n+        fileSystemPropertiesMap.putAll(GSON.fromJson(fileSystemProperties, MAP_STRING_STRING_TYPE));\n+      }\n+\n       try {\n-        return GSON.fromJson(fileSystemProperties, MAP_STRING_STRING_TYPE);\n+        if (authContainsSpecialCharacters()) {\n+          Path urlInfo;\n+          String extractedPassword = extractPasswordFromUrl();\n+          String encodedPassword = URLEncoder.encode(extractedPassword);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9f420f82502ddf63f98ac7f61503f3d7639c5fe"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1NzA4Mg==", "bodyText": "We are encoding the password in order to avoid IllegalArgumentExceptions.\nIf we don't encode the password, the Path (org.apache.hadoop.fs.Path) will throw an Exception and we won't be able to extract the necessary parameters from Path (host, port, scheme, username, password).\nIn this way, we are sure that the Path will always be valid and we will be able to extract whatever we need to put the parameters in File System Properties.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1250#discussion_r530257082", "createdAt": "2020-11-25T10:15:16Z", "author": {"login": "flakrimjusufi"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/source/FTPBatchSource.java", "diffHunk": "@@ -181,15 +212,63 @@ public Schema getSchema() {\n       return SCHEMA;\n     }\n \n+    public String extractPasswordFromUrl() {\n+      int getLastIndexOfAtSign = path.lastIndexOf(\"@\");\n+      String authentication = path.substring(0, getLastIndexOfAtSign);\n+      return authentication.substring(authentication.lastIndexOf(\":\") + 1);\n+    }\n+\n+    public boolean authContainsSpecialCharacters() {\n+      Pattern regularPasswordWithoutSpecialCharacters = Pattern.compile(\"[^A-Za-z0-9]\");\n+      Matcher regularPassword = regularPasswordWithoutSpecialCharacters.matcher(extractPasswordFromUrl());\n+      return !regularPassword.matches();\n+    }\n+\n     Map<String, String> getFileSystemProperties() {\n-      if (fileSystemProperties == null) {\n+      if (fileSystemProperties == null && !authContainsSpecialCharacters()) {\n         return new HashMap<>();\n       }\n+      HashMap<String, String> fileSystemPropertiesMap = new HashMap<>();\n+      if (fileSystemProperties != null) {\n+        fileSystemPropertiesMap.putAll(GSON.fromJson(fileSystemProperties, MAP_STRING_STRING_TYPE));\n+      }\n+\n       try {\n-        return GSON.fromJson(fileSystemProperties, MAP_STRING_STRING_TYPE);\n+        if (authContainsSpecialCharacters()) {\n+          Path urlInfo;\n+          String extractedPassword = extractPasswordFromUrl();\n+          String encodedPassword = URLEncoder.encode(extractedPassword);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3ODExMw=="}, "originalCommit": {"oid": "f9f420f82502ddf63f98ac7f61503f3d7639c5fe"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2437, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}