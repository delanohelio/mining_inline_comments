{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MTgzNjMw", "number": 1034, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjoxNTowMFrODmXUmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzowMjoxMVrODnSEYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTU0NTg2OnYy", "diffSide": "RIGHT", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/aggregator/function/CountDistinct.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjoxNTowMFrOFzvZHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzozMDowM1rOF0oJYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc5ODE3NQ==", "bodyText": "this will only work for some field types. Those types should be validated at configure time, and again at prepare time if it couldn't be checked at configure time due to macros. More specifically, this will not \"work\" except on ints, longs, strings, floats, and doubles. And for floats and doubles, it doesn't really make much sense.\nIf it needs to work for other types, it is quite a bit more complex.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1034#discussion_r389798175", "createdAt": "2020-03-09T16:15:00Z", "author": {"login": "albertshau"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/aggregator/function/CountDistinct.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.plugin.batch.aggregator.function;\n+\n+import io.cdap.cdap.api.data.format.StructuredRecord;\n+import io.cdap.cdap.api.data.schema.Schema;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Count distinct values of a specific column\n+ */\n+public class CountDistinct implements AggregateFunction<Integer> {\n+  private final String fieldName;\n+  private Set<Object> collectSet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea1a6691b112b8d0c20a0f0d956945be4b8c0bbc"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NzU5OQ==", "bodyText": "@albertshau can you explain why we'd need to validate specific types? most of the use cases I can think of would be satisfied with strings, ints, longs, floats and doubles. Perhaps booleans in addition. But I'm unable to follow why it wouldn't work for others, and by others you mean the other types in the Schema object, right?", "url": "https://github.com/cdapio/hydrator-plugins/pull/1034#discussion_r390087599", "createdAt": "2020-03-10T04:18:25Z", "author": {"login": "bdmogal"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/aggregator/function/CountDistinct.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.plugin.batch.aggregator.function;\n+\n+import io.cdap.cdap.api.data.format.StructuredRecord;\n+import io.cdap.cdap.api.data.schema.Schema;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Count distinct values of a specific column\n+ */\n+public class CountDistinct implements AggregateFunction<Integer> {\n+  private final String fieldName;\n+  private Set<Object> collectSet;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc5ODE3NQ=="}, "originalCommit": {"oid": "ea1a6691b112b8d0c20a0f0d956945be4b8c0bbc"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyODAzMw==", "bodyText": "fixed", "url": "https://github.com/cdapio/hydrator-plugins/pull/1034#discussion_r390728033", "createdAt": "2020-03-11T03:30:03Z", "author": {"login": "bdmogal"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/aggregator/function/CountDistinct.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.plugin.batch.aggregator.function;\n+\n+import io.cdap.cdap.api.data.format.StructuredRecord;\n+import io.cdap.cdap.api.data.schema.Schema;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Count distinct values of a specific column\n+ */\n+public class CountDistinct implements AggregateFunction<Integer> {\n+  private final String fieldName;\n+  private Set<Object> collectSet;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc5ODE3NQ=="}, "originalCommit": {"oid": "ea1a6691b112b8d0c20a0f0d956945be4b8c0bbc"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTU1MzU4OnYy", "diffSide": "RIGHT", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/aggregator/function/CountDistinct.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjoxNjo0MlrOFzvdtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDoxOToyMlrOF0BEyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc5OTM0OA==", "bodyText": "a little better to have the Set as final and create it in the constructor, and clear it here.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1034#discussion_r389799348", "createdAt": "2020-03-09T16:16:42Z", "author": {"login": "albertshau"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/aggregator/function/CountDistinct.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.plugin.batch.aggregator.function;\n+\n+import io.cdap.cdap.api.data.format.StructuredRecord;\n+import io.cdap.cdap.api.data.schema.Schema;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Count distinct values of a specific column\n+ */\n+public class CountDistinct implements AggregateFunction<Integer> {\n+  private final String fieldName;\n+  private Set<Object> collectSet;\n+\n+  public CountDistinct(String fieldName) {\n+    this.fieldName = fieldName;\n+  }\n+\n+  @Override\n+  public void beginFunction() {\n+    collectSet = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea1a6691b112b8d0c20a0f0d956945be4b8c0bbc"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4Nzg4MQ==", "bodyText": "fixed", "url": "https://github.com/cdapio/hydrator-plugins/pull/1034#discussion_r390087881", "createdAt": "2020-03-10T04:19:22Z", "author": {"login": "bdmogal"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/aggregator/function/CountDistinct.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.plugin.batch.aggregator.function;\n+\n+import io.cdap.cdap.api.data.format.StructuredRecord;\n+import io.cdap.cdap.api.data.schema.Schema;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Count distinct values of a specific column\n+ */\n+public class CountDistinct implements AggregateFunction<Integer> {\n+  private final String fieldName;\n+  private Set<Object> collectSet;\n+\n+  public CountDistinct(String fieldName) {\n+    this.fieldName = fieldName;\n+  }\n+\n+  @Override\n+  public void beginFunction() {\n+    collectSet = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc5OTM0OA=="}, "originalCommit": {"oid": "ea1a6691b112b8d0c20a0f0d956945be4b8c0bbc"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTE2NzI3OnYy", "diffSide": "RIGHT", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/aggregator/GroupByAggregator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzowMDozNVrOF1MJOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzo0MjoxNFrOF1M7cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNzgxNw==", "bodyText": "is it possible for this to be false at this point? seems like it wouldn't be.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1034#discussion_r391317817", "createdAt": "2020-03-11T23:00:35Z", "author": {"login": "albertshau"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/aggregator/GroupByAggregator.java", "diffHunk": "@@ -131,9 +131,29 @@ public void validate(Schema inputSchema, List<String> groupByFields,\n                                            functionInfo.getName(), functionInfo.getField()), null)\n           .withConfigElement(\"aggregates\", collectorFieldName);\n       }\n-    }\n \n+      // TODO: CDAP-16401 - Push down validation to individual aggregate functions\n+      if (GroupByConfig.Function.COUNTDISTINCT == functionInfo.getFunction()) {\n+        if (!conf.containsMacro(\"aggregates\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0df39679a70b9486e8b1fb710fc54fb17a249f1"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzMDY3NQ==", "bodyText": "ah! the macro check for aggregates is kind of in the weeds so I missed it. Removed it.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1034#discussion_r391330675", "createdAt": "2020-03-11T23:42:14Z", "author": {"login": "bdmogal"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/aggregator/GroupByAggregator.java", "diffHunk": "@@ -131,9 +131,29 @@ public void validate(Schema inputSchema, List<String> groupByFields,\n                                            functionInfo.getName(), functionInfo.getField()), null)\n           .withConfigElement(\"aggregates\", collectorFieldName);\n       }\n-    }\n \n+      // TODO: CDAP-16401 - Push down validation to individual aggregate functions\n+      if (GroupByConfig.Function.COUNTDISTINCT == functionInfo.getFunction()) {\n+        if (!conf.containsMacro(\"aggregates\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNzgxNw=="}, "originalCommit": {"oid": "d0df39679a70b9486e8b1fb710fc54fb17a249f1"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTE3MDkxOnYy", "diffSide": "RIGHT", "path": "core-plugins/src/main/java/io/cdap/plugin/batch/aggregator/GroupByAggregator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzowMjoxMVrOF1MLgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzo1MTowMlrOF1NFmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxODQwMQ==", "bodyText": "does it really make sense to allow float and double? It could potentially go out of memory easily, with 0.000001 different than 0.00000001, etc.\nIn Java when you check equality of floats and doubles most IDEs will flag it as a warning.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1034#discussion_r391318401", "createdAt": "2020-03-11T23:02:11Z", "author": {"login": "albertshau"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/aggregator/GroupByAggregator.java", "diffHunk": "@@ -131,9 +131,29 @@ public void validate(Schema inputSchema, List<String> groupByFields,\n                                            functionInfo.getName(), functionInfo.getField()), null)\n           .withConfigElement(\"aggregates\", collectorFieldName);\n       }\n-    }\n \n+      // TODO: CDAP-16401 - Push down validation to individual aggregate functions\n+      if (GroupByConfig.Function.COUNTDISTINCT == functionInfo.getFunction()) {\n+        if (!conf.containsMacro(\"aggregates\")) {\n+          validateCountDistinct(inputField, collector, collectorFieldName);\n+        }\n+      }\n+    }\n+  }\n \n+  private void validateCountDistinct(Schema.Field inputField, FailureCollector collector, String validationFieldName) {\n+    if (inputField != null) {\n+      Schema.Type type = inputField.getSchema().isNullable() ?\n+        inputField.getSchema().getNonNullable().getType() :\n+        inputField.getSchema().getType();\n+      if (type != Schema.Type.STRING && type != Schema.Type.INT && type != Schema.Type.LONG &&\n+        type != Schema.Type.FLOAT && type != Schema.Type.DOUBLE && type != Schema.Type.BOOLEAN) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0df39679a70b9486e8b1fb710fc54fb17a249f1"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxOTc4OQ==", "bodyText": "though i guess the same could be set for CollectSet. We probably need a way to collect warnings and failures, with this falling under the warning category.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1034#discussion_r391319789", "createdAt": "2020-03-11T23:06:09Z", "author": {"login": "albertshau"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/aggregator/GroupByAggregator.java", "diffHunk": "@@ -131,9 +131,29 @@ public void validate(Schema inputSchema, List<String> groupByFields,\n                                            functionInfo.getName(), functionInfo.getField()), null)\n           .withConfigElement(\"aggregates\", collectorFieldName);\n       }\n-    }\n \n+      // TODO: CDAP-16401 - Push down validation to individual aggregate functions\n+      if (GroupByConfig.Function.COUNTDISTINCT == functionInfo.getFunction()) {\n+        if (!conf.containsMacro(\"aggregates\")) {\n+          validateCountDistinct(inputField, collector, collectorFieldName);\n+        }\n+      }\n+    }\n+  }\n \n+  private void validateCountDistinct(Schema.Field inputField, FailureCollector collector, String validationFieldName) {\n+    if (inputField != null) {\n+      Schema.Type type = inputField.getSchema().isNullable() ?\n+        inputField.getSchema().getNonNullable().getType() :\n+        inputField.getSchema().getType();\n+      if (type != Schema.Type.STRING && type != Schema.Type.INT && type != Schema.Type.LONG &&\n+        type != Schema.Type.FLOAT && type != Schema.Type.DOUBLE && type != Schema.Type.BOOLEAN) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxODQwMQ=="}, "originalCommit": {"oid": "d0df39679a70b9486e8b1fb710fc54fb17a249f1"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzMzI3Mw==", "bodyText": "Reported an improvement. https://issues.cask.co/browse/CDAP-16418. However, at this point, I don't think we need to absorb the risk of an OOM. I've removed support for FLOAT and DOUBLE right now. Can add it if someone brings up a use case explicitly.", "url": "https://github.com/cdapio/hydrator-plugins/pull/1034#discussion_r391333273", "createdAt": "2020-03-11T23:51:02Z", "author": {"login": "bdmogal"}, "path": "core-plugins/src/main/java/io/cdap/plugin/batch/aggregator/GroupByAggregator.java", "diffHunk": "@@ -131,9 +131,29 @@ public void validate(Schema inputSchema, List<String> groupByFields,\n                                            functionInfo.getName(), functionInfo.getField()), null)\n           .withConfigElement(\"aggregates\", collectorFieldName);\n       }\n-    }\n \n+      // TODO: CDAP-16401 - Push down validation to individual aggregate functions\n+      if (GroupByConfig.Function.COUNTDISTINCT == functionInfo.getFunction()) {\n+        if (!conf.containsMacro(\"aggregates\")) {\n+          validateCountDistinct(inputField, collector, collectorFieldName);\n+        }\n+      }\n+    }\n+  }\n \n+  private void validateCountDistinct(Schema.Field inputField, FailureCollector collector, String validationFieldName) {\n+    if (inputField != null) {\n+      Schema.Type type = inputField.getSchema().isNullable() ?\n+        inputField.getSchema().getNonNullable().getType() :\n+        inputField.getSchema().getType();\n+      if (type != Schema.Type.STRING && type != Schema.Type.INT && type != Schema.Type.LONG &&\n+        type != Schema.Type.FLOAT && type != Schema.Type.DOUBLE && type != Schema.Type.BOOLEAN) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxODQwMQ=="}, "originalCommit": {"oid": "d0df39679a70b9486e8b1fb710fc54fb17a249f1"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2491, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}