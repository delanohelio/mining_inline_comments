{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5NDA2ODAw", "number": 1561, "title": "Find references to fields via getters/setters", "bodyText": "Fixes #1548\nRequires redhat-developer/vscode-java#1646\nSigned-off-by: Snjezana Peco snjezana.peco@redhat.com", "createdAt": "2020-10-07T17:28:59Z", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1561", "merged": true, "mergeCommit": {"oid": "ece3235e44e7445b88c3f45700f69963c9d6a1e1"}, "closed": true, "closedAt": "2020-10-08T15:12:50Z", "author": {"login": "snjeza"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQQawoAH2gAyNDk5NDA2ODAwOjU3MzIwMWZlM2U0NmMwZGI2ZTI3MzJhMmNkMTk3OTdmYzdjMmZkZmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSI6DFgFqTUwNDYwMjM1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "573201fe3e46c0db6e2732a2cd19797fc7c2fdfb", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/573201fe3e46c0db6e2732a2cd19797fc7c2fdfb", "committedDate": "2020-10-07T17:27:44Z", "message": "Find references to fields via getters/setters\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0Mjg4NDM5", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1561#pullrequestreview-504288439", "createdAt": "2020-10-07T21:42:14Z", "commit": {"oid": "573201fe3e46c0db6e2732a2cd19797fc7c2fdfb"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTo0MjoxNFrOHeGjZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMjowNDo1N1rOHeHJLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNjY5Mw==", "bodyText": "Is there a particular case you encountered that this addresses, or is this just a precaution ?", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1561#discussion_r501326693", "createdAt": "2020-10-07T21:42:14Z", "author": {"login": "rgrunber"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/ReferencesHandler.java", "diffHunk": "@@ -55,47 +62,100 @@ private IJavaSearchScope createSearchScope() throws JavaModelException {\n \t}\n \n \tpublic List<Location> findReferences(ReferenceParams param, IProgressMonitor monitor) {\n-\n \t\tfinal List<Location> locations = new ArrayList<>();\n \t\ttry {\n-\t\t\tIJavaElement elementToSearch = JDTUtils.findElementAtSelection(JDTUtils.resolveTypeRoot(param.getTextDocument().getUri()), param.getPosition().getLine(), param.getPosition().getCharacter(), this.preferenceManager, monitor);\n-\n+\t\t\tITypeRoot typeRoot = JDTUtils.resolveTypeRoot(param.getTextDocument().getUri());\n+\t\t\tif (typeRoot == null) {\n+\t\t\t\treturn locations;\n+\t\t\t}\n+\t\t\tIJavaElement elementToSearch = JDTUtils.findElementAtSelection(typeRoot, param.getPosition().getLine(), param.getPosition().getCharacter(), this.preferenceManager, monitor);\n+\t\t\tif (elementToSearch == null) {\n+\t\t\t\tint offset = JsonRpcHelpers.toOffset(typeRoot.getBuffer(), param.getPosition().getLine(), param.getPosition().getCharacter());\n+\t\t\t\telementToSearch = typeRoot.getElementAt(offset);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "573201fe3e46c0db6e2732a2cd19797fc7c2fdfb"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzNjM2Nw==", "bodyText": "This may eventually have to evolve to support other builders (eg. https://immutables.github.io/ ) but I think it should be fine for now.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1561#discussion_r501336367", "createdAt": "2020-10-07T22:04:57Z", "author": {"login": "rgrunber"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/ReferencesHandler.java", "diffHunk": "@@ -55,47 +62,100 @@ private IJavaSearchScope createSearchScope() throws JavaModelException {\n \t}\n \n \tpublic List<Location> findReferences(ReferenceParams param, IProgressMonitor monitor) {\n-\n \t\tfinal List<Location> locations = new ArrayList<>();\n \t\ttry {\n-\t\t\tIJavaElement elementToSearch = JDTUtils.findElementAtSelection(JDTUtils.resolveTypeRoot(param.getTextDocument().getUri()), param.getPosition().getLine(), param.getPosition().getCharacter(), this.preferenceManager, monitor);\n-\n+\t\t\tITypeRoot typeRoot = JDTUtils.resolveTypeRoot(param.getTextDocument().getUri());\n+\t\t\tif (typeRoot == null) {\n+\t\t\t\treturn locations;\n+\t\t\t}\n+\t\t\tIJavaElement elementToSearch = JDTUtils.findElementAtSelection(typeRoot, param.getPosition().getLine(), param.getPosition().getCharacter(), this.preferenceManager, monitor);\n+\t\t\tif (elementToSearch == null) {\n+\t\t\t\tint offset = JsonRpcHelpers.toOffset(typeRoot.getBuffer(), param.getPosition().getLine(), param.getPosition().getCharacter());\n+\t\t\t\telementToSearch = typeRoot.getElementAt(offset);\n+\t\t\t}\n \t\t\tif (elementToSearch == null) {\n \t\t\t\treturn locations;\n \t\t\t}\n-\n-\t\t\tboolean includeClassFiles = preferenceManager.isClientSupportsClassFileContent();\n-\t\t\tSearchEngine engine = new SearchEngine();\n-\t\t\tSearchPattern pattern = SearchPattern.createPattern(elementToSearch, IJavaSearchConstants.REFERENCES);\n-\n-\t\t\tengine.search(pattern, new SearchParticipant[] { SearchEngine.getDefaultSearchParticipant() }, createSearchScope(), new SearchRequestor() {\n-\n-\t\t\t\t@Override\n-\t\t\t\tpublic void acceptSearchMatch(SearchMatch match) throws CoreException {\n-\t\t\t\t\tObject o = match.getElement();\n-\t\t\t\t\tif (o instanceof IJavaElement) {\n-\t\t\t\t\t\tIJavaElement element = (IJavaElement) o;\n-\t\t\t\t\t\tICompilationUnit compilationUnit = (ICompilationUnit) element.getAncestor(IJavaElement.COMPILATION_UNIT);\n-\t\t\t\t\t\tLocation location = null;\n-\t\t\t\t\t\tif (compilationUnit != null) {\n-\t\t\t\t\t\t\tlocation = JDTUtils.toLocation(compilationUnit, match.getOffset(), match.getLength());\n-\t\t\t\t\t\t} else if (includeClassFiles) {\n-\t\t\t\t\t\t\tIClassFile cf = (IClassFile) element.getAncestor(IJavaElement.CLASS_FILE);\n-\t\t\t\t\t\t\tif (cf != null && cf.getSourceRange() != null) {\n-\t\t\t\t\t\t\t\tlocation = JDTUtils.toLocation(cf, match.getOffset(), match.getLength());\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tif (location != null) {\n-\t\t\t\t\t\t\tlocations.add(location);\n+\t\t\tsearch(elementToSearch, locations, monitor);\n+\t\t\tif (preferenceManager.getPreferences().isIncludeGetterSetter() && elementToSearch instanceof IField) { // IField\n+\t\t\t\tIField field = (IField) elementToSearch;\n+\t\t\t\tIMethod getter = GetterSetterUtil.getGetter(field);\n+\t\t\t\tif (getter != null) {\n+\t\t\t\t\tsearch(getter, locations, monitor);\n+\t\t\t\t}\n+\t\t\t\tIMethod setter = GetterSetterUtil.getSetter(field);\n+\t\t\t\tif (setter != null) {\n+\t\t\t\t\tsearch(setter, locations, monitor);\n+\t\t\t\t}\n+\t\t\t\tString builderName = getBuilderName(field);\n+\t\t\t\tIType builder = field.getJavaProject().findType(builderName);\n+\t\t\t\tif (builder != null) {\n+\t\t\t\t\tString fieldSignature = field.getTypeSignature();\n+\t\t\t\t\tfor (IMethod method : builder.getMethods()) {\n+\t\t\t\t\t\tString[] parameters = method.getParameterTypes();\n+\t\t\t\t\t\tif (parameters.length == 1 && field.getElementName().equals(method.getElementName()) && fieldSignature.equals(parameters[0])) {\n+\t\t\t\t\t\t\tsearch(method, locations, monitor);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t}, monitor);\n-\n+\t\t\t}\n \t\t} catch (CoreException e) {\n \t\t\tJavaLanguageServerPlugin.logException(\"Find references failure \", e);\n \t\t}\n \t\treturn locations;\n \t}\n \n+\tprivate String getBuilderName(IField field) {\n+\t\tIType declaringType = field.getDeclaringType();\n+\t\tIAnnotation annotation = declaringType.getAnnotation(\"Builder\");\n+\t\tif (annotation == null || !annotation.exists()) {\n+\t\t\tannotation = declaringType.getAnnotation(\"lombok.Builder\");\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "573201fe3e46c0db6e2732a2cd19797fc7c2fdfb"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0NjAyMzUw", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1561#pullrequestreview-504602350", "createdAt": "2020-10-08T09:37:59Z", "commit": {"oid": "573201fe3e46c0db6e2732a2cd19797fc7c2fdfb"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwOTozNzo1OVrOHeWM8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwOTozODo1NFrOHeWPKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU4MzA4OQ==", "bodyText": "JAVA_REFERENCES_INCLUDE_ACCESSORS = \"java.references.includeAccessors\";", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1561#discussion_r501583089", "createdAt": "2020-10-08T09:37:59Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "diffHunk": "@@ -57,6 +57,11 @@\n \t * Specifies the folder path to the JDK .\n \t */\n \tpublic static final String JAVA_HOME = \"java.home\";\n+\t/**\n+\t * Preference key used to include getter, setter and builder/constructor when\n+\t * finding references.\n+\t */\n+\tpublic static final String JAVA_REFERENCES_INCLUDE_GETTERSETTER = \"java.references.includeGetterSetter\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "573201fe3e46c0db6e2732a2cd19797fc7c2fdfb"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU4MzY1OA==", "bodyText": "includeAccessors", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1561#discussion_r501583658", "createdAt": "2020-10-08T09:38:54Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "diffHunk": "@@ -434,6 +439,7 @@\n \tprivate boolean generateToStringListArrayContents;\n \tprivate int generateToStringLimitElements;\n \tprivate List<String> preferredContentProviderIds;\n+\tprivate boolean includeGetterSetter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "573201fe3e46c0db6e2732a2cd19797fc7c2fdfb"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1012, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}