{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwNjcwMDE5", "number": 1632, "title": "search for references from IClassFile without source", "bodyText": "Fixes redhat-developer/vscode-java#1665\nFixes #1634\nRequires redhat-developer/vscode-java#1773\nSigned-off-by: Snjezana Peco snjezana.peco@redhat.com", "createdAt": "2020-12-15T20:16:22Z", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632", "merged": true, "mergeCommit": {"oid": "e35067012f7cd8845e49c6e0fd2a818f009a1156"}, "closed": true, "closedAt": "2021-02-17T20:04:59Z", "author": {"login": "snjeza"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmhTIJgBqjQxMTY3NDk1NTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd6D9MiABqjQzMjg3ODc2NjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7362edf0ef7e81177c6f6a49ee398030e1367b56", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/7362edf0ef7e81177c6f6a49ee398030e1367b56", "committedDate": "2020-12-15T20:13:05Z", "message": "search for enum reference without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}, "afterCommit": {"oid": "319a9049c59047e9918f2c643a56dd60a448b5f7", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/319a9049c59047e9918f2c643a56dd60a448b5f7", "committedDate": "2020-12-15T21:33:23Z", "message": "search for enum reference without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "319a9049c59047e9918f2c643a56dd60a448b5f7", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/319a9049c59047e9918f2c643a56dd60a448b5f7", "committedDate": "2020-12-15T21:33:23Z", "message": "search for enum reference without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}, "afterCommit": {"oid": "90650bb673e8d9f255f377c53905642cfaf8efc7", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/90650bb673e8d9f255f377c53905642cfaf8efc7", "committedDate": "2020-12-15T21:41:18Z", "message": "search for enum reference without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxOTYwMjU2", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#pullrequestreview-561960256", "createdAt": "2021-01-05T16:54:58Z", "commit": {"oid": "90650bb673e8d9f255f377c53905642cfaf8efc7"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjo1NDo1OFrOIOfGJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzoxMzowOFrOIOfxyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA2MDQ1Mg==", "bodyText": "I would place this logic in a separate private method that returns the boolean value that is assigned to 'found'. This just simplifies this method a bit.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#discussion_r552060452", "createdAt": "2021-01-05T16:54:58Z", "author": {"login": "rgrunber"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/ReferencesHandler.java", "diffHunk": "@@ -149,6 +161,79 @@ public void acceptSearchMatch(SearchMatch match) throws CoreException {\n \t\t\t\t\t\tif (cf != null && cf.getSourceRange() != null) {\n \t\t\t\t\t\t\tlocation = JDTUtils.toLocation(cf, match.getOffset(), match.getLength());\n \t\t\t\t\t\t}\n+\t\t\t\t\t\tif (cf != null && location == null) {\n+\t\t\t\t\t\t\tContentProviderManager contentProvider = JavaLanguageServerPlugin.getContentProviderManager();\n+\t\t\t\t\t\t\tString contents = contentProvider.getSource(cf, new NullProgressMonitor());\n+\t\t\t\t\t\t\tif (contents != null) {\n+\t\t\t\t\t\t\t\tfinal ASTParser parser = ASTParser.newParser(IASTSharedValues.SHARED_AST_LEVEL);\n+\t\t\t\t\t\t\t\tparser.setResolveBindings(true);\n+\t\t\t\t\t\t\t\tparser.setKind(ASTParser.K_COMPILATION_UNIT);\n+\t\t\t\t\t\t\t\tparser.setStatementsRecovery(IASTSharedValues.SHARED_AST_STATEMENT_RECOVERY);\n+\t\t\t\t\t\t\t\tparser.setBindingsRecovery(IASTSharedValues.SHARED_BINDING_RECOVERY);\n+\t\t\t\t\t\t\t\tparser.setSource(contents.toCharArray());\n+\t\t\t\t\t\t\t\tCompilationUnit unit = (CompilationUnit) parser.createAST(null);\n+\t\t\t\t\t\t\t\tfinal ASTNode[] nodes = new ASTNode[1];\n+\t\t\t\t\t\t\t\tunit.accept(new ASTVisitor() {\n+\n+\t\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\t\tpublic boolean visit(SimpleName node) {\n+\t\t\t\t\t\t\t\t\t\tif (element.getElementName().equals(node.getIdentifier())) {\n+\t\t\t\t\t\t\t\t\t\t\tASTNode parent = node.getParent();\n+\t\t\t\t\t\t\t\t\t\t\tboolean found = false;\n+\t\t\t\t\t\t\t\t\t\t\tswitch (parent.getNodeType()) {\n+\t\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.ANNOTATION_TYPE_DECLARATION:\n+\t\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.ANNOTATION_TYPE_MEMBER_DECLARATION:\n+\t\t\t\t\t\t\t\t\t\t\t\t\tfound = element.getElementType() == IJavaElement.ANNOTATION;\n+\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.FIELD_DECLARATION:\n+\t\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.ENUM_CONSTANT_DECLARATION:\n+\t\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.ENUM_DECLARATION:\n+\t\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.FIELD_ACCESS:\n+\t\t\t\t\t\t\t\t\t\t\t\t\tfound = element.getElementType() == IJavaElement.FIELD;\n+\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.METHOD_DECLARATION:\n+\t\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.METHOD_INVOCATION:\n+\t\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.EXPRESSION_METHOD_REFERENCE:\n+\t\t\t\t\t\t\t\t\t\t\t\t\tfound = element.getElementType() == IJavaElement.METHOD;\n+\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.TYPE_DECLARATION:\n+\t\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.VARIABLE_DECLARATION_FRAGMENT:\n+\t\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.VARIABLE_DECLARATION_STATEMENT:\n+\t\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.VARIABLE_DECLARATION_EXPRESSION:\n+\t\t\t\t\t\t\t\t\t\t\t\t\tfound = element.getElementType() == IJavaElement.TYPE || element.getElementType() == IJavaElement.FIELD || element.getElementType() == IJavaElement.METHOD;\n+\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90650bb673e8d9f255f377c53905642cfaf8efc7"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA2MzE4Mg==", "bodyText": "Might be worth confirming whether setResolveBindings/setBindingsRecovery can be false. If possible, it should improve computation time.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#discussion_r552063182", "createdAt": "2021-01-05T16:59:05Z", "author": {"login": "rgrunber"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/ReferencesHandler.java", "diffHunk": "@@ -149,6 +161,79 @@ public void acceptSearchMatch(SearchMatch match) throws CoreException {\n \t\t\t\t\t\tif (cf != null && cf.getSourceRange() != null) {\n \t\t\t\t\t\t\tlocation = JDTUtils.toLocation(cf, match.getOffset(), match.getLength());\n \t\t\t\t\t\t}\n+\t\t\t\t\t\tif (cf != null && location == null) {\n+\t\t\t\t\t\t\tContentProviderManager contentProvider = JavaLanguageServerPlugin.getContentProviderManager();\n+\t\t\t\t\t\t\tString contents = contentProvider.getSource(cf, new NullProgressMonitor());\n+\t\t\t\t\t\t\tif (contents != null) {\n+\t\t\t\t\t\t\t\tfinal ASTParser parser = ASTParser.newParser(IASTSharedValues.SHARED_AST_LEVEL);\n+\t\t\t\t\t\t\t\tparser.setResolveBindings(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90650bb673e8d9f255f377c53905642cfaf8efc7"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA3MTYyNw==", "bodyText": "I guess searching the full project can be a bit expensive ? If so this is fine.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#discussion_r552071627", "createdAt": "2021-01-05T17:13:08Z", "author": {"login": "rgrunber"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/JDTUtils.java", "diffHunk": "@@ -727,28 +727,17 @@ public static IJavaElement findElementAtSelection(ITypeRoot unit, int line, int\n \t\t\t\ttry {\r\n \t\t\t\t\toffset = document.getLineOffset(line) + column;\r\n \t\t\t\t\tif (offset > -1) {\r\n+\t\t\t\t\t\tif (offset > 0 && !isJavaIdentifierOrPeriod(contents.charAt(offset))) {\r\n+\t\t\t\t\t\t\toffset = offset - 1;\r\n+\t\t\t\t\t\t}\r\n \t\t\t\t\t\tString name = parse(contents, offset);\r\n \t\t\t\t\t\tif (name == null) {\r\n \t\t\t\t\t\t\treturn null;\r\n \t\t\t\t\t\t}\r\n-\t\t\t\t\t\tSearchPattern pattern = SearchPattern.createPattern(name, IJavaSearchConstants.TYPE,\r\n-\t\t\t\t\t\t\t\tIJavaSearchConstants.DECLARATIONS, SearchPattern.R_FULL_MATCH);\r\n-\r\n-\t\t\t\t\t\tIJavaSearchScope scope = createSearchScope(unit.getJavaProject(), preferenceManager);\r\n-\r\n-\t\t\t\t\t\tList<IJavaElement> elements = new ArrayList<>();\r\n-\t\t\t\t\t\tSearchRequestor requestor = new SearchRequestor() {\r\n-\t\t\t\t\t\t\t@Override\r\n-\t\t\t\t\t\t\tpublic void acceptSearchMatch(SearchMatch match) {\r\n-\t\t\t\t\t\t\t\tif (match.getElement() instanceof IJavaElement) {\r\n-\t\t\t\t\t\t\t\t\telements.add((IJavaElement) match.getElement());\r\n-\t\t\t\t\t\t\t\t}\r\n-\t\t\t\t\t\t\t}\r\n-\t\t\t\t\t\t};\r\n-\t\t\t\t\t\tSearchEngine searchEngine = new SearchEngine();\r\n-\t\t\t\t\t\tsearchEngine.search(pattern,\r\n-\t\t\t\t\t\t\t\tnew SearchParticipant[] { SearchEngine.getDefaultSearchParticipant() }, scope,\r\n-\t\t\t\t\t\t\t\trequestor, null);\r\n+\t\t\t\t\t\tList<IJavaElement> elements = search(unit, name, preferenceManager);\r\n+\t\t\t\t\t\tif (elements.isEmpty()) {\r\n+\t\t\t\t\t\t\telements = search(unit.getJavaProject(), name, preferenceManager);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90650bb673e8d9f255f377c53905642cfaf8efc7"}, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "90650bb673e8d9f255f377c53905642cfaf8efc7", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/90650bb673e8d9f255f377c53905642cfaf8efc7", "committedDate": "2020-12-15T21:41:18Z", "message": "search for enum reference without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}, "afterCommit": {"oid": "3558bc63abe63e1f9c8ae1ff970545e1e0038c42", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/3558bc63abe63e1f9c8ae1ff970545e1e0038c42", "committedDate": "2021-01-13T20:10:24Z", "message": "search for enum reference without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3558bc63abe63e1f9c8ae1ff970545e1e0038c42", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/3558bc63abe63e1f9c8ae1ff970545e1e0038c42", "committedDate": "2021-01-13T20:10:24Z", "message": "search for enum reference without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}, "afterCommit": {"oid": "9ce4d1390f69b4ace660770e8016b020e7c53722", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/9ce4d1390f69b4ace660770e8016b020e7c53722", "committedDate": "2021-01-13T23:59:53Z", "message": "search for enum reference without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY4OTkyMjkw", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#pullrequestreview-568992290", "createdAt": "2021-01-15T07:32:35Z", "commit": {"oid": "9ce4d1390f69b4ace660770e8016b020e7c53722"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwNzozMjozNVrOIUGcUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwNzozMjozNVrOIUGcUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzk0Nzk4NA==", "bodyText": "We can make this as a utility method. Both NavigateToDefinitionHandler and NavigateToTypeDefinitionHandler have the same need to convert position to a location of the disassembled source.\nBut when you reuse it for the 'Go to Definition' feature, you don't need parse the method body while resolving the dom because 'Go to Definition' never jumps to the method implementation.\nfinal ASTParser parser = ASTParser.newParser(IASTSharedValues.SHARED_AST_LEVEL);\nparser.setResolveBindings(false);\nparser.setKind(ASTParser.K_COMPILATION_UNIT);\nparser.setStatementsRecovery(false);\nparser.setBindingsRecovery(false);\nparser.setSource(contents.toCharArray());\nparser.setIgnoreMethodBodies(true);   <== No need to parse method body since 'go to definition' only jumps to the method declaration.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#discussion_r557947984", "createdAt": "2021-01-15T07:32:35Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/ReferencesHandler.java", "diffHunk": "@@ -149,6 +161,85 @@ public void acceptSearchMatch(SearchMatch match) throws CoreException {\n \t\t\t\t\t\tif (cf != null && cf.getSourceRange() != null) {\n \t\t\t\t\t\t\tlocation = JDTUtils.toLocation(cf, match.getOffset(), match.getLength());\n \t\t\t\t\t\t}\n+\t\t\t\t\t\tif (cf != null && location == null) {\n+\t\t\t\t\t\t\tContentProviderManager contentProvider = JavaLanguageServerPlugin.getContentProviderManager();\n+\t\t\t\t\t\t\tString contents = contentProvider.getSource(cf, new NullProgressMonitor());\n+\t\t\t\t\t\t\tif (contents != null) {\n+\t\t\t\t\t\t\t\tfinal ASTParser parser = ASTParser.newParser(IASTSharedValues.SHARED_AST_LEVEL);\n+\t\t\t\t\t\t\t\tparser.setResolveBindings(false);\n+\t\t\t\t\t\t\t\tparser.setKind(ASTParser.K_COMPILATION_UNIT);\n+\t\t\t\t\t\t\t\tparser.setStatementsRecovery(false);\n+\t\t\t\t\t\t\t\tparser.setBindingsRecovery(false);\n+\t\t\t\t\t\t\t\tparser.setSource(contents.toCharArray());\n+\t\t\t\t\t\t\t\tCompilationUnit unit = (CompilationUnit) parser.createAST(null);\n+\t\t\t\t\t\t\t\tfinal ASTNode[] nodes = new ASTNode[1];\n+\t\t\t\t\t\t\t\tunit.accept(new ASTVisitor() {\n+\n+\t\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\t\tpublic boolean visit(SimpleName node) {\n+\t\t\t\t\t\t\t\t\t\tif (element.getElementName().equals(node.getIdentifier())) {\n+\t\t\t\t\t\t\t\t\t\t\tif (find(element, nodes, node)) {\n+\t\t\t\t\t\t\t\t\t\t\t\treturn false;\n+\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\treturn super.visit(node);\n+\t\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\t\tprivate boolean find(IJavaElement element, final ASTNode[] nodes, SimpleName node) {\n+\t\t\t\t\t\t\t\t\t\tASTNode parent = node.getParent();\n+\t\t\t\t\t\t\t\t\t\tboolean found = false;\n+\t\t\t\t\t\t\t\t\t\tswitch (parent.getNodeType()) {\n+\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.ANNOTATION_TYPE_DECLARATION:\n+\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.ANNOTATION_TYPE_MEMBER_DECLARATION:\n+\t\t\t\t\t\t\t\t\t\t\t\tfound = element.getElementType() == IJavaElement.ANNOTATION;\n+\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.FIELD_DECLARATION:\n+\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.ENUM_CONSTANT_DECLARATION:\n+\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.ENUM_DECLARATION:\n+\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.FIELD_ACCESS:\n+\t\t\t\t\t\t\t\t\t\t\t\tfound = element.getElementType() == IJavaElement.FIELD;\n+\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.METHOD_DECLARATION:\n+\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.METHOD_INVOCATION:\n+\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.EXPRESSION_METHOD_REFERENCE:\n+\t\t\t\t\t\t\t\t\t\t\t\tfound = element.getElementType() == IJavaElement.METHOD;\n+\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.TYPE_DECLARATION:\n+\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.VARIABLE_DECLARATION_FRAGMENT:\n+\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.VARIABLE_DECLARATION_STATEMENT:\n+\t\t\t\t\t\t\t\t\t\t\tcase ASTNode.VARIABLE_DECLARATION_EXPRESSION:\n+\t\t\t\t\t\t\t\t\t\t\t\tfound = element.getElementType() == IJavaElement.TYPE || element.getElementType() == IJavaElement.FIELD || element.getElementType() == IJavaElement.METHOD;\n+\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\tif (found) {\n+\t\t\t\t\t\t\t\t\t\t\tnodes[0] = node;\n+\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\treturn found;\n+\t\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\t});\n+\t\t\t\t\t\t\t\tASTNode node = nodes[0];\n+\t\t\t\t\t\t\t\tif (node != null) {\n+\t\t\t\t\t\t\t\t\tString uriString = JDTUtils.toUri(cf);\n+\t\t\t\t\t\t\t\t\tint offset = node.getStartPosition();\n+\t\t\t\t\t\t\t\t\tint length = node.getLength();\n+\t\t\t\t\t\t\t\t\tRange range;\n+\t\t\t\t\t\t\t\t\tif (offset >= 0 && length > 0 && offset + length <= contents.length()) {\n+\t\t\t\t\t\t\t\t\t\tIDocument document = new Document(contents);\n+\t\t\t\t\t\t\t\t\t\tint[] start = JsonRpcHelpers.toLine(document, offset);\n+\t\t\t\t\t\t\t\t\t\tint[] end = JsonRpcHelpers.toLine(document, offset + length);\n+\t\t\t\t\t\t\t\t\t\trange = new Range(new Position(start[0], start[1]), new Position(end[0], end[1]));\n+\t\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\t\trange = new Range();\n+\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\tlocation = new Location(uriString, range);\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tlocation = JDTUtils.toLocation(cf, 0, 0);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce4d1390f69b4ace660770e8016b020e7c53722"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5MDQ2MTQw", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#pullrequestreview-569046140", "createdAt": "2021-01-15T08:21:11Z", "commit": {"oid": "9ce4d1390f69b4ace660770e8016b020e7c53722"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwODoyMToxMVrOIUKyDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwODoyMToxMVrOIUKyDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODAxOTA4Ng==", "bodyText": "The search engine is a long running job, it's better to pass the external progress monitor to make it cancellable.\nA typical scenario is hover operation. When you move mouse on the editor, it will trigger multiple hover requests, and the previous unfinished request will be cancelled by client. So you'd better to pass the external monitor to the search engine.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#discussion_r558019086", "createdAt": "2021-01-15T08:21:11Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/JDTUtils.java", "diffHunk": "@@ -727,28 +727,17 @@ public static IJavaElement findElementAtSelection(ITypeRoot unit, int line, int\n \t\t\t\ttry {\r\n \t\t\t\t\toffset = document.getLineOffset(line) + column;\r\n \t\t\t\t\tif (offset > -1) {\r\n+\t\t\t\t\t\tif (offset > 0 && !isJavaIdentifierOrPeriod(contents.charAt(offset))) {\r\n+\t\t\t\t\t\t\toffset = offset - 1;\r\n+\t\t\t\t\t\t}\r\n \t\t\t\t\t\tString name = parse(contents, offset);\r\n \t\t\t\t\t\tif (name == null) {\r\n \t\t\t\t\t\t\treturn null;\r\n \t\t\t\t\t\t}\r\n-\t\t\t\t\t\tSearchPattern pattern = SearchPattern.createPattern(name, IJavaSearchConstants.TYPE,\r\n-\t\t\t\t\t\t\t\tIJavaSearchConstants.DECLARATIONS, SearchPattern.R_FULL_MATCH);\r\n-\r\n-\t\t\t\t\t\tIJavaSearchScope scope = createSearchScope(unit.getJavaProject(), preferenceManager);\r\n-\r\n-\t\t\t\t\t\tList<IJavaElement> elements = new ArrayList<>();\r\n-\t\t\t\t\t\tSearchRequestor requestor = new SearchRequestor() {\r\n-\t\t\t\t\t\t\t@Override\r\n-\t\t\t\t\t\t\tpublic void acceptSearchMatch(SearchMatch match) {\r\n-\t\t\t\t\t\t\t\tif (match.getElement() instanceof IJavaElement) {\r\n-\t\t\t\t\t\t\t\t\telements.add((IJavaElement) match.getElement());\r\n-\t\t\t\t\t\t\t\t}\r\n-\t\t\t\t\t\t\t}\r\n-\t\t\t\t\t\t};\r\n-\t\t\t\t\t\tSearchEngine searchEngine = new SearchEngine();\r\n-\t\t\t\t\t\tsearchEngine.search(pattern,\r\n-\t\t\t\t\t\t\t\tnew SearchParticipant[] { SearchEngine.getDefaultSearchParticipant() }, scope,\r\n-\t\t\t\t\t\t\t\trequestor, null);\r\n+\t\t\t\t\t\tList<IJavaElement> elements = search(unit, name, preferenceManager);\r\n+\t\t\t\t\t\tif (elements.isEmpty()) {\r\n+\t\t\t\t\t\t\telements = search(unit.getJavaProject(), name, preferenceManager);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce4d1390f69b4ace660770e8016b020e7c53722"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5MTg4MjQw", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#pullrequestreview-569188240", "createdAt": "2021-01-15T11:42:39Z", "commit": {"oid": "9ce4d1390f69b4ace660770e8016b020e7c53722"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMTo0MjozOVrOIUZE6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMTo0MjozOVrOIUZE6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI1MzI5MA==", "bodyText": "Another idea is to add a preference like java.references.includeDecompiledSources to control whether to include the decompiled sources when finding references. The default value can be true. This is similar as java.references.includeAccessors.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#discussion_r558253290", "createdAt": "2021-01-15T11:42:39Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/ReferencesHandler.java", "diffHunk": "@@ -149,6 +161,85 @@ public void acceptSearchMatch(SearchMatch match) throws CoreException {\n \t\t\t\t\t\tif (cf != null && cf.getSourceRange() != null) {\n \t\t\t\t\t\t\tlocation = JDTUtils.toLocation(cf, match.getOffset(), match.getLength());\n \t\t\t\t\t\t}\n+\t\t\t\t\t\tif (cf != null && location == null) {\n+\t\t\t\t\t\t\tContentProviderManager contentProvider = JavaLanguageServerPlugin.getContentProviderManager();\n+\t\t\t\t\t\t\tString contents = contentProvider.getSource(cf, new NullProgressMonitor());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce4d1390f69b4ace660770e8016b020e7c53722"}, "originalPosition": 43}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ce4d1390f69b4ace660770e8016b020e7c53722", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/9ce4d1390f69b4ace660770e8016b020e7c53722", "committedDate": "2021-01-13T23:59:53Z", "message": "search for enum reference without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}, "afterCommit": {"oid": "f60e209a3590f751cd35dcb643d2f14a4acd4062", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/f60e209a3590f751cd35dcb643d2f14a4acd4062", "committedDate": "2021-01-18T20:40:26Z", "message": "search for references from IClassFile without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwODYxNzA3", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#pullrequestreview-570861707", "createdAt": "2021-01-19T02:18:21Z", "commit": {"oid": "f60e209a3590f751cd35dcb643d2f14a4acd4062"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwMjoxODoyMVrOIV7-pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwMzoxOTo0NVrOIV89Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg3MzcwMw==", "bodyText": "i would prefer to remove this check because only one instruction if (offset > -1) has been performed since the last check.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#discussion_r559873703", "createdAt": "2021-01-19T02:18:21Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/JDTUtils.java", "diffHunk": "@@ -715,9 +719,15 @@ public static IJavaElement findElementAtSelection(ITypeRoot unit, int line, int\n \t\t\treturn null;\r\n \t\t}\r\n \t\tint offset = JsonRpcHelpers.toOffset(unit.getBuffer(), line, column);\r\n+\t\tif (monitor != null && monitor.isCanceled()) {\r\n+\t\t\treturn null;\r\n+\t\t}\r\n \t\tif (offset > -1) {\r\n \t\t\treturn unit.codeSelect(offset, 0);\r\n \t\t}\r\n+\t\tif (monitor != null && monitor.isCanceled()) {\r\n+\t\t\treturn null;\r\n+\t\t}\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f60e209a3590f751cd35dcb643d2f14a4acd4062"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg3NDU3OQ==", "bodyText": "I would suggest that there is no need to add a cancellation check inside a loop that runs quickly.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#discussion_r559874579", "createdAt": "2021-01-19T02:21:42Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/JDTUtils.java", "diffHunk": "@@ -759,18 +764,57 @@ public void acceptSearchMatch(SearchMatch match) {\n \t\treturn null;\r\n \t}\r\n \r\n-\tprivate static String parse(String contents, int offset) {\r\n+\tprivate static List<IJavaElement> search(IJavaElement element, String name, PreferenceManager preferenceManager, IProgressMonitor monitor) throws CoreException {\r\n+\t\tSearchPattern typePattern = SearchPattern.createPattern(name, IJavaSearchConstants.TYPE, IJavaSearchConstants.DECLARATIONS, SearchPattern.R_FULL_MATCH | SearchPattern.R_CASE_SENSITIVE);\r\n+\t\tSearchPattern fieldPattern = SearchPattern.createPattern(name, IJavaSearchConstants.FIELD, IJavaSearchConstants.DECLARATIONS, SearchPattern.R_FULL_MATCH | SearchPattern.R_CASE_SENSITIVE);\r\n+\t\tSearchPattern methodPattern = SearchPattern.createPattern(name, IJavaSearchConstants.METHOD, IJavaSearchConstants.DECLARATIONS, SearchPattern.R_FULL_MATCH | SearchPattern.R_CASE_SENSITIVE);\r\n+\t\tSearchPattern pattern = SearchPattern.createOrPattern(typePattern, fieldPattern);\r\n+\t\tpattern = SearchPattern.createOrPattern(pattern, methodPattern);\r\n+\t\tIJavaSearchScope scope = createSearchScope(element, preferenceManager);\r\n+\t\tif (monitor != null && monitor.isCanceled()) {\r\n+\t\t\treturn Collections.emptyList();\r\n+\t\t}\r\n+\t\tList<IJavaElement> elements = new ArrayList<>();\r\n+\t\tSearchRequestor requestor = new SearchRequestor() {\r\n+\t\t\t@Override\r\n+\t\t\tpublic void acceptSearchMatch(SearchMatch match) {\r\n+\t\t\t\tif (monitor != null && monitor.isCanceled()) {\r\n+\t\t\t\t\treturn;\r\n+\t\t\t\t}\r\n+\t\t\t\tif (match.getElement() instanceof IJavaElement) {\r\n+\t\t\t\t\telements.add((IJavaElement) match.getElement());\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t};\r\n+\t\tSearchEngine searchEngine = new SearchEngine();\r\n+\t\tsearchEngine.search(pattern, new SearchParticipant[] { SearchEngine.getDefaultSearchParticipant() }, scope, requestor, monitor);\r\n+\t\tif (monitor != null && monitor.isCanceled()) {\r\n+\t\t\treturn Collections.emptyList();\r\n+\t\t}\r\n+\t\treturn elements;\r\n+\t}\r\n+\r\n+\tprivate static String parse(String contents, int offset, IProgressMonitor monitor) {\r\n \t\tif (contents == null || offset < 0 || contents.length() < offset\r\n \t\t\t\t|| !isJavaIdentifierOrPeriod(contents.charAt(offset))) {\r\n \t\t\treturn null;\r\n \t\t}\r\n \t\tint start = offset;\r\n \t\twhile (start - 1 > -1 && isJavaIdentifierOrPeriod(contents.charAt(start - 1))) {\r\n \t\t\tstart--;\r\n+\t\t\tif (monitor != null && monitor.isCanceled()) {\r\n+\t\t\t\treturn null;\r\n+\t\t\t}\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f60e209a3590f751cd35dcb643d2f14a4acd4062"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg3NDc2Mw==", "bodyText": "Remove the cancellation check as the same reason as above.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#discussion_r559874763", "createdAt": "2021-01-19T02:22:24Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/JDTUtils.java", "diffHunk": "@@ -759,18 +764,57 @@ public void acceptSearchMatch(SearchMatch match) {\n \t\treturn null;\r\n \t}\r\n \r\n-\tprivate static String parse(String contents, int offset) {\r\n+\tprivate static List<IJavaElement> search(IJavaElement element, String name, PreferenceManager preferenceManager, IProgressMonitor monitor) throws CoreException {\r\n+\t\tSearchPattern typePattern = SearchPattern.createPattern(name, IJavaSearchConstants.TYPE, IJavaSearchConstants.DECLARATIONS, SearchPattern.R_FULL_MATCH | SearchPattern.R_CASE_SENSITIVE);\r\n+\t\tSearchPattern fieldPattern = SearchPattern.createPattern(name, IJavaSearchConstants.FIELD, IJavaSearchConstants.DECLARATIONS, SearchPattern.R_FULL_MATCH | SearchPattern.R_CASE_SENSITIVE);\r\n+\t\tSearchPattern methodPattern = SearchPattern.createPattern(name, IJavaSearchConstants.METHOD, IJavaSearchConstants.DECLARATIONS, SearchPattern.R_FULL_MATCH | SearchPattern.R_CASE_SENSITIVE);\r\n+\t\tSearchPattern pattern = SearchPattern.createOrPattern(typePattern, fieldPattern);\r\n+\t\tpattern = SearchPattern.createOrPattern(pattern, methodPattern);\r\n+\t\tIJavaSearchScope scope = createSearchScope(element, preferenceManager);\r\n+\t\tif (monitor != null && monitor.isCanceled()) {\r\n+\t\t\treturn Collections.emptyList();\r\n+\t\t}\r\n+\t\tList<IJavaElement> elements = new ArrayList<>();\r\n+\t\tSearchRequestor requestor = new SearchRequestor() {\r\n+\t\t\t@Override\r\n+\t\t\tpublic void acceptSearchMatch(SearchMatch match) {\r\n+\t\t\t\tif (monitor != null && monitor.isCanceled()) {\r\n+\t\t\t\t\treturn;\r\n+\t\t\t\t}\r\n+\t\t\t\tif (match.getElement() instanceof IJavaElement) {\r\n+\t\t\t\t\telements.add((IJavaElement) match.getElement());\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t};\r\n+\t\tSearchEngine searchEngine = new SearchEngine();\r\n+\t\tsearchEngine.search(pattern, new SearchParticipant[] { SearchEngine.getDefaultSearchParticipant() }, scope, requestor, monitor);\r\n+\t\tif (monitor != null && monitor.isCanceled()) {\r\n+\t\t\treturn Collections.emptyList();\r\n+\t\t}\r\n+\t\treturn elements;\r\n+\t}\r\n+\r\n+\tprivate static String parse(String contents, int offset, IProgressMonitor monitor) {\r\n \t\tif (contents == null || offset < 0 || contents.length() < offset\r\n \t\t\t\t|| !isJavaIdentifierOrPeriod(contents.charAt(offset))) {\r\n \t\t\treturn null;\r\n \t\t}\r\n \t\tint start = offset;\r\n \t\twhile (start - 1 > -1 && isJavaIdentifierOrPeriod(contents.charAt(start - 1))) {\r\n \t\t\tstart--;\r\n+\t\t\tif (monitor != null && monitor.isCanceled()) {\r\n+\t\t\t\treturn null;\r\n+\t\t\t}\r\n \t\t}\r\n \t\tint end = offset;\r\n \t\twhile (end <= contents.length() && isJavaIdentifierOrPeriod(contents.charAt(end))) {\r\n \t\t\tend++;\r\n+\t\t\tif (monitor != null && monitor.isCanceled()) {\r\n+\t\t\t\treturn null;\r\n+\t\t\t}\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f60e209a3590f751cd35dcb643d2f14a4acd4062"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg4OTY5OQ==", "bodyText": "The search based approach is just using the element name to match the result, that is not accurate in some cases. Also it cannot find local variable.\nFor example, the sample code below is the decompiled source for Gson class, which contains two overload methods toGson. If i select the second method toGson and call findElementAtSelection, it will return me with the first toGson method, that's not accurate.\npublic final class Gson {\n   ...\n   public String toJson(Object src) {\n      return src == null ? this.toJson((JsonElement)JsonNull.INSTANCE) : this.toJson((Object)src, (Type)src.getClass());\n   }\n\n   public String toJson(Object src, Type typeOfSrc) {\n      StringWriter writer = new StringWriter();\n      this.toJson(src, typeOfSrc, (Appendable)writer);\n      return writer.toString();\n   }\n}\n\nI'm thinking whether to have a better approach to resolve the selected element.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#discussion_r559889699", "createdAt": "2021-01-19T03:19:45Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/JDTUtils.java", "diffHunk": "@@ -727,28 +737,23 @@ public static IJavaElement findElementAtSelection(ITypeRoot unit, int line, int\n \t\t\t\ttry {\r\n \t\t\t\t\toffset = document.getLineOffset(line) + column;\r\n \t\t\t\t\tif (offset > -1) {\r\n-\t\t\t\t\t\tString name = parse(contents, offset);\r\n+\t\t\t\t\t\tif (offset > 0 && !isJavaIdentifierOrPeriod(contents.charAt(offset))) {\r\n+\t\t\t\t\t\t\toffset = offset - 1;\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t\tif (monitor != null && monitor.isCanceled()) {\r\n+\t\t\t\t\t\t\treturn null;\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t\tString name = parse(contents, offset, monitor);\r\n \t\t\t\t\t\tif (name == null) {\r\n \t\t\t\t\t\t\treturn null;\r\n \t\t\t\t\t\t}\r\n-\t\t\t\t\t\tSearchPattern pattern = SearchPattern.createPattern(name, IJavaSearchConstants.TYPE,\r\n-\t\t\t\t\t\t\t\tIJavaSearchConstants.DECLARATIONS, SearchPattern.R_FULL_MATCH);\r\n-\r\n-\t\t\t\t\t\tIJavaSearchScope scope = createSearchScope(unit.getJavaProject(), preferenceManager);\r\n-\r\n-\t\t\t\t\t\tList<IJavaElement> elements = new ArrayList<>();\r\n-\t\t\t\t\t\tSearchRequestor requestor = new SearchRequestor() {\r\n-\t\t\t\t\t\t\t@Override\r\n-\t\t\t\t\t\t\tpublic void acceptSearchMatch(SearchMatch match) {\r\n-\t\t\t\t\t\t\t\tif (match.getElement() instanceof IJavaElement) {\r\n-\t\t\t\t\t\t\t\t\telements.add((IJavaElement) match.getElement());\r\n-\t\t\t\t\t\t\t\t}\r\n-\t\t\t\t\t\t\t}\r\n-\t\t\t\t\t\t};\r\n-\t\t\t\t\t\tSearchEngine searchEngine = new SearchEngine();\r\n-\t\t\t\t\t\tsearchEngine.search(pattern,\r\n-\t\t\t\t\t\t\t\tnew SearchParticipant[] { SearchEngine.getDefaultSearchParticipant() }, scope,\r\n-\t\t\t\t\t\t\t\trequestor, null);\r\n+\t\t\t\t\t\tif (monitor != null && monitor.isCanceled()) {\r\n+\t\t\t\t\t\t\treturn null;\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t\tList<IJavaElement> elements = search(unit, name, preferenceManager, monitor);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f60e209a3590f751cd35dcb643d2f14a4acd4062"}, "originalPosition": 72}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f60e209a3590f751cd35dcb643d2f14a4acd4062", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/f60e209a3590f751cd35dcb643d2f14a4acd4062", "committedDate": "2021-01-18T20:40:26Z", "message": "search for references from IClassFile without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}, "afterCommit": {"oid": "2c977c286312394a407c5e442a42030158cb08cc", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/2c977c286312394a407c5e442a42030158cb08cc", "committedDate": "2021-01-20T19:31:24Z", "message": "search for references from IClassFile without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c977c286312394a407c5e442a42030158cb08cc", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/2c977c286312394a407c5e442a42030158cb08cc", "committedDate": "2021-01-20T19:31:24Z", "message": "search for references from IClassFile without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}, "afterCommit": {"oid": "894cb03a4093913e0149e90d4342703e2701c96c", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/894cb03a4093913e0149e90d4342703e2701c96c", "committedDate": "2021-01-28T19:24:26Z", "message": "search for references from IClassFile without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "894cb03a4093913e0149e90d4342703e2701c96c", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/894cb03a4093913e0149e90d4342703e2701c96c", "committedDate": "2021-01-28T19:24:26Z", "message": "search for references from IClassFile without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}, "afterCommit": {"oid": "ab42a9cf1bb73fbdd2f54752102cfa7858d0798a", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/ab42a9cf1bb73fbdd2f54752102cfa7858d0798a", "committedDate": "2021-02-01T17:55:46Z", "message": "search for references from IClassFile without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgyMDc0NTcw", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#pullrequestreview-582074570", "createdAt": "2021-02-03T07:39:27Z", "commit": {"oid": "ab42a9cf1bb73fbdd2f54752102cfa7858d0798a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwNzozOToyN1rOIe0kSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwODozNDo1NVrOIe2ffA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTE4OTQ1MQ==", "bodyText": "Why not to use ITypeRoot.getWorkingCopy() method directly? What's the difference between this one and ITypeRoot.getWorkingCopy()?", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#discussion_r569189451", "createdAt": "2021-02-03T07:39:27Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/JDTUtils.java", "diffHunk": "@@ -1403,4 +1713,83 @@ public static IMethod resolveMethod(CompletionProposal proposal, IJavaProject ja\n \t\treturn null;\r\n \t}\r\n \r\n+\tpublic static Location searchDecompiledSources(IJavaElement element, IClassFile classFile, boolean ignoreMethodBody, IProgressMonitor monitor) throws JavaModelException {\r\n+\t\tContentProviderManager contentProvider = JavaLanguageServerPlugin.getContentProviderManager();\r\n+\t\tString contents = contentProvider.getSource(classFile, new NullProgressMonitor());\r\n+\t\tLocation location = null;\r\n+\t\tif (monitor != null && monitor.isCanceled()) {\r\n+\t\t\treturn location;\r\n+\t\t}\r\n+\t\tif (contents != null) {\r\n+\t\t\tICompilationUnit workingCopy = null;\r\n+\t\t\tworkingCopy = getWorkingCopy(classFile, contents, monitor);\r\n+\t\t\ttry {\r\n+\t\t\t\tfinal ASTParser parser = ASTParser.newParser(IASTSharedValues.SHARED_AST_LEVEL);\r\n+\t\t\t\tparser.setResolveBindings(true);\r\n+\t\t\t\tparser.setKind(ASTParser.K_COMPILATION_UNIT);\r\n+\t\t\t\tparser.setStatementsRecovery(false);\r\n+\t\t\t\tparser.setBindingsRecovery(false);\r\n+\t\t\t\tparser.setSource(workingCopy);\r\n+\t\t\t\tparser.setIgnoreMethodBodies(ignoreMethodBody);\r\n+\t\t\t\tCompilationUnit unit = (CompilationUnit) parser.createAST(monitor);\r\n+\t\t\t\tfinal ASTNode[] nodes = new ASTNode[1];\r\n+\t\t\t\tif (monitor != null && monitor.isCanceled()) {\r\n+\t\t\t\t\treturn location;\r\n+\t\t\t\t}\r\n+\t\t\t\tunit.accept(new ClassFileVisitor(element, nodes, monitor));\r\n+\t\t\t\tASTNode node = nodes[0];\r\n+\t\t\t\tif (monitor != null && monitor.isCanceled()) {\r\n+\t\t\t\t\treturn location;\r\n+\t\t\t\t}\r\n+\t\t\t\tif (node != null) {\r\n+\t\t\t\t\tString uriString = JDTUtils.toUri(classFile);\r\n+\t\t\t\t\tint offset = node.getStartPosition();\r\n+\t\t\t\t\tint length = node.getLength();\r\n+\t\t\t\t\tRange range;\r\n+\t\t\t\t\tif (offset >= 0 && length > 0 && offset + length <= contents.length()) {\r\n+\t\t\t\t\t\tIDocument document = new Document(contents);\r\n+\t\t\t\t\t\tint[] start = JsonRpcHelpers.toLine(document, offset);\r\n+\t\t\t\t\t\tint[] end = JsonRpcHelpers.toLine(document, offset + length);\r\n+\t\t\t\t\t\trange = new Range(new Position(start[0], start[1]), new Position(end[0], end[1]));\r\n+\t\t\t\t\t} else {\r\n+\t\t\t\t\t\trange = new Range();\r\n+\t\t\t\t\t}\r\n+\t\t\t\t\tlocation = new Location(uriString, range);\r\n+\t\t\t\t} else {\r\n+\t\t\t\t\tlocation = JDTUtils.toLocation(classFile, 0, 0);\r\n+\t\t\t\t}\r\n+\t\t\t} finally {\r\n+\t\t\t\tif (workingCopy != null) {\r\n+\t\t\t\t\tworkingCopy.discardWorkingCopy();\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn location;\r\n+\t}\r\n+\r\n+\tpublic static ICompilationUnit getWorkingCopy(IClassFile classFile, String contents, IProgressMonitor monitor) throws JavaModelException {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab42a9cf1bb73fbdd2f54752102cfa7858d0798a"}, "originalPosition": 511}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTE5NTgyNg==", "bodyText": "i would add check to bypass those class file with source jar attached to avoid creating workingCopy for them.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#discussion_r569195826", "createdAt": "2021-02-03T07:51:56Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/HoverInfoProvider.java", "diffHunk": "@@ -90,11 +91,22 @@ public HoverInfoProvider(ITypeRoot aUnit, PreferenceManager preferenceManager) {\n \n \tpublic List<Either<String, MarkedString>> computeHover(int line, int column, IProgressMonitor monitor) {\n \t\tList<Either<String, MarkedString>> res = new LinkedList<>();\n+\t\tICompilationUnit workingCopy = null;\n \t\ttry {\n \t\t\tif (monitor.isCanceled()) {\n \t\t\t\treturn cancelled(res);\n \t\t\t}\n-\t\t\tIJavaElement[] elements = JDTUtils.findElementsAtSelection(unit, line, column, this.preferenceManager, monitor);\n+\t\t\tITypeRoot typeRoot = unit;\n+\t\t\tif (unit instanceof IClassFile && preferenceManager.getPreferences().isIncludeDecompiledSources()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab42a9cf1bb73fbdd2f54752102cfa7858d0798a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTIyMDk4OA==", "bodyText": "The codeSelect above already returns a JavaElement, it it possible to make other places to use this result directly? I didn't get the point to use search engine to search the element again.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#discussion_r569220988", "createdAt": "2021-02-03T08:34:55Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/JDTUtils.java", "diffHunk": "@@ -715,46 +887,170 @@ public static IJavaElement findElementAtSelection(ITypeRoot unit, int line, int\n \t\t\treturn null;\r\n \t\t}\r\n \t\tint offset = JsonRpcHelpers.toOffset(unit.getBuffer(), line, column);\r\n+\t\tif (monitor != null && monitor.isCanceled()) {\r\n+\t\t\treturn null;\r\n+\t\t}\r\n \t\tif (offset > -1) {\r\n \t\t\treturn unit.codeSelect(offset, 0);\r\n \t\t}\r\n \t\tif (unit instanceof IClassFile) {\r\n \t\t\tIClassFile classFile = (IClassFile) unit;\r\n \t\t\tContentProviderManager contentProvider = JavaLanguageServerPlugin.getContentProviderManager();\r\n \t\t\tString contents = contentProvider.getSource(classFile, monitor);\r\n-\t\t\tif (contents != null) {\r\n+\t\t\tif (contents != null && !contents.isBlank()) {\r\n \t\t\t\tIDocument document = new Document(contents);\r\n+\t\t\t\tICompilationUnit workingCopy = null;\r\n \t\t\t\ttry {\r\n \t\t\t\t\toffset = document.getLineOffset(line) + column;\r\n \t\t\t\t\tif (offset > -1) {\r\n-\t\t\t\t\t\tString name = parse(contents, offset);\r\n-\t\t\t\t\t\tif (name == null) {\r\n+\t\t\t\t\t\tif (offset > 0 && !isJavaIdentifierOrPeriod(contents.charAt(offset))) {\r\n+\t\t\t\t\t\t\toffset = offset - 1;\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t\tif (monitor != null && monitor.isCanceled()) {\r\n+\t\t\t\t\t\t\treturn null;\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t\tIRegion region = parseRegion(contents, offset);\r\n+\t\t\t\t\t\tif (region == null) {\r\n \t\t\t\t\t\t\treturn null;\r\n \t\t\t\t\t\t}\r\n-\t\t\t\t\t\tSearchPattern pattern = SearchPattern.createPattern(name, IJavaSearchConstants.TYPE,\r\n-\t\t\t\t\t\t\t\tIJavaSearchConstants.DECLARATIONS, SearchPattern.R_FULL_MATCH);\r\n-\r\n-\t\t\t\t\t\tIJavaSearchScope scope = createSearchScope(unit.getJavaProject(), preferenceManager);\r\n-\r\n-\t\t\t\t\t\tList<IJavaElement> elements = new ArrayList<>();\r\n-\t\t\t\t\t\tSearchRequestor requestor = new SearchRequestor() {\r\n-\t\t\t\t\t\t\t@Override\r\n-\t\t\t\t\t\t\tpublic void acceptSearchMatch(SearchMatch match) {\r\n-\t\t\t\t\t\t\t\tif (match.getElement() instanceof IJavaElement) {\r\n-\t\t\t\t\t\t\t\t\telements.add((IJavaElement) match.getElement());\r\n-\t\t\t\t\t\t\t\t}\r\n+\t\t\t\t\t\tif (monitor != null && monitor.isCanceled()) {\r\n+\t\t\t\t\t\t\treturn null;\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t\tworkingCopy = unit.getWorkingCopy(new WorkingCopyOwner() {\r\n+\t\t\t\t\t\t}, monitor);\r\n+\t\t\t\t\t\tworkingCopy.getBuffer().setContents(contents);\r\n+\t\t\t\t\t\tworkingCopy.becomeWorkingCopy(monitor);\r\n+\t\t\t\t\t\tworkingCopy.makeConsistent(monitor);\r\n+\t\t\t\t\t\tIJavaElement[] sourceElements = workingCopy.codeSelect(region.getOffset(), region.getLength());\r\n+\t\t\t\t\t\tif (sourceElements == null || sourceElements.length == 0) {\r\n+\t\t\t\t\t\t\treturn null;\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t\tIJavaElement element;\r\n+\t\t\t\t\t\tif (sourceElements.length != 1) {\r\n+\t\t\t\t\t\t\t// they could be package fragments.\r\n+\t\t\t\t\t\t\t// We need to select the one that matches the package fragment of the current unit\r\n+\t\t\t\t\t\t\tIPackageFragment packageFragment = (IPackageFragment) unit.getParent();\r\n+\t\t\t\t\t\t\tIJavaElement found = Stream.of(sourceElements).filter(e -> e.equals(packageFragment)).findFirst().orElse(null);\r\n+\t\t\t\t\t\t\tif (found == null) {\r\n+\t\t\t\t\t\t\t\t// this would be a binary package fragment\r\n+\t\t\t\t\t\t\t\telement = sourceElements[0];\r\n+\t\t\t\t\t\t\t} else {\r\n+\t\t\t\t\t\t\t\telement = found;\r\n \t\t\t\t\t\t\t}\r\n-\t\t\t\t\t\t};\r\n-\t\t\t\t\t\tSearchEngine searchEngine = new SearchEngine();\r\n-\t\t\t\t\t\tsearchEngine.search(pattern,\r\n-\t\t\t\t\t\t\t\tnew SearchParticipant[] { SearchEngine.getDefaultSearchParticipant() }, scope,\r\n-\t\t\t\t\t\t\t\trequestor, null);\r\n+\t\t\t\t\t\t} else {\r\n+\t\t\t\t\t\t\telement = sourceElements[0];\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t\tString name = contents.substring(region.getOffset(), region.getOffset() + region.getLength());\r\n+\t\t\t\t\t\tList<IJavaElement> elements = search(unit, name, element, preferenceManager, monitor);\r\n+\t\t\t\t\t\tif (monitor != null && monitor.isCanceled()) {\r\n+\t\t\t\t\t\t\treturn null;\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t\tif (elements.isEmpty()) {\r\n+\t\t\t\t\t\t\telements = search(unit.getJavaProject(), name, element, preferenceManager, monitor);\r\n+\t\t\t\t\t\t}\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab42a9cf1bb73fbdd2f54752102cfa7858d0798a"}, "originalPosition": 325}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab42a9cf1bb73fbdd2f54752102cfa7858d0798a", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/ab42a9cf1bb73fbdd2f54752102cfa7858d0798a", "committedDate": "2021-02-01T17:55:46Z", "message": "search for references from IClassFile without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}, "afterCommit": {"oid": "85be40f94d6b27b737c52f42cb3047d7404409c7", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/85be40f94d6b27b737c52f42cb3047d7404409c7", "committedDate": "2021-02-03T20:42:08Z", "message": "search for references from IClassFile without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "85be40f94d6b27b737c52f42cb3047d7404409c7", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/85be40f94d6b27b737c52f42cb3047d7404409c7", "committedDate": "2021-02-03T20:42:08Z", "message": "search for references from IClassFile without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}, "afterCommit": {"oid": "34aa411285f465eb08c2c5f95647323d19e3fa1f", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/34aa411285f465eb08c2c5f95647323d19e3fa1f", "committedDate": "2021-02-05T20:27:40Z", "message": "search for references from IClassFile without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "34aa411285f465eb08c2c5f95647323d19e3fa1f", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/34aa411285f465eb08c2c5f95647323d19e3fa1f", "committedDate": "2021-02-05T20:27:40Z", "message": "search for references from IClassFile without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}, "afterCommit": {"oid": "a7ba70d9bddbf1f4bd50ba6d245eea0639da5c38", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/a7ba70d9bddbf1f4bd50ba6d245eea0639da5c38", "committedDate": "2021-02-06T18:33:36Z", "message": "search for references from IClassFile without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0OTgzMzY5", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#pullrequestreview-584983369", "createdAt": "2021-02-07T07:34:04Z", "commit": {"oid": "a7ba70d9bddbf1f4bd50ba6d245eea0639da5c38"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNzozNDowNFrOIhF_vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNzo1MDowNVrOIhGG3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTU3MjE1OA==", "bodyText": "monitor2 -> monitor", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#discussion_r571572158", "createdAt": "2021-02-07T07:34:04Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/JDTUtils.java", "diffHunk": "@@ -394,16 +402,207 @@ public static IClassFile resolveClassFile(URI uri){\n \t * @return either a class file or compilation unit\r\n \t */\r\n \tpublic static ITypeRoot resolveTypeRoot(String uriString) {\r\n+\t\treturn resolveTypeRoot(uriString, false, null);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Convenience method that combines {@link #resolveClassFile(String)} and\r\n+\t * {@link #resolveCompilationUnit(String)}.\r\n+\t *\r\n+\t * @param uri\r\n+\t * @param returnCompilationUnit\r\n+\t * @param monitor2\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7ba70d9bddbf1f4bd50ba6d245eea0639da5c38"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTU3Mjg1NA==", "bodyText": "how about naming it as discardClassFileWorkingCopy?", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#discussion_r571572854", "createdAt": "2021-02-07T07:40:06Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/JDTUtils.java", "diffHunk": "@@ -394,16 +402,207 @@ public static IClassFile resolveClassFile(URI uri){\n \t * @return either a class file or compilation unit\r\n \t */\r\n \tpublic static ITypeRoot resolveTypeRoot(String uriString) {\r\n+\t\treturn resolveTypeRoot(uriString, false, null);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Convenience method that combines {@link #resolveClassFile(String)} and\r\n+\t * {@link #resolveCompilationUnit(String)}.\r\n+\t *\r\n+\t * @param uri\r\n+\t * @param returnCompilationUnit\r\n+\t * @param monitor2\r\n+\t * @return either a class file or compilation unit\r\n+\t */\r\n+\tpublic static ITypeRoot resolveTypeRoot(String uriString, boolean returnCompilationUnit, IProgressMonitor monitor) {\r\n \t\tURI uri = toURI(uriString);\r\n \t\tif (uri == null) {\r\n \t\t\treturn null;\r\n \t\t}\r\n \t\tif (JDT_SCHEME.equals(uri.getScheme())) {\r\n-\t\t\treturn resolveClassFile(uri);\r\n+\t\t\tIClassFile classFile = resolveClassFile(uri);\r\n+\t\t\ttry {\r\n+\t\t\t\tif (returnCompilationUnit && classFile != null && classFile.getSourceRange() == null) {\r\n+\t\t\t\t\tContentProviderManager contentProvider = JavaLanguageServerPlugin.getContentProviderManager();\r\n+\t\t\t\t\tString contents = contentProvider.getSource(classFile, new NullProgressMonitor());\r\n+\t\t\t\t\tif (contents != null && !contents.isBlank()) {\r\n+\t\t\t\t\t\treturn getWorkingCopy(classFile, contents, monitor);\r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t} catch (JavaModelException e) {\r\n+\t\t\t\tJavaLanguageServerPlugin.logException(e.getMessage(), e);\r\n+\t\t\t}\r\n+\t\t\treturn classFile;\r\n \t\t}\r\n \t\treturn resolveCompilationUnit(uri);\r\n \t}\r\n \r\n+\tpublic static void discardWorkingCopy(ITypeRoot unit) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7ba70d9bddbf1f4bd50ba6d245eea0639da5c38"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTU3MzQ0OQ==", "bodyText": "I just searched the code and this new helper method is unused. You can remove it.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#discussion_r571573449", "createdAt": "2021-02-07T07:45:54Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/JDTUtils.java", "diffHunk": "@@ -937,6 +1100,20 @@ public static IJavaSearchScope createSearchScope(IJavaProject project, Preferenc\n \t\treturn SearchEngine.createJavaSearchScope(elements, scope);\r\n \t}\r\n \r\n+\tpublic static IJavaSearchScope createSearchScope(IJavaElement element, PreferenceManager preferenceManager) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7ba70d9bddbf1f4bd50ba6d245eea0639da5c38"}, "originalPosition": 392}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTU3Mzk4MQ==", "bodyText": "merge them to one line.\nICompilationUnit workingCopy = getWorkingCopy(classFile, contents, monitor);", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#discussion_r571573981", "createdAt": "2021-02-07T07:50:05Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/JDTUtils.java", "diffHunk": "@@ -1403,4 +1580,123 @@ public static IMethod resolveMethod(CompletionProposal proposal, IJavaProject ja\n \t\treturn null;\r\n \t}\r\n \r\n+\tpublic static List<Location> searchDecompiledSources(IJavaElement element, IClassFile classFile, boolean ignoreMethodBody, boolean declaration, IProgressMonitor monitor) throws JavaModelException {\r\n+\t\tPreferenceManager preferencesManager = JavaLanguageServerPlugin.getPreferencesManager();\r\n+\t\tif (preferencesManager == null || !preferencesManager.isClientSupportsClassFileContent() || !preferencesManager.getPreferences().isIncludeDecompiledSources()) {\r\n+\t\t\treturn Collections.emptyList();\r\n+\t\t}\r\n+\t\tContentProviderManager contentProvider = JavaLanguageServerPlugin.getContentProviderManager();\r\n+\t\tString contents = contentProvider.getSource(classFile, new NullProgressMonitor());\r\n+\t\tif (monitor != null && monitor.isCanceled()) {\r\n+\t\t\treturn Collections.emptyList();\r\n+\t\t}\r\n+\t\tList<Location> locations = new ArrayList<>();\r\n+\t\tif (contents != null && !contents.isBlank()) {\r\n+\t\t\tICompilationUnit workingCopy = null;\r\n+\t\t\tworkingCopy = getWorkingCopy(classFile, contents, monitor);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7ba70d9bddbf1f4bd50ba6d245eea0639da5c38"}, "originalPosition": 426}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a7ba70d9bddbf1f4bd50ba6d245eea0639da5c38", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/a7ba70d9bddbf1f4bd50ba6d245eea0639da5c38", "committedDate": "2021-02-06T18:33:36Z", "message": "search for references from IClassFile without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}, "afterCommit": {"oid": "aec27b73314f7dc7c8b104a9eec64841450e2509", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/aec27b73314f7dc7c8b104a9eec64841450e2509", "committedDate": "2021-02-07T18:59:44Z", "message": "search for references from IClassFile without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg2ODcxMTY0", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#pullrequestreview-586871164", "createdAt": "2021-02-09T18:35:00Z", "commit": {"oid": "aec27b73314f7dc7c8b104a9eec64841450e2509"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxODozNTowMFrOIilZYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxODozNTowMFrOIilZYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzNTIwMw==", "bodyText": "I don't think unit is ever a ClassFileWorkingCopy for me. Is there a specific case where this should happen ?", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#discussion_r573135203", "createdAt": "2021-02-09T18:35:00Z", "author": {"login": "rgrunber"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/JDTUtils.java", "diffHunk": "@@ -394,16 +402,216 @@ public static IClassFile resolveClassFile(URI uri){\n \t * @return either a class file or compilation unit\r\n \t */\r\n \tpublic static ITypeRoot resolveTypeRoot(String uriString) {\r\n+\t\treturn resolveTypeRoot(uriString, false, null);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Convenience method that combines {@link #resolveClassFile(String)} and\r\n+\t * {@link #resolveCompilationUnit(String)}.\r\n+\t *\r\n+\t * @param uri\r\n+\t * @param returnCompilationUnit\r\n+\t * @param monitor\r\n+\t * @return either a class file or compilation unit\r\n+\t */\r\n+\tpublic static ITypeRoot resolveTypeRoot(String uriString, boolean returnCompilationUnit, IProgressMonitor monitor) {\r\n \t\tURI uri = toURI(uriString);\r\n \t\tif (uri == null) {\r\n \t\t\treturn null;\r\n \t\t}\r\n \t\tif (JDT_SCHEME.equals(uri.getScheme())) {\r\n-\t\t\treturn resolveClassFile(uri);\r\n+\t\t\tIClassFile classFile = resolveClassFile(uri);\r\n+\t\t\ttry {\r\n+\t\t\t\tif (returnCompilationUnit && classFile != null && classFile.getSourceRange() == null) {\r\n+\t\t\t\t\tContentProviderManager contentProvider = JavaLanguageServerPlugin.getContentProviderManager();\r\n+\t\t\t\t\tif (monitor == null) {\r\n+\t\t\t\t\t\tmonitor = new NullProgressMonitor();\r\n+\t\t\t\t\t}\r\n+\t\t\t\t\tString contents;\r\n+\t\t\t\t\ttry {\r\n+\t\t\t\t\t\tcontents = contentProvider.getSource(classFile, monitor);\r\n+\t\t\t\t\t} catch (Exception e) {\r\n+\t\t\t\t\t\tJavaLanguageServerPlugin.logException(e.getMessage(), e);\r\n+\t\t\t\t\t\treturn classFile;\r\n+\t\t\t\t\t}\r\n+\t\t\t\t\tif (contents != null && !contents.isBlank()) {\r\n+\t\t\t\t\t\treturn getWorkingCopy(classFile, contents, monitor);\r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t} catch (JavaModelException e) {\r\n+\t\t\t\tJavaLanguageServerPlugin.logException(e.getMessage(), e);\r\n+\t\t\t}\r\n+\t\t\treturn classFile;\r\n \t\t}\r\n \t\treturn resolveCompilationUnit(uri);\r\n \t}\r\n \r\n+\tpublic static void discardClassFileWorkingCopy(ITypeRoot unit) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aec27b73314f7dc7c8b104a9eec64841450e2509"}, "originalPosition": 126}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aec27b73314f7dc7c8b104a9eec64841450e2509", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/aec27b73314f7dc7c8b104a9eec64841450e2509", "committedDate": "2021-02-07T18:59:44Z", "message": "search for references from IClassFile without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}, "afterCommit": {"oid": "70bf4f54e89457eb7d4dceab67b842ffc0880618", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/70bf4f54e89457eb7d4dceab67b842ffc0880618", "committedDate": "2021-02-09T20:12:24Z", "message": "search for references from IClassFile without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg3ODg1OTI3", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1632#pullrequestreview-587885927", "createdAt": "2021-02-10T17:49:18Z", "commit": {"oid": "70bf4f54e89457eb7d4dceab67b842ffc0880618"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14394cb01c650123ef4f313ec8f96f6f281cf25e", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/14394cb01c650123ef4f313ec8f96f6f281cf25e", "committedDate": "2021-02-14T14:40:59Z", "message": "search for references from IClassFile without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "70bf4f54e89457eb7d4dceab67b842ffc0880618", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/70bf4f54e89457eb7d4dceab67b842ffc0880618", "committedDate": "2021-02-09T20:12:24Z", "message": "search for references from IClassFile without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}, "afterCommit": {"oid": "14394cb01c650123ef4f313ec8f96f6f281cf25e", "author": {"user": {"login": "snjeza", "name": "Snjeza"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/14394cb01c650123ef4f313ec8f96f6f281cf25e", "committedDate": "2021-02-14T14:40:59Z", "message": "search for references from IClassFile without source\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1068, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}