{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNjExMDMz", "number": 1343, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjoxNjoxM1rODdgDbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjoyMjo0MVrODdgJ9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjYwNDYzOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/FormatterHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjoxNjoxM1rOFmJFSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjoyMDoyMVrOFmJMBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzOTAxOA==", "bodyText": "why do we need to set it manually when we want to check the effect of jdt.ls default formatting options? If anything we should ensure PreferenceManager.initialize() was called", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1343#discussion_r375539018", "createdAt": "2020-02-05T22:16:13Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/FormatterHandlerTest.java", "diffHunk": "@@ -61,6 +61,7 @@ public void setUp() {\n \t\tjavaProject = JavaCore.create(project);\n \t\toriginalTabChar = javaProject.getOption(DefaultCodeFormatterConstants.FORMATTER_TAB_CHAR, true);\n \t\tjavaProject.setOption(DefaultCodeFormatterConstants.FORMATTER_TAB_CHAR, JavaCore.TAB);\n+\t\tjavaProject.setOption(DefaultCodeFormatterConstants.FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_SWITCH, DefaultCodeFormatterConstants.TRUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20cdc14926b944eedc300165ec2767e2172e695f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MDc0MA==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1343#discussion_r375540740", "createdAt": "2020-02-05T22:20:21Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/FormatterHandlerTest.java", "diffHunk": "@@ -61,6 +61,7 @@ public void setUp() {\n \t\tjavaProject = JavaCore.create(project);\n \t\toriginalTabChar = javaProject.getOption(DefaultCodeFormatterConstants.FORMATTER_TAB_CHAR, true);\n \t\tjavaProject.setOption(DefaultCodeFormatterConstants.FORMATTER_TAB_CHAR, JavaCore.TAB);\n+\t\tjavaProject.setOption(DefaultCodeFormatterConstants.FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_SWITCH, DefaultCodeFormatterConstants.TRUE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzOTAxOA=="}, "originalCommit": {"oid": "20cdc14926b944eedc300165ec2767e2172e695f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjYyMTM0OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/FormatterHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjoyMjo0MVrOFmJPyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjozNzoxNlrOFmJmIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MTcwNw==", "bodyText": "if this test runs 1st, javaProject's options will keep that setting when testFormatting_indent_switchstatementsDefault() runs", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1343#discussion_r375541707", "createdAt": "2020-02-05T22:22:41Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/FormatterHandlerTest.java", "diffHunk": "@@ -183,6 +182,115 @@ public void testFormatting_onOffTags() throws Exception {\n \n \t}\n \n+\t@Test\n+\tpublic void testFormatting_indent_switchstatementsDefault() throws Exception {\n+\t\tICompilationUnit unit = getWorkingCopy(\"src/org/sample/Baz.java\",\n+\t\t//@formatter:off\n+\t\t\t\"package org.sample;\\n\" +\n+\t\t\t\"\\n\" +\n+\t\t\t\"public class Baz {\\n\" +\n+\t\t\t\"    private enum Numbers {One, Two};\\n\" +\n+\t\t\t\"    public void foo() {\\n\" +\n+\t\t\t\"        Numbers n = Numbers.One;\\n\" +\n+\t\t\t\"        switch (n) {\\n\" +\n+\t\t\t\"        case One:\\n\" +\n+\t\t\t\"        return;\\n\" +\n+\t\t\t\"        case Two:\\n\" +\n+\t\t\t\"        return;\\n\" +\n+\t\t\t\"        default:\\n\" +\n+\t\t\t\"        break;\\n\" +\n+\t\t\t\"        }\\n\" +\n+\t\t\t\"    }\\n\" +\n+\t\t\t\"}\"\n+\t\t//@formatter:off\n+\t\t);\n+\t\tString uri = JDTUtils.toURI(unit);\n+\t\tTextDocumentIdentifier textDocument = new TextDocumentIdentifier(uri);\n+\t\tFormattingOptions options = new FormattingOptions(4, true);\n+\t\tDocumentFormattingParams params = new DocumentFormattingParams(textDocument, options);\n+\t\tList<? extends TextEdit> edits = server.formatting(params).get();\n+\t\tassertNotNull(edits);\n+\t\t//@formatter:off\n+\t\tString expectedText =\n+\t\t\t\"package org.sample;\\n\" +\n+\t\t\t\"\\n\" +\n+\t\t\t\"public class Baz {\\n\" +\n+\t\t\t\"    private enum Numbers {\\n\" +\n+\t\t\t\"        One, Two\\n\" +\n+\t\t\t\"    };\\n\" +\n+\t\t\t\"\\n\" +\n+\t\t\t\"    public void foo() {\\n\" +\n+\t\t\t\"        Numbers n = Numbers.One;\\n\" +\n+\t\t\t\"        switch (n) {\\n\" +\n+\t\t\t\"            case One:\\n\" +\n+\t\t\t\"                return;\\n\" +\n+\t\t\t\"            case Two:\\n\" +\n+\t\t\t\"                return;\\n\" +\n+\t\t\t\"            default:\\n\" +\n+\t\t\t\"                break;\\n\" +\n+\t\t\t\"        }\\n\" +\n+\t\t\t\"    }\\n\" +\n+\t\t\t\"}\";\n+\t\t//@formatter:on\n+\t\tString newText = TextEditUtil.apply(unit, edits);\n+\t\tassertEquals(expectedText, newText);\n+\t}\n+\n+\t@Test\n+\tpublic void testFormatting_indent_switchstatementsFalse() throws Exception {\n+\t\tjavaProject.setOption(DefaultCodeFormatterConstants.FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_SWITCH, DefaultCodeFormatterConstants.FALSE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18d02ea722e8cb2523f0dcf968bfceb10d75740b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0NzQyNg==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1343#discussion_r375547426", "createdAt": "2020-02-05T22:37:16Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/FormatterHandlerTest.java", "diffHunk": "@@ -183,6 +182,115 @@ public void testFormatting_onOffTags() throws Exception {\n \n \t}\n \n+\t@Test\n+\tpublic void testFormatting_indent_switchstatementsDefault() throws Exception {\n+\t\tICompilationUnit unit = getWorkingCopy(\"src/org/sample/Baz.java\",\n+\t\t//@formatter:off\n+\t\t\t\"package org.sample;\\n\" +\n+\t\t\t\"\\n\" +\n+\t\t\t\"public class Baz {\\n\" +\n+\t\t\t\"    private enum Numbers {One, Two};\\n\" +\n+\t\t\t\"    public void foo() {\\n\" +\n+\t\t\t\"        Numbers n = Numbers.One;\\n\" +\n+\t\t\t\"        switch (n) {\\n\" +\n+\t\t\t\"        case One:\\n\" +\n+\t\t\t\"        return;\\n\" +\n+\t\t\t\"        case Two:\\n\" +\n+\t\t\t\"        return;\\n\" +\n+\t\t\t\"        default:\\n\" +\n+\t\t\t\"        break;\\n\" +\n+\t\t\t\"        }\\n\" +\n+\t\t\t\"    }\\n\" +\n+\t\t\t\"}\"\n+\t\t//@formatter:off\n+\t\t);\n+\t\tString uri = JDTUtils.toURI(unit);\n+\t\tTextDocumentIdentifier textDocument = new TextDocumentIdentifier(uri);\n+\t\tFormattingOptions options = new FormattingOptions(4, true);\n+\t\tDocumentFormattingParams params = new DocumentFormattingParams(textDocument, options);\n+\t\tList<? extends TextEdit> edits = server.formatting(params).get();\n+\t\tassertNotNull(edits);\n+\t\t//@formatter:off\n+\t\tString expectedText =\n+\t\t\t\"package org.sample;\\n\" +\n+\t\t\t\"\\n\" +\n+\t\t\t\"public class Baz {\\n\" +\n+\t\t\t\"    private enum Numbers {\\n\" +\n+\t\t\t\"        One, Two\\n\" +\n+\t\t\t\"    };\\n\" +\n+\t\t\t\"\\n\" +\n+\t\t\t\"    public void foo() {\\n\" +\n+\t\t\t\"        Numbers n = Numbers.One;\\n\" +\n+\t\t\t\"        switch (n) {\\n\" +\n+\t\t\t\"            case One:\\n\" +\n+\t\t\t\"                return;\\n\" +\n+\t\t\t\"            case Two:\\n\" +\n+\t\t\t\"                return;\\n\" +\n+\t\t\t\"            default:\\n\" +\n+\t\t\t\"                break;\\n\" +\n+\t\t\t\"        }\\n\" +\n+\t\t\t\"    }\\n\" +\n+\t\t\t\"}\";\n+\t\t//@formatter:on\n+\t\tString newText = TextEditUtil.apply(unit, edits);\n+\t\tassertEquals(expectedText, newText);\n+\t}\n+\n+\t@Test\n+\tpublic void testFormatting_indent_switchstatementsFalse() throws Exception {\n+\t\tjavaProject.setOption(DefaultCodeFormatterConstants.FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_SWITCH, DefaultCodeFormatterConstants.FALSE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MTcwNw=="}, "originalCommit": {"oid": "18d02ea722e8cb2523f0dcf968bfceb10d75740b"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3628, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}