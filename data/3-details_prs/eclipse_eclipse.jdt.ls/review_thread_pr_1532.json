{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNjk5MTY3", "number": 1532, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjowNzowNlrOEcI8hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1OTowMlrOEeQjMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTQyMTUwOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenProjectImporter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjowNzowNlrOHGfQMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo1NzoyMFrOHGpdCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NTU1NA==", "bodyText": "break;", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r476565554", "createdAt": "2020-08-25T16:07:06Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenProjectImporter.java", "diffHunk": "@@ -113,6 +113,18 @@ private boolean exclude(java.nio.file.Path path) {\n \t\t\t\t}\n \t\t\t}\n \t\t}\n+\t\tif (!excluded) {\n+\t\t\tfor (IProject project : ProjectUtils.getAllProjects()) {\n+\t\t\t\tif (ProjectUtils.isMavenProject(project)) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tString pattern = project.getLocation().toOSString();\n+\t\t\t\tPathMatcher matcher = FileSystems.getDefault().getPathMatcher(\"glob:\" + pattern);\n+\t\t\t\tif (matcher.matches(path)) {\n+\t\t\t\t\texcluded = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53fa0638f1c6dabc5f800d5b1c2aa598467db5d7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjczMjY4MQ==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r476732681", "createdAt": "2020-08-25T20:57:20Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenProjectImporter.java", "diffHunk": "@@ -113,6 +113,18 @@ private boolean exclude(java.nio.file.Path path) {\n \t\t\t\t}\n \t\t\t}\n \t\t}\n+\t\tif (!excluded) {\n+\t\t\tfor (IProject project : ProjectUtils.getAllProjects()) {\n+\t\t\t\tif (ProjectUtils.isMavenProject(project)) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tString pattern = project.getLocation().toOSString();\n+\t\t\t\tPathMatcher matcher = FileSystems.getDefault().getPathMatcher(\"glob:\" + pattern);\n+\t\t\t\tif (matcher.matches(path)) {\n+\t\t\t\t\texcluded = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NTU1NA=="}, "originalCommit": {"oid": "53fa0638f1c6dabc5f800d5b1c2aa598467db5d7"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTQ1NzE1OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoxNTo0N1rOHGfmOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo1NzozM1rOHGpddg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MTE5Mw==", "bodyText": "mmm might be an issue with 3rd party importers (eg. Salesforce's Bazel). Ideally we'd need a generic way to tell if a project is something other than an Eclipse project", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r476571193", "createdAt": "2020-08-25T16:15:47Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java", "diffHunk": "@@ -43,6 +45,13 @@ public boolean applies(IProgressMonitor monitor) throws CoreException {\n \t\tif (directories == null) {\n \t\t\tBasicFileDetector eclipseDetector = new BasicFileDetector(rootFolder.toPath(), DESCRIPTION_FILE_NAME)\n \t\t\t\t\t.addExclusions(\"**/bin\");//default Eclipse build dir\n+\t\t\tPreferences preferences = getPreferences();\n+\t\t\tfor (IProject project : ProjectUtils.getAllProjects()) {\n+\t\t\t\tif ((preferences.isImportGradleEnabled() && ProjectUtils.isGradleProject(project)) || (preferences.isImportMavenEnabled() && ProjectUtils.isMavenProject(project))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53fa0638f1c6dabc5f800d5b1c2aa598467db5d7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjczMjc5MA==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r476732790", "createdAt": "2020-08-25T20:57:33Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java", "diffHunk": "@@ -43,6 +45,13 @@ public boolean applies(IProgressMonitor monitor) throws CoreException {\n \t\tif (directories == null) {\n \t\t\tBasicFileDetector eclipseDetector = new BasicFileDetector(rootFolder.toPath(), DESCRIPTION_FILE_NAME)\n \t\t\t\t\t.addExclusions(\"**/bin\");//default Eclipse build dir\n+\t\t\tPreferences preferences = getPreferences();\n+\t\t\tfor (IProject project : ProjectUtils.getAllProjects()) {\n+\t\t\t\tif ((preferences.isImportGradleEnabled() && ProjectUtils.isGradleProject(project)) || (preferences.isImportMavenEnabled() && ProjectUtils.isMavenProject(project))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MTE5Mw=="}, "originalCommit": {"oid": "53fa0638f1c6dabc5f800d5b1c2aa598467db5d7"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTQ2NDA2OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoxNzozMVrOHGfq4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo1Nzo1MVrOHGpeDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MjM4NA==", "bodyText": "we might need a getAllProjects(boolean includeInvisibleProjects) method", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r476572384", "createdAt": "2020-08-25T16:17:31Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java", "diffHunk": "@@ -43,6 +45,13 @@ public boolean applies(IProgressMonitor monitor) throws CoreException {\n \t\tif (directories == null) {\n \t\t\tBasicFileDetector eclipseDetector = new BasicFileDetector(rootFolder.toPath(), DESCRIPTION_FILE_NAME)\n \t\t\t\t\t.addExclusions(\"**/bin\");//default Eclipse build dir\n+\t\t\tPreferences preferences = getPreferences();\n+\t\t\tfor (IProject project : ProjectUtils.getAllProjects()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53fa0638f1c6dabc5f800d5b1c2aa598467db5d7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjczMjk0Mg==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r476732942", "createdAt": "2020-08-25T20:57:51Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java", "diffHunk": "@@ -43,6 +45,13 @@ public boolean applies(IProgressMonitor monitor) throws CoreException {\n \t\tif (directories == null) {\n \t\t\tBasicFileDetector eclipseDetector = new BasicFileDetector(rootFolder.toPath(), DESCRIPTION_FILE_NAME)\n \t\t\t\t\t.addExclusions(\"**/bin\");//default Eclipse build dir\n+\t\t\tPreferences preferences = getPreferences();\n+\t\t\tfor (IProject project : ProjectUtils.getAllProjects()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MjM4NA=="}, "originalCommit": {"oid": "53fa0638f1c6dabc5f800d5b1c2aa598467db5d7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTQ3NDM2OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoyMDoxMVrOHGfxaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo1ODowOVrOHGpelQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NDA1OQ==", "bodyText": "please delete", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r476574059", "createdAt": "2020-08-25T16:20:11Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java", "diffHunk": "@@ -266,8 +269,8 @@ public boolean isBuildLikeFileName(String fileName) {\n \t\treturn buildSupports().filter(bs -> bs.isBuildLikeFileName(fileName)).findAny().isPresent();\n \t}\n \n-\tprivate IProjectImporter getImporter(File rootFolder, IProgressMonitor monitor) throws OperationCanceledException, CoreException {\n-\t\tCollection<IProjectImporter> importers = importers();\n+\tprivate IProjectImporter getImporter(File rootFolder, List<IProjectImporter> importers, IProgressMonitor monitor) throws OperationCanceledException, CoreException {\n+\t\t// Collection<IProjectImporter> importers = importers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53fa0638f1c6dabc5f800d5b1c2aa598467db5d7"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjczMzA3Nw==", "bodyText": "deleted.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r476733077", "createdAt": "2020-08-25T20:58:09Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java", "diffHunk": "@@ -266,8 +269,8 @@ public boolean isBuildLikeFileName(String fileName) {\n \t\treturn buildSupports().filter(bs -> bs.isBuildLikeFileName(fileName)).findAny().isPresent();\n \t}\n \n-\tprivate IProjectImporter getImporter(File rootFolder, IProgressMonitor monitor) throws OperationCanceledException, CoreException {\n-\t\tCollection<IProjectImporter> importers = importers();\n+\tprivate IProjectImporter getImporter(File rootFolder, List<IProjectImporter> importers, IProgressMonitor monitor) throws OperationCanceledException, CoreException {\n+\t\t// Collection<IProjectImporter> importers = importers();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NDA1OQ=="}, "originalCommit": {"oid": "53fa0638f1c6dabc5f800d5b1c2aa598467db5d7"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTQ5MzQ4OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoyNDo1MVrOHGf9Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo1ODoyM1rOHGpfCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NzEyNg==", "bodyText": "We actually should remove all importers before and including the current importer.\nSay you have a Maven and Eclipse project in your directory:\n1st pass:\n\ngradle, doesn't apply\nMaven, applies, is removed\nEclipse, not checked\n\n2nd pass:\n\nGradle, retested, still doesn't apply\nEclipse applies, is removed\n\n3rd pass:\n\nGradle retested, still doesn't apply", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r476577126", "createdAt": "2020-08-25T16:24:51Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java", "diffHunk": "@@ -109,9 +109,12 @@ protected void importProjects(Collection<IPath> rootPaths, IProgressMonitor moni\n \t\tSubMonitor subMonitor = SubMonitor.convert(monitor, rootPaths.size() * 100);\n \t\tfor (IPath rootPath : rootPaths) {\n \t\t\tFile rootFolder = rootPath.toFile();\n-\t\t\tIProjectImporter importer = getImporter(rootFolder, subMonitor.split(30));\n-\t\t\tif (importer != null) {\n+\t\t\tList<IProjectImporter> importers = new ArrayList<>(importers());\n+\t\t\tIProjectImporter importer = getImporter(rootFolder, importers, subMonitor.split(30));\n+\t\t\twhile (importer != null) {\n \t\t\t\timporter.importToWorkspace(subMonitor.split(70));\n+\t\t\t\timporters.remove(importer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53fa0638f1c6dabc5f800d5b1c2aa598467db5d7"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjczMzE5Mg==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r476733192", "createdAt": "2020-08-25T20:58:23Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java", "diffHunk": "@@ -109,9 +109,12 @@ protected void importProjects(Collection<IPath> rootPaths, IProgressMonitor moni\n \t\tSubMonitor subMonitor = SubMonitor.convert(monitor, rootPaths.size() * 100);\n \t\tfor (IPath rootPath : rootPaths) {\n \t\t\tFile rootFolder = rootPath.toFile();\n-\t\t\tIProjectImporter importer = getImporter(rootFolder, subMonitor.split(30));\n-\t\t\tif (importer != null) {\n+\t\t\tList<IProjectImporter> importers = new ArrayList<>(importers());\n+\t\t\tIProjectImporter importer = getImporter(rootFolder, importers, subMonitor.split(30));\n+\t\t\twhile (importer != null) {\n \t\t\t\timporter.importToWorkspace(subMonitor.split(70));\n+\t\t\t\timporters.remove(importer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NzEyNg=="}, "originalCommit": {"oid": "53fa0638f1c6dabc5f800d5b1c2aa598467db5d7"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzY5MDcwOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjoxNjowM1rOHHJRPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzo1MToxNFrOHHNGcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI1Mzk1MA==", "bodyText": "unused method", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r477253950", "createdAt": "2020-08-26T12:16:03Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java", "diffHunk": "@@ -266,8 +273,7 @@ public boolean isBuildLikeFileName(String fileName) {\n \t\treturn buildSupports().filter(bs -> bs.isBuildLikeFileName(fileName)).findAny().isPresent();\n \t}\n \n-\tprivate IProjectImporter getImporter(File rootFolder, IProgressMonitor monitor) throws OperationCanceledException, CoreException {\n-\t\tCollection<IProjectImporter> importers = importers();\n+\tprivate IProjectImporter getImporter(File rootFolder, List<IProjectImporter> importers, IProgressMonitor monitor) throws OperationCanceledException, CoreException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dfa0ef5d90fbefa3b4bc3973556bf26face57e5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMxNjcyMg==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r477316722", "createdAt": "2020-08-26T13:51:14Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java", "diffHunk": "@@ -266,8 +273,7 @@ public boolean isBuildLikeFileName(String fileName) {\n \t\treturn buildSupports().filter(bs -> bs.isBuildLikeFileName(fileName)).findAny().isPresent();\n \t}\n \n-\tprivate IProjectImporter getImporter(File rootFolder, IProgressMonitor monitor) throws OperationCanceledException, CoreException {\n-\t\tCollection<IProjectImporter> importers = importers();\n+\tprivate IProjectImporter getImporter(File rootFolder, List<IProjectImporter> importers, IProgressMonitor monitor) throws OperationCanceledException, CoreException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI1Mzk1MA=="}, "originalCommit": {"oid": "4dfa0ef5d90fbefa3b4bc3973556bf26face57e5"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzY5NzY0OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjoxODowMVrOHHJVaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzo1MToyOFrOHHNHGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI1NTAxNg==", "bodyText": "there's no point in removing the importer anymore. can even use a regular foreach loop from importers()", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r477255016", "createdAt": "2020-08-26T12:18:01Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java", "diffHunk": "@@ -109,9 +110,15 @@ protected void importProjects(Collection<IPath> rootPaths, IProgressMonitor moni\n \t\tSubMonitor subMonitor = SubMonitor.convert(monitor, rootPaths.size() * 100);\n \t\tfor (IPath rootPath : rootPaths) {\n \t\t\tFile rootFolder = rootPath.toFile();\n-\t\t\tIProjectImporter importer = getImporter(rootFolder, subMonitor.split(30));\n-\t\t\tif (importer != null) {\n-\t\t\t\timporter.importToWorkspace(subMonitor.split(70));\n+\t\t\tList<IProjectImporter> importers = new ArrayList<>(importers());\n+\t\t\tIterator<IProjectImporter> iter = importers.iterator();\n+\t\t\twhile (iter.hasNext()) {\n+\t\t\t\tIProjectImporter importer = iter.next();\n+\t\t\t\timporter.initialize(rootFolder);\n+\t\t\t\tif (importer.applies(subMonitor.split(1))) {\n+\t\t\t\t\timporter.importToWorkspace(subMonitor.split(70));\n+\t\t\t\t}\n+\t\t\t\titer.remove();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dfa0ef5d90fbefa3b4bc3973556bf26face57e5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMxNjg5MA==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r477316890", "createdAt": "2020-08-26T13:51:28Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java", "diffHunk": "@@ -109,9 +110,15 @@ protected void importProjects(Collection<IPath> rootPaths, IProgressMonitor moni\n \t\tSubMonitor subMonitor = SubMonitor.convert(monitor, rootPaths.size() * 100);\n \t\tfor (IPath rootPath : rootPaths) {\n \t\t\tFile rootFolder = rootPath.toFile();\n-\t\t\tIProjectImporter importer = getImporter(rootFolder, subMonitor.split(30));\n-\t\t\tif (importer != null) {\n-\t\t\t\timporter.importToWorkspace(subMonitor.split(70));\n+\t\t\tList<IProjectImporter> importers = new ArrayList<>(importers());\n+\t\t\tIterator<IProjectImporter> iter = importers.iterator();\n+\t\t\twhile (iter.hasNext()) {\n+\t\t\t\tIProjectImporter importer = iter.next();\n+\t\t\t\timporter.initialize(rootFolder);\n+\t\t\t\tif (importer.applies(subMonitor.split(1))) {\n+\t\t\t\t\timporter.importToWorkspace(subMonitor.split(70));\n+\t\t\t\t}\n+\t\t\t\titer.remove();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI1NTAxNg=="}, "originalCommit": {"oid": "4dfa0ef5d90fbefa3b4bc3973556bf26face57e5"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4ODM4MzM2OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMzoyNjo0NVrOHH43Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNzowMDo0MlrOHIZTsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODAzMzcwMw==", "bodyText": "I'm cautious about using importer.applies here. The applies is a heavy operation, and usually it will scan the root folder recursively. When iterating the importers list, it means each importer will scan the root again.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r478033703", "createdAt": "2020-08-27T03:26:45Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java", "diffHunk": "@@ -43,6 +48,21 @@ public boolean applies(IProgressMonitor monitor) throws CoreException {\n \t\tif (directories == null) {\n \t\t\tBasicFileDetector eclipseDetector = new BasicFileDetector(rootFolder.toPath(), DESCRIPTION_FILE_NAME)\n \t\t\t\t\t.addExclusions(\"**/bin\");//default Eclipse build dir\n+\t\t\tList<IProjectImporter> importers = new ArrayList<>(ProjectsManager.importers());\n+\t\t\tfor (IProject project : ProjectUtils.getAllProjects(false)) {\n+\t\t\t\tFile projectFile = project.getLocation().toFile();\n+\t\t\t\tIterator<IProjectImporter> iter = importers.iterator();\n+\t\t\t\twhile (iter.hasNext()) {\n+\t\t\t\t\tIProjectImporter importer = iter.next();\n+\t\t\t\t\tif (!(importer instanceof EclipseProjectImporter)) {\n+\t\t\t\t\t\timporter.initialize(projectFile);\n+\t\t\t\t\t\tif (importer.applies(monitor)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67a81a40573d500d59f4b0eaa4d282599ac8a1c4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2NTI5Nw==", "bodyText": "I have updated the PR. Please review.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r478565297", "createdAt": "2020-08-27T17:00:42Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java", "diffHunk": "@@ -43,6 +48,21 @@ public boolean applies(IProgressMonitor monitor) throws CoreException {\n \t\tif (directories == null) {\n \t\t\tBasicFileDetector eclipseDetector = new BasicFileDetector(rootFolder.toPath(), DESCRIPTION_FILE_NAME)\n \t\t\t\t\t.addExclusions(\"**/bin\");//default Eclipse build dir\n+\t\t\tList<IProjectImporter> importers = new ArrayList<>(ProjectsManager.importers());\n+\t\t\tfor (IProject project : ProjectUtils.getAllProjects(false)) {\n+\t\t\t\tFile projectFile = project.getLocation().toFile();\n+\t\t\t\tIterator<IProjectImporter> iter = importers.iterator();\n+\t\t\t\twhile (iter.hasNext()) {\n+\t\t\t\t\tIProjectImporter importer = iter.next();\n+\t\t\t\t\tif (!(importer instanceof EclipseProjectImporter)) {\n+\t\t\t\t\t\timporter.initialize(projectFile);\n+\t\t\t\t\t\tif (importer.applies(monitor)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODAzMzcwMw=="}, "originalCommit": {"oid": "67a81a40573d500d59f4b0eaa4d282599ac8a1c4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4ODQzNjM2OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenProjectImporter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMzozMzo0MVrOHH5cCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNzowMDoyMVrOHIZS6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODA0MzE0NQ==", "bodyText": "Currently LocalProjectScanner used by MavenProjectImporter won't respect the java.import.exclusions but scan the whole workspace recursively, this is not efficient if the workspace is a polyglot project with node_modules.\nIs it possible to move the exclusion logic to the scanner?", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r478043145", "createdAt": "2020-08-27T03:33:41Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenProjectImporter.java", "diffHunk": "@@ -113,6 +113,19 @@ private boolean exclude(java.nio.file.Path path) {\n \t\t\t\t}\n \t\t\t}\n \t\t}\n+\t\tif (!excluded) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67a81a40573d500d59f4b0eaa4d282599ac8a1c4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2NTA5OA==", "bodyText": "LocalProjectScanner is within m2e. Could you create a new issue at https://bugs.eclipse.org/bugs/enter_bug.cgi?product=m2e ?", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r478565098", "createdAt": "2020-08-27T17:00:21Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenProjectImporter.java", "diffHunk": "@@ -113,6 +113,19 @@ private boolean exclude(java.nio.file.Path path) {\n \t\t\t\t}\n \t\t\t}\n \t\t}\n+\t\tif (!excluded) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODA0MzE0NQ=="}, "originalCommit": {"oid": "67a81a40573d500d59f4b0eaa4d282599ac8a1c4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzgxOTMyOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNzozNzo1NFrOHItPVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNTo0NDo0OFrOHJLexg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg5MTg2MQ==", "bodyText": "ProjectsManage.importers() will return a group of new instances of importers. The state of the importers that have been run previously won't apply to here.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r478891861", "createdAt": "2020-08-28T07:37:54Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java", "diffHunk": "@@ -32,17 +35,32 @@\n import org.eclipse.jdt.core.IJavaProject;\n import org.eclipse.jdt.core.JavaCore;\n import org.eclipse.jdt.ls.core.internal.AbstractProjectImporter;\n+import org.eclipse.jdt.ls.core.internal.IProjectImporter;\n import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n \n public class EclipseProjectImporter extends AbstractProjectImporter {\n \n-\tprivate Collection<java.nio.file.Path> directories;\n-\n \t@Override\n \tpublic boolean applies(IProgressMonitor monitor) throws CoreException {\n \t\tif (directories == null) {\n \t\t\tBasicFileDetector eclipseDetector = new BasicFileDetector(rootFolder.toPath(), DESCRIPTION_FILE_NAME)\n \t\t\t\t\t.addExclusions(\"**/bin\");//default Eclipse build dir\n+\t\t\tList<IProjectImporter> importers = new ArrayList<>(ProjectsManager.importers());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95a55b0c93c81e0ceaafb4325e5a9a747c39536c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM4NzMzNA==", "bodyText": "It is intentional. Otherwise tests fail.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r479387334", "createdAt": "2020-08-28T15:44:48Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java", "diffHunk": "@@ -32,17 +35,32 @@\n import org.eclipse.jdt.core.IJavaProject;\n import org.eclipse.jdt.core.JavaCore;\n import org.eclipse.jdt.ls.core.internal.AbstractProjectImporter;\n+import org.eclipse.jdt.ls.core.internal.IProjectImporter;\n import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n \n public class EclipseProjectImporter extends AbstractProjectImporter {\n \n-\tprivate Collection<java.nio.file.Path> directories;\n-\n \t@Override\n \tpublic boolean applies(IProgressMonitor monitor) throws CoreException {\n \t\tif (directories == null) {\n \t\t\tBasicFileDetector eclipseDetector = new BasicFileDetector(rootFolder.toPath(), DESCRIPTION_FILE_NAME)\n \t\t\t\t\t.addExclusions(\"**/bin\");//default Eclipse build dir\n+\t\t\tList<IProjectImporter> importers = new ArrayList<>(ProjectsManager.importers());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg5MTg2MQ=="}, "originalCommit": {"oid": "95a55b0c93c81e0ceaafb4325e5a9a747c39536c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzkzNDYxOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IProjectImporter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNzo1OToyOFrOHIuYHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNTo0NTowMVrOHJLfTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkxMDQ5NQ==", "bodyText": "should provide a default implementation such as return false. This will avoid breaking other plugins that registered importer but not implemented the new interface.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r478910495", "createdAt": "2020-08-28T07:59:28Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IProjectImporter.java", "diffHunk": "@@ -24,6 +24,8 @@\n \n \tboolean applies(IProgressMonitor monitor) throws OperationCanceledException, CoreException;\n \n+\tboolean applies(File folder) throws OperationCanceledException, CoreException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95a55b0c93c81e0ceaafb4325e5a9a747c39536c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM4NzQ3MQ==", "bodyText": "Fixed", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r479387471", "createdAt": "2020-08-28T15:45:01Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IProjectImporter.java", "diffHunk": "@@ -24,6 +24,8 @@\n \n \tboolean applies(IProgressMonitor monitor) throws OperationCanceledException, CoreException;\n \n+\tboolean applies(File folder) throws OperationCanceledException, CoreException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkxMDQ5NQ=="}, "originalCommit": {"oid": "95a55b0c93c81e0ceaafb4325e5a9a747c39536c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Mzk0MjI5OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IProjectImporter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODowMDo0MlrOHIucvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNTo0NToxNlrOHJLf5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkxMTY3OQ==", "bodyText": "Rename to isResolved(File folder)?", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r478911679", "createdAt": "2020-08-28T08:00:42Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IProjectImporter.java", "diffHunk": "@@ -24,6 +24,8 @@\n \n \tboolean applies(IProgressMonitor monitor) throws OperationCanceledException, CoreException;\n \n+\tboolean applies(File folder) throws OperationCanceledException, CoreException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95a55b0c93c81e0ceaafb4325e5a9a747c39536c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM4NzYyMA==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r479387620", "createdAt": "2020-08-28T15:45:16Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IProjectImporter.java", "diffHunk": "@@ -24,6 +24,8 @@\n \n \tboolean applies(IProgressMonitor monitor) throws OperationCanceledException, CoreException;\n \n+\tboolean applies(File folder) throws OperationCanceledException, CoreException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkxMTY3OQ=="}, "originalCommit": {"oid": "95a55b0c93c81e0ceaafb4325e5a9a747c39536c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Mzk2Mjk5OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODowMzo1MFrOHIuo-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNTo0NToyOFrOHJLgWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkxNDgwOQ==", "bodyText": "If the project is already resolved by other importer, should return early.\nif (importer.applies(folder) || importer.applies(monitor))", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r478914809", "createdAt": "2020-08-28T08:03:50Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java", "diffHunk": "@@ -32,17 +35,32 @@\n import org.eclipse.jdt.core.IJavaProject;\n import org.eclipse.jdt.core.JavaCore;\n import org.eclipse.jdt.ls.core.internal.AbstractProjectImporter;\n+import org.eclipse.jdt.ls.core.internal.IProjectImporter;\n import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n \n public class EclipseProjectImporter extends AbstractProjectImporter {\n \n-\tprivate Collection<java.nio.file.Path> directories;\n-\n \t@Override\n \tpublic boolean applies(IProgressMonitor monitor) throws CoreException {\n \t\tif (directories == null) {\n \t\t\tBasicFileDetector eclipseDetector = new BasicFileDetector(rootFolder.toPath(), DESCRIPTION_FILE_NAME)\n \t\t\t\t\t.addExclusions(\"**/bin\");//default Eclipse build dir\n+\t\t\tList<IProjectImporter> importers = new ArrayList<>(ProjectsManager.importers());\n+\t\t\tfor (IProject project : ProjectUtils.getAllProjects(false)) {\n+\t\t\t\tFile projectFile = project.getLocation().toFile();\n+\t\t\t\tIterator<IProjectImporter> iter = importers.iterator();\n+\t\t\t\twhile (iter.hasNext()) {\n+\t\t\t\t\tIProjectImporter importer = iter.next();\n+\t\t\t\t\tif (!(importer instanceof EclipseProjectImporter)) {\n+\t\t\t\t\t\timporter.initialize(projectFile);\n+\t\t\t\t\t\tif (importer.applies(monitor)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95a55b0c93c81e0ceaafb4325e5a9a747c39536c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM4NzczNw==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r479387737", "createdAt": "2020-08-28T15:45:28Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java", "diffHunk": "@@ -32,17 +35,32 @@\n import org.eclipse.jdt.core.IJavaProject;\n import org.eclipse.jdt.core.JavaCore;\n import org.eclipse.jdt.ls.core.internal.AbstractProjectImporter;\n+import org.eclipse.jdt.ls.core.internal.IProjectImporter;\n import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n \n public class EclipseProjectImporter extends AbstractProjectImporter {\n \n-\tprivate Collection<java.nio.file.Path> directories;\n-\n \t@Override\n \tpublic boolean applies(IProgressMonitor monitor) throws CoreException {\n \t\tif (directories == null) {\n \t\t\tBasicFileDetector eclipseDetector = new BasicFileDetector(rootFolder.toPath(), DESCRIPTION_FILE_NAME)\n \t\t\t\t\t.addExclusions(\"**/bin\");//default Eclipse build dir\n+\t\t\tList<IProjectImporter> importers = new ArrayList<>(ProjectsManager.importers());\n+\t\t\tfor (IProject project : ProjectUtils.getAllProjects(false)) {\n+\t\t\t\tFile projectFile = project.getLocation().toFile();\n+\t\t\t\tIterator<IProjectImporter> iter = importers.iterator();\n+\t\t\t\twhile (iter.hasNext()) {\n+\t\t\t\t\tIProjectImporter importer = iter.next();\n+\t\t\t\t\tif (!(importer instanceof EclipseProjectImporter)) {\n+\t\t\t\t\t\timporter.initialize(projectFile);\n+\t\t\t\t\t\tif (importer.applies(monitor)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkxNDgwOQ=="}, "originalCommit": {"oid": "95a55b0c93c81e0ceaafb4325e5a9a747c39536c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTYzODkwOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo1OTowMlrOHJ0BpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzozNzoyOFrOHKCIfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1MTYyMA==", "bodyText": "I'm wondering whether we can exclude these projects directly. These projects are probably from the importer with higher priority, if so, then importer.applies must return true. Or come from the projects cached from the last time the workspace was opened, if the project is already on open state, looks not necessary to scan it and reopen it via EclipseProjectImporter. Is there any missing corner case?", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r480051620", "createdAt": "2020-08-31T10:59:02Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java", "diffHunk": "@@ -32,17 +35,32 @@\n import org.eclipse.jdt.core.IJavaProject;\n import org.eclipse.jdt.core.JavaCore;\n import org.eclipse.jdt.ls.core.internal.AbstractProjectImporter;\n+import org.eclipse.jdt.ls.core.internal.IProjectImporter;\n import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n \n public class EclipseProjectImporter extends AbstractProjectImporter {\n \n-\tprivate Collection<java.nio.file.Path> directories;\n-\n \t@Override\n \tpublic boolean applies(IProgressMonitor monitor) throws CoreException {\n \t\tif (directories == null) {\n \t\t\tBasicFileDetector eclipseDetector = new BasicFileDetector(rootFolder.toPath(), DESCRIPTION_FILE_NAME)\n \t\t\t\t\t.addExclusions(\"**/bin\");//default Eclipse build dir\n+\t\t\tList<IProjectImporter> importers = new ArrayList<>(ProjectsManager.importers());\n+\t\t\tfor (IProject project : ProjectUtils.getAllProjects(false)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dff0608854a57e8ea167dd6717987004160444d5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4Mjc1MQ==", "bodyText": "You are right. Fixed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r480282751", "createdAt": "2020-08-31T17:37:28Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java", "diffHunk": "@@ -32,17 +35,32 @@\n import org.eclipse.jdt.core.IJavaProject;\n import org.eclipse.jdt.core.JavaCore;\n import org.eclipse.jdt.ls.core.internal.AbstractProjectImporter;\n+import org.eclipse.jdt.ls.core.internal.IProjectImporter;\n import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n \n public class EclipseProjectImporter extends AbstractProjectImporter {\n \n-\tprivate Collection<java.nio.file.Path> directories;\n-\n \t@Override\n \tpublic boolean applies(IProgressMonitor monitor) throws CoreException {\n \t\tif (directories == null) {\n \t\t\tBasicFileDetector eclipseDetector = new BasicFileDetector(rootFolder.toPath(), DESCRIPTION_FILE_NAME)\n \t\t\t\t\t.addExclusions(\"**/bin\");//default Eclipse build dir\n+\t\t\tList<IProjectImporter> importers = new ArrayList<>(ProjectsManager.importers());\n+\t\t\tfor (IProject project : ProjectUtils.getAllProjects(false)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1MTYyMA=="}, "originalCommit": {"oid": "dff0608854a57e8ea167dd6717987004160444d5"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3616, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}