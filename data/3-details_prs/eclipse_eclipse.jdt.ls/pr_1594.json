{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3NTcwMTY1", "number": 1594, "title": "Support to specify output location for invisible project", "bodyText": "Resolve #1593\nSee a gif in redhat-developer/vscode-java#1694\nSigned-off-by: Sheng Chen sheche@microsoft.com", "createdAt": "2020-11-09T08:04:14Z", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594", "merged": true, "mergeCommit": {"oid": "21a5ece0e22b01fdceefa35f23fb1d12921ac691"}, "closed": true, "closedAt": "2021-02-05T02:52:40Z", "author": {"login": "jdneo"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdc-JJOgBqjM5OTg0OTMxNzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd2Xs5UAFqTU4MTk3NDc0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "763030c03fafbcf2c002f73db64d8ba8af781e66", "author": {"user": {"login": "jdneo", "name": "Sheng Chen"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/763030c03fafbcf2c002f73db64d8ba8af781e66", "committedDate": "2020-11-16T05:27:36Z", "message": "Rename the setting key to 'java.unmanagedFolder.outputPath'\n\nSigned-off-by: Sheng Chen <sheche@microsoft.com>"}, "afterCommit": {"oid": "14edc307564f93003faff0eaf21c5351d5cc8d41", "author": {"user": {"login": "jdneo", "name": "Sheng Chen"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/14edc307564f93003faff0eaf21c5351d5cc8d41", "committedDate": "2020-11-16T05:30:48Z", "message": "Rename the setting key to 'java.unmanagedFolder.outputPath'\n\nSigned-off-by: Sheng Chen <sheche@microsoft.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxODE3MzM4", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594#pullrequestreview-531817338", "createdAt": "2020-11-16T21:52:15Z", "commit": {"oid": "14edc307564f93003faff0eaf21c5351d5cc8d41"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTo1MjoxNVrOH0VI9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTo1MjoxNVrOH0VI9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYzNDM1OQ==", "bodyText": "need to check preferencesManager.getClientPreferences().isActionableRuntimeNotificationSupport(), else send regular notification", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594#discussion_r524634359", "createdAt": "2020-11-16T21:52:15Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/InvisiblePreferenceChangeListener.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Microsoft Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Microsoft Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.util.Objects;\n+\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.ls.core.internal.ActionableNotification;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n+import org.eclipse.jdt.ls.core.internal.preferences.IPreferencesChangeListener;\n+import org.eclipse.jdt.ls.core.internal.preferences.Preferences;\n+import org.eclipse.lsp4j.MessageType;\n+\n+public class InvisiblePreferenceChangeListener implements IPreferencesChangeListener {\n+\n+\t@Override\n+\tpublic void preferencesChange(Preferences oldPreferences, Preferences newPreferences) {\n+\t\tboolean projectOutputPathChanged = !Objects.equals(oldPreferences.getInvisibleProjectOutputPath(), newPreferences.getInvisibleProjectOutputPath());\n+\t\tif (projectOutputPathChanged) {\n+\t\t\tfor (IJavaProject javaProject : ProjectUtils.getJavaProjects()) {\n+\t\t\t\tIProject project = javaProject.getProject();\n+\t\t\t\tif (ProjectUtils.isVisibleProject(project)) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (project.equals(ProjectsManager.getDefaultProject())) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\ttry {\n+\t\t\t\t\tProjectUtils.setInvisibleProjectOutputPath(javaProject, newPreferences.getInvisibleProjectOutputPath(), new NullProgressMonitor());\n+\t\t\t\t} catch (CoreException e) {\n+\t\t\t\t\tActionableNotification invalidOutputPathNotification = new ActionableNotification().withSeverity(MessageType.Error)\n+\t\t\t\t\t\t\t.withMessage(e.getMessage());\n+\t\t\t\t\tJavaLanguageServerPlugin.getProjectsManager().getConnection().sendActionableNotification(invalidOutputPathNotification);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14edc307564f93003faff0eaf21c5351d5cc8d41"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MTA3ODU3", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594#pullrequestreview-538107857", "createdAt": "2020-11-25T02:18:54Z", "commit": {"oid": "6a03c5d5fd731453d5ae9aa258e425bd1163d4b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMjoxODo1NVrOH5gkpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMjoxODo1NVrOH5gkpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA2NDU1MA==", "bodyText": "I would use IPath.SEPARATOR just to avoid any confusion. Otherwise, it seems to be working with the property, so I'd be fine with merging.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594#discussion_r530064550", "createdAt": "2020-11-25T02:18:55Z", "author": {"login": "rgrunber"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/ProjectUtils.java", "diffHunk": "@@ -235,6 +235,72 @@ public static boolean isOnSourcePath(IPath sourcePath, IJavaProject project) thr\n \t\treturn false;\n \t}\n \n+\tpublic static boolean setInvisibleProjectOutputPath(IJavaProject javaProject, String outputPath, IProgressMonitor monitor) throws CoreException {\n+\t\tIProject project = javaProject.getProject();\n+\t\tif (isVisibleProject(project)) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tif (outputPath == null) {\n+\t\t\toutputPath = \"\";\n+\t\t} else {\n+\t\t\toutputPath = outputPath.trim();\n+\t\t}\n+\t\t\n+\t\tif (new org.eclipse.core.runtime.Path(outputPath).isAbsolute()) {\n+\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID, \"The output path must be a relative path to the workspace.\"));\n+\t\t}\n+\n+\t\tif (StringUtils.isEmpty(outputPath)) {\n+\t\t\t// blank means using default output path\n+\t\t\tjavaProject.setOutputLocation(project.getFolder(\"bin\").getFullPath(), monitor);\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\toutputPath = WORKSPACE_LINK + \"/\" + outputPath;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a03c5d5fd731453d5ae9aa258e425bd1163d4b3"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NzMxOTgw", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594#pullrequestreview-539731980", "createdAt": "2020-11-27T06:24:41Z", "commit": {"oid": "d9f0cd6715e4ad2d9b8775ba062b22ad7f18b14c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNjoyNDo0MVrOH6yS7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNjoyNDo0MVrOH6yS7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwMzUwMg==", "bodyText": "This utility is just used for invisible project only, it's better to move to InvisibleProjectImporter.java.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594#discussion_r531403502", "createdAt": "2020-11-27T06:24:41Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/ProjectUtils.java", "diffHunk": "@@ -235,6 +235,72 @@ public static boolean isOnSourcePath(IPath sourcePath, IJavaProject project) thr\n \t\treturn false;\n \t}\n \n+\tpublic static boolean setInvisibleProjectOutputPath(IJavaProject javaProject, String outputPath, IProgressMonitor monitor) throws CoreException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9f0cd6715e4ad2d9b8775ba062b22ad7f18b14c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NzM0MzA1", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594#pullrequestreview-539734305", "createdAt": "2020-11-27T06:31:50Z", "commit": {"oid": "d9f0cd6715e4ad2d9b8775ba062b22ad7f18b14c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNjozMTo1MVrOH6yapQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNjozMTo1MVrOH6yapQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNTQ3Nw==", "bodyText": "The output path cannot be equal to the source folder path, please provide a new path.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594#discussion_r531405477", "createdAt": "2020-11-27T06:31:51Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/ProjectUtils.java", "diffHunk": "@@ -235,6 +235,72 @@ public static boolean isOnSourcePath(IPath sourcePath, IJavaProject project) thr\n \t\treturn false;\n \t}\n \n+\tpublic static boolean setInvisibleProjectOutputPath(IJavaProject javaProject, String outputPath, IProgressMonitor monitor) throws CoreException {\n+\t\tIProject project = javaProject.getProject();\n+\t\tif (isVisibleProject(project)) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tif (outputPath == null) {\n+\t\t\toutputPath = \"\";\n+\t\t} else {\n+\t\t\toutputPath = outputPath.trim();\n+\t\t}\n+\t\t\n+\t\tif (new org.eclipse.core.runtime.Path(outputPath).isAbsolute()) {\n+\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID, \"The output path must be a relative path to the workspace.\"));\n+\t\t}\n+\n+\t\tif (StringUtils.isEmpty(outputPath)) {\n+\t\t\t// blank means using default output path\n+\t\t\tjavaProject.setOutputLocation(project.getFolder(\"bin\").getFullPath(), monitor);\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\toutputPath = WORKSPACE_LINK + IPath.SEPARATOR + outputPath;\n+\t\tIPath outputFullPath = project.getFolder(outputPath).getFullPath();\n+\t\tIClasspathEntry[] existingEntries = javaProject.getRawClasspath();\n+\t\tList<IClasspathEntry> newEntries = new ArrayList<>();\n+\t\tfor (IClasspathEntry entry : existingEntries) {\n+\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_SOURCE) {\n+\t\t\t\tnewEntries.add(entry);\n+\t\t\t} else {\n+\t\t\t\tIPath entryPath = entry.getPath();\n+\t\t\t\tif (entryPath.equals(outputFullPath)) {\n+\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID,\n+\t\t\t\t\t\t\t\"The output path cannot equal to source folder path, please provide a new path instead.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9f0cd6715e4ad2d9b8775ba062b22ad7f18b14c"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NzM3Mjk1", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594#pullrequestreview-539737295", "createdAt": "2020-11-27T06:41:15Z", "commit": {"oid": "d9f0cd6715e4ad2d9b8775ba062b22ad7f18b14c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNjo0MToxNVrOH6ylEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNjo0MToxNVrOH6ylEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwODE0Ng==", "bodyText": "InvisibleProjectPreferenceChangeListener", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594#discussion_r531408146", "createdAt": "2020-11-27T06:41:15Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/InvisiblePreferenceChangeListener.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Microsoft Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Microsoft Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.util.Objects;\n+\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n+import org.eclipse.jdt.ls.core.internal.preferences.IPreferencesChangeListener;\n+import org.eclipse.jdt.ls.core.internal.preferences.Preferences;\n+import org.eclipse.lsp4j.MessageParams;\n+import org.eclipse.lsp4j.MessageType;\n+\n+public class InvisiblePreferenceChangeListener implements IPreferencesChangeListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9f0cd6715e4ad2d9b8775ba062b22ad7f18b14c"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NzUxNDYy", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594#pullrequestreview-539751462", "createdAt": "2020-11-27T07:19:20Z", "commit": {"oid": "d9f0cd6715e4ad2d9b8775ba062b22ad7f18b14c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzoxOToyMFrOH6zTew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzoxOToyMFrOH6zTew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMDAyNw==", "bodyText": "When i'm trying this feature, i found this operation may delete my existing files in the output folder.\nReproduce steps:\n\nOpen a standalone folder as below.\n\n |\u2500\u2500 app\n \u2502   ...\n \u2502   \u2514\u2500\u2500 build\n |          \u2514\u2500\u2500 run.script\n |   \u2514\u2500\u2500 src\n |          \u2514\u2500\u2500 Hello.java\n\n\nset build in the setting as the output path. -> The language server will auto delete my existing files in this folder. This is risky without the user's awareness.\n\nIMO, we should ask user for confirmation if the specified output path is not empty. Or just let the operation fail directly, and provide a specific error message to explain why.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594#discussion_r531420027", "createdAt": "2020-11-27T07:19:20Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/ProjectUtils.java", "diffHunk": "@@ -235,6 +235,72 @@ public static boolean isOnSourcePath(IPath sourcePath, IJavaProject project) thr\n \t\treturn false;\n \t}\n \n+\tpublic static boolean setInvisibleProjectOutputPath(IJavaProject javaProject, String outputPath, IProgressMonitor monitor) throws CoreException {\n+\t\tIProject project = javaProject.getProject();\n+\t\tif (isVisibleProject(project)) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tif (outputPath == null) {\n+\t\t\toutputPath = \"\";\n+\t\t} else {\n+\t\t\toutputPath = outputPath.trim();\n+\t\t}\n+\t\t\n+\t\tif (new org.eclipse.core.runtime.Path(outputPath).isAbsolute()) {\n+\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID, \"The output path must be a relative path to the workspace.\"));\n+\t\t}\n+\n+\t\tif (StringUtils.isEmpty(outputPath)) {\n+\t\t\t// blank means using default output path\n+\t\t\tjavaProject.setOutputLocation(project.getFolder(\"bin\").getFullPath(), monitor);\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\toutputPath = WORKSPACE_LINK + IPath.SEPARATOR + outputPath;\n+\t\tIPath outputFullPath = project.getFolder(outputPath).getFullPath();\n+\t\tIClasspathEntry[] existingEntries = javaProject.getRawClasspath();\n+\t\tList<IClasspathEntry> newEntries = new ArrayList<>();\n+\t\tfor (IClasspathEntry entry : existingEntries) {\n+\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_SOURCE) {\n+\t\t\t\tnewEntries.add(entry);\n+\t\t\t} else {\n+\t\t\t\tIPath entryPath = entry.getPath();\n+\t\t\t\tif (entryPath.equals(outputFullPath)) {\n+\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID,\n+\t\t\t\t\t\t\t\"The output path cannot equal to source folder path, please provide a new path instead.\"));\n+\t\t\t\t} else if (entryPath.isPrefixOf(outputFullPath)) {\n+\t\t\t\t\tList<IPath> exclusionPatterns = new ArrayList<>(Arrays.asList(entry.getExclusionPatterns()));\n+\t\t\t\t\tIPath excludePath = outputFullPath.makeRelativeTo(entryPath);\n+\t\t\t\t\tboolean hasExcluded = false;\n+\t\t\t\t\tfor (IPath exclusionPattern : exclusionPatterns) {\n+\t\t\t\t\t\tif (exclusionPattern.isPrefixOf(excludePath)) {\n+\t\t\t\t\t\t\thasExcluded = true;\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!hasExcluded) {\n+\t\t\t\t\t\texclusionPatterns.add(excludePath.addTrailingSeparator());\n+\t\t\t\t\t}\n+\t\t\t\t\tnewEntries.add(JavaCore.newSourceEntry(entryPath, exclusionPatterns.toArray(new IPath[0])));\n+\t\t\t\t\tcontinue;\n+\t\t\t\t} else if (outputFullPath.isPrefixOf(entryPath)) {\n+\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID,\n+\t\t\t\t\t\t\t\"The specified output path contains source folders, please provide a new path instead.\"));\n+\t\t\t\t} else {\n+\t\t\t\t\tnewEntries.add(entry);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tjavaProject.setRawClasspath(newEntries.toArray(new IClasspathEntry[0]), outputFullPath, monitor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9f0cd6715e4ad2d9b8775ba062b22ad7f18b14c"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f17943fa2e0c2a788296f5a4aecfe19727d0038", "author": {"user": {"login": "jdneo", "name": "Sheng Chen"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/3f17943fa2e0c2a788296f5a4aecfe19727d0038", "committedDate": "2021-01-22T08:24:19Z", "message": "Support to specify output location for invisible project\n\nSigned-off-by: Sheng Chen <sheche@microsoft.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6074813a8efff6fcdcf8d59f446e399cf25dd08d", "author": {"user": {"login": "jdneo", "name": "Sheng Chen"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/6074813a8efff6fcdcf8d59f446e399cf25dd08d", "committedDate": "2020-11-27T08:02:15Z", "message": "Address the comments"}, "afterCommit": {"oid": "3f17943fa2e0c2a788296f5a4aecfe19727d0038", "author": {"user": {"login": "jdneo", "name": "Sheng Chen"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/3f17943fa2e0c2a788296f5a4aecfe19727d0038", "committedDate": "2021-01-22T08:24:19Z", "message": "Support to specify output location for invisible project\n\nSigned-off-by: Sheng Chen <sheche@microsoft.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxOTc0NzQz", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594#pullrequestreview-581974743", "createdAt": "2021-02-03T03:26:00Z", "commit": {"oid": "3f17943fa2e0c2a788296f5a4aecfe19727d0038"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1041, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}