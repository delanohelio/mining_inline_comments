{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MTg4Njc5", "number": 1395, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDoyMjo1NlrODrqzgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNzo1MjowM1rODscZ-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTE2NjcyOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/CompletionHandlerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDoyMjo1NlrOF8JVCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTowMjozNFrOF8LPKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYxMTcyMg==", "bodyText": "@snjeza for some reason the tests with inner records fail, do you mind taking a look at them?", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1395#discussion_r398611722", "createdAt": "2020-03-26T14:22:56Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/CompletionHandlerTest.java", "diffHunk": "@@ -1343,6 +1344,108 @@ public void testSnippet_nested_inner_class() throws JavaModelException {\n \t\tassertEquals(\"/**\\n * ${1:InnerTest_1}\\n */\\npublic class ${1:InnerTest_1} {\\n\\n\\t${0}\\n}\", te);\n \t}\n \n+\t@Test\n+\tpublic void testSnippet_record() throws JavaModelException {\n+\t\tICompilationUnit unit = getWorkingCopy(\"src/org/sample/Test.java\", \"\");\n+\t\tint[] loc = findCompletionLocation(unit, \"\");\n+\t\tCompletionList list = server.completion(JsonMessageHelper.getParams(createCompletionRequest(unit, loc[0], loc[1]))).join().getRight();\n+\n+\t\tassertNotNull(list);\n+\t\tList<CompletionItem> items = new ArrayList<>(list.getItems());\n+\t\tassertFalse(items.isEmpty());\n+\t\titems.sort((i1, i2) -> (i1.getSortText().compareTo(i2.getSortText())));\n+\n+\t\tCompletionItem item = items.get(10);\n+\t\tassertEquals(\"record\", item.getLabel());\n+\t\tString te = item.getInsertText();\n+\t\tassertEquals(\"package org.sample;\\n\\n/**\\n * Test\\n */\\npublic record Test(${0}) {\\n}\", te);\n+\n+\t\t//check resolution doesn't blow up (https://github.com/eclipse/eclipse.jdt.ls/issues/675)\n+\t\tassertSame(item, server.resolveCompletionItem(item).join());\n+\t}\n+\n+\t@Test\n+\tpublic void testSnippet_record_with_package() throws JavaModelException {\n+\t\tICompilationUnit unit = getWorkingCopy(\"src/org/sample/Test.java\", \"package org.sample;\\n\");\n+\t\tint[] loc = findCompletionLocation(unit, \"package org.sample;\\n\");\n+\t\tCompletionList list = server.completion(JsonMessageHelper.getParams(createCompletionRequest(unit, loc[0], loc[1]))).join().getRight();\n+\n+\t\tassertNotNull(list);\n+\t\tList<CompletionItem> items = new ArrayList<>(list.getItems());\n+\t\tassertFalse(items.isEmpty());\n+\t\titems.sort((i1, i2) -> (i1.getSortText().compareTo(i2.getSortText())));\n+\n+\t\tCompletionItem item = items.get(9);\n+\t\tassertEquals(\"record\", item.getLabel());\n+\t\tString te = item.getInsertText();\n+\t\tassertEquals(\"/**\\n * Test\\n */\\npublic record Test(${0}) {\\n}\", te);\n+\t}\n+\n+\t@Ignore(value = \"When running tests, in SnippetCompletionProposal.getSnippetContent(), cu.getAllTypes() returns en empty array, so inner record name is not computed\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3a2e4e252199e757d76e759818e63bb7c286278"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY0Mjk4Ng==", "bodyText": "the tests passed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1395#discussion_r398642986", "createdAt": "2020-03-26T15:02:34Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/CompletionHandlerTest.java", "diffHunk": "@@ -1343,6 +1344,108 @@ public void testSnippet_nested_inner_class() throws JavaModelException {\n \t\tassertEquals(\"/**\\n * ${1:InnerTest_1}\\n */\\npublic class ${1:InnerTest_1} {\\n\\n\\t${0}\\n}\", te);\n \t}\n \n+\t@Test\n+\tpublic void testSnippet_record() throws JavaModelException {\n+\t\tICompilationUnit unit = getWorkingCopy(\"src/org/sample/Test.java\", \"\");\n+\t\tint[] loc = findCompletionLocation(unit, \"\");\n+\t\tCompletionList list = server.completion(JsonMessageHelper.getParams(createCompletionRequest(unit, loc[0], loc[1]))).join().getRight();\n+\n+\t\tassertNotNull(list);\n+\t\tList<CompletionItem> items = new ArrayList<>(list.getItems());\n+\t\tassertFalse(items.isEmpty());\n+\t\titems.sort((i1, i2) -> (i1.getSortText().compareTo(i2.getSortText())));\n+\n+\t\tCompletionItem item = items.get(10);\n+\t\tassertEquals(\"record\", item.getLabel());\n+\t\tString te = item.getInsertText();\n+\t\tassertEquals(\"package org.sample;\\n\\n/**\\n * Test\\n */\\npublic record Test(${0}) {\\n}\", te);\n+\n+\t\t//check resolution doesn't blow up (https://github.com/eclipse/eclipse.jdt.ls/issues/675)\n+\t\tassertSame(item, server.resolveCompletionItem(item).join());\n+\t}\n+\n+\t@Test\n+\tpublic void testSnippet_record_with_package() throws JavaModelException {\n+\t\tICompilationUnit unit = getWorkingCopy(\"src/org/sample/Test.java\", \"package org.sample;\\n\");\n+\t\tint[] loc = findCompletionLocation(unit, \"package org.sample;\\n\");\n+\t\tCompletionList list = server.completion(JsonMessageHelper.getParams(createCompletionRequest(unit, loc[0], loc[1]))).join().getRight();\n+\n+\t\tassertNotNull(list);\n+\t\tList<CompletionItem> items = new ArrayList<>(list.getItems());\n+\t\tassertFalse(items.isEmpty());\n+\t\titems.sort((i1, i2) -> (i1.getSortText().compareTo(i2.getSortText())));\n+\n+\t\tCompletionItem item = items.get(9);\n+\t\tassertEquals(\"record\", item.getLabel());\n+\t\tString te = item.getInsertText();\n+\t\tassertEquals(\"/**\\n * Test\\n */\\npublic record Test(${0}) {\\n}\", te);\n+\t}\n+\n+\t@Ignore(value = \"When running tests, in SnippetCompletionProposal.getSnippetContent(), cu.getAllTypes() returns en empty array, so inner record name is not computed\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYxMTcyMg=="}, "originalCommit": {"oid": "a3a2e4e252199e757d76e759818e63bb7c286278"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTEwMjE3OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/contentassist/SnippetCompletionProposal.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNDozMToxN1rOF9SNlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNjo1ODo0OVrOF9TWPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwNTg0NA==", "bodyText": "@snjeza lemme know if there's a better way to do this", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1395#discussion_r399805844", "createdAt": "2020-03-29T14:31:17Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/contentassist/SnippetCompletionProposal.java", "diffHunk": "@@ -311,6 +367,39 @@ private static CompletionItem getInterfaceSnippet(ICompilationUnit cu, Completio\n \t\treturn interfaceSnippetItem;\n \t}\n \n+\tprivate static CompletionItem getRecordSnippet(SnippetCompletionContext scc, IProgressMonitor monitor) {\n+\t\tICompilationUnit cu = scc.getCompilationUnit();\n+\t\tIJavaProject javaProject = cu.getJavaProject();\n+\t\tif (javaProject == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tAST ast = AST.newAST(javaProject.getOptions(true));\n+\t\tif (ast.apiLevel() < AST.JLS14) {//TODO is there a better way to check JDK version?\n+\t\t\t//not checking if preview features are enabled, as Java 14+ might support records without preview flag\n+\t\t\treturn null;\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc36bb8e11ffd065c2fe0a599196249d1520fe76"}, "originalPosition": 357}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgxNDEzNw==", "bodyText": "javaProject.getOption(JavaCore.COMPILER_COMPLIANCE, true)", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1395#discussion_r399814137", "createdAt": "2020-03-29T15:36:17Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/contentassist/SnippetCompletionProposal.java", "diffHunk": "@@ -311,6 +367,39 @@ private static CompletionItem getInterfaceSnippet(ICompilationUnit cu, Completio\n \t\treturn interfaceSnippetItem;\n \t}\n \n+\tprivate static CompletionItem getRecordSnippet(SnippetCompletionContext scc, IProgressMonitor monitor) {\n+\t\tICompilationUnit cu = scc.getCompilationUnit();\n+\t\tIJavaProject javaProject = cu.getJavaProject();\n+\t\tif (javaProject == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tAST ast = AST.newAST(javaProject.getOptions(true));\n+\t\tif (ast.apiLevel() < AST.JLS14) {//TODO is there a better way to check JDK version?\n+\t\t\t//not checking if preview features are enabled, as Java 14+ might support records without preview flag\n+\t\t\treturn null;\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwNTg0NA=="}, "originalCommit": {"oid": "fc36bb8e11ffd065c2fe0a599196249d1520fe76"}, "originalPosition": 357}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgyNDQ0Ng==", "bodyText": "mmyeah. But it returns a String, that needs to be converted using internal JDT code to properly handle it", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1395#discussion_r399824446", "createdAt": "2020-03-29T16:58:49Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/contentassist/SnippetCompletionProposal.java", "diffHunk": "@@ -311,6 +367,39 @@ private static CompletionItem getInterfaceSnippet(ICompilationUnit cu, Completio\n \t\treturn interfaceSnippetItem;\n \t}\n \n+\tprivate static CompletionItem getRecordSnippet(SnippetCompletionContext scc, IProgressMonitor monitor) {\n+\t\tICompilationUnit cu = scc.getCompilationUnit();\n+\t\tIJavaProject javaProject = cu.getJavaProject();\n+\t\tif (javaProject == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tAST ast = AST.newAST(javaProject.getOptions(true));\n+\t\tif (ast.apiLevel() < AST.JLS14) {//TODO is there a better way to check JDK version?\n+\t\t\t//not checking if preview features are enabled, as Java 14+ might support records without preview flag\n+\t\t\treturn null;\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwNTg0NA=="}, "originalCommit": {"oid": "fc36bb8e11ffd065c2fe0a599196249d1520fe76"}, "originalPosition": 357}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTI5MzM5OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/contentassist/SnippetCompletionProposal.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNzo1MjowM1rOF9TvIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNzo1MjowM1rOF9TvIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgzMDgxOQ==", "bodyText": "at least the version comparison is more consistent with the rest of the codebase", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1395#discussion_r399830819", "createdAt": "2020-03-29T17:52:03Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/contentassist/SnippetCompletionProposal.java", "diffHunk": "@@ -311,6 +367,39 @@ private static CompletionItem getInterfaceSnippet(ICompilationUnit cu, Completio\n \t\treturn interfaceSnippetItem;\n \t}\n \n+\tprivate static CompletionItem getRecordSnippet(SnippetCompletionContext scc, IProgressMonitor monitor) {\n+\t\tICompilationUnit cu = scc.getCompilationUnit();\n+\t\tIJavaProject javaProject = cu.getJavaProject();\n+\t\tif (javaProject == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tString version = javaProject.getOption(JavaCore.COMPILER_COMPLIANCE, true);\n+\t\tif (JavaModelUtil.isVersionLessThan(version, JavaCore.VERSION_14)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bef7deeacb28ef3e9aaaa66c19fe98fc05aaf77"}, "originalPosition": 355}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3528, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}