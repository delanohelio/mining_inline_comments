{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMzQxMjI2", "number": 1408, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODozOTozOVrODx-OAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo0NDozNFrODx-VsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzI2MjExOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/semantictokens/ITokenModifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODozOTozOVrOGFvn2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODozOTozOVrOGFvn2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3NjMxMg==", "bodyText": "please add javadoc", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1408#discussion_r408676312", "createdAt": "2020-04-15T08:39:39Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/semantictokens/ITokenModifier.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Microsoft Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Microsoft Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package org.eclipse.jdt.ls.core.internal.semantictokens;\n+\n+import org.eclipse.jdt.core.dom.IBinding;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f74bbcc613623a1ba3cc8a3401747fdb793e6d35"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzI2NTY3OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/commands/SemanticTokensCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo0MDozNFrOGFvp9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo0MDozNFrOGFvp9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3Njg1NQ==", "bodyText": "if document is null at this point, we should return", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1408#discussion_r408676855", "createdAt": "2020-04-15T08:40:34Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/commands/SemanticTokensCommand.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Microsoft Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Microsoft Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package org.eclipse.jdt.ls.core.internal.commands;\n+\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.JavaModelException;\n+import org.eclipse.jdt.core.dom.CompilationUnit;\n+import org.eclipse.jdt.core.manipulation.CoreASTProvider;\n+import org.eclipse.jdt.ls.core.internal.JDTUtils;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.handlers.JsonRpcHelpers;\n+import org.eclipse.jdt.ls.core.internal.semantictokens.SemanticTokenManager;\n+import org.eclipse.jdt.ls.core.internal.semantictokens.SemanticTokens;\n+import org.eclipse.jdt.ls.core.internal.semantictokens.SemanticTokensLegend;\n+import org.eclipse.jdt.ls.core.internal.semantictokens.SemanticTokensVisitor;\n+import org.eclipse.jface.text.IDocument;\n+\n+public class SemanticTokensCommand {\n+\n+    public static SemanticTokens provide(String uri) {\n+\n+        IDocument document = null;\n+\n+        ICompilationUnit cu = JDTUtils.resolveCompilationUnit(uri);\n+        if (cu != null) {\n+            try {\n+                document = JsonRpcHelpers.toDocument(cu.getBuffer());\n+            } catch (JavaModelException e) {\n+                JavaLanguageServerPlugin.logException(\"Failed to provide semantic tokens for \" + uri, e);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f74bbcc613623a1ba3cc8a3401747fdb793e6d35"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzI4MTc2OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/semantictokens/SemanticTokensVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo0NDozNFrOGFvzqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo0NDozNFrOGFvzqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3OTMzNg==", "bodyText": "new ArrayList<>(manager.getTokenModifiers().values().size());", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1408#discussion_r408679336", "createdAt": "2020-04-15T08:44:34Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/semantictokens/SemanticTokensVisitor.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Microsoft Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Microsoft Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package org.eclipse.jdt.ls.core.internal.semantictokens;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.ASTVisitor;\n+import org.eclipse.jdt.core.dom.IBinding;\n+import org.eclipse.jdt.core.dom.IVariableBinding;\n+import org.eclipse.jdt.core.dom.MethodInvocation;\n+import org.eclipse.jdt.core.dom.SimpleName;\n+import org.eclipse.jdt.ls.core.internal.handlers.JsonRpcHelpers;\n+import org.eclipse.jface.text.IDocument;\n+\n+public class SemanticTokensVisitor extends ASTVisitor {\n+    private IDocument document;\n+    private SemanticTokenManager manager;\n+    private List<SemanticToken> tokens;\n+\n+    public SemanticTokensVisitor(IDocument document, SemanticTokenManager manager) {\n+        this.manager = manager;\n+        this.document = document;\n+        this.tokens = new ArrayList<>();\n+    }\n+\n+    private class SemanticToken {\n+        private final TokenType tokenType;\n+        private final ITokenModifier[] tokenModifiers;\n+        private final int offset;\n+        private final int length;\n+\n+        public SemanticToken(int offset, int length, TokenType tokenType, ITokenModifier[] tokenModifiers) {\n+            this.offset = offset;\n+            this.length = length;\n+            this.tokenType = tokenType;\n+            this.tokenModifiers = tokenModifiers;\n+        }\n+\n+        public TokenType getTokenType() {\n+            return tokenType;\n+        }\n+\n+        public ITokenModifier[] getTokenModifiers() {\n+            return tokenModifiers;\n+        }\n+\n+        public int getOffset() {\n+            return offset;\n+        }\n+\n+        public int getLength() {\n+            return length;\n+        }\n+    }\n+\n+    public SemanticTokens getSemanticTokens() {\n+        List<Integer> data = encoded();\n+        return new SemanticTokens(data);\n+    }\n+\n+    private List<Integer> encoded() {\n+        List<Integer> data = new ArrayList<>();\n+        int currentLine = 0;\n+        int currentColumn = 0;\n+        for (SemanticToken token : this.tokens) {\n+            int[] lineAndColumn = JsonRpcHelpers.toLine(this.document, token.getOffset());\n+            int line = lineAndColumn[0];\n+            int column = lineAndColumn[1];\n+            int deltaLine = line - currentLine;\n+            if (deltaLine != 0) {\n+                currentLine = line;\n+                currentColumn = 0;\n+            }\n+            int deltaColumn = column - currentColumn;\n+            int tokenTypeIndex = manager.getTokenTypes().indexOf(token.getTokenType());\n+            ITokenModifier[] modifiers = token.getTokenModifiers();\n+            int encodedModifiers = 0;\n+            for (ITokenModifier modifier : modifiers) {\n+                int bit = manager.getTokenModifiers().indexOf(modifier);\n+                if (bit >= 0) {\n+                    encodedModifiers = encodedModifiers | (0b00000001 << bit);\n+                }\n+            }\n+            data.add(deltaLine);\n+            data.add(deltaColumn);\n+            data.add(token.getLength());\n+            data.add(tokenTypeIndex);\n+            data.add(encodedModifiers);\n+        }\n+        return data;\n+    }\n+\n+    private void addToken(ASTNode node, TokenType tokenType, ITokenModifier[] modifiers) {\n+        int offset = node.getStartPosition();\n+        int length = node.getLength();\n+        SemanticToken token = new SemanticToken(offset, length, tokenType, modifiers);\n+        tokens.add(token);\n+    }\n+\n+    @Override\n+    public boolean visit(SimpleName node) {\n+        IBinding binding = node.resolveBinding();\n+        if (binding == null) {\n+            return super.visit(node);\n+        }\n+\n+        TokenType tokenType = null;\n+        switch (binding.getKind()) {\n+            case IBinding.VARIABLE: {\n+                if (((IVariableBinding) binding).isField()) {\n+                    tokenType = TokenType.VARIABLE;\n+                }\n+                break;\n+            }\n+            case IBinding.METHOD: {\n+                tokenType = TokenType.METHOD;\n+                break;\n+            }\n+            default:\n+                break;\n+        }\n+\n+        if (tokenType != null) {\n+            List<ITokenModifier> modifierList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f74bbcc613623a1ba3cc8a3401747fdb793e6d35"}, "originalPosition": 137}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3535, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}