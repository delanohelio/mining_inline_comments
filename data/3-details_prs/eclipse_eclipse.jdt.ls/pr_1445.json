{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NDg3ODAw", "number": 1445, "title": "Support refactoring when renaming or moving files", "bodyText": "Signed-off-by: Jinbo Wang jinbwan@microsoft.com", "createdAt": "2020-05-15T09:44:33Z", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1445", "merged": true, "mergeCommit": {"oid": "30583b9d8e31dd5035fbde644849dbeca6013a16"}, "closed": true, "closedAt": "2021-03-24T02:52:10Z", "author": {"login": "testforstephen"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchp4mngFqTQxMjk5NjIxMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABeFi3wcgBqjQ0ODgyMjgyNTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyOTk2MjEw", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1445#pullrequestreview-412996210", "createdAt": "2020-05-15T22:13:41Z", "commit": {"oid": "723dca239e2e70fee87471b5a0442e7b9c81fc6d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjoxMzo0MVrOGWVNeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjozMjo0NlrOGWVhvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2OTM2OQ==", "bodyText": "instead of using an intermediary IPath[] array, you can still manipulate the stream, filter the file paths, map to ICompilationUnits ...", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1445#discussion_r426069369", "createdAt": "2020-05-15T22:13:41Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/FileEventHandler.java", "diffHunk": "@@ -129,49 +149,129 @@ private static WorkspaceEdit computePackageRenameEdit(FileRenameEvent[] renameEv\n \t\tfor (FileRenameEvent event : renameEvents) {\n \t\t\tIPath oldLocation = ResourceUtils.filePathFromURI(event.oldUri);\n \t\t\tIPath newLocation = ResourceUtils.filePathFromURI(event.newUri);\n-\t\t\tfor (SourcePath sourcePath : sourcePaths) {\n-\t\t\t\tIPath sourceLocation = Path.fromOSString(sourcePath.path);\n-\t\t\t\tIPath sourceEntry = Path.fromOSString(sourcePath.classpathEntry);\n-\t\t\t\tif (sourceLocation.isPrefixOf(oldLocation)) {\n-\t\t\t\t\tSubMonitor renameMonitor = submonitor.split(100);\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tIJavaProject javaProject = ProjectUtils.getJavaProject(sourcePath.projectName);\n-\t\t\t\t\t\tif (javaProject == null) {\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tIPackageFragmentRoot packageRoot = javaProject.findPackageFragmentRoot(sourceEntry);\n-\t\t\t\t\t\tif (packageRoot == null) {\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tString oldPackageName = String.join(\".\", oldLocation.makeRelativeTo(sourceLocation).segments());\n-\t\t\t\t\t\tString newPackageName = String.join(\".\", newLocation.makeRelativeTo(sourceLocation).segments());\n-\t\t\t\t\t\tIPackageFragment oldPackageFragment = packageRoot.getPackageFragment(oldPackageName);\n-\t\t\t\t\t\tif (oldPackageFragment != null && !oldPackageFragment.isDefaultPackage() && oldPackageFragment.getResource() != null) {\n-\t\t\t\t\t\t\toldPackageFragment.getResource().refreshLocal(IResource.DEPTH_INFINITE, null);\n-\t\t\t\t\t\t\tif (oldPackageFragment.exists()) {\n-\t\t\t\t\t\t\t\tResourcesPlugin.getWorkspace().run((pm) -> {\n-\t\t\t\t\t\t\t\t\tWorkspaceEdit edit = getRenameEdit(oldPackageFragment, newPackageName, pm);\n-\t\t\t\t\t\t\t\t\troot[0] = ChangeUtil.mergeChanges(root[0], edit, true);\n-\t\t\t\t\t\t\t\t}, oldPackageFragment.getSchedulingRule(), IResource.NONE, renameMonitor);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} catch (CoreException e) {\n-\t\t\t\t\t\tJavaLanguageServerPlugin.logException(\"Failed to compute the package rename update\", e);\n-\t\t\t\t\t} finally {\n-\t\t\t\t\t\trenameMonitor.done();\n+\t\t\tIPackageFragment oldPackageFragment = resolvePackageFragment(oldLocation, sourcePaths);\n+\t\t\tSubMonitor renameMonitor = submonitor.split(100);\n+\t\t\ttry {\n+\t\t\t\tif (oldPackageFragment != null && !oldPackageFragment.isDefaultPackage() && oldPackageFragment.getResource() != null) {\n+\t\t\t\t\tString oldPackageName = oldPackageFragment.getElementName();\n+\t\t\t\t\tint lastDot = oldPackageName.lastIndexOf(\".\");\n+\t\t\t\t\tString newPackageName = lastDot < 0 ? newLocation.lastSegment() :\n+\t\t\t\t\t\toldPackageName.subSequence(0, lastDot + 1) + newLocation.lastSegment();\n+\t\t\t\t\toldPackageFragment.getResource().refreshLocal(IResource.DEPTH_INFINITE, null);\n+\t\t\t\t\tif (oldPackageFragment.exists()) {\n+\t\t\t\t\t\tResourcesPlugin.getWorkspace().run((pm) -> {\n+\t\t\t\t\t\t\tWorkspaceEdit edit = getRenameEdit(oldPackageFragment, newPackageName, pm);\n+\t\t\t\t\t\t\troot[0] = ChangeUtil.mergeChanges(root[0], edit, true);\n+\t\t\t\t\t\t}, oldPackageFragment.getSchedulingRule(), IResource.NONE, renameMonitor);\n \t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n \t\t\t\t}\n+\t\t\t} catch (CoreException e) {\n+\t\t\t\tJavaLanguageServerPlugin.logException(\"Failed to compute the package rename update\", e);\n+\t\t\t} finally {\n+\t\t\t\trenameMonitor.done();\n \t\t\t}\n \t\t}\n \n \t\tsubmonitor.done();\n \t\treturn ChangeUtil.hasChanges(root[0]) ? root[0] : null;\n \t}\n \n+\tprivate static WorkspaceEdit computeMoveEdit(FileRenameEvent[] moveEvents, SourcePath[] sourcePaths, IProgressMonitor monitor) {\n+\t\tIPath[] newPaths = Stream.of(moveEvents).map(event -> ResourceUtils.filePathFromURI(event.newUri)).toArray(IPath[]::new);\n+\t\tIPath destinationPath = getLongestCommonPath(newPaths);\n+\t\tif (destinationPath == null) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tIPackageFragment destinationPackage = resolvePackageFragment(destinationPath, sourcePaths);\n+\t\tif (destinationPackage == null) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tList<IJavaElement> javaElements = new ArrayList<>();\n+\t\tIPath[] oldPaths = Stream.of(moveEvents).map(event -> ResourceUtils.filePathFromURI(event.oldUri)).toArray(IPath[]::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723dca239e2e70fee87471b5a0442e7b9c81fc6d"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2OTUzOA==", "bodyText": "is it possible for a cu to not be on its own project's classpath?", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1445#discussion_r426069538", "createdAt": "2020-05-15T22:14:15Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/FileEventHandler.java", "diffHunk": "@@ -129,49 +149,129 @@ private static WorkspaceEdit computePackageRenameEdit(FileRenameEvent[] renameEv\n \t\tfor (FileRenameEvent event : renameEvents) {\n \t\t\tIPath oldLocation = ResourceUtils.filePathFromURI(event.oldUri);\n \t\t\tIPath newLocation = ResourceUtils.filePathFromURI(event.newUri);\n-\t\t\tfor (SourcePath sourcePath : sourcePaths) {\n-\t\t\t\tIPath sourceLocation = Path.fromOSString(sourcePath.path);\n-\t\t\t\tIPath sourceEntry = Path.fromOSString(sourcePath.classpathEntry);\n-\t\t\t\tif (sourceLocation.isPrefixOf(oldLocation)) {\n-\t\t\t\t\tSubMonitor renameMonitor = submonitor.split(100);\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tIJavaProject javaProject = ProjectUtils.getJavaProject(sourcePath.projectName);\n-\t\t\t\t\t\tif (javaProject == null) {\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tIPackageFragmentRoot packageRoot = javaProject.findPackageFragmentRoot(sourceEntry);\n-\t\t\t\t\t\tif (packageRoot == null) {\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tString oldPackageName = String.join(\".\", oldLocation.makeRelativeTo(sourceLocation).segments());\n-\t\t\t\t\t\tString newPackageName = String.join(\".\", newLocation.makeRelativeTo(sourceLocation).segments());\n-\t\t\t\t\t\tIPackageFragment oldPackageFragment = packageRoot.getPackageFragment(oldPackageName);\n-\t\t\t\t\t\tif (oldPackageFragment != null && !oldPackageFragment.isDefaultPackage() && oldPackageFragment.getResource() != null) {\n-\t\t\t\t\t\t\toldPackageFragment.getResource().refreshLocal(IResource.DEPTH_INFINITE, null);\n-\t\t\t\t\t\t\tif (oldPackageFragment.exists()) {\n-\t\t\t\t\t\t\t\tResourcesPlugin.getWorkspace().run((pm) -> {\n-\t\t\t\t\t\t\t\t\tWorkspaceEdit edit = getRenameEdit(oldPackageFragment, newPackageName, pm);\n-\t\t\t\t\t\t\t\t\troot[0] = ChangeUtil.mergeChanges(root[0], edit, true);\n-\t\t\t\t\t\t\t\t}, oldPackageFragment.getSchedulingRule(), IResource.NONE, renameMonitor);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} catch (CoreException e) {\n-\t\t\t\t\t\tJavaLanguageServerPlugin.logException(\"Failed to compute the package rename update\", e);\n-\t\t\t\t\t} finally {\n-\t\t\t\t\t\trenameMonitor.done();\n+\t\t\tIPackageFragment oldPackageFragment = resolvePackageFragment(oldLocation, sourcePaths);\n+\t\t\tSubMonitor renameMonitor = submonitor.split(100);\n+\t\t\ttry {\n+\t\t\t\tif (oldPackageFragment != null && !oldPackageFragment.isDefaultPackage() && oldPackageFragment.getResource() != null) {\n+\t\t\t\t\tString oldPackageName = oldPackageFragment.getElementName();\n+\t\t\t\t\tint lastDot = oldPackageName.lastIndexOf(\".\");\n+\t\t\t\t\tString newPackageName = lastDot < 0 ? newLocation.lastSegment() :\n+\t\t\t\t\t\toldPackageName.subSequence(0, lastDot + 1) + newLocation.lastSegment();\n+\t\t\t\t\toldPackageFragment.getResource().refreshLocal(IResource.DEPTH_INFINITE, null);\n+\t\t\t\t\tif (oldPackageFragment.exists()) {\n+\t\t\t\t\t\tResourcesPlugin.getWorkspace().run((pm) -> {\n+\t\t\t\t\t\t\tWorkspaceEdit edit = getRenameEdit(oldPackageFragment, newPackageName, pm);\n+\t\t\t\t\t\t\troot[0] = ChangeUtil.mergeChanges(root[0], edit, true);\n+\t\t\t\t\t\t}, oldPackageFragment.getSchedulingRule(), IResource.NONE, renameMonitor);\n \t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n \t\t\t\t}\n+\t\t\t} catch (CoreException e) {\n+\t\t\t\tJavaLanguageServerPlugin.logException(\"Failed to compute the package rename update\", e);\n+\t\t\t} finally {\n+\t\t\t\trenameMonitor.done();\n \t\t\t}\n \t\t}\n \n \t\tsubmonitor.done();\n \t\treturn ChangeUtil.hasChanges(root[0]) ? root[0] : null;\n \t}\n \n+\tprivate static WorkspaceEdit computeMoveEdit(FileRenameEvent[] moveEvents, SourcePath[] sourcePaths, IProgressMonitor monitor) {\n+\t\tIPath[] newPaths = Stream.of(moveEvents).map(event -> ResourceUtils.filePathFromURI(event.newUri)).toArray(IPath[]::new);\n+\t\tIPath destinationPath = getLongestCommonPath(newPaths);\n+\t\tif (destinationPath == null) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tIPackageFragment destinationPackage = resolvePackageFragment(destinationPath, sourcePaths);\n+\t\tif (destinationPackage == null) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tList<IJavaElement> javaElements = new ArrayList<>();\n+\t\tIPath[] oldPaths = Stream.of(moveEvents).map(event -> ResourceUtils.filePathFromURI(event.oldUri)).toArray(IPath[]::new);\n+\t\tfor (int i = 0; i < oldPaths.length; i++) {\n+\t\t\tif (oldPaths[i].toFile().isFile()) {\n+\t\t\t\tICompilationUnit cu = JDTUtils.resolveCompilationUnit(moveEvents[i].oldUri);\n+\t\t\t\tif (cu != null && cu.getJavaProject() != null && cu.getJavaProject().isOnClasspath(cu)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723dca239e2e70fee87471b5a0442e7b9c81fc6d"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2OTg1OA==", "bodyText": "looks like something that belongs to a utility class, that could even deserve specific unit tests", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1445#discussion_r426069858", "createdAt": "2020-05-15T22:15:27Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/FileEventHandler.java", "diffHunk": "@@ -129,49 +149,129 @@ private static WorkspaceEdit computePackageRenameEdit(FileRenameEvent[] renameEv\n \t\tfor (FileRenameEvent event : renameEvents) {\n \t\t\tIPath oldLocation = ResourceUtils.filePathFromURI(event.oldUri);\n \t\t\tIPath newLocation = ResourceUtils.filePathFromURI(event.newUri);\n-\t\t\tfor (SourcePath sourcePath : sourcePaths) {\n-\t\t\t\tIPath sourceLocation = Path.fromOSString(sourcePath.path);\n-\t\t\t\tIPath sourceEntry = Path.fromOSString(sourcePath.classpathEntry);\n-\t\t\t\tif (sourceLocation.isPrefixOf(oldLocation)) {\n-\t\t\t\t\tSubMonitor renameMonitor = submonitor.split(100);\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tIJavaProject javaProject = ProjectUtils.getJavaProject(sourcePath.projectName);\n-\t\t\t\t\t\tif (javaProject == null) {\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tIPackageFragmentRoot packageRoot = javaProject.findPackageFragmentRoot(sourceEntry);\n-\t\t\t\t\t\tif (packageRoot == null) {\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tString oldPackageName = String.join(\".\", oldLocation.makeRelativeTo(sourceLocation).segments());\n-\t\t\t\t\t\tString newPackageName = String.join(\".\", newLocation.makeRelativeTo(sourceLocation).segments());\n-\t\t\t\t\t\tIPackageFragment oldPackageFragment = packageRoot.getPackageFragment(oldPackageName);\n-\t\t\t\t\t\tif (oldPackageFragment != null && !oldPackageFragment.isDefaultPackage() && oldPackageFragment.getResource() != null) {\n-\t\t\t\t\t\t\toldPackageFragment.getResource().refreshLocal(IResource.DEPTH_INFINITE, null);\n-\t\t\t\t\t\t\tif (oldPackageFragment.exists()) {\n-\t\t\t\t\t\t\t\tResourcesPlugin.getWorkspace().run((pm) -> {\n-\t\t\t\t\t\t\t\t\tWorkspaceEdit edit = getRenameEdit(oldPackageFragment, newPackageName, pm);\n-\t\t\t\t\t\t\t\t\troot[0] = ChangeUtil.mergeChanges(root[0], edit, true);\n-\t\t\t\t\t\t\t\t}, oldPackageFragment.getSchedulingRule(), IResource.NONE, renameMonitor);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} catch (CoreException e) {\n-\t\t\t\t\t\tJavaLanguageServerPlugin.logException(\"Failed to compute the package rename update\", e);\n-\t\t\t\t\t} finally {\n-\t\t\t\t\t\trenameMonitor.done();\n+\t\t\tIPackageFragment oldPackageFragment = resolvePackageFragment(oldLocation, sourcePaths);\n+\t\t\tSubMonitor renameMonitor = submonitor.split(100);\n+\t\t\ttry {\n+\t\t\t\tif (oldPackageFragment != null && !oldPackageFragment.isDefaultPackage() && oldPackageFragment.getResource() != null) {\n+\t\t\t\t\tString oldPackageName = oldPackageFragment.getElementName();\n+\t\t\t\t\tint lastDot = oldPackageName.lastIndexOf(\".\");\n+\t\t\t\t\tString newPackageName = lastDot < 0 ? newLocation.lastSegment() :\n+\t\t\t\t\t\toldPackageName.subSequence(0, lastDot + 1) + newLocation.lastSegment();\n+\t\t\t\t\toldPackageFragment.getResource().refreshLocal(IResource.DEPTH_INFINITE, null);\n+\t\t\t\t\tif (oldPackageFragment.exists()) {\n+\t\t\t\t\t\tResourcesPlugin.getWorkspace().run((pm) -> {\n+\t\t\t\t\t\t\tWorkspaceEdit edit = getRenameEdit(oldPackageFragment, newPackageName, pm);\n+\t\t\t\t\t\t\troot[0] = ChangeUtil.mergeChanges(root[0], edit, true);\n+\t\t\t\t\t\t}, oldPackageFragment.getSchedulingRule(), IResource.NONE, renameMonitor);\n \t\t\t\t\t}\n-\n-\t\t\t\t\tbreak;\n \t\t\t\t}\n+\t\t\t} catch (CoreException e) {\n+\t\t\t\tJavaLanguageServerPlugin.logException(\"Failed to compute the package rename update\", e);\n+\t\t\t} finally {\n+\t\t\t\trenameMonitor.done();\n \t\t\t}\n \t\t}\n \n \t\tsubmonitor.done();\n \t\treturn ChangeUtil.hasChanges(root[0]) ? root[0] : null;\n \t}\n \n+\tprivate static WorkspaceEdit computeMoveEdit(FileRenameEvent[] moveEvents, SourcePath[] sourcePaths, IProgressMonitor monitor) {\n+\t\tIPath[] newPaths = Stream.of(moveEvents).map(event -> ResourceUtils.filePathFromURI(event.newUri)).toArray(IPath[]::new);\n+\t\tIPath destinationPath = getLongestCommonPath(newPaths);\n+\t\tif (destinationPath == null) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tIPackageFragment destinationPackage = resolvePackageFragment(destinationPath, sourcePaths);\n+\t\tif (destinationPackage == null) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tList<IJavaElement> javaElements = new ArrayList<>();\n+\t\tIPath[] oldPaths = Stream.of(moveEvents).map(event -> ResourceUtils.filePathFromURI(event.oldUri)).toArray(IPath[]::new);\n+\t\tfor (int i = 0; i < oldPaths.length; i++) {\n+\t\t\tif (oldPaths[i].toFile().isFile()) {\n+\t\t\t\tICompilationUnit cu = JDTUtils.resolveCompilationUnit(moveEvents[i].oldUri);\n+\t\t\t\tif (cu != null && cu.getJavaProject() != null && cu.getJavaProject().isOnClasspath(cu)) {\n+\t\t\t\t\tjavaElements.add(cu);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (javaElements.isEmpty()) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tIReorgDestination packageDestination = ReorgDestinationFactory.createDestination(destinationPackage);\n+\t\tWorkspaceEdit[] root = new WorkspaceEdit[1];\n+\t\ttry {\n+\t\t\tResourcesPlugin.getWorkspace().run((pm) -> {\n+\t\t\t\troot[0] = MoveHandler.move(new IResource[0], javaElements.toArray(new IJavaElement[0]), packageDestination, true, pm);\n+\t\t\t}, monitor);\n+\t\t} catch (CoreException e) {\n+\t\t\tJavaLanguageServerPlugin.logException(\"Failed to compute the move update\", e);\n+\t\t}\n+\n+\t\treturn ChangeUtil.hasChanges(root[0]) ? root[0] : null;\n+\t}\n+\n+\tprivate static IPath getLongestCommonPath(IPath[] paths) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723dca239e2e70fee87471b5a0442e7b9c81fc6d"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3MzM3Ng==", "bodyText": "can be moved inside the if block", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1445#discussion_r426073376", "createdAt": "2020-05-15T22:28:10Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/FileEventHandler.java", "diffHunk": "@@ -215,10 +332,11 @@ private static ICompilationUnit createCompilationUnit(ICompilationUnit unit) {\n \t\t\tunit.getResource().refreshLocal(IResource.DEPTH_ONE, new NullProgressMonitor());\n \t\t\tif (unit.getResource().exists()) {\n \t\t\t\tIJavaElement parent = unit.getParent();\n-\t\t\t\tif (parent instanceof IPackageFragment) {\n-\t\t\t\t\tIPackageFragment pkg = (IPackageFragment) parent;\n+\t\t\t\tif (parent instanceof PackageFragment) {\n+\t\t\t\t\tPackageFragment pkg = (PackageFragment) parent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723dca239e2e70fee87471b5a0442e7b9c81fc6d"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3MzQ5Mw==", "bodyText": "can be merged with the enclosing if", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1445#discussion_r426073493", "createdAt": "2020-05-15T22:28:42Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/FileEventHandler.java", "diffHunk": "@@ -215,10 +332,11 @@ private static ICompilationUnit createCompilationUnit(ICompilationUnit unit) {\n \t\t\tunit.getResource().refreshLocal(IResource.DEPTH_ONE, new NullProgressMonitor());\n \t\t\tif (unit.getResource().exists()) {\n \t\t\t\tIJavaElement parent = unit.getParent();\n-\t\t\t\tif (parent instanceof IPackageFragment) {\n-\t\t\t\t\tIPackageFragment pkg = (IPackageFragment) parent;\n+\t\t\t\tif (parent instanceof PackageFragment) {\n+\t\t\t\t\tPackageFragment pkg = (PackageFragment) parent;\n \t\t\t\t\tif (JavaModelManager.determineIfOnClasspath(unit.getResource(), unit.getJavaProject()) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723dca239e2e70fee87471b5a0442e7b9c81fc6d"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3NDU1OQ==", "bodyText": "why would this change?", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1445#discussion_r426074559", "createdAt": "2020-05-15T22:32:46Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/MoveHandlerTest.java", "diffHunk": "@@ -163,7 +163,7 @@ public void testMoveFile() throws JavaModelException, BadLocationException {\n \t\tassertNotNull(refactorEdit);\r\n \t\tassertNotNull(refactorEdit.edit);\r\n \t\tList<Either<TextDocumentEdit, ResourceOperation>> changes = refactorEdit.edit.getDocumentChanges();\r\n-\t\tassertEquals(4, changes.size());\r\n+\t\tassertEquals(3, changes.size());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723dca239e2e70fee87471b5a0442e7b9c81fc6d"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNjk3Mzgw", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1445#pullrequestreview-440697380", "createdAt": "2020-07-01T09:23:26Z", "commit": {"oid": "723dca239e2e70fee87471b5a0442e7b9c81fc6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOToyMzoyNlrOGreDfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOToyMzoyNlrOGreDfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzNDM2NQ==", "bodyText": "I think we should remove this   Objects.equals(oldPath.removeLastSegments(1), newPath.removeLastSegments(1).\nIf i want to  rename package  jdt.pkg1 to  com.pkg1,  then   because \"Objects.equals(oldPath.removeLastSegments(1), newPath.removeLastSegments(1)\" ,   isFolderRenameEvent will return false.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1445#discussion_r448234365", "createdAt": "2020-07-01T09:23:26Z", "author": {"login": "kuafuwang"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/FileEventHandler.java", "diffHunk": "@@ -200,6 +300,23 @@ private static boolean isFolderRenameEvent(FileRenameEvent event) {\n \t\treturn (oldPath.toFile().isDirectory() || newPath.toFile().isDirectory()) && Objects.equals(oldPath.removeLastSegments(1), newPath.removeLastSegments(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723dca239e2e70fee87471b5a0442e7b9c81fc6d"}, "originalPosition": 227}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e4252d7780118ec4cb3edf101829629a539b1518", "author": {"user": {"login": "testforstephen", "name": "Jinbo Wang"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/e4252d7780118ec4cb3edf101829629a539b1518", "committedDate": "2020-05-18T14:25:30Z", "message": "address review comments\n\nSigned-off-by: Jinbo Wang <jinbwan@microsoft.com>"}, "afterCommit": {"oid": "faa7b9db644fb45d0d58bc43fefd077ebd6ddd57", "author": {"user": {"login": "testforstephen", "name": "Jinbo Wang"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/faa7b9db644fb45d0d58bc43fefd077ebd6ddd57", "committedDate": "2020-10-19T09:25:16Z", "message": "Support move files\n\nSigned-off-by: Jinbo Wang <jinbwan@microsoft.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "faa7b9db644fb45d0d58bc43fefd077ebd6ddd57", "author": {"user": {"login": "testforstephen", "name": "Jinbo Wang"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/faa7b9db644fb45d0d58bc43fefd077ebd6ddd57", "committedDate": "2020-10-19T09:25:16Z", "message": "Support move files\n\nSigned-off-by: Jinbo Wang <jinbwan@microsoft.com>"}, "afterCommit": {"oid": "6a42fb3ad0c88d39088c5e5517b13483e7b4813f", "author": {"user": {"login": "testforstephen", "name": "Jinbo Wang"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/6a42fb3ad0c88d39088c5e5517b13483e7b4813f", "committedDate": "2021-02-24T04:23:10Z", "message": "Support refactoring when renaming or moving files\n\nSigned-off-by: Jinbo Wang <jinbwan@microsoft.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAwNTQxODkw", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1445#pullrequestreview-600541890", "createdAt": "2021-03-01T09:37:16Z", "commit": {"oid": "6a42fb3ad0c88d39088c5e5517b13483e7b4813f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQwOTozNzoxNlrOItfBdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQwOTozNzoxNlrOItfBdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDU2NTExMQ==", "bodyText": "Since we are resolving the old uri now, will this if block be hit?", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1445#discussion_r584565111", "createdAt": "2021-03-01T09:37:16Z", "author": {"login": "jdneo"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/FileEventHandler.java", "diffHunk": "@@ -52,22 +59,64 @@\n \n public class FileEventHandler {\n \n-\tpublic static WorkspaceEdit handleRenameFiles(FileRenameParams params, IProgressMonitor monitor) {\n+\tpublic static WorkspaceEdit handleWillRenameFiles(FileRenameParams params, IProgressMonitor monitor) {\n \t\tif (params.files == null || params.files.isEmpty()) {\n \t\t\treturn null;\n \t\t}\n \n-\t\tFileRenameEvent[] files = params.files.stream().filter(event -> isFileNameRenameEvent(event)).toArray(FileRenameEvent[]::new);\n-\t\tif (files.length == 0) {\n+\t\tFileRenameEvent[] renameFiles = new FileRenameEvent[0];\n+\t\tFileRenameEvent[] renameFolders = new FileRenameEvent[0];\n+\t\tFileRenameEvent[] moveFiles = new FileRenameEvent[0];\n+\t\tif (params.files.size() == 1) {\n+\t\t\tFileRenameEvent renameEvent = params.files.get(0);\n+\t\t\tif (isFileNameRenameEvent(renameEvent)) {\n+\t\t\t\trenameFiles = new FileRenameEvent[] { renameEvent };\n+\t\t\t} else if (isFolderRenameEvent(renameEvent)) {\n+\t\t\t\trenameFolders = new FileRenameEvent[] { renameEvent };\n+\t\t\t} else if (isMoveEvent(renameEvent)) {\n+\t\t\t\tmoveFiles = new FileRenameEvent[] { renameEvent };\n+\t\t\t}\n+\t\t} else {\n+\t\t\tmoveFiles = params.files.stream().filter(event -> isMoveEvent(event)).toArray(FileRenameEvent[]::new);\n+\t\t}\n+\n+\t\tif (renameFiles.length == 0 && renameFolders.length == 0 && moveFiles.length == 0) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tSourcePath[] sourcePaths = getSourcePaths();\n+\t\tif (sourcePaths == null || sourcePaths.length == 0) {\n \t\t\treturn null;\n \t\t}\n \n-\t\tSubMonitor submonitor = SubMonitor.convert(monitor, \"Computing rename updates...\", 100 * files.length);\n \t\tWorkspaceEdit root = null;\n-\t\tfor (FileRenameEvent event : files) {\n+\t\tSubMonitor submonitor = SubMonitor.convert(monitor, \"Computing rename updates...\", renameFiles.length + renameFolders.length + moveFiles.length);\n+\t\tif (renameFiles.length > 0) {\n+\t\t\tWorkspaceEdit edit = computeFileRenameEdit(renameFiles, submonitor.split(renameFiles.length));\n+\t\t\troot = ChangeUtil.mergeChanges(root, edit, true);\n+\t\t}\n+\n+\t\tif (renameFolders.length > 0) {\n+\t\t\tWorkspaceEdit edit = computePackageRenameEdit(renameFolders, sourcePaths, submonitor.split(renameFolders.length));\n+\t\t\troot = ChangeUtil.mergeChanges(root, edit, true);\n+\t\t}\n+\n+\t\tif (moveFiles.length > 0) {\n+\t\t\tWorkspaceEdit edit = computeMoveEdit(moveFiles, sourcePaths, submonitor.split(moveFiles.length));\n+\t\t\troot = ChangeUtil.mergeChanges(root, edit, true);\n+\t\t}\n+\n+\t\tsubmonitor.done();\n+\t\treturn ChangeUtil.hasChanges(root) ? root : null;\n+\t}\n+\n+\tprivate static WorkspaceEdit computeFileRenameEdit(FileRenameEvent[] renameEvents, IProgressMonitor monitor) {\n+\t\tSubMonitor submonitor = SubMonitor.convert(monitor, \"Computing file rename updates...\", 100 * renameEvents.length);\n+\t\tWorkspaceEdit root = null;\n+\t\tfor (FileRenameEvent event : renameEvents) {\n \t\t\tString oldUri = event.oldUri;\n \t\t\tString newUri = event.newUri;\n-\t\t\tICompilationUnit unit = JDTUtils.resolveCompilationUnit(newUri);\n+\t\t\tICompilationUnit unit = JDTUtils.resolveCompilationUnit(oldUri);\n \t\t\tSubMonitor splitedMonitor = submonitor.split(100);\n \t\t\ttry {\n \t\t\t\tif (unit != null && !unit.exists()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a42fb3ad0c88d39088c5e5517b13483e7b4813f"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAxNDAwOTQw", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1445#pullrequestreview-601400940", "createdAt": "2021-03-02T04:23:18Z", "commit": {"oid": "6a42fb3ad0c88d39088c5e5517b13483e7b4813f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwNDoyMzoxOFrOIuIRgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwNDoyMzoxOFrOIuIRgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTI0MDk2MQ==", "bodyText": "pass the monitor as the param?", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1445#discussion_r585240961", "createdAt": "2021-03-02T04:23:18Z", "author": {"login": "jdneo"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/FileEventHandler.java", "diffHunk": "@@ -105,73 +154,148 @@ public void run(IProgressMonitor monitor) throws CoreException {\n \t\treturn root;\n \t}\n \n-\tpublic static WorkspaceEdit handleWillRenameFiles(FileRenameParams params, IProgressMonitor monitor) {\n-\t\tif (params.files == null || params.files.isEmpty()) {\n-\t\t\treturn null;\n+\tprivate static WorkspaceEdit computePackageRenameEdit(FileRenameEvent[] renameEvents, SourcePath[] sourcePaths, IProgressMonitor monitor) {\n+\t\tWorkspaceEdit[] root = new WorkspaceEdit[1];\n+\t\tSubMonitor submonitor = SubMonitor.convert(monitor, \"Computing package rename updates...\", 100 * renameEvents.length);\n+\t\tfor (FileRenameEvent event : renameEvents) {\n+\t\t\tIPath oldLocation = ResourceUtils.filePathFromURI(event.oldUri);\n+\t\t\tIPath newLocation = ResourceUtils.filePathFromURI(event.newUri);\n+\t\t\tIPackageFragment oldPackageFragment = resolvePackageFragment(oldLocation, sourcePaths);\n+\t\t\tSubMonitor renameMonitor = submonitor.split(100);\n+\t\t\ttry {\n+\t\t\t\tif (oldPackageFragment != null && !oldPackageFragment.isDefaultPackage() && oldPackageFragment.getResource() != null) {\n+\t\t\t\t\tString newPackageName = resolvePackageName(newLocation, sourcePaths);\n+\t\t\t\t\tif (newPackageName == null) {\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\n+\t\t\t\t\toldPackageFragment.getResource().refreshLocal(IResource.DEPTH_INFINITE, null);\n+\t\t\t\t\tif (oldPackageFragment.exists()) {\n+\t\t\t\t\t\tResourcesPlugin.getWorkspace().run((pm) -> {\n+\t\t\t\t\t\t\tWorkspaceEdit edit = getRenameEdit(oldPackageFragment, newPackageName, pm);\n+\t\t\t\t\t\t\troot[0] = ChangeUtil.mergeChanges(root[0], edit, true);\n+\t\t\t\t\t\t}, oldPackageFragment.getSchedulingRule(), IResource.NONE, renameMonitor);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t} catch (CoreException e) {\n+\t\t\t\tJavaLanguageServerPlugin.logException(\"Failed to compute the package rename update\", e);\n+\t\t\t} finally {\n+\t\t\t\trenameMonitor.done();\n+\t\t\t}\n \t\t}\n \n-\t\tFileRenameEvent[] renamefolders = params.files.stream().filter(event -> isFolderRenameEvent(event)).toArray(FileRenameEvent[]::new);\n-\t\tif (renamefolders.length == 0) {\n+\t\tsubmonitor.done();\n+\t\treturn ChangeUtil.hasChanges(root[0]) ? root[0] : null;\n+\t}\n+\n+\tprivate static WorkspaceEdit computeMoveEdit(FileRenameEvent[] moveEvents, SourcePath[] sourcePaths, IProgressMonitor monitor) {\n+\t\tIPath[] newPaths = Stream.of(moveEvents).map(event -> ResourceUtils.filePathFromURI(event.newUri)).toArray(IPath[]::new);\n+\t\tIPath destinationPath = ResourceUtils.getLongestCommonPath(newPaths);\n+\t\tif (destinationPath == null) {\n \t\t\treturn null;\n \t\t}\n \n-\t\tSourcePath[] sourcePaths = getSourcePaths();\n-\t\tif (sourcePaths == null || sourcePaths.length == 0) {\n+\t\t// Verify all files are moving to the same destination.\n+\t\tfor (FileRenameEvent event : moveEvents) {\n+\t\t\tIPath oldPath = ResourceUtils.filePathFromURI(event.oldUri);\n+\t\t\tIPath expectedNewPath = destinationPath.append(oldPath.lastSegment());\n+\t\t\tIPath actualNewPath = ResourceUtils.filePathFromURI(event.newUri);\n+\t\t\tif (!Objects.equals(expectedNewPath, actualNewPath)) {\n+\t\t\t\tJavaLanguageServerPlugin.logError(\"Failed to compute move refactoring because the files are not moving to the same destination \" + destinationPath.toOSString());\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}\n+\n+\t\tIPackageFragment destinationPackage = resolvePackageFragment(destinationPath, sourcePaths);\n+\t\tif (destinationPackage == null) {\n \t\t\treturn null;\n \t\t}\n \n-\t\treturn computePackageRenameEdit(renamefolders, sourcePaths, monitor);\n-\t}\n+\t\t// formatter:off\n+\t\tICompilationUnit[] cus = Stream.of(moveEvents)\n+\t\t\t.filter(event -> {\n+\t\t\t\tIPath oldPath = ResourceUtils.filePathFromURI(event.oldUri);\n+\t\t\t\treturn oldPath != null && oldPath.toFile().isFile();\n+\t\t\t}).map(event -> JDTUtils.resolveCompilationUnit(event.oldUri))\n+\t\t\t.filter(cu -> cu != null && cu.getJavaProject() != null)\n+\t\t\t.toArray(ICompilationUnit[]::new);\n+\t\t// formatter:on\n+\t\tList<ICompilationUnit> nonClasspathCus = new ArrayList<>();\n+\t\tfor (ICompilationUnit unit : cus) {\n+\t\t\tif (!unit.getJavaProject().isOnClasspath(unit)) {\n+\t\t\t\tnonClasspathCus.add(unit);\n+\t\t\t}\n+\t\t}\n \n-\tprivate static WorkspaceEdit computePackageRenameEdit(FileRenameEvent[] renameEvents, SourcePath[] sourcePaths, IProgressMonitor monitor) {\n \t\tWorkspaceEdit[] root = new WorkspaceEdit[1];\n-\t\tSubMonitor submonitor = SubMonitor.convert(monitor, \"Computing package rename updates...\", 100 * renameEvents.length);\n-\t\tfor (FileRenameEvent event : renameEvents) {\n-\t\t\tIPath oldLocation = ResourceUtils.filePathFromURI(event.oldUri);\n-\t\t\tIPath newLocation = ResourceUtils.filePathFromURI(event.newUri);\n-\t\t\tfor (SourcePath sourcePath : sourcePaths) {\n-\t\t\t\tIPath sourceLocation = Path.fromOSString(sourcePath.path);\n-\t\t\t\tIPath sourceEntry = Path.fromOSString(sourcePath.classpathEntry);\n-\t\t\t\tif (sourceLocation.isPrefixOf(oldLocation)) {\n-\t\t\t\t\tSubMonitor renameMonitor = submonitor.split(100);\n+\t\tif (cus.length > 0) {\n+\t\t\ttry {\n+\t\t\t\t// For the cu that's not on the project's classpath, need to become workingcopy first,\n+\t\t\t\t// otherwise invoking cu.getBuffer() will throw exception.\n+\t\t\t\tfor (ICompilationUnit cu : nonClasspathCus) {\n+\t\t\t\t\tcu.becomeWorkingCopy(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a42fb3ad0c88d39088c5e5517b13483e7b4813f"}, "originalPosition": 214}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6a42fb3ad0c88d39088c5e5517b13483e7b4813f", "author": {"user": {"login": "testforstephen", "name": "Jinbo Wang"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/6a42fb3ad0c88d39088c5e5517b13483e7b4813f", "committedDate": "2021-02-24T04:23:10Z", "message": "Support refactoring when renaming or moving files\n\nSigned-off-by: Jinbo Wang <jinbwan@microsoft.com>"}, "afterCommit": {"oid": "3e8c692fd7dfd00fc603b4c8e7bee4430fb82504", "author": {"user": {"login": "testforstephen", "name": "Jinbo Wang"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/3e8c692fd7dfd00fc603b4c8e7bee4430fb82504", "committedDate": "2021-03-02T07:42:17Z", "message": "Remove the unnecessary createCompilationUnit logic\n\nSigned-off-by: Jinbo Wang <jinbwan@microsoft.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjEyOTAwOTQy", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1445#pullrequestreview-612900942", "createdAt": "2021-03-16T06:55:36Z", "commit": {"oid": "d5d79f6f9fcb655c5e71fbab42e9e04e9185350c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53720c6af030f9589504f42e4f9a53c39a574607", "author": {"user": {"login": "testforstephen", "name": "Jinbo Wang"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/53720c6af030f9589504f42e4f9a53c39a574607", "committedDate": "2021-03-22T01:43:49Z", "message": "Support refactoring when renaming or moving files\n\nSigned-off-by: Jinbo Wang <jinbwan@microsoft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be0fd0aace10306bc8b07d87d4491b77241c86b8", "author": {"user": {"login": "testforstephen", "name": "Jinbo Wang"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/be0fd0aace10306bc8b07d87d4491b77241c86b8", "committedDate": "2021-03-22T04:17:03Z", "message": "Adopt lsp4j interfaces to handle willRenameFiles event\n\nSigned-off-by: Jinbo Wang <jinbwan@microsoft.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d5d79f6f9fcb655c5e71fbab42e9e04e9185350c", "author": {"user": {"login": "testforstephen", "name": "Jinbo Wang"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/d5d79f6f9fcb655c5e71fbab42e9e04e9185350c", "committedDate": "2021-03-05T06:32:10Z", "message": "Guard the FileNotFound error for those document requests triggered by moving files"}, "afterCommit": {"oid": "be0fd0aace10306bc8b07d87d4491b77241c86b8", "author": {"user": {"login": "testforstephen", "name": "Jinbo Wang"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/be0fd0aace10306bc8b07d87d4491b77241c86b8", "committedDate": "2021-03-22T04:17:03Z", "message": "Adopt lsp4j interfaces to handle willRenameFiles event\n\nSigned-off-by: Jinbo Wang <jinbwan@microsoft.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1116, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}