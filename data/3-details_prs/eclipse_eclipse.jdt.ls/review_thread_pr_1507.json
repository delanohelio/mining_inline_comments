{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NDQwNjk3", "number": 1507, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNjoyMzowN1rOEPmNFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDozNDozNlrOEPqvqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzkwMDM3OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/ClientPreferences.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNjoyMzowN1rOGzZQqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDoyMzo0M1rOGzgJvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU0NDQyNg==", "bodyText": "Why is this needed? there's no need for clients to implement a UI mechanism behind, all should be able to use this feature without extra config", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1507#discussion_r456544426", "createdAt": "2020-07-17T16:23:07Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/ClientPreferences.java", "diffHunk": "@@ -209,6 +209,10 @@ public boolean isAdvancedExtractRefactoringSupported() {\n \t\treturn Boolean.parseBoolean(extendedClientCapabilities.getOrDefault(\"advancedExtractRefactoringSupport\", \"false\").toString());\n \t}\n \n+\tpublic boolean isAdvancedIntroduceParameterRefactoringSupported() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36012a47d8726b27c949477bb3d7457ae5a8abd6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4NzU4MQ==", "bodyText": "We use this property to trigger the parameter rename, after the code action has been applied.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1507#discussion_r456587581", "createdAt": "2020-07-17T17:49:42Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/ClientPreferences.java", "diffHunk": "@@ -209,6 +209,10 @@ public boolean isAdvancedExtractRefactoringSupported() {\n \t\treturn Boolean.parseBoolean(extendedClientCapabilities.getOrDefault(\"advancedExtractRefactoringSupport\", \"false\").toString());\n \t}\n \n+\tpublic boolean isAdvancedIntroduceParameterRefactoringSupported() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU0NDQyNg=="}, "originalCommit": {"oid": "36012a47d8726b27c949477bb3d7457ae5a8abd6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY1NzM0MA==", "bodyText": "sorry I was actually testing the wrong thing. You're right, it works as expected", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1507#discussion_r456657340", "createdAt": "2020-07-17T20:23:43Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/ClientPreferences.java", "diffHunk": "@@ -209,6 +209,10 @@ public boolean isAdvancedExtractRefactoringSupported() {\n \t\treturn Boolean.parseBoolean(extendedClientCapabilities.getOrDefault(\"advancedExtractRefactoringSupport\", \"false\").toString());\n \t}\n \n+\tpublic boolean isAdvancedIntroduceParameterRefactoringSupported() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU0NDQyNg=="}, "originalCommit": {"oid": "36012a47d8726b27c949477bb3d7457ae5a8abd6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzkwNTM5OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/text/correction/RefactorProposalUtility.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNjoyNDo0NVrOGzZTtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo0OTo0NlrOGzb5bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU0NTIwNw==", "bodyText": "that seems unnecessary", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1507#discussion_r456545207", "createdAt": "2020-07-17T16:24:45Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/text/correction/RefactorProposalUtility.java", "diffHunk": "@@ -663,6 +666,26 @@ public static CUCorrectionProposal getExtractMethodProposal(CodeActionParams par\n \t\treturn null;\n \t}\n \n+\tpublic static CUCorrectionProposal getIntroduceParameterRefactoringProposals(CodeActionParams params, IInvocationContext context, ASTNode coveringNode, boolean returnAsCommand, IProblemLocationCore[] problemLocations)\n+\t\t\tthrows CoreException {\n+\t\tfinal ICompilationUnit cu = context.getCompilationUnit();\n+\t\tfinal IntroduceParameterRefactoring introduceParameterRefactoring = new IntroduceParameterRefactoring(cu, context.getSelectionOffset(), context.getSelectionLength());\n+\t\tLinkedProposalModelCore linkedProposalModel = new LinkedProposalModelCore();\n+\t\tintroduceParameterRefactoring.setLinkedProposalModel(linkedProposalModel);\n+\t\tif (introduceParameterRefactoring.checkInitialConditions(new NullProgressMonitor()).isOK()) {\n+\t\t\tintroduceParameterRefactoring.setParameterName(introduceParameterRefactoring.guessedParameterName());\n+\t\t\tString label = RefactoringCoreMessages.IntroduceParameterRefactoring_name + \"...\";\n+\t\t\tint relevance = (problemLocations != null && problemLocations.length > 0) ? IProposalRelevance.EXTRACT_CONSTANT_ERROR : IProposalRelevance.EXTRACT_CONSTANT;\n+\t\t\tif (returnAsCommand) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36012a47d8726b27c949477bb3d7457ae5a8abd6"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4NzYyOA==", "bodyText": "See the previous comment and some existing examples:\n\nhttps://github.com/eclipse/eclipse.jdt.ls/blob/master/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/text/correction/RefactorProposalUtility.java#L302\nhttps://github.com/eclipse/eclipse.jdt.ls/blob/master/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/text/correction/RefactorProposalUtility.java#L440", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1507#discussion_r456587628", "createdAt": "2020-07-17T17:49:46Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/text/correction/RefactorProposalUtility.java", "diffHunk": "@@ -663,6 +666,26 @@ public static CUCorrectionProposal getExtractMethodProposal(CodeActionParams par\n \t\treturn null;\n \t}\n \n+\tpublic static CUCorrectionProposal getIntroduceParameterRefactoringProposals(CodeActionParams params, IInvocationContext context, ASTNode coveringNode, boolean returnAsCommand, IProblemLocationCore[] problemLocations)\n+\t\t\tthrows CoreException {\n+\t\tfinal ICompilationUnit cu = context.getCompilationUnit();\n+\t\tfinal IntroduceParameterRefactoring introduceParameterRefactoring = new IntroduceParameterRefactoring(cu, context.getSelectionOffset(), context.getSelectionLength());\n+\t\tLinkedProposalModelCore linkedProposalModel = new LinkedProposalModelCore();\n+\t\tintroduceParameterRefactoring.setLinkedProposalModel(linkedProposalModel);\n+\t\tif (introduceParameterRefactoring.checkInitialConditions(new NullProgressMonitor()).isOK()) {\n+\t\t\tintroduceParameterRefactoring.setParameterName(introduceParameterRefactoring.guessedParameterName());\n+\t\t\tString label = RefactoringCoreMessages.IntroduceParameterRefactoring_name + \"...\";\n+\t\t\tint relevance = (problemLocations != null && problemLocations.length > 0) ? IProposalRelevance.EXTRACT_CONSTANT_ERROR : IProposalRelevance.EXTRACT_CONSTANT;\n+\t\t\tif (returnAsCommand) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU0NTIwNw=="}, "originalCommit": {"oid": "36012a47d8726b27c949477bb3d7457ae5a8abd6"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODYyOTU1OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/plugin.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDoyODozMVrOGzgRkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMTo0MDozMVrOGzh5Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY1OTM0Nw==", "bodyText": "do we need to keep jdt.ui ?", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1507#discussion_r456659347", "createdAt": "2020-07-17T20:28:31Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/plugin.xml", "diffHunk": "@@ -140,4 +140,10 @@\n \t     \torder=\"2000\"\n \t     \tclass=\"org.eclipse.jdt.ls.core.internal.managers.EclipseBuildSupport\" />\n    </extension>\n+   <extension\n+         point=\"org.eclipse.ltk.core.refactoring.refactoringContributions\">\n+      <contribution\n+            class=\"org.eclipse.jdt.ls.core.internal.corext.refactoring.ChangeMethodSignatureRefactoringContribution\"\n+            id=\"org.eclipse.jdt.ui.change.method.signature\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36012a47d8726b27c949477bb3d7457ae5a8abd6"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4MDUyOA==", "bodyText": "No, we don't. I will use org.eclipse.jdt.ls.change.method.signature", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1507#discussion_r456680528", "createdAt": "2020-07-17T21:23:15Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/plugin.xml", "diffHunk": "@@ -140,4 +140,10 @@\n \t     \torder=\"2000\"\n \t     \tclass=\"org.eclipse.jdt.ls.core.internal.managers.EclipseBuildSupport\" />\n    </extension>\n+   <extension\n+         point=\"org.eclipse.ltk.core.refactoring.refactoringContributions\">\n+      <contribution\n+            class=\"org.eclipse.jdt.ls.core.internal.corext.refactoring.ChangeMethodSignatureRefactoringContribution\"\n+            id=\"org.eclipse.jdt.ui.change.method.signature\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY1OTM0Nw=="}, "originalCommit": {"oid": "36012a47d8726b27c949477bb3d7457ae5a8abd6"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4NTkwMw==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1507#discussion_r456685903", "createdAt": "2020-07-17T21:40:31Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/plugin.xml", "diffHunk": "@@ -140,4 +140,10 @@\n \t     \torder=\"2000\"\n \t     \tclass=\"org.eclipse.jdt.ls.core.internal.managers.EclipseBuildSupport\" />\n    </extension>\n+   <extension\n+         point=\"org.eclipse.ltk.core.refactoring.refactoringContributions\">\n+      <contribution\n+            class=\"org.eclipse.jdt.ls.core.internal.corext.refactoring.ChangeMethodSignatureRefactoringContribution\"\n+            id=\"org.eclipse.jdt.ui.change.method.signature\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY1OTM0Nw=="}, "originalCommit": {"oid": "36012a47d8726b27c949477bb3d7457ae5a8abd6"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODYzNjk0OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/RefactorProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDozMToyOVrOGzgWPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMjoyNzoxOVrOGziueg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY2MDU0Mw==", "bodyText": "or return resultingCollections.add(proposal);?", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1507#discussion_r456660543", "createdAt": "2020-07-17T20:31:29Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/RefactorProcessor.java", "diffHunk": "@@ -153,12 +153,25 @@ public RefactorProcessor(PreferenceManager preferenceManager) {\n \n \t\t\t\tgetConvertForLoopProposal(context, coveringNode, proposals);\n \t\t\t\tgetAssignToVariableProposals(context, coveringNode, locations, proposals, params);\n+\t\t\t\tgetIntroduceParameterProposals(params, context, coveringNode, locations, proposals);\n \t\t\t}\n \t\t\treturn proposals;\n \t\t}\n \t\treturn Collections.emptyList();\n \t}\n \n+\tprivate boolean getIntroduceParameterProposals(CodeActionParams params, IInvocationContext context, ASTNode coveringNode, IProblemLocationCore[] locations, ArrayList<ChangeCorrectionProposal> resultingCollections) throws CoreException {\n+\t\tif (resultingCollections == null) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tCUCorrectionProposal proposal = RefactorProposalUtility.getIntroduceParameterRefactoringProposals(params, context, coveringNode, this.preferenceManager.getClientPreferences().isAdvancedIntroduceParameterRefactoringSupported(), locations);\n+\t\tif (proposal != null) {\n+\t\t\tresultingCollections.add(proposal);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36012a47d8726b27c949477bb3d7457ae5a8abd6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4MjUxOQ==", "bodyText": "getIntroduceParameterProposals must return boolean.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1507#discussion_r456682519", "createdAt": "2020-07-17T21:29:44Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/RefactorProcessor.java", "diffHunk": "@@ -153,12 +153,25 @@ public RefactorProcessor(PreferenceManager preferenceManager) {\n \n \t\t\t\tgetConvertForLoopProposal(context, coveringNode, proposals);\n \t\t\t\tgetAssignToVariableProposals(context, coveringNode, locations, proposals, params);\n+\t\t\t\tgetIntroduceParameterProposals(params, context, coveringNode, locations, proposals);\n \t\t\t}\n \t\t\treturn proposals;\n \t\t}\n \t\treturn Collections.emptyList();\n \t}\n \n+\tprivate boolean getIntroduceParameterProposals(CodeActionParams params, IInvocationContext context, ASTNode coveringNode, IProblemLocationCore[] locations, ArrayList<ChangeCorrectionProposal> resultingCollections) throws CoreException {\n+\t\tif (resultingCollections == null) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tCUCorrectionProposal proposal = RefactorProposalUtility.getIntroduceParameterRefactoringProposals(params, context, coveringNode, this.preferenceManager.getClientPreferences().isAdvancedIntroduceParameterRefactoringSupported(), locations);\n+\t\tif (proposal != null) {\n+\t\t\tresultingCollections.add(proposal);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY2MDU0Mw=="}, "originalCommit": {"oid": "36012a47d8726b27c949477bb3d7457ae5a8abd6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5ODU0MA==", "bodyText": "yes and\nboolean java.util.Collection.add(E e)\n\nEnsures that this collection contains the specified element (optional operation). Returns true if this collection changed as a result of the call.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1507#discussion_r456698540", "createdAt": "2020-07-17T22:23:26Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/RefactorProcessor.java", "diffHunk": "@@ -153,12 +153,25 @@ public RefactorProcessor(PreferenceManager preferenceManager) {\n \n \t\t\t\tgetConvertForLoopProposal(context, coveringNode, proposals);\n \t\t\t\tgetAssignToVariableProposals(context, coveringNode, locations, proposals, params);\n+\t\t\t\tgetIntroduceParameterProposals(params, context, coveringNode, locations, proposals);\n \t\t\t}\n \t\t\treturn proposals;\n \t\t}\n \t\treturn Collections.emptyList();\n \t}\n \n+\tprivate boolean getIntroduceParameterProposals(CodeActionParams params, IInvocationContext context, ASTNode coveringNode, IProblemLocationCore[] locations, ArrayList<ChangeCorrectionProposal> resultingCollections) throws CoreException {\n+\t\tif (resultingCollections == null) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tCUCorrectionProposal proposal = RefactorProposalUtility.getIntroduceParameterRefactoringProposals(params, context, coveringNode, this.preferenceManager.getClientPreferences().isAdvancedIntroduceParameterRefactoringSupported(), locations);\n+\t\tif (proposal != null) {\n+\t\t\tresultingCollections.add(proposal);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY2MDU0Mw=="}, "originalCommit": {"oid": "36012a47d8726b27c949477bb3d7457ae5a8abd6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5OTUxNA==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1507#discussion_r456699514", "createdAt": "2020-07-17T22:27:19Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/RefactorProcessor.java", "diffHunk": "@@ -153,12 +153,25 @@ public RefactorProcessor(PreferenceManager preferenceManager) {\n \n \t\t\t\tgetConvertForLoopProposal(context, coveringNode, proposals);\n \t\t\t\tgetAssignToVariableProposals(context, coveringNode, locations, proposals, params);\n+\t\t\t\tgetIntroduceParameterProposals(params, context, coveringNode, locations, proposals);\n \t\t\t}\n \t\t\treturn proposals;\n \t\t}\n \t\treturn Collections.emptyList();\n \t}\n \n+\tprivate boolean getIntroduceParameterProposals(CodeActionParams params, IInvocationContext context, ASTNode coveringNode, IProblemLocationCore[] locations, ArrayList<ChangeCorrectionProposal> resultingCollections) throws CoreException {\n+\t\tif (resultingCollections == null) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tCUCorrectionProposal proposal = RefactorProposalUtility.getIntroduceParameterRefactoringProposals(params, context, coveringNode, this.preferenceManager.getClientPreferences().isAdvancedIntroduceParameterRefactoringSupported(), locations);\n+\t\tif (proposal != null) {\n+\t\t\tresultingCollections.add(proposal);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY2MDU0Mw=="}, "originalCommit": {"oid": "36012a47d8726b27c949477bb3d7457ae5a8abd6"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODY0NDI0OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/GetRefactorEditHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDozNDozNlrOGzgbGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMTo0MDowOVrOGzh4zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY2MTc4NA==", "bodyText": "unnecessary change. only declare the variable when you need it. here is too early.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1507#discussion_r456661784", "createdAt": "2020-07-17T20:34:36Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/GetRefactorEditHandler.java", "diffHunk": "@@ -58,6 +61,7 @@ public static RefactorWorkspaceEdit getEditsForRefactor(GetRefactorEditParams pa\n \t\tIProblemLocationCore[] locations = CodeActionHandler.getProblemLocationCores(unit, params.context.getContext().getDiagnostics());\n \t\tboolean problemsAtLocation = locations.length != 0;\n \t\tString positionKey = DEFAULT_POSITION_KEY;\n+\t\tCommand additionalCommand = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36012a47d8726b27c949477bb3d7457ae5a8abd6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4NTc3NA==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1507#discussion_r456685774", "createdAt": "2020-07-17T21:40:09Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/GetRefactorEditHandler.java", "diffHunk": "@@ -58,6 +61,7 @@ public static RefactorWorkspaceEdit getEditsForRefactor(GetRefactorEditParams pa\n \t\tIProblemLocationCore[] locations = CodeActionHandler.getProblemLocationCores(unit, params.context.getContext().getDiagnostics());\n \t\tboolean problemsAtLocation = locations.length != 0;\n \t\tString positionKey = DEFAULT_POSITION_KEY;\n+\t\tCommand additionalCommand = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY2MTc4NA=="}, "originalCommit": {"oid": "36012a47d8726b27c949477bb3d7457ae5a8abd6"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3602, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}