{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1NDY4MTM3", "number": 1628, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo1MzoyOVrOFFkouQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNzoxNzo1OFrOFMmh1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzg3NDQ5OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/MavenPropertiesIdentifier.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo1MzoyOVrOIGJa9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDo1NTozOVrOIOAxdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxNjcyNw==", "bodyText": "Missing copyright header", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1628#discussion_r543316727", "createdAt": "2020-12-15T12:53:29Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/MavenPropertiesIdentifier.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.eclipse.jdt.ls.core.internal;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d699751aaebc5fa470683d4e316e0b2693c1f95"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0MTI5Ng==", "bodyText": "Since this file is only used by MavenSourceDownloader, how about moving it to the package org.eclipse.jdt.ls.core.internal.managers?", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1628#discussion_r543341296", "createdAt": "2020-12-15T13:29:48Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/MavenPropertiesIdentifier.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.eclipse.jdt.ls.core.internal;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxNjcyNw=="}, "originalCommit": {"oid": "8d699751aaebc5fa470683d4e316e0b2693c1f95"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU2MzYzOA==", "bodyText": "Added header and moved to internal.managers.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1628#discussion_r551563638", "createdAt": "2021-01-04T20:55:39Z", "author": {"login": "rgrunber"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/MavenPropertiesIdentifier.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.eclipse.jdt.ls.core.internal;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxNjcyNw=="}, "originalCommit": {"oid": "8d699751aaebc5fa470683d4e316e0b2693c1f95"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDA3MTcxOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/MavenPropertiesIdentifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzozNjozNVrOIGLNfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDo1NTowOVrOIOAwlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0NjA0Ng==", "bodyText": "Looks like MavenPropertiesIdentifier and MavenCentralIdentifier share some common interface, how about extracting to an interface such as IMavenArtifactIdentifier?\npublic interface IMavenArtifactIdentifier {\n    public ArtifactKey identify(IPath path, IProgressMonitor monitor);\n\n    public ArtifactKey identify(File file, IProgressMonitor monitor);\n}", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1628#discussion_r543346046", "createdAt": "2020-12-15T13:36:35Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/MavenPropertiesIdentifier.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.eclipse.jdt.ls.core.internal;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Enumeration;\n+import java.util.Properties;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.m2e.core.embedder.ArtifactKey;\n+\n+\n+public class MavenPropertiesIdentifier {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d699751aaebc5fa470683d4e316e0b2693c1f95"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU2MzQxNQ==", "bodyText": "Done. We can use public ArtifactKey identify(IPath path, IProgressMonitor monitor); in both cases. I've switched some of the methods in the implementation to private to make it more obvious what is API and what are internal helpers.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1628#discussion_r551563415", "createdAt": "2021-01-04T20:55:09Z", "author": {"login": "rgrunber"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/MavenPropertiesIdentifier.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.eclipse.jdt.ls.core.internal;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Enumeration;\n+import java.util.Properties;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.m2e.core.embedder.ArtifactKey;\n+\n+\n+public class MavenPropertiesIdentifier {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0NjA0Ng=="}, "originalCommit": {"oid": "8d699751aaebc5fa470683d4e316e0b2693c1f95"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTAzMjkzOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwMzowMToxM1rOIPdflQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNzoxOToyNlrOIQagaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA4Mjc3Mw==", "bodyText": "Need a PR in the client side to expose the new preference key.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1628#discussion_r553082773", "createdAt": "2021-01-07T03:01:13Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "diffHunk": "@@ -129,6 +129,11 @@\n \t * Preference key to enable/disable downloading Maven source artifacts.\n \t */\n \tpublic static final String MAVEN_DOWNLOAD_SOURCES = \"java.maven.downloadSources\";\n+\t/**\n+\t * Preference key to enable/disable downloading source artifacts for Eclipse\n+\t * projects.\n+\t */\n+\tpublic static final String ECLIPSE_DOWNLOAD_SOURCES = \"java.eclipse.downloadSources\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "112110bac02b0601cd4ae4ce05baf7a0c28e8643"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzYwODY3NA==", "bodyText": "I'm not sure if this is something we want to expose, simply because it looks like there's other cases where we don't, and I suspect it's because we want the feature to always be on. @fbricon , let me know your thoughts.\nFor MavenBuildSupport, and InvisibleProjectBuildSupport, discoverSource(..) seems to always execute if called.\nFor EclipseBuildSupport, discoverSource(..) only executes if \"java.eclipse.downloadSources\" is true.\nSo if Maven source downloading always works, then what does \"java.maven.downloadSources\" do ? Well, it looks like it's only used in MavenProjectImporter#importToWorkspace(..) to determine if all sources are downloaded on import, but it doesn't prevent on-demand downloading.\nIn other words, it seems like the intent is to always download sources for on-demand cases (eg. on hover, or go-to definition). If so, do we even need a \"java.eclipse.downloadSources\" ? It would only be useful if we needed to configure source downloading on initial import of an Eclipse project, but we don't support that yet.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1628#discussion_r553608674", "createdAt": "2021-01-07T21:49:01Z", "author": {"login": "rgrunber"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "diffHunk": "@@ -129,6 +129,11 @@\n \t * Preference key to enable/disable downloading Maven source artifacts.\n \t */\n \tpublic static final String MAVEN_DOWNLOAD_SOURCES = \"java.maven.downloadSources\";\n+\t/**\n+\t * Preference key to enable/disable downloading source artifacts for Eclipse\n+\t * projects.\n+\t */\n+\tpublic static final String ECLIPSE_DOWNLOAD_SOURCES = \"java.eclipse.downloadSources\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA4Mjc3Mw=="}, "originalCommit": {"oid": "112110bac02b0601cd4ae4ce05baf7a0c28e8643"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzYyMTAwNA==", "bodyText": "we need to keep it disabled by default (for eclipse projects) and expose a preference, because, when enabled, it'll change .classpath files by adding absolute paths to source files.\nInvisble projects need to have the feature enabled regardless of this preference", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1628#discussion_r553621004", "createdAt": "2021-01-07T22:12:55Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "diffHunk": "@@ -129,6 +129,11 @@\n \t * Preference key to enable/disable downloading Maven source artifacts.\n \t */\n \tpublic static final String MAVEN_DOWNLOAD_SOURCES = \"java.maven.downloadSources\";\n+\t/**\n+\t * Preference key to enable/disable downloading source artifacts for Eclipse\n+\t * projects.\n+\t */\n+\tpublic static final String ECLIPSE_DOWNLOAD_SOURCES = \"java.eclipse.downloadSources\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA4Mjc3Mw=="}, "originalCommit": {"oid": "112110bac02b0601cd4ae4ce05baf7a0c28e8643"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDAwODM5MQ==", "bodyText": "Makes sense, we should avoid messing with \"user-controlled\" .classpath if possibe. I'll expose the option in vscode-java and have it disabled by default.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1628#discussion_r554008391", "createdAt": "2021-01-08T15:24:41Z", "author": {"login": "rgrunber"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "diffHunk": "@@ -129,6 +129,11 @@\n \t * Preference key to enable/disable downloading Maven source artifacts.\n \t */\n \tpublic static final String MAVEN_DOWNLOAD_SOURCES = \"java.maven.downloadSources\";\n+\t/**\n+\t * Preference key to enable/disable downloading source artifacts for Eclipse\n+\t * projects.\n+\t */\n+\tpublic static final String ECLIPSE_DOWNLOAD_SOURCES = \"java.eclipse.downloadSources\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA4Mjc3Mw=="}, "originalCommit": {"oid": "112110bac02b0601cd4ae4ce05baf7a0c28e8643"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA4MjQwOA==", "bodyText": "Exposed property in redhat-developer/vscode-java#1758", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1628#discussion_r554082408", "createdAt": "2021-01-08T17:19:26Z", "author": {"login": "rgrunber"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "diffHunk": "@@ -129,6 +129,11 @@\n \t * Preference key to enable/disable downloading Maven source artifacts.\n \t */\n \tpublic static final String MAVEN_DOWNLOAD_SOURCES = \"java.maven.downloadSources\";\n+\t/**\n+\t * Preference key to enable/disable downloading source artifacts for Eclipse\n+\t * projects.\n+\t */\n+\tpublic static final String ECLIPSE_DOWNLOAD_SOURCES = \"java.eclipse.downloadSources\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA4Mjc3Mw=="}, "originalCommit": {"oid": "112110bac02b0601cd4ae4ce05baf7a0c28e8643"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NzU4NDg1OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenSourceDownloader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNzoxNzo1OFrOIQadYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMDo0MTo0N1rOIQggBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA4MTYzMw==", "bodyText": "Ran into a potential issue here. For Eclipse projects, classpath entries can be relative also :\n<classpathentry kind=\"lib\" path=\"lib/remark.jar\"/> , which resolves to a path (workspace-relative) of /$project/lib/remark.jar here, and ultimately fails. I think getLocation() resolves the absolute path the way we want so I'll try that.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1628#discussion_r554081633", "createdAt": "2021-01-08T17:17:58Z", "author": {"login": "rgrunber"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenSourceDownloader.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.ResourcesPlugin;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.jdt.core.IClassFile;\n+import org.eclipse.jdt.core.IJavaElement;\n+import org.eclipse.jdt.core.IPackageFragmentRoot;\n+import org.eclipse.jdt.ls.core.internal.JobHelpers;\n+import org.eclipse.m2e.core.embedder.ArtifactKey;\n+import org.eclipse.m2e.jdt.IClasspathManager;\n+import org.eclipse.m2e.jdt.MavenJdtPlugin;\n+import org.eclipse.m2e.jdt.internal.BuildPathManager;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+\n+/**\n+ * {@link ISourceDownloader} implementation based on m2e's\n+ * {@link IClasspathManager}' source download facilities.\n+ *\n+ * @author Fred Bricon\n+ *\n+ */\n+public class MavenSourceDownloader implements ISourceDownloader {\n+\n+\tprivate static Cache<String, Boolean> downloadRequestsCache = CacheBuilder.newBuilder().maximumSize(100).expireAfterWrite(1, TimeUnit.HOURS).build();\n+\tprivate static final int MAX_TIME_MILLIS = 3000;\n+\n+\t@Override\n+\tpublic void discoverSource(IClassFile classFile, IProgressMonitor monitor) throws CoreException {\n+\t\tif (classFile == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\tIJavaElement element = classFile;\n+\t\twhile (element.getParent() != null) {\n+\t\t\telement = element.getParent();\n+\t\t\tif (element instanceof IPackageFragmentRoot) {\n+\t\t\t\tfinal IPackageFragmentRoot fragment = (IPackageFragmentRoot) element;\n+\t\t\t\tIPath attachmentPath = fragment.getSourceAttachmentPath();\n+\t\t\t\tif (attachmentPath != null && !attachmentPath.isEmpty() && attachmentPath.toFile().exists()) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tif (fragment.isArchive()) {\n+\t\t\t\t\tIFile file = ResourcesPlugin.getWorkspace().getRoot().getFile(fragment.getPath());\n+\t\t\t\t\tIPath path = file.getFullPath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "112110bac02b0601cd4ae4ce05baf7a0c28e8643"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE4MDYxNQ==", "bodyText": "Resolved this.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1628#discussion_r554180615", "createdAt": "2021-01-08T20:41:47Z", "author": {"login": "rgrunber"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenSourceDownloader.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.ResourcesPlugin;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.jdt.core.IClassFile;\n+import org.eclipse.jdt.core.IJavaElement;\n+import org.eclipse.jdt.core.IPackageFragmentRoot;\n+import org.eclipse.jdt.ls.core.internal.JobHelpers;\n+import org.eclipse.m2e.core.embedder.ArtifactKey;\n+import org.eclipse.m2e.jdt.IClasspathManager;\n+import org.eclipse.m2e.jdt.MavenJdtPlugin;\n+import org.eclipse.m2e.jdt.internal.BuildPathManager;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+\n+/**\n+ * {@link ISourceDownloader} implementation based on m2e's\n+ * {@link IClasspathManager}' source download facilities.\n+ *\n+ * @author Fred Bricon\n+ *\n+ */\n+public class MavenSourceDownloader implements ISourceDownloader {\n+\n+\tprivate static Cache<String, Boolean> downloadRequestsCache = CacheBuilder.newBuilder().maximumSize(100).expireAfterWrite(1, TimeUnit.HOURS).build();\n+\tprivate static final int MAX_TIME_MILLIS = 3000;\n+\n+\t@Override\n+\tpublic void discoverSource(IClassFile classFile, IProgressMonitor monitor) throws CoreException {\n+\t\tif (classFile == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\tIJavaElement element = classFile;\n+\t\twhile (element.getParent() != null) {\n+\t\t\telement = element.getParent();\n+\t\t\tif (element instanceof IPackageFragmentRoot) {\n+\t\t\t\tfinal IPackageFragmentRoot fragment = (IPackageFragmentRoot) element;\n+\t\t\t\tIPath attachmentPath = fragment.getSourceAttachmentPath();\n+\t\t\t\tif (attachmentPath != null && !attachmentPath.isEmpty() && attachmentPath.toFile().exists()) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tif (fragment.isArchive()) {\n+\t\t\t\t\tIFile file = ResourcesPlugin.getWorkspace().getRoot().getFile(fragment.getPath());\n+\t\t\t\t\tIPath path = file.getFullPath();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA4MTYzMw=="}, "originalCommit": {"oid": "112110bac02b0601cd4ae4ce05baf7a0c28e8643"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3512, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}