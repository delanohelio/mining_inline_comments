{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMzcyODc2", "number": 1585, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDo1MjozNVrOE2CcBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzozNDoyM1rOE3tOLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDk4NTAzOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/JDTLanguageServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDo1MjozNVrOHupRUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOToxMDo1MFrOHxEgsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3MjcyMQ==", "bodyText": "Since infer is a verb, i would prefer to name it as inferSelection instead of getInferSelection", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1585#discussion_r518672721", "createdAt": "2020-11-06T10:52:35Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/JDTLanguageServer.java", "diffHunk": "@@ -939,6 +941,12 @@ public void didChangeWorkspaceFolders(DidChangeWorkspaceFoldersParams params) {\n \t\treturn computeAsync((monitor) -> GetRefactorEditHandler.getEditsForRefactor(params));\n \t}\n \n+\t@Override\n+\tpublic CompletableFuture<List<InferSelection>> getInferSelection(GetInferSelectionParams params) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b611d4fc0eee5a1b30f1c075e053a0215f95549c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIxNjE3Nw==", "bodyText": "Make sense.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1585#discussion_r521216177", "createdAt": "2020-11-11T09:10:50Z", "author": {"login": "CsCherrYY"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/JDTLanguageServer.java", "diffHunk": "@@ -939,6 +941,12 @@ public void didChangeWorkspaceFolders(DidChangeWorkspaceFoldersParams params) {\n \t\treturn computeAsync((monitor) -> GetRefactorEditHandler.getEditsForRefactor(params));\n \t}\n \n+\t@Override\n+\tpublic CompletableFuture<List<InferSelection>> getInferSelection(GetInferSelectionParams params) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3MjcyMQ=="}, "originalCommit": {"oid": "b611d4fc0eee5a1b30f1c075e053a0215f95549c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTAxNTk4OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/GetInferSelectionHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDo1OTo1OVrOHupkRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDo1OTo1OVrOHupkRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3NzU3Mg==", "bodyText": "InferSelection -> SelectionInfo.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1585#discussion_r518677572", "createdAt": "2020-11-06T10:59:59Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/GetInferSelectionHandler.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Microsoft Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Microsoft Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package org.eclipse.jdt.ls.core.internal.handlers;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.Expression;\n+import org.eclipse.jdt.core.dom.ParenthesizedExpression;\n+import org.eclipse.jdt.ls.core.internal.JDTUtils;\n+import org.eclipse.jdt.ls.core.internal.corext.refactoring.code.ExtractMethodRefactoring;\n+import org.eclipse.jdt.ls.core.internal.corrections.DiagnosticsHelper;\n+import org.eclipse.jdt.ls.core.internal.corrections.InnovationContext;\n+import org.eclipse.jdt.ls.core.internal.text.correction.RefactorProposalUtility;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.FormattingOptions;\n+\n+public class GetInferSelectionHandler {\n+\n+\tpublic static List<InferSelection> getInferSelectionsForRefactor(GetInferSelectionParams params) {\n+\t\tfinal ICompilationUnit unit = JDTUtils.resolveCompilationUnit(params.context.getTextDocument().getUri());\n+\t\tif (unit == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tMap formatterOptions = params.options == null ? null : FormatterHandler.getOptions(params.options, unit);\n+\t\tint start = DiagnosticsHelper.getStartOffset(unit, params.context.getRange());\n+\t\tint end = DiagnosticsHelper.getEndOffset(unit, params.context.getRange());\n+\t\tInnovationContext context = new InnovationContext(unit, start, end - start);\n+\t\tList<InferSelection> extractMethodInfos = new ArrayList<InferSelection>();\n+\t\tASTNode parent = context.getCoveringNode();\n+\t\ttry {\n+\t\t\tif (RefactorProposalUtility.EXTRACT_METHOD_COMMAND.equals(params.command)) {\n+\t\t\t\twhile (parent != null && parent instanceof Expression) {\n+\t\t\t\t\tif (parent instanceof ParenthesizedExpression) {\n+\t\t\t\t\t\tparent = parent.getParent();\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\t\t\t\t\tExtractMethodRefactoring refactoring = new ExtractMethodRefactoring(context.getASTRoot(), parent.getStartPosition(), parent.getLength(), formatterOptions);\n+\t\t\t\t\tif (refactoring.checkInitialConditions(new NullProgressMonitor()).isOK()) {\n+\t\t\t\t\t\textractMethodInfos.add(new InferSelection(parent.toString(), parent.getStartPosition(), parent.getLength()));\n+\t\t\t\t\t}\n+\t\t\t\t\tparent = parent.getParent();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t} catch (CoreException e) {\n+\t\t\t// do nothing.\n+\t\t}\n+\n+\t\tif (extractMethodInfos.size() == 0) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn extractMethodInfos;\n+\t}\n+\n+\tpublic static class InferSelection {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b611d4fc0eee5a1b30f1c075e053a0215f95549c"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NzMzNTc0OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/GetInferSelectionHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwODowNjoxOVrOHxCcfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOToxNDoxNFrOHxEopg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE4MjMzNA==", "bodyText": "When inferring a possible expression for the refactoring operation, formatting options is not needed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1585#discussion_r521182334", "createdAt": "2020-11-11T08:06:19Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/GetInferSelectionHandler.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Microsoft Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Microsoft Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package org.eclipse.jdt.ls.core.internal.handlers;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.Expression;\n+import org.eclipse.jdt.core.dom.ParenthesizedExpression;\n+import org.eclipse.jdt.ls.core.internal.JDTUtils;\n+import org.eclipse.jdt.ls.core.internal.corext.refactoring.code.ExtractMethodRefactoring;\n+import org.eclipse.jdt.ls.core.internal.corrections.DiagnosticsHelper;\n+import org.eclipse.jdt.ls.core.internal.corrections.InnovationContext;\n+import org.eclipse.jdt.ls.core.internal.text.correction.RefactorProposalUtility;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.FormattingOptions;\n+\n+public class GetInferSelectionHandler {\n+\n+\tpublic static List<InferSelection> getInferSelectionsForRefactor(GetInferSelectionParams params) {\n+\t\tfinal ICompilationUnit unit = JDTUtils.resolveCompilationUnit(params.context.getTextDocument().getUri());\n+\t\tif (unit == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tMap formatterOptions = params.options == null ? null : FormatterHandler.getOptions(params.options, unit);\n+\t\tint start = DiagnosticsHelper.getStartOffset(unit, params.context.getRange());\n+\t\tint end = DiagnosticsHelper.getEndOffset(unit, params.context.getRange());\n+\t\tInnovationContext context = new InnovationContext(unit, start, end - start);\n+\t\tList<InferSelection> extractMethodInfos = new ArrayList<InferSelection>();\n+\t\tASTNode parent = context.getCoveringNode();\n+\t\ttry {\n+\t\t\tif (RefactorProposalUtility.EXTRACT_METHOD_COMMAND.equals(params.command)) {\n+\t\t\t\twhile (parent != null && parent instanceof Expression) {\n+\t\t\t\t\tif (parent instanceof ParenthesizedExpression) {\n+\t\t\t\t\t\tparent = parent.getParent();\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\t\t\t\t\tExtractMethodRefactoring refactoring = new ExtractMethodRefactoring(context.getASTRoot(), parent.getStartPosition(), parent.getLength(), formatterOptions);\n+\t\t\t\t\tif (refactoring.checkInitialConditions(new NullProgressMonitor()).isOK()) {\n+\t\t\t\t\t\textractMethodInfos.add(new InferSelection(parent.toString(), parent.getStartPosition(), parent.getLength()));\n+\t\t\t\t\t}\n+\t\t\t\t\tparent = parent.getParent();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t} catch (CoreException e) {\n+\t\t\t// do nothing.\n+\t\t}\n+\n+\t\tif (extractMethodInfos.size() == 0) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn extractMethodInfos;\n+\t}\n+\n+\tpublic static class InferSelection {\n+\t\tpublic String name;\n+\t\tpublic int startPosition;\n+\t\tpublic int length;\n+\n+\t\tpublic InferSelection(String name, int startPosition, int length) {\n+\t\t\tthis.name = name;\n+\t\t\tthis.startPosition = startPosition;\n+\t\t\tthis.length = length;\n+\t\t}\n+\t}\n+\n+\tpublic static class GetInferSelectionParams {\n+\t\tpublic String command;\n+\t\tpublic CodeActionParams context;\n+\t\tpublic FormattingOptions options;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c504bd962f6bc18ddcd9dbe17ffcca644560e342"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIxODIxNA==", "bodyText": "Will remove this unnecessary field.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1585#discussion_r521218214", "createdAt": "2020-11-11T09:14:14Z", "author": {"login": "CsCherrYY"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/GetInferSelectionHandler.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Microsoft Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Microsoft Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package org.eclipse.jdt.ls.core.internal.handlers;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.Expression;\n+import org.eclipse.jdt.core.dom.ParenthesizedExpression;\n+import org.eclipse.jdt.ls.core.internal.JDTUtils;\n+import org.eclipse.jdt.ls.core.internal.corext.refactoring.code.ExtractMethodRefactoring;\n+import org.eclipse.jdt.ls.core.internal.corrections.DiagnosticsHelper;\n+import org.eclipse.jdt.ls.core.internal.corrections.InnovationContext;\n+import org.eclipse.jdt.ls.core.internal.text.correction.RefactorProposalUtility;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.FormattingOptions;\n+\n+public class GetInferSelectionHandler {\n+\n+\tpublic static List<InferSelection> getInferSelectionsForRefactor(GetInferSelectionParams params) {\n+\t\tfinal ICompilationUnit unit = JDTUtils.resolveCompilationUnit(params.context.getTextDocument().getUri());\n+\t\tif (unit == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tMap formatterOptions = params.options == null ? null : FormatterHandler.getOptions(params.options, unit);\n+\t\tint start = DiagnosticsHelper.getStartOffset(unit, params.context.getRange());\n+\t\tint end = DiagnosticsHelper.getEndOffset(unit, params.context.getRange());\n+\t\tInnovationContext context = new InnovationContext(unit, start, end - start);\n+\t\tList<InferSelection> extractMethodInfos = new ArrayList<InferSelection>();\n+\t\tASTNode parent = context.getCoveringNode();\n+\t\ttry {\n+\t\t\tif (RefactorProposalUtility.EXTRACT_METHOD_COMMAND.equals(params.command)) {\n+\t\t\t\twhile (parent != null && parent instanceof Expression) {\n+\t\t\t\t\tif (parent instanceof ParenthesizedExpression) {\n+\t\t\t\t\t\tparent = parent.getParent();\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\t\t\t\t\tExtractMethodRefactoring refactoring = new ExtractMethodRefactoring(context.getASTRoot(), parent.getStartPosition(), parent.getLength(), formatterOptions);\n+\t\t\t\t\tif (refactoring.checkInitialConditions(new NullProgressMonitor()).isOK()) {\n+\t\t\t\t\t\textractMethodInfos.add(new InferSelection(parent.toString(), parent.getStartPosition(), parent.getLength()));\n+\t\t\t\t\t}\n+\t\t\t\t\tparent = parent.getParent();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t} catch (CoreException e) {\n+\t\t\t// do nothing.\n+\t\t}\n+\n+\t\tif (extractMethodInfos.size() == 0) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn extractMethodInfos;\n+\t}\n+\n+\tpublic static class InferSelection {\n+\t\tpublic String name;\n+\t\tpublic int startPosition;\n+\t\tpublic int length;\n+\n+\t\tpublic InferSelection(String name, int startPosition, int length) {\n+\t\t\tthis.name = name;\n+\t\t\tthis.startPosition = startPosition;\n+\t\t\tthis.length = length;\n+\t\t}\n+\t}\n+\n+\tpublic static class GetInferSelectionParams {\n+\t\tpublic String command;\n+\t\tpublic CodeActionParams context;\n+\t\tpublic FormattingOptions options;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE4MjMzNA=="}, "originalCommit": {"oid": "c504bd962f6bc18ddcd9dbe17ffcca644560e342"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NzM1NjgyOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/text/correction/RefactorProposalUtility.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwODoxMzoxNVrOHxCo4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOToxNDo0OVrOHxEqFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE4NTUwNQ==", "bodyText": "This is duplicated with InferSelection class under file GetInferSelectionHandler.java.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1585#discussion_r521185505", "createdAt": "2020-11-11T08:13:15Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/text/correction/RefactorProposalUtility.java", "diffHunk": "@@ -844,4 +862,16 @@ public boolean isMoveAvaiable() {\n \t\t\treturn !supportedDestinationKinds.isEmpty();\n \t\t}\n \t}\n+\n+\tpublic static class ExtractMethodInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c504bd962f6bc18ddcd9dbe17ffcca644560e342"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIxODU4MQ==", "bodyText": "Will use InferSelection instead of this class.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1585#discussion_r521218581", "createdAt": "2020-11-11T09:14:49Z", "author": {"login": "CsCherrYY"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/text/correction/RefactorProposalUtility.java", "diffHunk": "@@ -844,4 +862,16 @@ public boolean isMoveAvaiable() {\n \t\t\treturn !supportedDestinationKinds.isEmpty();\n \t\t}\n \t}\n+\n+\tpublic static class ExtractMethodInfo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE4NTUwNQ=="}, "originalCommit": {"oid": "c504bd962f6bc18ddcd9dbe17ffcca644560e342"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NzM2NTIxOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/GetInferSelectionHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwODoxNjowMFrOHxCuLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwODoxNjowMFrOHxCuLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE4Njg2MA==", "bodyText": "startPosition -> offset", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1585#discussion_r521186860", "createdAt": "2020-11-11T08:16:00Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/GetInferSelectionHandler.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Microsoft Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Microsoft Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package org.eclipse.jdt.ls.core.internal.handlers;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.Expression;\n+import org.eclipse.jdt.core.dom.ParenthesizedExpression;\n+import org.eclipse.jdt.ls.core.internal.JDTUtils;\n+import org.eclipse.jdt.ls.core.internal.corext.refactoring.code.ExtractMethodRefactoring;\n+import org.eclipse.jdt.ls.core.internal.corrections.DiagnosticsHelper;\n+import org.eclipse.jdt.ls.core.internal.corrections.InnovationContext;\n+import org.eclipse.jdt.ls.core.internal.text.correction.RefactorProposalUtility;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.FormattingOptions;\n+\n+public class GetInferSelectionHandler {\n+\n+\tpublic static List<InferSelection> getInferSelectionsForRefactor(GetInferSelectionParams params) {\n+\t\tfinal ICompilationUnit unit = JDTUtils.resolveCompilationUnit(params.context.getTextDocument().getUri());\n+\t\tif (unit == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tMap formatterOptions = params.options == null ? null : FormatterHandler.getOptions(params.options, unit);\n+\t\tint start = DiagnosticsHelper.getStartOffset(unit, params.context.getRange());\n+\t\tint end = DiagnosticsHelper.getEndOffset(unit, params.context.getRange());\n+\t\tInnovationContext context = new InnovationContext(unit, start, end - start);\n+\t\tList<InferSelection> extractMethodInfos = new ArrayList<InferSelection>();\n+\t\tASTNode parent = context.getCoveringNode();\n+\t\ttry {\n+\t\t\tif (RefactorProposalUtility.EXTRACT_METHOD_COMMAND.equals(params.command)) {\n+\t\t\t\twhile (parent != null && parent instanceof Expression) {\n+\t\t\t\t\tif (parent instanceof ParenthesizedExpression) {\n+\t\t\t\t\t\tparent = parent.getParent();\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\t\t\t\t\tExtractMethodRefactoring refactoring = new ExtractMethodRefactoring(context.getASTRoot(), parent.getStartPosition(), parent.getLength(), formatterOptions);\n+\t\t\t\t\tif (refactoring.checkInitialConditions(new NullProgressMonitor()).isOK()) {\n+\t\t\t\t\t\textractMethodInfos.add(new InferSelection(parent.toString(), parent.getStartPosition(), parent.getLength()));\n+\t\t\t\t\t}\n+\t\t\t\t\tparent = parent.getParent();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t} catch (CoreException e) {\n+\t\t\t// do nothing.\n+\t\t}\n+\n+\t\tif (extractMethodInfos.size() == 0) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn extractMethodInfos;\n+\t}\n+\n+\tpublic static class InferSelection {\n+\t\tpublic String name;\n+\t\tpublic int startPosition;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c504bd962f6bc18ddcd9dbe17ffcca644560e342"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NzkwNDIwOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/InferSelectionHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDo0Njo0NlrOHxH5Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDo0Njo0NlrOHxH5Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI3MTU5MQ==", "bodyText": "remove FormattingOptions options", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1585#discussion_r521271591", "createdAt": "2020-11-11T10:46:46Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/InferSelectionHandler.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Microsoft Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Microsoft Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package org.eclipse.jdt.ls.core.internal.handlers;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.Expression;\n+import org.eclipse.jdt.core.dom.ParenthesizedExpression;\n+import org.eclipse.jdt.ls.core.internal.JDTUtils;\n+import org.eclipse.jdt.ls.core.internal.corext.refactoring.code.ExtractMethodRefactoring;\n+import org.eclipse.jdt.ls.core.internal.corrections.DiagnosticsHelper;\n+import org.eclipse.jdt.ls.core.internal.corrections.InnovationContext;\n+import org.eclipse.jdt.ls.core.internal.text.correction.RefactorProposalUtility;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.FormattingOptions;\n+\n+public class InferSelectionHandler {\n+\n+\tpublic static List<SelectionInfo> inferSelectionsForRefactor(InferSelectionParams params) {\n+\t\tfinal ICompilationUnit unit = JDTUtils.resolveCompilationUnit(params.context.getTextDocument().getUri());\n+\t\tif (unit == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tint start = DiagnosticsHelper.getStartOffset(unit, params.context.getRange());\n+\t\tint end = DiagnosticsHelper.getEndOffset(unit, params.context.getRange());\n+\t\tInnovationContext context = new InnovationContext(unit, start, end - start);\n+\t\tList<SelectionInfo> extractMethodInfos = new ArrayList<SelectionInfo>();\n+\t\tASTNode parent = context.getCoveringNode();\n+\t\ttry {\n+\t\t\tif (RefactorProposalUtility.EXTRACT_METHOD_COMMAND.equals(params.command)) {\n+\t\t\t\twhile (parent != null && parent instanceof Expression) {\n+\t\t\t\t\tif (parent instanceof ParenthesizedExpression) {\n+\t\t\t\t\t\tparent = parent.getParent();\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\t\t\t\t\tExtractMethodRefactoring refactoring = new ExtractMethodRefactoring(context.getASTRoot(), parent.getStartPosition(), parent.getLength());\n+\t\t\t\t\tif (refactoring.checkInitialConditions(new NullProgressMonitor()).isOK()) {\n+\t\t\t\t\t\textractMethodInfos.add(new SelectionInfo(parent.toString(), parent.getStartPosition(), parent.getLength()));\n+\t\t\t\t\t}\n+\t\t\t\t\tparent = parent.getParent();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t} catch (CoreException e) {\n+\t\t\t// do nothing.\n+\t\t}\n+\n+\t\tif (extractMethodInfos.size() == 0) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn extractMethodInfos;\n+\t}\n+\n+\tpublic static class SelectionInfo {\n+\t\tpublic String name;\n+\t\tpublic int offset;\n+\t\tpublic int length;\n+\n+\t\tpublic SelectionInfo(String name, int offset, int length) {\n+\t\t\tthis.name = name;\n+\t\t\tthis.offset = offset;\n+\t\t\tthis.length = length;\n+\t\t}\n+\t}\n+\n+\tpublic static class InferSelectionParams {\n+\t\tpublic String command;\n+\t\tpublic CodeActionParams context;\n+\n+\t\tpublic InferSelectionParams(String command, CodeActionParams context, FormattingOptions options) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84d88aa49edf17dc5e3f02523f2a80924c2006af"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODQ4MDQ3OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/InferSelectionHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzozNDoyM1rOHxNWAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzozNzo0OVrOHxNeBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2MDg5OQ==", "bodyText": "would you add some unit tests for this?", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1585#discussion_r521360899", "createdAt": "2020-11-11T13:34:23Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/InferSelectionHandler.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Microsoft Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Microsoft Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package org.eclipse.jdt.ls.core.internal.handlers;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.Expression;\n+import org.eclipse.jdt.core.dom.ParenthesizedExpression;\n+import org.eclipse.jdt.ls.core.internal.JDTUtils;\n+import org.eclipse.jdt.ls.core.internal.corext.refactoring.code.ExtractMethodRefactoring;\n+import org.eclipse.jdt.ls.core.internal.corrections.DiagnosticsHelper;\n+import org.eclipse.jdt.ls.core.internal.corrections.InnovationContext;\n+import org.eclipse.jdt.ls.core.internal.text.correction.RefactorProposalUtility;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.FormattingOptions;\n+\n+public class InferSelectionHandler {\n+\n+\tpublic static List<SelectionInfo> inferSelectionsForRefactor(InferSelectionParams params) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22ac04eba16b06488086cc8f0b4c82ec71d275aa"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2Mjk1MA==", "bodyText": "Sure. I will add some then.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1585#discussion_r521362950", "createdAt": "2020-11-11T13:37:49Z", "author": {"login": "CsCherrYY"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/InferSelectionHandler.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Microsoft Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Microsoft Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package org.eclipse.jdt.ls.core.internal.handlers;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.Expression;\n+import org.eclipse.jdt.core.dom.ParenthesizedExpression;\n+import org.eclipse.jdt.ls.core.internal.JDTUtils;\n+import org.eclipse.jdt.ls.core.internal.corext.refactoring.code.ExtractMethodRefactoring;\n+import org.eclipse.jdt.ls.core.internal.corrections.DiagnosticsHelper;\n+import org.eclipse.jdt.ls.core.internal.corrections.InnovationContext;\n+import org.eclipse.jdt.ls.core.internal.text.correction.RefactorProposalUtility;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.FormattingOptions;\n+\n+public class InferSelectionHandler {\n+\n+\tpublic static List<SelectionInfo> inferSelectionsForRefactor(InferSelectionParams params) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2MDg5OQ=="}, "originalCommit": {"oid": "22ac04eba16b06488086cc8f0b4c82ec71d275aa"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3488, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}