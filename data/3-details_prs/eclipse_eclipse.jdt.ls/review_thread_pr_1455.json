{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMzI3Mzgw", "number": 1455, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzoyOTo0MFrOEAge8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjoyOTowOFrOEB0ymQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTY3NjY0OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/schema/org.eclipse.jdt.ls.core.buildSupport.exsd", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzoyOTo0MFrOGb1G5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDo1Njo0NFrOGdNl3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzNDg1NA==", "bodyText": "please document the meaning of order, for adopters. What does a small value mean? higher or smaller precedence?", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r431834854", "createdAt": "2020-05-28T13:29:40Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/schema/org.eclipse.jdt.ls.core.buildSupport.exsd", "diffHunk": "@@ -0,0 +1,101 @@\n+<?xml version='1.0' encoding='UTF-8'?>\n+<!-- Schema file written by PDE -->\n+<schema targetNamespace=\"org.eclipse.jdt.ls.core\" xmlns=\"http://www.w3.org/2001/XMLSchema\">\n+<annotation>\n+      <appinfo>\n+         <meta.schema plugin=\"org.eclipse.jdt.ls.core\" id=\"org.eclipse.jdt.ls.core.buildSupport\" name=\"Build Support\"/>\n+      </appinfo>\n+      <documentation>\n+         This extension point represents different kinds of project build supporters for the JDT LS.\n+Each extension must implement &lt;code&gt;org.eclipse.jdt.ls.core.internal.managers.IBuildSupport&lt;/code&gt;.\n+      </documentation>\n+   </annotation>\n+\n+   <element name=\"extension\">\n+      <annotation>\n+         <appinfo>\n+            <meta.element />\n+         </appinfo>\n+      </annotation>\n+      <complexType>\n+         <sequence>\n+            <element ref=\"buildSupport\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+         </sequence>\n+         <attribute name=\"point\" type=\"string\" use=\"required\">\n+            <annotation>\n+               <documentation>\n+                  \n+               </documentation>\n+            </annotation>\n+         </attribute>\n+         <attribute name=\"id\" type=\"string\">\n+            <annotation>\n+               <documentation>\n+                  \n+               </documentation>\n+            </annotation>\n+         </attribute>\n+         <attribute name=\"name\" type=\"string\">\n+            <annotation>\n+               <documentation>\n+                  \n+               </documentation>\n+            </annotation>\n+         </attribute>\n+      </complexType>\n+   </element>\n+\n+   <element name=\"buildSupport\">\n+      <complexType>\n+         <attribute name=\"id\" type=\"string\" use=\"required\">\n+            <annotation>\n+               <documentation>\n+                  \n+               </documentation>\n+            </annotation>\n+         </attribute>\n+         <attribute name=\"class\" type=\"string\" use=\"required\">\n+            <annotation>\n+               <documentation>\n+                  \n+               </documentation>\n+               <appinfo>\n+                  <meta.attribute kind=\"java\" basedOn=\":org.eclipse.jdt.ls.core.internal.managers.IBuildSupport\"/>\n+               </appinfo>\n+            </annotation>\n+         </attribute>\n+         <attribute name=\"order\" type=\"string\" use=\"required\">\n+            <annotation>\n+               <documentation>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcefc614f7875df96326ca10287665b645476993"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4NDU3Mg==", "bodyText": "fixed", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r433284572", "createdAt": "2020-06-01T14:56:44Z", "author": {"login": "LeonovecSergey"}, "path": "org.eclipse.jdt.ls.core/schema/org.eclipse.jdt.ls.core.buildSupport.exsd", "diffHunk": "@@ -0,0 +1,101 @@\n+<?xml version='1.0' encoding='UTF-8'?>\n+<!-- Schema file written by PDE -->\n+<schema targetNamespace=\"org.eclipse.jdt.ls.core\" xmlns=\"http://www.w3.org/2001/XMLSchema\">\n+<annotation>\n+      <appinfo>\n+         <meta.schema plugin=\"org.eclipse.jdt.ls.core\" id=\"org.eclipse.jdt.ls.core.buildSupport\" name=\"Build Support\"/>\n+      </appinfo>\n+      <documentation>\n+         This extension point represents different kinds of project build supporters for the JDT LS.\n+Each extension must implement &lt;code&gt;org.eclipse.jdt.ls.core.internal.managers.IBuildSupport&lt;/code&gt;.\n+      </documentation>\n+   </annotation>\n+\n+   <element name=\"extension\">\n+      <annotation>\n+         <appinfo>\n+            <meta.element />\n+         </appinfo>\n+      </annotation>\n+      <complexType>\n+         <sequence>\n+            <element ref=\"buildSupport\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+         </sequence>\n+         <attribute name=\"point\" type=\"string\" use=\"required\">\n+            <annotation>\n+               <documentation>\n+                  \n+               </documentation>\n+            </annotation>\n+         </attribute>\n+         <attribute name=\"id\" type=\"string\">\n+            <annotation>\n+               <documentation>\n+                  \n+               </documentation>\n+            </annotation>\n+         </attribute>\n+         <attribute name=\"name\" type=\"string\">\n+            <annotation>\n+               <documentation>\n+                  \n+               </documentation>\n+            </annotation>\n+         </attribute>\n+      </complexType>\n+   </element>\n+\n+   <element name=\"buildSupport\">\n+      <complexType>\n+         <attribute name=\"id\" type=\"string\" use=\"required\">\n+            <annotation>\n+               <documentation>\n+                  \n+               </documentation>\n+            </annotation>\n+         </attribute>\n+         <attribute name=\"class\" type=\"string\" use=\"required\">\n+            <annotation>\n+               <documentation>\n+                  \n+               </documentation>\n+               <appinfo>\n+                  <meta.attribute kind=\"java\" basedOn=\":org.eclipse.jdt.ls.core.internal.managers.IBuildSupport\"/>\n+               </appinfo>\n+            </annotation>\n+         </attribute>\n+         <attribute name=\"order\" type=\"string\" use=\"required\">\n+            <annotation>\n+               <documentation>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzNDg1NA=="}, "originalCommit": {"oid": "bcefc614f7875df96326ca10287665b645476993"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzUzMzA3OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjo0NToxNVrOGcbIdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDo1Njo0OVrOGdNmFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1Nzg0Nw==", "bodyText": "for (IConfigurationElement config : configs)", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r432457847", "createdAt": "2020-05-29T12:45:15Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "diffHunk": "@@ -273,7 +277,18 @@ public boolean isBuildFile(IResource resource) {\n \t}\n \n \tprivate Stream<IBuildSupport> buildSupports() {\n-\t\treturn Stream.of(new GradleBuildSupport(), new MavenBuildSupport(), new InvisibleProjectBuildSupport(), new DefaultProjectBuildSupport(this), new EclipseBuildSupport());\n+\t\tMap<Integer, IBuildSupport> supporters = new TreeMap<>();\n+\t\tIExtensionPoint extensionPoint = Platform.getExtensionRegistry().getExtensionPoint(IConstants.PLUGIN_ID, BUILD_SUPPORT_EXTENSION_POINT_ID);\n+\t\tIConfigurationElement[] configs = extensionPoint.getConfigurationElements();\n+\t\tfor (int i = 0; i < configs.length; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcefc614f7875df96326ca10287665b645476993"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4NDYyOA==", "bodyText": "fixed", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r433284628", "createdAt": "2020-06-01T14:56:49Z", "author": {"login": "LeonovecSergey"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "diffHunk": "@@ -273,7 +277,18 @@ public boolean isBuildFile(IResource resource) {\n \t}\n \n \tprivate Stream<IBuildSupport> buildSupports() {\n-\t\treturn Stream.of(new GradleBuildSupport(), new MavenBuildSupport(), new InvisibleProjectBuildSupport(), new DefaultProjectBuildSupport(this), new EclipseBuildSupport());\n+\t\tMap<Integer, IBuildSupport> supporters = new TreeMap<>();\n+\t\tIExtensionPoint extensionPoint = Platform.getExtensionRegistry().getExtensionPoint(IConstants.PLUGIN_ID, BUILD_SUPPORT_EXTENSION_POINT_ID);\n+\t\tIConfigurationElement[] configs = extensionPoint.getConfigurationElements();\n+\t\tfor (int i = 0; i < configs.length; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1Nzg0Nw=="}, "originalCommit": {"oid": "bcefc614f7875df96326ca10287665b645476993"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzU0MTM5OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjo0ODowMVrOGcbNww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODowODo1OFrOGdmsiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1OTIwMw==", "bodyText": "should log at error level.\nAlso need to log which build implementation was skipped", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r432459203", "createdAt": "2020-05-29T12:48:01Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "diffHunk": "@@ -273,7 +277,18 @@ public boolean isBuildFile(IResource resource) {\n \t}\n \n \tprivate Stream<IBuildSupport> buildSupports() {\n-\t\treturn Stream.of(new GradleBuildSupport(), new MavenBuildSupport(), new InvisibleProjectBuildSupport(), new DefaultProjectBuildSupport(this), new EclipseBuildSupport());\n+\t\tMap<Integer, IBuildSupport> supporters = new TreeMap<>();\n+\t\tIExtensionPoint extensionPoint = Platform.getExtensionRegistry().getExtensionPoint(IConstants.PLUGIN_ID, BUILD_SUPPORT_EXTENSION_POINT_ID);\n+\t\tIConfigurationElement[] configs = extensionPoint.getConfigurationElements();\n+\t\tfor (int i = 0; i < configs.length; i++) {\n+\t\t\ttry {\n+\t\t\t\tInteger order = Integer.valueOf(configs[i].getAttribute(\"order\"));\n+\t\t\t\tsupporters.put(order, (IBuildSupport) configs[i].createExecutableExtension(\"class\")); //$NON-NLS-1$\n+\t\t\t} catch (CoreException e) {\n+\t\t\t\tJavaLanguageServerPlugin.log(e.getStatus());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcefc614f7875df96326ca10287665b645476993"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY5NTg4MQ==", "bodyText": "fixed", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r433695881", "createdAt": "2020-06-02T08:08:58Z", "author": {"login": "LeonovecSergey"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "diffHunk": "@@ -273,7 +277,18 @@ public boolean isBuildFile(IResource resource) {\n \t}\n \n \tprivate Stream<IBuildSupport> buildSupports() {\n-\t\treturn Stream.of(new GradleBuildSupport(), new MavenBuildSupport(), new InvisibleProjectBuildSupport(), new DefaultProjectBuildSupport(this), new EclipseBuildSupport());\n+\t\tMap<Integer, IBuildSupport> supporters = new TreeMap<>();\n+\t\tIExtensionPoint extensionPoint = Platform.getExtensionRegistry().getExtensionPoint(IConstants.PLUGIN_ID, BUILD_SUPPORT_EXTENSION_POINT_ID);\n+\t\tIConfigurationElement[] configs = extensionPoint.getConfigurationElements();\n+\t\tfor (int i = 0; i < configs.length; i++) {\n+\t\t\ttry {\n+\t\t\t\tInteger order = Integer.valueOf(configs[i].getAttribute(\"order\"));\n+\t\t\t\tsupporters.put(order, (IBuildSupport) configs[i].createExecutableExtension(\"class\")); //$NON-NLS-1$\n+\t\t\t} catch (CoreException e) {\n+\t\t\t\tJavaLanguageServerPlugin.log(e.getStatus());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1OTIwMw=="}, "originalCommit": {"oid": "bcefc614f7875df96326ca10287665b645476993"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzU0NTExOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenBuildSupport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjo0OTowOFrOGcbQHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDo1Njo1NFrOGdNmQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1OTgwNA==", "bodyText": "getWatchPatterns()", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r432459804", "createdAt": "2020-05-29T12:49:08Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenBuildSupport.java", "diffHunk": "@@ -185,4 +187,10 @@ public void discoverSource(IClassFile classFile, IProgressMonitor monitor) throw\n \tpublic ILaunchConfiguration getLaunchConfiguration(IJavaProject javaProject, String scope) throws CoreException {\n \t\treturn new JavaApplicationLaunchConfiguration(javaProject.getProject(), scope, MavenRuntimeClasspathProvider.MAVEN_CLASSPATH_PROVIDER);\n \t}\n+\n+\t@Override\n+\tpublic List<String> getBasicWatchers() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcefc614f7875df96326ca10287665b645476993"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4NDY3Mg==", "bodyText": "fixed", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r433284672", "createdAt": "2020-06-01T14:56:54Z", "author": {"login": "LeonovecSergey"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenBuildSupport.java", "diffHunk": "@@ -185,4 +187,10 @@ public void discoverSource(IClassFile classFile, IProgressMonitor monitor) throw\n \tpublic ILaunchConfiguration getLaunchConfiguration(IJavaProject javaProject, String scope) throws CoreException {\n \t\treturn new JavaApplicationLaunchConfiguration(javaProject.getProject(), scope, MavenRuntimeClasspathProvider.MAVEN_CLASSPATH_PROVIDER);\n \t}\n+\n+\t@Override\n+\tpublic List<String> getBasicWatchers() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1OTgwNA=="}, "originalCommit": {"oid": "bcefc614f7875df96326ca10287665b645476993"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzU1NTcxOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/IBuildSupport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjo1MjowNVrOGcbWjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDo1NzowNlrOGdNmug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2MTQ1Mw==", "bodyText": "return Collections.emptyList<>();", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r432461453", "createdAt": "2020-05-29T12:52:05Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/IBuildSupport.java", "diffHunk": "@@ -109,4 +112,8 @@ default ILaunchConfiguration getLaunchConfiguration(IJavaProject javaProject, St\n \t\treturn new JavaApplicationLaunchConfiguration(javaProject.getProject(), scope, null);\n \t}\n \n+\tdefault List<String> getBasicWatchers() {\n+\t\treturn new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcefc614f7875df96326ca10287665b645476993"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4NDc5NA==", "bodyText": "fixed", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r433284794", "createdAt": "2020-06-01T14:57:06Z", "author": {"login": "LeonovecSergey"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/IBuildSupport.java", "diffHunk": "@@ -109,4 +112,8 @@ default ILaunchConfiguration getLaunchConfiguration(IJavaProject javaProject, St\n \t\treturn new JavaApplicationLaunchConfiguration(javaProject.getProject(), scope, null);\n \t}\n \n+\tdefault List<String> getBasicWatchers() {\n+\t\treturn new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2MTQ1Mw=="}, "originalCommit": {"oid": "bcefc614f7875df96326ca10287665b645476993"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzU2NjUwOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleBuildSupport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjo1NToyNFrOGcbdYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDo1NzowMlrOGdNmjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2MzIwMg==", "bodyText": "the list is immutable, might as well put it in a static field once and for all", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r432463202", "createdAt": "2020-05-29T12:55:24Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleBuildSupport.java", "diffHunk": "@@ -131,4 +135,10 @@ public static void saveModels() {\n \tpublic ILaunchConfiguration getLaunchConfiguration(IJavaProject javaProject, String scope) throws CoreException {\n \t\treturn new JavaApplicationLaunchConfiguration(javaProject.getProject(), scope, GradleClasspathProvider.ID);\n \t}\n+\n+\t@Override\n+\tpublic List<String> getBasicWatchers() {\n+\t\treturn Arrays.asList(GRADLE_SUFFIX_PATTERN, GRADLE_PROPERTIES_PATTERN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcefc614f7875df96326ca10287665b645476993"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4NDc0OQ==", "bodyText": "fixed", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r433284749", "createdAt": "2020-06-01T14:57:02Z", "author": {"login": "LeonovecSergey"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleBuildSupport.java", "diffHunk": "@@ -131,4 +135,10 @@ public static void saveModels() {\n \tpublic ILaunchConfiguration getLaunchConfiguration(IJavaProject javaProject, String scope) throws CoreException {\n \t\treturn new JavaApplicationLaunchConfiguration(javaProject.getProject(), scope, GradleClasspathProvider.ID);\n \t}\n+\n+\t@Override\n+\tpublic List<String> getBasicWatchers() {\n+\t\treturn Arrays.asList(GRADLE_SUFFIX_PATTERN, GRADLE_PROPERTIES_PATTERN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2MzIwMg=="}, "originalCommit": {"oid": "bcefc614f7875df96326ca10287665b645476993"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzU3MDY1OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenBuildSupport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjo1Njo0NlrOGcbgOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDo1NzoxNFrOGdNnCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2MzkzMQ==", "bodyText": "Collections.singletonList(\"**/pom.xml\")", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r432463931", "createdAt": "2020-05-29T12:56:46Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenBuildSupport.java", "diffHunk": "@@ -57,6 +58,7 @@\n public class MavenBuildSupport implements IBuildSupport {\n \n \tprivate static final int MAX_TIME_MILLIS = 3000;\n+\tprivate static final String POM_FILE_PATTERN = \"**/pom.xml\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcefc614f7875df96326ca10287665b645476993"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4NDg3NA==", "bodyText": "fixed", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r433284874", "createdAt": "2020-06-01T14:57:14Z", "author": {"login": "LeonovecSergey"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenBuildSupport.java", "diffHunk": "@@ -57,6 +58,7 @@\n public class MavenBuildSupport implements IBuildSupport {\n \n \tprivate static final int MAX_TIME_MILLIS = 3000;\n+\tprivate static final String POM_FILE_PATTERN = \"**/pom.xml\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2MzkzMQ=="}, "originalCommit": {"oid": "bcefc614f7875df96326ca10287665b645476993"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzU3MTYxOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenBuildSupport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjo1NzowMlrOGcbg0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDo1NzoyM1rOGdNnbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2NDA4MA==", "bodyText": "return static field instead", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r432464080", "createdAt": "2020-05-29T12:57:02Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenBuildSupport.java", "diffHunk": "@@ -185,4 +187,10 @@ public void discoverSource(IClassFile classFile, IProgressMonitor monitor) throw\n \tpublic ILaunchConfiguration getLaunchConfiguration(IJavaProject javaProject, String scope) throws CoreException {\n \t\treturn new JavaApplicationLaunchConfiguration(javaProject.getProject(), scope, MavenRuntimeClasspathProvider.MAVEN_CLASSPATH_PROVIDER);\n \t}\n+\n+\t@Override\n+\tpublic List<String> getBasicWatchers() {\n+\t\treturn Arrays.asList(POM_FILE_PATTERN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcefc614f7875df96326ca10287665b645476993"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4NDk3Mw==", "bodyText": "fixed", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r433284973", "createdAt": "2020-06-01T14:57:23Z", "author": {"login": "LeonovecSergey"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenBuildSupport.java", "diffHunk": "@@ -185,4 +187,10 @@ public void discoverSource(IClassFile classFile, IProgressMonitor monitor) throw\n \tpublic ILaunchConfiguration getLaunchConfiguration(IJavaProject javaProject, String scope) throws CoreException {\n \t\treturn new JavaApplicationLaunchConfiguration(javaProject.getProject(), scope, MavenRuntimeClasspathProvider.MAVEN_CLASSPATH_PROVIDER);\n \t}\n+\n+\t@Override\n+\tpublic List<String> getBasicWatchers() {\n+\t\treturn Arrays.asList(POM_FILE_PATTERN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2NDA4MA=="}, "originalCommit": {"oid": "bcefc614f7875df96326ca10287665b645476993"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzU3ODc0OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjo1OToxNFrOGcblUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNTowNjozOFrOGdN9aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2NTIzMg==", "bodyText": "we need a test case that checks the order", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r432465232", "createdAt": "2020-05-29T12:59:14Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "diffHunk": "@@ -273,7 +277,18 @@ public boolean isBuildFile(IResource resource) {\n \t}\n \n \tprivate Stream<IBuildSupport> buildSupports() {\n-\t\treturn Stream.of(new GradleBuildSupport(), new MavenBuildSupport(), new InvisibleProjectBuildSupport(), new DefaultProjectBuildSupport(this), new EclipseBuildSupport());\n+\t\tMap<Integer, IBuildSupport> supporters = new TreeMap<>();\n+\t\tIExtensionPoint extensionPoint = Platform.getExtensionRegistry().getExtensionPoint(IConstants.PLUGIN_ID, BUILD_SUPPORT_EXTENSION_POINT_ID);\n+\t\tIConfigurationElement[] configs = extensionPoint.getConfigurationElements();\n+\t\tfor (int i = 0; i < configs.length; i++) {\n+\t\t\ttry {\n+\t\t\t\tInteger order = Integer.valueOf(configs[i].getAttribute(\"order\"));\n+\t\t\t\tsupporters.put(order, (IBuildSupport) configs[i].createExecutableExtension(\"class\")); //$NON-NLS-1$\n+\t\t\t} catch (CoreException e) {\n+\t\t\t\tJavaLanguageServerPlugin.log(e.getStatus());\n+\t\t\t}\n+\t\t}\n+\t\treturn supporters.values().stream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcefc614f7875df96326ca10287665b645476993"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5MDYwMw==", "bodyText": "Created a test. Replaced access modifier of the buildSupports () method by protected. It was necessary for the test.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r433290603", "createdAt": "2020-06-01T15:06:38Z", "author": {"login": "LeonovecSergey"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "diffHunk": "@@ -273,7 +277,18 @@ public boolean isBuildFile(IResource resource) {\n \t}\n \n \tprivate Stream<IBuildSupport> buildSupports() {\n-\t\treturn Stream.of(new GradleBuildSupport(), new MavenBuildSupport(), new InvisibleProjectBuildSupport(), new DefaultProjectBuildSupport(this), new EclipseBuildSupport());\n+\t\tMap<Integer, IBuildSupport> supporters = new TreeMap<>();\n+\t\tIExtensionPoint extensionPoint = Platform.getExtensionRegistry().getExtensionPoint(IConstants.PLUGIN_ID, BUILD_SUPPORT_EXTENSION_POINT_ID);\n+\t\tIConfigurationElement[] configs = extensionPoint.getConfigurationElements();\n+\t\tfor (int i = 0; i < configs.length; i++) {\n+\t\t\ttry {\n+\t\t\t\tInteger order = Integer.valueOf(configs[i].getAttribute(\"order\"));\n+\t\t\t\tsupporters.put(order, (IBuildSupport) configs[i].createExecutableExtension(\"class\")); //$NON-NLS-1$\n+\t\t\t} catch (CoreException e) {\n+\t\t\t\tJavaLanguageServerPlugin.log(e.getStatus());\n+\t\t\t}\n+\t\t}\n+\t\treturn supporters.values().stream();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2NTIzMg=="}, "originalCommit": {"oid": "bcefc614f7875df96326ca10287665b645476993"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzU4MTM4OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/plugin.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzowMDowM1rOGcbnGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDo1NzozMFrOGdNnug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2NTY5MQ==", "bodyText": "buildSupport", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r432465691", "createdAt": "2020-05-29T13:00:03Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/plugin.xml", "diffHunk": "@@ -115,4 +116,28 @@\n             order=\"1500\"\n             class=\"org.eclipse.jdt.ls.core.internal.managers.InvisibleProjectImporter\" />\n    </extension>\n+   <extension\n+   \t\t id=\"buildSuppor\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcefc614f7875df96326ca10287665b645476993"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4NTA1MA==", "bodyText": "fixed", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r433285050", "createdAt": "2020-06-01T14:57:30Z", "author": {"login": "LeonovecSergey"}, "path": "org.eclipse.jdt.ls.core/plugin.xml", "diffHunk": "@@ -115,4 +116,28 @@\n             order=\"1500\"\n             class=\"org.eclipse.jdt.ls.core.internal.managers.InvisibleProjectImporter\" />\n    </extension>\n+   <extension\n+   \t\t id=\"buildSuppor\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2NTY5MQ=="}, "originalCommit": {"oid": "bcefc614f7875df96326ca10287665b645476993"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzQyMTA0OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/StandartProjectManagerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjoxMToxOVrOGd5XBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDozNToyNVrOGee3HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAwMTY3MA==", "bodyText": "List<Class<IBuildSupport>> instead. Don't instantiate the  classes", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r434001670", "createdAt": "2020-06-02T16:11:19Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/StandartProjectManagerTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+import org.eclipse.jdt.ls.core.internal.preferences.StandardPreferenceManager;\n+import org.junit.Test;\n+\n+/**\n+ * @author siarhei_leanavets1\n+ *\n+ */\n+public class StandartProjectManagerTest {\n+\n+\t@Test\n+\tpublic void testCheckBuildSupportOrder() {\n+\t\tPreferenceManager preferenceManager = mock(StandardPreferenceManager.class);\n+\t\tStandardProjectsManagerDummy projectsManagerDummy = new StandardProjectsManagerDummy(preferenceManager);\n+\t\tList<IBuildSupport> expectedList = Arrays.asList(new GradleBuildSupport(), new MavenBuildSupport(), new InvisibleProjectBuildSupport(), new DefaultProjectBuildSupport(), new EclipseBuildSupport());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d7c238e3e2a193037f9d9531020c767cd083c85"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYxNjA5Mw==", "bodyText": "fixed", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r434616093", "createdAt": "2020-06-03T14:35:25Z", "author": {"login": "LeonovecSergey"}, "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/StandartProjectManagerTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+import org.eclipse.jdt.ls.core.internal.preferences.StandardPreferenceManager;\n+import org.junit.Test;\n+\n+/**\n+ * @author siarhei_leanavets1\n+ *\n+ */\n+public class StandartProjectManagerTest {\n+\n+\t@Test\n+\tpublic void testCheckBuildSupportOrder() {\n+\t\tPreferenceManager preferenceManager = mock(StandardPreferenceManager.class);\n+\t\tStandardProjectsManagerDummy projectsManagerDummy = new StandardProjectsManagerDummy(preferenceManager);\n+\t\tList<IBuildSupport> expectedList = Arrays.asList(new GradleBuildSupport(), new MavenBuildSupport(), new InvisibleProjectBuildSupport(), new DefaultProjectBuildSupport(), new EclipseBuildSupport());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAwMTY3MA=="}, "originalCommit": {"oid": "5d7c238e3e2a193037f9d9531020c767cd083c85"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzQ3NjIyOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjoyNTozMlrOGd56kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDozNDo0MFrOGee04A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxMDc3MA==", "bodyText": "e.getWatchPatterns().forEach(patterns::add));", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r434010770", "createdAt": "2020-06-02T16:25:32Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "diffHunk": "@@ -302,6 +317,7 @@ public void registerWatchers(boolean runInJob) {\n \t\tlogInfo(\">> registerFeature 'workspace/didChangeWatchedFiles'\");\n \t\tif (preferenceManager.getClientPreferences().isWorkspaceChangeWatchedFilesDynamicRegistered()) {\n \t\t\tSet<String> patterns = new LinkedHashSet<>(basicWatchers);\n+\t\t\tbuildSupports().forEach(e -> e.getWatchPatterns().forEach(p -> patterns.add(p)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d7c238e3e2a193037f9d9531020c767cd083c85"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYxNTUyMA==", "bodyText": "fixed", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r434615520", "createdAt": "2020-06-03T14:34:40Z", "author": {"login": "LeonovecSergey"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "diffHunk": "@@ -302,6 +317,7 @@ public void registerWatchers(boolean runInJob) {\n \t\tlogInfo(\">> registerFeature 'workspace/didChangeWatchedFiles'\");\n \t\tif (preferenceManager.getClientPreferences().isWorkspaceChangeWatchedFilesDynamicRegistered()) {\n \t\t\tSet<String> patterns = new LinkedHashSet<>(basicWatchers);\n+\t\t\tbuildSupports().forEach(e -> e.getWatchPatterns().forEach(p -> patterns.add(p)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxMDc3MA=="}, "originalCommit": {"oid": "5d7c238e3e2a193037f9d9531020c767cd083c85"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzQ4MDEwOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManagerDummy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjoyNjo0MFrOGd59HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDozNDozNVrOGee0lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxMTQyMQ==", "bodyText": "better create an anonymous or inner class in StandartProjectManagerTest", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r434011421", "createdAt": "2020-06-02T16:26:40Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManagerDummy.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+\n+/**\n+ * @author siarhei_leanavets1\n+ *\n+ */\n+public class StandardProjectsManagerDummy extends StandardProjectsManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d7c238e3e2a193037f9d9531020c767cd083c85"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYxNTQ0NA==", "bodyText": "fixed", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r434615444", "createdAt": "2020-06-03T14:34:35Z", "author": {"login": "LeonovecSergey"}, "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManagerDummy.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+\n+/**\n+ * @author siarhei_leanavets1\n+ *\n+ */\n+public class StandardProjectsManagerDummy extends StandardProjectsManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxMTQyMQ=="}, "originalCommit": {"oid": "5d7c238e3e2a193037f9d9531020c767cd083c85"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzQ4OTUzOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/StandartProjectManagerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjoyOTowOFrOGd6DBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDozNDozMFrOGee0Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxMjkzMg==", "bodyText": "StandardProjectsManagerTest", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r434012932", "createdAt": "2020-06-02T16:29:08Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/StandartProjectManagerTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+import org.eclipse.jdt.ls.core.internal.preferences.StandardPreferenceManager;\n+import org.junit.Test;\n+\n+/**\n+ * @author siarhei_leanavets1\n+ *\n+ */\n+public class StandartProjectManagerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d7c238e3e2a193037f9d9531020c767cd083c85"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYxNTM4Ng==", "bodyText": "fixed", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r434615386", "createdAt": "2020-06-03T14:34:30Z", "author": {"login": "LeonovecSergey"}, "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/StandartProjectManagerTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+import org.eclipse.jdt.ls.core.internal.preferences.StandardPreferenceManager;\n+import org.junit.Test;\n+\n+/**\n+ * @author siarhei_leanavets1\n+ *\n+ */\n+public class StandartProjectManagerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxMjkzMg=="}, "originalCommit": {"oid": "5d7c238e3e2a193037f9d9531020c767cd083c85"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3561, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}