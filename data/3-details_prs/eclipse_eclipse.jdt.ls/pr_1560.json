{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NzY1MjE2", "number": 1560, "title": "Created type doesn't implement sealed interface.", "bodyText": "Add quick fix to generate proper type declaration for sealed type\nFixed #1553\nAdd testcase\n\nSigned-off-by: Roland Grunberg rgrunber@redhat.com\nA few notes :\n\nThe type being created that is being permitted is given 'non-sealed' modifier as that seems the most permissive. Seemed reasonable given we use 'public' when creating the type already.\nCurrently I haven't found a way to add the methods (if any) needing to be implemented. The issue is that to use the ASTRewrite API, the type must already exist and in this case it doesn't. I can have another look at how JDT UI does this but this is basically why all of 'constructNewCUChange(..)' deals with java language tokens as Strings, completely avoiding the AST.", "createdAt": "2020-10-06T18:52:47Z", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560", "merged": true, "mergeCommit": {"oid": "e5ac0d8a67f3d29ab04adf2bd2814cab83d5578d"}, "closed": true, "closedAt": "2020-10-14T13:56:26Z", "author": {"login": "rgrunber"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQLqxjAFqTUwMzc5ODk3MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSJZvaAFqTUwNzQ5Mzk1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNzk4OTcx", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#pullrequestreview-503798971", "createdAt": "2020-10-07T11:55:41Z", "commit": {"oid": "73d99ee8cb099e0ed186e0810ae53e8e389668ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMTo1NTo0MlrOHdvp6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMTo1NTo0MlrOHdvp6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1MTUzMA==", "bodyText": "I'd say the default would be final. Since the user is trying to restrict implementations, it'd make more sense to leave those restricted as well by default", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r500951530", "createdAt": "2020-10-07T11:55:42Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java", "diffHunk": "@@ -397,16 +398,26 @@ private String constructTypeStub(ICompilationUnit parentCU, String name, int mod\n \t\tif (modifiers != 0) {\n \t\t\tbuf.append(' ');\n \t\t}\n+\n+\t\tString[] permittedNames = fCompilationUnit.findPrimaryType().getPermittedSubtypeNames();\n+\t\tboolean isPermitted = Arrays.asList(permittedNames).stream().anyMatch(p -> name.equals(p));\n+\t\tif (isPermitted) {\n+\t\t\tbuf.append(\"non-sealed \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d99ee8cb099e0ed186e0810ae53e8e389668ff"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNzk5NzMz", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#pullrequestreview-503799733", "createdAt": "2020-10-07T11:56:48Z", "commit": {"oid": "73d99ee8cb099e0ed186e0810ae53e8e389668ff"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMTo1Njo0OVrOHdvsKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMjowNDo0MlrOHdv9TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1MjEwNg==", "bodyText": "We already know parent and type are not null, since they're an instance of Type.\nI think you want to check if typeDecl != null at some point", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r500952106", "createdAt": "2020-10-07T11:56:49Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java", "diffHunk": "@@ -550,6 +550,25 @@ private static boolean hasFieldWithName(ITypeBinding typeBinding, String name) {\n \n \tprivate static int evauateTypeKind(ASTNode node, IJavaProject project) {\n \t\tint kind = ASTResolving.getPossibleTypeKinds(node, JavaModelUtil.is50OrHigher(project));\n+\n+\t\t/*\n+\t\t *  TODO : This code block should be contributed to ASTResolving.getPossibleTypeKinds(..)\n+\t\t *  Support determining type of the 'permits' node type.\n+\t\t */\n+\t\tASTNode parent = node.getParent();\n+\t\tif (parent instanceof Type) {\n+\t\t\tType type = (Type) parent;\n+\t\t\tTypeDeclaration typeDecl = ASTNodes.getParent(node, TypeDeclaration.class);\n+\t\t\tif (parent != null && type != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d99ee8cb099e0ed186e0810ae53e8e389668ff"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1Mzg5NQ==", "bodyText": "public final", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r500953895", "createdAt": "2020-10-07T12:00:08Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java", "diffHunk": "@@ -1400,4 +1403,30 @@ public void testDontImportTestClassesInMainCode() throws Exception {\n \t\tassertCodeActionNotExists(cu1, \"Import 'Tests' (pt)\");\n \t}\n \n+\t@Test\n+\tpublic void testTypeInSealedTypeDeclaration() throws Exception {\n+\t\tMap<String, String> options15 = new HashMap<>();\n+\t\tJavaModelUtil.setComplianceOptions(options15, JavaCore.VERSION_15);\n+\t\toptions15.put(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);\n+\t\toptions15.put(JavaCore.COMPILER_PB_REPORT_PREVIEW_FEATURES, JavaCore.IGNORE);\n+\t\tfJProject1.setOptions(options15);\n+\n+\t\tIPackageFragment pack1 = fSourceFolder.createPackageFragment(\"test1\", false, null);\n+\t\tStringBuilder buf = new StringBuilder();\n+\t\tbuf.append(\"package test1;\\n\");\n+\t\tbuf.append(\"public sealed interface E permits F {\\n\");\n+\t\tbuf.append(\"}\\n\");\n+\t\tICompilationUnit cu = pack1.createCompilationUnit(\"E.java\", buf.toString(), false, null);\n+\n+\t\tbuf = new StringBuilder();\n+\t\tbuf.append(\"package test1;\\n\");\n+\t\tbuf.append(\"\\n\");\n+\t\tbuf.append(\"public non-sealed class F implements E {\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d99ee8cb099e0ed186e0810ae53e8e389668ff"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1NjQ5Mg==", "bodyText": "I don't remember if we're allowed to return snippets at that point, but if yes, and provided the client supports snippets, then returning ${1:|final,non-sealed,sealed|} would be the best.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r500956492", "createdAt": "2020-10-07T12:04:42Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java", "diffHunk": "@@ -397,16 +398,26 @@ private String constructTypeStub(ICompilationUnit parentCU, String name, int mod\n \t\tif (modifiers != 0) {\n \t\t\tbuf.append(' ');\n \t\t}\n+\n+\t\tString[] permittedNames = fCompilationUnit.findPrimaryType().getPermittedSubtypeNames();\n+\t\tboolean isPermitted = Arrays.asList(permittedNames).stream().anyMatch(p -> name.equals(p));\n+\t\tif (isPermitted) {\n+\t\t\tbuf.append(\"non-sealed \");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1MTUzMA=="}, "originalCommit": {"oid": "73d99ee8cb099e0ed186e0810ae53e8e389668ff"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzODE3NTM1", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#pullrequestreview-503817535", "createdAt": "2020-10-07T12:20:23Z", "commit": {"oid": "73d99ee8cb099e0ed186e0810ae53e8e389668ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMjoyMDoyM1rOHdwiFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMjoyMDoyM1rOHdwiFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk2NTkxMQ==", "bodyText": "on L 395, please change StringBuilder buf = new StringBuilder();", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r500965911", "createdAt": "2020-10-07T12:20:23Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java", "diffHunk": "@@ -397,16 +398,26 @@ private String constructTypeStub(ICompilationUnit parentCU, String name, int mod\n \t\tif (modifiers != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d99ee8cb099e0ed186e0810ae53e8e389668ff"}, "originalPosition": 9}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73d99ee8cb099e0ed186e0810ae53e8e389668ff", "author": {"user": {"login": "rgrunber", "name": "Roland Grunberg"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/73d99ee8cb099e0ed186e0810ae53e8e389668ff", "committedDate": "2020-10-06T16:45:34Z", "message": "Created type doesn't implement sealed interface.\n\n- Add quick fix to generate proper type declaration for sealed type\n- Fixed #1553\n- Add testcase\n\nSigned-off-by: Roland Grunberg <rgrunber@redhat.com>"}, "afterCommit": {"oid": "d3cc0967f13407f0cae0eac37ec1d46c8a04423a", "author": {"user": {"login": "rgrunber", "name": "Roland Grunberg"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/d3cc0967f13407f0cae0eac37ec1d46c8a04423a", "committedDate": "2020-10-07T18:21:12Z", "message": "Created type doesn't implement sealed interface.\n\n- Add quick fix to generate proper type declaration for sealed type\n- Fixes #1553\n- Add testcase\n\nSigned-off-by: Roland Grunberg <rgrunber@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0NTU5MDQx", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#pullrequestreview-504559041", "createdAt": "2020-10-08T08:46:42Z", "commit": {"oid": "d3cc0967f13407f0cae0eac37ec1d46c8a04423a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwODo0Njo0MlrOHeUNOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwODo0NzozMVrOHeUPSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU1MDM5NA==", "bodyText": "we could avoid calling fCompilationUnit.findPrimaryType() several times in the same method, since a bunch of processing is happening behind the scene every time.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r501550394", "createdAt": "2020-10-08T08:46:42Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java", "diffHunk": "@@ -391,22 +390,32 @@ private String constructCUContent(ICompilationUnit cu, String typeContent, Strin\n \t * Called from createType to construct the source for this type\n \t */\n \tprivate String constructTypeStub(ICompilationUnit parentCU, String name, int modifiers, String lineDelimiter) throws CoreException {\n-\t\tStringBuffer buf = new StringBuffer();\n+\t\tStringBuilder buf = new StringBuilder();\n \n \t\tbuf.append(Flags.toString(modifiers));\n \t\tif (modifiers != 0) {\n \t\t\tbuf.append(' ');\n \t\t}\n+\n+\t\tString[] permittedNames = fCompilationUnit.findPrimaryType().getPermittedSubtypeNames();\n+\t\tboolean isPermitted = Arrays.asList(permittedNames).stream().anyMatch(p -> name.equals(p));\n+\t\tif (isPermitted) {\n+\t\t\tbuf.append(\"final \");\n+\t\t}\n+\n \t\tString type = \"\"; //$NON-NLS-1$\n \t\tString templateID = \"\"; //$NON-NLS-1$\n+\t\tString superType = \"\"; //$NON-NLS-1$\n \t\tswitch (fTypeKind) {\n \t\t\tcase K_CLASS:\n \t\t\t\ttype = \"class \"; //$NON-NLS-1$\n \t\t\t\ttemplateID = CodeGeneration.CLASS_BODY_TEMPLATE_ID;\n+\t\t\t\tsuperType = fCompilationUnit.findPrimaryType().isInterface() ? \"implements \" : \"extends \";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3cc0967f13407f0cae0eac37ec1d46c8a04423a"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU1MDkyMA==", "bodyText": "Assign fCompilationUnit.findPrimaryType() to a variable and reuse it on L413 and L434", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r501550920", "createdAt": "2020-10-08T08:47:31Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java", "diffHunk": "@@ -391,22 +390,32 @@ private String constructCUContent(ICompilationUnit cu, String typeContent, Strin\n \t * Called from createType to construct the source for this type\n \t */\n \tprivate String constructTypeStub(ICompilationUnit parentCU, String name, int modifiers, String lineDelimiter) throws CoreException {\n-\t\tStringBuffer buf = new StringBuffer();\n+\t\tStringBuilder buf = new StringBuilder();\n \n \t\tbuf.append(Flags.toString(modifiers));\n \t\tif (modifiers != 0) {\n \t\t\tbuf.append(' ');\n \t\t}\n+\n+\t\tString[] permittedNames = fCompilationUnit.findPrimaryType().getPermittedSubtypeNames();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3cc0967f13407f0cae0eac37ec1d46c8a04423a"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8dbec12a74fc071d3456305e98f374e8b2b60bf", "author": {"user": {"login": "rgrunber", "name": "Roland Grunberg"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/c8dbec12a74fc071d3456305e98f374e8b2b60bf", "committedDate": "2020-10-08T21:16:31Z", "message": "Created type doesn't implement sealed interface.\n\n- Add quick fix to generate proper type declaration for sealed type\n- Fixes #1553\n- Add testcase\n\nSigned-off-by: Roland Grunberg <rgrunber@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d3cc0967f13407f0cae0eac37ec1d46c8a04423a", "author": {"user": {"login": "rgrunber", "name": "Roland Grunberg"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/d3cc0967f13407f0cae0eac37ec1d46c8a04423a", "committedDate": "2020-10-07T18:21:12Z", "message": "Created type doesn't implement sealed interface.\n\n- Add quick fix to generate proper type declaration for sealed type\n- Fixes #1553\n- Add testcase\n\nSigned-off-by: Roland Grunberg <rgrunber@redhat.com>"}, "afterCommit": {"oid": "c8dbec12a74fc071d3456305e98f374e8b2b60bf", "author": {"user": {"login": "rgrunber", "name": "Roland Grunberg"}}, "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/c8dbec12a74fc071d3456305e98f374e8b2b60bf", "committedDate": "2020-10-08T21:16:31Z", "message": "Created type doesn't implement sealed interface.\n\n- Add quick fix to generate proper type declaration for sealed type\n- Fixes #1553\n- Add testcase\n\nSigned-off-by: Roland Grunberg <rgrunber@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3NDU1NTgx", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#pullrequestreview-507455581", "createdAt": "2020-10-13T13:48:39Z", "commit": {"oid": "c8dbec12a74fc071d3456305e98f374e8b2b60bf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo0ODozOVrOHgntOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo0ODozOVrOHgntOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2NzAzMg==", "bodyText": "Note : Attempting to upstream this as https://git.eclipse.org/r/c/jdt/eclipse.jdt.ui/+/170568 .", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r503967032", "createdAt": "2020-10-13T13:48:39Z", "author": {"login": "rgrunber"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java", "diffHunk": "@@ -550,6 +550,23 @@ private static boolean hasFieldWithName(ITypeBinding typeBinding, String name) {\n \n \tprivate static int evauateTypeKind(ASTNode node, IJavaProject project) {\n \t\tint kind = ASTResolving.getPossibleTypeKinds(node, JavaModelUtil.is50OrHigher(project));\n+\n+\t\t/*\n+\t\t *  TODO : This code block should be contributed to ASTResolving.getPossibleTypeKinds(..)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8dbec12a74fc071d3456305e98f374e8b2b60bf"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3NDkzOTUy", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#pullrequestreview-507493952", "createdAt": "2020-10-13T14:25:08Z", "commit": {"oid": "c8dbec12a74fc071d3456305e98f374e8b2b60bf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDoyNTowOFrOHgpf3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDoyNTowOFrOHgpf3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5NjM4MQ==", "bodyText": "if E declares methods, then class F implements E but not those methods, leading to a compilation error", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r503996381", "createdAt": "2020-10-13T14:25:08Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java", "diffHunk": "@@ -1400,4 +1403,30 @@ public void testDontImportTestClassesInMainCode() throws Exception {\n \t\tassertCodeActionNotExists(cu1, \"Import 'Tests' (pt)\");\n \t}\n \n+\t@Test\n+\tpublic void testTypeInSealedTypeDeclaration() throws Exception {\n+\t\tMap<String, String> options15 = new HashMap<>();\n+\t\tJavaModelUtil.setComplianceOptions(options15, JavaCore.VERSION_15);\n+\t\toptions15.put(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);\n+\t\toptions15.put(JavaCore.COMPILER_PB_REPORT_PREVIEW_FEATURES, JavaCore.IGNORE);\n+\t\tfJProject1.setOptions(options15);\n+\n+\t\tIPackageFragment pack1 = fSourceFolder.createPackageFragment(\"test1\", false, null);\n+\t\tStringBuilder buf = new StringBuilder();\n+\t\tbuf.append(\"package test1;\\n\");\n+\t\tbuf.append(\"public sealed interface E permits F {\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8dbec12a74fc071d3456305e98f374e8b2b60bf"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1009, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}