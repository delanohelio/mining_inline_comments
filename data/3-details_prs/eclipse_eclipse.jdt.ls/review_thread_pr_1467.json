{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3MzU0OTc3", "number": 1467, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNzo0NzowOVrOECQjSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMTo0NTo1NFrOEDaF_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODAzNzg1OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNzo0NzowOVrOGem0ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxODoxOTo1OFrOGen-Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0NjQ2OQ==", "bodyText": "can you check that, when you set/change the target compilation in the root project, the children are updated?", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r434746469", "createdAt": "2020-06-03T17:47:09Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporterTest.java", "diffHunk": "@@ -439,6 +441,41 @@ public void testJava14Project() throws Exception {\n \t\ttestJavaProjectWithPreviewFeatures(\"14\", true /* The project has enabled preview features in the jdt setting*/, JavaCore.IGNORE);\n \t}\n \n+\t@Test\n+\tpublic void testSubprojects() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f12f013f4c087331b86f11c630431cda6fe7f26b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc2NTM4Mw==", "bodyText": "Done.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r434765383", "createdAt": "2020-06-03T18:19:58Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporterTest.java", "diffHunk": "@@ -439,6 +441,41 @@ public void testJava14Project() throws Exception {\n \t\ttestJavaProjectWithPreviewFeatures(\"14\", true /* The project has enabled preview features in the jdt setting*/, JavaCore.IGNORE);\n \t}\n \n+\t@Test\n+\tpublic void testSubprojects() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0NjQ2OQ=="}, "originalCommit": {"oid": "f12f013f4c087331b86f11c630431cda6fe7f26b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTIzNjkwOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleBuildSupport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMToxOTo0NFrOGeym3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjo1NjoyNFrOGfEZTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkzOTYxNA==", "bodyText": "this else condition branch is redundant, and it's logical is similar as the if (force) { } branch. Please consider merging the duplicated logic.\nFor example:\nOptional<GradleBuild> build = GradleCore.getWorkspace().getBuild(project);\nif (build.isPresent()) {\n  GradleBuild gradleBuild = build.get();\n if (force && isRoot(project, gradleBuild, monitor)) {\n  ...\n  }\n\ngradleBuild.synchronize(monitor);\n}", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r434939614", "createdAt": "2020-06-04T01:19:44Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleBuildSupport.java", "diffHunk": "@@ -58,10 +64,16 @@ public void update(IProject project, boolean force, IProgressMonitor monitor) th\n \t\t}\n \t\tJavaLanguageServerPlugin.logInfo(\"Starting Gradle update for \" + project.getName());\n \t\tif (force) {\n-\t\t\tString projectPath = project.getLocation().toFile().getAbsolutePath();\n-\t\t\tBuildConfiguration buildConfiguration = GradleProjectImporter.getBuildConfiguration(Paths.get(projectPath));\n-\t\t\tGradleBuild build = GradleCore.getWorkspace().createBuild(buildConfiguration);\n-\t\t\tbuild.synchronize(monitor);\n+\t\t\tOptional<GradleBuild> build = GradleCore.getWorkspace().getBuild(project);\n+\t\t\tif (build.isPresent()) {\n+\t\t\t\tGradleBuild gradleBuild = build.get();\n+\t\t\t\tif (isRoot(project, gradleBuild, monitor)) {\n+\t\t\t\t\tString projectPath = project.getLocation().toFile().getAbsolutePath();\n+\t\t\t\t\tBuildConfiguration buildConfiguration = GradleProjectImporter.getBuildConfiguration(Paths.get(projectPath));\n+\t\t\t\t\tgradleBuild = GradleCore.getWorkspace().createBuild(buildConfiguration);\n+\t\t\t\t}\n+\t\t\t\tgradleBuild.synchronize(monitor);\n+\t\t\t}\n \t\t} else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eae9c9cd76101a284a5703747a145dc75e41b2e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzMTA1NQ==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r435231055", "createdAt": "2020-06-04T12:56:24Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleBuildSupport.java", "diffHunk": "@@ -58,10 +64,16 @@ public void update(IProject project, boolean force, IProgressMonitor monitor) th\n \t\t}\n \t\tJavaLanguageServerPlugin.logInfo(\"Starting Gradle update for \" + project.getName());\n \t\tif (force) {\n-\t\t\tString projectPath = project.getLocation().toFile().getAbsolutePath();\n-\t\t\tBuildConfiguration buildConfiguration = GradleProjectImporter.getBuildConfiguration(Paths.get(projectPath));\n-\t\t\tGradleBuild build = GradleCore.getWorkspace().createBuild(buildConfiguration);\n-\t\t\tbuild.synchronize(monitor);\n+\t\t\tOptional<GradleBuild> build = GradleCore.getWorkspace().getBuild(project);\n+\t\t\tif (build.isPresent()) {\n+\t\t\t\tGradleBuild gradleBuild = build.get();\n+\t\t\t\tif (isRoot(project, gradleBuild, monitor)) {\n+\t\t\t\t\tString projectPath = project.getLocation().toFile().getAbsolutePath();\n+\t\t\t\t\tBuildConfiguration buildConfiguration = GradleProjectImporter.getBuildConfiguration(Paths.get(projectPath));\n+\t\t\t\t\tgradleBuild = GradleCore.getWorkspace().createBuild(buildConfiguration);\n+\t\t\t\t}\n+\t\t\t\tgradleBuild.synchronize(monitor);\n+\t\t\t}\n \t\t} else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkzOTYxNA=="}, "originalCommit": {"oid": "3eae9c9cd76101a284a5703747a145dc75e41b2e"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjMyOTg0OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzo0NzozOVrOGfRDew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTowNDoyNVrOGfUA4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzODQ1OQ==", "bodyText": "this belongs to a Gradle specific Preference Listener", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r435438459", "createdAt": "2020-06-04T17:47:39Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "diffHunk": "@@ -402,6 +404,11 @@ public void preferencesChange(Preferences oldPreferences, Preferences newPrefere\n \t\t\t\t\t\tregisterWatcherJob.schedule(1000L);\n \t\t\t\t\t\tUpdateClasspathJob.getInstance().updateClasspath();\n \t\t\t\t\t}\n+\t\t\t\t\tif ((!Objects.equals(oldPreferences.getSha256Allowed(), newPreferences.getSha256Allowed()) || !Objects.equals(oldPreferences.getSha256Disallowed(), newPreferences.getSha256Disallowed()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b7cac193a73f6de9679d98d3312a7213f2a3d20"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4Njk0NQ==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r435486945", "createdAt": "2020-06-04T19:04:25Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "diffHunk": "@@ -402,6 +404,11 @@ public void preferencesChange(Preferences oldPreferences, Preferences newPrefere\n \t\t\t\t\t\tregisterWatcherJob.schedule(1000L);\n \t\t\t\t\t\tUpdateClasspathJob.getInstance().updateClasspath();\n \t\t\t\t\t}\n+\t\t\t\t\tif ((!Objects.equals(oldPreferences.getSha256Allowed(), newPreferences.getSha256Allowed()) || !Objects.equals(oldPreferences.getSha256Disallowed(), newPreferences.getSha256Disallowed()))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzODQ1OQ=="}, "originalCommit": {"oid": "4b7cac193a73f6de9679d98d3312a7213f2a3d20"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjMzNDE5OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzo0ODozN1rOGfRF_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTowNDoxMlrOGfUAbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzOTEwMA==", "bodyText": "only projects affected by the checksum changes should be updated", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r435439100", "createdAt": "2020-06-04T17:48:37Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "diffHunk": "@@ -402,6 +404,11 @@ public void preferencesChange(Preferences oldPreferences, Preferences newPrefere\n \t\t\t\t\t\tregisterWatcherJob.schedule(1000L);\n \t\t\t\t\t\tUpdateClasspathJob.getInstance().updateClasspath();\n \t\t\t\t\t}\n+\t\t\t\t\tif ((!Objects.equals(oldPreferences.getSha256Allowed(), newPreferences.getSha256Allowed()) || !Objects.equals(oldPreferences.getSha256Disallowed(), newPreferences.getSha256Disallowed()))) {\n+\t\t\t\t\t\tfor (IProject project : ProjectUtils.getGradleProjects()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b7cac193a73f6de9679d98d3312a7213f2a3d20"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NjgyOA==", "bodyText": "Fixed", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r435486828", "createdAt": "2020-06-04T19:04:12Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "diffHunk": "@@ -402,6 +404,11 @@ public void preferencesChange(Preferences oldPreferences, Preferences newPrefere\n \t\t\t\t\t\tregisterWatcherJob.schedule(1000L);\n \t\t\t\t\t\tUpdateClasspathJob.getInstance().updateClasspath();\n \t\t\t\t\t}\n+\t\t\t\t\tif ((!Objects.equals(oldPreferences.getSha256Allowed(), newPreferences.getSha256Allowed()) || !Objects.equals(oldPreferences.getSha256Disallowed(), newPreferences.getSha256Disallowed()))) {\n+\t\t\t\t\t\tfor (IProject project : ProjectUtils.getGradleProjects()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzOTEwMA=="}, "originalCommit": {"oid": "4b7cac193a73f6de9679d98d3312a7213f2a3d20"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjMzNzA3OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzo0OTozMFrOGfRH1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMTo0MzowNlrOGfdssQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzOTU3NQ==", "bodyText": "why are static imports being moved down here?", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r435439575", "createdAt": "2020-06-04T17:49:30Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "diffHunk": "@@ -40,14 +33,18 @@\n import org.eclipse.jdt.internal.core.manipulation.MembersOrderPreferenceCacheCommon;\n import org.eclipse.jdt.ls.core.internal.IConstants;\n import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n-import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n import org.eclipse.jdt.ls.core.internal.ResourceUtils;\n import org.eclipse.jdt.ls.core.internal.RuntimeEnvironment;\n import org.eclipse.jdt.ls.core.internal.contentassist.TypeFilter;\n-import org.eclipse.jdt.ls.core.internal.managers.ProjectsManager;\n import org.eclipse.jdt.ls.internal.gradle.checksums.WrapperValidator;\n import org.eclipse.lsp4j.MessageType;\n \n+import static org.eclipse.jdt.ls.core.internal.handlers.MapFlattener.getBoolean;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b7cac193a73f6de9679d98d3312a7213f2a3d20"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4Mjg4Mg==", "bodyText": "Eclipse have moved them.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r435482882", "createdAt": "2020-06-04T18:56:53Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "diffHunk": "@@ -40,14 +33,18 @@\n import org.eclipse.jdt.internal.core.manipulation.MembersOrderPreferenceCacheCommon;\n import org.eclipse.jdt.ls.core.internal.IConstants;\n import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n-import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n import org.eclipse.jdt.ls.core.internal.ResourceUtils;\n import org.eclipse.jdt.ls.core.internal.RuntimeEnvironment;\n import org.eclipse.jdt.ls.core.internal.contentassist.TypeFilter;\n-import org.eclipse.jdt.ls.core.internal.managers.ProjectsManager;\n import org.eclipse.jdt.ls.internal.gradle.checksums.WrapperValidator;\n import org.eclipse.lsp4j.MessageType;\n \n+import static org.eclipse.jdt.ls.core.internal.handlers.MapFlattener.getBoolean;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzOTU3NQ=="}, "originalCommit": {"oid": "4b7cac193a73f6de9679d98d3312a7213f2a3d20"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0Mzc3NA==", "bodyText": "+1, should not change the order of static import. Maybe you should tune the sorting order of your Organize Imports in eclipse preferences.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r435643774", "createdAt": "2020-06-05T01:35:43Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "diffHunk": "@@ -40,14 +33,18 @@\n import org.eclipse.jdt.internal.core.manipulation.MembersOrderPreferenceCacheCommon;\n import org.eclipse.jdt.ls.core.internal.IConstants;\n import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n-import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n import org.eclipse.jdt.ls.core.internal.ResourceUtils;\n import org.eclipse.jdt.ls.core.internal.RuntimeEnvironment;\n import org.eclipse.jdt.ls.core.internal.contentassist.TypeFilter;\n-import org.eclipse.jdt.ls.core.internal.managers.ProjectsManager;\n import org.eclipse.jdt.ls.internal.gradle.checksums.WrapperValidator;\n import org.eclipse.lsp4j.MessageType;\n \n+import static org.eclipse.jdt.ls.core.internal.handlers.MapFlattener.getBoolean;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzOTU3NQ=="}, "originalCommit": {"oid": "4b7cac193a73f6de9679d98d3312a7213f2a3d20"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0NTYxNw==", "bodyText": "Fixed", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r435645617", "createdAt": "2020-06-05T01:43:06Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "diffHunk": "@@ -40,14 +33,18 @@\n import org.eclipse.jdt.internal.core.manipulation.MembersOrderPreferenceCacheCommon;\n import org.eclipse.jdt.ls.core.internal.IConstants;\n import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n-import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n import org.eclipse.jdt.ls.core.internal.ResourceUtils;\n import org.eclipse.jdt.ls.core.internal.RuntimeEnvironment;\n import org.eclipse.jdt.ls.core.internal.contentassist.TypeFilter;\n-import org.eclipse.jdt.ls.core.internal.managers.ProjectsManager;\n import org.eclipse.jdt.ls.internal.gradle.checksums.WrapperValidator;\n import org.eclipse.lsp4j.MessageType;\n \n+import static org.eclipse.jdt.ls.core.internal.handlers.MapFlattener.getBoolean;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzOTU3NQ=="}, "originalCommit": {"oid": "4b7cac193a73f6de9679d98d3312a7213f2a3d20"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzQ5NjY5OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMDoyNjoxNVrOGfclnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMDo0NjozNlrOGfc4bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNzQyMw==", "bodyText": "again, we should ensure StandardProjectsManager is build-tool agnostic. We shouldn't reference anything specific to Gradle (or any other tool) in this class.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r435627423", "createdAt": "2020-06-05T00:26:15Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "diffHunk": "@@ -100,6 +101,8 @@ protected IStatus run(IProgressMonitor monitor) {\n \n \tprivate IPreferencesChangeListener preferenceChangeListener = null;\n \n+\tprivate IPreferencesChangeListener gradlePreferenceChangeListener = new GradlePreferenceChangeListener();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca74853bb93f24bc1fa797ce123909135c60cac"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzMjIzOA==", "bodyText": "Fixed", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r435632238", "createdAt": "2020-06-05T00:46:36Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "diffHunk": "@@ -100,6 +101,8 @@ protected IStatus run(IProgressMonitor monitor) {\n \n \tprivate IPreferencesChangeListener preferenceChangeListener = null;\n \n+\tprivate IPreferencesChangeListener gradlePreferenceChangeListener = new GradlePreferenceChangeListener();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNzQyMw=="}, "originalCommit": {"oid": "2ca74853bb93f24bc1fa797ce123909135c60cac"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzYzOTIxOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMTo1ODo0MlrOGfd8PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMzoyNzozOFrOGffO-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0OTU5Ng==", "bodyText": "same here, should put static imports in the original place.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r435649596", "createdAt": "2020-06-05T01:58:42Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "diffHunk": "@@ -71,6 +69,9 @@\n import org.eclipse.lsp4j.TextDocumentIdentifier;\n import org.eclipse.lsp4j.WatchKind;\n \n+import static org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin.logInfo;\n+import static org.eclipse.jdt.ls.core.internal.ResourceUtils.isContainedIn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acbb43132966a184f8e141ef38e1d518f0c579e6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3MDc3Nw==", "bodyText": "Done.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r435670777", "createdAt": "2020-06-05T03:27:38Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "diffHunk": "@@ -71,6 +69,9 @@\n import org.eclipse.lsp4j.TextDocumentIdentifier;\n import org.eclipse.lsp4j.WatchKind;\n \n+import static org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin.logInfo;\n+import static org.eclipse.jdt.ls.core.internal.ResourceUtils.isContainedIn;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0OTU5Ng=="}, "originalCommit": {"oid": "acbb43132966a184f8e141ef38e1d518f0c579e6"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzY1MDk1OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjowNTo1OVrOGfeDSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMzoyNzo1M1rOGffPMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY1MTQwMw==", "bodyText": "same here, should not change static imports order.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r435651403", "createdAt": "2020-06-05T02:05:59Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporterTest.java", "diffHunk": "@@ -65,6 +64,9 @@\n import com.google.common.collect.ImmutableList;\n import com.google.common.io.Files;\n \n+import static org.eclipse.jdt.ls.core.internal.ProjectUtils.getJavaSourceLevel;\n+import static org.eclipse.jdt.ls.core.internal.WorkspaceHelper.getProject;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acbb43132966a184f8e141ef38e1d518f0c579e6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3MDgzNA==", "bodyText": "Done.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r435670834", "createdAt": "2020-06-05T03:27:53Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporterTest.java", "diffHunk": "@@ -65,6 +64,9 @@\n import com.google.common.collect.ImmutableList;\n import com.google.common.io.Files;\n \n+import static org.eclipse.jdt.ls.core.internal.ProjectUtils.getJavaSourceLevel;\n+import static org.eclipse.jdt.ls.core.internal.WorkspaceHelper.getProject;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY1MTQwMw=="}, "originalCommit": {"oid": "acbb43132966a184f8e141ef38e1d518f0c579e6"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDA2MDEwOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNjozMToxM1rOGfh9Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNTowMjoyOVrOGfyMJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcxNTQwMg==", "bodyText": "Here you'd better refine the compare logic. And handle the empty case better.\nFor example, if old Sha256Allowed list is null and new sha256Allowed is an empty list, then you should take it as equal, and not invoke update project logic.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r435715402", "createdAt": "2020-06-05T06:31:13Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016-2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.util.Objects;\n+\n+import org.eclipse.buildship.core.GradleDistribution;\n+import org.eclipse.buildship.core.WrapperGradleDistribution;\n+import org.eclipse.buildship.core.internal.CorePlugin;\n+import org.eclipse.buildship.core.internal.configuration.ProjectConfiguration;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n+import org.eclipse.jdt.ls.core.internal.preferences.IPreferencesChangeListener;\n+import org.eclipse.jdt.ls.core.internal.preferences.Preferences;\n+\n+/**\n+ * @author snjeza\n+ *\n+ */\n+public class GradlePreferenceChangeListener implements IPreferencesChangeListener {\n+\t@Override\n+\tpublic void preferencesChange(Preferences oldPreferences, Preferences newPreferences) {\n+\t\tProjectsManager projectsManager = JavaLanguageServerPlugin.getProjectsManager();\n+\t\tif (projectsManager != null) {\n+\t\t\tif ((!Objects.equals(oldPreferences.getSha256Allowed(), newPreferences.getSha256Allowed()) || !Objects.equals(oldPreferences.getSha256Disallowed(), newPreferences.getSha256Disallowed()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e913bd5a6a3f070b5acefe70e974539a81b5a0e7"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk4MTM0OA==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r435981348", "createdAt": "2020-06-05T15:02:29Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016-2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.util.Objects;\n+\n+import org.eclipse.buildship.core.GradleDistribution;\n+import org.eclipse.buildship.core.WrapperGradleDistribution;\n+import org.eclipse.buildship.core.internal.CorePlugin;\n+import org.eclipse.buildship.core.internal.configuration.ProjectConfiguration;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n+import org.eclipse.jdt.ls.core.internal.preferences.IPreferencesChangeListener;\n+import org.eclipse.jdt.ls.core.internal.preferences.Preferences;\n+\n+/**\n+ * @author snjeza\n+ *\n+ */\n+public class GradlePreferenceChangeListener implements IPreferencesChangeListener {\n+\t@Override\n+\tpublic void preferencesChange(Preferences oldPreferences, Preferences newPreferences) {\n+\t\tProjectsManager projectsManager = JavaLanguageServerPlugin.getProjectsManager();\n+\t\tif (projectsManager != null) {\n+\t\t\tif ((!Objects.equals(oldPreferences.getSha256Allowed(), newPreferences.getSha256Allowed()) || !Objects.equals(oldPreferences.getSha256Disallowed(), newPreferences.getSha256Disallowed()))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcxNTQwMg=="}, "originalCommit": {"oid": "e913bd5a6a3f070b5acefe70e974539a81b5a0e7"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDIyNzI0OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNzozNjowMVrOGfjkQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNTowMjo0NVrOGfyMxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc0MTc2MA==", "bodyText": "I'm curious why need update project when user changes checksums user setting? Since changing checksums didn't cause the gradle model outdated.\nI installed the latest 0.62.3 fix, and have a play on spring-boot project, when i changed checksums, it will trigger lots of jobs. Is there any way to optimize it?", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r435741760", "createdAt": "2020-06-05T07:36:01Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016-2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.util.Objects;\n+\n+import org.eclipse.buildship.core.GradleDistribution;\n+import org.eclipse.buildship.core.WrapperGradleDistribution;\n+import org.eclipse.buildship.core.internal.CorePlugin;\n+import org.eclipse.buildship.core.internal.configuration.ProjectConfiguration;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n+import org.eclipse.jdt.ls.core.internal.preferences.IPreferencesChangeListener;\n+import org.eclipse.jdt.ls.core.internal.preferences.Preferences;\n+\n+/**\n+ * @author snjeza\n+ *\n+ */\n+public class GradlePreferenceChangeListener implements IPreferencesChangeListener {\n+\t@Override\n+\tpublic void preferencesChange(Preferences oldPreferences, Preferences newPreferences) {\n+\t\tProjectsManager projectsManager = JavaLanguageServerPlugin.getProjectsManager();\n+\t\tif (projectsManager != null) {\n+\t\t\tif ((!Objects.equals(oldPreferences.getSha256Allowed(), newPreferences.getSha256Allowed()) || !Objects.equals(oldPreferences.getSha256Disallowed(), newPreferences.getSha256Disallowed()))) {\n+\t\t\t\tfor (IProject project : ProjectUtils.getGradleProjects()) {\n+\t\t\t\t\tProjectConfiguration configuration = CorePlugin.configurationManager().loadProjectConfiguration(project);\n+\t\t\t\t\tGradleDistribution distribution = configuration.getBuildConfiguration().getGradleDistribution();\n+\t\t\t\t\tif (distribution instanceof WrapperGradleDistribution) {\n+\t\t\t\t\t\tprojectsManager.updateProject(project, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e913bd5a6a3f070b5acefe70e974539a81b5a0e7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk4MTUwOQ==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r435981509", "createdAt": "2020-06-05T15:02:45Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016-2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.util.Objects;\n+\n+import org.eclipse.buildship.core.GradleDistribution;\n+import org.eclipse.buildship.core.WrapperGradleDistribution;\n+import org.eclipse.buildship.core.internal.CorePlugin;\n+import org.eclipse.buildship.core.internal.configuration.ProjectConfiguration;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n+import org.eclipse.jdt.ls.core.internal.preferences.IPreferencesChangeListener;\n+import org.eclipse.jdt.ls.core.internal.preferences.Preferences;\n+\n+/**\n+ * @author snjeza\n+ *\n+ */\n+public class GradlePreferenceChangeListener implements IPreferencesChangeListener {\n+\t@Override\n+\tpublic void preferencesChange(Preferences oldPreferences, Preferences newPreferences) {\n+\t\tProjectsManager projectsManager = JavaLanguageServerPlugin.getProjectsManager();\n+\t\tif (projectsManager != null) {\n+\t\t\tif ((!Objects.equals(oldPreferences.getSha256Allowed(), newPreferences.getSha256Allowed()) || !Objects.equals(oldPreferences.getSha256Disallowed(), newPreferences.getSha256Disallowed()))) {\n+\t\t\t\tfor (IProject project : ProjectUtils.getGradleProjects()) {\n+\t\t\t\t\tProjectConfiguration configuration = CorePlugin.configurationManager().loadProjectConfiguration(project);\n+\t\t\t\t\tGradleDistribution distribution = configuration.getBuildConfiguration().getGradleDistribution();\n+\t\t\t\t\tif (distribution instanceof WrapperGradleDistribution) {\n+\t\t\t\t\t\tprojectsManager.updateProject(project, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc0MTc2MA=="}, "originalCommit": {"oid": "e913bd5a6a3f070b5acefe70e974539a81b5a0e7"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTc3MTE0OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/IBuildSupport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNToxNjo1NVrOGfyuCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNTo0NzozMlrOGfz30w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MDAyNA==", "bodyText": "registerPreferencesChangeListener", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r435990024", "createdAt": "2020-06-05T15:16:55Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/IBuildSupport.java", "diffHunk": "@@ -109,4 +110,7 @@ default ILaunchConfiguration getLaunchConfiguration(IJavaProject javaProject, St\n \t\treturn new JavaApplicationLaunchConfiguration(javaProject.getProject(), scope, null);\n \t}\n \n+\tdefault void addPreferencesChangeListener(PreferenceManager preferenceManager) throws CoreException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72983f1a9d5a01747dfdd6ca1797a5229c1c873a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwODkxNQ==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r436008915", "createdAt": "2020-06-05T15:47:32Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/IBuildSupport.java", "diffHunk": "@@ -109,4 +110,7 @@ default ILaunchConfiguration getLaunchConfiguration(IJavaProject javaProject, St\n \t\treturn new JavaApplicationLaunchConfiguration(javaProject.getProject(), scope, null);\n \t}\n \n+\tdefault void addPreferencesChangeListener(PreferenceManager preferenceManager) throws CoreException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MDAyNA=="}, "originalCommit": {"oid": "72983f1a9d5a01747dfdd6ca1797a5229c1c873a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTc3Mzk3OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNToxNzozOVrOGfyvvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNTo0NzoyMlrOGfz3dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MDQ2MA==", "bodyText": "you don't need a preferencesManager reference, you already have newPreferences", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r435990460", "createdAt": "2020-06-05T15:17:39Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016-2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.eclipse.buildship.core.GradleDistribution;\n+import org.eclipse.buildship.core.WrapperGradleDistribution;\n+import org.eclipse.buildship.core.internal.CorePlugin;\n+import org.eclipse.buildship.core.internal.configuration.ProjectConfiguration;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n+import org.eclipse.jdt.ls.core.internal.preferences.IPreferencesChangeListener;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+import org.eclipse.jdt.ls.core.internal.preferences.Preferences;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.ValidationResult;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.WrapperValidator;\n+\n+/**\n+ * @author snjeza\n+ *\n+ */\n+public class GradlePreferenceChangeListener implements IPreferencesChangeListener {\n+\t@Override\n+\tpublic void preferencesChange(Preferences oldPreferences, Preferences newPreferences) {\n+\t\tProjectsManager projectsManager = JavaLanguageServerPlugin.getProjectsManager();\n+\t\tPreferenceManager preferencesManager = JavaLanguageServerPlugin.getPreferencesManager();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72983f1a9d5a01747dfdd6ca1797a5229c1c873a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwODgyMQ==", "bodyText": "Fixed", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r436008821", "createdAt": "2020-06-05T15:47:22Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016-2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.eclipse.buildship.core.GradleDistribution;\n+import org.eclipse.buildship.core.WrapperGradleDistribution;\n+import org.eclipse.buildship.core.internal.CorePlugin;\n+import org.eclipse.buildship.core.internal.configuration.ProjectConfiguration;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n+import org.eclipse.jdt.ls.core.internal.preferences.IPreferencesChangeListener;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+import org.eclipse.jdt.ls.core.internal.preferences.Preferences;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.ValidationResult;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.WrapperValidator;\n+\n+/**\n+ * @author snjeza\n+ *\n+ */\n+public class GradlePreferenceChangeListener implements IPreferencesChangeListener {\n+\t@Override\n+\tpublic void preferencesChange(Preferences oldPreferences, Preferences newPreferences) {\n+\t\tProjectsManager projectsManager = JavaLanguageServerPlugin.getProjectsManager();\n+\t\tPreferenceManager preferencesManager = JavaLanguageServerPlugin.getPreferencesManager();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MDQ2MA=="}, "originalCommit": {"oid": "72983f1a9d5a01747dfdd6ca1797a5229c1c873a"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTc4NTY0OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNToyMDoyOVrOGfy2-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNTo0NTo0MlrOGfzz4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MjMxMw==", "bodyText": "why updating a project that doesn't use the wrapper when you're checking wrapper checksum changes?", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r435992313", "createdAt": "2020-06-05T15:20:29Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016-2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.eclipse.buildship.core.GradleDistribution;\n+import org.eclipse.buildship.core.WrapperGradleDistribution;\n+import org.eclipse.buildship.core.internal.CorePlugin;\n+import org.eclipse.buildship.core.internal.configuration.ProjectConfiguration;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n+import org.eclipse.jdt.ls.core.internal.preferences.IPreferencesChangeListener;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+import org.eclipse.jdt.ls.core.internal.preferences.Preferences;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.ValidationResult;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.WrapperValidator;\n+\n+/**\n+ * @author snjeza\n+ *\n+ */\n+public class GradlePreferenceChangeListener implements IPreferencesChangeListener {\n+\t@Override\n+\tpublic void preferencesChange(Preferences oldPreferences, Preferences newPreferences) {\n+\t\tProjectsManager projectsManager = JavaLanguageServerPlugin.getProjectsManager();\n+\t\tPreferenceManager preferencesManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\tif (projectsManager != null && preferencesManager != null) {\n+\t\t\tList<String> oldSha256Allowed = oldPreferences.getSha256Allowed() == null ? Collections.emptyList() : oldPreferences.getSha256Allowed();\n+\t\t\tList<String> newSha256Allowed = newPreferences.getSha256Allowed() == null ? Collections.emptyList() : newPreferences.getSha256Allowed();\n+\t\t\tList<String> oldSha256Disallowed = oldPreferences.getSha256Disallowed() == null ? Collections.emptyList() : oldPreferences.getSha256Disallowed();\n+\t\t\tList<String> newSha256Disallowed = newPreferences.getSha256Disallowed() == null ? Collections.emptyList() : newPreferences.getSha256Disallowed();\n+\t\t\tif ((!Objects.equals(oldSha256Allowed, newSha256Allowed) || !Objects.equals(oldSha256Disallowed, newSha256Disallowed))) {\n+\t\t\t\tfor (IProject project : ProjectUtils.getGradleProjects()) {\n+\t\t\t\t\tString projectDir = project.getLocation().toFile().getAbsolutePath();\n+\t\t\t\t\tPath projectPath = Paths.get(projectDir);\n+\t\t\t\t\tif (preferencesManager != null && preferencesManager.getPreferences().isGradleWrapperEnabled() && Files.exists(projectPath.resolve(\"gradlew\"))) {\n+\t\t\t\t\t\tProjectConfiguration configuration = CorePlugin.configurationManager().loadProjectConfiguration(project);\n+\t\t\t\t\t\tGradleDistribution distribution = configuration.getBuildConfiguration().getGradleDistribution();\n+\t\t\t\t\t\tif (!(distribution instanceof WrapperGradleDistribution)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72983f1a9d5a01747dfdd6ca1797a5229c1c873a"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwNzkwNQ==", "bodyText": "It is required if you update the wrapper's checksum from false to true.\nYou can try the gradle-4.0 project:\n\nadd\n\n\"java.imports.gradle.wrapper.checksums\": [\n        {\n            \"sha256\": \"41c8aa7a337a44af18d8cda0d632ebba469aef34f3041827624ef5c1a4e4419d\",\n            \"allowed\": false\n        }\n    ],\n\n\ncheck .settings/org.eclipse.buildship.core.prefs. You will see that we use\n\nconnection.gradle.distribution=GRADLE_DISTRIBUTION(VERSION(6.3))\n\n\nchange the property:\n\n\"java.imports.gradle.wrapper.checksums\": [\n        {\n            \"sha256\": \"41c8aa7a337a44af18d8cda0d632ebba469aef34f3041827624ef5c1a4e4419d\",\n            \"allowed\": true\n        }\n    ],\n\n\ncheck .settings/org.eclipse.buildship.core.prefs.\n\nconnection.gradle.distribution=GRADLE_DISTRIBUTION(WRAPPER)", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r436007905", "createdAt": "2020-06-05T15:45:42Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016-2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.eclipse.buildship.core.GradleDistribution;\n+import org.eclipse.buildship.core.WrapperGradleDistribution;\n+import org.eclipse.buildship.core.internal.CorePlugin;\n+import org.eclipse.buildship.core.internal.configuration.ProjectConfiguration;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n+import org.eclipse.jdt.ls.core.internal.preferences.IPreferencesChangeListener;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+import org.eclipse.jdt.ls.core.internal.preferences.Preferences;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.ValidationResult;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.WrapperValidator;\n+\n+/**\n+ * @author snjeza\n+ *\n+ */\n+public class GradlePreferenceChangeListener implements IPreferencesChangeListener {\n+\t@Override\n+\tpublic void preferencesChange(Preferences oldPreferences, Preferences newPreferences) {\n+\t\tProjectsManager projectsManager = JavaLanguageServerPlugin.getProjectsManager();\n+\t\tPreferenceManager preferencesManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\tif (projectsManager != null && preferencesManager != null) {\n+\t\t\tList<String> oldSha256Allowed = oldPreferences.getSha256Allowed() == null ? Collections.emptyList() : oldPreferences.getSha256Allowed();\n+\t\t\tList<String> newSha256Allowed = newPreferences.getSha256Allowed() == null ? Collections.emptyList() : newPreferences.getSha256Allowed();\n+\t\t\tList<String> oldSha256Disallowed = oldPreferences.getSha256Disallowed() == null ? Collections.emptyList() : oldPreferences.getSha256Disallowed();\n+\t\t\tList<String> newSha256Disallowed = newPreferences.getSha256Disallowed() == null ? Collections.emptyList() : newPreferences.getSha256Disallowed();\n+\t\t\tif ((!Objects.equals(oldSha256Allowed, newSha256Allowed) || !Objects.equals(oldSha256Disallowed, newSha256Disallowed))) {\n+\t\t\t\tfor (IProject project : ProjectUtils.getGradleProjects()) {\n+\t\t\t\t\tString projectDir = project.getLocation().toFile().getAbsolutePath();\n+\t\t\t\t\tPath projectPath = Paths.get(projectDir);\n+\t\t\t\t\tif (preferencesManager != null && preferencesManager.getPreferences().isGradleWrapperEnabled() && Files.exists(projectPath.resolve(\"gradlew\"))) {\n+\t\t\t\t\t\tProjectConfiguration configuration = CorePlugin.configurationManager().loadProjectConfiguration(project);\n+\t\t\t\t\t\tGradleDistribution distribution = configuration.getBuildConfiguration().getGradleDistribution();\n+\t\t\t\t\t\tif (!(distribution instanceof WrapperGradleDistribution)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MjMxMw=="}, "originalCommit": {"oid": "72983f1a9d5a01747dfdd6ca1797a5229c1c873a"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTg2NDMzOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNTo0MToxNFrOGfzqAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNTo1Mzo0M1rOGf0Fpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwNTM3OQ==", "bodyText": "would be simpler if Preferences always returned non-null collections", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r436005379", "createdAt": "2020-06-05T15:41:14Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016-2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.eclipse.buildship.core.GradleDistribution;\n+import org.eclipse.buildship.core.WrapperGradleDistribution;\n+import org.eclipse.buildship.core.internal.CorePlugin;\n+import org.eclipse.buildship.core.internal.configuration.ProjectConfiguration;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n+import org.eclipse.jdt.ls.core.internal.preferences.IPreferencesChangeListener;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+import org.eclipse.jdt.ls.core.internal.preferences.Preferences;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.ValidationResult;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.WrapperValidator;\n+\n+/**\n+ * @author snjeza\n+ *\n+ */\n+public class GradlePreferenceChangeListener implements IPreferencesChangeListener {\n+\t@Override\n+\tpublic void preferencesChange(Preferences oldPreferences, Preferences newPreferences) {\n+\t\tProjectsManager projectsManager = JavaLanguageServerPlugin.getProjectsManager();\n+\t\tPreferenceManager preferencesManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\tif (projectsManager != null && preferencesManager != null) {\n+\t\t\tList<String> oldSha256Allowed = oldPreferences.getSha256Allowed() == null ? Collections.emptyList() : oldPreferences.getSha256Allowed();\n+\t\t\tList<String> newSha256Allowed = newPreferences.getSha256Allowed() == null ? Collections.emptyList() : newPreferences.getSha256Allowed();\n+\t\t\tList<String> oldSha256Disallowed = oldPreferences.getSha256Disallowed() == null ? Collections.emptyList() : oldPreferences.getSha256Disallowed();\n+\t\t\tList<String> newSha256Disallowed = newPreferences.getSha256Disallowed() == null ? Collections.emptyList() : newPreferences.getSha256Disallowed();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72983f1a9d5a01747dfdd6ca1797a5229c1c873a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxMjQ1NQ==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r436012455", "createdAt": "2020-06-05T15:53:43Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016-2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.eclipse.buildship.core.GradleDistribution;\n+import org.eclipse.buildship.core.WrapperGradleDistribution;\n+import org.eclipse.buildship.core.internal.CorePlugin;\n+import org.eclipse.buildship.core.internal.configuration.ProjectConfiguration;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n+import org.eclipse.jdt.ls.core.internal.preferences.IPreferencesChangeListener;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+import org.eclipse.jdt.ls.core.internal.preferences.Preferences;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.ValidationResult;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.WrapperValidator;\n+\n+/**\n+ * @author snjeza\n+ *\n+ */\n+public class GradlePreferenceChangeListener implements IPreferencesChangeListener {\n+\t@Override\n+\tpublic void preferencesChange(Preferences oldPreferences, Preferences newPreferences) {\n+\t\tProjectsManager projectsManager = JavaLanguageServerPlugin.getProjectsManager();\n+\t\tPreferenceManager preferencesManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\tif (projectsManager != null && preferencesManager != null) {\n+\t\t\tList<String> oldSha256Allowed = oldPreferences.getSha256Allowed() == null ? Collections.emptyList() : oldPreferences.getSha256Allowed();\n+\t\t\tList<String> newSha256Allowed = newPreferences.getSha256Allowed() == null ? Collections.emptyList() : newPreferences.getSha256Allowed();\n+\t\t\tList<String> oldSha256Disallowed = oldPreferences.getSha256Disallowed() == null ? Collections.emptyList() : oldPreferences.getSha256Disallowed();\n+\t\t\tList<String> newSha256Disallowed = newPreferences.getSha256Disallowed() == null ? Collections.emptyList() : newPreferences.getSha256Disallowed();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwNTM3OQ=="}, "originalCommit": {"oid": "72983f1a9d5a01747dfdd6ca1797a5229c1c873a"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTg2NTU1OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNTo0MTozNFrOGfzqxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNTo1MzoyNVrOGf0FAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwNTU3Mg==", "bodyText": "extract to hasAllowedChecksumsChanged(oldPreferences, newPreferences)", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r436005572", "createdAt": "2020-06-05T15:41:34Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016-2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.eclipse.buildship.core.GradleDistribution;\n+import org.eclipse.buildship.core.WrapperGradleDistribution;\n+import org.eclipse.buildship.core.internal.CorePlugin;\n+import org.eclipse.buildship.core.internal.configuration.ProjectConfiguration;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n+import org.eclipse.jdt.ls.core.internal.preferences.IPreferencesChangeListener;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+import org.eclipse.jdt.ls.core.internal.preferences.Preferences;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.ValidationResult;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.WrapperValidator;\n+\n+/**\n+ * @author snjeza\n+ *\n+ */\n+public class GradlePreferenceChangeListener implements IPreferencesChangeListener {\n+\t@Override\n+\tpublic void preferencesChange(Preferences oldPreferences, Preferences newPreferences) {\n+\t\tProjectsManager projectsManager = JavaLanguageServerPlugin.getProjectsManager();\n+\t\tPreferenceManager preferencesManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\tif (projectsManager != null && preferencesManager != null) {\n+\t\t\tList<String> oldSha256Allowed = oldPreferences.getSha256Allowed() == null ? Collections.emptyList() : oldPreferences.getSha256Allowed();\n+\t\t\tList<String> newSha256Allowed = newPreferences.getSha256Allowed() == null ? Collections.emptyList() : newPreferences.getSha256Allowed();\n+\t\t\tList<String> oldSha256Disallowed = oldPreferences.getSha256Disallowed() == null ? Collections.emptyList() : oldPreferences.getSha256Disallowed();\n+\t\t\tList<String> newSha256Disallowed = newPreferences.getSha256Disallowed() == null ? Collections.emptyList() : newPreferences.getSha256Disallowed();\n+\t\t\tif ((!Objects.equals(oldSha256Allowed, newSha256Allowed) || !Objects.equals(oldSha256Disallowed, newSha256Disallowed))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72983f1a9d5a01747dfdd6ca1797a5229c1c873a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxMjI4OA==", "bodyText": "Fixed", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r436012288", "createdAt": "2020-06-05T15:53:25Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016-2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.eclipse.buildship.core.GradleDistribution;\n+import org.eclipse.buildship.core.WrapperGradleDistribution;\n+import org.eclipse.buildship.core.internal.CorePlugin;\n+import org.eclipse.buildship.core.internal.configuration.ProjectConfiguration;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n+import org.eclipse.jdt.ls.core.internal.preferences.IPreferencesChangeListener;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+import org.eclipse.jdt.ls.core.internal.preferences.Preferences;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.ValidationResult;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.WrapperValidator;\n+\n+/**\n+ * @author snjeza\n+ *\n+ */\n+public class GradlePreferenceChangeListener implements IPreferencesChangeListener {\n+\t@Override\n+\tpublic void preferencesChange(Preferences oldPreferences, Preferences newPreferences) {\n+\t\tProjectsManager projectsManager = JavaLanguageServerPlugin.getProjectsManager();\n+\t\tPreferenceManager preferencesManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\tif (projectsManager != null && preferencesManager != null) {\n+\t\t\tList<String> oldSha256Allowed = oldPreferences.getSha256Allowed() == null ? Collections.emptyList() : oldPreferences.getSha256Allowed();\n+\t\t\tList<String> newSha256Allowed = newPreferences.getSha256Allowed() == null ? Collections.emptyList() : newPreferences.getSha256Allowed();\n+\t\t\tList<String> oldSha256Disallowed = oldPreferences.getSha256Disallowed() == null ? Collections.emptyList() : oldPreferences.getSha256Disallowed();\n+\t\t\tList<String> newSha256Disallowed = newPreferences.getSha256Disallowed() == null ? Collections.emptyList() : newPreferences.getSha256Disallowed();\n+\t\t\tif ((!Objects.equals(oldSha256Allowed, newSha256Allowed) || !Objects.equals(oldSha256Disallowed, newSha256Disallowed))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwNTU3Mg=="}, "originalCommit": {"oid": "72983f1a9d5a01747dfdd6ca1797a5229c1c873a"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTkzMDcyOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjowMDoxNFrOGf0Udg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODowMjo0N1rOGf4LKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxNjI0Ng==", "bodyText": "this needs to move to the Gradle preference listener now", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r436016246", "createdAt": "2020-06-05T16:00:14Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "diffHunk": "@@ -942,20 +939,12 @@ public Preferences setJavaCompletionFavoriteMembers(List<String> javaCompletionF\n \t}\n \n \tpublic Preferences putSha256(List<String> sha256Allowed, List<String> sha256Disallowed) {\n-\t\tList<String> oldAllowed = this.sha256Allowed;\n-\t\tList<String> oldDisallowed = this.sha256Disallowed;\n \t\tWrapperValidator.clear();\n \t\tthis.sha256Allowed = sha256Allowed;\n \t\tif (sha256Disallowed != null) {\n \t\t\tWrapperValidator.disallow(sha256Disallowed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93887958187abe9b4a6c8e5b0ea01c3cb3cea506"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3OTQwMQ==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r436079401", "createdAt": "2020-06-05T18:02:47Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "diffHunk": "@@ -942,20 +939,12 @@ public Preferences setJavaCompletionFavoriteMembers(List<String> javaCompletionF\n \t}\n \n \tpublic Preferences putSha256(List<String> sha256Allowed, List<String> sha256Disallowed) {\n-\t\tList<String> oldAllowed = this.sha256Allowed;\n-\t\tList<String> oldDisallowed = this.sha256Disallowed;\n \t\tWrapperValidator.clear();\n \t\tthis.sha256Allowed = sha256Allowed;\n \t\tif (sha256Disallowed != null) {\n \t\t\tWrapperValidator.disallow(sha256Disallowed);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxNjI0Ng=="}, "originalCommit": {"oid": "93887958187abe9b4a6c8e5b0ea01c3cb3cea506"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTkzMzgzOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/IBuildSupport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjowMToxMVrOGf0WeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODowMzowOVrOGf4L9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxNjc2MQ==", "bodyText": "we'll most likely also need to unregister the listener", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r436016761", "createdAt": "2020-06-05T16:01:11Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/IBuildSupport.java", "diffHunk": "@@ -109,4 +110,7 @@ default ILaunchConfiguration getLaunchConfiguration(IJavaProject javaProject, St\n \t\treturn new JavaApplicationLaunchConfiguration(javaProject.getProject(), scope, null);\n \t}\n \n+\tdefault void registerPreferencesChangeListener(PreferenceManager preferenceManager) throws CoreException {\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93887958187abe9b4a6c8e5b0ea01c3cb3cea506"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3OTYwNA==", "bodyText": "Added.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r436079604", "createdAt": "2020-06-05T18:03:09Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/IBuildSupport.java", "diffHunk": "@@ -109,4 +110,7 @@ default ILaunchConfiguration getLaunchConfiguration(IJavaProject javaProject, St\n \t\treturn new JavaApplicationLaunchConfiguration(javaProject.getProject(), scope, null);\n \t}\n \n+\tdefault void registerPreferencesChangeListener(PreferenceManager preferenceManager) throws CoreException {\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxNjc2MQ=="}, "originalCommit": {"oid": "93887958187abe9b4a6c8e5b0ea01c3cb3cea506"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTk0MzQ1OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/IBuildSupport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjowNDowMFrOGf0chw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODowMzoyNVrOGf4MdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxODMxMQ==", "bodyText": "please add some Javadoc", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r436018311", "createdAt": "2020-06-05T16:04:00Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/IBuildSupport.java", "diffHunk": "@@ -109,4 +110,7 @@ default ILaunchConfiguration getLaunchConfiguration(IJavaProject javaProject, St\n \t\treturn new JavaApplicationLaunchConfiguration(javaProject.getProject(), scope, null);\n \t}\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93887958187abe9b4a6c8e5b0ea01c3cb3cea506"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3OTczMg==", "bodyText": "Added.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r436079732", "createdAt": "2020-06-05T18:03:25Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/IBuildSupport.java", "diffHunk": "@@ -109,4 +110,7 @@ default ILaunchConfiguration getLaunchConfiguration(IJavaProject javaProject, St\n \t\treturn new JavaApplicationLaunchConfiguration(javaProject.getProject(), scope, null);\n \t}\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxODMxMQ=="}, "originalCommit": {"oid": "93887958187abe9b4a6c8e5b0ea01c3cb3cea506"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODc0NDQ0OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMTozODo1MlrOGgNOgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMTo0NTozNFrOGgNSCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyNDMyMA==", "bodyText": "Copyright (c) 2020", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r436424320", "createdAt": "2020-06-08T01:38:52Z", "author": {"login": "testforstephen"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016-2020 Red Hat Inc. and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee8a991d590dcf0e2c4a72bc76f77b33ec693452"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyNTIyNw==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r436425227", "createdAt": "2020-06-08T01:45:34Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016-2020 Red Hat Inc. and others.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyNDMyMA=="}, "originalCommit": {"oid": "ee8a991d590dcf0e2c4a72bc76f77b33ec693452"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDA3MTQ5OnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMTo0MDozOFrOGgZ8XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjowNTo0MVrOGglfDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYzMjY2OA==", "bodyText": "no need, you already have access to newPreferences", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r436632668", "createdAt": "2020-06-08T11:40:38Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.eclipse.buildship.core.GradleDistribution;\n+import org.eclipse.buildship.core.WrapperGradleDistribution;\n+import org.eclipse.buildship.core.internal.CorePlugin;\n+import org.eclipse.buildship.core.internal.configuration.ProjectConfiguration;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n+import org.eclipse.jdt.ls.core.internal.preferences.IPreferencesChangeListener;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+import org.eclipse.jdt.ls.core.internal.preferences.Preferences;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.ValidationResult;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.WrapperValidator;\n+\n+/**\n+ * @author snjeza\n+ *\n+ */\n+public class GradlePreferenceChangeListener implements IPreferencesChangeListener {\n+\t@Override\n+\tpublic void preferencesChange(Preferences oldPreferences, Preferences newPreferences) {\n+\t\tProjectsManager projectsManager = JavaLanguageServerPlugin.getProjectsManager();\n+\t\tif (projectsManager != null) {\n+\t\t\tif (hasAllowedChecksumsChanged(oldPreferences, newPreferences)) {\n+\t\t\t\tfor (IProject project : ProjectUtils.getGradleProjects()) {\n+\t\t\t\t\tupdateProject(projectsManager, project);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void updateProject(ProjectsManager projectsManager, IProject project) {\n+\t\tString projectDir = project.getLocation().toFile().getAbsolutePath();\n+\t\tPath projectPath = Paths.get(projectDir);\n+\t\tPreferenceManager preferencesManager = getPreferenceManager();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9453c5410594b9977436940ca8d47847e6529a7a"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgyMTc3Mw==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r436821773", "createdAt": "2020-06-08T16:05:41Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.eclipse.buildship.core.GradleDistribution;\n+import org.eclipse.buildship.core.WrapperGradleDistribution;\n+import org.eclipse.buildship.core.internal.CorePlugin;\n+import org.eclipse.buildship.core.internal.configuration.ProjectConfiguration;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n+import org.eclipse.jdt.ls.core.internal.preferences.IPreferencesChangeListener;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+import org.eclipse.jdt.ls.core.internal.preferences.Preferences;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.ValidationResult;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.WrapperValidator;\n+\n+/**\n+ * @author snjeza\n+ *\n+ */\n+public class GradlePreferenceChangeListener implements IPreferencesChangeListener {\n+\t@Override\n+\tpublic void preferencesChange(Preferences oldPreferences, Preferences newPreferences) {\n+\t\tProjectsManager projectsManager = JavaLanguageServerPlugin.getProjectsManager();\n+\t\tif (projectsManager != null) {\n+\t\t\tif (hasAllowedChecksumsChanged(oldPreferences, newPreferences)) {\n+\t\t\t\tfor (IProject project : ProjectUtils.getGradleProjects()) {\n+\t\t\t\t\tupdateProject(projectsManager, project);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void updateProject(ProjectsManager projectsManager, IProject project) {\n+\t\tString projectDir = project.getLocation().toFile().getAbsolutePath();\n+\t\tPath projectPath = Paths.get(projectDir);\n+\t\tPreferenceManager preferencesManager = getPreferenceManager();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYzMjY2OA=="}, "originalCommit": {"oid": "9453c5410594b9977436940ca8d47847e6529a7a"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDA4NzAwOnYy", "diffSide": "RIGHT", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMTo0NTo1NFrOGgaFzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjowNjowN1rOGglgWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYzNTA4Ng==", "bodyText": "That seems wrong. You're updating the preferences in the preference listener!\nIn here only the WrapperValidator should be updated, from the informations available from the Preference object.\nThe GradleWrapperList should have been transformed into (dis)allowed checksums directly when building the Preference object.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r436635086", "createdAt": "2020-06-08T11:45:54Z", "author": {"login": "fbricon"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.eclipse.buildship.core.GradleDistribution;\n+import org.eclipse.buildship.core.WrapperGradleDistribution;\n+import org.eclipse.buildship.core.internal.CorePlugin;\n+import org.eclipse.buildship.core.internal.configuration.ProjectConfiguration;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n+import org.eclipse.jdt.ls.core.internal.preferences.IPreferencesChangeListener;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+import org.eclipse.jdt.ls.core.internal.preferences.Preferences;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.ValidationResult;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.WrapperValidator;\n+\n+/**\n+ * @author snjeza\n+ *\n+ */\n+public class GradlePreferenceChangeListener implements IPreferencesChangeListener {\n+\t@Override\n+\tpublic void preferencesChange(Preferences oldPreferences, Preferences newPreferences) {\n+\t\tProjectsManager projectsManager = JavaLanguageServerPlugin.getProjectsManager();\n+\t\tif (projectsManager != null) {\n+\t\t\tif (hasAllowedChecksumsChanged(oldPreferences, newPreferences)) {\n+\t\t\t\tfor (IProject project : ProjectUtils.getGradleProjects()) {\n+\t\t\t\t\tupdateProject(projectsManager, project);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void updateProject(ProjectsManager projectsManager, IProject project) {\n+\t\tString projectDir = project.getLocation().toFile().getAbsolutePath();\n+\t\tPath projectPath = Paths.get(projectDir);\n+\t\tPreferenceManager preferencesManager = getPreferenceManager();\n+\t\tif (preferencesManager != null && preferencesManager.getPreferences().isGradleWrapperEnabled() && Files.exists(projectPath.resolve(\"gradlew\"))) {\n+\t\t\tProjectConfiguration configuration = CorePlugin.configurationManager().loadProjectConfiguration(project);\n+\t\t\tGradleDistribution distribution = configuration.getBuildConfiguration().getGradleDistribution();\n+\t\t\tif (!(distribution instanceof WrapperGradleDistribution)) {\n+\t\t\t\tprojectsManager.updateProject(project, true);\n+\t\t\t} else {\n+\t\t\t\ttry {\n+\t\t\t\t\tValidationResult result = new WrapperValidator().checkWrapper(projectDir);\n+\t\t\t\t\tif (!result.isValid()) {\n+\t\t\t\t\t\tprojectsManager.updateProject(project, true);\n+\t\t\t\t\t}\n+\t\t\t\t} catch (CoreException e) {\n+\t\t\t\t\tJavaLanguageServerPlugin.logException(e.getMessage(), e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate PreferenceManager getPreferenceManager() {\n+\t\tPreferenceManager preferencesManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\treturn preferencesManager;\n+\t}\n+\n+\tprivate boolean hasAllowedChecksumsChanged(Preferences oldPreferences, Preferences newPreferences) {\n+\t\tif (!Objects.equals(oldPreferences.getGradleWrapperList(), newPreferences.getGradleWrapperList())) {\n+\t\t\tputSha256(newPreferences.getGradleWrapperList());\n+\t\t\treturn true;\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\tprivate void putSha256(List<?> gradleWrapperList) {\n+\t\tList<String> sha256Allowed = new ArrayList<>();\n+\t\tList<String> sha256Disallowed = new ArrayList<>();\n+\t\tfor (Object object : gradleWrapperList) {\n+\t\t\tif (object instanceof Map) {\n+\t\t\t\tMap<?, ?> map = (Map<?, ?>) object;\n+\t\t\t\tfinal ChecksumWrapper sha256 = this.new ChecksumWrapper();\n+\t\t\t\tsha256.allowed = true;\n+\t\t\t\tmap.forEach((k, v) -> {\n+\t\t\t\t\tif (k instanceof String) {\n+\t\t\t\t\t\tswitch ((String) k) {\n+\t\t\t\t\t\t\tcase \"sha256\":\n+\t\t\t\t\t\t\t\tif (v instanceof String) {\n+\t\t\t\t\t\t\t\t\tsha256.checksum = (String) v;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase \"allowed\":\n+\t\t\t\t\t\t\t\tif (v instanceof Boolean) {\n+\t\t\t\t\t\t\t\t\tsha256.allowed = (Boolean) v;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t\tif (sha256.checksum != null) {\n+\t\t\t\t\tif (sha256.allowed) {\n+\t\t\t\t\t\tsha256Allowed.add(sha256.checksum);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tsha256Disallowed.add(sha256.checksum);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tWrapperValidator.clear();\n+\t\tgetPreferenceManager().getPreferences().setSha256Allowed(sha256Allowed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9453c5410594b9977436940ca8d47847e6529a7a"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgyMjEwNw==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1467#discussion_r436822107", "createdAt": "2020-06-08T16:06:07Z", "author": {"login": "snjeza"}, "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradlePreferenceChangeListener.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.eclipse.buildship.core.GradleDistribution;\n+import org.eclipse.buildship.core.WrapperGradleDistribution;\n+import org.eclipse.buildship.core.internal.CorePlugin;\n+import org.eclipse.buildship.core.internal.configuration.ProjectConfiguration;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n+import org.eclipse.jdt.ls.core.internal.preferences.IPreferencesChangeListener;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+import org.eclipse.jdt.ls.core.internal.preferences.Preferences;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.ValidationResult;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.WrapperValidator;\n+\n+/**\n+ * @author snjeza\n+ *\n+ */\n+public class GradlePreferenceChangeListener implements IPreferencesChangeListener {\n+\t@Override\n+\tpublic void preferencesChange(Preferences oldPreferences, Preferences newPreferences) {\n+\t\tProjectsManager projectsManager = JavaLanguageServerPlugin.getProjectsManager();\n+\t\tif (projectsManager != null) {\n+\t\t\tif (hasAllowedChecksumsChanged(oldPreferences, newPreferences)) {\n+\t\t\t\tfor (IProject project : ProjectUtils.getGradleProjects()) {\n+\t\t\t\t\tupdateProject(projectsManager, project);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void updateProject(ProjectsManager projectsManager, IProject project) {\n+\t\tString projectDir = project.getLocation().toFile().getAbsolutePath();\n+\t\tPath projectPath = Paths.get(projectDir);\n+\t\tPreferenceManager preferencesManager = getPreferenceManager();\n+\t\tif (preferencesManager != null && preferencesManager.getPreferences().isGradleWrapperEnabled() && Files.exists(projectPath.resolve(\"gradlew\"))) {\n+\t\t\tProjectConfiguration configuration = CorePlugin.configurationManager().loadProjectConfiguration(project);\n+\t\t\tGradleDistribution distribution = configuration.getBuildConfiguration().getGradleDistribution();\n+\t\t\tif (!(distribution instanceof WrapperGradleDistribution)) {\n+\t\t\t\tprojectsManager.updateProject(project, true);\n+\t\t\t} else {\n+\t\t\t\ttry {\n+\t\t\t\t\tValidationResult result = new WrapperValidator().checkWrapper(projectDir);\n+\t\t\t\t\tif (!result.isValid()) {\n+\t\t\t\t\t\tprojectsManager.updateProject(project, true);\n+\t\t\t\t\t}\n+\t\t\t\t} catch (CoreException e) {\n+\t\t\t\t\tJavaLanguageServerPlugin.logException(e.getMessage(), e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate PreferenceManager getPreferenceManager() {\n+\t\tPreferenceManager preferencesManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\treturn preferencesManager;\n+\t}\n+\n+\tprivate boolean hasAllowedChecksumsChanged(Preferences oldPreferences, Preferences newPreferences) {\n+\t\tif (!Objects.equals(oldPreferences.getGradleWrapperList(), newPreferences.getGradleWrapperList())) {\n+\t\t\tputSha256(newPreferences.getGradleWrapperList());\n+\t\t\treturn true;\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\tprivate void putSha256(List<?> gradleWrapperList) {\n+\t\tList<String> sha256Allowed = new ArrayList<>();\n+\t\tList<String> sha256Disallowed = new ArrayList<>();\n+\t\tfor (Object object : gradleWrapperList) {\n+\t\t\tif (object instanceof Map) {\n+\t\t\t\tMap<?, ?> map = (Map<?, ?>) object;\n+\t\t\t\tfinal ChecksumWrapper sha256 = this.new ChecksumWrapper();\n+\t\t\t\tsha256.allowed = true;\n+\t\t\t\tmap.forEach((k, v) -> {\n+\t\t\t\t\tif (k instanceof String) {\n+\t\t\t\t\t\tswitch ((String) k) {\n+\t\t\t\t\t\t\tcase \"sha256\":\n+\t\t\t\t\t\t\t\tif (v instanceof String) {\n+\t\t\t\t\t\t\t\t\tsha256.checksum = (String) v;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase \"allowed\":\n+\t\t\t\t\t\t\t\tif (v instanceof Boolean) {\n+\t\t\t\t\t\t\t\t\tsha256.allowed = (Boolean) v;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t\tif (sha256.checksum != null) {\n+\t\t\t\t\tif (sha256.allowed) {\n+\t\t\t\t\t\tsha256Allowed.add(sha256.checksum);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tsha256Disallowed.add(sha256.checksum);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tWrapperValidator.clear();\n+\t\tgetPreferenceManager().getPreferences().setSha256Allowed(sha256Allowed);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYzNTA4Ng=="}, "originalCommit": {"oid": "9453c5410594b9977436940ca8d47847e6529a7a"}, "originalPosition": 125}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3568, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}