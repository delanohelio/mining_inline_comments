{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MTY0MTA1", "number": 2501, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMjo0NToxNlrODgi64g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzoyOTowMlrODjR8_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDUzMTU0OnYy", "diffSide": "RIGHT", "path": "rxjava/src/main/java/com/linecorp/armeria/rxjava/RequestContextScalarSupplierMaybe.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMjo0NToxNlrOFqzpBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMjoxMjo1MFrOFucIuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQzMDU5OQ==", "bodyText": "The value of ScalarSupplier, which was ScalarCallable in RxJava 2, was captured when calling Maybe.just(T).\nI wonder do we need to push RequestContext here? If not, I think we could remove all RequestContextScalarSupplier*. \ud83e\uddd0", "url": "https://github.com/line/armeria/pull/2501#discussion_r380430599", "createdAt": "2020-02-18T02:45:16Z", "author": {"login": "ikhoon"}, "path": "rxjava/src/main/java/com/linecorp/armeria/rxjava/RequestContextScalarSupplierMaybe.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.rxjava;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+import io.reactivex.rxjava3.core.Maybe;\n+import io.reactivex.rxjava3.core.MaybeObserver;\n+import io.reactivex.rxjava3.core.MaybeSource;\n+import io.reactivex.rxjava3.internal.fuseable.ScalarSupplier;\n+\n+final class RequestContextScalarSupplierMaybe<T> extends Maybe<T>\n+        implements ScalarSupplier<T> {\n+    private final MaybeSource<T> source;\n+    private final RequestContext assemblyContext;\n+\n+    RequestContextScalarSupplierMaybe(MaybeSource<T> source, RequestContext assemblyContext) {\n+        this.source = source;\n+        this.assemblyContext = assemblyContext;\n+    }\n+\n+    @Override\n+    protected void subscribeActual(MaybeObserver<? super T> s) {\n+        try (SafeCloseable ignored = assemblyContext.push()) {\n+            source.subscribe(new RequestContextMaybeObserver<>(s, assemblyContext));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public T get() {\n+        try (SafeCloseable ignored = assemblyContext.push()) {\n+            return ((ScalarSupplier<T>) source).get();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9cf88b865c3a74da8527994cce858933f4178f7"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxNDAwNA==", "bodyText": "I think we don't have to push the context here. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2501#discussion_r383814004", "createdAt": "2020-02-25T11:12:34Z", "author": {"login": "minwoox"}, "path": "rxjava/src/main/java/com/linecorp/armeria/rxjava/RequestContextScalarSupplierMaybe.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.rxjava;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+import io.reactivex.rxjava3.core.Maybe;\n+import io.reactivex.rxjava3.core.MaybeObserver;\n+import io.reactivex.rxjava3.core.MaybeSource;\n+import io.reactivex.rxjava3.internal.fuseable.ScalarSupplier;\n+\n+final class RequestContextScalarSupplierMaybe<T> extends Maybe<T>\n+        implements ScalarSupplier<T> {\n+    private final MaybeSource<T> source;\n+    private final RequestContext assemblyContext;\n+\n+    RequestContextScalarSupplierMaybe(MaybeSource<T> source, RequestContext assemblyContext) {\n+        this.source = source;\n+        this.assemblyContext = assemblyContext;\n+    }\n+\n+    @Override\n+    protected void subscribeActual(MaybeObserver<? super T> s) {\n+        try (SafeCloseable ignored = assemblyContext.push()) {\n+            source.subscribe(new RequestContextMaybeObserver<>(s, assemblyContext));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public T get() {\n+        try (SafeCloseable ignored = assemblyContext.push()) {\n+            return ((ScalarSupplier<T>) source).get();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQzMDU5OQ=="}, "originalCommit": {"oid": "d9cf88b865c3a74da8527994cce858933f4178f7"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxODg4Nw==", "bodyText": "On second thought, I think there a chance that a user specifies a class that extends Maybe and implements ScalarSupplier.\nThe specified class might need the context in get() method, so I think we need this.", "url": "https://github.com/line/armeria/pull/2501#discussion_r383818887", "createdAt": "2020-02-25T11:23:12Z", "author": {"login": "minwoox"}, "path": "rxjava/src/main/java/com/linecorp/armeria/rxjava/RequestContextScalarSupplierMaybe.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.rxjava;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+import io.reactivex.rxjava3.core.Maybe;\n+import io.reactivex.rxjava3.core.MaybeObserver;\n+import io.reactivex.rxjava3.core.MaybeSource;\n+import io.reactivex.rxjava3.internal.fuseable.ScalarSupplier;\n+\n+final class RequestContextScalarSupplierMaybe<T> extends Maybe<T>\n+        implements ScalarSupplier<T> {\n+    private final MaybeSource<T> source;\n+    private final RequestContext assemblyContext;\n+\n+    RequestContextScalarSupplierMaybe(MaybeSource<T> source, RequestContext assemblyContext) {\n+        this.source = source;\n+        this.assemblyContext = assemblyContext;\n+    }\n+\n+    @Override\n+    protected void subscribeActual(MaybeObserver<? super T> s) {\n+        try (SafeCloseable ignored = assemblyContext.push()) {\n+            source.subscribe(new RequestContextMaybeObserver<>(s, assemblyContext));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public T get() {\n+        try (SafeCloseable ignored = assemblyContext.push()) {\n+            return ((ScalarSupplier<T>) source).get();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQzMDU5OQ=="}, "originalCommit": {"oid": "d9cf88b865c3a74da8527994cce858933f4178f7"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4ODA5Mw==", "bodyText": "Hmm... ScalarSupplier is the same as Supplier except it abandons throws Throwable. If a user triggers effects in get() method, it seems a wrong usage of ScalarSupplier. Because it should hold const and scalar value.\nhttps://github.com/ReactiveX/RxJava/blob/3.x/src/main/java/io/reactivex/rxjava3/internal/fuseable/ScalarSupplier.java#L19\nI think the user has to use Supplier for generating a value dynamically.", "url": "https://github.com/line/armeria/pull/2501#discussion_r383888093", "createdAt": "2020-02-25T13:48:20Z", "author": {"login": "ikhoon"}, "path": "rxjava/src/main/java/com/linecorp/armeria/rxjava/RequestContextScalarSupplierMaybe.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.rxjava;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+import io.reactivex.rxjava3.core.Maybe;\n+import io.reactivex.rxjava3.core.MaybeObserver;\n+import io.reactivex.rxjava3.core.MaybeSource;\n+import io.reactivex.rxjava3.internal.fuseable.ScalarSupplier;\n+\n+final class RequestContextScalarSupplierMaybe<T> extends Maybe<T>\n+        implements ScalarSupplier<T> {\n+    private final MaybeSource<T> source;\n+    private final RequestContext assemblyContext;\n+\n+    RequestContextScalarSupplierMaybe(MaybeSource<T> source, RequestContext assemblyContext) {\n+        this.source = source;\n+        this.assemblyContext = assemblyContext;\n+    }\n+\n+    @Override\n+    protected void subscribeActual(MaybeObserver<? super T> s) {\n+        try (SafeCloseable ignored = assemblyContext.push()) {\n+            source.subscribe(new RequestContextMaybeObserver<>(s, assemblyContext));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public T get() {\n+        try (SafeCloseable ignored = assemblyContext.push()) {\n+            return ((ScalarSupplier<T>) source).get();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQzMDU5OQ=="}, "originalCommit": {"oid": "d9cf88b865c3a74da8527994cce858933f4178f7"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIzOTgwMw==", "bodyText": "Ah, yes. That's a good point. \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/2501#discussion_r384239803", "createdAt": "2020-02-26T02:12:50Z", "author": {"login": "minwoox"}, "path": "rxjava/src/main/java/com/linecorp/armeria/rxjava/RequestContextScalarSupplierMaybe.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.rxjava;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+import io.reactivex.rxjava3.core.Maybe;\n+import io.reactivex.rxjava3.core.MaybeObserver;\n+import io.reactivex.rxjava3.core.MaybeSource;\n+import io.reactivex.rxjava3.internal.fuseable.ScalarSupplier;\n+\n+final class RequestContextScalarSupplierMaybe<T> extends Maybe<T>\n+        implements ScalarSupplier<T> {\n+    private final MaybeSource<T> source;\n+    private final RequestContext assemblyContext;\n+\n+    RequestContextScalarSupplierMaybe(MaybeSource<T> source, RequestContext assemblyContext) {\n+        this.source = source;\n+        this.assemblyContext = assemblyContext;\n+    }\n+\n+    @Override\n+    protected void subscribeActual(MaybeObserver<? super T> s) {\n+        try (SafeCloseable ignored = assemblyContext.push()) {\n+            source.subscribe(new RequestContextMaybeObserver<>(s, assemblyContext));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public T get() {\n+        try (SafeCloseable ignored = assemblyContext.push()) {\n+            return ((ScalarSupplier<T>) source).get();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQzMDU5OQ=="}, "originalCommit": {"oid": "d9cf88b865c3a74da8527994cce858933f4178f7"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzU1NDAzOnYy", "diffSide": "RIGHT", "path": "rxjava/src/main/java/com/linecorp/armeria/rxjava/RequestContextAssembly.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo0MzozMFrOFsHp7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo0MzozMFrOFsHp7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgwNzA4NQ==", "bodyText": "Could merge the two lines", "url": "https://github.com/line/armeria/pull/2501#discussion_r381807085", "createdAt": "2020-02-20T06:43:30Z", "author": {"login": "trustin"}, "path": "rxjava/src/main/java/com/linecorp/armeria/rxjava/RequestContextAssembly.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.rxjava;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+\n+import io.reactivex.rxjava3.core.Completable;\n+import io.reactivex.rxjava3.core.Flowable;\n+import io.reactivex.rxjava3.core.Maybe;\n+import io.reactivex.rxjava3.core.Observable;\n+import io.reactivex.rxjava3.core.Single;\n+import io.reactivex.rxjava3.flowables.ConnectableFlowable;\n+import io.reactivex.rxjava3.functions.Function;\n+import io.reactivex.rxjava3.functions.Supplier;\n+import io.reactivex.rxjava3.internal.fuseable.ScalarSupplier;\n+import io.reactivex.rxjava3.observables.ConnectableObservable;\n+import io.reactivex.rxjava3.parallel.ParallelFlowable;\n+import io.reactivex.rxjava3.plugins.RxJavaPlugins;\n+\n+/**\n+ * Utility class to keep {@link RequestContext} during RxJava operations.\n+ */\n+public final class RequestContextAssembly {\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super Observable, ? extends Observable> oldOnObservableAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super ConnectableObservable, ? extends ConnectableObservable>\n+            oldOnConnectableObservableAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super Completable, ? extends Completable> oldOnCompletableAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super Single, ? extends Single> oldOnSingleAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super Maybe, ? extends Maybe> oldOnMaybeAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super Flowable, ? extends Flowable> oldOnFlowableAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super ConnectableFlowable, ? extends ConnectableFlowable>\n+            oldOnConnectableFlowableAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super ParallelFlowable, ? extends ParallelFlowable> oldOnParallelAssembly;\n+\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static boolean enabled;\n+\n+    private RequestContextAssembly() {\n+    }\n+\n+    /**\n+     * Enable {@link RequestContext} during operators.\n+     */\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    public static synchronized void enable() {\n+        if (enabled) {\n+            return;\n+        }\n+\n+        oldOnObservableAssembly = RxJavaPlugins.getOnObservableAssembly();\n+        RxJavaPlugins.setOnObservableAssembly(compose(\n+                oldOnObservableAssembly,\n+                new ConditionalOnCurrentRequestContextFunction<Observable>() {\n+                    @Override\n+                    Observable applyActual(Observable o, RequestContext ctx) {\n+                        if (!(o instanceof Supplier)) {\n+                            return new RequestContextObservable(o, ctx);\n+                        }\n+                        if (o instanceof ScalarSupplier) {\n+                            return new RequestContextScalarSupplierObservable(o, ctx);\n+                        }\n+                        return new RequestContextSupplierObservable(o, ctx);\n+                    }\n+                }));\n+\n+        oldOnConnectableObservableAssembly = RxJavaPlugins.getOnConnectableObservableAssembly();\n+        RxJavaPlugins.setOnConnectableObservableAssembly(compose(\n+                oldOnConnectableObservableAssembly,\n+                new ConditionalOnCurrentRequestContextFunction<ConnectableObservable>() {\n+                    @Override\n+                    ConnectableObservable applyActual(ConnectableObservable co, RequestContext ctx) {\n+                        return new RequestContextConnectableObservable(co, ctx);\n+                    }\n+                }));\n+\n+        oldOnCompletableAssembly = RxJavaPlugins.getOnCompletableAssembly();\n+        RxJavaPlugins.setOnCompletableAssembly(\n+                compose(oldOnCompletableAssembly,\n+                        new ConditionalOnCurrentRequestContextFunction<Completable>() {\n+                            @Override\n+                            Completable applyActual(Completable c, RequestContext ctx) {\n+                                return new RequestContextCompletable(c, ctx);\n+                            }\n+                        }));\n+\n+        oldOnSingleAssembly = RxJavaPlugins.getOnSingleAssembly();\n+        RxJavaPlugins.setOnSingleAssembly(\n+                compose(oldOnSingleAssembly, new ConditionalOnCurrentRequestContextFunction<Single>() {\n+                    @Override\n+                    Single applyActual(Single s, RequestContext ctx) {\n+                        if (!(s instanceof Supplier)) {\n+                            return new RequestContextSingle(s, ctx);\n+                        }\n+                        if (s instanceof ScalarSupplier) {\n+                            return new RequestContextScalarSupplierSingle(s, ctx);\n+                        }\n+                        return new RequestContextSupplierSingle(s, ctx);\n+                    }\n+                }));\n+\n+        oldOnMaybeAssembly = RxJavaPlugins.getOnMaybeAssembly();\n+        RxJavaPlugins.setOnMaybeAssembly(\n+                compose(oldOnMaybeAssembly, new ConditionalOnCurrentRequestContextFunction<Maybe>() {\n+                    @Override\n+                    Maybe applyActual(Maybe m, RequestContext ctx) {\n+                        if (!(m instanceof Supplier)) {\n+                            return new RequestContextMaybe(m, ctx);\n+                        }\n+                        if (m instanceof ScalarSupplier) {\n+                            return new RequestContextScalarSupplierMaybe(m, ctx);\n+                        }\n+                        return new RequestContextSupplierMaybe(m, ctx);\n+                    }\n+                }));\n+\n+        oldOnFlowableAssembly = RxJavaPlugins.getOnFlowableAssembly();\n+        RxJavaPlugins.setOnFlowableAssembly(\n+                compose(oldOnFlowableAssembly, new ConditionalOnCurrentRequestContextFunction<Flowable>() {\n+                    @Override\n+                    Flowable applyActual(Flowable f, RequestContext ctx) {\n+                        if (!(f instanceof Supplier)) {\n+                            return new RequestContextFlowable(f, ctx);\n+                        }\n+                        if (f instanceof ScalarSupplier) {\n+                            return new RequestContextScalarSupplierFlowable(f, ctx);\n+                        }\n+                        return new RequestContextSupplierFlowable(f, ctx);\n+                    }\n+                }));\n+\n+        oldOnConnectableFlowableAssembly = RxJavaPlugins.getOnConnectableFlowableAssembly();\n+        RxJavaPlugins.setOnConnectableFlowableAssembly(\n+                compose(oldOnConnectableFlowableAssembly,\n+                        new ConditionalOnCurrentRequestContextFunction<ConnectableFlowable>() {\n+                            @Override\n+                            ConnectableFlowable applyActual(\n+                                    ConnectableFlowable cf,\n+                                    RequestContext ctx) {\n+                                return new RequestContextConnectableFlowable(\n+                                        cf, ctx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e5f85a2cb0284a02864d58228cec85be30677f"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzU1NjAxOnYy", "diffSide": "RIGHT", "path": "rxjava/src/main/java/com/linecorp/armeria/rxjava/RequestContextAssembly.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo0Mzo0OVrOFsHq0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo0Mzo0OVrOFsHq0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgwNzMxNA==", "bodyText": "Could be moved after the public static methods", "url": "https://github.com/line/armeria/pull/2501#discussion_r381807314", "createdAt": "2020-02-20T06:43:49Z", "author": {"login": "trustin"}, "path": "rxjava/src/main/java/com/linecorp/armeria/rxjava/RequestContextAssembly.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.rxjava;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+\n+import io.reactivex.rxjava3.core.Completable;\n+import io.reactivex.rxjava3.core.Flowable;\n+import io.reactivex.rxjava3.core.Maybe;\n+import io.reactivex.rxjava3.core.Observable;\n+import io.reactivex.rxjava3.core.Single;\n+import io.reactivex.rxjava3.flowables.ConnectableFlowable;\n+import io.reactivex.rxjava3.functions.Function;\n+import io.reactivex.rxjava3.functions.Supplier;\n+import io.reactivex.rxjava3.internal.fuseable.ScalarSupplier;\n+import io.reactivex.rxjava3.observables.ConnectableObservable;\n+import io.reactivex.rxjava3.parallel.ParallelFlowable;\n+import io.reactivex.rxjava3.plugins.RxJavaPlugins;\n+\n+/**\n+ * Utility class to keep {@link RequestContext} during RxJava operations.\n+ */\n+public final class RequestContextAssembly {\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super Observable, ? extends Observable> oldOnObservableAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super ConnectableObservable, ? extends ConnectableObservable>\n+            oldOnConnectableObservableAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super Completable, ? extends Completable> oldOnCompletableAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super Single, ? extends Single> oldOnSingleAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super Maybe, ? extends Maybe> oldOnMaybeAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super Flowable, ? extends Flowable> oldOnFlowableAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super ConnectableFlowable, ? extends ConnectableFlowable>\n+            oldOnConnectableFlowableAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super ParallelFlowable, ? extends ParallelFlowable> oldOnParallelAssembly;\n+\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static boolean enabled;\n+\n+    private RequestContextAssembly() {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e5f85a2cb0284a02864d58228cec85be30677f"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzU2MjY2OnYy", "diffSide": "RIGHT", "path": "rxjava2/src/main/java/com/linecorp/armeria/server/rxjava2/package-info.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo0NTozNlrOFsHubw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo0NTozNlrOFsHubw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgwODIzOQ==", "bodyText": "Provides", "url": "https://github.com/line/armeria/pull/2501#discussion_r381808239", "createdAt": "2020-02-20T06:45:36Z", "author": {"login": "trustin"}, "path": "rxjava2/src/main/java/com/linecorp/armeria/server/rxjava2/package-info.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Provide a default {@link com.linecorp.armeria.server.annotation.ResponseConverterFunction}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e5f85a2cb0284a02864d58228cec85be30677f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzU2Mzc2OnYy", "diffSide": "RIGHT", "path": "rxjava/src/main/java/com/linecorp/armeria/internal/server/rxjava/package-info.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo0NTo0OVrOFsHvCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo0NTo0OVrOFsHvCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgwODM5NA==", "bodyText": "Provides", "url": "https://github.com/line/armeria/pull/2501#discussion_r381808394", "createdAt": "2020-02-20T06:45:49Z", "author": {"login": "trustin"}, "path": "rxjava/src/main/java/com/linecorp/armeria/internal/server/rxjava/package-info.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Provide a default {@link com.linecorp.armeria.server.annotation.ResponseConverterFunction}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e5f85a2cb0284a02864d58228cec85be30677f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzIwODkyOnYy", "diffSide": "RIGHT", "path": "rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextSupplierFlowable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzoyOTowMlrOFvAJmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMToyODo1NVrOFvCWRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyOTg1MA==", "bodyText": "As the comment above, do we need to remove here too? I still see some ScalarSupplier has context.", "url": "https://github.com/line/armeria/pull/2501#discussion_r384829850", "createdAt": "2020-02-26T23:29:02Z", "author": {"login": "kojilin"}, "path": "rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextSupplierFlowable.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.rxjava;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+import io.reactivex.rxjava3.core.Flowable;\n+import io.reactivex.rxjava3.functions.Supplier;\n+import io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber;\n+\n+final class RequestContextSupplierFlowable<T> extends Flowable<T> implements Supplier<T> {\n+    private final Publisher<T> source;\n+    private final RequestContext assemblyContext;\n+\n+    RequestContextSupplierFlowable(Publisher<T> source, RequestContext assemblyContext) {\n+        this.source = source;\n+        this.assemblyContext = assemblyContext;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    protected void subscribeActual(Subscriber<? super T> s) {\n+        try (SafeCloseable ignored = assemblyContext.push()) {\n+            if (s instanceof ConditionalSubscriber) {\n+                source.subscribe(new RequestContextConditionalSubscriber<>((ConditionalSubscriber<? super T>) s,\n+                                                                           assemblyContext));\n+            } else {\n+                source.subscribe(new RequestContextSubscriber<>(s, assemblyContext));\n+            }\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public T get() throws Throwable {\n+        try (SafeCloseable ignored = assemblyContext.push()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c81cf78876ff79b47fa3b4299f39b00dd4eecb08"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2NTg2Mg==", "bodyText": "This implements Supplier<T>, not ScalarSupplier<T>. So I think this is fine. \ud83d\ude00", "url": "https://github.com/line/armeria/pull/2501#discussion_r384865862", "createdAt": "2020-02-27T01:28:55Z", "author": {"login": "ikhoon"}, "path": "rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextSupplierFlowable.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.rxjava;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+import io.reactivex.rxjava3.core.Flowable;\n+import io.reactivex.rxjava3.functions.Supplier;\n+import io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber;\n+\n+final class RequestContextSupplierFlowable<T> extends Flowable<T> implements Supplier<T> {\n+    private final Publisher<T> source;\n+    private final RequestContext assemblyContext;\n+\n+    RequestContextSupplierFlowable(Publisher<T> source, RequestContext assemblyContext) {\n+        this.source = source;\n+        this.assemblyContext = assemblyContext;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    protected void subscribeActual(Subscriber<? super T> s) {\n+        try (SafeCloseable ignored = assemblyContext.push()) {\n+            if (s instanceof ConditionalSubscriber) {\n+                source.subscribe(new RequestContextConditionalSubscriber<>((ConditionalSubscriber<? super T>) s,\n+                                                                           assemblyContext));\n+            } else {\n+                source.subscribe(new RequestContextSubscriber<>(s, assemblyContext));\n+            }\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public T get() throws Throwable {\n+        try (SafeCloseable ignored = assemblyContext.push()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyOTg1MA=="}, "originalCommit": {"oid": "c81cf78876ff79b47fa3b4299f39b00dd4eecb08"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3022, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}