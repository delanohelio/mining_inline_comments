{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNjYwMTQw", "number": 3181, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMDowODozNlrOE5yhuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNjoxNzozM1rOE65D2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDMyMTIzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMDowODozNlrOH0eh9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMDo1NjoxM1rOH0gJ0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc4ODIxMg==", "bodyText": "Seems it is better to leave a comment the reason why we cannot use the result of delegate.whenReady().join()?", "url": "https://github.com/line/armeria/pull/3181#discussion_r524788212", "createdAt": "2020-11-17T00:08:36Z", "author": {"login": "imasahiro"}, "path": "core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroup.java", "diffHunk": "@@ -139,7 +139,8 @@ public static HealthCheckedEndpointGroupBuilder builder(EndpointGroup delegate,\n \n         clientOptions.factory().whenClosed().thenRun(this::closeAsync);\n         delegate.addListener(this::updateCandidates);\n-        updateCandidates(delegate.whenReady().join());\n+        delegate.whenReady().join();\n+        updateCandidates(delegate.endpoints());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8e805b7589e97bd24be16411525383e37a033e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxNDgwMA==", "bodyText": "Added. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3181#discussion_r524814800", "createdAt": "2020-11-17T00:56:13Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroup.java", "diffHunk": "@@ -139,7 +139,8 @@ public static HealthCheckedEndpointGroupBuilder builder(EndpointGroup delegate,\n \n         clientOptions.factory().whenClosed().thenRun(this::closeAsync);\n         delegate.addListener(this::updateCandidates);\n-        updateCandidates(delegate.whenReady().join());\n+        delegate.whenReady().join();\n+        updateCandidates(delegate.endpoints());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc4ODIxMg=="}, "originalCommit": {"oid": "9c8e805b7589e97bd24be16411525383e37a033e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzUxMTA0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/endpoint/LazyList.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwOToyOTo1MlrOH1koxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMjo1OTozM1rOH2KvZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkzNjgzOQ==", "bodyText": "How about extends Guava's ForwardingList instead of implementing List?\nI think we can reduce the overall code size with the same result. \ud83d\ude09\nFor example:\nfinal class LazyList<E> extends ForwardingList<E> {\n    @Override\n    protected List<E> delegate() {\n        final List<E> delegate = this.delegate;\n        if (delegate != null) {\n            return delegate;\n        }\n\n        final List<E> supplied = ImmutableList.copyOf(delegateSupplier.get());\n        if (delegateUpdater.compareAndSet(this, null, supplied)) {\n            return supplied;\n        } else {\n            return this.delegate;\n        }\n    }\n\n    // Override unwanted methods\n    @Override\n    public void add(int index, E element) {\n        throw new UnsupportedOperationException();\n    }\n    ...\n}", "url": "https://github.com/line/armeria/pull/3181#discussion_r525936839", "createdAt": "2020-11-18T09:29:52Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/endpoint/LazyList.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.endpoint;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+final class LazyList<E> implements List<E> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135ed0195dace011a64b855b9ac89b9f15bc5b90"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk0MTc2MQ==", "bodyText": "That's a good suggestion. \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/3181#discussion_r525941761", "createdAt": "2020-11-18T09:37:06Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/endpoint/LazyList.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.endpoint;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+final class LazyList<E> implements List<E> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkzNjgzOQ=="}, "originalCommit": {"oid": "135ed0195dace011a64b855b9ac89b9f15bc5b90"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU1ODE3Mw==", "bodyText": "@ikhoon Fixed. \ud83d\ude09\nFYI, I didn't override the mutable methods because they throw exceptions in the implementation anyway.", "url": "https://github.com/line/armeria/pull/3181#discussion_r526558173", "createdAt": "2020-11-19T02:49:19Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/endpoint/LazyList.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.endpoint;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+final class LazyList<E> implements List<E> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkzNjgzOQ=="}, "originalCommit": {"oid": "135ed0195dace011a64b855b9ac89b9f15bc5b90"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU2MTEyNA==", "bodyText": "FYI, I didn't override the mutable methods because they throw exceptions in the implementation anyway.\n\nAh. you are right. \ud83e\udd23", "url": "https://github.com/line/armeria/pull/3181#discussion_r526561124", "createdAt": "2020-11-19T02:59:33Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/endpoint/LazyList.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.endpoint;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+final class LazyList<E> implements List<E> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkzNjgzOQ=="}, "originalCommit": {"oid": "135ed0195dace011a64b855b9ac89b9f15bc5b90"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTY0MzI2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckEndpointGroupFlakyTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDoxOToxOFrOH2MKGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNTo1NjowOFrOH2N0ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4NDM0Nw==", "bodyText": "Flaky -> Race?\nCould you add a Javadoc that explains what race condition this test tries to test?", "url": "https://github.com/line/armeria/pull/3181#discussion_r526584347", "createdAt": "2020-11-19T04:19:18Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckEndpointGroupFlakyTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.endpoint.healthcheck;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.endpoint.DynamicEndpointGroup;\n+import com.linecorp.armeria.client.endpoint.EndpointGroup;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.healthcheck.HealthCheckService;\n+import com.linecorp.armeria.testing.junit5.server.ServerExtension;\n+\n+class HealthCheckEndpointGroupFlakyTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4a5963db80a30d6892d023799f640a64e2c1f36"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYxMTU1Nw==", "bodyText": "Added. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3181#discussion_r526611557", "createdAt": "2020-11-19T05:56:08Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckEndpointGroupFlakyTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.endpoint.healthcheck;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.endpoint.DynamicEndpointGroup;\n+import com.linecorp.armeria.client.endpoint.EndpointGroup;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.healthcheck.HealthCheckService;\n+import com.linecorp.armeria.testing.junit5.server.ServerExtension;\n+\n+class HealthCheckEndpointGroupFlakyTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4NDM0Nw=="}, "originalCommit": {"oid": "f4a5963db80a30d6892d023799f640a64e2c1f36"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTY0NDU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/endpoint/DynamicEndpointGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDoxOTo0OVrOH2MKuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNTo1NjozMlrOH2N05w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4NDUwNw==", "bodyText": "Could you add a comment about why we're not using EventLoopCheckingFuture here?", "url": "https://github.com/line/armeria/pull/3181#discussion_r526584507", "createdAt": "2020-11-19T04:19:49Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/endpoint/DynamicEndpointGroup.java", "diffHunk": "@@ -52,8 +51,9 @@\n     private final AtomicReference<EndpointSelector> selector = new AtomicReference<>();\n     private volatile List<Endpoint> endpoints = UNINITIALIZED_ENDPOINTS;\n     private final Lock endpointsLock = new ReentrantLock();\n-    private final CompletableFuture<List<Endpoint>> initialEndpointsFuture =\n-            new EventLoopCheckingFuture<>();\n+\n+    private final CompletableFuture<Void> initialEndpointsSet = new CompletableFuture<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4a5963db80a30d6892d023799f640a64e2c1f36"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYxMTY4Nw==", "bodyText": "Changed to use EventLoopCheckingFuture for all dynamic endpoint group. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3181#discussion_r526611687", "createdAt": "2020-11-19T05:56:32Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/endpoint/DynamicEndpointGroup.java", "diffHunk": "@@ -52,8 +51,9 @@\n     private final AtomicReference<EndpointSelector> selector = new AtomicReference<>();\n     private volatile List<Endpoint> endpoints = UNINITIALIZED_ENDPOINTS;\n     private final Lock endpointsLock = new ReentrantLock();\n-    private final CompletableFuture<List<Endpoint>> initialEndpointsFuture =\n-            new EventLoopCheckingFuture<>();\n+\n+    private final CompletableFuture<Void> initialEndpointsSet = new CompletableFuture<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4NDUwNw=="}, "originalCommit": {"oid": "f4a5963db80a30d6892d023799f640a64e2c1f36"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTg3NzM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/endpoint/CompositeEndpointGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNjoxNzozM1rOH2OPYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNjoyNTo1MFrOH2ObFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYxODQ2Nw==", "bodyText": "What happens if the future returned by anyOf() completes exceptionally?", "url": "https://github.com/line/armeria/pull/3181#discussion_r526618467", "createdAt": "2020-11-19T06:17:33Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/endpoint/CompositeEndpointGroup.java", "diffHunk": "@@ -67,11 +68,12 @@\n             });\n         }\n \n-        initialEndpointsFuture =\n-                CompletableFuture.anyOf(this.endpointGroups.stream()\n-                                                           .map(EndpointGroup::whenReady)\n-                                                           .toArray(CompletableFuture[]::new))\n-                                 .thenApply(unused -> endpoints());\n+        CompletableFuture.anyOf(this.endpointGroups.stream()\n+                                                   .map(EndpointGroup::whenReady)\n+                                                   .toArray(CompletableFuture[]::new))\n+                         .thenAccept(unused -> {\n+                             initialEndpointsFuture.complete(new LazyList<>(this::endpoints));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25196e1d9b302568fdcafac2a8b17d20fcdb3e4b"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYyMTQ2Mg==", "bodyText": "Thanks fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/3181#discussion_r526621462", "createdAt": "2020-11-19T06:25:50Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/endpoint/CompositeEndpointGroup.java", "diffHunk": "@@ -67,11 +68,12 @@\n             });\n         }\n \n-        initialEndpointsFuture =\n-                CompletableFuture.anyOf(this.endpointGroups.stream()\n-                                                           .map(EndpointGroup::whenReady)\n-                                                           .toArray(CompletableFuture[]::new))\n-                                 .thenApply(unused -> endpoints());\n+        CompletableFuture.anyOf(this.endpointGroups.stream()\n+                                                   .map(EndpointGroup::whenReady)\n+                                                   .toArray(CompletableFuture[]::new))\n+                         .thenAccept(unused -> {\n+                             initialEndpointsFuture.complete(new LazyList<>(this::endpoints));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYxODQ2Nw=="}, "originalCommit": {"oid": "25196e1d9b302568fdcafac2a8b17d20fcdb3e4b"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2041, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}