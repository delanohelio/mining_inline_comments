{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MTAwMTgx", "number": 2820, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo0NjowNlrOEHHy9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjoyNjoyNlrOEHQCRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTAzMjIzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/annotation/ServiceName.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo0NjowNlrOGmVadw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDoyMDoxM1rOGmWh1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0OTkxMQ==", "bodyText": ".equals()?\nHow about using ensureAvailability(RequestLogProperty.NAME).serviceName()?", "url": "https://github.com/line/armeria/pull/2820#discussion_r442849911", "createdAt": "2020-06-19T13:46:06Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/annotation/ServiceName.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Annotation for service name that is often used as a meter tag or distributed trace's span name.\n+ * You can override the default service name by annotating a class or method with {@link ServiceName}.\n+ * For example:<pre>{@code\n+ * > public class MyService {\n+ * >     @Get(\"/\")\n+ * >     public String get(ServiceRequestContext ctx) {\n+ * >         // The default service name\n+ * >         assert ctx.log().partial().serviceName() == MyService.class.getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "046e5b94c2dbc64502fac1dee1546f7d0932c5b9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg2ODE4MQ==", "bodyText": "or just ctx.log().whenComplete().thenAccept()", "url": "https://github.com/line/armeria/pull/2820#discussion_r442868181", "createdAt": "2020-06-19T14:20:13Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/annotation/ServiceName.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Annotation for service name that is often used as a meter tag or distributed trace's span name.\n+ * You can override the default service name by annotating a class or method with {@link ServiceName}.\n+ * For example:<pre>{@code\n+ * > public class MyService {\n+ * >     @Get(\"/\")\n+ * >     public String get(ServiceRequestContext ctx) {\n+ * >         // The default service name\n+ * >         assert ctx.log().partial().serviceName() == MyService.class.getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0OTkxMQ=="}, "originalCommit": {"oid": "046e5b94c2dbc64502fac1dee1546f7d0932c5b9"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTAzNjg0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceRequestLogNameTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo0NzoyM1rOGmVdMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDoyNzoyMFrOGmWxXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1MDYxMQ==", "bodyText": "?\nCould you check if the above example (assert ctx.log().partial().serviceName() == \"my-service\";) really works here? If not, please update them to use whenComplete().thenApply() which is the recommended way.", "url": "https://github.com/line/armeria/pull/2820#discussion_r442850611", "createdAt": "2020-06-19T13:47:23Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceRequestLogNameTest.java", "diffHunk": "@@ -82,4 +75,56 @@ void logNameShouldBeSetOnEarlyFailure() throws Exception {\n         assertThat(log.name()).isEqualTo(\"bar\");\n         assertThat(log.responseHeaders().status()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);\n     }\n+\n+    @Test\n+    void defaultServiceName() throws Exception {\n+        WebClient.of(server.httpUri()).get(\"/ok\").aggregate().join();\n+\n+        final RequestLog log = logs.take().whenComplete().join();\n+        assertThat(log.serviceName()).isEqualTo(FooService.class.getName());\n+    }\n+\n+    @Test\n+    void customServiceNameWithClass() throws Exception {\n+        WebClient.of(server.httpUri()).get(\"/serviceName/foo\").aggregate().join();\n+\n+        final RequestLog log = logs.take().whenComplete().join();\n+        assertThat(log.serviceName()).isEqualTo(\"MyBarService\");\n+    }\n+\n+    @Test\n+    void customServiceNameWithMethod() throws Exception {\n+        WebClient.of(server.httpUri()).get(\"/serviceName/bar\").aggregate().join();\n+\n+        final RequestLog log = logs.take().whenComplete().join();\n+        assertThat(log.serviceName()).isEqualTo(\"SecuredBarService\");\n+    }\n+\n+    private static class FooService {\n+        @Get(\"/ok\")\n+        public String foo() {\n+            return \"OK\";\n+        }\n+\n+        @Get(\"/fail_early\")\n+        public String bar() {\n+            return \"Not OK\";\n+        }\n+    }\n+\n+    @ServiceName(\"MyBarService\")\n+    private static class BarService {\n+        @Get(\"/foo\")\n+        public String foo() {\n+            return \"OK\";\n+        }\n+\n+        @ServiceName(\"SecuredBarService\")\n+        @Get(\"/bar\")\n+        public String secured(ServiceRequestContext ctx) {\n+            ctx.log();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "046e5b94c2dbc64502fac1dee1546f7d0932c5b9"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg2OTkzNg==", "bodyText": "I think so because the names are set in\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java\n    \n    \n         Line 246\n      in\n      173de33\n    \n    \n    \n    \n\n        \n          \n           ctx.logBuilder().name(serviceName(), methodName()); \n        \n    \n  \n\n\nThe secured(ServiceRequestContext ctx) is called after this via invoke(...).\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java\n    \n    \n        Lines 258 to 263\n      in\n      173de33\n    \n    \n    \n    \n\n        \n          \n           switch (responseType) { \n        \n\n        \n          \n               case HTTP_RESPONSE: \n        \n\n        \n          \n                   final Function<AggregatedHttpRequest, HttpResponse> httpResponseApplyFunction = \n        \n\n        \n          \n                           msg -> new ExceptionFilteredHttpResponse( \n        \n\n        \n          \n                                   ctx, req, (HttpResponse) invoke(ctx, req, msg), exceptionHandler); \n        \n\n        \n          \n                   if (useBlockingTaskExecutor) {", "url": "https://github.com/line/armeria/pull/2820#discussion_r442869936", "createdAt": "2020-06-19T14:23:24Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceRequestLogNameTest.java", "diffHunk": "@@ -82,4 +75,56 @@ void logNameShouldBeSetOnEarlyFailure() throws Exception {\n         assertThat(log.name()).isEqualTo(\"bar\");\n         assertThat(log.responseHeaders().status()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);\n     }\n+\n+    @Test\n+    void defaultServiceName() throws Exception {\n+        WebClient.of(server.httpUri()).get(\"/ok\").aggregate().join();\n+\n+        final RequestLog log = logs.take().whenComplete().join();\n+        assertThat(log.serviceName()).isEqualTo(FooService.class.getName());\n+    }\n+\n+    @Test\n+    void customServiceNameWithClass() throws Exception {\n+        WebClient.of(server.httpUri()).get(\"/serviceName/foo\").aggregate().join();\n+\n+        final RequestLog log = logs.take().whenComplete().join();\n+        assertThat(log.serviceName()).isEqualTo(\"MyBarService\");\n+    }\n+\n+    @Test\n+    void customServiceNameWithMethod() throws Exception {\n+        WebClient.of(server.httpUri()).get(\"/serviceName/bar\").aggregate().join();\n+\n+        final RequestLog log = logs.take().whenComplete().join();\n+        assertThat(log.serviceName()).isEqualTo(\"SecuredBarService\");\n+    }\n+\n+    private static class FooService {\n+        @Get(\"/ok\")\n+        public String foo() {\n+            return \"OK\";\n+        }\n+\n+        @Get(\"/fail_early\")\n+        public String bar() {\n+            return \"Not OK\";\n+        }\n+    }\n+\n+    @ServiceName(\"MyBarService\")\n+    private static class BarService {\n+        @Get(\"/foo\")\n+        public String foo() {\n+            return \"OK\";\n+        }\n+\n+        @ServiceName(\"SecuredBarService\")\n+        @Get(\"/bar\")\n+        public String secured(ServiceRequestContext ctx) {\n+            ctx.log();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1MDYxMQ=="}, "originalCommit": {"oid": "046e5b94c2dbc64502fac1dee1546f7d0932c5b9"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg3MjE1OA==", "bodyText": "By the way, I agreed that it is not a recommended way to use RequestLog because users might copy this code and used it in other places such as a decorator.\nLet me add an example for a decorator.", "url": "https://github.com/line/armeria/pull/2820#discussion_r442872158", "createdAt": "2020-06-19T14:27:20Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceRequestLogNameTest.java", "diffHunk": "@@ -82,4 +75,56 @@ void logNameShouldBeSetOnEarlyFailure() throws Exception {\n         assertThat(log.name()).isEqualTo(\"bar\");\n         assertThat(log.responseHeaders().status()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);\n     }\n+\n+    @Test\n+    void defaultServiceName() throws Exception {\n+        WebClient.of(server.httpUri()).get(\"/ok\").aggregate().join();\n+\n+        final RequestLog log = logs.take().whenComplete().join();\n+        assertThat(log.serviceName()).isEqualTo(FooService.class.getName());\n+    }\n+\n+    @Test\n+    void customServiceNameWithClass() throws Exception {\n+        WebClient.of(server.httpUri()).get(\"/serviceName/foo\").aggregate().join();\n+\n+        final RequestLog log = logs.take().whenComplete().join();\n+        assertThat(log.serviceName()).isEqualTo(\"MyBarService\");\n+    }\n+\n+    @Test\n+    void customServiceNameWithMethod() throws Exception {\n+        WebClient.of(server.httpUri()).get(\"/serviceName/bar\").aggregate().join();\n+\n+        final RequestLog log = logs.take().whenComplete().join();\n+        assertThat(log.serviceName()).isEqualTo(\"SecuredBarService\");\n+    }\n+\n+    private static class FooService {\n+        @Get(\"/ok\")\n+        public String foo() {\n+            return \"OK\";\n+        }\n+\n+        @Get(\"/fail_early\")\n+        public String bar() {\n+            return \"Not OK\";\n+        }\n+    }\n+\n+    @ServiceName(\"MyBarService\")\n+    private static class BarService {\n+        @Get(\"/foo\")\n+        public String foo() {\n+            return \"OK\";\n+        }\n+\n+        @ServiceName(\"SecuredBarService\")\n+        @Get(\"/bar\")\n+        public String secured(ServiceRequestContext ctx) {\n+            ctx.log();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1MDYxMQ=="}, "originalCommit": {"oid": "046e5b94c2dbc64502fac1dee1546f7d0932c5b9"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTAzOTQ0OnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo0ODoxMVrOGmVe1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDowNjoxM1rOGmWFGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1MTAzMA==", "bodyText": "armeria.dev/docs/...", "url": "https://github.com/line/armeria/pull/2820#discussion_r442851030", "createdAt": "2020-06-19T13:48:11Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1373,5 +1373,41 @@ public class MyAnnotatedService {\n     public HttpResponse update() { ... }\n }\n ```\n+\n+## Specifying the default service name\n+\n+The default name of service that served a request is the innermost class name of an annotated service.\n+The service name is often used as a meter tag or distributed trace's span name.\n+If you want to customize the default service name, then you can override the name by annotating\n+a class or method with <type://@ServiceName>.\n+\n+For example:\n+\n+```java\n+public class MyService {\n+    @Get(\"/\")\n+    public String get(ServiceRequestContext ctx) {\n+        assert ctx.log().partial().serviceName() == MyService.class.getName();\n+    }\n+}\n+\n+@ServiceName(\"my-service\")\n+public class MyService {\n+    @Get(\"/\")\n+    public String get(ServiceRequestContext ctx) {\n+        assert ctx.log().partial().serviceName() == \"my-service\";\n+    }\n+\n+    @ServiceName(\"my-post-service\")\n+    @Post(\"/\")\n+    public String post(ServiceRequestContext ctx) {\n+        assert ctx.log().partial().serviceName() == \"my-post-service\";\n+    }\n+}\n+```\n+\n+Please refer to\n+[Request properties](https://line.github.io/armeria/docs/advanced-structured-logging#request-properties)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "046e5b94c2dbc64502fac1dee1546f7d0932c5b9"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg2MDgyNg==", "bodyText": "Oops..", "url": "https://github.com/line/armeria/pull/2820#discussion_r442860826", "createdAt": "2020-06-19T14:06:13Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1373,5 +1373,41 @@ public class MyAnnotatedService {\n     public HttpResponse update() { ... }\n }\n ```\n+\n+## Specifying the default service name\n+\n+The default name of service that served a request is the innermost class name of an annotated service.\n+The service name is often used as a meter tag or distributed trace's span name.\n+If you want to customize the default service name, then you can override the name by annotating\n+a class or method with <type://@ServiceName>.\n+\n+For example:\n+\n+```java\n+public class MyService {\n+    @Get(\"/\")\n+    public String get(ServiceRequestContext ctx) {\n+        assert ctx.log().partial().serviceName() == MyService.class.getName();\n+    }\n+}\n+\n+@ServiceName(\"my-service\")\n+public class MyService {\n+    @Get(\"/\")\n+    public String get(ServiceRequestContext ctx) {\n+        assert ctx.log().partial().serviceName() == \"my-service\";\n+    }\n+\n+    @ServiceName(\"my-post-service\")\n+    @Post(\"/\")\n+    public String post(ServiceRequestContext ctx) {\n+        assert ctx.log().partial().serviceName() == \"my-post-service\";\n+    }\n+}\n+```\n+\n+Please refer to\n+[Request properties](https://line.github.io/armeria/docs/advanced-structured-logging#request-properties)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1MTAzMA=="}, "originalCommit": {"oid": "046e5b94c2dbc64502fac1dee1546f7d0932c5b9"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDM3MTc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjoxOTowNlrOGmidBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwMjo0Njo1NlrOGmkWhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2MzU1Nw==", "bodyText": "Better using AnnotationUtil: https://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotationUtil.java", "url": "https://github.com/line/armeria/pull/2820#discussion_r443063557", "createdAt": "2020-06-19T22:19:06Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java", "diffHunk": "@@ -141,6 +143,16 @@\n             responseType = ResponseType.OTHER_OBJECTS;\n         }\n \n+        ServiceName serviceName = method.getAnnotation(ServiceName.class);\n+        if (serviceName == null) {\n+            serviceName = object.getClass().getAnnotation(ServiceName.class);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b7834ff9422f10fc9eef04abce5cbf740f4cfa"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5NDY2MQ==", "bodyText": "Thanks for the nice tip. \ud83d\ude00", "url": "https://github.com/line/armeria/pull/2820#discussion_r443094661", "createdAt": "2020-06-20T02:46:56Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java", "diffHunk": "@@ -141,6 +143,16 @@\n             responseType = ResponseType.OTHER_OBJECTS;\n         }\n \n+        ServiceName serviceName = method.getAnnotation(ServiceName.class);\n+        if (serviceName == null) {\n+            serviceName = object.getClass().getAnnotation(ServiceName.class);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2MzU1Nw=="}, "originalCommit": {"oid": "28b7834ff9422f10fc9eef04abce5cbf740f4cfa"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDM3MjM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/annotation/ServiceName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjoxOTo0MVrOGmidaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjoxOTo0MVrOGmidaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2MzY1OQ==", "bodyText": "How about breaking the line before .serviceName()?", "url": "https://github.com/line/armeria/pull/2820#discussion_r443063659", "createdAt": "2020-06-19T22:19:41Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/annotation/ServiceName.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Annotation for service name that is often used as a meter tag or distributed trace's span name.\n+ * You can override the default service name by annotating a class or method with {@link ServiceName}.\n+ * For example:<pre>{@code\n+ * > public class MyService {\n+ * >     @Get(\"/\")\n+ * >     public String get(ServiceRequestContext ctx) {\n+ * >         // The default service name\n+ * >         assert ctx.log().ensureAvailable(RequestLogProperty.NAME).serviceName()\n+ * >                   .equals(MyService.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b7834ff9422f10fc9eef04abce5cbf740f4cfa"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDM3NjY2OnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjoyMjo0OFrOGmigKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjoyMjo0OFrOGmigKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NDM2MA==", "bodyText": "I think this is too much to be a tip. How about moving/merging it to advanced-structured-logging?", "url": "https://github.com/line/armeria/pull/2820#discussion_r443064360", "createdAt": "2020-06-19T22:22:48Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1373,5 +1373,80 @@ public class MyAnnotatedService {\n     public HttpResponse update() { ... }\n }\n ```\n+\n+## Specifying the default service name\n+\n+The default name of an annotated service which served a request is the innermost class name.\n+The service name is often used as a meter tag or distributed trace's span name.\n+If you want to customize the default service name, then you can override the name by annotating\n+a class or method with <type://@ServiceName> like the below:\n+\n+```java\n+public class MyService {\n+    @Get(\"/\")\n+    public String get(ServiceRequestContext ctx) {\n+        assert ctx.log().ensureAvailable(RequestLogProperty.NAME).serviceName()\n+                  .equals(MyService.class.getName());\n+    }\n+}\n+\n+// Override the default service name by the class annotation\n+@ServiceName(\"my-service\")\n+public class MyService {\n+    @Get(\"/\")\n+    public String get(ServiceRequestContext ctx) {\n+        assert ctx.log().ensureAvailable(RequestLogProperty.NAME).serviceName()\n+                  .equals(\"my-service\");\n+    }\n+\n+    // Override the default service name by the method annotation\n+    @ServiceName(\"my-post-service\")\n+    @Post(\"/\")\n+    public String post(ServiceRequestContext ctx) {\n+        assert ctx.log().ensureAvailable(RequestLogProperty.NAME).serviceName()\n+                  .equals(\"my-post-service\");\n+    }\n+}\n+\n+// Or the default name could get overridden programmatically using a decorator.\n+ServerBuilder sb = Server.builder();\n+sb.annotatedService(\"/\", new MyService(), service -> {\n+    return service.decorate((delegate, ctx, req) -> {\n+        ctx.logBuilder().name(\"my-decorated-service\", ctx.method().name());\n+        return delegate.serve(ctx, req);\n+    });\n+});\n+```\n+\n+<Tip>\n+\n+Note that <type://RequestOnlyLog#name()> is safely accessed using\n+`ctx.log().ensureAvailable(RequestLogProperty.NAME)` only in your annotated service method.\n+Generally, it is recommended to use <type://RequestLogAccess#whenComplete()>.\n+Please see [Availability of properties](https://armeria.dev/docs/advanced-structured-logging#availability-of-properties)\n+before using it.\n+\n+If you access <type://RequestOnlyLog#name()> in a decorator or <type://HttpService>, you should use\n+<type://RequestLogAccess#whenComplete()> or <type://RequestLogAccess#whenAvailable(RequestLogProperty)>\n+with <type://RequestLogProperty#NAME>.\n+\n+```java\n+ServiceRequestContext ctx = ...\n+// Simply wait until a log is completed\n+ctx.log().whenComplete().thenApply(log -> {\n+    String serviceName = log.serviceName();\n+    ...\n+})\n+// If you are only interested in RequestOnlyLog.name()\n+ctx.log().whenAvailable(RequestLogProperty.NAME).thenApply(log -> {\n+    String serviceName = log.serviceName();\n+    ...\n+})\n+```\n+\n+</Tip>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b7834ff9422f10fc9eef04abce5cbf740f4cfa"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDM3ODQwOnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjoyMzo0OFrOGmihHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjoyMzo0OFrOGmihHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NDYwNA==", "bodyText": "'the service name' may be enough.", "url": "https://github.com/line/armeria/pull/2820#discussion_r443064604", "createdAt": "2020-06-19T22:23:48Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1373,5 +1373,80 @@ public class MyAnnotatedService {\n     public HttpResponse update() { ... }\n }\n ```\n+\n+## Specifying the default service name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b7834ff9422f10fc9eef04abce5cbf740f4cfa"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDM4MTIxOnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjoyNTozN1rOGmiiwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjoyNTozN1rOGmiiwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NTAyNQ==", "bodyText": "A service name is a human-readable string that is often used as a meter tag or distributed trace's span name. By default, an annotated service uses its class name as its service name. You can override it by annotating a client or method with ... like the following:", "url": "https://github.com/line/armeria/pull/2820#discussion_r443065025", "createdAt": "2020-06-19T22:25:37Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1373,5 +1373,80 @@ public class MyAnnotatedService {\n     public HttpResponse update() { ... }\n }\n ```\n+\n+## Specifying the default service name\n+\n+The default name of an annotated service which served a request is the innermost class name.\n+The service name is often used as a meter tag or distributed trace's span name.\n+If you want to customize the default service name, then you can override the name by annotating\n+a class or method with <type://@ServiceName> like the below:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b7834ff9422f10fc9eef04abce5cbf740f4cfa"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDM4MjE1OnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjoyNjoyNlrOGmijZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwMzoxODoyMFrOGmkddw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NTE4OQ==", "bodyText": "You don't need to use the full URL. /docs/.... will be enough IIRC.", "url": "https://github.com/line/armeria/pull/2820#discussion_r443065189", "createdAt": "2020-06-19T22:26:26Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1373,5 +1373,80 @@ public class MyAnnotatedService {\n     public HttpResponse update() { ... }\n }\n ```\n+\n+## Specifying the default service name\n+\n+The default name of an annotated service which served a request is the innermost class name.\n+The service name is often used as a meter tag or distributed trace's span name.\n+If you want to customize the default service name, then you can override the name by annotating\n+a class or method with <type://@ServiceName> like the below:\n+\n+```java\n+public class MyService {\n+    @Get(\"/\")\n+    public String get(ServiceRequestContext ctx) {\n+        assert ctx.log().ensureAvailable(RequestLogProperty.NAME).serviceName()\n+                  .equals(MyService.class.getName());\n+    }\n+}\n+\n+// Override the default service name by the class annotation\n+@ServiceName(\"my-service\")\n+public class MyService {\n+    @Get(\"/\")\n+    public String get(ServiceRequestContext ctx) {\n+        assert ctx.log().ensureAvailable(RequestLogProperty.NAME).serviceName()\n+                  .equals(\"my-service\");\n+    }\n+\n+    // Override the default service name by the method annotation\n+    @ServiceName(\"my-post-service\")\n+    @Post(\"/\")\n+    public String post(ServiceRequestContext ctx) {\n+        assert ctx.log().ensureAvailable(RequestLogProperty.NAME).serviceName()\n+                  .equals(\"my-post-service\");\n+    }\n+}\n+\n+// Or the default name could get overridden programmatically using a decorator.\n+ServerBuilder sb = Server.builder();\n+sb.annotatedService(\"/\", new MyService(), service -> {\n+    return service.decorate((delegate, ctx, req) -> {\n+        ctx.logBuilder().name(\"my-decorated-service\", ctx.method().name());\n+        return delegate.serve(ctx, req);\n+    });\n+});\n+```\n+\n+<Tip>\n+\n+Note that <type://RequestOnlyLog#name()> is safely accessed using\n+`ctx.log().ensureAvailable(RequestLogProperty.NAME)` only in your annotated service method.\n+Generally, it is recommended to use <type://RequestLogAccess#whenComplete()>.\n+Please see [Availability of properties](https://armeria.dev/docs/advanced-structured-logging#availability-of-properties)\n+before using it.\n+\n+If you access <type://RequestOnlyLog#name()> in a decorator or <type://HttpService>, you should use\n+<type://RequestLogAccess#whenComplete()> or <type://RequestLogAccess#whenAvailable(RequestLogProperty)>\n+with <type://RequestLogProperty#NAME>.\n+\n+```java\n+ServiceRequestContext ctx = ...\n+// Simply wait until a log is completed\n+ctx.log().whenComplete().thenApply(log -> {\n+    String serviceName = log.serviceName();\n+    ...\n+})\n+// If you are only interested in RequestOnlyLog.name()\n+ctx.log().whenAvailable(RequestLogProperty.NAME).thenApply(log -> {\n+    String serviceName = log.serviceName();\n+    ...\n+})\n+```\n+\n+</Tip>\n+\n+Please refer to [Request properties](https://armeria.dev/docs/advanced-structured-logging#request-properties)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b7834ff9422f10fc9eef04abce5cbf740f4cfa"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5NjQzOQ==", "bodyText": "Ahh... yes", "url": "https://github.com/line/armeria/pull/2820#discussion_r443096439", "createdAt": "2020-06-20T03:18:20Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1373,5 +1373,80 @@ public class MyAnnotatedService {\n     public HttpResponse update() { ... }\n }\n ```\n+\n+## Specifying the default service name\n+\n+The default name of an annotated service which served a request is the innermost class name.\n+The service name is often used as a meter tag or distributed trace's span name.\n+If you want to customize the default service name, then you can override the name by annotating\n+a class or method with <type://@ServiceName> like the below:\n+\n+```java\n+public class MyService {\n+    @Get(\"/\")\n+    public String get(ServiceRequestContext ctx) {\n+        assert ctx.log().ensureAvailable(RequestLogProperty.NAME).serviceName()\n+                  .equals(MyService.class.getName());\n+    }\n+}\n+\n+// Override the default service name by the class annotation\n+@ServiceName(\"my-service\")\n+public class MyService {\n+    @Get(\"/\")\n+    public String get(ServiceRequestContext ctx) {\n+        assert ctx.log().ensureAvailable(RequestLogProperty.NAME).serviceName()\n+                  .equals(\"my-service\");\n+    }\n+\n+    // Override the default service name by the method annotation\n+    @ServiceName(\"my-post-service\")\n+    @Post(\"/\")\n+    public String post(ServiceRequestContext ctx) {\n+        assert ctx.log().ensureAvailable(RequestLogProperty.NAME).serviceName()\n+                  .equals(\"my-post-service\");\n+    }\n+}\n+\n+// Or the default name could get overridden programmatically using a decorator.\n+ServerBuilder sb = Server.builder();\n+sb.annotatedService(\"/\", new MyService(), service -> {\n+    return service.decorate((delegate, ctx, req) -> {\n+        ctx.logBuilder().name(\"my-decorated-service\", ctx.method().name());\n+        return delegate.serve(ctx, req);\n+    });\n+});\n+```\n+\n+<Tip>\n+\n+Note that <type://RequestOnlyLog#name()> is safely accessed using\n+`ctx.log().ensureAvailable(RequestLogProperty.NAME)` only in your annotated service method.\n+Generally, it is recommended to use <type://RequestLogAccess#whenComplete()>.\n+Please see [Availability of properties](https://armeria.dev/docs/advanced-structured-logging#availability-of-properties)\n+before using it.\n+\n+If you access <type://RequestOnlyLog#name()> in a decorator or <type://HttpService>, you should use\n+<type://RequestLogAccess#whenComplete()> or <type://RequestLogAccess#whenAvailable(RequestLogProperty)>\n+with <type://RequestLogProperty#NAME>.\n+\n+```java\n+ServiceRequestContext ctx = ...\n+// Simply wait until a log is completed\n+ctx.log().whenComplete().thenApply(log -> {\n+    String serviceName = log.serviceName();\n+    ...\n+})\n+// If you are only interested in RequestOnlyLog.name()\n+ctx.log().whenAvailable(RequestLogProperty.NAME).thenApply(log -> {\n+    String serviceName = log.serviceName();\n+    ...\n+})\n+```\n+\n+</Tip>\n+\n+Please refer to [Request properties](https://armeria.dev/docs/advanced-structured-logging#request-properties)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NTE4OQ=="}, "originalCommit": {"oid": "28b7834ff9422f10fc9eef04abce5cbf740f4cfa"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2378, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}