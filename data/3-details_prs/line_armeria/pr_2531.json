{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NTAyNTU5", "number": 2531, "title": "More ways to customize export keys for `RequestContextExporter`", "bodyText": "Motivation:\nA user can export built-in properties and context attributes with predefined key or prefix.\nSometimes, he or she wants to export it with a different key for such as JSON structured logging.\nPlease see #2512 for the detail discussion.\nModifications:\n\nAdd new builder methods to RequestContextBuilder for customizing the exporting key.\nIntroduce a new alias format for Logback.\n\n<alias>=<build-in properties>\n<alias>=attr:com.example.Foo#ATTR_BAR\nXML examples:\n<export>request_id=req.id</export>\n<export>my_foo_bar=attr:com.example.Foo#ATTR_BAR</export>\n\n\n\nMove exporting logics from RequestContextExporter into BuiltInProperty.\nAdd req.content for the RPC params and the content preview of the request\nAdd res.content for the RPC result and the content preview of the response\nBreaking changes\n\nRequestContextExporterBuilder.addAttribute(alias, attrKey...) does not prepend attrs. to the given alias anymore. You should set the prefix explicitly.\nAttributeKey<String> ATTR1 = AttributeKey.valueOf(CustomValue.class, \"ATTR1\");\n// Before\nRequestContextExporter.builder()\n                      .addAttribute(\"my-attr\", ATTR)\n                       .build();\n// After\nRequestContextExporter.builder()\n                      .addAttribute(\"attrs.my-attr\", ATTR)\n                      .build();\n\nRemove req.rpc_method in favor of req.name #2413\nRemove req.rpc_params in favor of req.content\nRemove req.rpc_result in favor of res.content\n\n\n\nResult:\nYou can now customize an MDC key for RequestContext through Logback configuration.\nFixes: #2512", "createdAt": "2020-02-25T10:44:03Z", "url": "https://github.com/line/armeria/pull/2531", "merged": true, "mergeCommit": {"oid": "48f413285c15b269d4ccbc8ccfb5b5e5cfbb799f"}, "closed": true, "closedAt": "2020-02-28T12:02:15Z", "author": {"login": "ikhoon"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHvwJogH2gAyMzc5NTAyNTU5OjY3ZmQyMjAyOGY0OGM3ZjU1ZmJjMzVjMGE1YjliNWZmNjRkY2RhNDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIubq8AFqTM2NjMzOTc2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "67fd22028f48c7f55fbc35c0a5b9b5ff64dcda42", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/67fd22028f48c7f55fbc35c0a5b9b5ff64dcda42", "committedDate": "2020-02-25T10:41:41Z", "message": "Provide a way to customize export keys for `RequestContextExporter`\n\nMotivation:\n\nA user can export built-in properties and context attributes with predefined key or prefix.\nSometiems, he / she wants export it with a different key for `JSON` structured logging.\nPlease see #2512 for more detail discussion.\n\nModifications:\n\n- Add new builder methods to `RequestContextBuilder` for customizing the exporting key\n- Introduce new alias format for Logback.\n  - <alias>=<build-in properties>\n  - <alias>=attr:com.example.Foo#ATTR_BAR\n  For example:\n  ```xml\n  <export>request_id=req.id</export>\n  <export>my_foo_bar=attr:com.example.Foo#ATTR_BAR</export>\n  ```\n- Move exporting from `RequestContextExporter` into `BuiltInProperty`\n\nResult:\nYou can now customize an MDC key for `RequestContext` through logback configuration.\nFixes: #2512"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f064deae887ec6d1b23e26698697ebc1f0e87d6", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/8f064deae887ec6d1b23e26698697ebc1f0e87d6", "committedDate": "2020-02-25T12:55:34Z", "message": "Fix broken tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NDM1MjE1", "url": "https://github.com/line/armeria/pull/2531#pullrequestreview-365435215", "createdAt": "2020-02-27T06:15:06Z", "commit": {"oid": "8f064deae887ec6d1b23e26698697ebc1f0e87d6"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoxNTowN1rOFvGUlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoyNDoyNlrOFvGeKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMDk2Ng==", "bodyText": "Probably not worth a method?", "url": "https://github.com/line/armeria/pull/2531#discussion_r384930966", "createdAt": "2020-02-27T06:15:07Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/BuiltInProperty.java", "diffHunk": "@@ -182,9 +309,82 @@\n                         .collect(toImmutableList());\n     }\n \n+    static BuiltInProperty findByKey(String key) {\n+        return keyToEnum.entrySet().stream()\n+                        .filter(e -> e.getKey().equals(key))\n+                        .map(Entry::getValue)\n+                        .findFirst().orElse(null);\n+    }\n+\n+    private static BaseEncoding lowerCasedBase16() {\n+        return lowerCasedBase16;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f064deae887ec6d1b23e26698697ebc1f0e87d6"}, "originalPosition": 316}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMTMyOQ==", "bodyText": "What do you think about using an array like other ExportEntrys for better export performance?", "url": "https://github.com/line/armeria/pull/2531#discussion_r384931329", "createdAt": "2020-02-27T06:16:17Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RequestContextExporter.java", "diffHunk": "@@ -101,7 +59,7 @@ public static RequestContextExporterBuilder builder() {\n         return new RequestContextExporterBuilder();\n     }\n \n-    private final ImmutableSet<BuiltInProperty> builtInPropertySet;\n+    private final ImmutableSet<ExportEntry<BuiltInProperty>> builtInPropertySet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f064deae887ec6d1b23e26698697ebc1f0e87d6"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMjEyMA==", "bodyText": "How about making a breaking change here? We could remove addAttribute(..., boolean) and never prepend \"attrs.\" for simplicity. \"attrs.\" could be prepended only when a user used \"attrs.foo:....\".", "url": "https://github.com/line/armeria/pull/2531#discussion_r384932120", "createdAt": "2020-02-27T06:19:31Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RequestContextExporterBuilder.java", "diffHunk": "@@ -75,35 +88,72 @@ public boolean containsBuiltIn(BuiltInProperty property) {\n      */\n     @Deprecated\n     public Set<BuiltInProperty> getBuiltIns() {\n-        return ImmutableSet.copyOf(builtIns);\n+        return builtIns.stream().map(entry -> entry.key).collect(toImmutableSet());\n     }\n \n     /**\n      * Adds the specified {@link AttributeKey} to the export list.\n+     * The specified {@code alias} prefixed with {@value PREFIX_ATTRS} is used for the export key.\n+     * This method is a shortcut for {@code addAttribute(alias, attrKey, true)}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f064deae887ec6d1b23e26698697ebc1f0e87d6"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMjk1Nw==", "bodyText": "Customizing MDC keys or Customizing an MDC key", "url": "https://github.com/line/armeria/pull/2531#discussion_r384932957", "createdAt": "2020-02-27T06:22:46Z", "author": {"login": "trustin"}, "path": "site/src/sphinx/advanced-logging.rst", "diffHunk": "@@ -134,3 +139,24 @@ as the 3rd component of the ``<export />`` element in the XML configuration:\n       </appender>\n       ...\n     </configuration>\n+\n+Customize MDC key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f064deae887ec6d1b23e26698697ebc1f0e87d6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMzQxNg==", "bodyText": "the pre-defined the MDC key -> the pre-defined MDC key\nby prepending an alias and a equals sign (=) to it.\nHow about making 'For example,...` appear before 'Note that ...'?", "url": "https://github.com/line/armeria/pull/2531#discussion_r384933416", "createdAt": "2020-02-27T06:24:26Z", "author": {"login": "trustin"}, "path": "site/src/sphinx/advanced-logging.rst", "diffHunk": "@@ -134,3 +139,24 @@ as the 3rd component of the ``<export />`` element in the XML configuration:\n       </appender>\n       ...\n     </configuration>\n+\n+Customize MDC key\n+-----------------\n+You can override the pre-defined the MDC key by adding an alias in front of it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f064deae887ec6d1b23e26698697ebc1f0e87d6"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b16a945898c1fe8ed1a7db058e874afac5c9fde", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/7b16a945898c1fe8ed1a7db058e874afac5c9fde", "committedDate": "2020-02-27T07:38:24Z", "message": "Address comments by @trustin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NjE2ODQw", "url": "https://github.com/line/armeria/pull/2531#pullrequestreview-365616840", "createdAt": "2020-02-27T11:46:42Z", "commit": {"oid": "7b16a945898c1fe8ed1a7db058e874afac5c9fde"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo0Njo0MlrOFvPOcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo0Njo0MlrOFvPOcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3Njg0OQ==", "bodyText": "the pre-defined the -> the pre-defined", "url": "https://github.com/line/armeria/pull/2531#discussion_r385076849", "createdAt": "2020-02-27T11:46:42Z", "author": {"login": "trustin"}, "path": "site/src/sphinx/advanced-logging.rst", "diffHunk": "@@ -134,3 +139,25 @@ as the 3rd component of the ``<export />`` element in the XML configuration:\n       </appender>\n       ...\n     </configuration>\n+\n+Customizing MDC keys\n+--------------------\n+You can override the pre-defined the MDC key by prepending an alias and a equals sign (=) to it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b16a945898c1fe8ed1a7db058e874afac5c9fde"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NjE3NjA2", "url": "https://github.com/line/armeria/pull/2531#pullrequestreview-365617606", "createdAt": "2020-02-27T11:48:06Z", "commit": {"oid": "7b16a945898c1fe8ed1a7db058e874afac5c9fde"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo0ODowNlrOFvPQvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo0ODowNlrOFvPQvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3NzQzOA==", "bodyText": "How about:\nNote that a custom MDC key cannot be used with a wildcard expression such as * or req.*\n\n.. because this is somewhat vague.\nI also see a space between req. and *.", "url": "https://github.com/line/armeria/pull/2531#discussion_r385077438", "createdAt": "2020-02-27T11:48:06Z", "author": {"login": "trustin"}, "path": "site/src/sphinx/advanced-logging.rst", "diffHunk": "@@ -134,3 +139,25 @@ as the 3rd component of the ``<export />`` element in the XML configuration:\n       </appender>\n       ...\n     </configuration>\n+\n+Customizing MDC keys\n+--------------------\n+You can override the pre-defined the MDC key by prepending an alias and a equals sign (=) to it.\n+For example, if you want to change ``req.id`` to ``request_id``, use ``request_id=req.id``.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <configuration>\n+      ...\n+      <appender name=\"RCEA\" class=\"com.linecorp.armeria.common.logback.RequestContextExportingAppender\">\n+        ...\n+        <export>remote_id=remote.id</export>\n+        <export>UA=req.http_headers.user-agent</export>\n+        <export>some_value=attr:com.example.AttrKeys#SOME_VALUE</exports>\n+        ...\n+      </appender>\n+      ...\n+    </configuration>\n+\n+Note that this cannot be used with wildcard expressions ``*`` or ``req. *``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b16a945898c1fe8ed1a7db058e874afac5c9fde"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "462f6a69f6a6e9f16df9888f7fd31b13f25e2bb3", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/462f6a69f6a6e9f16df9888f7fd31b13f25e2bb3", "committedDate": "2020-02-27T11:50:22Z", "message": "Address comments by @trustin / Update documentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MTY0NzU2", "url": "https://github.com/line/armeria/pull/2531#pullrequestreview-366164756", "createdAt": "2020-02-28T05:14:29Z", "commit": {"oid": "462f6a69f6a6e9f16df9888f7fd31b13f25e2bb3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06757c434df558dc0fc2a36ec1687efb48808d12", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/06757c434df558dc0fc2a36ec1687efb48808d12", "committedDate": "2020-02-28T06:39:05Z", "message": "Add nullable on BuiltInProperty.findByKey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e91ff73a96dd0df33e85328c3bc0d4a561326de", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/8e91ff73a96dd0df33e85328c3bc0d4a561326de", "committedDate": "2020-02-28T08:35:00Z", "message": "Address comments by @minwoox\n\n- Remove `req.rpc_method` in favor of `req.name`\n- Remove `req.rpc_params` in favor of `req.content`\n- Remove `req.rpc_result` in favor of `res.content`\n- Add `req.content` for the RPC params and the content preview of the request\n- Add `res.content` for the RPC result and the content preview of the response"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74d8c16d71cb68d0c27004b4d219fc0a127a183d", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/74d8c16d71cb68d0c27004b4d219fc0a127a183d", "committedDate": "2020-02-28T08:40:36Z", "message": "Remove table summary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e350d4371bd6f4a47f01d9bac6fc0d5791715c7b", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/e350d4371bd6f4a47f01d9bac6fc0d5791715c7b", "committedDate": "2020-02-28T08:48:53Z", "message": "Fix Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0dc14191e6689059dd9a04bac405cc09eaf9906", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/f0dc14191e6689059dd9a04bac405cc09eaf9906", "committedDate": "2020-02-28T09:23:57Z", "message": "Fix documentation, SOME_VALUE -> SOME_KEY"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MTkxMTYz", "url": "https://github.com/line/armeria/pull/2531#pullrequestreview-366191163", "createdAt": "2020-02-28T06:57:22Z", "commit": {"oid": "06757c434df558dc0fc2a36ec1687efb48808d12"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNjo1NzoyMlrOFvrKYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODo0OTowM1rOFvtcpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUzNDU2Mw==", "bodyText": "nit: an equals", "url": "https://github.com/line/armeria/pull/2531#discussion_r385534563", "createdAt": "2020-02-28T06:57:22Z", "author": {"login": "minwoox"}, "path": "site/src/sphinx/advanced-logging.rst", "diffHunk": "@@ -134,3 +139,25 @@ as the 3rd component of the ``<export />`` element in the XML configuration:\n       </appender>\n       ...\n     </configuration>\n+\n+Customizing MDC keys\n+--------------------\n+You can override the pre-defined MDC key by prepending an alias and a equals sign (=) to it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06757c434df558dc0fc2a36ec1687efb48808d12"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3MTgzNg==", "bodyText": "nit: The preview content of the", "url": "https://github.com/line/armeria/pull/2531#discussion_r385571836", "createdAt": "2020-02-28T08:48:42Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/BuiltInProperty.java", "diffHunk": "@@ -39,131 +56,259 @@\n      * {@code \"remote.host\"} - the host name part of the remote socket address. Unavailable if the connection\n      * is not established yet.\n      */\n-    REMOTE_HOST(\"remote.host\"),\n+    REMOTE_HOST(\"remote.host\", log -> {\n+        final InetSocketAddress addr = log.context().remoteAddress();\n+        return addr != null ? addr.getHostString() : null;\n+    }),\n     /**\n      * {@code \"remote.ip\"} - the IP address part of the remote socket address. Unavailable if the connection\n      * is not established yet.\n      */\n-    REMOTE_IP(\"remote.ip\"),\n+    REMOTE_IP(\"remote.ip\", log -> {\n+        final InetSocketAddress addr = log.context().remoteAddress();\n+        return addr != null ? addr.getAddress().getHostAddress() : null;\n+    }),\n     /**\n      * {@code \"remote.port\"} - the port number part of the remote socket address. Unavailable if the connection\n      * is not established yet.\n      */\n-    REMOTE_PORT(\"remote.port\"),\n+    REMOTE_PORT(\"remote.port\", log -> {\n+        final InetSocketAddress addr = log.context().remoteAddress();\n+        return addr != null ? String.valueOf(addr.getPort()) : null;\n+    }),\n     /**\n      * {@code \"local.host\"} - the host name part of the local socket address. Unavailable if the connection\n      * is not established yet.\n      */\n-    LOCAL_HOST(\"local.host\"),\n+    LOCAL_HOST(\"local.host\", log -> {\n+        final InetSocketAddress addr = log.context().localAddress();\n+        return addr != null ? addr.getHostString() : null;\n+    }),\n     /**\n      * {@code \"local.ip\"} - the IP address part of the local socket address. Unavailable if the connection\n      * is not established yet.\n      */\n-    LOCAL_IP(\"local.ip\"),\n+    LOCAL_IP(\"local.ip\", log -> {\n+        final InetSocketAddress addr = log.context().localAddress();\n+        return addr != null ? addr.getAddress().getHostAddress() : null;\n+    }),\n     /**\n      * {@code \"local.port\"} - the port number part of the local socket address. Unavailable if the connection\n      * is not established yet.\n      */\n-    LOCAL_PORT(\"local.port\"),\n+    LOCAL_PORT(\"local.port\", log -> {\n+        final InetSocketAddress addr = log.context().localAddress();\n+        return addr != null ? String.valueOf(addr.getPort()) : null;\n+    }),\n     /**\n      * {@code \"client.ip\"} - the IP address who initiated a request. Unavailable if the connection is not\n      * established yet.\n      */\n-    CLIENT_IP(\"client.ip\"),\n+    CLIENT_IP(\"client.ip\", log -> {\n+        final RequestContext ctx = log.context();\n+        final InetAddress caddr =\n+                ctx instanceof ServiceRequestContext ? ((ServiceRequestContext) ctx).clientAddress() : null;\n+        return caddr != null ? caddr.getHostAddress() : null;\n+    }),\n     /**\n      * {@code \"scheme\"} - the scheme of the request, represented by {@link Scheme#uriText()}, such as\n      * {@code \"tbinary+h2\"}.\n      */\n-    SCHEME(\"scheme\"),\n+    SCHEME(\"scheme\", log -> {\n+        if (log.isAvailable(RequestLogProperty.SCHEME)) {\n+            return log.scheme().uriText();\n+        } else {\n+            return \"unknown+\" + log.context().sessionProtocol().uriText();\n+        }\n+    }),\n     /**\n      * {@code \"elapsed_nanos\"} - the amount of time in nanoseconds taken to handle the request. Unavailable if\n      * the request was not handled completely yet.\n      */\n-    ELAPSED_NANOS(\"elapsed_nanos\"),\n+    ELAPSED_NANOS(\"elapsed_nanos\", log -> {\n+        if (log.isAvailable(RequestLogProperty.RESPONSE_END_TIME)) {\n+            return String.valueOf(log.totalDurationNanos());\n+        }\n+        return null;\n+    }),\n     /**\n      * {@code \"req.direction\"} - the direction of the request, which is {@code \"INBOUND\"} for servers and\n-     *  {@code \"OUTBOUND\"} for clients.\n+     * {@code \"OUTBOUND\"} for clients.\n      */\n-    REQ_DIRECTION(\"req.direction\"),\n+    REQ_DIRECTION(\"req.direction\", log -> {\n+        final RequestContext ctx = log.context();\n+        if (ctx instanceof ServiceRequestContext) {\n+            return \"INBOUND\";\n+        } else if (ctx instanceof ClientRequestContext) {\n+            return \"OUTBOUND\";\n+        } else {\n+            return \"UNKNOWN\";\n+        }\n+    }),\n     /**\n      * {@code \"req.authority\"} - the authority of the request, represented as {@code \"<hostname>[:<port>]\"}.\n      * The port number is omitted when it is same with the default port number of the current {@link Scheme}.\n      */\n-    REQ_AUTHORITY(\"req.authority\"),\n+    REQ_AUTHORITY(\"req.authority\", BuiltInProperty::getAuthority),\n     /**\n      * {@code \"req.id\"} - the ID of the request.\n      */\n-    REQ_ID(\"req.id\"),\n+    REQ_ID(\"req.id\", log -> log.context().id().text()),\n     /**\n      * {@code \"req.path\"} - the path of the request.\n      */\n-    REQ_PATH(\"req.path\"),\n+    REQ_PATH(\"req.path\", log -> log.context().path()),\n     /**\n      * {@code \"req.query\"} - the query of the request.\n      */\n-    REQ_QUERY(\"req.query\"),\n+    REQ_QUERY(\"req.query\", log -> log.context().query()),\n     /**\n      * {@code \"req.method\"} - the method name of the request, such as {@code \"GET\"} and {@code \"POST\"}.\n      */\n-    REQ_METHOD(\"req.method\"),\n+    REQ_METHOD(\"req.method\", log -> log.context().method().name()),\n     /**\n      * {@code \"req.name\"} - the human-readable name of the request, such as RPC method name or annotated\n      * service method name. This property is often used as a meter tag or distributed trace's span name.\n      */\n-    REQ_NAME(\"req.name\"),\n-    /**\n-     * {@code \"req.rpc_method\"} - the RPC method name of the request. Unavailable if the current request is not\n-     * an RPC request or is not decoded yet.\n-     */\n-    REQ_RPC_METHOD(\"req.rpc_method\"),\n-    /**\n-     * {@code \"req.rpc_params\"} - the RPC parameter list, represented by {@link Arrays#toString(Object...)}.\n-     * Unavailable if the current request is not an RPC request or is not decoded yet.\n-     */\n-    REQ_RPC_PARAMS(\"req.rpc_params\"),\n+    REQ_NAME(\"req.name\", log -> log.isAvailable(RequestLogProperty.NAME) ? log.name() : null),\n+\n     /**\n      * {@code \"req.content_length\"} - the byte-length of the request content. Unavailable if the current\n      * request is not fully received yet.\n      */\n-    REQ_CONTENT_LENGTH(\"req.content_length\"),\n+    REQ_CONTENT_LENGTH(\"req.content_length\", log -> {\n+        if (log.isAvailable(RequestLogProperty.REQUEST_LENGTH)) {\n+            return String.valueOf(log.requestLength());\n+        }\n+        return null;\n+    }),\n+\n     /**\n-     * {@code \"res.status_code\"} - the protocol-specific integer representation of the response status code.\n-     * Unavailable if the current response is not fully sent yet.\n+     * {@code \"req.content\"} - the content of the request. The content may have one of the following:\n+     *\n+     * <table>\n+     * <tr><th>request type</th><th>description</th></tr>\n+     *\n+     * <tr><td>RPC</td>\n+     * <td>The RPC parameter list, represented by {@link Arrays#toString(Object...)} for the {@link RpcRequest}.\n+     * Unavailable if the current request is not an RPC request or is not decoded yet.</td></tr>\n+     *\n+     * <tr><td>HTTP</td>\n+     * <td>The preview of request content of the {@link Request}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74d8c16d71cb68d0c27004b4d219fc0a127a183d"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3MjAwNQ==", "bodyText": "ditto", "url": "https://github.com/line/armeria/pull/2531#discussion_r385572005", "createdAt": "2020-02-28T08:49:03Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/BuiltInProperty.java", "diffHunk": "@@ -39,131 +56,259 @@\n      * {@code \"remote.host\"} - the host name part of the remote socket address. Unavailable if the connection\n      * is not established yet.\n      */\n-    REMOTE_HOST(\"remote.host\"),\n+    REMOTE_HOST(\"remote.host\", log -> {\n+        final InetSocketAddress addr = log.context().remoteAddress();\n+        return addr != null ? addr.getHostString() : null;\n+    }),\n     /**\n      * {@code \"remote.ip\"} - the IP address part of the remote socket address. Unavailable if the connection\n      * is not established yet.\n      */\n-    REMOTE_IP(\"remote.ip\"),\n+    REMOTE_IP(\"remote.ip\", log -> {\n+        final InetSocketAddress addr = log.context().remoteAddress();\n+        return addr != null ? addr.getAddress().getHostAddress() : null;\n+    }),\n     /**\n      * {@code \"remote.port\"} - the port number part of the remote socket address. Unavailable if the connection\n      * is not established yet.\n      */\n-    REMOTE_PORT(\"remote.port\"),\n+    REMOTE_PORT(\"remote.port\", log -> {\n+        final InetSocketAddress addr = log.context().remoteAddress();\n+        return addr != null ? String.valueOf(addr.getPort()) : null;\n+    }),\n     /**\n      * {@code \"local.host\"} - the host name part of the local socket address. Unavailable if the connection\n      * is not established yet.\n      */\n-    LOCAL_HOST(\"local.host\"),\n+    LOCAL_HOST(\"local.host\", log -> {\n+        final InetSocketAddress addr = log.context().localAddress();\n+        return addr != null ? addr.getHostString() : null;\n+    }),\n     /**\n      * {@code \"local.ip\"} - the IP address part of the local socket address. Unavailable if the connection\n      * is not established yet.\n      */\n-    LOCAL_IP(\"local.ip\"),\n+    LOCAL_IP(\"local.ip\", log -> {\n+        final InetSocketAddress addr = log.context().localAddress();\n+        return addr != null ? addr.getAddress().getHostAddress() : null;\n+    }),\n     /**\n      * {@code \"local.port\"} - the port number part of the local socket address. Unavailable if the connection\n      * is not established yet.\n      */\n-    LOCAL_PORT(\"local.port\"),\n+    LOCAL_PORT(\"local.port\", log -> {\n+        final InetSocketAddress addr = log.context().localAddress();\n+        return addr != null ? String.valueOf(addr.getPort()) : null;\n+    }),\n     /**\n      * {@code \"client.ip\"} - the IP address who initiated a request. Unavailable if the connection is not\n      * established yet.\n      */\n-    CLIENT_IP(\"client.ip\"),\n+    CLIENT_IP(\"client.ip\", log -> {\n+        final RequestContext ctx = log.context();\n+        final InetAddress caddr =\n+                ctx instanceof ServiceRequestContext ? ((ServiceRequestContext) ctx).clientAddress() : null;\n+        return caddr != null ? caddr.getHostAddress() : null;\n+    }),\n     /**\n      * {@code \"scheme\"} - the scheme of the request, represented by {@link Scheme#uriText()}, such as\n      * {@code \"tbinary+h2\"}.\n      */\n-    SCHEME(\"scheme\"),\n+    SCHEME(\"scheme\", log -> {\n+        if (log.isAvailable(RequestLogProperty.SCHEME)) {\n+            return log.scheme().uriText();\n+        } else {\n+            return \"unknown+\" + log.context().sessionProtocol().uriText();\n+        }\n+    }),\n     /**\n      * {@code \"elapsed_nanos\"} - the amount of time in nanoseconds taken to handle the request. Unavailable if\n      * the request was not handled completely yet.\n      */\n-    ELAPSED_NANOS(\"elapsed_nanos\"),\n+    ELAPSED_NANOS(\"elapsed_nanos\", log -> {\n+        if (log.isAvailable(RequestLogProperty.RESPONSE_END_TIME)) {\n+            return String.valueOf(log.totalDurationNanos());\n+        }\n+        return null;\n+    }),\n     /**\n      * {@code \"req.direction\"} - the direction of the request, which is {@code \"INBOUND\"} for servers and\n-     *  {@code \"OUTBOUND\"} for clients.\n+     * {@code \"OUTBOUND\"} for clients.\n      */\n-    REQ_DIRECTION(\"req.direction\"),\n+    REQ_DIRECTION(\"req.direction\", log -> {\n+        final RequestContext ctx = log.context();\n+        if (ctx instanceof ServiceRequestContext) {\n+            return \"INBOUND\";\n+        } else if (ctx instanceof ClientRequestContext) {\n+            return \"OUTBOUND\";\n+        } else {\n+            return \"UNKNOWN\";\n+        }\n+    }),\n     /**\n      * {@code \"req.authority\"} - the authority of the request, represented as {@code \"<hostname>[:<port>]\"}.\n      * The port number is omitted when it is same with the default port number of the current {@link Scheme}.\n      */\n-    REQ_AUTHORITY(\"req.authority\"),\n+    REQ_AUTHORITY(\"req.authority\", BuiltInProperty::getAuthority),\n     /**\n      * {@code \"req.id\"} - the ID of the request.\n      */\n-    REQ_ID(\"req.id\"),\n+    REQ_ID(\"req.id\", log -> log.context().id().text()),\n     /**\n      * {@code \"req.path\"} - the path of the request.\n      */\n-    REQ_PATH(\"req.path\"),\n+    REQ_PATH(\"req.path\", log -> log.context().path()),\n     /**\n      * {@code \"req.query\"} - the query of the request.\n      */\n-    REQ_QUERY(\"req.query\"),\n+    REQ_QUERY(\"req.query\", log -> log.context().query()),\n     /**\n      * {@code \"req.method\"} - the method name of the request, such as {@code \"GET\"} and {@code \"POST\"}.\n      */\n-    REQ_METHOD(\"req.method\"),\n+    REQ_METHOD(\"req.method\", log -> log.context().method().name()),\n     /**\n      * {@code \"req.name\"} - the human-readable name of the request, such as RPC method name or annotated\n      * service method name. This property is often used as a meter tag or distributed trace's span name.\n      */\n-    REQ_NAME(\"req.name\"),\n-    /**\n-     * {@code \"req.rpc_method\"} - the RPC method name of the request. Unavailable if the current request is not\n-     * an RPC request or is not decoded yet.\n-     */\n-    REQ_RPC_METHOD(\"req.rpc_method\"),\n-    /**\n-     * {@code \"req.rpc_params\"} - the RPC parameter list, represented by {@link Arrays#toString(Object...)}.\n-     * Unavailable if the current request is not an RPC request or is not decoded yet.\n-     */\n-    REQ_RPC_PARAMS(\"req.rpc_params\"),\n+    REQ_NAME(\"req.name\", log -> log.isAvailable(RequestLogProperty.NAME) ? log.name() : null),\n+\n     /**\n      * {@code \"req.content_length\"} - the byte-length of the request content. Unavailable if the current\n      * request is not fully received yet.\n      */\n-    REQ_CONTENT_LENGTH(\"req.content_length\"),\n+    REQ_CONTENT_LENGTH(\"req.content_length\", log -> {\n+        if (log.isAvailable(RequestLogProperty.REQUEST_LENGTH)) {\n+            return String.valueOf(log.requestLength());\n+        }\n+        return null;\n+    }),\n+\n     /**\n-     * {@code \"res.status_code\"} - the protocol-specific integer representation of the response status code.\n-     * Unavailable if the current response is not fully sent yet.\n+     * {@code \"req.content\"} - the content of the request. The content may have one of the following:\n+     *\n+     * <table>\n+     * <tr><th>request type</th><th>description</th></tr>\n+     *\n+     * <tr><td>RPC</td>\n+     * <td>The RPC parameter list, represented by {@link Arrays#toString(Object...)} for the {@link RpcRequest}.\n+     * Unavailable if the current request is not an RPC request or is not decoded yet.</td></tr>\n+     *\n+     * <tr><td>HTTP</td>\n+     * <td>The preview of request content of the {@link Request}.\n+     * Unavailable if the preview is disabled or not fully received yet.</td></tr>\n+     *\n+     * </table>\n      */\n-    RES_STATUS_CODE(\"res.status_code\"),\n+    REQ_CONTENT(\"req.content\", log -> {\n+        if (log.isAvailable(RequestLogProperty.REQUEST_CONTENT)) {\n+            final Object requestContent = log.requestContent();\n+            if (requestContent instanceof RpcRequest) {\n+                return String.valueOf(((RpcRequest) requestContent).params());\n+            }\n+        }\n+        if (log.isAvailable(RequestLogProperty.REQUEST_CONTENT_PREVIEW)) {\n+            return log.requestContentPreview();\n+        }\n+        return null;\n+    }),\n+\n     /**\n-     * {@code \"res.rpc_result\"} - the RPC result value of the response. Unavailable if the current response\n-     * is not fully sent yet.\n+     * {@code \"res.status_code\"} - the protocol-specific integer representation of the response status code.\n+     * Unavailable if the current response is not fully sent yet.\n      */\n-    RES_RPC_RESULT(\"res.rpc_result\"),\n+    RES_STATUS_CODE(\"res.status_code\", log -> {\n+        if (log.isAvailable(RequestLogProperty.RESPONSE_HEADERS)) {\n+            return log.responseHeaders().status().codeAsText();\n+        }\n+        return null;\n+    }),\n+\n     /**\n      * {@code \"res.content_length\"} - the byte-length of the response content. Unavailable if the current\n      * response is not fully sent yet.\n      */\n-    RES_CONTENT_LENGTH(\"res.content_length\"),\n+    RES_CONTENT_LENGTH(\"res.content_length\", log -> {\n+        if (log.isAvailable(RequestLogProperty.RESPONSE_LENGTH)) {\n+            return String.valueOf(log.responseLength());\n+        }\n+        return null;\n+    }),\n+\n+    /**\n+     * {@code \"res.content\"} - the content of the request. The content may have one of the following:\n+     *\n+     * <table>\n+     * <tr><th>response type</th><th>description</th></tr>\n+     *\n+     * <tr><td>RPC</td>\n+     * <td>The RPC result value of the {@link RpcResponse}.\n+     * Unavailable if the current response is not fully sent yet.</td></tr>\n+     *\n+     * <tr><td>HTTP</td>\n+     * <td>The preview of response content of the {@link Response}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74d8c16d71cb68d0c27004b4d219fc0a127a183d"}, "originalPosition": 263}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e26db03fa5440b1b5ab7f55adbf2bc1ee8aecc0e", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/e26db03fa5440b1b5ab7f55adbf2bc1ee8aecc0e", "committedDate": "2020-02-28T09:57:09Z", "message": "Fix broken tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "772b5343695d9ef7ae3c0dc98186acd7a4e542e1", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/772b5343695d9ef7ae3c0dc98186acd7a4e542e1", "committedDate": "2020-02-28T10:05:15Z", "message": "Adress comments by @minwoox / Update documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4793f6690e1fbe754edb74be2095c2e687108448", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/4793f6690e1fbe754edb74be2095c2e687108448", "committedDate": "2020-02-28T10:13:26Z", "message": "Fix documentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MzE2MzMz", "url": "https://github.com/line/armeria/pull/2531#pullrequestreview-366316333", "createdAt": "2020-02-28T10:59:35Z", "commit": {"oid": "4793f6690e1fbe754edb74be2095c2e687108448"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMDo1OTozNlrOFvxMfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMTowMDo0N1rOFvxOhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzMzQwNQ==", "bodyText": "Could be simplified to return addBuiltIn(property, property.key) ?", "url": "https://github.com/line/armeria/pull/2531#discussion_r385633405", "createdAt": "2020-02-28T10:59:36Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RequestContextExporterBuilder.java", "diffHunk": "@@ -52,9 +51,22 @@\n \n     /**\n      * Adds the specified {@link BuiltInProperty} to the export list.\n+     * The {@link BuiltInProperty#key} will be used for the export key.\n      */\n     public RequestContextExporterBuilder addBuiltIn(BuiltInProperty property) {\n-        builtIns.add(requireNonNull(property, \"property\"));\n+        requireNonNull(property, \"property\");\n+        builtIns.add(new ExportEntry<>(property, property.key));\n+        return this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4793f6690e1fbe754edb74be2095c2e687108448"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzMzgyNw==", "bodyText": "Ditto - Could delegate to addHttpResponseHeader(CharSequence, String).", "url": "https://github.com/line/armeria/pull/2531#discussion_r385633827", "createdAt": "2020-02-28T11:00:35Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RequestContextExporterBuilder.java", "diffHunk": "@@ -128,30 +143,54 @@ public boolean containsAttribute(AttributeKey<?> key) {\n     @Deprecated\n     public Map<String, AttributeKey<?>> getAttributes() {\n         return attrs.stream().collect(\n-                toImmutableMap(e -> e.exportKey.substring(PREFIX_ATTRS.length()), e -> e.key));\n+                toImmutableMap(e -> {\n+                    if (e.exportKey.startsWith(PREFIX_ATTRS)) {\n+                        return e.exportKey.substring(PREFIX_ATTRS.length());\n+                    }\n+                    return e.exportKey;\n+                }, e -> e.key));\n     }\n \n     /**\n      * Adds the specified HTTP request header name to the export list.\n      */\n     public RequestContextExporterBuilder addHttpRequestHeader(CharSequence name) {\n-        addHttpHeader(PREFIX_HTTP_REQ_HEADERS, httpReqHeaders, requireNonNull(name, \"name\"));\n+        final AsciiString key = toHeaderName(requireNonNull(name, \"name\"));\n+        final String exportKey = PREFIX_HTTP_REQ_HEADERS + key;\n+        httpReqHeaders.add(new ExportEntry<>(key, exportKey));\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified HTTP request header name to the export list.\n+     * The specified {@code alias} is used for the export key.\n+     */\n+    public RequestContextExporterBuilder addHttpRequestHeader(CharSequence headerName, String alias) {\n+        requireNonNull(headerName, \"headerName\");\n+        requireNonNull(alias, \"alias\");\n+        httpReqHeaders.add(new ExportEntry<>(toHeaderName(headerName), alias));\n         return this;\n     }\n \n     /**\n      * Adds the specified HTTP response header name to the export list.\n      */\n     public RequestContextExporterBuilder addHttpResponseHeader(CharSequence name) {\n-        addHttpHeader(PREFIX_HTTP_RES_HEADERS, httpResHeaders, requireNonNull(name, \"name\"));\n+        final AsciiString key = toHeaderName(requireNonNull(name, \"name\"));\n+        final String exportKey = PREFIX_HTTP_RES_HEADERS + key;\n+        httpResHeaders.add(new ExportEntry<>(key, exportKey));\n         return this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4793f6690e1fbe754edb74be2095c2e687108448"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzMzkyNg==", "bodyText": "Ditto - Could delegate to addHttpRequestHeader(CharSequence, String).", "url": "https://github.com/line/armeria/pull/2531#discussion_r385633926", "createdAt": "2020-02-28T11:00:47Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RequestContextExporterBuilder.java", "diffHunk": "@@ -128,30 +143,54 @@ public boolean containsAttribute(AttributeKey<?> key) {\n     @Deprecated\n     public Map<String, AttributeKey<?>> getAttributes() {\n         return attrs.stream().collect(\n-                toImmutableMap(e -> e.exportKey.substring(PREFIX_ATTRS.length()), e -> e.key));\n+                toImmutableMap(e -> {\n+                    if (e.exportKey.startsWith(PREFIX_ATTRS)) {\n+                        return e.exportKey.substring(PREFIX_ATTRS.length());\n+                    }\n+                    return e.exportKey;\n+                }, e -> e.key));\n     }\n \n     /**\n      * Adds the specified HTTP request header name to the export list.\n      */\n     public RequestContextExporterBuilder addHttpRequestHeader(CharSequence name) {\n-        addHttpHeader(PREFIX_HTTP_REQ_HEADERS, httpReqHeaders, requireNonNull(name, \"name\"));\n+        final AsciiString key = toHeaderName(requireNonNull(name, \"name\"));\n+        final String exportKey = PREFIX_HTTP_REQ_HEADERS + key;\n+        httpReqHeaders.add(new ExportEntry<>(key, exportKey));\n+        return this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4793f6690e1fbe754edb74be2095c2e687108448"}, "originalPosition": 122}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "205178a7817283c293c46ddc600762bfee3a698b", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/205178a7817283c293c46ddc600762bfee3a698b", "committedDate": "2020-02-28T11:32:32Z", "message": "Add comments by @trustin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3589c9b4d0fb586e11047d26cf0f3dc98c8d0897", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/3589c9b4d0fb586e11047d26cf0f3dc98c8d0897", "committedDate": "2020-02-28T11:42:08Z", "message": "Address comments by @trustin 2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MzM5NzY2", "url": "https://github.com/line/armeria/pull/2531#pullrequestreview-366339766", "createdAt": "2020-02-28T11:43:20Z", "commit": {"oid": "3589c9b4d0fb586e11047d26cf0f3dc98c8d0897"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 602, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}