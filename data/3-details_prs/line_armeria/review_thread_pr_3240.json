{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNDY0NTY1", "number": 3240, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwOToyODo1NlrOFIFm9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNDo0MDozOVrOFI1RaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDI0ODIwOnYy", "diffSide": "RIGHT", "path": "spring/boot2-autoconfigure/src/test/java/com/linecorp/armeria/spring/CgLibServiceNameTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwOToyODo1NlrOIJ0Z0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwOToyODo1NlrOIJ0Z0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE2NjY3NQ==", "bodyText": "Could you add some Javadoc about what this is trying to test? You could add an explanation for CGLIB byte code generation done by Spring.", "url": "https://github.com/line/armeria/pull/3240#discussion_r547166675", "createdAt": "2020-12-22T09:28:56Z", "author": {"login": "trustin"}, "path": "spring/boot2-autoconfigure/src/test/java/com/linecorp/armeria/spring/CgLibServiceNameTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.stereotype.Component;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.validation.annotation.Validated;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.logging.RequestLog;\n+import com.linecorp.armeria.common.logging.RequestLogAccess;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.annotation.Get;\n+import com.linecorp.armeria.spring.CgLibServiceNameTest.TestConfiguration;\n+import com.linecorp.armeria.spring.CgLibServiceNameTest.TestConfiguration.MyAnnotatedService;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes = TestConfiguration.class, webEnvironment = WebEnvironment.NONE)\n+@ActiveProfiles({ \"local\", \"autoConfTest\" })\n+class CgLibServiceNameTest {\n+\n+    private static final AtomicReference<RequestLogAccess> logRef = new AtomicReference<>();\n+\n+    @SpringBootApplication\n+    public static class TestConfiguration {\n+\n+        @Validated\n+        @Component\n+        public class MyAnnotatedService {\n+            @Get(\"/hello\")\n+            public HttpResponse world() {\n+                return HttpResponse.of(HttpStatus.OK);\n+            }\n+        }\n+\n+        @Bean\n+        public ArmeriaServerConfigurator annotatedService(MyAnnotatedService annotatedService) {\n+            return sb -> {\n+                sb.annotatedService(annotatedService);\n+                sb.decorator((delegate, ctx, req) -> {\n+                    logRef.set(ctx.log());\n+                    return delegate.serve(ctx, req);\n+                });\n+            };\n+        }\n+    }\n+\n+    @Inject\n+    private Server server;\n+\n+    @Test\n+    void normalizedServiceName() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b32317d70454f82445c5e59d9189eb00fb90066e"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0ODA1NzM3OnYy", "diffSide": "RIGHT", "path": "spring/boot2-autoconfigure/src/test/java/com/linecorp/armeria/spring/CgLibServiceNameTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNDo0MDozOVrOIK-aGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNDo0MDozOVrOIK-aGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM3OTE2MQ==", "bodyText": "Thanks!", "url": "https://github.com/line/armeria/pull/3240#discussion_r548379161", "createdAt": "2020-12-24T04:40:39Z", "author": {"login": "trustin"}, "path": "spring/boot2-autoconfigure/src/test/java/com/linecorp/armeria/spring/CgLibServiceNameTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.annotation.Nullable;\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.stereotype.Component;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.validation.annotation.Validated;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.logging.RequestLog;\n+import com.linecorp.armeria.common.logging.RequestLogAccess;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.annotation.Get;\n+import com.linecorp.armeria.spring.CgLibServiceNameTest.TestConfiguration;\n+import com.linecorp.armeria.spring.CgLibServiceNameTest.TestConfiguration.MyAnnotatedService;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes = TestConfiguration.class)\n+@ActiveProfiles({ \"local\", \"autoConfTest\" })\n+public class CgLibServiceNameTest {\n+\n+    private static final AtomicReference<RequestLogAccess> logRef = new AtomicReference<>();\n+\n+    @Nullable\n+    private static MyAnnotatedService proxiedMyAnnotatedService;\n+\n+    @SpringBootApplication\n+    public static class TestConfiguration {\n+\n+        @Validated\n+        @Component\n+        public class MyAnnotatedService {\n+            @Get(\"/hello\")\n+            public HttpResponse world() {\n+                return HttpResponse.of(HttpStatus.OK);\n+            }\n+        }\n+\n+        @Bean\n+        public ArmeriaServerConfigurator annotatedService(MyAnnotatedService annotatedService) {\n+            proxiedMyAnnotatedService = annotatedService;\n+            return sb -> {\n+                sb.annotatedService(annotatedService);\n+                sb.decorator((delegate, ctx, req) -> {\n+                    logRef.set(ctx.log());\n+                    return delegate.serve(ctx, req);\n+                });\n+            };\n+        }\n+    }\n+\n+    @Inject\n+    private Server server;\n+\n+    /**\n+     * Verifies that a default service name returned by RequestLog is a user-defined class name.\n+     * The user-defined class could be changed at runtime by Spring which uses cglib for generation of\n+     * dynamic proxies. For example, if a class is annotated with `@Validated`,\n+     * a proxy class of MyAnnotatedService, such as MyAnnotatedService$$EnhancerBySpringCGLIB$$1a2b3c4d,\n+     * will be injected instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "934277d0d544c8967c29d6f6cc153ab59a72bf7a"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1824, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}