{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyNjYyMzA5", "number": 3238, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNTozODo0NVrOFI15pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMTozMTo1OFrOFMfHyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0ODE2MDM3OnYy", "diffSide": "RIGHT", "path": "eureka/src/main/java/com/linecorp/armeria/server/eureka/EurekaUpdatingListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNTozODo0NVrOIK_Vag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNTozODo0NVrOIK_Vag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM5NDM0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                      logger.debug(\"Successfully send a heart beat to Eureka: {}\", client.uri());\n          \n          \n            \n            logger.debug(\"Sent a heart beat to Eureka: {}\", client.uri());", "url": "https://github.com/line/armeria/pull/3238#discussion_r548394346", "createdAt": "2020-12-24T05:38:45Z", "author": {"login": "minwoox"}, "path": "eureka/src/main/java/com/linecorp/armeria/server/eureka/EurekaUpdatingListener.java", "diffHunk": "@@ -328,26 +330,36 @@ public void run() {\n             client.sendHeartBeat(appName, instanceId, instanceInfo, null)\n                   .aggregate()\n                   .handle((res, cause) -> {\n-                      try (HttpData content = res.content()) {\n-                          if (closed) {\n-                              return null;\n-                          }\n+                      if (closed) {\n+                          return null;\n+                      }\n \n-                          // The information of this instance is removed from the registry when the heart beats\n-                          // fail consecutive three times, so we don't retry.\n+                      if (cause != null) {\n+                          logger.warn(\"Failed to send a heart beat to Eureka: {}\", client.uri(), cause);\n+                      } else if (res.headers().status() != HttpStatus.OK) {\n+\n+                          // The information of this instance is removed from the registry when\n+                          // the heart beats fail consecutive three times, so we try to re-registration.\n                           // See https://github.com/Netflix/eureka/wiki/Understanding-eureka-client-server-communication#renew\n-                          if (cause != null) {\n-                              logger.warn(\"Failed to send a heart beat to Eureka: {}\", client.uri(), cause);\n-                          } else if (res.headers().status() != HttpStatus.OK) {\n+                          if (res.headers().status() == HttpStatus.NOT_FOUND) {\n+                              logger.warn(\"Instance {}/{} no longer registered with Eureka.\" +\n+                                          \" Attempting re-registration.\",\n+                                          appName, instanceId);\n+                              register(instanceInfo);\n+                              return null;\n+                          } else {\n                               logger.warn(\"Failed to send a heart beat to Eureka: {}, \" +\n                                           \"(status: {}, content: {})\",\n-                                          client.uri(), res.headers().status(), content.toStringUtf8());\n+                                          client.uri(), res.headers().status(), res.contentUtf8());\n                           }\n-                          heartBeatFuture = eventLoop.schedule(\n-                                  this, instanceInfo.getLeaseInfo().getRenewalIntervalInSecs(),\n-                                  TimeUnit.SECONDS);\n-                          return null;\n+                      } else {\n+                          logger.debug(\"Successfully send a heart beat to Eureka: {}\", client.uri());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244c327266d772b78a57310abf4305b524c3906e"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDI5OTYzOnYy", "diffSide": "RIGHT", "path": "eureka/src/main/java/com/linecorp/armeria/server/eureka/EurekaUpdatingListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwMzo0MjozMFrOILwxGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwMzo0MjozMFrOILwxGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIwNDI1MA==", "bodyText": "nit: How about introducing res.headers().status() as a local variable and cleaning up if else condition?\nif (cause != null) {\n   // leave warn message with the cause\n} else {\n   final HttpStatus status = res.status();\n   if (status == HttpStatus.OK) {\n        // leave some debug message \n   } else if (status == HttpStatus.NOT_FOUND) {\n        // re-register\n   } else {\n       // leave warn message\n   }\n}", "url": "https://github.com/line/armeria/pull/3238#discussion_r549204250", "createdAt": "2020-12-28T03:42:30Z", "author": {"login": "ikhoon"}, "path": "eureka/src/main/java/com/linecorp/armeria/server/eureka/EurekaUpdatingListener.java", "diffHunk": "@@ -328,26 +330,36 @@ public void run() {\n             client.sendHeartBeat(appName, instanceId, instanceInfo, null)\n                   .aggregate()\n                   .handle((res, cause) -> {\n-                      try (HttpData content = res.content()) {\n-                          if (closed) {\n-                              return null;\n-                          }\n+                      if (closed) {\n+                          return null;\n+                      }\n \n-                          // The information of this instance is removed from the registry when the heart beats\n-                          // fail consecutive three times, so we don't retry.\n+                      if (cause != null) {\n+                          logger.warn(\"Failed to send a heart beat to Eureka: {}\", client.uri(), cause);\n+                      } else if (res.headers().status() != HttpStatus.OK) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244c327266d772b78a57310abf4305b524c3906e"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2ODI1Mzg5OnYy", "diffSide": "RIGHT", "path": "eureka/src/main/java/com/linecorp/armeria/server/eureka/EurekaUpdatingListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwNDoyODo0MVrOINlRaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwNTozNDowOFrOINmA8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTExMzA2Nw==", "bodyText": "Could you check the indentation of this class again, please?", "url": "https://github.com/line/armeria/pull/3238#discussion_r551113067", "createdAt": "2021-01-04T04:28:41Z", "author": {"login": "minwoox"}, "path": "eureka/src/main/java/com/linecorp/armeria/server/eureka/EurekaUpdatingListener.java", "diffHunk": "@@ -328,26 +330,37 @@ public void run() {\n             client.sendHeartBeat(appName, instanceId, instanceInfo, null)\n                   .aggregate()\n                   .handle((res, cause) -> {\n-                      try (HttpData content = res.content()) {\n-                          if (closed) {\n-                              return null;\n-                          }\n+                      if (closed) {\n+                          return null;\n+                      }\n \n-                          // The information of this instance is removed from the registry when the heart beats\n-                          // fail consecutive three times, so we don't retry.\n-                          // See https://github.com/Netflix/eureka/wiki/Understanding-eureka-client-server-communication#renew\n-                          if (cause != null) {\n-                              logger.warn(\"Failed to send a heart beat to Eureka: {}\", client.uri(), cause);\n-                          } else if (res.headers().status() != HttpStatus.OK) {\n+                      if (cause != null) {\n+                          logger.warn(\"Failed to send a heart beat to Eureka: {}\", client.uri(), cause);\n+                      } else {\n+                          final HttpStatus status = res.status();\n+\n+                          if (status == HttpStatus.OK) {\n+                              logger.debug(\"Sent a heart beat to Eureka: {}\", client.uri());\n+                          } else if (status == HttpStatus.NOT_FOUND) {\n+                              // The information of this instance is removed from the registry when\n+                              // the heart beats fail consecutive three times, so we try to re-registration.\n+                              // See https://github.com/Netflix/eureka/wiki/Understanding-eureka-client-server-communication#renew\n+                              logger.warn(\"Instance {}/{} no longer registered with Eureka.\" +\n+                                      \" Attempting re-registration.\",\n+                                  appName, instanceId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a92c97cc71105792411bba30f7d73bbaa50aba09"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTEyNTIzNA==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/3238#discussion_r551125234", "createdAt": "2021-01-04T05:34:08Z", "author": {"login": "eisig"}, "path": "eureka/src/main/java/com/linecorp/armeria/server/eureka/EurekaUpdatingListener.java", "diffHunk": "@@ -328,26 +330,37 @@ public void run() {\n             client.sendHeartBeat(appName, instanceId, instanceInfo, null)\n                   .aggregate()\n                   .handle((res, cause) -> {\n-                      try (HttpData content = res.content()) {\n-                          if (closed) {\n-                              return null;\n-                          }\n+                      if (closed) {\n+                          return null;\n+                      }\n \n-                          // The information of this instance is removed from the registry when the heart beats\n-                          // fail consecutive three times, so we don't retry.\n-                          // See https://github.com/Netflix/eureka/wiki/Understanding-eureka-client-server-communication#renew\n-                          if (cause != null) {\n-                              logger.warn(\"Failed to send a heart beat to Eureka: {}\", client.uri(), cause);\n-                          } else if (res.headers().status() != HttpStatus.OK) {\n+                      if (cause != null) {\n+                          logger.warn(\"Failed to send a heart beat to Eureka: {}\", client.uri(), cause);\n+                      } else {\n+                          final HttpStatus status = res.status();\n+\n+                          if (status == HttpStatus.OK) {\n+                              logger.debug(\"Sent a heart beat to Eureka: {}\", client.uri());\n+                          } else if (status == HttpStatus.NOT_FOUND) {\n+                              // The information of this instance is removed from the registry when\n+                              // the heart beats fail consecutive three times, so we try to re-registration.\n+                              // See https://github.com/Netflix/eureka/wiki/Understanding-eureka-client-server-communication#renew\n+                              logger.warn(\"Instance {}/{} no longer registered with Eureka.\" +\n+                                      \" Attempting re-registration.\",\n+                                  appName, instanceId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTExMzA2Nw=="}, "originalCommit": {"oid": "a92c97cc71105792411bba30f7d73bbaa50aba09"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2ODI2NzgyOnYy", "diffSide": "RIGHT", "path": "eureka/src/test/java/com/linecorp/armeria/server/eureka/EurekaUpdatingListenerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwNDozOTowM1rOINlYjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwNTozNDozNVrOINmBOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTExNDg5NA==", "bodyText": "nit: heart?", "url": "https://github.com/line/armeria/pull/3238#discussion_r551114894", "createdAt": "2021-01-04T04:39:03Z", "author": {"login": "minwoox"}, "path": "eureka/src/test/java/com/linecorp/armeria/server/eureka/EurekaUpdatingListenerTest.java", "diffHunk": "@@ -134,6 +139,41 @@ void registerHeartBeatAndDeregisterAreSent() throws IOException {\n         assertThat(deregisterHeaders.path()).isEqualTo(\"/apps/application0/i-00000000\");\n     }\n \n+    @Test\n+    void reRegisterIfInstanceNoLongerRegistered() throws IOException {\n+        final EurekaUpdatingListener listener =\n+            EurekaUpdatingListener.builder(eurekaServer.httpUri())\n+                .instanceId(INSTANCE_ID)\n+                .renewalIntervalMillis(2000)\n+                .leaseDurationMillis(10000)\n+                .appName(APP_NAME)\n+                .build();\n+        final int previousRegisterCount = registerCounter.get();\n+        final Server application = Server.builder()\n+            .http(0)\n+            .https(0)\n+            .tlsSelfSigned()\n+            .service(\"/\", (ctx, req) -> HttpResponse.of(HttpStatus.OK))\n+            .service(\"/health\", HealthCheckService.of())\n+            .serverListener(listener)\n+            .build();\n+        application.start().join();\n+        await().until(() -> registerContentCaptor.get() != null);\n+        assertThat(registerCounter.get()).isEqualTo(previousRegisterCount + 1);\n+\n+        // remove instance from the registry\n+        registerContentCaptor.set(null);\n+        await().until(() -> registerContentCaptor.get() != null);\n+        assertThat(registerCounter.get()).isEqualTo(previousRegisterCount + 2);\n+\n+        // heat beats are sent, and not cause re-registration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a92c97cc71105792411bba30f7d73bbaa50aba09"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTEyNTMwNQ==", "bodyText": "yes..fixed", "url": "https://github.com/line/armeria/pull/3238#discussion_r551125305", "createdAt": "2021-01-04T05:34:35Z", "author": {"login": "eisig"}, "path": "eureka/src/test/java/com/linecorp/armeria/server/eureka/EurekaUpdatingListenerTest.java", "diffHunk": "@@ -134,6 +139,41 @@ void registerHeartBeatAndDeregisterAreSent() throws IOException {\n         assertThat(deregisterHeaders.path()).isEqualTo(\"/apps/application0/i-00000000\");\n     }\n \n+    @Test\n+    void reRegisterIfInstanceNoLongerRegistered() throws IOException {\n+        final EurekaUpdatingListener listener =\n+            EurekaUpdatingListener.builder(eurekaServer.httpUri())\n+                .instanceId(INSTANCE_ID)\n+                .renewalIntervalMillis(2000)\n+                .leaseDurationMillis(10000)\n+                .appName(APP_NAME)\n+                .build();\n+        final int previousRegisterCount = registerCounter.get();\n+        final Server application = Server.builder()\n+            .http(0)\n+            .https(0)\n+            .tlsSelfSigned()\n+            .service(\"/\", (ctx, req) -> HttpResponse.of(HttpStatus.OK))\n+            .service(\"/health\", HealthCheckService.of())\n+            .serverListener(listener)\n+            .build();\n+        application.start().join();\n+        await().until(() -> registerContentCaptor.get() != null);\n+        assertThat(registerCounter.get()).isEqualTo(previousRegisterCount + 1);\n+\n+        // remove instance from the registry\n+        registerContentCaptor.set(null);\n+        await().until(() -> registerContentCaptor.get() != null);\n+        assertThat(registerCounter.get()).isEqualTo(previousRegisterCount + 2);\n+\n+        // heat beats are sent, and not cause re-registration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTExNDg5NA=="}, "originalCommit": {"oid": "a92c97cc71105792411bba30f7d73bbaa50aba09"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjgxMzY3OnYy", "diffSide": "RIGHT", "path": "eureka/src/main/java/com/linecorp/armeria/server/eureka/EurekaUpdatingListener.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwODo0OTo0OVrOIOOvog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwOToxNjoyOFrOIOPloA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc5MjU0Ng==", "bodyText": "Could you wrap this entire block with try-finally and call res.content().close() in the finally block when res is not null, so that we do not leak anything?", "url": "https://github.com/line/armeria/pull/3238#discussion_r551792546", "createdAt": "2021-01-05T08:49:49Z", "author": {"login": "trustin"}, "path": "eureka/src/main/java/com/linecorp/armeria/server/eureka/EurekaUpdatingListener.java", "diffHunk": "@@ -328,26 +330,37 @@ public void run() {\n             client.sendHeartBeat(appName, instanceId, instanceInfo, null)\n                   .aggregate()\n                   .handle((res, cause) -> {\n-                      try (HttpData content = res.content()) {\n-                          if (closed) {\n-                              return null;\n-                          }\n+                      if (closed) {\n+                          return null;\n+                      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49109872fa3fbc354d308f3be9b77e9548676232"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTgwNTc2NA==", "bodyText": "We don't use aggregateWithPooledObjects anymore so we might not need that? \ud83e\udd14", "url": "https://github.com/line/armeria/pull/3238#discussion_r551805764", "createdAt": "2021-01-05T09:15:18Z", "author": {"login": "minwoox"}, "path": "eureka/src/main/java/com/linecorp/armeria/server/eureka/EurekaUpdatingListener.java", "diffHunk": "@@ -328,26 +330,37 @@ public void run() {\n             client.sendHeartBeat(appName, instanceId, instanceInfo, null)\n                   .aggregate()\n                   .handle((res, cause) -> {\n-                      try (HttpData content = res.content()) {\n-                          if (closed) {\n-                              return null;\n-                          }\n+                      if (closed) {\n+                          return null;\n+                      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc5MjU0Ng=="}, "originalCommit": {"oid": "49109872fa3fbc354d308f3be9b77e9548676232"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTgwNjM2OA==", "bodyText": "Ah, then OK as it is.", "url": "https://github.com/line/armeria/pull/3238#discussion_r551806368", "createdAt": "2021-01-05T09:16:28Z", "author": {"login": "trustin"}, "path": "eureka/src/main/java/com/linecorp/armeria/server/eureka/EurekaUpdatingListener.java", "diffHunk": "@@ -328,26 +330,37 @@ public void run() {\n             client.sendHeartBeat(appName, instanceId, instanceInfo, null)\n                   .aggregate()\n                   .handle((res, cause) -> {\n-                      try (HttpData content = res.content()) {\n-                          if (closed) {\n-                              return null;\n-                          }\n+                      if (closed) {\n+                          return null;\n+                      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc5MjU0Ng=="}, "originalCommit": {"oid": "49109872fa3fbc354d308f3be9b77e9548676232"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NjM3MTI4OnYy", "diffSide": "RIGHT", "path": "eureka/src/main/java/com/linecorp/armeria/server/eureka/EurekaUpdatingListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMTozMTo1OFrOIQO7cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMTozMTo1OFrOIQO7cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg5MjcyMg==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                      client.uri(), res.headers().status(), res.contentUtf8());\n          \n          \n            \n                                                      client.uri(), res.status(), res.contentUtf8());", "url": "https://github.com/line/armeria/pull/3238#discussion_r553892722", "createdAt": "2021-01-08T11:31:58Z", "author": {"login": "ikhoon"}, "path": "eureka/src/main/java/com/linecorp/armeria/server/eureka/EurekaUpdatingListener.java", "diffHunk": "@@ -328,26 +330,37 @@ public void run() {\n             client.sendHeartBeat(appName, instanceId, instanceInfo, null)\n                   .aggregate()\n                   .handle((res, cause) -> {\n-                      try (HttpData content = res.content()) {\n-                          if (closed) {\n-                              return null;\n-                          }\n+                      if (closed) {\n+                          return null;\n+                      }\n \n-                          // The information of this instance is removed from the registry when the heart beats\n-                          // fail consecutive three times, so we don't retry.\n-                          // See https://github.com/Netflix/eureka/wiki/Understanding-eureka-client-server-communication#renew\n-                          if (cause != null) {\n-                              logger.warn(\"Failed to send a heart beat to Eureka: {}\", client.uri(), cause);\n-                          } else if (res.headers().status() != HttpStatus.OK) {\n+                      if (cause != null) {\n+                          logger.warn(\"Failed to send a heart beat to Eureka: {}\", client.uri(), cause);\n+                      } else {\n+                          final HttpStatus status = res.status();\n+\n+                          if (status == HttpStatus.OK) {\n+                              logger.debug(\"Sent a heart beat to Eureka: {}\", client.uri());\n+                          } else if (status == HttpStatus.NOT_FOUND) {\n+                              // The information of this instance is removed from the registry when\n+                              // the heart beats fail consecutive three times, so we try to re-registration.\n+                              // See https://github.com/Netflix/eureka/wiki/Understanding-eureka-client-server-communication#renew\n+                              logger.warn(\"Instance {}/{} no longer registered with Eureka.\" +\n+                                          \" Attempting re-registration.\",\n+                                          appName, instanceId);\n+                              register(instanceInfo);\n+                              return null;\n+                          } else {\n                               logger.warn(\"Failed to send a heart beat to Eureka: {}, \" +\n                                           \"(status: {}, content: {})\",\n-                                          client.uri(), res.headers().status(), content.toStringUtf8());\n+                                          client.uri(), res.headers().status(), res.contentUtf8());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49109872fa3fbc354d308f3be9b77e9548676232"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1821, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}