{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NDcxMDA3", "number": 3192, "title": " Add documentation for ScalaPB", "bodyText": "", "createdAt": "2020-11-24T13:14:22Z", "url": "https://github.com/line/armeria/pull/3192", "merged": true, "mergeCommit": {"oid": "ca2c25fde0d5a2ae7f4d99a4e511ef307e1fa5fa"}, "closed": true, "closedAt": "2020-11-26T06:51:03Z", "author": {"login": "ikhoon"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfpjKSAH2gAyNTI2NDcxMDA3OjFkOWEwNWU1ZWExYTdlZmIwNjc1ZGFkZWEwYzM0ZjM0YWNkNmM4ZDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgMaumAH2gAyNTI2NDcxMDA3OjdkNTQ0NzIyOGU0MGU4ZmQ0NDUzMWEzMmFmYTVkNTk3MmE3NzYzOGM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1d9a05e5ea1a7efb0675dadea0c34f34acd6c8d9", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/1d9a05e5ea1a7efb0675dadea0c34f34acd6c8d9", "committedDate": "2020-11-24T13:13:24Z", "message": "Add documentation for ScalaPB"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14ef7bceebb310796838ea514f52f686d18bfeb7", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/14ef7bceebb310796838ea514f52f686d18bfeb7", "committedDate": "2020-11-24T13:26:37Z", "message": "clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "673bf0cda2bb281ad0807bc83b1ab949a68b496f", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/673bf0cda2bb281ad0807bc83b1ab949a68b496f", "committedDate": "2020-11-24T15:35:05Z", "message": "Remove wrong import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a9d8dc9c83fa81c19ea25ecb0e2b068330d0115", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/9a9d8dc9c83fa81c19ea25ecb0e2b068330d0115", "committedDate": "2020-11-25T02:53:44Z", "message": "Add @Blocking"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MjE2OTAy", "url": "https://github.com/line/armeria/pull/3192#pullrequestreview-538216902", "createdAt": "2020-11-25T07:29:14Z", "commit": {"oid": "9a9d8dc9c83fa81c19ea25ecb0e2b068330d0115"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4OTQ3Njc1", "url": "https://github.com/line/armeria/pull/3192#pullrequestreview-538947675", "createdAt": "2020-11-26T02:08:36Z", "commit": {"oid": "9a9d8dc9c83fa81c19ea25ecb0e2b068330d0115"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjowODozNlrOH6JYqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjoxNzoxN1rOH6JiHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMzIyNw==", "bodyText": "extra space before docs", "url": "https://github.com/line/armeria/pull/3192#discussion_r530733227", "createdAt": "2020-11-26T02:08:36Z", "author": {"login": "minwoox"}, "path": "site/src/pages/docs/advanced-scalapb.mdx", "diffHunk": "@@ -0,0 +1,226 @@\n+import versions from '../../../gen-src/versions.json';\n+\n+# ScalaPB integration\n+\n+<Tip>\n+\n+Visit [here](https://github.com/line/armeria/tree/master/examples/grpc-scala) to find a fully working example.\n+\n+</Tip>\n+\n+[ScalaPB](https://scalapb.github.io/) is a protocol buffer compiler (protoc) plugin for \n+[Scala](https://www.scala-lang.org/). It will generate Scala case classes, parsers and serializers for \n+your [protocol buffers](https://developers.google.com/protocol-buffers). \n+ScalaPB also supports a thin wrapper around [grpc-java](https://grpc.io/docs/languages/java/quickstart/),\n+and provides you with an interface that is based on Scala's standard library\n+[Future](https://docs.scala-lang.org/overviews/core/futures.html), \n+while streaming is based on the Observer pattern.\n+If you integrate ScalaPB with Armeria, you can leverage the followings:\n+- Using both [gRPC server](https://armeria.dev/docs/server-docservice) and \n+  [gRPC client](https://armeria.dev/docs/client-grpc) features such as gRPC-over-HTTP/1 and \n+  [gRPC-Web](gRPC-Web) protocol powered by Armeria\n+- Browsing the list of available RPC operations and invoking a service operation via a web console\n+- Converting either a Protocol Buffers or JSON to and from an\n+  [scalapb.GeneratedMessage](https://scalapb.github.io/docs/generated-code) in annotated service\n+\n+First, you need the `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependency to use the above features:\n+\n+<CodeBlock language=\"groovy\" filename=\"build.sbt\">{`\n+libraryDependencies += \"com.linecorp.armeria\" %% \"armeria-scalapb\" % \"${versions['com.linecorp.armeria:armeria-bom']}\"\n+`}</CodeBlock>\n+\n+<Tip> \n+\n+`armeria-scalapb` is only available for Scala 2.12.x and 2.13.x.\n+\n+</Tip> \n+\n+## Running a gRPC service\n+\n+You need to register a ScalaPB gRPC stub to a <type://GrpcService> using a <type://GrpcServiceBuilder>\n+and add it to the <type://ServerBuilder>:\n+\n+```scala\n+import com.linecorp.armeria.common.scalapb.ScalaPBJsonMarshaller\n+import com.linecorp.armeria.server.Server\n+import com.linecorp.armeria.server.docs.DocService\n+import com.linecorp.armeria.server.grpc.GrpcService\n+\n+// Creates GrpcService with your gRPC stub generated by ScalaPB.\n+val grpcService =\n+      GrpcService\n+        .builder()\n+        // Add your ScalaPB gRPC stub using `bindService()`\n+        .addService(YourServiceGrpc.bindService(\n+          new YourServiceImpl, ExecutionContext.global))\n+        // Register `ScalaPBJsonMarshaller` for supporting gRPC JSON format.\n+        .jsonMarshallerFactory(_ => ScalaPBJsonMarshaller())\n+        .enableUnframedRequests(true)\n+        .build()\n+\n+// Creates Armeria Server for ScalaPB gRPC stub.\n+Server.builder()\n+      .http(httpPort)\n+      .https(httpsPort)\n+      .service(grpcService)\n+      // Add DocService for browsing the list gRPC services and \n+      // invoking a service operation from a web form.\n+      // See https://armeria.dev/docs/server-docservice for more information.\n+      .serviceUnder( \"/docs\", new DocService())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9d8dc9c83fa81c19ea25ecb0e2b068330d0115"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMzI4NQ==", "bodyText": "this list of?", "url": "https://github.com/line/armeria/pull/3192#discussion_r530733285", "createdAt": "2020-11-26T02:08:43Z", "author": {"login": "minwoox"}, "path": "site/src/pages/docs/advanced-scalapb.mdx", "diffHunk": "@@ -0,0 +1,226 @@\n+import versions from '../../../gen-src/versions.json';\n+\n+# ScalaPB integration\n+\n+<Tip>\n+\n+Visit [here](https://github.com/line/armeria/tree/master/examples/grpc-scala) to find a fully working example.\n+\n+</Tip>\n+\n+[ScalaPB](https://scalapb.github.io/) is a protocol buffer compiler (protoc) plugin for \n+[Scala](https://www.scala-lang.org/). It will generate Scala case classes, parsers and serializers for \n+your [protocol buffers](https://developers.google.com/protocol-buffers). \n+ScalaPB also supports a thin wrapper around [grpc-java](https://grpc.io/docs/languages/java/quickstart/),\n+and provides you with an interface that is based on Scala's standard library\n+[Future](https://docs.scala-lang.org/overviews/core/futures.html), \n+while streaming is based on the Observer pattern.\n+If you integrate ScalaPB with Armeria, you can leverage the followings:\n+- Using both [gRPC server](https://armeria.dev/docs/server-docservice) and \n+  [gRPC client](https://armeria.dev/docs/client-grpc) features such as gRPC-over-HTTP/1 and \n+  [gRPC-Web](gRPC-Web) protocol powered by Armeria\n+- Browsing the list of available RPC operations and invoking a service operation via a web console\n+- Converting either a Protocol Buffers or JSON to and from an\n+  [scalapb.GeneratedMessage](https://scalapb.github.io/docs/generated-code) in annotated service\n+\n+First, you need the `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependency to use the above features:\n+\n+<CodeBlock language=\"groovy\" filename=\"build.sbt\">{`\n+libraryDependencies += \"com.linecorp.armeria\" %% \"armeria-scalapb\" % \"${versions['com.linecorp.armeria:armeria-bom']}\"\n+`}</CodeBlock>\n+\n+<Tip> \n+\n+`armeria-scalapb` is only available for Scala 2.12.x and 2.13.x.\n+\n+</Tip> \n+\n+## Running a gRPC service\n+\n+You need to register a ScalaPB gRPC stub to a <type://GrpcService> using a <type://GrpcServiceBuilder>\n+and add it to the <type://ServerBuilder>:\n+\n+```scala\n+import com.linecorp.armeria.common.scalapb.ScalaPBJsonMarshaller\n+import com.linecorp.armeria.server.Server\n+import com.linecorp.armeria.server.docs.DocService\n+import com.linecorp.armeria.server.grpc.GrpcService\n+\n+// Creates GrpcService with your gRPC stub generated by ScalaPB.\n+val grpcService =\n+      GrpcService\n+        .builder()\n+        // Add your ScalaPB gRPC stub using `bindService()`\n+        .addService(YourServiceGrpc.bindService(\n+          new YourServiceImpl, ExecutionContext.global))\n+        // Register `ScalaPBJsonMarshaller` for supporting gRPC JSON format.\n+        .jsonMarshallerFactory(_ => ScalaPBJsonMarshaller())\n+        .enableUnframedRequests(true)\n+        .build()\n+\n+// Creates Armeria Server for ScalaPB gRPC stub.\n+Server.builder()\n+      .http(httpPort)\n+      .https(httpsPort)\n+      .service(grpcService)\n+      // Add DocService for browsing the list gRPC services and ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9d8dc9c83fa81c19ea25ecb0e2b068330d0115"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMzkxMg==", "bodyText": "just see? consult is a bit awkward. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3192#discussion_r530733912", "createdAt": "2020-11-26T02:11:04Z", "author": {"login": "minwoox"}, "path": "site/src/pages/docs/advanced-scalapb.mdx", "diffHunk": "@@ -0,0 +1,226 @@\n+import versions from '../../../gen-src/versions.json';\n+\n+# ScalaPB integration\n+\n+<Tip>\n+\n+Visit [here](https://github.com/line/armeria/tree/master/examples/grpc-scala) to find a fully working example.\n+\n+</Tip>\n+\n+[ScalaPB](https://scalapb.github.io/) is a protocol buffer compiler (protoc) plugin for \n+[Scala](https://www.scala-lang.org/). It will generate Scala case classes, parsers and serializers for \n+your [protocol buffers](https://developers.google.com/protocol-buffers). \n+ScalaPB also supports a thin wrapper around [grpc-java](https://grpc.io/docs/languages/java/quickstart/),\n+and provides you with an interface that is based on Scala's standard library\n+[Future](https://docs.scala-lang.org/overviews/core/futures.html), \n+while streaming is based on the Observer pattern.\n+If you integrate ScalaPB with Armeria, you can leverage the followings:\n+- Using both [gRPC server](https://armeria.dev/docs/server-docservice) and \n+  [gRPC client](https://armeria.dev/docs/client-grpc) features such as gRPC-over-HTTP/1 and \n+  [gRPC-Web](gRPC-Web) protocol powered by Armeria\n+- Browsing the list of available RPC operations and invoking a service operation via a web console\n+- Converting either a Protocol Buffers or JSON to and from an\n+  [scalapb.GeneratedMessage](https://scalapb.github.io/docs/generated-code) in annotated service\n+\n+First, you need the `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependency to use the above features:\n+\n+<CodeBlock language=\"groovy\" filename=\"build.sbt\">{`\n+libraryDependencies += \"com.linecorp.armeria\" %% \"armeria-scalapb\" % \"${versions['com.linecorp.armeria:armeria-bom']}\"\n+`}</CodeBlock>\n+\n+<Tip> \n+\n+`armeria-scalapb` is only available for Scala 2.12.x and 2.13.x.\n+\n+</Tip> \n+\n+## Running a gRPC service\n+\n+You need to register a ScalaPB gRPC stub to a <type://GrpcService> using a <type://GrpcServiceBuilder>\n+and add it to the <type://ServerBuilder>:\n+\n+```scala\n+import com.linecorp.armeria.common.scalapb.ScalaPBJsonMarshaller\n+import com.linecorp.armeria.server.Server\n+import com.linecorp.armeria.server.docs.DocService\n+import com.linecorp.armeria.server.grpc.GrpcService\n+\n+// Creates GrpcService with your gRPC stub generated by ScalaPB.\n+val grpcService =\n+      GrpcService\n+        .builder()\n+        // Add your ScalaPB gRPC stub using `bindService()`\n+        .addService(YourServiceGrpc.bindService(\n+          new YourServiceImpl, ExecutionContext.global))\n+        // Register `ScalaPBJsonMarshaller` for supporting gRPC JSON format.\n+        .jsonMarshallerFactory(_ => ScalaPBJsonMarshaller())\n+        .enableUnframedRequests(true)\n+        .build()\n+\n+// Creates Armeria Server for ScalaPB gRPC stub.\n+Server.builder()\n+      .http(httpPort)\n+      .https(httpsPort)\n+      .service(grpcService)\n+      // Add DocService for browsing the list gRPC services and \n+      // invoking a service operation from a web form.\n+      // See https://armeria.dev/docs/server-docservice for more information.\n+      .serviceUnder( \"/docs\", new DocService())\n+      .build()\n+```\n+\n+Please consult [gRPC service](https://armeria.dev/docs/server-grpc) for more information.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9d8dc9c83fa81c19ea25ecb0e2b068330d0115"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczNDMxMA==", "bodyText": "let's remove either because there are more than two.", "url": "https://github.com/line/armeria/pull/3192#discussion_r530734310", "createdAt": "2020-11-26T02:12:37Z", "author": {"login": "minwoox"}, "path": "site/src/pages/docs/advanced-scalapb.mdx", "diffHunk": "@@ -0,0 +1,226 @@\n+import versions from '../../../gen-src/versions.json';\n+\n+# ScalaPB integration\n+\n+<Tip>\n+\n+Visit [here](https://github.com/line/armeria/tree/master/examples/grpc-scala) to find a fully working example.\n+\n+</Tip>\n+\n+[ScalaPB](https://scalapb.github.io/) is a protocol buffer compiler (protoc) plugin for \n+[Scala](https://www.scala-lang.org/). It will generate Scala case classes, parsers and serializers for \n+your [protocol buffers](https://developers.google.com/protocol-buffers). \n+ScalaPB also supports a thin wrapper around [grpc-java](https://grpc.io/docs/languages/java/quickstart/),\n+and provides you with an interface that is based on Scala's standard library\n+[Future](https://docs.scala-lang.org/overviews/core/futures.html), \n+while streaming is based on the Observer pattern.\n+If you integrate ScalaPB with Armeria, you can leverage the followings:\n+- Using both [gRPC server](https://armeria.dev/docs/server-docservice) and \n+  [gRPC client](https://armeria.dev/docs/client-grpc) features such as gRPC-over-HTTP/1 and \n+  [gRPC-Web](gRPC-Web) protocol powered by Armeria\n+- Browsing the list of available RPC operations and invoking a service operation via a web console\n+- Converting either a Protocol Buffers or JSON to and from an\n+  [scalapb.GeneratedMessage](https://scalapb.github.io/docs/generated-code) in annotated service\n+\n+First, you need the `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependency to use the above features:\n+\n+<CodeBlock language=\"groovy\" filename=\"build.sbt\">{`\n+libraryDependencies += \"com.linecorp.armeria\" %% \"armeria-scalapb\" % \"${versions['com.linecorp.armeria:armeria-bom']}\"\n+`}</CodeBlock>\n+\n+<Tip> \n+\n+`armeria-scalapb` is only available for Scala 2.12.x and 2.13.x.\n+\n+</Tip> \n+\n+## Running a gRPC service\n+\n+You need to register a ScalaPB gRPC stub to a <type://GrpcService> using a <type://GrpcServiceBuilder>\n+and add it to the <type://ServerBuilder>:\n+\n+```scala\n+import com.linecorp.armeria.common.scalapb.ScalaPBJsonMarshaller\n+import com.linecorp.armeria.server.Server\n+import com.linecorp.armeria.server.docs.DocService\n+import com.linecorp.armeria.server.grpc.GrpcService\n+\n+// Creates GrpcService with your gRPC stub generated by ScalaPB.\n+val grpcService =\n+      GrpcService\n+        .builder()\n+        // Add your ScalaPB gRPC stub using `bindService()`\n+        .addService(YourServiceGrpc.bindService(\n+          new YourServiceImpl, ExecutionContext.global))\n+        // Register `ScalaPBJsonMarshaller` for supporting gRPC JSON format.\n+        .jsonMarshallerFactory(_ => ScalaPBJsonMarshaller())\n+        .enableUnframedRequests(true)\n+        .build()\n+\n+// Creates Armeria Server for ScalaPB gRPC stub.\n+Server.builder()\n+      .http(httpPort)\n+      .https(httpsPort)\n+      .service(grpcService)\n+      // Add DocService for browsing the list gRPC services and \n+      // invoking a service operation from a web form.\n+      // See https://armeria.dev/docs/server-docservice for more information.\n+      .serviceUnder( \"/docs\", new DocService())\n+      .build()\n+```\n+\n+Please consult [gRPC service](https://armeria.dev/docs/server-grpc) for more information.\n+\n+## Calling a gRPC service\n+\n+You can also call a gRPC service using a ScalaPB gRPC client.\n+`ScalaPbJsonMarshaller` should be registered with <type://GrpcClientOptions#GRPC_JSON_MARSHALLER_FACTORY> to \n+support gRPC JSON serialization format.\n+\n+```scala\n+import com.linecorp.armeria.client.Clients\n+import com.linecorp.armeria.client.grpc.GrpcClientOptions\n+import com.linecorp.armeria.common.scalapb.ScalaPbJsonMarshaller\n+        \n+val client = \n+  Clients.builder(\"gproto+http://127.0.0.1:8080/\")\n+         // Register 'ScalaPBJsonMarshaller' for enabling gRPC JSON serialization format\n+         .option(GrpcClientOptions.GRPC_JSON_MARSHALLER_FACTORY\n+                                  .newValue(_ => ScalaPbJsonMarshaller()))\n+         .build(classOf[HelloServiceBlockingStub])\n+    \n+val request = HelloRequest(\"Armerian World\")\n+val reply = helloService.hello(request)\n+assert(reply.message == \"Hello, Armerian World!\")\n+```\n+\n+Please consult [gRPC client](https://armeria.dev/docs/client-grpc) for more information.\n+\n+## Supporting ScalaPB in annotated services. \n+\n+### Converting an HTTP request to a ScalaPB's `GeneratedMesage` \n+\n+- A Protocol Buffers is automatically converted to a `GeneratedMessage` only when\n+  the content type is either one of followings:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9d8dc9c83fa81c19ea25ecb0e2b068330d0115"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczNTAwNA==", "bodyText": "two emtpy lines", "url": "https://github.com/line/armeria/pull/3192#discussion_r530735004", "createdAt": "2020-11-26T02:14:58Z", "author": {"login": "minwoox"}, "path": "site/src/pages/docs/advanced-scalapb.mdx", "diffHunk": "@@ -0,0 +1,226 @@\n+import versions from '../../../gen-src/versions.json';\n+\n+# ScalaPB integration\n+\n+<Tip>\n+\n+Visit [here](https://github.com/line/armeria/tree/master/examples/grpc-scala) to find a fully working example.\n+\n+</Tip>\n+\n+[ScalaPB](https://scalapb.github.io/) is a protocol buffer compiler (protoc) plugin for \n+[Scala](https://www.scala-lang.org/). It will generate Scala case classes, parsers and serializers for \n+your [protocol buffers](https://developers.google.com/protocol-buffers). \n+ScalaPB also supports a thin wrapper around [grpc-java](https://grpc.io/docs/languages/java/quickstart/),\n+and provides you with an interface that is based on Scala's standard library\n+[Future](https://docs.scala-lang.org/overviews/core/futures.html), \n+while streaming is based on the Observer pattern.\n+If you integrate ScalaPB with Armeria, you can leverage the followings:\n+- Using both [gRPC server](https://armeria.dev/docs/server-docservice) and \n+  [gRPC client](https://armeria.dev/docs/client-grpc) features such as gRPC-over-HTTP/1 and \n+  [gRPC-Web](gRPC-Web) protocol powered by Armeria\n+- Browsing the list of available RPC operations and invoking a service operation via a web console\n+- Converting either a Protocol Buffers or JSON to and from an\n+  [scalapb.GeneratedMessage](https://scalapb.github.io/docs/generated-code) in annotated service\n+\n+First, you need the `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependency to use the above features:\n+\n+<CodeBlock language=\"groovy\" filename=\"build.sbt\">{`\n+libraryDependencies += \"com.linecorp.armeria\" %% \"armeria-scalapb\" % \"${versions['com.linecorp.armeria:armeria-bom']}\"\n+`}</CodeBlock>\n+\n+<Tip> \n+\n+`armeria-scalapb` is only available for Scala 2.12.x and 2.13.x.\n+\n+</Tip> \n+\n+## Running a gRPC service\n+\n+You need to register a ScalaPB gRPC stub to a <type://GrpcService> using a <type://GrpcServiceBuilder>\n+and add it to the <type://ServerBuilder>:\n+\n+```scala\n+import com.linecorp.armeria.common.scalapb.ScalaPBJsonMarshaller\n+import com.linecorp.armeria.server.Server\n+import com.linecorp.armeria.server.docs.DocService\n+import com.linecorp.armeria.server.grpc.GrpcService\n+\n+// Creates GrpcService with your gRPC stub generated by ScalaPB.\n+val grpcService =\n+      GrpcService\n+        .builder()\n+        // Add your ScalaPB gRPC stub using `bindService()`\n+        .addService(YourServiceGrpc.bindService(\n+          new YourServiceImpl, ExecutionContext.global))\n+        // Register `ScalaPBJsonMarshaller` for supporting gRPC JSON format.\n+        .jsonMarshallerFactory(_ => ScalaPBJsonMarshaller())\n+        .enableUnframedRequests(true)\n+        .build()\n+\n+// Creates Armeria Server for ScalaPB gRPC stub.\n+Server.builder()\n+      .http(httpPort)\n+      .https(httpsPort)\n+      .service(grpcService)\n+      // Add DocService for browsing the list gRPC services and \n+      // invoking a service operation from a web form.\n+      // See https://armeria.dev/docs/server-docservice for more information.\n+      .serviceUnder( \"/docs\", new DocService())\n+      .build()\n+```\n+\n+Please consult [gRPC service](https://armeria.dev/docs/server-grpc) for more information.\n+\n+## Calling a gRPC service\n+\n+You can also call a gRPC service using a ScalaPB gRPC client.\n+`ScalaPbJsonMarshaller` should be registered with <type://GrpcClientOptions#GRPC_JSON_MARSHALLER_FACTORY> to \n+support gRPC JSON serialization format.\n+\n+```scala\n+import com.linecorp.armeria.client.Clients\n+import com.linecorp.armeria.client.grpc.GrpcClientOptions\n+import com.linecorp.armeria.common.scalapb.ScalaPbJsonMarshaller\n+        \n+val client = \n+  Clients.builder(\"gproto+http://127.0.0.1:8080/\")\n+         // Register 'ScalaPBJsonMarshaller' for enabling gRPC JSON serialization format\n+         .option(GrpcClientOptions.GRPC_JSON_MARSHALLER_FACTORY\n+                                  .newValue(_ => ScalaPbJsonMarshaller()))\n+         .build(classOf[HelloServiceBlockingStub])\n+    \n+val request = HelloRequest(\"Armerian World\")\n+val reply = helloService.hello(request)\n+assert(reply.message == \"Hello, Armerian World!\")\n+```\n+\n+Please consult [gRPC client](https://armeria.dev/docs/client-grpc) for more information.\n+\n+## Supporting ScalaPB in annotated services. \n+\n+### Converting an HTTP request to a ScalaPB's `GeneratedMesage` \n+\n+- A Protocol Buffers is automatically converted to a `GeneratedMessage` only when\n+  the content type is either one of followings:\n+  - `application/probuf` \n+  - `application/octet-stream`\n+  - `application/x-protobuf`\n+  - no media type negotiated\n+- A JSON is automatically converted to a `GeneratedMessage` only when the content type \n+  is either `application/json` or ends with `+json`.\n+\n+If you have the following proto file,\n+\n+```protobuf\n+syntax = \"proto3\";\n+package com.example.testing;\n+option java_package = \"com.example.testing\";\n+\n+message SimpleRequest {\n+  string payload = 1;\n+  int32 size = 2;\n+}\n+\n+message SimpleResponse {\n+  string message = 1;\n+  int32 status = 2;\n+}\n+```\n+\n+the `SimpleRequest` generated by ScalaPB could be used for a parameter of your service method.\n+\n+```scala\n+import com.example.testing.SimpleRequest\n+import com.linecorp.armeria.server.annotation.{ConsumesJson, ConsumesProtobuf, Post}\n+\n+class GreetingService {\n+  // If a content type is not set, Protoco Buffers' parser is used by default.\n+  @Post(\"/no-content-type\")\n+  def noContentType(request: SimpleRequest): String = s\"Hello, ${request.payload}!\"\n+\n+  // Convert the Protocol Buffers in an HTTP payload into the 'SimpleRequest'\n+  @Post(\"/protobuf\")\n+  @ConsumesProtobuf\n+  def consumeProtobuf(request: SimpleRequest): String = s\"Hello, ${request.payload}!\"\n+\n+  // Convert the JSON in an HTTP payload into a 'SimpleRequest'\n+  @Post(\"/json\")\n+  @ConsumesJson\n+  def consumeJson(request: SimpleRequest): String = \"Hello, Armeria!\"\n+}\n+```\n+\n+### Returning a ScalaPB's `GeneratedMesage`\n+\n+A `GeneratedMesage` can be converted to either Protocol Buffers or JSON.\n+\n+```scala\n+import com.example.testing.SimpleResponse\n+import scala.concurrent.Future\n+\n+class GreetingService {\n+\n+  // Convert 'SimpleResponse' into Protocol Buffers wire format\n+  @Get(\"/protobuf\")\n+  @ProducesProtobuf\n+  def produceProtobuf: SimpleResponse = SimpleResponse(\"Hello, Armeria!\")\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9d8dc9c83fa81c19ea25ecb0e2b068330d0115"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczNTY0Nw==", "bodyText": "an Armeria's event loop?", "url": "https://github.com/line/armeria/pull/3192#discussion_r530735647", "createdAt": "2020-11-26T02:17:17Z", "author": {"login": "minwoox"}, "path": "site/src/pages/docs/advanced-scalapb.mdx", "diffHunk": "@@ -0,0 +1,226 @@\n+import versions from '../../../gen-src/versions.json';\n+\n+# ScalaPB integration\n+\n+<Tip>\n+\n+Visit [here](https://github.com/line/armeria/tree/master/examples/grpc-scala) to find a fully working example.\n+\n+</Tip>\n+\n+[ScalaPB](https://scalapb.github.io/) is a protocol buffer compiler (protoc) plugin for \n+[Scala](https://www.scala-lang.org/). It will generate Scala case classes, parsers and serializers for \n+your [protocol buffers](https://developers.google.com/protocol-buffers). \n+ScalaPB also supports a thin wrapper around [grpc-java](https://grpc.io/docs/languages/java/quickstart/),\n+and provides you with an interface that is based on Scala's standard library\n+[Future](https://docs.scala-lang.org/overviews/core/futures.html), \n+while streaming is based on the Observer pattern.\n+If you integrate ScalaPB with Armeria, you can leverage the followings:\n+- Using both [gRPC server](https://armeria.dev/docs/server-docservice) and \n+  [gRPC client](https://armeria.dev/docs/client-grpc) features such as gRPC-over-HTTP/1 and \n+  [gRPC-Web](gRPC-Web) protocol powered by Armeria\n+- Browsing the list of available RPC operations and invoking a service operation via a web console\n+- Converting either a Protocol Buffers or JSON to and from an\n+  [scalapb.GeneratedMessage](https://scalapb.github.io/docs/generated-code) in annotated service\n+\n+First, you need the `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependency to use the above features:\n+\n+<CodeBlock language=\"groovy\" filename=\"build.sbt\">{`\n+libraryDependencies += \"com.linecorp.armeria\" %% \"armeria-scalapb\" % \"${versions['com.linecorp.armeria:armeria-bom']}\"\n+`}</CodeBlock>\n+\n+<Tip> \n+\n+`armeria-scalapb` is only available for Scala 2.12.x and 2.13.x.\n+\n+</Tip> \n+\n+## Running a gRPC service\n+\n+You need to register a ScalaPB gRPC stub to a <type://GrpcService> using a <type://GrpcServiceBuilder>\n+and add it to the <type://ServerBuilder>:\n+\n+```scala\n+import com.linecorp.armeria.common.scalapb.ScalaPBJsonMarshaller\n+import com.linecorp.armeria.server.Server\n+import com.linecorp.armeria.server.docs.DocService\n+import com.linecorp.armeria.server.grpc.GrpcService\n+\n+// Creates GrpcService with your gRPC stub generated by ScalaPB.\n+val grpcService =\n+      GrpcService\n+        .builder()\n+        // Add your ScalaPB gRPC stub using `bindService()`\n+        .addService(YourServiceGrpc.bindService(\n+          new YourServiceImpl, ExecutionContext.global))\n+        // Register `ScalaPBJsonMarshaller` for supporting gRPC JSON format.\n+        .jsonMarshallerFactory(_ => ScalaPBJsonMarshaller())\n+        .enableUnframedRequests(true)\n+        .build()\n+\n+// Creates Armeria Server for ScalaPB gRPC stub.\n+Server.builder()\n+      .http(httpPort)\n+      .https(httpsPort)\n+      .service(grpcService)\n+      // Add DocService for browsing the list gRPC services and \n+      // invoking a service operation from a web form.\n+      // See https://armeria.dev/docs/server-docservice for more information.\n+      .serviceUnder( \"/docs\", new DocService())\n+      .build()\n+```\n+\n+Please consult [gRPC service](https://armeria.dev/docs/server-grpc) for more information.\n+\n+## Calling a gRPC service\n+\n+You can also call a gRPC service using a ScalaPB gRPC client.\n+`ScalaPbJsonMarshaller` should be registered with <type://GrpcClientOptions#GRPC_JSON_MARSHALLER_FACTORY> to \n+support gRPC JSON serialization format.\n+\n+```scala\n+import com.linecorp.armeria.client.Clients\n+import com.linecorp.armeria.client.grpc.GrpcClientOptions\n+import com.linecorp.armeria.common.scalapb.ScalaPbJsonMarshaller\n+        \n+val client = \n+  Clients.builder(\"gproto+http://127.0.0.1:8080/\")\n+         // Register 'ScalaPBJsonMarshaller' for enabling gRPC JSON serialization format\n+         .option(GrpcClientOptions.GRPC_JSON_MARSHALLER_FACTORY\n+                                  .newValue(_ => ScalaPbJsonMarshaller()))\n+         .build(classOf[HelloServiceBlockingStub])\n+    \n+val request = HelloRequest(\"Armerian World\")\n+val reply = helloService.hello(request)\n+assert(reply.message == \"Hello, Armerian World!\")\n+```\n+\n+Please consult [gRPC client](https://armeria.dev/docs/client-grpc) for more information.\n+\n+## Supporting ScalaPB in annotated services. \n+\n+### Converting an HTTP request to a ScalaPB's `GeneratedMesage` \n+\n+- A Protocol Buffers is automatically converted to a `GeneratedMessage` only when\n+  the content type is either one of followings:\n+  - `application/probuf` \n+  - `application/octet-stream`\n+  - `application/x-protobuf`\n+  - no media type negotiated\n+- A JSON is automatically converted to a `GeneratedMessage` only when the content type \n+  is either `application/json` or ends with `+json`.\n+\n+If you have the following proto file,\n+\n+```protobuf\n+syntax = \"proto3\";\n+package com.example.testing;\n+option java_package = \"com.example.testing\";\n+\n+message SimpleRequest {\n+  string payload = 1;\n+  int32 size = 2;\n+}\n+\n+message SimpleResponse {\n+  string message = 1;\n+  int32 status = 2;\n+}\n+```\n+\n+the `SimpleRequest` generated by ScalaPB could be used for a parameter of your service method.\n+\n+```scala\n+import com.example.testing.SimpleRequest\n+import com.linecorp.armeria.server.annotation.{ConsumesJson, ConsumesProtobuf, Post}\n+\n+class GreetingService {\n+  // If a content type is not set, Protoco Buffers' parser is used by default.\n+  @Post(\"/no-content-type\")\n+  def noContentType(request: SimpleRequest): String = s\"Hello, ${request.payload}!\"\n+\n+  // Convert the Protocol Buffers in an HTTP payload into the 'SimpleRequest'\n+  @Post(\"/protobuf\")\n+  @ConsumesProtobuf\n+  def consumeProtobuf(request: SimpleRequest): String = s\"Hello, ${request.payload}!\"\n+\n+  // Convert the JSON in an HTTP payload into a 'SimpleRequest'\n+  @Post(\"/json\")\n+  @ConsumesJson\n+  def consumeJson(request: SimpleRequest): String = \"Hello, Armeria!\"\n+}\n+```\n+\n+### Returning a ScalaPB's `GeneratedMesage`\n+\n+A `GeneratedMesage` can be converted to either Protocol Buffers or JSON.\n+\n+```scala\n+import com.example.testing.SimpleResponse\n+import scala.concurrent.Future\n+\n+class GreetingService {\n+\n+  // Convert 'SimpleResponse' into Protocol Buffers wire format\n+  @Get(\"/protobuf\")\n+  @ProducesProtobuf\n+  def produceProtobuf: SimpleResponse = SimpleResponse(\"Hello, Armeria!\")\n+\n+\n+  // Convert 'SimpleResponse' into JSON format\n+  @Get(\"/json\")\n+  @ProducesJson\n+  def produceJson: SimpleResponse = SimpleResponse(\"Hello, Armeria!\")\n+\n+  // Convert 'SimpleResponse' into Protocol Buffers wire format with Scala Future\n+  @Get(\"/protobuf+async\")\n+  @ProducesProtobuf\n+  def produceProtobufFuture: Future[SimpleResponse] = \n+    Future { SimpleResponse(\"Hello, Armeria!\") }\n+}\n+```\n+\n+However, a sequence of `GeneratedMesage`s can be only converted to JSON array because Protocol Buffers\n+wire format is [not self-delimiting](https://developers.google.com/protocol-buffers/docs/techniques#streaming).\n+The following collection types can be converted to JSON array:\n+- `scala.List`\n+- `scala.Vector`\n+- `scala.Set`\n+- Reactive Stream [Publisher](https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html)\n+- `java.util.List` \n+- `java.util.Set`\n+- `java.util.stream.Stream`\n+\n+### Injecting an [ExecutionContext](https://www.scala-lang.org/api/current/scala/concurrent/ExecutionContext.html) to an annotated service method\n+\n+An `ExecutionContext` could be automatically injected as a method parameter to execute an asynchronous service\n+on top of Armeria's an event loop or a blocking task executor.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9d8dc9c83fa81c19ea25ecb0e2b068330d0115"}, "originalPosition": 197}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d5447228e40e8fd44531a32afa5d5972a77638c", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/7d5447228e40e8fd44531a32afa5d5972a77638c", "committedDate": "2020-11-26T05:50:52Z", "message": "Address comments by @minwoox"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4857, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}