{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNzI2Njcy", "number": 2687, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNDoxNToxMVrOD42PAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNDoxNToxMVrOD42PAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTM1NDI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNDoxNToxMVrOGPyXuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNToxODo1M1rOGPy_5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIwNzA5Ng==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!wroteAny && o instanceof AbstractStreamMessage.CloseEvent) {\n          \n          \n            \n                    if (!wroteAny && o instanceof CloseEvent) {", "url": "https://github.com/line/armeria/pull/2687#discussion_r419207096", "createdAt": "2020-05-04T04:15:11Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java", "diffHunk": "@@ -174,25 +174,33 @@ private void abort0(Throwable cause) {\n             }\n         }\n         assert subscription != null;\n+        final SubscriptionImpl abortedSubscription = subscription;\n \n         if (setState(State.OPEN, State.CLEANUP)) {\n-            notifySubscriberOfCloseEvent(subscription, newCloseEvent(cause));\n+            notifySubscriberOfCloseEvent(abortedSubscription, newCloseEvent(cause));\n             return;\n         }\n \n         if (setState(State.CLOSED, State.CLEANUP)) {\n             // close() or close(cause) has been called before cancel() or abort() is called.\n-\n-            final Object o = queue.peek();\n-            // If there's no data pushed (i.e empty stream), notify subscriber with the event pushed by\n-            // close() or close(cause).\n-            if (!wroteAny && o instanceof CloseEvent) {\n-                notifySubscriberOfCloseEvent(subscription, (CloseEvent) queue.remove());\n-                return;\n+            if (abortedSubscription.needsDirectInvocation()) {\n+                abort0(cause, abortedSubscription);\n+            } else {\n+                abortedSubscription.executor().execute(() -> abort0(cause, abortedSubscription));\n             }\n+        }\n+    }\n \n-            notifySubscriberOfCloseEvent(subscription, newCloseEvent(cause));\n+    private void abort0(Throwable cause, SubscriptionImpl subscription) {\n+        final Object o = queue.peek();\n+        // If there's no data pushed (i.e empty stream), notify subscriber with the event pushed by\n+        // close() or close(cause).\n+        if (!wroteAny && o instanceof AbstractStreamMessage.CloseEvent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10d733f701e24f981861abccc6cb3d07e1e5f35"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxNzM4Mg==", "bodyText": "Fixed. Thanks!", "url": "https://github.com/line/armeria/pull/2687#discussion_r419217382", "createdAt": "2020-05-04T05:18:53Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java", "diffHunk": "@@ -174,25 +174,33 @@ private void abort0(Throwable cause) {\n             }\n         }\n         assert subscription != null;\n+        final SubscriptionImpl abortedSubscription = subscription;\n \n         if (setState(State.OPEN, State.CLEANUP)) {\n-            notifySubscriberOfCloseEvent(subscription, newCloseEvent(cause));\n+            notifySubscriberOfCloseEvent(abortedSubscription, newCloseEvent(cause));\n             return;\n         }\n \n         if (setState(State.CLOSED, State.CLEANUP)) {\n             // close() or close(cause) has been called before cancel() or abort() is called.\n-\n-            final Object o = queue.peek();\n-            // If there's no data pushed (i.e empty stream), notify subscriber with the event pushed by\n-            // close() or close(cause).\n-            if (!wroteAny && o instanceof CloseEvent) {\n-                notifySubscriberOfCloseEvent(subscription, (CloseEvent) queue.remove());\n-                return;\n+            if (abortedSubscription.needsDirectInvocation()) {\n+                abort0(cause, abortedSubscription);\n+            } else {\n+                abortedSubscription.executor().execute(() -> abort0(cause, abortedSubscription));\n             }\n+        }\n+    }\n \n-            notifySubscriberOfCloseEvent(subscription, newCloseEvent(cause));\n+    private void abort0(Throwable cause, SubscriptionImpl subscription) {\n+        final Object o = queue.peek();\n+        // If there's no data pushed (i.e empty stream), notify subscriber with the event pushed by\n+        // close() or close(cause).\n+        if (!wroteAny && o instanceof AbstractStreamMessage.CloseEvent) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIwNzA5Ng=="}, "originalCommit": {"oid": "a10d733f701e24f981861abccc6cb3d07e1e5f35"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2573, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}