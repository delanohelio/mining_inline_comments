{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2MzA3Njg0", "number": 3038, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMjoyMDoyN1rOEfKKBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoyNTo1MFrOE2pu2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTA3NzE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponseBodyStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMjoyMDoyN1rOHLQHXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMjoyMDoyN1rOHLQHXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU2MDQxNA==", "bodyText": "{@linkplain HttpHeaders trailers}?", "url": "https://github.com/line/armeria/pull/3038#discussion_r481560414", "createdAt": "2020-09-02T02:20:27Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponseBodyStream.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.reactivestreams.Subscriber;\n+\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * An HTTP response body stream which publishes HTTP payloads as a stream of {@link HttpData}.\n+ * {@link #informationalHeaders()}, {@link #headers()} will be completed before publishing the first element of\n+ * {@link HttpData}. {@link #trailers()} might not complete until the entire {@link HttpData} has been consumed.\n+ */\n+public interface HttpResponseBodyStream extends StreamMessage<HttpData> {\n+    /**\n+     * Returns a {@link CompletableFuture} which completes a list of\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#Information_responses\">informational\n+     * </a> {@link ResponseHeaders}.\n+     */\n+    CompletableFuture<List<ResponseHeaders>> informationalHeaders();\n+\n+    /**\n+     * Returns a {@link CompletableFuture} which completes a non-informational {@link ResponseHeaders}.\n+     */\n+    CompletableFuture<ResponseHeaders> headers();\n+\n+    /**\n+     * Returns a {@link CompletableFuture} which completes a {@link HttpHeaders trailers}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5875796ff63163a414888d58b132b494bcf1555"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTA3OTk3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponseBodyStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMjoyMTowNlrOHLQJIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMjoyMTowNlrOHLQJIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU2MDg2Nw==", "bodyText": "ditto", "url": "https://github.com/line/armeria/pull/3038#discussion_r481560867", "createdAt": "2020-09-02T02:21:06Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponseBodyStream.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.reactivestreams.Subscriber;\n+\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * An HTTP response body stream which publishes HTTP payloads as a stream of {@link HttpData}.\n+ * {@link #informationalHeaders()}, {@link #headers()} will be completed before publishing the first element of\n+ * {@link HttpData}. {@link #trailers()} might not complete until the entire {@link HttpData} has been consumed.\n+ */\n+public interface HttpResponseBodyStream extends StreamMessage<HttpData> {\n+    /**\n+     * Returns a {@link CompletableFuture} which completes a list of\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#Information_responses\">informational\n+     * </a> {@link ResponseHeaders}.\n+     */\n+    CompletableFuture<List<ResponseHeaders>> informationalHeaders();\n+\n+    /**\n+     * Returns a {@link CompletableFuture} which completes a non-informational {@link ResponseHeaders}.\n+     */\n+    CompletableFuture<ResponseHeaders> headers();\n+\n+    /**\n+     * Returns a {@link CompletableFuture} which completes a {@link HttpHeaders trailers}.\n+     * If a {@link HttpResponse} does not contain trailers, the returned {@link CompletableFuture} completes\n+     * with an {@link HttpHeaders#of() empty headers}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5875796ff63163a414888d58b132b494bcf1555"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTA4OTcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/DefaultHttpResponseBodyStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMjoyMzo0M1rOHLQPpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMjoyMzo0M1rOHLQPpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU2MjUzNA==", "bodyText": "nit: requireNonNull(executor, \"executor\");", "url": "https://github.com/line/armeria/pull/3038#discussion_r481562534", "createdAt": "2020-09-02T02:23:43Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/DefaultHttpResponseBodyStream.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnmodifiableFuture;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+final class DefaultHttpResponseBodyStream implements HttpResponseBodyStream {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultHttpResponseBodyStream.class);\n+\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscription> upstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscription.class, \"upstream\");\n+\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscriber> downstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscriber.class, \"downstream\");\n+\n+    private static final ResponseHeaders HEADERS_WITH_UNKNOWN_STATUS = ResponseHeaders.of(HttpStatus.UNKNOWN);\n+    private static final HeadersFuture<List<ResponseHeaders>> EMPTY_INFORMATIONAL_HEADERS;\n+    private static final HeadersFuture<HttpHeaders> EMPTY_TRAILERS;\n+\n+    static {\n+        EMPTY_INFORMATIONAL_HEADERS = new HeadersFuture<>();\n+        EMPTY_INFORMATIONAL_HEADERS.doComplete(ImmutableList.of());\n+\n+        EMPTY_TRAILERS = new HeadersFuture<>();\n+        EMPTY_TRAILERS.doComplete(HttpHeaders.of());\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultHttpResponseBodyStream, HeadersFuture>\n+            informationalHeadersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultHttpResponseBodyStream.class, HeadersFuture.class, \"informationalHeadersFuture\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultHttpResponseBodyStream, HeadersFuture>\n+            trailersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultHttpResponseBodyStream.class, HeadersFuture.class, \"trailersFuture\");\n+\n+    private final HeadersFuture<ResponseHeaders> headersFuture = new HeadersFuture<>();\n+    private final BodySubscriber bodySubscriber = new BodySubscriber();\n+    private final HttpResponse response;\n+    private final EventExecutor executor;\n+\n+    @Nullable\n+    private volatile HeadersFuture<List<ResponseHeaders>> informationalHeadersFuture;\n+    @Nullable\n+    private volatile HeadersFuture<HttpHeaders> trailersFuture;\n+    private volatile boolean wroteAny;\n+\n+    DefaultHttpResponseBodyStream(HttpResponse response, EventExecutor executor,\n+                                  SubscriptionOption... options) {\n+        requireNonNull(response, \"response\");\n+        this.response = response;\n+        this.executor = executor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5875796ff63163a414888d58b132b494bcf1555"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTEwMDQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/DefaultHttpResponseBodyStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMjoyNjoyNlrOHLQWug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMjoyNjoyNlrOHLQWug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU2NDM0Ng==", "bodyText": "How about doing this is the bodySubscriber? (e.g. setting pendingRequests to 1, etc.)", "url": "https://github.com/line/armeria/pull/3038#discussion_r481564346", "createdAt": "2020-09-02T02:26:26Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/DefaultHttpResponseBodyStream.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnmodifiableFuture;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+final class DefaultHttpResponseBodyStream implements HttpResponseBodyStream {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultHttpResponseBodyStream.class);\n+\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscription> upstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscription.class, \"upstream\");\n+\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscriber> downstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscriber.class, \"downstream\");\n+\n+    private static final ResponseHeaders HEADERS_WITH_UNKNOWN_STATUS = ResponseHeaders.of(HttpStatus.UNKNOWN);\n+    private static final HeadersFuture<List<ResponseHeaders>> EMPTY_INFORMATIONAL_HEADERS;\n+    private static final HeadersFuture<HttpHeaders> EMPTY_TRAILERS;\n+\n+    static {\n+        EMPTY_INFORMATIONAL_HEADERS = new HeadersFuture<>();\n+        EMPTY_INFORMATIONAL_HEADERS.doComplete(ImmutableList.of());\n+\n+        EMPTY_TRAILERS = new HeadersFuture<>();\n+        EMPTY_TRAILERS.doComplete(HttpHeaders.of());\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultHttpResponseBodyStream, HeadersFuture>\n+            informationalHeadersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultHttpResponseBodyStream.class, HeadersFuture.class, \"informationalHeadersFuture\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultHttpResponseBodyStream, HeadersFuture>\n+            trailersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultHttpResponseBodyStream.class, HeadersFuture.class, \"trailersFuture\");\n+\n+    private final HeadersFuture<ResponseHeaders> headersFuture = new HeadersFuture<>();\n+    private final BodySubscriber bodySubscriber = new BodySubscriber();\n+    private final HttpResponse response;\n+    private final EventExecutor executor;\n+\n+    @Nullable\n+    private volatile HeadersFuture<List<ResponseHeaders>> informationalHeadersFuture;\n+    @Nullable\n+    private volatile HeadersFuture<HttpHeaders> trailersFuture;\n+    private volatile boolean wroteAny;\n+\n+    DefaultHttpResponseBodyStream(HttpResponse response, EventExecutor executor,\n+                                  SubscriptionOption... options) {\n+        requireNonNull(response, \"response\");\n+        this.response = response;\n+        this.executor = executor;\n+\n+        response.subscribe(bodySubscriber, executor, options);\n+        // Prefetch headers\n+        bodySubscriber.request(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5875796ff63163a414888d58b132b494bcf1555"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTEyMjIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/DefaultHttpResponseBodyStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMjozMjowM1rOHLQkzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMjozMjowM1rOHLQkzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU2Nzk1MQ==", "bodyText": "Do we need upstreamUpdater? Can't we just use the subscription?", "url": "https://github.com/line/armeria/pull/3038#discussion_r481567951", "createdAt": "2020-09-02T02:32:03Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/DefaultHttpResponseBodyStream.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnmodifiableFuture;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+final class DefaultHttpResponseBodyStream implements HttpResponseBodyStream {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultHttpResponseBodyStream.class);\n+\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscription> upstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscription.class, \"upstream\");\n+\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscriber> downstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscriber.class, \"downstream\");\n+\n+    private static final ResponseHeaders HEADERS_WITH_UNKNOWN_STATUS = ResponseHeaders.of(HttpStatus.UNKNOWN);\n+    private static final HeadersFuture<List<ResponseHeaders>> EMPTY_INFORMATIONAL_HEADERS;\n+    private static final HeadersFuture<HttpHeaders> EMPTY_TRAILERS;\n+\n+    static {\n+        EMPTY_INFORMATIONAL_HEADERS = new HeadersFuture<>();\n+        EMPTY_INFORMATIONAL_HEADERS.doComplete(ImmutableList.of());\n+\n+        EMPTY_TRAILERS = new HeadersFuture<>();\n+        EMPTY_TRAILERS.doComplete(HttpHeaders.of());\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultHttpResponseBodyStream, HeadersFuture>\n+            informationalHeadersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultHttpResponseBodyStream.class, HeadersFuture.class, \"informationalHeadersFuture\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultHttpResponseBodyStream, HeadersFuture>\n+            trailersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultHttpResponseBodyStream.class, HeadersFuture.class, \"trailersFuture\");\n+\n+    private final HeadersFuture<ResponseHeaders> headersFuture = new HeadersFuture<>();\n+    private final BodySubscriber bodySubscriber = new BodySubscriber();\n+    private final HttpResponse response;\n+    private final EventExecutor executor;\n+\n+    @Nullable\n+    private volatile HeadersFuture<List<ResponseHeaders>> informationalHeadersFuture;\n+    @Nullable\n+    private volatile HeadersFuture<HttpHeaders> trailersFuture;\n+    private volatile boolean wroteAny;\n+\n+    DefaultHttpResponseBodyStream(HttpResponse response, EventExecutor executor,\n+                                  SubscriptionOption... options) {\n+        requireNonNull(response, \"response\");\n+        this.response = response;\n+        this.executor = executor;\n+\n+        response.subscribe(bodySubscriber, executor, options);\n+        // Prefetch headers\n+        bodySubscriber.request(1);\n+    }\n+\n+    @Override\n+    public CompletableFuture<List<ResponseHeaders>> informationalHeaders() {\n+        final HeadersFuture<List<ResponseHeaders>> informationalHeadersFuture = this.informationalHeadersFuture;\n+        if (informationalHeadersFuture != null) {\n+            return informationalHeadersFuture;\n+        }\n+\n+        informationalHeadersFutureUpdater.compareAndSet(this, null, new HeadersFuture<>());\n+        return this.informationalHeadersFuture;\n+    }\n+\n+    @Override\n+    public CompletableFuture<ResponseHeaders> headers() {\n+        return headersFuture;\n+    }\n+\n+    @Override\n+    public CompletableFuture<HttpHeaders> trailers() {\n+        final HeadersFuture<HttpHeaders> trailersFuture = this.trailersFuture;\n+        if (trailersFuture != null) {\n+            return trailersFuture;\n+        }\n+\n+        trailersFutureUpdater.compareAndSet(this, null, new HeadersFuture<>());\n+        return this.trailersFuture;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        return response.isOpen();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return !isOpen() && !wroteAny;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return response.whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor unused) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        if (executor.inEventLoop()) {\n+            bodySubscriber.setDownStream(subscriber);\n+        } else {\n+            executor.execute(() -> bodySubscriber.setDownStream(subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void abort() {\n+        response.abort();\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        response.abort(cause);\n+    }\n+\n+    private final class BodySubscriber implements Subscriber<HttpObject>, Subscription {\n+\n+        @Nullable\n+        private ImmutableList.Builder<ResponseHeaders> informationalHeadersBuilder;\n+        @Nullable\n+        private Throwable cause;\n+        private boolean completing;\n+\n+        private boolean sawLeadingHeaders;\n+\n+        @Nullable\n+        volatile Subscriber<? super HttpData> downstream;\n+        @Nullable\n+        volatile Subscription upstream;\n+        private volatile long pendingRequests;\n+        private volatile boolean cancelCalled;\n+\n+        private void setDownStream(Subscriber<? super HttpData> downstream) {\n+            try {\n+                if (!downstreamUpdater.compareAndSet(this, null, downstream)) {\n+                    downstream.onSubscribe(NoopSubscription.get());\n+                    downstream.onError(new IllegalStateException(\"subscribed by other subscriber already\"));\n+                    return;\n+                }\n+                downstream.onSubscribe(this);\n+                if (cause != null) {\n+                    downstream.onError(cause);\n+                } else if (completing) {\n+                    downstream.onComplete();\n+                }\n+            } catch (Throwable t) {\n+                throwIfFatal(t);\n+                logger.warn(\"Subscriber should not throw an exception. subscriber: {}\", downstream, t);\n+            }\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            requireNonNull(subscription, \"subscription\");\n+            if (!upstreamUpdater.compareAndSet(this, null, subscription) || cancelCalled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5875796ff63163a414888d58b132b494bcf1555"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTE0NDk4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/DefaultHttpResponseBodyStream.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMjozNzo0M1rOHLQy_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNDoyMDoyNlrOHLV7Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU3MTU4MA==", "bodyText": "I think there's a race with the request method.\nFor example:\n\nA thread is in the line between 215 and 216\nB thread calls subscription.request(pendingRequests);\nA thread does pendingRequests = LongMath.saturatedAdd(n, pendingRequests);", "url": "https://github.com/line/armeria/pull/3038#discussion_r481571580", "createdAt": "2020-09-02T02:37:43Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/DefaultHttpResponseBodyStream.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnmodifiableFuture;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+final class DefaultHttpResponseBodyStream implements HttpResponseBodyStream {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultHttpResponseBodyStream.class);\n+\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscription> upstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscription.class, \"upstream\");\n+\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscriber> downstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscriber.class, \"downstream\");\n+\n+    private static final ResponseHeaders HEADERS_WITH_UNKNOWN_STATUS = ResponseHeaders.of(HttpStatus.UNKNOWN);\n+    private static final HeadersFuture<List<ResponseHeaders>> EMPTY_INFORMATIONAL_HEADERS;\n+    private static final HeadersFuture<HttpHeaders> EMPTY_TRAILERS;\n+\n+    static {\n+        EMPTY_INFORMATIONAL_HEADERS = new HeadersFuture<>();\n+        EMPTY_INFORMATIONAL_HEADERS.doComplete(ImmutableList.of());\n+\n+        EMPTY_TRAILERS = new HeadersFuture<>();\n+        EMPTY_TRAILERS.doComplete(HttpHeaders.of());\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultHttpResponseBodyStream, HeadersFuture>\n+            informationalHeadersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultHttpResponseBodyStream.class, HeadersFuture.class, \"informationalHeadersFuture\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultHttpResponseBodyStream, HeadersFuture>\n+            trailersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultHttpResponseBodyStream.class, HeadersFuture.class, \"trailersFuture\");\n+\n+    private final HeadersFuture<ResponseHeaders> headersFuture = new HeadersFuture<>();\n+    private final BodySubscriber bodySubscriber = new BodySubscriber();\n+    private final HttpResponse response;\n+    private final EventExecutor executor;\n+\n+    @Nullable\n+    private volatile HeadersFuture<List<ResponseHeaders>> informationalHeadersFuture;\n+    @Nullable\n+    private volatile HeadersFuture<HttpHeaders> trailersFuture;\n+    private volatile boolean wroteAny;\n+\n+    DefaultHttpResponseBodyStream(HttpResponse response, EventExecutor executor,\n+                                  SubscriptionOption... options) {\n+        requireNonNull(response, \"response\");\n+        this.response = response;\n+        this.executor = executor;\n+\n+        response.subscribe(bodySubscriber, executor, options);\n+        // Prefetch headers\n+        bodySubscriber.request(1);\n+    }\n+\n+    @Override\n+    public CompletableFuture<List<ResponseHeaders>> informationalHeaders() {\n+        final HeadersFuture<List<ResponseHeaders>> informationalHeadersFuture = this.informationalHeadersFuture;\n+        if (informationalHeadersFuture != null) {\n+            return informationalHeadersFuture;\n+        }\n+\n+        informationalHeadersFutureUpdater.compareAndSet(this, null, new HeadersFuture<>());\n+        return this.informationalHeadersFuture;\n+    }\n+\n+    @Override\n+    public CompletableFuture<ResponseHeaders> headers() {\n+        return headersFuture;\n+    }\n+\n+    @Override\n+    public CompletableFuture<HttpHeaders> trailers() {\n+        final HeadersFuture<HttpHeaders> trailersFuture = this.trailersFuture;\n+        if (trailersFuture != null) {\n+            return trailersFuture;\n+        }\n+\n+        trailersFutureUpdater.compareAndSet(this, null, new HeadersFuture<>());\n+        return this.trailersFuture;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        return response.isOpen();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return !isOpen() && !wroteAny;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return response.whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor unused) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        if (executor.inEventLoop()) {\n+            bodySubscriber.setDownStream(subscriber);\n+        } else {\n+            executor.execute(() -> bodySubscriber.setDownStream(subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void abort() {\n+        response.abort();\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        response.abort(cause);\n+    }\n+\n+    private final class BodySubscriber implements Subscriber<HttpObject>, Subscription {\n+\n+        @Nullable\n+        private ImmutableList.Builder<ResponseHeaders> informationalHeadersBuilder;\n+        @Nullable\n+        private Throwable cause;\n+        private boolean completing;\n+\n+        private boolean sawLeadingHeaders;\n+\n+        @Nullable\n+        volatile Subscriber<? super HttpData> downstream;\n+        @Nullable\n+        volatile Subscription upstream;\n+        private volatile long pendingRequests;\n+        private volatile boolean cancelCalled;\n+\n+        private void setDownStream(Subscriber<? super HttpData> downstream) {\n+            try {\n+                if (!downstreamUpdater.compareAndSet(this, null, downstream)) {\n+                    downstream.onSubscribe(NoopSubscription.get());\n+                    downstream.onError(new IllegalStateException(\"subscribed by other subscriber already\"));\n+                    return;\n+                }\n+                downstream.onSubscribe(this);\n+                if (cause != null) {\n+                    downstream.onError(cause);\n+                } else if (completing) {\n+                    downstream.onComplete();\n+                }\n+            } catch (Throwable t) {\n+                throwIfFatal(t);\n+                logger.warn(\"Subscriber should not throw an exception. subscriber: {}\", downstream, t);\n+            }\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            requireNonNull(subscription, \"subscription\");\n+            if (!upstreamUpdater.compareAndSet(this, null, subscription) || cancelCalled) {\n+                subscription.cancel();\n+                return;\n+            }\n+            if (pendingRequests != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5875796ff63163a414888d58b132b494bcf1555"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU3MjE4Mw==", "bodyText": "How about just using the single thread to avoid this problem?", "url": "https://github.com/line/armeria/pull/3038#discussion_r481572183", "createdAt": "2020-09-02T02:38:43Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/DefaultHttpResponseBodyStream.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnmodifiableFuture;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+final class DefaultHttpResponseBodyStream implements HttpResponseBodyStream {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultHttpResponseBodyStream.class);\n+\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscription> upstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscription.class, \"upstream\");\n+\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscriber> downstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscriber.class, \"downstream\");\n+\n+    private static final ResponseHeaders HEADERS_WITH_UNKNOWN_STATUS = ResponseHeaders.of(HttpStatus.UNKNOWN);\n+    private static final HeadersFuture<List<ResponseHeaders>> EMPTY_INFORMATIONAL_HEADERS;\n+    private static final HeadersFuture<HttpHeaders> EMPTY_TRAILERS;\n+\n+    static {\n+        EMPTY_INFORMATIONAL_HEADERS = new HeadersFuture<>();\n+        EMPTY_INFORMATIONAL_HEADERS.doComplete(ImmutableList.of());\n+\n+        EMPTY_TRAILERS = new HeadersFuture<>();\n+        EMPTY_TRAILERS.doComplete(HttpHeaders.of());\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultHttpResponseBodyStream, HeadersFuture>\n+            informationalHeadersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultHttpResponseBodyStream.class, HeadersFuture.class, \"informationalHeadersFuture\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultHttpResponseBodyStream, HeadersFuture>\n+            trailersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultHttpResponseBodyStream.class, HeadersFuture.class, \"trailersFuture\");\n+\n+    private final HeadersFuture<ResponseHeaders> headersFuture = new HeadersFuture<>();\n+    private final BodySubscriber bodySubscriber = new BodySubscriber();\n+    private final HttpResponse response;\n+    private final EventExecutor executor;\n+\n+    @Nullable\n+    private volatile HeadersFuture<List<ResponseHeaders>> informationalHeadersFuture;\n+    @Nullable\n+    private volatile HeadersFuture<HttpHeaders> trailersFuture;\n+    private volatile boolean wroteAny;\n+\n+    DefaultHttpResponseBodyStream(HttpResponse response, EventExecutor executor,\n+                                  SubscriptionOption... options) {\n+        requireNonNull(response, \"response\");\n+        this.response = response;\n+        this.executor = executor;\n+\n+        response.subscribe(bodySubscriber, executor, options);\n+        // Prefetch headers\n+        bodySubscriber.request(1);\n+    }\n+\n+    @Override\n+    public CompletableFuture<List<ResponseHeaders>> informationalHeaders() {\n+        final HeadersFuture<List<ResponseHeaders>> informationalHeadersFuture = this.informationalHeadersFuture;\n+        if (informationalHeadersFuture != null) {\n+            return informationalHeadersFuture;\n+        }\n+\n+        informationalHeadersFutureUpdater.compareAndSet(this, null, new HeadersFuture<>());\n+        return this.informationalHeadersFuture;\n+    }\n+\n+    @Override\n+    public CompletableFuture<ResponseHeaders> headers() {\n+        return headersFuture;\n+    }\n+\n+    @Override\n+    public CompletableFuture<HttpHeaders> trailers() {\n+        final HeadersFuture<HttpHeaders> trailersFuture = this.trailersFuture;\n+        if (trailersFuture != null) {\n+            return trailersFuture;\n+        }\n+\n+        trailersFutureUpdater.compareAndSet(this, null, new HeadersFuture<>());\n+        return this.trailersFuture;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        return response.isOpen();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return !isOpen() && !wroteAny;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return response.whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor unused) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        if (executor.inEventLoop()) {\n+            bodySubscriber.setDownStream(subscriber);\n+        } else {\n+            executor.execute(() -> bodySubscriber.setDownStream(subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void abort() {\n+        response.abort();\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        response.abort(cause);\n+    }\n+\n+    private final class BodySubscriber implements Subscriber<HttpObject>, Subscription {\n+\n+        @Nullable\n+        private ImmutableList.Builder<ResponseHeaders> informationalHeadersBuilder;\n+        @Nullable\n+        private Throwable cause;\n+        private boolean completing;\n+\n+        private boolean sawLeadingHeaders;\n+\n+        @Nullable\n+        volatile Subscriber<? super HttpData> downstream;\n+        @Nullable\n+        volatile Subscription upstream;\n+        private volatile long pendingRequests;\n+        private volatile boolean cancelCalled;\n+\n+        private void setDownStream(Subscriber<? super HttpData> downstream) {\n+            try {\n+                if (!downstreamUpdater.compareAndSet(this, null, downstream)) {\n+                    downstream.onSubscribe(NoopSubscription.get());\n+                    downstream.onError(new IllegalStateException(\"subscribed by other subscriber already\"));\n+                    return;\n+                }\n+                downstream.onSubscribe(this);\n+                if (cause != null) {\n+                    downstream.onError(cause);\n+                } else if (completing) {\n+                    downstream.onComplete();\n+                }\n+            } catch (Throwable t) {\n+                throwIfFatal(t);\n+                logger.warn(\"Subscriber should not throw an exception. subscriber: {}\", downstream, t);\n+            }\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            requireNonNull(subscription, \"subscription\");\n+            if (!upstreamUpdater.compareAndSet(this, null, subscription) || cancelCalled) {\n+                subscription.cancel();\n+                return;\n+            }\n+            if (pendingRequests != 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU3MTU4MA=="}, "originalCommit": {"oid": "f5875796ff63163a414888d58b132b494bcf1555"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY1NTU3OA==", "bodyText": "How about just using the single thread to avoid this problem?\n\nThat's sounds good. It is no additional threading because the upstream.request() already is executed subscription.executor().", "url": "https://github.com/line/armeria/pull/3038#discussion_r481655578", "createdAt": "2020-09-02T04:20:26Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/DefaultHttpResponseBodyStream.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnmodifiableFuture;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+final class DefaultHttpResponseBodyStream implements HttpResponseBodyStream {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultHttpResponseBodyStream.class);\n+\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscription> upstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscription.class, \"upstream\");\n+\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscriber> downstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscriber.class, \"downstream\");\n+\n+    private static final ResponseHeaders HEADERS_WITH_UNKNOWN_STATUS = ResponseHeaders.of(HttpStatus.UNKNOWN);\n+    private static final HeadersFuture<List<ResponseHeaders>> EMPTY_INFORMATIONAL_HEADERS;\n+    private static final HeadersFuture<HttpHeaders> EMPTY_TRAILERS;\n+\n+    static {\n+        EMPTY_INFORMATIONAL_HEADERS = new HeadersFuture<>();\n+        EMPTY_INFORMATIONAL_HEADERS.doComplete(ImmutableList.of());\n+\n+        EMPTY_TRAILERS = new HeadersFuture<>();\n+        EMPTY_TRAILERS.doComplete(HttpHeaders.of());\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultHttpResponseBodyStream, HeadersFuture>\n+            informationalHeadersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultHttpResponseBodyStream.class, HeadersFuture.class, \"informationalHeadersFuture\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultHttpResponseBodyStream, HeadersFuture>\n+            trailersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultHttpResponseBodyStream.class, HeadersFuture.class, \"trailersFuture\");\n+\n+    private final HeadersFuture<ResponseHeaders> headersFuture = new HeadersFuture<>();\n+    private final BodySubscriber bodySubscriber = new BodySubscriber();\n+    private final HttpResponse response;\n+    private final EventExecutor executor;\n+\n+    @Nullable\n+    private volatile HeadersFuture<List<ResponseHeaders>> informationalHeadersFuture;\n+    @Nullable\n+    private volatile HeadersFuture<HttpHeaders> trailersFuture;\n+    private volatile boolean wroteAny;\n+\n+    DefaultHttpResponseBodyStream(HttpResponse response, EventExecutor executor,\n+                                  SubscriptionOption... options) {\n+        requireNonNull(response, \"response\");\n+        this.response = response;\n+        this.executor = executor;\n+\n+        response.subscribe(bodySubscriber, executor, options);\n+        // Prefetch headers\n+        bodySubscriber.request(1);\n+    }\n+\n+    @Override\n+    public CompletableFuture<List<ResponseHeaders>> informationalHeaders() {\n+        final HeadersFuture<List<ResponseHeaders>> informationalHeadersFuture = this.informationalHeadersFuture;\n+        if (informationalHeadersFuture != null) {\n+            return informationalHeadersFuture;\n+        }\n+\n+        informationalHeadersFutureUpdater.compareAndSet(this, null, new HeadersFuture<>());\n+        return this.informationalHeadersFuture;\n+    }\n+\n+    @Override\n+    public CompletableFuture<ResponseHeaders> headers() {\n+        return headersFuture;\n+    }\n+\n+    @Override\n+    public CompletableFuture<HttpHeaders> trailers() {\n+        final HeadersFuture<HttpHeaders> trailersFuture = this.trailersFuture;\n+        if (trailersFuture != null) {\n+            return trailersFuture;\n+        }\n+\n+        trailersFutureUpdater.compareAndSet(this, null, new HeadersFuture<>());\n+        return this.trailersFuture;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        return response.isOpen();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return !isOpen() && !wroteAny;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return response.whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor unused) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        if (executor.inEventLoop()) {\n+            bodySubscriber.setDownStream(subscriber);\n+        } else {\n+            executor.execute(() -> bodySubscriber.setDownStream(subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void abort() {\n+        response.abort();\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        response.abort(cause);\n+    }\n+\n+    private final class BodySubscriber implements Subscriber<HttpObject>, Subscription {\n+\n+        @Nullable\n+        private ImmutableList.Builder<ResponseHeaders> informationalHeadersBuilder;\n+        @Nullable\n+        private Throwable cause;\n+        private boolean completing;\n+\n+        private boolean sawLeadingHeaders;\n+\n+        @Nullable\n+        volatile Subscriber<? super HttpData> downstream;\n+        @Nullable\n+        volatile Subscription upstream;\n+        private volatile long pendingRequests;\n+        private volatile boolean cancelCalled;\n+\n+        private void setDownStream(Subscriber<? super HttpData> downstream) {\n+            try {\n+                if (!downstreamUpdater.compareAndSet(this, null, downstream)) {\n+                    downstream.onSubscribe(NoopSubscription.get());\n+                    downstream.onError(new IllegalStateException(\"subscribed by other subscriber already\"));\n+                    return;\n+                }\n+                downstream.onSubscribe(this);\n+                if (cause != null) {\n+                    downstream.onError(cause);\n+                } else if (completing) {\n+                    downstream.onComplete();\n+                }\n+            } catch (Throwable t) {\n+                throwIfFatal(t);\n+                logger.warn(\"Subscriber should not throw an exception. subscriber: {}\", downstream, t);\n+            }\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            requireNonNull(subscription, \"subscription\");\n+            if (!upstreamUpdater.compareAndSet(this, null, subscription) || cancelCalled) {\n+                subscription.cancel();\n+                return;\n+            }\n+            if (pendingRequests != 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU3MTU4MA=="}, "originalCommit": {"oid": "f5875796ff63163a414888d58b132b494bcf1555"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTE1NTM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/DefaultHttpResponseBodyStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMjo0MDoxNlrOHLQ5Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMjo0MDoxNlrOHLQ5Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU3MzE5OQ==", "bodyText": "could assign downstream to a local variable so that we remove IntelliJ warning", "url": "https://github.com/line/armeria/pull/3038#discussion_r481573199", "createdAt": "2020-09-02T02:40:16Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/DefaultHttpResponseBodyStream.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnmodifiableFuture;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+final class DefaultHttpResponseBodyStream implements HttpResponseBodyStream {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultHttpResponseBodyStream.class);\n+\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscription> upstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscription.class, \"upstream\");\n+\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscriber> downstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscriber.class, \"downstream\");\n+\n+    private static final ResponseHeaders HEADERS_WITH_UNKNOWN_STATUS = ResponseHeaders.of(HttpStatus.UNKNOWN);\n+    private static final HeadersFuture<List<ResponseHeaders>> EMPTY_INFORMATIONAL_HEADERS;\n+    private static final HeadersFuture<HttpHeaders> EMPTY_TRAILERS;\n+\n+    static {\n+        EMPTY_INFORMATIONAL_HEADERS = new HeadersFuture<>();\n+        EMPTY_INFORMATIONAL_HEADERS.doComplete(ImmutableList.of());\n+\n+        EMPTY_TRAILERS = new HeadersFuture<>();\n+        EMPTY_TRAILERS.doComplete(HttpHeaders.of());\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultHttpResponseBodyStream, HeadersFuture>\n+            informationalHeadersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultHttpResponseBodyStream.class, HeadersFuture.class, \"informationalHeadersFuture\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultHttpResponseBodyStream, HeadersFuture>\n+            trailersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultHttpResponseBodyStream.class, HeadersFuture.class, \"trailersFuture\");\n+\n+    private final HeadersFuture<ResponseHeaders> headersFuture = new HeadersFuture<>();\n+    private final BodySubscriber bodySubscriber = new BodySubscriber();\n+    private final HttpResponse response;\n+    private final EventExecutor executor;\n+\n+    @Nullable\n+    private volatile HeadersFuture<List<ResponseHeaders>> informationalHeadersFuture;\n+    @Nullable\n+    private volatile HeadersFuture<HttpHeaders> trailersFuture;\n+    private volatile boolean wroteAny;\n+\n+    DefaultHttpResponseBodyStream(HttpResponse response, EventExecutor executor,\n+                                  SubscriptionOption... options) {\n+        requireNonNull(response, \"response\");\n+        this.response = response;\n+        this.executor = executor;\n+\n+        response.subscribe(bodySubscriber, executor, options);\n+        // Prefetch headers\n+        bodySubscriber.request(1);\n+    }\n+\n+    @Override\n+    public CompletableFuture<List<ResponseHeaders>> informationalHeaders() {\n+        final HeadersFuture<List<ResponseHeaders>> informationalHeadersFuture = this.informationalHeadersFuture;\n+        if (informationalHeadersFuture != null) {\n+            return informationalHeadersFuture;\n+        }\n+\n+        informationalHeadersFutureUpdater.compareAndSet(this, null, new HeadersFuture<>());\n+        return this.informationalHeadersFuture;\n+    }\n+\n+    @Override\n+    public CompletableFuture<ResponseHeaders> headers() {\n+        return headersFuture;\n+    }\n+\n+    @Override\n+    public CompletableFuture<HttpHeaders> trailers() {\n+        final HeadersFuture<HttpHeaders> trailersFuture = this.trailersFuture;\n+        if (trailersFuture != null) {\n+            return trailersFuture;\n+        }\n+\n+        trailersFutureUpdater.compareAndSet(this, null, new HeadersFuture<>());\n+        return this.trailersFuture;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        return response.isOpen();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return !isOpen() && !wroteAny;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return response.whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor unused) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        if (executor.inEventLoop()) {\n+            bodySubscriber.setDownStream(subscriber);\n+        } else {\n+            executor.execute(() -> bodySubscriber.setDownStream(subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void abort() {\n+        response.abort();\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        response.abort(cause);\n+    }\n+\n+    private final class BodySubscriber implements Subscriber<HttpObject>, Subscription {\n+\n+        @Nullable\n+        private ImmutableList.Builder<ResponseHeaders> informationalHeadersBuilder;\n+        @Nullable\n+        private Throwable cause;\n+        private boolean completing;\n+\n+        private boolean sawLeadingHeaders;\n+\n+        @Nullable\n+        volatile Subscriber<? super HttpData> downstream;\n+        @Nullable\n+        volatile Subscription upstream;\n+        private volatile long pendingRequests;\n+        private volatile boolean cancelCalled;\n+\n+        private void setDownStream(Subscriber<? super HttpData> downstream) {\n+            try {\n+                if (!downstreamUpdater.compareAndSet(this, null, downstream)) {\n+                    downstream.onSubscribe(NoopSubscription.get());\n+                    downstream.onError(new IllegalStateException(\"subscribed by other subscriber already\"));\n+                    return;\n+                }\n+                downstream.onSubscribe(this);\n+                if (cause != null) {\n+                    downstream.onError(cause);\n+                } else if (completing) {\n+                    downstream.onComplete();\n+                }\n+            } catch (Throwable t) {\n+                throwIfFatal(t);\n+                logger.warn(\"Subscriber should not throw an exception. subscriber: {}\", downstream, t);\n+            }\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            requireNonNull(subscription, \"subscription\");\n+            if (!upstreamUpdater.compareAndSet(this, null, subscription) || cancelCalled) {\n+                subscription.cancel();\n+                return;\n+            }\n+            if (pendingRequests != 0) {\n+                subscription.request(pendingRequests);\n+            }\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (n <= 0) {\n+                // Just abort the publisher so subscriber().onError(e) is called and resources are cleaned up.\n+                response.abort(new IllegalArgumentException(\n+                        \"n: \" + n + \" (expected: > 0, see Reactive Streams specification rule 3.9)\"));\n+                return;\n+            }\n+            final Subscription upstream = this.upstream;\n+            if (upstream == null) {\n+                pendingRequests = LongMath.saturatedAdd(n, pendingRequests);\n+            } else {\n+                upstream.request(n);\n+            }\n+        }\n+\n+        @Override\n+        public void cancel() {\n+            if (cancelCalled) {\n+                return;\n+            }\n+            cancelCalled = true;\n+            downstream = NoopSubscriber.get();\n+            maybeCompleteHeaders();\n+            if (upstream != null) {\n+                upstream.cancel();\n+            }\n+        }\n+\n+        @Override\n+        public void onNext(HttpObject httpObject) {\n+            final Subscription upstream = this.upstream;\n+            if (httpObject instanceof ResponseHeaders) {\n+                final ResponseHeaders headers = (ResponseHeaders) httpObject;\n+                final HttpStatus status = headers.status();\n+                if (status.isInformational()) {\n+                    if (!sawLeadingHeaders) {\n+                        if (informationalHeadersBuilder == null) {\n+                            informationalHeadersBuilder = ImmutableList.builder();\n+                        }\n+                        informationalHeadersBuilder.add(headers);\n+                    }\n+                    upstream.request(1);\n+                } else {\n+                    sawLeadingHeaders = true;\n+                    completeInformationHeaders();\n+                    completeHeaders(headers);\n+                }\n+                return;\n+            }\n+\n+            if (httpObject instanceof HttpHeaders) {\n+                final HttpHeaders trailers = (HttpHeaders) httpObject;\n+                completeTrailers(trailers);\n+                return;\n+            }\n+\n+            assert downstream != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5875796ff63163a414888d58b132b494bcf1555"}, "originalPosition": 264}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODIyNTc5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponseBodyStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNjoxODo0NFrOHNxeYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNjoyNzo1MlrOHNxrVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIwNDEyOA==", "bodyText": "which completes -> that is completed with  (ditto for all Javadoc comments in this pull request)", "url": "https://github.com/line/armeria/pull/3038#discussion_r484204128", "createdAt": "2020-09-07T06:18:44Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponseBodyStream.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.reactivestreams.Subscriber;\n+\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * An HTTP response body stream which publishes HTTP payloads as a stream of {@link HttpData}.\n+ * {@link #informationalHeaders()}, {@link #headers()} will be completed before publishing the first element of\n+ * {@link HttpData}. {@link #trailers()} might not complete until the entire {@link HttpData} has been consumed.\n+ */\n+public interface HttpResponseBodyStream extends StreamMessage<HttpData> {\n+    /**\n+     * Returns a {@link CompletableFuture} which completes a list of\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#Information_responses\">informational\n+     * </a> {@link ResponseHeaders}.\n+     */\n+    CompletableFuture<List<ResponseHeaders>> informationalHeaders();\n+\n+    /**\n+     * Returns a {@link CompletableFuture} which completes a non-informational {@link ResponseHeaders}.\n+     */\n+    CompletableFuture<ResponseHeaders> headers();\n+\n+    /**\n+     * Returns a {@link CompletableFuture} which completes a {@linkplain HttpHeaders trailers}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b997183b9cdf9b878a0c247c02ab2f3720b074d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIwNzQ0NQ==", "bodyText": "'that is' could be omitted.", "url": "https://github.com/line/armeria/pull/3038#discussion_r484207445", "createdAt": "2020-09-07T06:27:52Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponseBodyStream.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.reactivestreams.Subscriber;\n+\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * An HTTP response body stream which publishes HTTP payloads as a stream of {@link HttpData}.\n+ * {@link #informationalHeaders()}, {@link #headers()} will be completed before publishing the first element of\n+ * {@link HttpData}. {@link #trailers()} might not complete until the entire {@link HttpData} has been consumed.\n+ */\n+public interface HttpResponseBodyStream extends StreamMessage<HttpData> {\n+    /**\n+     * Returns a {@link CompletableFuture} which completes a list of\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#Information_responses\">informational\n+     * </a> {@link ResponseHeaders}.\n+     */\n+    CompletableFuture<List<ResponseHeaders>> informationalHeaders();\n+\n+    /**\n+     * Returns a {@link CompletableFuture} which completes a non-informational {@link ResponseHeaders}.\n+     */\n+    CompletableFuture<ResponseHeaders> headers();\n+\n+    /**\n+     * Returns a {@link CompletableFuture} which completes a {@linkplain HttpHeaders trailers}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIwNDEyOA=="}, "originalCommit": {"oid": "7b997183b9cdf9b878a0c247c02ab2f3720b074d"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODIzNTI2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponseBodyStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNjoyMjozM1rOHNxjpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNjoyMjozM1rOHNxjpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIwNTQ3OA==", "bodyText": "If this is the case, how about making toBodyStream return a tuple of (CompletableFuture<informational headers>, CompletableFuture<headers>, StreamMessage, CompletableFuture<trailers>), for reduced ambiguity? (We'll have to rename toBodyStream() and HttpResponseBodyStream into something else, though.)", "url": "https://github.com/line/armeria/pull/3038#discussion_r484205478", "createdAt": "2020-09-07T06:22:33Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponseBodyStream.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.reactivestreams.Subscriber;\n+\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * An HTTP response body stream which publishes HTTP payloads as a stream of {@link HttpData}.\n+ * {@link #informationalHeaders()}, {@link #headers()} will be completed before publishing the first element of\n+ * {@link HttpData}. {@link #trailers()} might not complete until the entire {@link HttpData} has been consumed.\n+ */\n+public interface HttpResponseBodyStream extends StreamMessage<HttpData> {\n+    /**\n+     * Returns a {@link CompletableFuture} which completes a list of\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#Information_responses\">informational\n+     * </a> {@link ResponseHeaders}.\n+     */\n+    CompletableFuture<List<ResponseHeaders>> informationalHeaders();\n+\n+    /**\n+     * Returns a {@link CompletableFuture} which completes a non-informational {@link ResponseHeaders}.\n+     */\n+    CompletableFuture<ResponseHeaders> headers();\n+\n+    /**\n+     * Returns a {@link CompletableFuture} which completes a {@linkplain HttpHeaders trailers}.\n+     * If a {@link HttpResponse} does not contain trailers, the returned {@link CompletableFuture} will complete\n+     * an {@linkplain HttpHeaders#of() empty headers}.\n+     */\n+    CompletableFuture<HttpHeaders> trailers();\n+\n+    /**\n+     * Unsupported operation, use {@link HttpResponse#toBodyStream(EventExecutor, SubscriptionOption...)}\n+     * instead.\n+     */\n+    @Override\n+    default void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor executor,\n+                           SubscriptionOption... options) {\n+        throw new UnsupportedOperationException(\"Use 'HttpResponse.toBodyStream(executor, options)' instead\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b997183b9cdf9b878a0c247c02ab2f3720b074d"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTg4OTY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/SplitHttpResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDo0NDozNVrOHPe8JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDo0NDozNVrOHPe8JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5NzYwNQ==", "bodyText": "nit: an HttpResponse", "url": "https://github.com/line/armeria/pull/3038#discussion_r485997605", "createdAt": "2020-09-10T00:44:35Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/SplitHttpResponse.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import com.google.errorprone.annotations.CheckReturnValue;\n+\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+\n+/**\n+ * An {@link HttpResponse} which splits a stream of {@link HttpObject} into HTTP headers and payloads.\n+ * {@link #informationalHeaders()}, {@link #headers()} will be completed before publishing the first element of\n+ * {@link HttpData}. {@link #trailers()} might not complete until the entire {@link HttpData} has been consumed.\n+ */\n+public interface SplitHttpResponse {\n+\n+    /**\n+     * Returns a {@link CompletableFuture} completed with a list of\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#Information_responses\">informational\n+     * </a> {@link ResponseHeaders}.\n+     */\n+    CompletableFuture<List<ResponseHeaders>> informationalHeaders();\n+\n+    /**\n+     * Returns a {@link CompletableFuture} completed with a non-informational {@link ResponseHeaders}.\n+     */\n+    CompletableFuture<ResponseHeaders> headers();\n+\n+    /**\n+     * Returns a {@link StreamMessage} publishes HTTP payloads as a stream of {@link HttpData}.\n+     */\n+    @CheckReturnValue\n+    StreamMessage<HttpData> body();\n+\n+    /**\n+     * Returns a {@link CompletableFuture} completed with a {@linkplain HttpHeaders trailers}.\n+     * If a {@link HttpResponse} does not contain trailers, the returned {@link CompletableFuture} will be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b32036ba629320db66f2109ec3a38ce32c1a7615"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTkwNzQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDo1NDoyMFrOHPfGNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDo1NDoyMFrOHPfGNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwMDE4MQ==", "bodyText": "If so, how about rasing an exception?", "url": "https://github.com/line/armeria/pull/3038#discussion_r486000181", "createdAt": "2020-09-10T00:54:20Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.SplitHttpResponse;\n+import com.linecorp.armeria.common.stream.AbortedStreamException;\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnmodifiableFuture;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+public class DefaultSplitHttpResponse implements StreamMessage<HttpData>, SplitHttpResponse {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultSplitHttpResponse.class);\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscriber> downstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscriber.class, \"downstream\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultSplitHttpResponse, HeadersFuture>\n+            informationalHeadersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultSplitHttpResponse.class, HeadersFuture.class, \"informationalHeadersFuture\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultSplitHttpResponse, HeadersFuture>\n+            trailersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultSplitHttpResponse.class, HeadersFuture.class, \"trailersFuture\");\n+\n+    private static final ResponseHeaders HEADERS_WITH_UNKNOWN_STATUS = ResponseHeaders.of(HttpStatus.UNKNOWN);\n+    private static final HeadersFuture<List<ResponseHeaders>> EMPTY_INFORMATIONAL_HEADERS;\n+    private static final HeadersFuture<HttpHeaders> EMPTY_TRAILERS;\n+\n+    static {\n+        EMPTY_INFORMATIONAL_HEADERS = new HeadersFuture<>();\n+        EMPTY_INFORMATIONAL_HEADERS.doComplete(ImmutableList.of());\n+\n+        EMPTY_TRAILERS = new HeadersFuture<>();\n+        EMPTY_TRAILERS.doComplete(HttpHeaders.of());\n+    }\n+\n+    private final HeadersFuture<ResponseHeaders> headersFuture = new HeadersFuture<>();\n+    private final BodySubscriber bodySubscriber = new BodySubscriber();\n+    private final HttpResponse response;\n+    private final EventExecutor executor;\n+\n+    @Nullable\n+    private volatile HeadersFuture<List<ResponseHeaders>> informationalHeadersFuture;\n+    @Nullable\n+    private volatile HeadersFuture<HttpHeaders> trailersFuture;\n+    private volatile boolean wroteAny;\n+\n+    public DefaultSplitHttpResponse(HttpResponse response, EventExecutor executor,\n+                                    SubscriptionOption... options) {\n+        this.response = requireNonNull(response, \"response\");\n+        this.executor = requireNonNull(executor, \"executor\");\n+\n+        response.subscribe(bodySubscriber, executor, options);\n+    }\n+\n+    @Override\n+    public final CompletableFuture<List<ResponseHeaders>> informationalHeaders() {\n+        final HeadersFuture<List<ResponseHeaders>> informationalHeadersFuture = this.informationalHeadersFuture;\n+        if (informationalHeadersFuture != null) {\n+            return informationalHeadersFuture;\n+        }\n+\n+        informationalHeadersFutureUpdater.compareAndSet(this, null, new HeadersFuture<>());\n+        return this.informationalHeadersFuture;\n+    }\n+\n+    @Override\n+    public final CompletableFuture<ResponseHeaders> headers() {\n+        return headersFuture;\n+    }\n+\n+    @Override\n+    public final StreamMessage<HttpData> body() {\n+        return this;\n+    }\n+\n+    @Override\n+    public final CompletableFuture<HttpHeaders> trailers() {\n+        final HeadersFuture<HttpHeaders> trailersFuture = this.trailersFuture;\n+        if (trailersFuture != null) {\n+            return trailersFuture;\n+        }\n+\n+        trailersFutureUpdater.compareAndSet(this, null, new HeadersFuture<>());\n+        return this.trailersFuture;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        return response.isOpen();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return !isOpen() && !wroteAny;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return response.whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor unused) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        if (executor.inEventLoop()) {\n+            bodySubscriber.setDownStream(subscriber);\n+        } else {\n+            executor.execute(() -> bodySubscriber.setDownStream(subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor executor,\n+                          SubscriptionOption... unused) {\n+        // 'SubscriptionOption's are ignored, should specify the 'SubscriptionOption's when creating this class.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b32036ba629320db66f2109ec3a38ce32c1a7615"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTk0NTUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMToxNToxOFrOHPfb0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMToxNToxOFrOHPfb0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwNTcxNA==", "bodyText": "How about creating HeadersFuture first and complete it if this CAS succeeds?", "url": "https://github.com/line/armeria/pull/3038#discussion_r486005714", "createdAt": "2020-09-10T01:15:18Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.SplitHttpResponse;\n+import com.linecorp.armeria.common.stream.AbortedStreamException;\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnmodifiableFuture;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+public class DefaultSplitHttpResponse implements StreamMessage<HttpData>, SplitHttpResponse {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultSplitHttpResponse.class);\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscriber> downstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscriber.class, \"downstream\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultSplitHttpResponse, HeadersFuture>\n+            informationalHeadersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultSplitHttpResponse.class, HeadersFuture.class, \"informationalHeadersFuture\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultSplitHttpResponse, HeadersFuture>\n+            trailersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultSplitHttpResponse.class, HeadersFuture.class, \"trailersFuture\");\n+\n+    private static final ResponseHeaders HEADERS_WITH_UNKNOWN_STATUS = ResponseHeaders.of(HttpStatus.UNKNOWN);\n+    private static final HeadersFuture<List<ResponseHeaders>> EMPTY_INFORMATIONAL_HEADERS;\n+    private static final HeadersFuture<HttpHeaders> EMPTY_TRAILERS;\n+\n+    static {\n+        EMPTY_INFORMATIONAL_HEADERS = new HeadersFuture<>();\n+        EMPTY_INFORMATIONAL_HEADERS.doComplete(ImmutableList.of());\n+\n+        EMPTY_TRAILERS = new HeadersFuture<>();\n+        EMPTY_TRAILERS.doComplete(HttpHeaders.of());\n+    }\n+\n+    private final HeadersFuture<ResponseHeaders> headersFuture = new HeadersFuture<>();\n+    private final BodySubscriber bodySubscriber = new BodySubscriber();\n+    private final HttpResponse response;\n+    private final EventExecutor executor;\n+\n+    @Nullable\n+    private volatile HeadersFuture<List<ResponseHeaders>> informationalHeadersFuture;\n+    @Nullable\n+    private volatile HeadersFuture<HttpHeaders> trailersFuture;\n+    private volatile boolean wroteAny;\n+\n+    public DefaultSplitHttpResponse(HttpResponse response, EventExecutor executor,\n+                                    SubscriptionOption... options) {\n+        this.response = requireNonNull(response, \"response\");\n+        this.executor = requireNonNull(executor, \"executor\");\n+\n+        response.subscribe(bodySubscriber, executor, options);\n+    }\n+\n+    @Override\n+    public final CompletableFuture<List<ResponseHeaders>> informationalHeaders() {\n+        final HeadersFuture<List<ResponseHeaders>> informationalHeadersFuture = this.informationalHeadersFuture;\n+        if (informationalHeadersFuture != null) {\n+            return informationalHeadersFuture;\n+        }\n+\n+        informationalHeadersFutureUpdater.compareAndSet(this, null, new HeadersFuture<>());\n+        return this.informationalHeadersFuture;\n+    }\n+\n+    @Override\n+    public final CompletableFuture<ResponseHeaders> headers() {\n+        return headersFuture;\n+    }\n+\n+    @Override\n+    public final StreamMessage<HttpData> body() {\n+        return this;\n+    }\n+\n+    @Override\n+    public final CompletableFuture<HttpHeaders> trailers() {\n+        final HeadersFuture<HttpHeaders> trailersFuture = this.trailersFuture;\n+        if (trailersFuture != null) {\n+            return trailersFuture;\n+        }\n+\n+        trailersFutureUpdater.compareAndSet(this, null, new HeadersFuture<>());\n+        return this.trailersFuture;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        return response.isOpen();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return !isOpen() && !wroteAny;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return response.whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor unused) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        if (executor.inEventLoop()) {\n+            bodySubscriber.setDownStream(subscriber);\n+        } else {\n+            executor.execute(() -> bodySubscriber.setDownStream(subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor executor,\n+                          SubscriptionOption... unused) {\n+        // 'SubscriptionOption's are ignored, should specify the 'SubscriptionOption's when creating this class.\n+        subscribe(subscriber, executor);\n+    }\n+\n+    @Override\n+    public void abort() {\n+        response.abort();\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        response.abort(cause);\n+    }\n+\n+    private final class BodySubscriber implements Subscriber<HttpObject>, Subscription {\n+\n+        @Nullable\n+        private ImmutableList.Builder<ResponseHeaders> informationalHeadersBuilder;\n+        @Nullable\n+        private Throwable cause;\n+\n+        private boolean completing;\n+        private boolean sawLeadingHeaders;\n+\n+        // 1 is used for prefetching headers\n+        private long pendingRequests = 1;\n+\n+        @Nullable\n+        volatile Subscriber<? super HttpData> downstream;\n+        @Nullable\n+        private volatile Subscription upstream;\n+\n+        private volatile boolean cancelCalled;\n+\n+        private void setDownStream(Subscriber<? super HttpData> downstream) {\n+            try {\n+                if (!downstreamUpdater.compareAndSet(this, null, downstream)) {\n+                    downstream.onSubscribe(NoopSubscription.get());\n+                    downstream.onError(new IllegalStateException(\"subscribed by other subscriber already\"));\n+                    return;\n+                }\n+                downstream.onSubscribe(this);\n+                if (cause != null) {\n+                    downstream.onError(cause);\n+                } else if (completing) {\n+                    downstream.onComplete();\n+                }\n+            } catch (Throwable t) {\n+                throwIfFatal(t);\n+                logger.warn(\"Subscriber should not throw an exception. subscriber: {}\", downstream, t);\n+            }\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            requireNonNull(subscription, \"subscription\");\n+            if (cancelCalled || upstream != null) {\n+                subscription.cancel();\n+                return;\n+            }\n+            upstream = subscription;\n+            subscription.request(pendingRequests);\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (n <= 0) {\n+                // Just abort the publisher so subscriber().onError(e) is called and resources are cleaned up.\n+                response.abort(new IllegalArgumentException(\n+                        \"n: \" + n + \" (expected: > 0, see Reactive Streams specification rule 3.9)\"));\n+                return;\n+            }\n+            if (executor.inEventLoop()) {\n+                request0(n);\n+            } else {\n+                executor.execute(() -> request0(n));\n+            }\n+        }\n+\n+        private void request0(long n) {\n+            final Subscription upstream = this.upstream;\n+            if (upstream == null) {\n+                pendingRequests = LongMath.saturatedAdd(n, pendingRequests);\n+            } else {\n+                upstream.request(n);\n+            }\n+        }\n+\n+        @Override\n+        public void cancel() {\n+            if (cancelCalled) {\n+                return;\n+            }\n+            cancelCalled = true;\n+            downstream = NoopSubscriber.get();\n+            maybeCompleteHeaders(null);\n+            final Subscription upstream = this.upstream;\n+            if (upstream != null) {\n+                upstream.cancel();\n+            }\n+        }\n+\n+        @Override\n+        public void onNext(HttpObject httpObject) {\n+            final Subscription upstream = this.upstream;\n+            if (httpObject instanceof ResponseHeaders) {\n+                final ResponseHeaders headers = (ResponseHeaders) httpObject;\n+                final HttpStatus status = headers.status();\n+                if (status.isInformational()) {\n+                    if (!sawLeadingHeaders) {\n+                        if (informationalHeadersBuilder == null) {\n+                            informationalHeadersBuilder = ImmutableList.builder();\n+                        }\n+                        informationalHeadersBuilder.add(headers);\n+                    }\n+                    upstream.request(1);\n+                } else {\n+                    sawLeadingHeaders = true;\n+                    completeInformationHeaders();\n+                    headersFuture.doComplete(headers);\n+                }\n+                return;\n+            }\n+\n+            if (httpObject instanceof HttpHeaders) {\n+                final HttpHeaders trailers = (HttpHeaders) httpObject;\n+                completeTrailers(trailers);\n+                return;\n+            }\n+\n+            final Subscriber<? super HttpData> downstream = this.downstream;\n+            assert downstream != null;\n+            assert httpObject instanceof HttpData;\n+            final HttpData data = (HttpData) httpObject;\n+            wroteAny = true;\n+            downstream.onNext(data);\n+        }\n+\n+        /**\n+         * Completes informational headers received so far.\n+         */\n+        private void completeInformationHeaders() {\n+            if (informationalHeadersBuilder == null) {\n+                if (!informationalHeadersFutureUpdater\n+                        .compareAndSet(DefaultSplitHttpResponse.this, null,\n+                                       EMPTY_INFORMATIONAL_HEADERS)) {\n+                    informationalHeadersFuture.doComplete(ImmutableList.of());\n+                }\n+            } else {\n+                informationalHeadersFutureUpdater", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b32036ba629320db66f2109ec3a38ce32c1a7615"}, "originalPosition": 311}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTk0ODEyOnYy", "diffSide": "RIGHT", "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaHttpResponseBodyStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMToxNjo1OVrOHPfdZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMToxNjo1OVrOHPfdZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwNjExNw==", "bodyText": "\ud83e\udd23", "url": "https://github.com/line/armeria/pull/3038#discussion_r486006117", "createdAt": "2020-09-10T01:16:59Z", "author": {"login": "minwoox"}, "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaHttpResponseBodyStream.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2018 LINE Corporation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b32036ba629320db66f2109ec3a38ce32c1a7615"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTk1NDQ2OnYy", "diffSide": "RIGHT", "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaHttpResponseBodyStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMToyMDoyN1rOHPfhGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMToyMDoyN1rOHPfhGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwNzA2Ng==", "bodyText": "We used CAS above but not here. I think we should use the same approach.", "url": "https://github.com/line/armeria/pull/3038#discussion_r486007066", "createdAt": "2020-09-10T01:20:27Z", "author": {"login": "minwoox"}, "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaHttpResponseBodyStream.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.spring.web.reactive;\n+\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.internal.common.DefaultSplitHttpResponse;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+import reactor.core.publisher.Mono;\n+\n+final class ArmeriaHttpResponseBodyStream extends DefaultSplitHttpResponse {\n+\n+    private static final AtomicIntegerFieldUpdater<ArmeriaHttpResponseBodyStream> subscribedUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(ArmeriaHttpResponseBodyStream.class, \"subscribed\");\n+\n+    private volatile int subscribed;\n+\n+    @Nullable\n+    private Publisher<HttpData> publisherForLateSubscribers;\n+\n+    ArmeriaHttpResponseBodyStream(HttpResponse httpResponse, EventExecutor executor) {\n+        super(httpResponse, executor);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> s) {\n+        if (subscribedUpdater.compareAndSet(this, 0, 1)) {\n+            // The first subscriber.\n+            super.subscribe(s);\n+        } else {\n+            // The other subscribers - notify whether completed successfully only.\n+            if (publisherForLateSubscribers == null) {\n+                @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+                final Publisher<HttpData> newPublisher =\n+                        (Publisher) Mono.fromFuture(whenComplete());\n+                publisherForLateSubscribers = newPublisher;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b32036ba629320db66f2109ec3a38ce32c1a7615"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTk2ODU1OnYy", "diffSide": "RIGHT", "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaClientHttpConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMToyODoxM1rOHPfpLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODoxNDo0OVrOHXO7fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwOTEzMw==", "bodyText": "Can we use the eventLoop that is used for sending a request?\nIf not, how about just using response.defaultSubscriberExecutor() in DefaultSplitHttpResponse?", "url": "https://github.com/line/armeria/pull/3038#discussion_r486009133", "createdAt": "2020-09-10T01:28:13Z", "author": {"login": "minwoox"}, "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaClientHttpConnector.java", "diffHunk": "@@ -110,8 +109,10 @@ private ArmeriaClientHttpRequest createRequest(HttpMethod method, URI uri) {\n         return new ArmeriaClientHttpRequest(builder.build(), method, pathAndQuery, uri, factoryWrapper);\n     }\n \n-    private ArmeriaClientHttpResponse createResponse(ResponseHeaders headers,\n-                                                     ArmeriaHttpClientResponseSubscriber s) {\n-        return new ArmeriaClientHttpResponse(headers, s.toResponseBodyPublisher(), factoryWrapper);\n+    private CompletableFuture<ArmeriaClientHttpResponse> createResponse(HttpResponse response) {\n+        final ArmeriaHttpResponseBodyStream bodyStream =\n+                new ArmeriaHttpResponseBodyStream(response, CommonPools.workerGroup().next());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b32036ba629320db66f2109ec3a38ce32c1a7615"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEyMzkwMA==", "bodyText": "It is difficult to capture or pass RequestContext at this point. Let me use response.defaultSubscriberExecutor() :-)", "url": "https://github.com/line/armeria/pull/3038#discussion_r494123900", "createdAt": "2020-09-24T08:14:49Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaClientHttpConnector.java", "diffHunk": "@@ -110,8 +109,10 @@ private ArmeriaClientHttpRequest createRequest(HttpMethod method, URI uri) {\n         return new ArmeriaClientHttpRequest(builder.build(), method, pathAndQuery, uri, factoryWrapper);\n     }\n \n-    private ArmeriaClientHttpResponse createResponse(ResponseHeaders headers,\n-                                                     ArmeriaHttpClientResponseSubscriber s) {\n-        return new ArmeriaClientHttpResponse(headers, s.toResponseBodyPublisher(), factoryWrapper);\n+    private CompletableFuture<ArmeriaClientHttpResponse> createResponse(HttpResponse response) {\n+        final ArmeriaHttpResponseBodyStream bodyStream =\n+                new ArmeriaHttpResponseBodyStream(response, CommonPools.workerGroup().next());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwOTEzMw=="}, "originalCommit": {"oid": "b32036ba629320db66f2109ec3a38ce32c1a7615"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDg0NDIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/SplitHttpResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNzoxMjo1OVrOHrs2sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNzoxMjo1OVrOHrs2sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4NTcxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * An {@link HttpResponse} which splits a stream of {@link HttpObject} into HTTP headers and payloads.\n          \n          \n            \n             * An {@link HttpResponse} which splits a stream of {@link HttpObject}s into HTTP headers and payloads.", "url": "https://github.com/line/armeria/pull/3038#discussion_r515585714", "createdAt": "2020-11-01T07:12:59Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/SplitHttpResponse.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import com.google.errorprone.annotations.CheckReturnValue;\n+\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+\n+/**\n+ * An {@link HttpResponse} which splits a stream of {@link HttpObject} into HTTP headers and payloads.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "541878edafb7051422354f928f86484b9af83211"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDg0NDU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/SplitHttpResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNzoxMzo1MFrOHrs24g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNzoxMzo1MFrOHrs24g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4NTc2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * {@link #informationalHeaders()}, {@link #headers()} will be completed before publishing the first element of\n          \n          \n            \n             * {@link HttpData}. {@link #trailers()} might not complete until the entire {@link HttpData} has been consumed.\n          \n          \n            \n             * {@link #informationalHeaders()}, {@link #headers()} will be completed before publishing the first {@link HttpData}.\n          \n          \n            \n             * {@link #trailers()} might not complete until the response body is consumed completely.", "url": "https://github.com/line/armeria/pull/3038#discussion_r515585762", "createdAt": "2020-11-01T07:13:50Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/SplitHttpResponse.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import com.google.errorprone.annotations.CheckReturnValue;\n+\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+\n+/**\n+ * An {@link HttpResponse} which splits a stream of {@link HttpObject} into HTTP headers and payloads.\n+ * {@link #informationalHeaders()}, {@link #headers()} will be completed before publishing the first element of\n+ * {@link HttpData}. {@link #trailers()} might not complete until the entire {@link HttpData} has been consumed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "541878edafb7051422354f928f86484b9af83211"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDg0NTUxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/SplitHttpResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNzoxNDo0M1rOHrs3TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDo0MzoyN1rOHsyBeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4NTg2OQ==", "bodyText": "I guess we have a chance of having too many informational headers in memory. StreamMessage<ResponseHeaders> might solve the memory usage issue, but it'll make this not very user-friendly. Should we just drop all informational headers for simplicity?", "url": "https://github.com/line/armeria/pull/3038#discussion_r515585869", "createdAt": "2020-11-01T07:14:43Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/SplitHttpResponse.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import com.google.errorprone.annotations.CheckReturnValue;\n+\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+\n+/**\n+ * An {@link HttpResponse} which splits a stream of {@link HttpObject} into HTTP headers and payloads.\n+ * {@link #informationalHeaders()}, {@link #headers()} will be completed before publishing the first element of\n+ * {@link HttpData}. {@link #trailers()} might not complete until the entire {@link HttpData} has been consumed.\n+ */\n+public interface SplitHttpResponse {\n+\n+    /**\n+     * Returns a {@link CompletableFuture} completed with a list of\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#Information_responses\">informational\n+     * </a> {@link ResponseHeaders}.\n+     */\n+    CompletableFuture<List<ResponseHeaders>> informationalHeaders();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "541878edafb7051422354f928f86484b9af83211"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcxODk2OA==", "bodyText": "Agreed. Most users are not interested in informational headers and if many informational headers are sent, List will grow infinitely.", "url": "https://github.com/line/armeria/pull/3038#discussion_r516718968", "createdAt": "2020-11-03T14:43:27Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/SplitHttpResponse.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import com.google.errorprone.annotations.CheckReturnValue;\n+\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+\n+/**\n+ * An {@link HttpResponse} which splits a stream of {@link HttpObject} into HTTP headers and payloads.\n+ * {@link #informationalHeaders()}, {@link #headers()} will be completed before publishing the first element of\n+ * {@link HttpData}. {@link #trailers()} might not complete until the entire {@link HttpData} has been consumed.\n+ */\n+public interface SplitHttpResponse {\n+\n+    /**\n+     * Returns a {@link CompletableFuture} completed with a list of\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#Information_responses\">informational\n+     * </a> {@link ResponseHeaders}.\n+     */\n+    CompletableFuture<List<ResponseHeaders>> informationalHeaders();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4NTg2OQ=="}, "originalCommit": {"oid": "541878edafb7051422354f928f86484b9af83211"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDc1ODgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMzo1NDo1MFrOHtIS9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMzo1NDo1MFrOHtIS9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA4Mzg5NA==", "bodyText": "If thread A stay here at line 196 and the thread B executes the line 227~236, the cancel event is gone.\nSo I think we should:\nif (upstream != null) {\n    subscription.cancel();\n    return;\n}\nupstream = subscription;\nif (cancelCalled) {\n    subscription.cancel();\n    return;\n}", "url": "https://github.com/line/armeria/pull/3038#discussion_r517083894", "createdAt": "2020-11-04T03:54:50Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.SplitHttpResponse;\n+import com.linecorp.armeria.common.stream.AbortedStreamException;\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnmodifiableFuture;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+public class DefaultSplitHttpResponse implements StreamMessage<HttpData>, SplitHttpResponse {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultSplitHttpResponse.class);\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscriber> downstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscriber.class, \"downstream\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultSplitHttpResponse, HeadersFuture>\n+            trailersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultSplitHttpResponse.class, HeadersFuture.class, \"trailersFuture\");\n+\n+    private static final ResponseHeaders HEADERS_WITH_UNKNOWN_STATUS = ResponseHeaders.of(HttpStatus.UNKNOWN);\n+    private static final HeadersFuture<HttpHeaders> EMPTY_TRAILERS;\n+\n+    static {\n+        EMPTY_TRAILERS = new HeadersFuture<>();\n+        EMPTY_TRAILERS.doComplete(HttpHeaders.of());\n+    }\n+\n+    private final HeadersFuture<ResponseHeaders> headersFuture = new HeadersFuture<>();\n+    private final BodySubscriber bodySubscriber = new BodySubscriber();\n+    private final HttpResponse response;\n+    private final EventExecutor executor;\n+\n+    @Nullable\n+    private volatile HeadersFuture<HttpHeaders> trailersFuture;\n+    private volatile boolean wroteAny;\n+\n+    public DefaultSplitHttpResponse(HttpResponse response, EventExecutor executor,\n+                                    SubscriptionOption... options) {\n+        this.response = requireNonNull(response, \"response\");\n+        this.executor = requireNonNull(executor, \"executor\");\n+\n+        response.subscribe(bodySubscriber, executor, options);\n+    }\n+\n+    @Override\n+    public final CompletableFuture<ResponseHeaders> headers() {\n+        return headersFuture;\n+    }\n+\n+    @Override\n+    public final StreamMessage<HttpData> body() {\n+        return this;\n+    }\n+\n+    @Override\n+    public final CompletableFuture<HttpHeaders> trailers() {\n+        HeadersFuture<HttpHeaders> trailersFuture = this.trailersFuture;\n+        if (trailersFuture != null) {\n+            return trailersFuture;\n+        }\n+\n+        trailersFuture = new HeadersFuture<>();\n+        if (trailersFutureUpdater.compareAndSet(this, null, trailersFuture)) {\n+            return trailersFuture;\n+        } else {\n+            return this.trailersFuture;\n+        }\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        return response.isOpen();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return !isOpen() && !wroteAny;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return response.whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor unused) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        if (executor.inEventLoop()) {\n+            bodySubscriber.setDownStream(subscriber);\n+        } else {\n+            executor.execute(() -> bodySubscriber.setDownStream(subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor executor,\n+                          SubscriptionOption... unused) {\n+        throw new UnsupportedOperationException(\"Use 'HttpResponse.split(executor, options)' instead.\");\n+    }\n+\n+    @Override\n+    public void abort() {\n+        response.abort();\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        response.abort(cause);\n+    }\n+\n+    private final class BodySubscriber implements Subscriber<HttpObject>, Subscription {\n+\n+        @Nullable\n+        private Throwable cause;\n+\n+        private boolean completing;\n+        // 1 is used for prefetching headers\n+        private long pendingRequests = 1;\n+\n+        @Nullable\n+        volatile Subscriber<? super HttpData> downstream;\n+        @Nullable\n+        private volatile Subscription upstream;\n+\n+        private volatile boolean cancelCalled;\n+\n+        private void setDownStream(Subscriber<? super HttpData> downstream) {\n+            try {\n+                if (!downstreamUpdater.compareAndSet(this, null, downstream)) {\n+                    downstream.onSubscribe(NoopSubscription.get());\n+                    downstream.onError(new IllegalStateException(\"subscribed by other subscriber already\"));\n+                    return;\n+                }\n+                downstream.onSubscribe(this);\n+                if (cause != null) {\n+                    downstream.onError(cause);\n+                } else if (completing) {\n+                    downstream.onComplete();\n+                }\n+            } catch (Throwable t) {\n+                throwIfFatal(t);\n+                logger.warn(\"Subscriber should not throw an exception. subscriber: {}\", downstream, t);\n+            }\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            requireNonNull(subscription, \"subscription\");\n+            if (cancelCalled || upstream != null) {\n+                subscription.cancel();\n+                return;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e035b459759229f6365dc4f452c92a1fe29f482c"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDc2MzQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMzo1Nzo1M1rOHtIVfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMzo1Nzo1M1rOHtIVfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA4NDU0MQ==", "bodyText": "I think we can remove this line not to access the memory when the httpObject is not an instance of ResponseHeaders", "url": "https://github.com/line/armeria/pull/3038#discussion_r517084541", "createdAt": "2020-11-04T03:57:53Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.SplitHttpResponse;\n+import com.linecorp.armeria.common.stream.AbortedStreamException;\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnmodifiableFuture;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+public class DefaultSplitHttpResponse implements StreamMessage<HttpData>, SplitHttpResponse {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultSplitHttpResponse.class);\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscriber> downstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscriber.class, \"downstream\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultSplitHttpResponse, HeadersFuture>\n+            trailersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultSplitHttpResponse.class, HeadersFuture.class, \"trailersFuture\");\n+\n+    private static final ResponseHeaders HEADERS_WITH_UNKNOWN_STATUS = ResponseHeaders.of(HttpStatus.UNKNOWN);\n+    private static final HeadersFuture<HttpHeaders> EMPTY_TRAILERS;\n+\n+    static {\n+        EMPTY_TRAILERS = new HeadersFuture<>();\n+        EMPTY_TRAILERS.doComplete(HttpHeaders.of());\n+    }\n+\n+    private final HeadersFuture<ResponseHeaders> headersFuture = new HeadersFuture<>();\n+    private final BodySubscriber bodySubscriber = new BodySubscriber();\n+    private final HttpResponse response;\n+    private final EventExecutor executor;\n+\n+    @Nullable\n+    private volatile HeadersFuture<HttpHeaders> trailersFuture;\n+    private volatile boolean wroteAny;\n+\n+    public DefaultSplitHttpResponse(HttpResponse response, EventExecutor executor,\n+                                    SubscriptionOption... options) {\n+        this.response = requireNonNull(response, \"response\");\n+        this.executor = requireNonNull(executor, \"executor\");\n+\n+        response.subscribe(bodySubscriber, executor, options);\n+    }\n+\n+    @Override\n+    public final CompletableFuture<ResponseHeaders> headers() {\n+        return headersFuture;\n+    }\n+\n+    @Override\n+    public final StreamMessage<HttpData> body() {\n+        return this;\n+    }\n+\n+    @Override\n+    public final CompletableFuture<HttpHeaders> trailers() {\n+        HeadersFuture<HttpHeaders> trailersFuture = this.trailersFuture;\n+        if (trailersFuture != null) {\n+            return trailersFuture;\n+        }\n+\n+        trailersFuture = new HeadersFuture<>();\n+        if (trailersFutureUpdater.compareAndSet(this, null, trailersFuture)) {\n+            return trailersFuture;\n+        } else {\n+            return this.trailersFuture;\n+        }\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        return response.isOpen();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return !isOpen() && !wroteAny;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return response.whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor unused) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        if (executor.inEventLoop()) {\n+            bodySubscriber.setDownStream(subscriber);\n+        } else {\n+            executor.execute(() -> bodySubscriber.setDownStream(subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor executor,\n+                          SubscriptionOption... unused) {\n+        throw new UnsupportedOperationException(\"Use 'HttpResponse.split(executor, options)' instead.\");\n+    }\n+\n+    @Override\n+    public void abort() {\n+        response.abort();\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        response.abort(cause);\n+    }\n+\n+    private final class BodySubscriber implements Subscriber<HttpObject>, Subscription {\n+\n+        @Nullable\n+        private Throwable cause;\n+\n+        private boolean completing;\n+        // 1 is used for prefetching headers\n+        private long pendingRequests = 1;\n+\n+        @Nullable\n+        volatile Subscriber<? super HttpData> downstream;\n+        @Nullable\n+        private volatile Subscription upstream;\n+\n+        private volatile boolean cancelCalled;\n+\n+        private void setDownStream(Subscriber<? super HttpData> downstream) {\n+            try {\n+                if (!downstreamUpdater.compareAndSet(this, null, downstream)) {\n+                    downstream.onSubscribe(NoopSubscription.get());\n+                    downstream.onError(new IllegalStateException(\"subscribed by other subscriber already\"));\n+                    return;\n+                }\n+                downstream.onSubscribe(this);\n+                if (cause != null) {\n+                    downstream.onError(cause);\n+                } else if (completing) {\n+                    downstream.onComplete();\n+                }\n+            } catch (Throwable t) {\n+                throwIfFatal(t);\n+                logger.warn(\"Subscriber should not throw an exception. subscriber: {}\", downstream, t);\n+            }\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            requireNonNull(subscription, \"subscription\");\n+            if (cancelCalled || upstream != null) {\n+                subscription.cancel();\n+                return;\n+            }\n+            upstream = subscription;\n+            subscription.request(pendingRequests);\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (n <= 0) {\n+                // Just abort the publisher so subscriber().onError(e) is called and resources are cleaned up.\n+                response.abort(new IllegalArgumentException(\n+                        \"n: \" + n + \" (expected: > 0, see Reactive Streams specification rule 3.9)\"));\n+                return;\n+            }\n+            if (executor.inEventLoop()) {\n+                request0(n);\n+            } else {\n+                executor.execute(() -> request0(n));\n+            }\n+        }\n+\n+        private void request0(long n) {\n+            final Subscription upstream = this.upstream;\n+            if (upstream == null) {\n+                pendingRequests = LongMath.saturatedAdd(n, pendingRequests);\n+            } else {\n+                upstream.request(n);\n+            }\n+        }\n+\n+        @Override\n+        public void cancel() {\n+            if (cancelCalled) {\n+                return;\n+            }\n+            cancelCalled = true;\n+            downstream = NoopSubscriber.get();\n+            maybeCompleteHeaders(null);\n+            final Subscription upstream = this.upstream;\n+            if (upstream != null) {\n+                upstream.cancel();\n+            }\n+        }\n+\n+        @Override\n+        public void onNext(HttpObject httpObject) {\n+            final Subscription upstream = this.upstream;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e035b459759229f6365dc4f452c92a1fe29f482c"}, "originalPosition": 241}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDc2NzIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNDowMDowNVrOHtIXmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNTozOToxNVrOHt0NMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA4NTA4MQ==", "bodyText": "Can't this be just response.isEmpty()?", "url": "https://github.com/line/armeria/pull/3038#discussion_r517085081", "createdAt": "2020-11-04T04:00:05Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.SplitHttpResponse;\n+import com.linecorp.armeria.common.stream.AbortedStreamException;\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnmodifiableFuture;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+public class DefaultSplitHttpResponse implements StreamMessage<HttpData>, SplitHttpResponse {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultSplitHttpResponse.class);\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscriber> downstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscriber.class, \"downstream\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultSplitHttpResponse, HeadersFuture>\n+            trailersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultSplitHttpResponse.class, HeadersFuture.class, \"trailersFuture\");\n+\n+    private static final ResponseHeaders HEADERS_WITH_UNKNOWN_STATUS = ResponseHeaders.of(HttpStatus.UNKNOWN);\n+    private static final HeadersFuture<HttpHeaders> EMPTY_TRAILERS;\n+\n+    static {\n+        EMPTY_TRAILERS = new HeadersFuture<>();\n+        EMPTY_TRAILERS.doComplete(HttpHeaders.of());\n+    }\n+\n+    private final HeadersFuture<ResponseHeaders> headersFuture = new HeadersFuture<>();\n+    private final BodySubscriber bodySubscriber = new BodySubscriber();\n+    private final HttpResponse response;\n+    private final EventExecutor executor;\n+\n+    @Nullable\n+    private volatile HeadersFuture<HttpHeaders> trailersFuture;\n+    private volatile boolean wroteAny;\n+\n+    public DefaultSplitHttpResponse(HttpResponse response, EventExecutor executor,\n+                                    SubscriptionOption... options) {\n+        this.response = requireNonNull(response, \"response\");\n+        this.executor = requireNonNull(executor, \"executor\");\n+\n+        response.subscribe(bodySubscriber, executor, options);\n+    }\n+\n+    @Override\n+    public final CompletableFuture<ResponseHeaders> headers() {\n+        return headersFuture;\n+    }\n+\n+    @Override\n+    public final StreamMessage<HttpData> body() {\n+        return this;\n+    }\n+\n+    @Override\n+    public final CompletableFuture<HttpHeaders> trailers() {\n+        HeadersFuture<HttpHeaders> trailersFuture = this.trailersFuture;\n+        if (trailersFuture != null) {\n+            return trailersFuture;\n+        }\n+\n+        trailersFuture = new HeadersFuture<>();\n+        if (trailersFutureUpdater.compareAndSet(this, null, trailersFuture)) {\n+            return trailersFuture;\n+        } else {\n+            return this.trailersFuture;\n+        }\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        return response.isOpen();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return !isOpen() && !wroteAny;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e035b459759229f6365dc4f452c92a1fe29f482c"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3NzY0OQ==", "bodyText": "I wrote this code in August. Sorry, I don't remember why I added its own wroteAny. \ud83d\ude02\nLet me take some time to remind it. \ud83d\ude0e", "url": "https://github.com/line/armeria/pull/3038#discussion_r517177649", "createdAt": "2020-11-04T08:42:27Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.SplitHttpResponse;\n+import com.linecorp.armeria.common.stream.AbortedStreamException;\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnmodifiableFuture;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+public class DefaultSplitHttpResponse implements StreamMessage<HttpData>, SplitHttpResponse {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultSplitHttpResponse.class);\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscriber> downstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscriber.class, \"downstream\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultSplitHttpResponse, HeadersFuture>\n+            trailersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultSplitHttpResponse.class, HeadersFuture.class, \"trailersFuture\");\n+\n+    private static final ResponseHeaders HEADERS_WITH_UNKNOWN_STATUS = ResponseHeaders.of(HttpStatus.UNKNOWN);\n+    private static final HeadersFuture<HttpHeaders> EMPTY_TRAILERS;\n+\n+    static {\n+        EMPTY_TRAILERS = new HeadersFuture<>();\n+        EMPTY_TRAILERS.doComplete(HttpHeaders.of());\n+    }\n+\n+    private final HeadersFuture<ResponseHeaders> headersFuture = new HeadersFuture<>();\n+    private final BodySubscriber bodySubscriber = new BodySubscriber();\n+    private final HttpResponse response;\n+    private final EventExecutor executor;\n+\n+    @Nullable\n+    private volatile HeadersFuture<HttpHeaders> trailersFuture;\n+    private volatile boolean wroteAny;\n+\n+    public DefaultSplitHttpResponse(HttpResponse response, EventExecutor executor,\n+                                    SubscriptionOption... options) {\n+        this.response = requireNonNull(response, \"response\");\n+        this.executor = requireNonNull(executor, \"executor\");\n+\n+        response.subscribe(bodySubscriber, executor, options);\n+    }\n+\n+    @Override\n+    public final CompletableFuture<ResponseHeaders> headers() {\n+        return headersFuture;\n+    }\n+\n+    @Override\n+    public final StreamMessage<HttpData> body() {\n+        return this;\n+    }\n+\n+    @Override\n+    public final CompletableFuture<HttpHeaders> trailers() {\n+        HeadersFuture<HttpHeaders> trailersFuture = this.trailersFuture;\n+        if (trailersFuture != null) {\n+            return trailersFuture;\n+        }\n+\n+        trailersFuture = new HeadersFuture<>();\n+        if (trailersFutureUpdater.compareAndSet(this, null, trailersFuture)) {\n+            return trailersFuture;\n+        } else {\n+            return this.trailersFuture;\n+        }\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        return response.isOpen();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return !isOpen() && !wroteAny;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA4NTA4MQ=="}, "originalCommit": {"oid": "e035b459759229f6365dc4f452c92a1fe29f482c"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4NjkyNg==", "bodyText": "Now, I got it.\nDefaultSplitHttpResponse publishes only HttpData. wroteAny is set to true when a HttpData is received from upstream.\nAFAIK, wroteAny in DefaultStreamMessage which is super class of DefaultHttpResponse is set to true a headers is written.", "url": "https://github.com/line/armeria/pull/3038#discussion_r517186926", "createdAt": "2020-11-04T08:58:17Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.SplitHttpResponse;\n+import com.linecorp.armeria.common.stream.AbortedStreamException;\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnmodifiableFuture;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+public class DefaultSplitHttpResponse implements StreamMessage<HttpData>, SplitHttpResponse {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultSplitHttpResponse.class);\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscriber> downstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscriber.class, \"downstream\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultSplitHttpResponse, HeadersFuture>\n+            trailersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultSplitHttpResponse.class, HeadersFuture.class, \"trailersFuture\");\n+\n+    private static final ResponseHeaders HEADERS_WITH_UNKNOWN_STATUS = ResponseHeaders.of(HttpStatus.UNKNOWN);\n+    private static final HeadersFuture<HttpHeaders> EMPTY_TRAILERS;\n+\n+    static {\n+        EMPTY_TRAILERS = new HeadersFuture<>();\n+        EMPTY_TRAILERS.doComplete(HttpHeaders.of());\n+    }\n+\n+    private final HeadersFuture<ResponseHeaders> headersFuture = new HeadersFuture<>();\n+    private final BodySubscriber bodySubscriber = new BodySubscriber();\n+    private final HttpResponse response;\n+    private final EventExecutor executor;\n+\n+    @Nullable\n+    private volatile HeadersFuture<HttpHeaders> trailersFuture;\n+    private volatile boolean wroteAny;\n+\n+    public DefaultSplitHttpResponse(HttpResponse response, EventExecutor executor,\n+                                    SubscriptionOption... options) {\n+        this.response = requireNonNull(response, \"response\");\n+        this.executor = requireNonNull(executor, \"executor\");\n+\n+        response.subscribe(bodySubscriber, executor, options);\n+    }\n+\n+    @Override\n+    public final CompletableFuture<ResponseHeaders> headers() {\n+        return headersFuture;\n+    }\n+\n+    @Override\n+    public final StreamMessage<HttpData> body() {\n+        return this;\n+    }\n+\n+    @Override\n+    public final CompletableFuture<HttpHeaders> trailers() {\n+        HeadersFuture<HttpHeaders> trailersFuture = this.trailersFuture;\n+        if (trailersFuture != null) {\n+            return trailersFuture;\n+        }\n+\n+        trailersFuture = new HeadersFuture<>();\n+        if (trailersFutureUpdater.compareAndSet(this, null, trailersFuture)) {\n+            return trailersFuture;\n+        } else {\n+            return this.trailersFuture;\n+        }\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        return response.isOpen();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return !isOpen() && !wroteAny;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA4NTA4MQ=="}, "originalCommit": {"oid": "e035b459759229f6365dc4f452c92a1fe29f482c"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgwMzMxNQ==", "bodyText": "Thanks for the explanation. \ud83d\ude47", "url": "https://github.com/line/armeria/pull/3038#discussion_r517803315", "createdAt": "2020-11-05T05:39:15Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.SplitHttpResponse;\n+import com.linecorp.armeria.common.stream.AbortedStreamException;\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnmodifiableFuture;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+public class DefaultSplitHttpResponse implements StreamMessage<HttpData>, SplitHttpResponse {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultSplitHttpResponse.class);\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscriber> downstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscriber.class, \"downstream\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultSplitHttpResponse, HeadersFuture>\n+            trailersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultSplitHttpResponse.class, HeadersFuture.class, \"trailersFuture\");\n+\n+    private static final ResponseHeaders HEADERS_WITH_UNKNOWN_STATUS = ResponseHeaders.of(HttpStatus.UNKNOWN);\n+    private static final HeadersFuture<HttpHeaders> EMPTY_TRAILERS;\n+\n+    static {\n+        EMPTY_TRAILERS = new HeadersFuture<>();\n+        EMPTY_TRAILERS.doComplete(HttpHeaders.of());\n+    }\n+\n+    private final HeadersFuture<ResponseHeaders> headersFuture = new HeadersFuture<>();\n+    private final BodySubscriber bodySubscriber = new BodySubscriber();\n+    private final HttpResponse response;\n+    private final EventExecutor executor;\n+\n+    @Nullable\n+    private volatile HeadersFuture<HttpHeaders> trailersFuture;\n+    private volatile boolean wroteAny;\n+\n+    public DefaultSplitHttpResponse(HttpResponse response, EventExecutor executor,\n+                                    SubscriptionOption... options) {\n+        this.response = requireNonNull(response, \"response\");\n+        this.executor = requireNonNull(executor, \"executor\");\n+\n+        response.subscribe(bodySubscriber, executor, options);\n+    }\n+\n+    @Override\n+    public final CompletableFuture<ResponseHeaders> headers() {\n+        return headersFuture;\n+    }\n+\n+    @Override\n+    public final StreamMessage<HttpData> body() {\n+        return this;\n+    }\n+\n+    @Override\n+    public final CompletableFuture<HttpHeaders> trailers() {\n+        HeadersFuture<HttpHeaders> trailersFuture = this.trailersFuture;\n+        if (trailersFuture != null) {\n+            return trailersFuture;\n+        }\n+\n+        trailersFuture = new HeadersFuture<>();\n+        if (trailersFutureUpdater.compareAndSet(this, null, trailersFuture)) {\n+            return trailersFuture;\n+        } else {\n+            return this.trailersFuture;\n+        }\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        return response.isOpen();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return !isOpen() && !wroteAny;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA4NTA4MQ=="}, "originalCommit": {"oid": "e035b459759229f6365dc4f452c92a1fe29f482c"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDc3NTAyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNDowNToyN1rOHtIcGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwODo1Mzo0NVrOHt5LCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA4NjIzNQ==", "bodyText": "If subscribed with SubscriptionOptions.NOTIFY_CANCELLATION, the subscriber doesn't get notified because of this logic? Could you add a test for this?", "url": "https://github.com/line/armeria/pull/3038#discussion_r517086235", "createdAt": "2020-11-04T04:05:27Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.SplitHttpResponse;\n+import com.linecorp.armeria.common.stream.AbortedStreamException;\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnmodifiableFuture;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+public class DefaultSplitHttpResponse implements StreamMessage<HttpData>, SplitHttpResponse {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultSplitHttpResponse.class);\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscriber> downstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscriber.class, \"downstream\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultSplitHttpResponse, HeadersFuture>\n+            trailersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultSplitHttpResponse.class, HeadersFuture.class, \"trailersFuture\");\n+\n+    private static final ResponseHeaders HEADERS_WITH_UNKNOWN_STATUS = ResponseHeaders.of(HttpStatus.UNKNOWN);\n+    private static final HeadersFuture<HttpHeaders> EMPTY_TRAILERS;\n+\n+    static {\n+        EMPTY_TRAILERS = new HeadersFuture<>();\n+        EMPTY_TRAILERS.doComplete(HttpHeaders.of());\n+    }\n+\n+    private final HeadersFuture<ResponseHeaders> headersFuture = new HeadersFuture<>();\n+    private final BodySubscriber bodySubscriber = new BodySubscriber();\n+    private final HttpResponse response;\n+    private final EventExecutor executor;\n+\n+    @Nullable\n+    private volatile HeadersFuture<HttpHeaders> trailersFuture;\n+    private volatile boolean wroteAny;\n+\n+    public DefaultSplitHttpResponse(HttpResponse response, EventExecutor executor,\n+                                    SubscriptionOption... options) {\n+        this.response = requireNonNull(response, \"response\");\n+        this.executor = requireNonNull(executor, \"executor\");\n+\n+        response.subscribe(bodySubscriber, executor, options);\n+    }\n+\n+    @Override\n+    public final CompletableFuture<ResponseHeaders> headers() {\n+        return headersFuture;\n+    }\n+\n+    @Override\n+    public final StreamMessage<HttpData> body() {\n+        return this;\n+    }\n+\n+    @Override\n+    public final CompletableFuture<HttpHeaders> trailers() {\n+        HeadersFuture<HttpHeaders> trailersFuture = this.trailersFuture;\n+        if (trailersFuture != null) {\n+            return trailersFuture;\n+        }\n+\n+        trailersFuture = new HeadersFuture<>();\n+        if (trailersFutureUpdater.compareAndSet(this, null, trailersFuture)) {\n+            return trailersFuture;\n+        } else {\n+            return this.trailersFuture;\n+        }\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        return response.isOpen();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return !isOpen() && !wroteAny;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return response.whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor unused) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        if (executor.inEventLoop()) {\n+            bodySubscriber.setDownStream(subscriber);\n+        } else {\n+            executor.execute(() -> bodySubscriber.setDownStream(subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor executor,\n+                          SubscriptionOption... unused) {\n+        throw new UnsupportedOperationException(\"Use 'HttpResponse.split(executor, options)' instead.\");\n+    }\n+\n+    @Override\n+    public void abort() {\n+        response.abort();\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        response.abort(cause);\n+    }\n+\n+    private final class BodySubscriber implements Subscriber<HttpObject>, Subscription {\n+\n+        @Nullable\n+        private Throwable cause;\n+\n+        private boolean completing;\n+        // 1 is used for prefetching headers\n+        private long pendingRequests = 1;\n+\n+        @Nullable\n+        volatile Subscriber<? super HttpData> downstream;\n+        @Nullable\n+        private volatile Subscription upstream;\n+\n+        private volatile boolean cancelCalled;\n+\n+        private void setDownStream(Subscriber<? super HttpData> downstream) {\n+            try {\n+                if (!downstreamUpdater.compareAndSet(this, null, downstream)) {\n+                    downstream.onSubscribe(NoopSubscription.get());\n+                    downstream.onError(new IllegalStateException(\"subscribed by other subscriber already\"));\n+                    return;\n+                }\n+                downstream.onSubscribe(this);\n+                if (cause != null) {\n+                    downstream.onError(cause);\n+                } else if (completing) {\n+                    downstream.onComplete();\n+                }\n+            } catch (Throwable t) {\n+                throwIfFatal(t);\n+                logger.warn(\"Subscriber should not throw an exception. subscriber: {}\", downstream, t);\n+            }\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            requireNonNull(subscription, \"subscription\");\n+            if (cancelCalled || upstream != null) {\n+                subscription.cancel();\n+                return;\n+            }\n+            upstream = subscription;\n+            subscription.request(pendingRequests);\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (n <= 0) {\n+                // Just abort the publisher so subscriber().onError(e) is called and resources are cleaned up.\n+                response.abort(new IllegalArgumentException(\n+                        \"n: \" + n + \" (expected: > 0, see Reactive Streams specification rule 3.9)\"));\n+                return;\n+            }\n+            if (executor.inEventLoop()) {\n+                request0(n);\n+            } else {\n+                executor.execute(() -> request0(n));\n+            }\n+        }\n+\n+        private void request0(long n) {\n+            final Subscription upstream = this.upstream;\n+            if (upstream == null) {\n+                pendingRequests = LongMath.saturatedAdd(n, pendingRequests);\n+            } else {\n+                upstream.request(n);\n+            }\n+        }\n+\n+        @Override\n+        public void cancel() {\n+            if (cancelCalled) {\n+                return;\n+            }\n+            cancelCalled = true;\n+            downstream = NoopSubscriber.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e035b459759229f6365dc4f452c92a1fe29f482c"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIxMDAyNA==", "bodyText": "That's a good point. I've added this code to pass Reactive Streams TCK. Let me update this a lit. :-)", "url": "https://github.com/line/armeria/pull/3038#discussion_r517210024", "createdAt": "2020-11-04T09:35:19Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.SplitHttpResponse;\n+import com.linecorp.armeria.common.stream.AbortedStreamException;\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnmodifiableFuture;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+public class DefaultSplitHttpResponse implements StreamMessage<HttpData>, SplitHttpResponse {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultSplitHttpResponse.class);\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscriber> downstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscriber.class, \"downstream\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultSplitHttpResponse, HeadersFuture>\n+            trailersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultSplitHttpResponse.class, HeadersFuture.class, \"trailersFuture\");\n+\n+    private static final ResponseHeaders HEADERS_WITH_UNKNOWN_STATUS = ResponseHeaders.of(HttpStatus.UNKNOWN);\n+    private static final HeadersFuture<HttpHeaders> EMPTY_TRAILERS;\n+\n+    static {\n+        EMPTY_TRAILERS = new HeadersFuture<>();\n+        EMPTY_TRAILERS.doComplete(HttpHeaders.of());\n+    }\n+\n+    private final HeadersFuture<ResponseHeaders> headersFuture = new HeadersFuture<>();\n+    private final BodySubscriber bodySubscriber = new BodySubscriber();\n+    private final HttpResponse response;\n+    private final EventExecutor executor;\n+\n+    @Nullable\n+    private volatile HeadersFuture<HttpHeaders> trailersFuture;\n+    private volatile boolean wroteAny;\n+\n+    public DefaultSplitHttpResponse(HttpResponse response, EventExecutor executor,\n+                                    SubscriptionOption... options) {\n+        this.response = requireNonNull(response, \"response\");\n+        this.executor = requireNonNull(executor, \"executor\");\n+\n+        response.subscribe(bodySubscriber, executor, options);\n+    }\n+\n+    @Override\n+    public final CompletableFuture<ResponseHeaders> headers() {\n+        return headersFuture;\n+    }\n+\n+    @Override\n+    public final StreamMessage<HttpData> body() {\n+        return this;\n+    }\n+\n+    @Override\n+    public final CompletableFuture<HttpHeaders> trailers() {\n+        HeadersFuture<HttpHeaders> trailersFuture = this.trailersFuture;\n+        if (trailersFuture != null) {\n+            return trailersFuture;\n+        }\n+\n+        trailersFuture = new HeadersFuture<>();\n+        if (trailersFutureUpdater.compareAndSet(this, null, trailersFuture)) {\n+            return trailersFuture;\n+        } else {\n+            return this.trailersFuture;\n+        }\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        return response.isOpen();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return !isOpen() && !wroteAny;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return response.whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor unused) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        if (executor.inEventLoop()) {\n+            bodySubscriber.setDownStream(subscriber);\n+        } else {\n+            executor.execute(() -> bodySubscriber.setDownStream(subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor executor,\n+                          SubscriptionOption... unused) {\n+        throw new UnsupportedOperationException(\"Use 'HttpResponse.split(executor, options)' instead.\");\n+    }\n+\n+    @Override\n+    public void abort() {\n+        response.abort();\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        response.abort(cause);\n+    }\n+\n+    private final class BodySubscriber implements Subscriber<HttpObject>, Subscription {\n+\n+        @Nullable\n+        private Throwable cause;\n+\n+        private boolean completing;\n+        // 1 is used for prefetching headers\n+        private long pendingRequests = 1;\n+\n+        @Nullable\n+        volatile Subscriber<? super HttpData> downstream;\n+        @Nullable\n+        private volatile Subscription upstream;\n+\n+        private volatile boolean cancelCalled;\n+\n+        private void setDownStream(Subscriber<? super HttpData> downstream) {\n+            try {\n+                if (!downstreamUpdater.compareAndSet(this, null, downstream)) {\n+                    downstream.onSubscribe(NoopSubscription.get());\n+                    downstream.onError(new IllegalStateException(\"subscribed by other subscriber already\"));\n+                    return;\n+                }\n+                downstream.onSubscribe(this);\n+                if (cause != null) {\n+                    downstream.onError(cause);\n+                } else if (completing) {\n+                    downstream.onComplete();\n+                }\n+            } catch (Throwable t) {\n+                throwIfFatal(t);\n+                logger.warn(\"Subscriber should not throw an exception. subscriber: {}\", downstream, t);\n+            }\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            requireNonNull(subscription, \"subscription\");\n+            if (cancelCalled || upstream != null) {\n+                subscription.cancel();\n+                return;\n+            }\n+            upstream = subscription;\n+            subscription.request(pendingRequests);\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (n <= 0) {\n+                // Just abort the publisher so subscriber().onError(e) is called and resources are cleaned up.\n+                response.abort(new IllegalArgumentException(\n+                        \"n: \" + n + \" (expected: > 0, see Reactive Streams specification rule 3.9)\"));\n+                return;\n+            }\n+            if (executor.inEventLoop()) {\n+                request0(n);\n+            } else {\n+                executor.execute(() -> request0(n));\n+            }\n+        }\n+\n+        private void request0(long n) {\n+            final Subscription upstream = this.upstream;\n+            if (upstream == null) {\n+                pendingRequests = LongMath.saturatedAdd(n, pendingRequests);\n+            } else {\n+                upstream.request(n);\n+            }\n+        }\n+\n+        @Override\n+        public void cancel() {\n+            if (cancelCalled) {\n+                return;\n+            }\n+            cancelCalled = true;\n+            downstream = NoopSubscriber.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA4NjIzNQ=="}, "originalCommit": {"oid": "e035b459759229f6365dc4f452c92a1fe29f482c"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgwMzk2OQ==", "bodyText": "question: Can't we just leave the downstream? (i.e. not assign the NoopSubscriber?)", "url": "https://github.com/line/armeria/pull/3038#discussion_r517803969", "createdAt": "2020-11-05T05:41:20Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.SplitHttpResponse;\n+import com.linecorp.armeria.common.stream.AbortedStreamException;\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnmodifiableFuture;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+public class DefaultSplitHttpResponse implements StreamMessage<HttpData>, SplitHttpResponse {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultSplitHttpResponse.class);\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscriber> downstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscriber.class, \"downstream\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultSplitHttpResponse, HeadersFuture>\n+            trailersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultSplitHttpResponse.class, HeadersFuture.class, \"trailersFuture\");\n+\n+    private static final ResponseHeaders HEADERS_WITH_UNKNOWN_STATUS = ResponseHeaders.of(HttpStatus.UNKNOWN);\n+    private static final HeadersFuture<HttpHeaders> EMPTY_TRAILERS;\n+\n+    static {\n+        EMPTY_TRAILERS = new HeadersFuture<>();\n+        EMPTY_TRAILERS.doComplete(HttpHeaders.of());\n+    }\n+\n+    private final HeadersFuture<ResponseHeaders> headersFuture = new HeadersFuture<>();\n+    private final BodySubscriber bodySubscriber = new BodySubscriber();\n+    private final HttpResponse response;\n+    private final EventExecutor executor;\n+\n+    @Nullable\n+    private volatile HeadersFuture<HttpHeaders> trailersFuture;\n+    private volatile boolean wroteAny;\n+\n+    public DefaultSplitHttpResponse(HttpResponse response, EventExecutor executor,\n+                                    SubscriptionOption... options) {\n+        this.response = requireNonNull(response, \"response\");\n+        this.executor = requireNonNull(executor, \"executor\");\n+\n+        response.subscribe(bodySubscriber, executor, options);\n+    }\n+\n+    @Override\n+    public final CompletableFuture<ResponseHeaders> headers() {\n+        return headersFuture;\n+    }\n+\n+    @Override\n+    public final StreamMessage<HttpData> body() {\n+        return this;\n+    }\n+\n+    @Override\n+    public final CompletableFuture<HttpHeaders> trailers() {\n+        HeadersFuture<HttpHeaders> trailersFuture = this.trailersFuture;\n+        if (trailersFuture != null) {\n+            return trailersFuture;\n+        }\n+\n+        trailersFuture = new HeadersFuture<>();\n+        if (trailersFutureUpdater.compareAndSet(this, null, trailersFuture)) {\n+            return trailersFuture;\n+        } else {\n+            return this.trailersFuture;\n+        }\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        return response.isOpen();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return !isOpen() && !wroteAny;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return response.whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor unused) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        if (executor.inEventLoop()) {\n+            bodySubscriber.setDownStream(subscriber);\n+        } else {\n+            executor.execute(() -> bodySubscriber.setDownStream(subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor executor,\n+                          SubscriptionOption... unused) {\n+        throw new UnsupportedOperationException(\"Use 'HttpResponse.split(executor, options)' instead.\");\n+    }\n+\n+    @Override\n+    public void abort() {\n+        response.abort();\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        response.abort(cause);\n+    }\n+\n+    private final class BodySubscriber implements Subscriber<HttpObject>, Subscription {\n+\n+        @Nullable\n+        private Throwable cause;\n+\n+        private boolean completing;\n+        // 1 is used for prefetching headers\n+        private long pendingRequests = 1;\n+\n+        @Nullable\n+        volatile Subscriber<? super HttpData> downstream;\n+        @Nullable\n+        private volatile Subscription upstream;\n+\n+        private volatile boolean cancelCalled;\n+\n+        private void setDownStream(Subscriber<? super HttpData> downstream) {\n+            try {\n+                if (!downstreamUpdater.compareAndSet(this, null, downstream)) {\n+                    downstream.onSubscribe(NoopSubscription.get());\n+                    downstream.onError(new IllegalStateException(\"subscribed by other subscriber already\"));\n+                    return;\n+                }\n+                downstream.onSubscribe(this);\n+                if (cause != null) {\n+                    downstream.onError(cause);\n+                } else if (completing) {\n+                    downstream.onComplete();\n+                }\n+            } catch (Throwable t) {\n+                throwIfFatal(t);\n+                logger.warn(\"Subscriber should not throw an exception. subscriber: {}\", downstream, t);\n+            }\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            requireNonNull(subscription, \"subscription\");\n+            if (cancelCalled || upstream != null) {\n+                subscription.cancel();\n+                return;\n+            }\n+            upstream = subscription;\n+            subscription.request(pendingRequests);\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (n <= 0) {\n+                // Just abort the publisher so subscriber().onError(e) is called and resources are cleaned up.\n+                response.abort(new IllegalArgumentException(\n+                        \"n: \" + n + \" (expected: > 0, see Reactive Streams specification rule 3.9)\"));\n+                return;\n+            }\n+            if (executor.inEventLoop()) {\n+                request0(n);\n+            } else {\n+                executor.execute(() -> request0(n));\n+            }\n+        }\n+\n+        private void request0(long n) {\n+            final Subscription upstream = this.upstream;\n+            if (upstream == null) {\n+                pendingRequests = LongMath.saturatedAdd(n, pendingRequests);\n+            } else {\n+                upstream.request(n);\n+            }\n+        }\n+\n+        @Override\n+        public void cancel() {\n+            if (cancelCalled) {\n+                return;\n+            }\n+            cancelCalled = true;\n+            downstream = NoopSubscriber.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA4NjIzNQ=="}, "originalCommit": {"oid": "e035b459759229f6365dc4f452c92a1fe29f482c"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4MTk3NA==", "bodyText": "AFAIK, if Subscription.cancel() called, the publisher should drop the subscriber's reference.\nhttps://github.com/reactive-streams/reactive-streams-jvm#3.13\nIf not, required_spec313_cancelMustMakeThePublisherEventuallyDropAllReferencesToTheSubscriber in TCK was failed.", "url": "https://github.com/line/armeria/pull/3038#discussion_r517881974", "createdAt": "2020-11-05T08:49:17Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.SplitHttpResponse;\n+import com.linecorp.armeria.common.stream.AbortedStreamException;\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnmodifiableFuture;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+public class DefaultSplitHttpResponse implements StreamMessage<HttpData>, SplitHttpResponse {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultSplitHttpResponse.class);\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscriber> downstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscriber.class, \"downstream\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultSplitHttpResponse, HeadersFuture>\n+            trailersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultSplitHttpResponse.class, HeadersFuture.class, \"trailersFuture\");\n+\n+    private static final ResponseHeaders HEADERS_WITH_UNKNOWN_STATUS = ResponseHeaders.of(HttpStatus.UNKNOWN);\n+    private static final HeadersFuture<HttpHeaders> EMPTY_TRAILERS;\n+\n+    static {\n+        EMPTY_TRAILERS = new HeadersFuture<>();\n+        EMPTY_TRAILERS.doComplete(HttpHeaders.of());\n+    }\n+\n+    private final HeadersFuture<ResponseHeaders> headersFuture = new HeadersFuture<>();\n+    private final BodySubscriber bodySubscriber = new BodySubscriber();\n+    private final HttpResponse response;\n+    private final EventExecutor executor;\n+\n+    @Nullable\n+    private volatile HeadersFuture<HttpHeaders> trailersFuture;\n+    private volatile boolean wroteAny;\n+\n+    public DefaultSplitHttpResponse(HttpResponse response, EventExecutor executor,\n+                                    SubscriptionOption... options) {\n+        this.response = requireNonNull(response, \"response\");\n+        this.executor = requireNonNull(executor, \"executor\");\n+\n+        response.subscribe(bodySubscriber, executor, options);\n+    }\n+\n+    @Override\n+    public final CompletableFuture<ResponseHeaders> headers() {\n+        return headersFuture;\n+    }\n+\n+    @Override\n+    public final StreamMessage<HttpData> body() {\n+        return this;\n+    }\n+\n+    @Override\n+    public final CompletableFuture<HttpHeaders> trailers() {\n+        HeadersFuture<HttpHeaders> trailersFuture = this.trailersFuture;\n+        if (trailersFuture != null) {\n+            return trailersFuture;\n+        }\n+\n+        trailersFuture = new HeadersFuture<>();\n+        if (trailersFutureUpdater.compareAndSet(this, null, trailersFuture)) {\n+            return trailersFuture;\n+        } else {\n+            return this.trailersFuture;\n+        }\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        return response.isOpen();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return !isOpen() && !wroteAny;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return response.whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor unused) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        if (executor.inEventLoop()) {\n+            bodySubscriber.setDownStream(subscriber);\n+        } else {\n+            executor.execute(() -> bodySubscriber.setDownStream(subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor executor,\n+                          SubscriptionOption... unused) {\n+        throw new UnsupportedOperationException(\"Use 'HttpResponse.split(executor, options)' instead.\");\n+    }\n+\n+    @Override\n+    public void abort() {\n+        response.abort();\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        response.abort(cause);\n+    }\n+\n+    private final class BodySubscriber implements Subscriber<HttpObject>, Subscription {\n+\n+        @Nullable\n+        private Throwable cause;\n+\n+        private boolean completing;\n+        // 1 is used for prefetching headers\n+        private long pendingRequests = 1;\n+\n+        @Nullable\n+        volatile Subscriber<? super HttpData> downstream;\n+        @Nullable\n+        private volatile Subscription upstream;\n+\n+        private volatile boolean cancelCalled;\n+\n+        private void setDownStream(Subscriber<? super HttpData> downstream) {\n+            try {\n+                if (!downstreamUpdater.compareAndSet(this, null, downstream)) {\n+                    downstream.onSubscribe(NoopSubscription.get());\n+                    downstream.onError(new IllegalStateException(\"subscribed by other subscriber already\"));\n+                    return;\n+                }\n+                downstream.onSubscribe(this);\n+                if (cause != null) {\n+                    downstream.onError(cause);\n+                } else if (completing) {\n+                    downstream.onComplete();\n+                }\n+            } catch (Throwable t) {\n+                throwIfFatal(t);\n+                logger.warn(\"Subscriber should not throw an exception. subscriber: {}\", downstream, t);\n+            }\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            requireNonNull(subscription, \"subscription\");\n+            if (cancelCalled || upstream != null) {\n+                subscription.cancel();\n+                return;\n+            }\n+            upstream = subscription;\n+            subscription.request(pendingRequests);\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (n <= 0) {\n+                // Just abort the publisher so subscriber().onError(e) is called and resources are cleaned up.\n+                response.abort(new IllegalArgumentException(\n+                        \"n: \" + n + \" (expected: > 0, see Reactive Streams specification rule 3.9)\"));\n+                return;\n+            }\n+            if (executor.inEventLoop()) {\n+                request0(n);\n+            } else {\n+                executor.execute(() -> request0(n));\n+            }\n+        }\n+\n+        private void request0(long n) {\n+            final Subscription upstream = this.upstream;\n+            if (upstream == null) {\n+                pendingRequests = LongMath.saturatedAdd(n, pendingRequests);\n+            } else {\n+                upstream.request(n);\n+            }\n+        }\n+\n+        @Override\n+        public void cancel() {\n+            if (cancelCalled) {\n+                return;\n+            }\n+            cancelCalled = true;\n+            downstream = NoopSubscriber.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA4NjIzNQ=="}, "originalCommit": {"oid": "e035b459759229f6365dc4f452c92a1fe29f482c"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4NDY4Mw==", "bodyText": "Thanks for the explanation. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3038#discussion_r517884683", "createdAt": "2020-11-05T08:53:45Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.SplitHttpResponse;\n+import com.linecorp.armeria.common.stream.AbortedStreamException;\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnmodifiableFuture;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+public class DefaultSplitHttpResponse implements StreamMessage<HttpData>, SplitHttpResponse {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultSplitHttpResponse.class);\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscriber> downstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscriber.class, \"downstream\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultSplitHttpResponse, HeadersFuture>\n+            trailersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultSplitHttpResponse.class, HeadersFuture.class, \"trailersFuture\");\n+\n+    private static final ResponseHeaders HEADERS_WITH_UNKNOWN_STATUS = ResponseHeaders.of(HttpStatus.UNKNOWN);\n+    private static final HeadersFuture<HttpHeaders> EMPTY_TRAILERS;\n+\n+    static {\n+        EMPTY_TRAILERS = new HeadersFuture<>();\n+        EMPTY_TRAILERS.doComplete(HttpHeaders.of());\n+    }\n+\n+    private final HeadersFuture<ResponseHeaders> headersFuture = new HeadersFuture<>();\n+    private final BodySubscriber bodySubscriber = new BodySubscriber();\n+    private final HttpResponse response;\n+    private final EventExecutor executor;\n+\n+    @Nullable\n+    private volatile HeadersFuture<HttpHeaders> trailersFuture;\n+    private volatile boolean wroteAny;\n+\n+    public DefaultSplitHttpResponse(HttpResponse response, EventExecutor executor,\n+                                    SubscriptionOption... options) {\n+        this.response = requireNonNull(response, \"response\");\n+        this.executor = requireNonNull(executor, \"executor\");\n+\n+        response.subscribe(bodySubscriber, executor, options);\n+    }\n+\n+    @Override\n+    public final CompletableFuture<ResponseHeaders> headers() {\n+        return headersFuture;\n+    }\n+\n+    @Override\n+    public final StreamMessage<HttpData> body() {\n+        return this;\n+    }\n+\n+    @Override\n+    public final CompletableFuture<HttpHeaders> trailers() {\n+        HeadersFuture<HttpHeaders> trailersFuture = this.trailersFuture;\n+        if (trailersFuture != null) {\n+            return trailersFuture;\n+        }\n+\n+        trailersFuture = new HeadersFuture<>();\n+        if (trailersFutureUpdater.compareAndSet(this, null, trailersFuture)) {\n+            return trailersFuture;\n+        } else {\n+            return this.trailersFuture;\n+        }\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        return response.isOpen();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return !isOpen() && !wroteAny;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return response.whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor unused) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        if (executor.inEventLoop()) {\n+            bodySubscriber.setDownStream(subscriber);\n+        } else {\n+            executor.execute(() -> bodySubscriber.setDownStream(subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor executor,\n+                          SubscriptionOption... unused) {\n+        throw new UnsupportedOperationException(\"Use 'HttpResponse.split(executor, options)' instead.\");\n+    }\n+\n+    @Override\n+    public void abort() {\n+        response.abort();\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        response.abort(cause);\n+    }\n+\n+    private final class BodySubscriber implements Subscriber<HttpObject>, Subscription {\n+\n+        @Nullable\n+        private Throwable cause;\n+\n+        private boolean completing;\n+        // 1 is used for prefetching headers\n+        private long pendingRequests = 1;\n+\n+        @Nullable\n+        volatile Subscriber<? super HttpData> downstream;\n+        @Nullable\n+        private volatile Subscription upstream;\n+\n+        private volatile boolean cancelCalled;\n+\n+        private void setDownStream(Subscriber<? super HttpData> downstream) {\n+            try {\n+                if (!downstreamUpdater.compareAndSet(this, null, downstream)) {\n+                    downstream.onSubscribe(NoopSubscription.get());\n+                    downstream.onError(new IllegalStateException(\"subscribed by other subscriber already\"));\n+                    return;\n+                }\n+                downstream.onSubscribe(this);\n+                if (cause != null) {\n+                    downstream.onError(cause);\n+                } else if (completing) {\n+                    downstream.onComplete();\n+                }\n+            } catch (Throwable t) {\n+                throwIfFatal(t);\n+                logger.warn(\"Subscriber should not throw an exception. subscriber: {}\", downstream, t);\n+            }\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            requireNonNull(subscription, \"subscription\");\n+            if (cancelCalled || upstream != null) {\n+                subscription.cancel();\n+                return;\n+            }\n+            upstream = subscription;\n+            subscription.request(pendingRequests);\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (n <= 0) {\n+                // Just abort the publisher so subscriber().onError(e) is called and resources are cleaned up.\n+                response.abort(new IllegalArgumentException(\n+                        \"n: \" + n + \" (expected: > 0, see Reactive Streams specification rule 3.9)\"));\n+                return;\n+            }\n+            if (executor.inEventLoop()) {\n+                request0(n);\n+            } else {\n+                executor.execute(() -> request0(n));\n+            }\n+        }\n+\n+        private void request0(long n) {\n+            final Subscription upstream = this.upstream;\n+            if (upstream == null) {\n+                pendingRequests = LongMath.saturatedAdd(n, pendingRequests);\n+            } else {\n+                upstream.request(n);\n+            }\n+        }\n+\n+        @Override\n+        public void cancel() {\n+            if (cancelCalled) {\n+                return;\n+            }\n+            cancelCalled = true;\n+            downstream = NoopSubscriber.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA4NjIzNQ=="}, "originalCommit": {"oid": "e035b459759229f6365dc4f452c92a1fe29f482c"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDE3MTc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNjoyNzowNFrOHuhmeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNjoyNzowNFrOHuhmeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU0NzA2Ng==", "bodyText": "How about doing this after downstreamUpdater.compareAndSet(this, null, downstream)?", "url": "https://github.com/line/armeria/pull/3038#discussion_r518547066", "createdAt": "2020-11-06T06:27:04Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.SplitHttpResponse;\n+import com.linecorp.armeria.common.stream.AbortedStreamException;\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnmodifiableFuture;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+public class DefaultSplitHttpResponse implements StreamMessage<HttpData>, SplitHttpResponse {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultSplitHttpResponse.class);\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscriber> downstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscriber.class, \"downstream\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultSplitHttpResponse, HeadersFuture>\n+            trailersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultSplitHttpResponse.class, HeadersFuture.class, \"trailersFuture\");\n+\n+    private static final ResponseHeaders HEADERS_WITH_UNKNOWN_STATUS = ResponseHeaders.of(HttpStatus.UNKNOWN);\n+    private static final HeadersFuture<HttpHeaders> EMPTY_TRAILERS;\n+\n+    static {\n+        EMPTY_TRAILERS = new HeadersFuture<>();\n+        EMPTY_TRAILERS.doComplete(HttpHeaders.of());\n+    }\n+\n+    private final HeadersFuture<ResponseHeaders> headersFuture = new HeadersFuture<>();\n+    private final BodySubscriber bodySubscriber = new BodySubscriber();\n+    private final HttpResponse response;\n+    private final EventExecutor executor;\n+    private final boolean notifyCancellation;\n+\n+    @Nullable\n+    private volatile HeadersFuture<HttpHeaders> trailersFuture;\n+    private volatile boolean wroteAny;\n+\n+    public DefaultSplitHttpResponse(HttpResponse response, EventExecutor executor,\n+                                    SubscriptionOption... options) {\n+        this.response = requireNonNull(response, \"response\");\n+        this.executor = requireNonNull(executor, \"executor\");\n+        notifyCancellation = containsNotifyCancellation(options);\n+\n+        response.subscribe(bodySubscriber, executor, options);\n+    }\n+\n+    @Override\n+    public final CompletableFuture<ResponseHeaders> headers() {\n+        return headersFuture;\n+    }\n+\n+    @Override\n+    public final StreamMessage<HttpData> body() {\n+        return this;\n+    }\n+\n+    @Override\n+    public final CompletableFuture<HttpHeaders> trailers() {\n+        HeadersFuture<HttpHeaders> trailersFuture = this.trailersFuture;\n+        if (trailersFuture != null) {\n+            return trailersFuture;\n+        }\n+\n+        trailersFuture = new HeadersFuture<>();\n+        if (trailersFutureUpdater.compareAndSet(this, null, trailersFuture)) {\n+            return trailersFuture;\n+        } else {\n+            return this.trailersFuture;\n+        }\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        return response.isOpen();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return !isOpen() && !wroteAny;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return response.whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor unused) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        if (executor.inEventLoop()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0168fed0656db0477de77679f64adb69499d0e3"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDE4MTUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNjozMjoxN1rOHuhsGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNjo0NjoyN1rOHuh7jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU0ODUwNg==", "bodyText": "Isn't this if (notifyCancellation) ?", "url": "https://github.com/line/armeria/pull/3038#discussion_r518548506", "createdAt": "2020-11-06T06:32:17Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.SplitHttpResponse;\n+import com.linecorp.armeria.common.stream.AbortedStreamException;\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnmodifiableFuture;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+public class DefaultSplitHttpResponse implements StreamMessage<HttpData>, SplitHttpResponse {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultSplitHttpResponse.class);\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscriber> downstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscriber.class, \"downstream\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultSplitHttpResponse, HeadersFuture>\n+            trailersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultSplitHttpResponse.class, HeadersFuture.class, \"trailersFuture\");\n+\n+    private static final ResponseHeaders HEADERS_WITH_UNKNOWN_STATUS = ResponseHeaders.of(HttpStatus.UNKNOWN);\n+    private static final HeadersFuture<HttpHeaders> EMPTY_TRAILERS;\n+\n+    static {\n+        EMPTY_TRAILERS = new HeadersFuture<>();\n+        EMPTY_TRAILERS.doComplete(HttpHeaders.of());\n+    }\n+\n+    private final HeadersFuture<ResponseHeaders> headersFuture = new HeadersFuture<>();\n+    private final BodySubscriber bodySubscriber = new BodySubscriber();\n+    private final HttpResponse response;\n+    private final EventExecutor executor;\n+    private final boolean notifyCancellation;\n+\n+    @Nullable\n+    private volatile HeadersFuture<HttpHeaders> trailersFuture;\n+    private volatile boolean wroteAny;\n+\n+    public DefaultSplitHttpResponse(HttpResponse response, EventExecutor executor,\n+                                    SubscriptionOption... options) {\n+        this.response = requireNonNull(response, \"response\");\n+        this.executor = requireNonNull(executor, \"executor\");\n+        notifyCancellation = containsNotifyCancellation(options);\n+\n+        response.subscribe(bodySubscriber, executor, options);\n+    }\n+\n+    @Override\n+    public final CompletableFuture<ResponseHeaders> headers() {\n+        return headersFuture;\n+    }\n+\n+    @Override\n+    public final StreamMessage<HttpData> body() {\n+        return this;\n+    }\n+\n+    @Override\n+    public final CompletableFuture<HttpHeaders> trailers() {\n+        HeadersFuture<HttpHeaders> trailersFuture = this.trailersFuture;\n+        if (trailersFuture != null) {\n+            return trailersFuture;\n+        }\n+\n+        trailersFuture = new HeadersFuture<>();\n+        if (trailersFutureUpdater.compareAndSet(this, null, trailersFuture)) {\n+            return trailersFuture;\n+        } else {\n+            return this.trailersFuture;\n+        }\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        return response.isOpen();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return !isOpen() && !wroteAny;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return response.whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor unused) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        if (executor.inEventLoop()) {\n+            bodySubscriber.setDownStream(subscriber);\n+        } else {\n+            executor.execute(() -> bodySubscriber.setDownStream(subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor executor,\n+                          SubscriptionOption... unused) {\n+        throw new UnsupportedOperationException(\"Use 'HttpResponse.split(executor, options)' instead.\");\n+    }\n+\n+    @Override\n+    public void abort() {\n+        response.abort();\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        response.abort(cause);\n+    }\n+\n+    private final class BodySubscriber implements Subscriber<HttpObject>, Subscription {\n+\n+        @Nullable\n+        private Throwable cause;\n+\n+        private boolean completing;\n+        // 1 is used for prefetching headers\n+        private long pendingRequests = 1;\n+\n+        @Nullable\n+        volatile Subscriber<? super HttpData> downstream;\n+        @Nullable\n+        private volatile Subscription upstream;\n+\n+        private volatile boolean cancelCalled;\n+\n+        private void setDownStream(Subscriber<? super HttpData> downstream) {\n+            try {\n+                if (!downstreamUpdater.compareAndSet(this, null, downstream)) {\n+                    downstream.onSubscribe(NoopSubscription.get());\n+                    downstream.onError(new IllegalStateException(\"subscribed by other subscriber already\"));\n+                    return;\n+                }\n+                downstream.onSubscribe(this);\n+                if (cause != null) {\n+                    downstream.onError(cause);\n+                } else if (completing) {\n+                    downstream.onComplete();\n+                }\n+            } catch (Throwable t) {\n+                throwIfFatal(t);\n+                logger.warn(\"Subscriber should not throw an exception. subscriber: {}\", downstream, t);\n+            }\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            requireNonNull(subscription, \"subscription\");\n+            if (upstream != null) {\n+                subscription.cancel();\n+                return;\n+            }\n+            upstream = subscription;\n+            if (cancelCalled) {\n+                subscription.cancel();\n+                return;\n+            }\n+            subscription.request(pendingRequests);\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (n <= 0) {\n+                // Just abort the publisher so subscriber().onError(e) is called and resources are cleaned up.\n+                response.abort(new IllegalArgumentException(\n+                        \"n: \" + n + \" (expected: > 0, see Reactive Streams specification rule 3.9)\"));\n+                return;\n+            }\n+            if (executor.inEventLoop()) {\n+                request0(n);\n+            } else {\n+                executor.execute(() -> request0(n));\n+            }\n+        }\n+\n+        private void request0(long n) {\n+            final Subscription upstream = this.upstream;\n+            if (upstream == null) {\n+                pendingRequests = LongMath.saturatedAdd(n, pendingRequests);\n+            } else {\n+                upstream.request(n);\n+            }\n+        }\n+\n+        @Override\n+        public void cancel() {\n+            if (cancelCalled) {\n+                return;\n+            }\n+            cancelCalled = true;\n+            if (!notifyCancellation) {\n+                downstream = NoopSubscriber.get();\n+            }\n+            maybeCompleteHeaders(null);\n+            final Subscription upstream = this.upstream;\n+            if (upstream != null) {\n+                upstream.cancel();\n+            }\n+        }\n+\n+        @Override\n+        public void onNext(HttpObject httpObject) {\n+            if (httpObject instanceof ResponseHeaders) {\n+                final ResponseHeaders headers = (ResponseHeaders) httpObject;\n+                final HttpStatus status = headers.status();\n+                if (status.isInformational()) {\n+                    // Ignore informational headers\n+                    upstream.request(1);\n+                } else {\n+                    headersFuture.doComplete(headers);\n+                }\n+                return;\n+            }\n+\n+            if (httpObject instanceof HttpHeaders) {\n+                final HttpHeaders trailers = (HttpHeaders) httpObject;\n+                completeTrailers(trailers);\n+                return;\n+            }\n+\n+            final Subscriber<? super HttpData> downstream = this.downstream;\n+            assert downstream != null;\n+            assert httpObject instanceof HttpData;\n+            final HttpData data = (HttpData) httpObject;\n+            wroteAny = true;\n+            downstream.onNext(data);\n+        }\n+\n+        /**\n+         * Completes the specified trailers.\n+         */\n+        private void completeTrailers(HttpHeaders trailers) {\n+            HeadersFuture<HttpHeaders> trailersFuture = DefaultSplitHttpResponse.this.trailersFuture;\n+            if (trailersFuture != null) {\n+                trailersFuture.doComplete(trailers);\n+                return;\n+            }\n+\n+            trailersFuture = new HeadersFuture<>();\n+            if (trailersFutureUpdater.compareAndSet(DefaultSplitHttpResponse.this, null, trailersFuture)) {\n+                trailersFuture.doComplete(trailers);\n+            } else {\n+                DefaultSplitHttpResponse.this.trailersFuture.doComplete(trailers);\n+            }\n+        }\n+\n+        @Override\n+        public void onError(Throwable cause) {\n+            maybeCompleteHeaders(cause);\n+            final Subscriber<? super HttpData> downstream = this.downstream;\n+            if (downstream == null) {\n+                this.cause = cause;\n+            } else {\n+                downstream.onError(cause);\n+                if (cause instanceof CancelledSubscriptionException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0168fed0656db0477de77679f64adb69499d0e3"}, "originalPosition": 301}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU1MjQ2MA==", "bodyText": "Yeah, I think that is the same effect. Otherwise, I think we can remove the if condition.\nThere is no harm to set NoopSubscriber to downstream after onError() is invoked.", "url": "https://github.com/line/armeria/pull/3038#discussion_r518552460", "createdAt": "2020-11-06T06:46:27Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java", "diffHunk": "@@ -0,0 +1,358 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.SplitHttpResponse;\n+import com.linecorp.armeria.common.stream.AbortedStreamException;\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnmodifiableFuture;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+public class DefaultSplitHttpResponse implements StreamMessage<HttpData>, SplitHttpResponse {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultSplitHttpResponse.class);\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<BodySubscriber, Subscriber> downstreamUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(BodySubscriber.class, Subscriber.class, \"downstream\");\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<DefaultSplitHttpResponse, HeadersFuture>\n+            trailersFutureUpdater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultSplitHttpResponse.class, HeadersFuture.class, \"trailersFuture\");\n+\n+    private static final ResponseHeaders HEADERS_WITH_UNKNOWN_STATUS = ResponseHeaders.of(HttpStatus.UNKNOWN);\n+    private static final HeadersFuture<HttpHeaders> EMPTY_TRAILERS;\n+\n+    static {\n+        EMPTY_TRAILERS = new HeadersFuture<>();\n+        EMPTY_TRAILERS.doComplete(HttpHeaders.of());\n+    }\n+\n+    private final HeadersFuture<ResponseHeaders> headersFuture = new HeadersFuture<>();\n+    private final BodySubscriber bodySubscriber = new BodySubscriber();\n+    private final HttpResponse response;\n+    private final EventExecutor executor;\n+    private final boolean notifyCancellation;\n+\n+    @Nullable\n+    private volatile HeadersFuture<HttpHeaders> trailersFuture;\n+    private volatile boolean wroteAny;\n+\n+    public DefaultSplitHttpResponse(HttpResponse response, EventExecutor executor,\n+                                    SubscriptionOption... options) {\n+        this.response = requireNonNull(response, \"response\");\n+        this.executor = requireNonNull(executor, \"executor\");\n+        notifyCancellation = containsNotifyCancellation(options);\n+\n+        response.subscribe(bodySubscriber, executor, options);\n+    }\n+\n+    @Override\n+    public final CompletableFuture<ResponseHeaders> headers() {\n+        return headersFuture;\n+    }\n+\n+    @Override\n+    public final StreamMessage<HttpData> body() {\n+        return this;\n+    }\n+\n+    @Override\n+    public final CompletableFuture<HttpHeaders> trailers() {\n+        HeadersFuture<HttpHeaders> trailersFuture = this.trailersFuture;\n+        if (trailersFuture != null) {\n+            return trailersFuture;\n+        }\n+\n+        trailersFuture = new HeadersFuture<>();\n+        if (trailersFutureUpdater.compareAndSet(this, null, trailersFuture)) {\n+            return trailersFuture;\n+        } else {\n+            return this.trailersFuture;\n+        }\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        return response.isOpen();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return !isOpen() && !wroteAny;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return response.whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor unused) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        if (executor.inEventLoop()) {\n+            bodySubscriber.setDownStream(subscriber);\n+        } else {\n+            executor.execute(() -> bodySubscriber.setDownStream(subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpData> subscriber, EventExecutor executor,\n+                          SubscriptionOption... unused) {\n+        throw new UnsupportedOperationException(\"Use 'HttpResponse.split(executor, options)' instead.\");\n+    }\n+\n+    @Override\n+    public void abort() {\n+        response.abort();\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        response.abort(cause);\n+    }\n+\n+    private final class BodySubscriber implements Subscriber<HttpObject>, Subscription {\n+\n+        @Nullable\n+        private Throwable cause;\n+\n+        private boolean completing;\n+        // 1 is used for prefetching headers\n+        private long pendingRequests = 1;\n+\n+        @Nullable\n+        volatile Subscriber<? super HttpData> downstream;\n+        @Nullable\n+        private volatile Subscription upstream;\n+\n+        private volatile boolean cancelCalled;\n+\n+        private void setDownStream(Subscriber<? super HttpData> downstream) {\n+            try {\n+                if (!downstreamUpdater.compareAndSet(this, null, downstream)) {\n+                    downstream.onSubscribe(NoopSubscription.get());\n+                    downstream.onError(new IllegalStateException(\"subscribed by other subscriber already\"));\n+                    return;\n+                }\n+                downstream.onSubscribe(this);\n+                if (cause != null) {\n+                    downstream.onError(cause);\n+                } else if (completing) {\n+                    downstream.onComplete();\n+                }\n+            } catch (Throwable t) {\n+                throwIfFatal(t);\n+                logger.warn(\"Subscriber should not throw an exception. subscriber: {}\", downstream, t);\n+            }\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            requireNonNull(subscription, \"subscription\");\n+            if (upstream != null) {\n+                subscription.cancel();\n+                return;\n+            }\n+            upstream = subscription;\n+            if (cancelCalled) {\n+                subscription.cancel();\n+                return;\n+            }\n+            subscription.request(pendingRequests);\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (n <= 0) {\n+                // Just abort the publisher so subscriber().onError(e) is called and resources are cleaned up.\n+                response.abort(new IllegalArgumentException(\n+                        \"n: \" + n + \" (expected: > 0, see Reactive Streams specification rule 3.9)\"));\n+                return;\n+            }\n+            if (executor.inEventLoop()) {\n+                request0(n);\n+            } else {\n+                executor.execute(() -> request0(n));\n+            }\n+        }\n+\n+        private void request0(long n) {\n+            final Subscription upstream = this.upstream;\n+            if (upstream == null) {\n+                pendingRequests = LongMath.saturatedAdd(n, pendingRequests);\n+            } else {\n+                upstream.request(n);\n+            }\n+        }\n+\n+        @Override\n+        public void cancel() {\n+            if (cancelCalled) {\n+                return;\n+            }\n+            cancelCalled = true;\n+            if (!notifyCancellation) {\n+                downstream = NoopSubscriber.get();\n+            }\n+            maybeCompleteHeaders(null);\n+            final Subscription upstream = this.upstream;\n+            if (upstream != null) {\n+                upstream.cancel();\n+            }\n+        }\n+\n+        @Override\n+        public void onNext(HttpObject httpObject) {\n+            if (httpObject instanceof ResponseHeaders) {\n+                final ResponseHeaders headers = (ResponseHeaders) httpObject;\n+                final HttpStatus status = headers.status();\n+                if (status.isInformational()) {\n+                    // Ignore informational headers\n+                    upstream.request(1);\n+                } else {\n+                    headersFuture.doComplete(headers);\n+                }\n+                return;\n+            }\n+\n+            if (httpObject instanceof HttpHeaders) {\n+                final HttpHeaders trailers = (HttpHeaders) httpObject;\n+                completeTrailers(trailers);\n+                return;\n+            }\n+\n+            final Subscriber<? super HttpData> downstream = this.downstream;\n+            assert downstream != null;\n+            assert httpObject instanceof HttpData;\n+            final HttpData data = (HttpData) httpObject;\n+            wroteAny = true;\n+            downstream.onNext(data);\n+        }\n+\n+        /**\n+         * Completes the specified trailers.\n+         */\n+        private void completeTrailers(HttpHeaders trailers) {\n+            HeadersFuture<HttpHeaders> trailersFuture = DefaultSplitHttpResponse.this.trailersFuture;\n+            if (trailersFuture != null) {\n+                trailersFuture.doComplete(trailers);\n+                return;\n+            }\n+\n+            trailersFuture = new HeadersFuture<>();\n+            if (trailersFutureUpdater.compareAndSet(DefaultSplitHttpResponse.this, null, trailersFuture)) {\n+                trailersFuture.doComplete(trailers);\n+            } else {\n+                DefaultSplitHttpResponse.this.trailersFuture.doComplete(trailers);\n+            }\n+        }\n+\n+        @Override\n+        public void onError(Throwable cause) {\n+            maybeCompleteHeaders(cause);\n+            final Subscriber<? super HttpData> downstream = this.downstream;\n+            if (downstream == null) {\n+                this.cause = cause;\n+            } else {\n+                downstream.onError(cause);\n+                if (cause instanceof CancelledSubscriptionException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU0ODUwNg=="}, "originalCommit": {"oid": "a0168fed0656db0477de77679f64adb69499d0e3"}, "originalPosition": 301}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzQyMjk2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponse.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoyNTo1MFrOHvjgTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoyNTo1MFrOHvjgTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYyNjgzMA==", "bodyText": "I'm not sure we need to accept SubscriptionOption here. A user will have to specify them when retrieving the response body via SplitHttpResponse.body(). Otherwise, a user will have to specify the same option twice.\nWe could subscribe to HttpResponse with both SubscriptionOptions enabled internally, and then emulate the desired behavior based on what's specified in body.subscribe(), e.g.\n\nConvert off-heap HttpData into heap HttpData if WITH_POOLED_OBJECTS option is off.\nPropagate CancelledSubscriptionException to onError() only when NOTIFY_CANCELLATION option is on.", "url": "https://github.com/line/armeria/pull/3038#discussion_r519626830", "createdAt": "2020-11-09T08:25:50Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponse.java", "diffHunk": "@@ -548,4 +550,63 @@ default HttpResponseDuplicator toDuplicator(EventExecutor executor, long maxResp\n         requireNonNull(executor, \"executor\");\n         return new DefaultHttpResponseDuplicator(this, executor, maxResponseLength);\n     }\n+\n+    /**\n+     * Returns a new {@link SplitHttpResponse} which splits a stream of {@link HttpObject}s into\n+     * {@link HttpHeaders} and {@link HttpData}.\n+     * {@link SplitHttpResponse#headers()} will be\n+     * completed before publishing the first {@link HttpData}.\n+     * {@link SplitHttpResponse#trailers()} might not complete until the entire response body is consumed\n+     * completely.\n+     */\n+    @CheckReturnValue\n+    default SplitHttpResponse split() {\n+        return split(defaultSubscriberExecutor());\n+    }\n+\n+    /**\n+     * Returns a new {@link SplitHttpResponse} which splits a stream of {@link HttpObject}s into\n+     * {@link HttpHeaders} and {@link HttpData}.\n+     * {@link SplitHttpResponse#headers()} will be completed before publishing the first {@link HttpData}.\n+     * {@link SplitHttpResponse#trailers()} might not complete until the entire response body is consumed\n+     * completely.\n+     *\n+     * <p>(Advanced users only) If you want to get pooled objects from {@link SplitHttpResponse#body()},\n+     * you should call this method with {@link SubscriptionOption#WITH_POOLED_OBJECTS}.\n+     * Note that if you specify {@link SubscriptionOption}s when subscribing to\n+     * {@link SplitHttpResponse#body()}, {@link UnsupportedOperationException} will be raised.\n+     */\n+    @CheckReturnValue\n+    default SplitHttpResponse split(SubscriptionOption... options) {\n+        return new DefaultSplitHttpResponse(this, defaultSubscriberExecutor(), options);\n+    }\n+\n+    /**\n+     * Returns a new {@link SplitHttpResponse} which splits a stream of {@link HttpObject}s into\n+     * {@link HttpHeaders} and {@link HttpData}.\n+     * {@link SplitHttpResponse#headers()} will be completed before publishing the first {@link HttpData}.\n+     * {@link SplitHttpResponse#trailers()} might not complete until the entire response body is consumed\n+     * completely.\n+     */\n+    @CheckReturnValue\n+    default SplitHttpResponse split(EventExecutor executor) {\n+        return new DefaultSplitHttpResponse(this, executor);\n+    }\n+\n+    /**\n+     * Returns a new {@link SplitHttpResponse} which splits a stream of {@link HttpObject}s into\n+     * {@link HttpHeaders} and {@link HttpData}.\n+     * {@link SplitHttpResponse#headers()} will be completed before publishing the first {@link HttpData}.\n+     * {@link SplitHttpResponse#trailers()} might not complete until the entire response body is consumed\n+     * completely.\n+     *\n+     * <p>(Advanced users only) If you want to get pooled objects from {@link SplitHttpResponse#body()},\n+     * you should call this method with {@link SubscriptionOption#WITH_POOLED_OBJECTS}.\n+     * Note that if you specify {@link SubscriptionOption}s when subscribing to\n+     * {@link SplitHttpResponse#body()}, {@link UnsupportedOperationException} will be raised.\n+     */\n+    @CheckReturnValue\n+    default SplitHttpResponse split(EventExecutor executor, SubscriptionOption... options) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdb9bb7ee3c5fa64880b279c81e2a4445dde5ca6"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1858, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}