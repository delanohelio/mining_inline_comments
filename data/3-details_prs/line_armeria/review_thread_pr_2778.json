{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MzUzMTA4", "number": 2778, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMToxNTo1MVrOEC6nPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMToxNTo1MVrOEC6nPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDkyOTI0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/server/ServerMaxConnectionAgeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMToxNTo1MVrOGfqdCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMToxNTo1MVrOGfqdCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg1NDYwMg==", "bodyText": "A space before :", "url": "https://github.com/line/armeria/pull/2778#discussion_r435854602", "createdAt": "2020-06-05T11:15:51Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/ServerMaxConnectionAgeTest.java", "diffHunk": "@@ -115,25 +115,48 @@ public void connectionClosed(SessionProtocol protocol, InetSocketAddress remoteA\n \n     @Test\n     void http1MaxConnectionAge() throws InterruptedException {\n-        final AtomicInteger oldClosed = new AtomicInteger();\n-        final WebClient client = newWebClient(server.uri(SessionProtocol.H1C));\n+        final Stopwatch stopwatch = Stopwatch.createUnstarted();\n+        final List<Long> elapsedTimes = new ArrayList<>();\n+        final int maxClosedConnection = 5;\n+        final ConnectionPoolListener connectionPoolListener = new ConnectionPoolListener() {\n+            @Override\n+            public void connectionOpen(SessionProtocol protocol, InetSocketAddress remoteAddr,\n+                                       InetSocketAddress localAddr, AttributeMap attrs) throws Exception {\n+                opened.incrementAndGet();\n+            }\n \n-        final Stopwatch stopwatch = Stopwatch.createStarted();\n-        while (closed.get() < 5) {\n-            final AggregatedHttpResponse agg = client.get(\"/\").aggregate().join();\n-            assertThat(agg.status()).isEqualTo(OK);\n+            @Override\n+            public void connectionClosed(SessionProtocol protocol, InetSocketAddress remoteAddr,\n+                                         InetSocketAddress localAddr, AttributeMap attrs) throws Exception {\n+                final int numClosed = closed.incrementAndGet();\n+                if (numClosed == 1) {\n+                    stopwatch.start();\n+                } else if (numClosed <= maxClosedConnection) {\n+                    elapsedTimes.add(stopwatch.elapsed().toMillis());\n+                    stopwatch.reset().start();\n+                }\n+            }\n+        };\n \n+        final ClientFactory clientFactory = ClientFactory.builder()\n+                                                         .connectionPoolListener(connectionPoolListener)\n+                                                         .idleTimeoutMillis(0)\n+                                                         .build();\n+        final WebClient client = WebClient.builder(server.uri(SessionProtocol.H1C))\n+                                          .factory(clientFactory)\n+                                          .responseTimeoutMillis(0)\n+                                          .build();\n+\n+        while (closed.get() < maxClosedConnection) {\n+            assertThat(client.get(\"/\").aggregate().join().status()).isEqualTo(OK);\n             final int closed = this.closed.get();\n             assertThat(opened).hasValueBetween(closed, closed + 1);\n+        }\n \n-            // When a connection is disconnected, check the time from the previous disconnection.\n-            if (this.closed.get() > oldClosed.get()) {\n-                assertThat(stopwatch.elapsed().toMillis())\n-                        .isCloseTo(MAX_CONNECTION_AGE, withinPercentage(35));\n-                oldClosed.set(this.closed.get());\n-                stopwatch.reset().start();\n-            }\n+        for (long elapsed: elapsedTimes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e563f8da8594fa62b76c36a0fec2da4bf2c5e63"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2321, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}