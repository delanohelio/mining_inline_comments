{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3ODY5NzM3", "number": 2420, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMDoxMDoyNVrODbhFRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNTozNzoxOVrODc3MMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTgwMTY2OnYy", "diffSide": "RIGHT", "path": "core/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMDoxMDoyNVrOFjC9FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNTozMjozMVrOFjf0sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5Mjg4NQ==", "bodyText": "I considered separating the netty modules we expose in our API and the ones we don't, but I found almost all actually do end up in the API, even netty-codec-http2 because of Http2Exception so just stuff them all into API", "url": "https://github.com/line/armeria/pull/2420#discussion_r372292885", "createdAt": "2020-01-29T10:10:25Z", "author": {"login": "anuraaga"}, "path": "core/build.gradle", "diffHunk": "@@ -85,52 +85,49 @@ dependencies {\n         \"java${version}TestImplementation\" files(sourceSets.test.output.classesDirs) { builtBy compileTestJava }\n     }\n \n+    // Logging decorators expose slf4j in API\n+    api 'org.slf4j:slf4j-api'\n+\n     // cglib\n-    testCompile 'cglib:cglib'\n+    testImplementation 'cglib:cglib'\n \n     // Caffeine\n-    compile 'com.github.ben-manes.caffeine:caffeine'\n+    implementation 'com.github.ben-manes.caffeine:caffeine'\n \n     // Jackson\n     [ 'jackson-core', 'jackson-annotations', 'jackson-databind' ].each {\n-        compile \"com.fasterxml.jackson.core:$it\"\n+        api \"com.fasterxml.jackson.core:$it\"\n     }\n \n     // Micrometer and other metric-related stuff\n-    compile 'io.micrometer:micrometer-core'\n-    compile('io.micrometer:micrometer-registry-prometheus') {\n-        ext.optional = true\n-    }\n-    compile('io.dropwizard.metrics:metrics-core') {\n-        ext.optional = true\n-    }\n-    compile('io.prometheus:simpleclient_common') {\n-        ext.optional = true\n-    }\n+    api 'io.micrometer:micrometer-core'\n+    optionalApi 'io.micrometer:micrometer-registry-prometheus'\n+    optionalApi 'io.dropwizard.metrics:metrics-core'\n+    optionalApi 'io.prometheus:simpleclient_common'\n \n     // Netty\n     [ 'netty-transport', 'netty-codec-http2', 'netty-codec-haproxy', 'netty-resolver-dns' ].each {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0660c2f65e71c34f936816f814831d1affaf0ecd"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2NTg3Mg==", "bodyText": "But something to think about", "url": "https://github.com/line/armeria/pull/2420#discussion_r372765872", "createdAt": "2020-01-30T05:32:31Z", "author": {"login": "anuraaga"}, "path": "core/build.gradle", "diffHunk": "@@ -85,52 +85,49 @@ dependencies {\n         \"java${version}TestImplementation\" files(sourceSets.test.output.classesDirs) { builtBy compileTestJava }\n     }\n \n+    // Logging decorators expose slf4j in API\n+    api 'org.slf4j:slf4j-api'\n+\n     // cglib\n-    testCompile 'cglib:cglib'\n+    testImplementation 'cglib:cglib'\n \n     // Caffeine\n-    compile 'com.github.ben-manes.caffeine:caffeine'\n+    implementation 'com.github.ben-manes.caffeine:caffeine'\n \n     // Jackson\n     [ 'jackson-core', 'jackson-annotations', 'jackson-databind' ].each {\n-        compile \"com.fasterxml.jackson.core:$it\"\n+        api \"com.fasterxml.jackson.core:$it\"\n     }\n \n     // Micrometer and other metric-related stuff\n-    compile 'io.micrometer:micrometer-core'\n-    compile('io.micrometer:micrometer-registry-prometheus') {\n-        ext.optional = true\n-    }\n-    compile('io.dropwizard.metrics:metrics-core') {\n-        ext.optional = true\n-    }\n-    compile('io.prometheus:simpleclient_common') {\n-        ext.optional = true\n-    }\n+    api 'io.micrometer:micrometer-core'\n+    optionalApi 'io.micrometer:micrometer-registry-prometheus'\n+    optionalApi 'io.dropwizard.metrics:metrics-core'\n+    optionalApi 'io.prometheus:simpleclient_common'\n \n     // Netty\n     [ 'netty-transport', 'netty-codec-http2', 'netty-codec-haproxy', 'netty-resolver-dns' ].each {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5Mjg4NQ=="}, "originalCommit": {"oid": "0660c2f65e71c34f936816f814831d1affaf0ecd"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTgyNTIzOnYy", "diffSide": "RIGHT", "path": "spring/boot-autoconfigure/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMDoxNzoyOVrOFjDLkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMDoxNzoyOVrOFjDLkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5NjU5Mw==", "bodyText": "FYI shadedTest classpath used to contain validation-api while test didn't because it is compileOnly. Now neither do.", "url": "https://github.com/line/armeria/pull/2420#discussion_r372296593", "createdAt": "2020-01-29T10:17:29Z", "author": {"login": "anuraaga"}, "path": "spring/boot-autoconfigure/build.gradle", "diffHunk": "@@ -1,21 +1,19 @@\n dependencies {\n-    compile(project(':thrift')) {\n-        ext.optional = true // To let a user choose between thrift and thrift0.9.\n-    }\n-    compile project(':logback')\n+    // To let a user choose between thrift and thrift0.9.\n+    compileOnly project(':thrift')\n+    implementation project(':logback')\n \n-    compile('io.micrometer:micrometer-registry-prometheus') {\n-        ext.optional = true\n-    }\n-    compile('io.dropwizard.metrics:metrics-json') {\n-        ext.optional = true\n-    }\n-    compile 'javax.inject:javax.inject'\n+    // TODO(anuraaga): Consider removing these since this module does not have related functionality.\n+    optionalApi 'io.micrometer:micrometer-registry-prometheus'\n+    optionalApi 'io.dropwizard.metrics:metrics-json'\n+\n+    api 'javax.inject:javax.inject'\n     compileOnly 'javax.validation:validation-api'\n-    compile 'org.springframework.boot:spring-boot-starter'\n+    api 'org.springframework.boot:spring-boot-starter'\n     annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'\n \n-    testCompile project(':grpc')\n-    testCompile 'org.springframework.boot:spring-boot-starter-actuator'\n-    testCompile 'org.springframework.boot:spring-boot-starter-test'\n+    testImplementation project(':grpc')\n+    testImplementation project(':thrift')\n+    testImplementation 'org.springframework.boot:spring-boot-starter-actuator'\n+    testImplementation 'org.springframework.boot:spring-boot-starter-test'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0660c2f65e71c34f936816f814831d1affaf0ecd"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTgyOTM1OnYy", "diffSide": "RIGHT", "path": "testing-internal/src/main/java/com/linecorp/armeria/testing/internal/webapp/WebAppContainerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMDoxODo0MlrOFjDN7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDoyNTo0MlrOFjmDvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5NzE5Nw==", "bodyText": "Found this \"bug\" while playing with removing extraneous netty from compile classpath (though didn't end up actually doing that)", "url": "https://github.com/line/armeria/pull/2420#discussion_r372297197", "createdAt": "2020-01-29T10:18:42Z", "author": {"login": "anuraaga"}, "path": "testing-internal/src/main/java/com/linecorp/armeria/testing/internal/webapp/WebAppContainerTest.java", "diffHunk": "@@ -42,12 +42,11 @@\n import com.linecorp.armeria.client.ClientFactory;\n import com.linecorp.armeria.client.WebClient;\n import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpHeaderNames;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0660c2f65e71c34f936816f814831d1affaf0ecd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg2ODAzMQ==", "bodyText": "Thanks for fixing it. \ud83d\ude47\u200d\u2642\ufe0f", "url": "https://github.com/line/armeria/pull/2420#discussion_r372868031", "createdAt": "2020-01-30T10:25:42Z", "author": {"login": "trustin"}, "path": "testing-internal/src/main/java/com/linecorp/armeria/testing/internal/webapp/WebAppContainerTest.java", "diffHunk": "@@ -42,12 +42,11 @@\n import com.linecorp.armeria.client.ClientFactory;\n import com.linecorp.armeria.client.WebClient;\n import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpHeaderNames;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5NzE5Nw=="}, "originalCommit": {"oid": "0660c2f65e71c34f936816f814831d1affaf0ecd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDY1NzY0OnYy", "diffSide": "RIGHT", "path": "gradle/scripts/lib/common-dependencies.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMzozMjowNFrOFjeisg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNToyNjoxNFrOFjfweQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NDg4Mg==", "bodyText": "Shouldn't we call evaluationDependsOn(...) from the outside of afterEvaluate { .. }?", "url": "https://github.com/line/armeria/pull/2420#discussion_r372744882", "createdAt": "2020-01-30T03:32:04Z", "author": {"login": "trustin"}, "path": "gradle/scripts/lib/common-dependencies.gradle", "diffHunk": "@@ -25,45 +25,96 @@ rootProject.ext {\n     }\n }\n \n-allprojects {\n-    apply plugin: 'io.spring.dependency-management'\n-\n-    dependencyManagement {\n-        generatedPomCustomization {\n-            enabled = false\n+def managedDependencyVersions = [:]\n+def managedDependencyExclusions = [:].withDefault { [] }\n+rootProject.ext.dependenciesYaml.forEach { String key, value ->\n+    if (key == 'boms') {\n+        value.each {\n+            def parsed = it.split(':')\n+            managedDependencyVersions[\"${parsed[0]}:${parsed[1]}\"] = parsed[2]\n         }\n-\n-        imports {\n-            if (rootProject.ext.dependenciesYaml.containsKey('boms')) {\n-                dependenciesYaml['boms'].each {\n-                    mavenBom \"${it}\"\n+    } else {\n+        def groupId = key\n+        def artifact = value as Map\n+        artifact.forEach { String artifactId, Map props ->\n+            if (props.containsKey('version')) {\n+                managedDependencyVersions[\"${groupId}:${artifactId}\"] = \"${props['version']}\"\n+            }\n+            if (props.containsKey('exclusions')) {\n+                props['exclusions'].each { String spec ->\n+                    def parsed = spec.split(':')\n+                    managedDependencyExclusions[\"${groupId}:${artifactId}\"].add([\n+                            group: parsed[0],\n+                            module: parsed[1],\n+                    ])\n                 }\n             }\n         }\n+    }\n+}\n+\n+configure(projectsWithFlags('dependencies')) {\n+    apply plugin: 'java-platform'\n+\n+    javaPlatform {\n+        allowDependencies()\n+    }\n+\n+    dependencies {\n+        if (rootProject.ext.dependenciesYaml.containsKey('boms')) {\n+            dependenciesYaml['boms'].each {\n+                api platform(\"${it}\")\n+            }\n+        }\n \n-        dependencies {\n+        constraints {\n             rootProject.ext.dependenciesYaml.forEach { String key, value ->\n                 if (key != 'boms') {\n                     def groupId = key\n                     def artifact = value as Map\n                     artifact.forEach { String artifactId, Map props ->\n                         if (props.containsKey('version')) {\n-                            dependency(\"${groupId}:${artifactId}:${props['version']}\") {\n-                                if (props.containsKey('exclusions')) {\n-                                    props['exclusions'].each { String spec ->\n-                                        exclude spec\n-                                    }\n-                                }\n-                            }\n+                            api \"${groupId}:${artifactId}:${props['version']}\"\n                         }\n                     }\n                 }\n             }\n         }\n     }\n+}\n \n+allprojects {\n     ext {\n-        managedVersions = dependencyManagement.managedVersions\n+        managedVersions = managedDependencyVersions\n+    }\n+}\n+\n+def dependencyProjects = projectsWithFlags('dependencies')\n+if (!dependencyProjects.isEmpty()) {\n+    def dependencyProject = dependencyProjects[0]\n+    configure(projectsWithFlags('java')) {\n+        // We need to use afterEvaluate because there is no way to guarantee configuration.canBeResolved and\n+        // canBeConsumed are set otherwise.\n+        afterEvaluate {\n+            evaluationDependsOn(dependencyProject.path)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1460fd3551824903a41bf09924ade7ef7bc3a68f"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2NDc5Mw==", "bodyText": "Doh yeah", "url": "https://github.com/line/armeria/pull/2420#discussion_r372764793", "createdAt": "2020-01-30T05:26:14Z", "author": {"login": "anuraaga"}, "path": "gradle/scripts/lib/common-dependencies.gradle", "diffHunk": "@@ -25,45 +25,96 @@ rootProject.ext {\n     }\n }\n \n-allprojects {\n-    apply plugin: 'io.spring.dependency-management'\n-\n-    dependencyManagement {\n-        generatedPomCustomization {\n-            enabled = false\n+def managedDependencyVersions = [:]\n+def managedDependencyExclusions = [:].withDefault { [] }\n+rootProject.ext.dependenciesYaml.forEach { String key, value ->\n+    if (key == 'boms') {\n+        value.each {\n+            def parsed = it.split(':')\n+            managedDependencyVersions[\"${parsed[0]}:${parsed[1]}\"] = parsed[2]\n         }\n-\n-        imports {\n-            if (rootProject.ext.dependenciesYaml.containsKey('boms')) {\n-                dependenciesYaml['boms'].each {\n-                    mavenBom \"${it}\"\n+    } else {\n+        def groupId = key\n+        def artifact = value as Map\n+        artifact.forEach { String artifactId, Map props ->\n+            if (props.containsKey('version')) {\n+                managedDependencyVersions[\"${groupId}:${artifactId}\"] = \"${props['version']}\"\n+            }\n+            if (props.containsKey('exclusions')) {\n+                props['exclusions'].each { String spec ->\n+                    def parsed = spec.split(':')\n+                    managedDependencyExclusions[\"${groupId}:${artifactId}\"].add([\n+                            group: parsed[0],\n+                            module: parsed[1],\n+                    ])\n                 }\n             }\n         }\n+    }\n+}\n+\n+configure(projectsWithFlags('dependencies')) {\n+    apply plugin: 'java-platform'\n+\n+    javaPlatform {\n+        allowDependencies()\n+    }\n+\n+    dependencies {\n+        if (rootProject.ext.dependenciesYaml.containsKey('boms')) {\n+            dependenciesYaml['boms'].each {\n+                api platform(\"${it}\")\n+            }\n+        }\n \n-        dependencies {\n+        constraints {\n             rootProject.ext.dependenciesYaml.forEach { String key, value ->\n                 if (key != 'boms') {\n                     def groupId = key\n                     def artifact = value as Map\n                     artifact.forEach { String artifactId, Map props ->\n                         if (props.containsKey('version')) {\n-                            dependency(\"${groupId}:${artifactId}:${props['version']}\") {\n-                                if (props.containsKey('exclusions')) {\n-                                    props['exclusions'].each { String spec ->\n-                                        exclude spec\n-                                    }\n-                                }\n-                            }\n+                            api \"${groupId}:${artifactId}:${props['version']}\"\n                         }\n                     }\n                 }\n             }\n         }\n     }\n+}\n \n+allprojects {\n     ext {\n-        managedVersions = dependencyManagement.managedVersions\n+        managedVersions = managedDependencyVersions\n+    }\n+}\n+\n+def dependencyProjects = projectsWithFlags('dependencies')\n+if (!dependencyProjects.isEmpty()) {\n+    def dependencyProject = dependencyProjects[0]\n+    configure(projectsWithFlags('java')) {\n+        // We need to use afterEvaluate because there is no way to guarantee configuration.canBeResolved and\n+        // canBeConsumed are set otherwise.\n+        afterEvaluate {\n+            evaluationDependsOn(dependencyProject.path)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NDg4Mg=="}, "originalCommit": {"oid": "1460fd3551824903a41bf09924ade7ef7bc3a68f"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDY2MTAwOnYy", "diffSide": "RIGHT", "path": "gradle/scripts/lib/java-publish.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMzozNDozNlrOFjekuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMzozNDozNlrOFjekuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NTQwMA==", "bodyText": "nit: space after { and before ->", "url": "https://github.com/line/armeria/pull/2420#discussion_r372745400", "createdAt": "2020-01-30T03:34:36Z", "author": {"login": "trustin"}, "path": "gradle/scripts/lib/java-publish.gradle", "diffHunk": "@@ -2,168 +2,101 @@ configure(projectsWithFlags('publish', 'java')) {\n     publishing {\n         publications {\n             jar(MavenPublication) {\n-                def currentArtifactId = project.ext.artifactId\n-                artifactId currentArtifactId\n+                from components.java\n \n-                // Generate the POM.\n-                pom.withXml {\n-                    asNode().children().last() + {\n-                        resolveStrategy = Closure.DELEGATE_FIRST\n+                // We don't publish Gradle metadata yet so don't need to worry about these variants.\n+                suppressPomMetadataWarningsFor('optionalApiElements')\n+                suppressPomMetadataWarningsFor('optionalRuntimeElements')\n \n-                        // Write the elements required by OSSRH.\n-                        name \"${project.ext.projectName} (${currentArtifactId})\"\n-                        description \"${project.ext.projectDescription} (${currentArtifactId})\"\n-                        url \"${project.ext.projectUrl}\"\n-                        inceptionYear \"${project.ext.inceptionYear}\"\n-\n-                        licenses {\n-                            license {\n-                                name \"${project.ext.licenseName}\"\n-                                url \"${project.ext.licenseUrl}\"\n-                                distribution 'repo'\n-                            }\n-                        }\n+                // Publish resolved versions\n+                versionMapping {\n+                    allVariants {\n+                        fromResolutionResult()\n+                    }\n+                }\n \n-                        developers {\n-                            developer {\n-                                name \"${project.ext.authorName}\"\n-                                email \"${project.ext.authorEmail}\"\n-                                url \"${project.ext.authorUrl}\"\n-                            }\n-                        }\n+                // Replace published jar with shaded when available. We manually create shading tasks instead of\n+                // applying the shadow plugin itself so need to do it ourselves.\n+                def jarOverrideFile = null\n+                def jarOverrideTask = null\n+                if (tasks.findByName('trimShadedJar')) {\n+                    jarOverrideFile = tasks.trimShadedJar.outJarFiles.find() as File\n+                    jarOverrideTask = tasks.trimShadedJar\n+                } else if (tasks.findByName('shadedJar')) {\n+                    jarOverrideFile = tasks.shadedJar.archivePath\n+                    jarOverrideTask = tasks.shadedJar\n+                }\n+                if (jarOverrideFile != null) {\n+                    // For some reason this needs to be in afterEvaluate or dependencies are lost from the POM.\n+                    afterEvaluate {\n+                        def unshaded = artifacts.find { it.classifier == null && it.extension == 'jar' }\n+                        artifacts.remove(unshaded)\n+                        artifact(jarOverrideFile).builtBy(jarOverrideTask)\n+                    }\n+                }\n \n-                        scm {\n-                            url \"${project.ext.scmUrl}\"\n-                            connection \"${project.ext.scmConnection}\"\n-                            developerConnection \"${project.ext.scmDeveloperConnection}\"\n+                // Clean up the POM.\n+                pom {\n+                    withXml {\n+                        // We publish resolved versions so don't need to publish our dependencyManagement too.\n+                        def dependencyManagement = asNode().get('dependencyManagement')\n+                        if (dependencyManagement != null) {\n+                            asNode().remove(dependencyManagement)\n                         }\n-\n-                        dependencies {\n-                            def writeExclusionRules = { Set<ExcludeRule> excludeRules ->\n-                                if (!excludeRules.empty) {\n-                                    exclusions {\n-                                        excludeRules.each { rule ->\n-                                            exclusion {\n-                                                groupId rule.group\n-                                                artifactId rule.module\n-                                            }\n-                                        }\n-                                    }\n-                                }\n-                            }\n-\n-                            // Write compile-time project dependencies.\n-                            configurations.compile.dependencies.findAll {\n-                                it instanceof ProjectDependency\n-                            }.collect {\n-                                (ProjectDependency) it\n-                            }.toSorted({\n-                                \"${it.group}:${it.dependencyProject.ext.artifactId}\"\n-                            }).each { dep ->\n-                                dependency {\n-                                    groupId dep.group\n-                                    artifactId dep.dependencyProject.ext.artifactId\n-                                    version dep.version ?: dep.dependencyProject.version\n-                                    if (dep.hasProperty('optional') && dep.optional) {\n-                                        optional true\n-                                    }\n-                                    writeExclusionRules(dep.excludeRules)\n-                                }\n-                            }\n-\n-                            // Write runtime project dependencies.\n-                            configurations.runtime.dependencies.findAll {\n-                                it instanceof ProjectDependency &&\n-                                !configurations.compile.dependencies.contains(it)\n-                            }.collect {\n-                                (ProjectDependency) it\n-                            }.toSorted({\n-                                \"${it.group}:${it.dependencyProject.ext.artifactId}\"\n-                            }).each { dep ->\n-                                dependency {\n-                                    groupId dep.group\n-                                    artifactId dep.dependencyProject.ext.artifactId\n-                                    version dep.version ?: dep.dependencyProject.version\n-                                    scope 'runtime'\n-                                    if (dep.hasProperty('optional') && dep.optional) {\n-                                        optional true\n-                                    }\n-                                    writeExclusionRules(dep.excludeRules)\n-                                }\n-                            }\n-\n-                            // Write module dependencies.\n-                            Set<ResolvedDependency> compileDeps =\n-                                    configurations.compile.resolvedConfiguration.firstLevelModuleDependencies\n-                            Set<ResolvedDependency> runtimeDeps =\n-                                    configurations.runtime.resolvedConfiguration.firstLevelModuleDependencies\n-                            Set<Dependency> unresolvedDeps =\n-                                    configurations.runtime.dependencies + configurations.compile.dependencies\n-\n-                            runtimeDeps.toSorted({ \"${it.moduleGroup}:${it.moduleName}\" }).each { dep ->\n-                                def unresolvedDep = unresolvedDeps.find {\n-                                    it.group == dep.moduleGroup && it.name == dep.moduleName\n-                                }\n-\n-                                if (unresolvedDep instanceof ExternalModuleDependency) {\n-                                    if (project.hasFlags('relocate') && project.ext.relocations.find({\n-                                        it.name == \"${dep.moduleGroup}:${dep.moduleName}\"\n-                                    })) {\n-                                        // Shaded dependency\n-                                        return\n-                                    }\n-\n-                                    dependency {\n-                                        groupId dep.moduleGroup\n-                                        artifactId dep.moduleName\n-                                        version dep.moduleVersion\n-\n-                                        // Write classifier if exists.\n-                                        if (dep.moduleArtifacts.find()?.classifier) {\n-                                            classifier dep.moduleArtifacts.find().classifier\n-                                        }\n-\n-                                        if (!compileDeps.contains(dep)) {\n-                                            scope 'runtime'\n-                                        }\n-\n-                                        if (unresolvedDep.hasProperty('optional') && unresolvedDep.optional) {\n-                                            optional true\n-                                        }\n-\n-                                        writeExclusionRules(unresolvedDep.excludeRules)\n-                                    }\n-                                }\n+                        \n+                        // Strip out shaded dependencies. We manually create shading tasks instead of applying\n+                        // the shadow plugin itself so need to do it ourselves.\n+                        def dependencies = asNode().get('dependencies')[0]\n+                        def shaded = dependencies.findAll {\n+                            def groupId = it.get('groupId')[0]\n+                            def artifactId = it.get('artifactId')[0]\n+                            return project.ext.relocations.find {\n+                                it.name == \"${groupId.text()}:${artifactId.text()}\"\n                             }\n                         }\n+                        shaded.each { dependencies.remove(it) }\n                     }\n                 }\n+            }\n+        }\n+    }\n+}\n \n-                // Find the main JAR and the task that generates it.\n-                File mainJarFile\n-                Task mainJarTask\n-                if (tasks.findByName('trimShadedJar')) {\n-                    mainJarFile = tasks.trimShadedJar.outJarFiles.find() as File\n-                    mainJarTask = tasks.trimShadedJar\n-                } else if (tasks.findByName('shadedJar')) {\n-                    mainJarFile = tasks.shadedJar.archivePath\n-                    mainJarTask = tasks.shadedJar\n-                } else {\n-                    mainJarFile = tasks.jar.archivePath\n-                    mainJarTask = tasks.jar\n+configure(projectsWithFlags('publish')) {\n+    publishing {\n+        publications.each {publication->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1460fd3551824903a41bf09924ade7ef7bc3a68f"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDY2NDYxOnYy", "diffSide": "LEFT", "path": "gradle/scripts/lib/java.gradle", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMzozNzo0MlrOFjemuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDoyNjozNFrOFjmFlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NTkxNQ==", "bodyText": "Do we now always generate source/javadoc JARs?", "url": "https://github.com/line/armeria/pull/2420#discussion_r372745915", "createdAt": "2020-01-30T03:37:42Z", "author": {"login": "trustin"}, "path": "gradle/scripts/lib/java.gradle", "diffHunk": "@@ -48,45 +59,12 @@ configure(projectsWithFlags('java')) {\n                     def useIncrementalCompilation = deps.size() == 0\n                     options.incremental = useIncrementalCompilation\n                     logger.info(\"${useIncrementalCompilation ? 'Enabling' : 'Disabling'} \" +\n-                                \"incremental compilation for '${task.path}'\")\n+                            \"incremental compilation for '${task.path}'\")\n                 }\n             }\n         }\n     }\n \n-    // Generate a source JAR.\n-    task sourceJar(type: Jar) {\n-        classifier = 'sources'\n-        from sourceSets.main.allSource\n-    }\n-\n-    // Generate a javadoc JAR.\n-    task javadocJar(type: Jar, dependsOn: tasks.javadoc) {\n-        classifier = 'javadoc'\n-        from javadoc.destinationDir\n-    }\n-\n-    // Generate source/javadoc JARs only when publishing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1460fd3551824903a41bf09924ade7ef7bc3a68f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2MjgxMg==", "bodyText": "It's always generated for assemble (and so build). I find this more idiomatic and not a huge problem - it only affects a curent target so e.g., :grpc:assemble only builds javadoc for grpc, not core. And IntelliJ Gradle Runner doesn't build javadoc. I was a bit surprised that our CI wasn't building javadoc, and I think it's good to verify javadoc builds in CI too.\nBut not hard to restore the skipping behavior if you still prefer that let me know.", "url": "https://github.com/line/armeria/pull/2420#discussion_r372762812", "createdAt": "2020-01-30T05:15:12Z", "author": {"login": "anuraaga"}, "path": "gradle/scripts/lib/java.gradle", "diffHunk": "@@ -48,45 +59,12 @@ configure(projectsWithFlags('java')) {\n                     def useIncrementalCompilation = deps.size() == 0\n                     options.incremental = useIncrementalCompilation\n                     logger.info(\"${useIncrementalCompilation ? 'Enabling' : 'Disabling'} \" +\n-                                \"incremental compilation for '${task.path}'\")\n+                            \"incremental compilation for '${task.path}'\")\n                 }\n             }\n         }\n     }\n \n-    // Generate a source JAR.\n-    task sourceJar(type: Jar) {\n-        classifier = 'sources'\n-        from sourceSets.main.allSource\n-    }\n-\n-    // Generate a javadoc JAR.\n-    task javadocJar(type: Jar, dependsOn: tasks.javadoc) {\n-        classifier = 'javadoc'\n-        from javadoc.destinationDir\n-    }\n-\n-    // Generate source/javadoc JARs only when publishing.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NTkxNQ=="}, "originalCommit": {"oid": "1460fd3551824903a41bf09924ade7ef7bc3a68f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg2ODUwMA==", "bodyText": "OK as it is.", "url": "https://github.com/line/armeria/pull/2420#discussion_r372868500", "createdAt": "2020-01-30T10:26:34Z", "author": {"login": "trustin"}, "path": "gradle/scripts/lib/java.gradle", "diffHunk": "@@ -48,45 +59,12 @@ configure(projectsWithFlags('java')) {\n                     def useIncrementalCompilation = deps.size() == 0\n                     options.incremental = useIncrementalCompilation\n                     logger.info(\"${useIncrementalCompilation ? 'Enabling' : 'Disabling'} \" +\n-                                \"incremental compilation for '${task.path}'\")\n+                            \"incremental compilation for '${task.path}'\")\n                 }\n             }\n         }\n     }\n \n-    // Generate a source JAR.\n-    task sourceJar(type: Jar) {\n-        classifier = 'sources'\n-        from sourceSets.main.allSource\n-    }\n-\n-    // Generate a javadoc JAR.\n-    task javadocJar(type: Jar, dependsOn: tasks.javadoc) {\n-        classifier = 'javadoc'\n-        from javadoc.destinationDir\n-    }\n-\n-    // Generate source/javadoc JARs only when publishing.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NTkxNQ=="}, "originalCommit": {"oid": "1460fd3551824903a41bf09924ade7ef7bc3a68f"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDY2NTMwOnYy", "diffSide": "RIGHT", "path": "settings.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMzozODoxOVrOFjenJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMzozODoxOVrOFjenJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NjAyMg==", "bodyText": "Thanks! \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2420#discussion_r372746022", "createdAt": "2020-01-30T03:38:19Z", "author": {"login": "trustin"}, "path": "settings.gradle", "diffHunk": "@@ -40,11 +40,14 @@ includeWithFlags ':it:server',                'java', 'relocate'\n includeWithFlags ':it:spring:boot-tomcat',    'java', 'relocate'\n includeWithFlags ':it:spring:boot-tomcat8.5', 'java', 'relocate'\n includeWithFlags ':testing-internal',         'java', 'relocate'\n-includeWithFlags ':thrift0.11',               'java', 'relocate'\n+includeWithFlags ':thrift0.12',               'java', 'relocate'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1460fd3551824903a41bf09924ade7ef7bc3a68f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDY2ODM4OnYy", "diffSide": "RIGHT", "path": "settings.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMzo0MToxMFrOFjepEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNToyNToxOVrOFjfvxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NjUxMg==", "bodyText": "Perhaps we could make this done in settings-flags.gradle and use the name and flag that's less likely to clash with user modules, e.g. dependency-management?", "url": "https://github.com/line/armeria/pull/2420#discussion_r372746512", "createdAt": "2020-01-30T03:41:10Z", "author": {"login": "trustin"}, "path": "settings.gradle", "diffHunk": "@@ -40,11 +40,14 @@ includeWithFlags ':it:server',                'java', 'relocate'\n includeWithFlags ':it:spring:boot-tomcat',    'java', 'relocate'\n includeWithFlags ':it:spring:boot-tomcat8.5', 'java', 'relocate'\n includeWithFlags ':testing-internal',         'java', 'relocate'\n-includeWithFlags ':thrift0.11',               'java', 'relocate'\n+includeWithFlags ':thrift0.12',               'java', 'relocate'\n \n // Unpublished non-Java projects\n includeWithFlags ':docs-client'\n \n+// Unpublished dependency management project to create a virtual platform.\n+includeWithFlags ':dependencies', 'dependencies'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1460fd3551824903a41bf09924ade7ef7bc3a68f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2NDYxNQ==", "bodyText": "Good idea!", "url": "https://github.com/line/armeria/pull/2420#discussion_r372764615", "createdAt": "2020-01-30T05:25:19Z", "author": {"login": "anuraaga"}, "path": "settings.gradle", "diffHunk": "@@ -40,11 +40,14 @@ includeWithFlags ':it:server',                'java', 'relocate'\n includeWithFlags ':it:spring:boot-tomcat',    'java', 'relocate'\n includeWithFlags ':it:spring:boot-tomcat8.5', 'java', 'relocate'\n includeWithFlags ':testing-internal',         'java', 'relocate'\n-includeWithFlags ':thrift0.11',               'java', 'relocate'\n+includeWithFlags ':thrift0.12',               'java', 'relocate'\n \n // Unpublished non-Java projects\n includeWithFlags ':docs-client'\n \n+// Unpublished dependency management project to create a virtual platform.\n+includeWithFlags ':dependencies', 'dependencies'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NjUxMg=="}, "originalCommit": {"oid": "1460fd3551824903a41bf09924ade7ef7bc3a68f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDc4MTY0OnYy", "diffSide": "RIGHT", "path": "saml/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNToxODozNFrOFjfrGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNToxODozNFrOFjfrGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2MzQxOQ==", "bodyText": "I was somewhat surprised to find this in our public API, but looking at it realized it is tedious if we wanted to separate. Something to think about.\nAlso, I use java-jwt too and it's probably a fine choice, but worth giving a look at other libraries too I guess, maybe https://github.com/google/tink/blob/master/docs/JAVA-HOWTO.md", "url": "https://github.com/line/armeria/pull/2420#discussion_r372763419", "createdAt": "2020-01-30T05:18:34Z", "author": {"login": "anuraaga"}, "path": "saml/build.gradle", "diffHunk": "@@ -1,12 +1,12 @@\n dependencies {\n-    compile 'com.auth0:java-jwt'\n-    compile 'net.shibboleth.utilities:java-support'\n-    compile 'org.opensaml:opensaml-core'\n-    compile 'org.opensaml:opensaml-saml-api'\n-    compile 'org.opensaml:opensaml-saml-impl'\n-    compile 'org.opensaml:opensaml-messaging-api'\n-    compile 'org.opensaml:opensaml-messaging-impl'\n-    compile 'org.opensaml:opensaml-soap-api'\n-    compile 'org.opensaml:opensaml-soap-impl'\n-    testCompile 'org.jsoup:jsoup'\n+    api 'com.auth0:java-jwt'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1460fd3551824903a41bf09924ade7ef7bc3a68f"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTIxOTMwOnYy", "diffSide": "RIGHT", "path": "gradle/scripts/lib/common-dependencies.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMjo0MTowOFrOFkKN7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMjo0MTowOFrOFkKN7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2MDQ2MA==", "bodyText": "This is nice. Good to know whenObjectAdded", "url": "https://github.com/line/armeria/pull/2420#discussion_r373460460", "createdAt": "2020-01-31T12:41:08Z", "author": {"login": "trustin"}, "path": "gradle/scripts/lib/common-dependencies.gradle", "diffHunk": "@@ -95,6 +95,16 @@ configure(dependencyManagementProject) {\n configure(projectsWithFlags('java')) {\n     evaluationDependsOn(dependencyManagementProject.path)\n \n+    configurations.configureEach { configuration ->\n+        configuration.dependencies.whenObjectAdded { dep ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34794a4571b4cd50a9d1aa4ea5802bc20edc29f3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTkwOTYzOnYy", "diffSide": "RIGHT", "path": "jetty/build.gradle", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNTozNzoxOVrOFlIlrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNjozNzoxM1rOFlJZcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4MjM0OA==", "bodyText": "I wonder why this is not testImplementation?", "url": "https://github.com/line/armeria/pull/2420#discussion_r374482348", "createdAt": "2020-02-04T05:37:19Z", "author": {"login": "ikhoon"}, "path": "jetty/build.gradle", "diffHunk": "@@ -1,7 +1,7 @@\n dependencies {\n     // Jetty\n-    compile 'org.eclipse.jetty:jetty-server'\n+    api 'org.eclipse.jetty:jetty-server'\n     ['jetty-webapp', 'jetty-annotations', 'apache-jsp', 'apache-jstl'].each {\n-        testCompile \"org.eclipse.jetty:$it\"\n+        api \"org.eclipse.jetty:$it\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2042526530b4e598895e6429d3b65d031a5fb94"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NDQ0OQ==", "bodyText": "Oops", "url": "https://github.com/line/armeria/pull/2420#discussion_r374494449", "createdAt": "2020-02-04T06:32:40Z", "author": {"login": "anuraaga"}, "path": "jetty/build.gradle", "diffHunk": "@@ -1,7 +1,7 @@\n dependencies {\n     // Jetty\n-    compile 'org.eclipse.jetty:jetty-server'\n+    api 'org.eclipse.jetty:jetty-server'\n     ['jetty-webapp', 'jetty-annotations', 'apache-jsp', 'apache-jstl'].each {\n-        testCompile \"org.eclipse.jetty:$it\"\n+        api \"org.eclipse.jetty:$it\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4MjM0OA=="}, "originalCommit": {"oid": "f2042526530b4e598895e6429d3b65d031a5fb94"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NTYwMg==", "bodyText": "Thanks :-)", "url": "https://github.com/line/armeria/pull/2420#discussion_r374495602", "createdAt": "2020-02-04T06:37:13Z", "author": {"login": "ikhoon"}, "path": "jetty/build.gradle", "diffHunk": "@@ -1,7 +1,7 @@\n dependencies {\n     // Jetty\n-    compile 'org.eclipse.jetty:jetty-server'\n+    api 'org.eclipse.jetty:jetty-server'\n     ['jetty-webapp', 'jetty-annotations', 'apache-jsp', 'apache-jstl'].each {\n-        testCompile \"org.eclipse.jetty:$it\"\n+        api \"org.eclipse.jetty:$it\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4MjM0OA=="}, "originalCommit": {"oid": "f2042526530b4e598895e6429d3b65d031a5fb94"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2937, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}