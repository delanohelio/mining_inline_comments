{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MTUyNTc2", "number": 3153, "title": "Fix a bug where a gRPC ServerCall is invoked after a stream is closed", "bodyText": "Motivation:\nWhen a stream is closed by a remote peer, ArmeriaServerCall is closed by res.whenComplete() listener.\n\n  \n    \n      armeria/grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java\n    \n    \n        Lines 173 to 182\n      in\n      6e24e78\n    \n    \n    \n    \n\n        \n          \n           res.whenComplete().handleAsync((unused, t) -> { \n        \n\n        \n          \n               if (!closeCalled) { \n        \n\n        \n          \n                   // Closed by client, not by server. \n        \n\n        \n          \n                   cancelled = true; \n        \n\n        \n          \n                   try (SafeCloseable ignore = ctx.push()) { \n        \n\n        \n          \n                       close(Status.CANCELLED, new Metadata()); \n        \n\n        \n          \n                   } \n        \n\n        \n          \n               } \n        \n\n        \n          \n               return null; \n        \n\n        \n          \n           }, ctx.eventLoop()); \n        \n    \n  \n\n\nIf a service performs a long running task, ArmeriaServerCall.sendHeaders() or\nArmeriaServerCall.sendMessage() will be called when a response is written.\nBecause gRPC-Java ServerCallStreamObserver implementation invokes ServerCall even if a call is cancelled with some conditions.\nhttps://github.com/grpc/grpc-java/blob/d52b359631ee1ac46f47d72d1015e1dd6ce9312c/stub/src/main/java/io/grpc/stub/ServerCalls.java#L346-L358\nModifications:\n\nCheck cancelled flag before validating the closing states.\n\nResult:\n\nArmeriaServerCall is now closed exatly once.", "createdAt": "2020-11-04T05:58:09Z", "url": "https://github.com/line/armeria/pull/3153", "merged": true, "mergeCommit": {"oid": "bd7fe49f6999af1d1c26b19dd7a220008c7ea202"}, "closed": true, "closedAt": "2020-11-09T04:30:50Z", "author": {"login": "ikhoon"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZHVDCAH2gAyNTE1MTUyNTc2OmZlMmU5MjdiMjYxNmFkMThmM2EwN2QyNzQyMTQ0OWMzMTBiNTY3YWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdasN5UAFqTUyNTkwMzA4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fe2e927b2616ad18f3a07d27421449c310b567ab", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/fe2e927b2616ad18f3a07d27421449c310b567ab", "committedDate": "2020-11-04T05:57:40Z", "message": "Fix a bug where a gRPC ServerCall is invoked after a stream is closed\n\nMotivation:\n\nWhen a stream is closed by a remote peer, `ArmeriaServerCall` is closed by `res.whenComplete()` listener.\nhttps://github.com/line/armeria/blob/6e24e7817f8be94ab21ddba7879e9f84ca840229/grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java#L173-L182\n\nIf a service performs a long running task, `ArmeriaServerCall.sendHeaders()` or\n`ArmeriaServerCall.sendMessage()` will be called when a response is written.\nBecause gRPC-Java `ServerCallStreamObserver` implementation invokes `ServerCall` even if a call is cancelled with some conditions.\nhttps://github.com/grpc/grpc-java/blob/d52b359631ee1ac46f47d72d1015e1dd6ce9312c/stub/src/main/java/io/grpc/stub/ServerCalls.java#L346-L358\n\nModifications:\n\n- Check `cancelled` flag before validating the closing states.\n\nResult:\n\n- `ArmeriaServerCall` is now closed exatly once."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ec6eb970d7ca17c4b519da2d7659376c7df60e4", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/1ec6eb970d7ca17c4b519da2d7659376c7df60e4", "committedDate": "2020-11-04T06:47:55Z", "message": "Address comments by @okue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMDkzNjMz", "url": "https://github.com/line/armeria/pull/3153#pullrequestreview-523093633", "createdAt": "2020-11-04T07:20:51Z", "commit": {"oid": "1ec6eb970d7ca17c4b519da2d7659376c7df60e4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNzoyMDo1MVrOHtLnTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNzoyMDo1MVrOHtLnTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEzODI1Mw==", "bodyText": "If the understanding is correct,\nArmeria gRPC client sets timeout when either option Client.responseTimeout or io.grpc.Stub.withDelay is specified.\nAfter timed out, the client raises DEADLINE_EXCEEDED.\nhttps://github.com/line/armeria/blob/armeria-1.2.0/grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java#L189-L207\nBesides, if the either options of them is specified, the client send grpc-timeout to the server, and the server also set timeout.\nAfter timed out at the server side, the server returns CANCELLED to the client.\nhttps://github.com/line/armeria/blob/armeria-1.2.0/grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java#L398\nhttps://github.com/line/armeria/blob/armeria-1.2.0/grpc/src/main/java/com/linecorp/armeria/server/grpc/FramedGrpcService.java#L190\nSo, I think there are two possibilities of the error code raised by the client.", "url": "https://github.com/line/armeria/pull/3153#discussion_r517138253", "createdAt": "2020-11-04T07:20:51Z", "author": {"login": "okue"}, "path": "grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTimeoutTest.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.grpc;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowableOfType;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.verify;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.util.concurrent.Uninterruptibles;\n+\n+import com.linecorp.armeria.client.Clients;\n+import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;\n+import com.linecorp.armeria.grpc.testing.Messages.SimpleRequest;\n+import com.linecorp.armeria.grpc.testing.Messages.SimpleResponse;\n+import com.linecorp.armeria.grpc.testing.TestServiceGrpc.TestServiceBlockingStub;\n+import com.linecorp.armeria.grpc.testing.TestServiceGrpc.TestServiceImplBase;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.grpc.GrpcService;\n+import com.linecorp.armeria.testing.junit5.server.ServerExtension;\n+\n+import ch.qos.logback.classic.Level;\n+import ch.qos.logback.classic.spi.ILoggingEvent;\n+import ch.qos.logback.core.Appender;\n+import io.grpc.Status.Code;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+\n+class GrpcClientTimeoutTest {\n+\n+    private static final ch.qos.logback.classic.Logger rootLogger =\n+            (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);\n+\n+    @Mock\n+    private Appender<ILoggingEvent> appender;\n+\n+    @Captor\n+    private ArgumentCaptor<ILoggingEvent> loggingEventCaptor;\n+\n+    @BeforeEach\n+    void setupLogger() {\n+        rootLogger.addAppender(appender);\n+    }\n+\n+    @AfterEach\n+    void cleanupLogger() {\n+        rootLogger.detachAppender(appender);\n+    }\n+\n+    @RegisterExtension\n+    static ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.requestTimeoutMillis(2000);\n+            sb.service(GrpcService.builder()\n+                                  .addService(new SlowService())\n+                                  .build());\n+        }\n+    };\n+\n+    @Test\n+    void clientTimeout() throws InterruptedException {\n+        final TestServiceBlockingStub client =\n+                Clients.newClient(server.httpUri(GrpcSerializationFormats.PROTO),\n+                                  TestServiceBlockingStub.class);\n+        final StatusRuntimeException exception = catchThrowableOfType(() -> {\n+            client.withDeadlineAfter(1000, TimeUnit.MILLISECONDS)\n+                  .unaryCall(SimpleRequest.getDefaultInstance());\n+        }, StatusRuntimeException.class);\n+        assertThat(exception.getStatus().getCode()).isEqualTo(Code.DEADLINE_EXCEEDED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec6eb970d7ca17c4b519da2d7659376c7df60e4"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70d5e80f21e94c981d5ac1205431ee8443453c59", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/70d5e80f21e94c981d5ac1205431ee8443453c59", "committedDate": "2020-11-04T07:55:43Z", "message": "Fix flasky"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MDI0OTcx", "url": "https://github.com/line/armeria/pull/3153#pullrequestreview-525024971", "createdAt": "2020-11-06T10:21:51Z", "commit": {"oid": "70d5e80f21e94c981d5ac1205431ee8443453c59"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1OTAzMDg3", "url": "https://github.com/line/armeria/pull/3153#pullrequestreview-525903087", "createdAt": "2020-11-09T03:30:16Z", "commit": {"oid": "70d5e80f21e94c981d5ac1205431ee8443453c59"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4795, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}