{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNTQ4Mjky", "number": 3007, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMzoxMDo1OVrOEaSTbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDoxODozNFrOE006xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTk4MzE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMzoxMDo1OVrOHDn6Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMzoxMDo1OVrOHDn6Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2MTY1NQ==", "bodyText": "How about adding setter to DnsResolverGroupBuilder as well?", "url": "https://github.com/line/armeria/pull/3007#discussion_r473561655", "createdAt": "2020-08-20T03:10:59Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -980,6 +985,20 @@ public static String fileServiceCacheSpec() {\n         return CACHED_HEADERS;\n     }\n \n+    /**\n+     * Returns the value of the {@code dnsCache} parameter. It would be used to create a Caffeine\n+     * {@link Cache} instance using {@link CaffeineSpec} for caching file entries.\n+     *\n+     * <p>The default value of this flag is {@value DEFAULT_DNS_CACHE_SPEC}. Specify the\n+     * {@code -Dcom.linecorp.armeria.dnsCache=<spec>} JVM option to override the default value.\n+     * For example, {@code -Dcom.linecorp.armeria.dnsCache=maximumSize=4096}.\n+     * Also, specify {@code -Dcom.linecorp.armeria.dnsCache=off} JVM option to disable it.\n+     */\n+    @Nullable\n+    public static String dnsCacheSpec() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9f79c1ace8a5a7d2b587ead2b09a94d89e2a5e4"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTk4NTMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMzoxMjoxN1rOHDn7bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMzoxMjoxN1rOHDn7bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2MTk2NA==", "bodyText": "If we add the setter to DnsResolverGroupBuilder, we don't need this method.\nWe can accept the cache spec in the constructor so that we can make dnsCache as a final field.", "url": "https://github.com/line/armeria/pull/3007#discussion_r473561964", "createdAt": "2020-08-20T03:12:17Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java", "diffHunk": "@@ -117,9 +132,15 @@\n         }\n     }\n \n+    @Nullable\n     @VisibleForTesting\n-    ConcurrentMap<String, CompletableFuture<CacheEntry>> cache() {\n-        return cache;\n+    Cache<String, CompletableFuture<CacheEntry>> cache() {\n+        return dnsCache;\n+    }\n+\n+    @VisibleForTesting\n+    void cache(@Nullable Cache<String, CompletableFuture<CacheEntry>> dnsCache) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9f79c1ace8a5a7d2b587ead2b09a94d89e2a5e4"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTk4NzUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMzoxMzo1MlrOHDn8uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMzoxMzo1MlrOHDn8uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2MjI5OQ==", "bodyText": "Could you move this private static method at the bottom of this class?\nThe reason that dnsRecordTypes is located at the top is that the method is used in the static initializer.", "url": "https://github.com/line/armeria/pull/3007#discussion_r473562299", "createdAt": "2020-08-20T03:13:52Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java", "diffHunk": "@@ -90,7 +90,18 @@\n         return builder.build();\n     }\n \n-    private final ConcurrentMap<String, CompletableFuture<CacheEntry>> cache = new ConcurrentHashMap<>();\n+    private static Cache<String, CompletableFuture<CacheEntry>> buildDnsCache(String spec) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9f79c1ace8a5a7d2b587ead2b09a94d89e2a5e4"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTk5NjQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMzoxOToxNVrOHDoB8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMzoxOToxNVrOHDoB8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2MzYzNA==", "bodyText": "We can do this on the line 129.", "url": "https://github.com/line/armeria/pull/3007#discussion_r473563634", "createdAt": "2020-08-20T03:19:15Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java", "diffHunk": "@@ -115,30 +97,50 @@ protected void doResolve(InetSocketAddress unresolvedAddress, Promise<InetSocket\n         result.handle((entry, unused) -> {\n             final Throwable cause = entry.cause();\n             if (cause != null) {\n-                if (entry.hasCacheableCause() && negativeTtl > 0) {\n-                    executor().schedule(() -> cache.remove(hostname), negativeTtl, TimeUnit.SECONDS);\n+                if (cache != null && entry.hasCacheableCause() && negativeTtl > 0) {\n+                    executor().schedule(() -> cache.invalidate(hostname), negativeTtl, TimeUnit.SECONDS);\n                 } else {\n-                    cache.remove(hostname);\n+                    if (cache != null) {\n+                        cache.invalidate(hostname);\n+                    }\n                 }\n                 promise.tryFailure(cause);\n                 return null;\n             }\n \n-            entry.scheduleRefresh(entry.ttlMillis());\n+            if (cache != null) {\n+                entry.scheduleRefresh(entry.ttlMillis());\n+            }\n             promise.trySuccess(new InetSocketAddress(entry.address(), port));\n             return null;\n         });\n+        return result;\n     }\n \n-    private void handleFromCache(CompletableFuture<CacheEntry> future, Promise<InetSocketAddress> promise,\n-                                 int port) {\n-        future.handle((entry, unused) -> {\n+    @Override\n+    protected void doResolve(InetSocketAddress unresolvedAddress, Promise<InetSocketAddress> promise)\n+            throws Exception {\n+        requireNonNull(unresolvedAddress, \"unresolvedAddress\");\n+        requireNonNull(promise, \"promise\");\n+        if (resolverClosed) {\n+            promise.tryFailure(new IllegalStateException(\"resolver is closed already.\"));\n+            return;\n+        }\n+        final String hostname = unresolvedAddress.getHostString();\n+        final int port = unresolvedAddress.getPort();\n+        if (cache == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9f79c1ace8a5a7d2b587ead2b09a94d89e2a5e4"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTk5NzkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMzoxOTo1OFrOHDoCtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMzoxOTo1OFrOHDoCtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2MzgzMQ==", "bodyText": "Let's use the variable when it's needed. Or we can just inline this. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3007#discussion_r473563831", "createdAt": "2020-08-20T03:19:58Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java", "diffHunk": "@@ -115,30 +97,50 @@ protected void doResolve(InetSocketAddress unresolvedAddress, Promise<InetSocket\n         result.handle((entry, unused) -> {\n             final Throwable cause = entry.cause();\n             if (cause != null) {\n-                if (entry.hasCacheableCause() && negativeTtl > 0) {\n-                    executor().schedule(() -> cache.remove(hostname), negativeTtl, TimeUnit.SECONDS);\n+                if (cache != null && entry.hasCacheableCause() && negativeTtl > 0) {\n+                    executor().schedule(() -> cache.invalidate(hostname), negativeTtl, TimeUnit.SECONDS);\n                 } else {\n-                    cache.remove(hostname);\n+                    if (cache != null) {\n+                        cache.invalidate(hostname);\n+                    }\n                 }\n                 promise.tryFailure(cause);\n                 return null;\n             }\n \n-            entry.scheduleRefresh(entry.ttlMillis());\n+            if (cache != null) {\n+                entry.scheduleRefresh(entry.ttlMillis());\n+            }\n             promise.trySuccess(new InetSocketAddress(entry.address(), port));\n             return null;\n         });\n+        return result;\n     }\n \n-    private void handleFromCache(CompletableFuture<CacheEntry> future, Promise<InetSocketAddress> promise,\n-                                 int port) {\n-        future.handle((entry, unused) -> {\n+    @Override\n+    protected void doResolve(InetSocketAddress unresolvedAddress, Promise<InetSocketAddress> promise)\n+            throws Exception {\n+        requireNonNull(unresolvedAddress, \"unresolvedAddress\");\n+        requireNonNull(promise, \"promise\");\n+        if (resolverClosed) {\n+            promise.tryFailure(new IllegalStateException(\"resolver is closed already.\"));\n+            return;\n+        }\n+        final String hostname = unresolvedAddress.getHostString();\n+        final int port = unresolvedAddress.getPort();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9f79c1ace8a5a7d2b587ead2b09a94d89e2a5e4"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDYyNDY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNjo0OToyNlrOHDt_2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNjo0OToyNlrOHDt_2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY2MTQwMw==", "bodyText": "Could be simplified:\nif (cache != null) {\n    if (entry.hasCacheableCause() && negativeTtl > 0) {\n        executor().schedule(() -> cache.invalidate(hostname), negativeTtl, TimeUnit.SECONDS);\n    } else {\n        cache.invalidate(hostname);\n    }\n}", "url": "https://github.com/line/armeria/pull/3007#discussion_r473661403", "createdAt": "2020-08-20T06:49:26Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java", "diffHunk": "@@ -115,30 +97,50 @@ protected void doResolve(InetSocketAddress unresolvedAddress, Promise<InetSocket\n         result.handle((entry, unused) -> {\n             final Throwable cause = entry.cause();\n             if (cause != null) {\n-                if (entry.hasCacheableCause() && negativeTtl > 0) {\n-                    executor().schedule(() -> cache.remove(hostname), negativeTtl, TimeUnit.SECONDS);\n+                if (cache != null && entry.hasCacheableCause() && negativeTtl > 0) {\n+                    executor().schedule(() -> cache.invalidate(hostname), negativeTtl, TimeUnit.SECONDS);\n                 } else {\n-                    cache.remove(hostname);\n+                    if (cache != null) {\n+                        cache.invalidate(hostname);\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9f79c1ace8a5a7d2b587ead2b09a94d89e2a5e4"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDcyNjMyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzoxMDoxOFrOHDvALQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMzozNjozOFrOHj6GvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY3Nzg2OQ==", "bodyText": "Question: Do we need RefreshingAddressResolver when Cache is null?", "url": "https://github.com/line/armeria/pull/3007#discussion_r473677869", "createdAt": "2020-08-20T07:10:18Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java", "diffHunk": "@@ -65,7 +66,7 @@\n     private volatile boolean resolverClosed;\n \n     RefreshingAddressResolver(EventLoop eventLoop,\n-                              ConcurrentMap<String, CompletableFuture<CacheEntry>> cache,\n+                              @Nullable Cache<String, CompletableFuture<CacheEntry>> cache,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9f79c1ace8a5a7d2b587ead2b09a94d89e2a5e4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQxNDIwNQ==", "bodyText": "I was concerned about delays in updating a DNS record if someone uses DNS failover.\nBut it seems too much to be considered here. So I modified it to work with Nonnull.", "url": "https://github.com/line/armeria/pull/3007#discussion_r507414205", "createdAt": "2020-10-19T03:36:38Z", "author": {"login": "masonshin"}, "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java", "diffHunk": "@@ -65,7 +66,7 @@\n     private volatile boolean resolverClosed;\n \n     RefreshingAddressResolver(EventLoop eventLoop,\n-                              ConcurrentMap<String, CompletableFuture<CacheEntry>> cache,\n+                              @Nullable Cache<String, CompletableFuture<CacheEntry>> cache,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY3Nzg2OQ=="}, "originalCommit": {"oid": "c9f79c1ace8a5a7d2b587ead2b09a94d89e2a5e4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODI1MDQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzoxODo0NVrOHlYuQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzoxODo0NVrOHlYuQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2NDQxOQ==", "bodyText": "I think we could just do:\n* Sets the cache spec for caching resolved addresses.\n* {@link Flags#dnsCacheSpec()} is used by default.", "url": "https://github.com/line/armeria/pull/3007#discussion_r508964419", "createdAt": "2020-10-21T03:18:45Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java", "diffHunk": "@@ -292,6 +295,18 @@ public DnsResolverGroupBuilder decodeIdn(boolean decodeIdn) {\n         return this;\n     }\n \n+    /**\n+     * Sets the cache spec for caching resolved addresses.\n+     * If this is set, {@link Flags#dnsCacheSpec()} is ignored.\n+     * Otherwise, it uses the value of {@link Flags#dnsCacheSpec()} by default.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aff040d7a976cd067b775108a8755db148e72616"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODI1MjYyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzoyMDowNFrOHlYvng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzoyMDowNFrOHlYvng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2NDc2Ng==", "bodyText": "requireNonNull(cacheSpec, \"cacheSpec\");", "url": "https://github.com/line/armeria/pull/3007#discussion_r508964766", "createdAt": "2020-10-21T03:20:04Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java", "diffHunk": "@@ -292,6 +295,18 @@ public DnsResolverGroupBuilder decodeIdn(boolean decodeIdn) {\n         return this;\n     }\n \n+    /**\n+     * Sets the cache spec for caching resolved addresses.\n+     * If this is set, {@link Flags#dnsCacheSpec()} is ignored.\n+     * Otherwise, it uses the value of {@link Flags#dnsCacheSpec()} by default.\n+     *\n+     * @see Flags#dnsCacheSpec()\n+     */\n+    public DnsResolverGroupBuilder cacheSpec(String cacheSpec) {\n+        this.cacheSpec = cacheSpec;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aff040d7a976cd067b775108a8755db148e72616"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODI1NjI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzoyMTo1NlrOHlYxuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzoyMTo1NlrOHlYxuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2NTMwNw==", "bodyText": "How about passing Flags#dnsCacheSpec() is cacheSpec is null?", "url": "https://github.com/line/armeria/pull/3007#discussion_r508965307", "createdAt": "2020-10-21T03:21:56Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java", "diffHunk": "@@ -343,6 +358,7 @@ RefreshingAddressResolverGroup build(EventLoopGroup eventLoopGroup) {\n             }\n         };\n         return new RefreshingAddressResolverGroup(resolverConfigurator, minTtl, maxTtl, negativeTtl,\n-                                                  queryTimeoutMillis, refreshBackoff, resolvedAddressTypes);\n+                                                  queryTimeoutMillis, refreshBackoff, resolvedAddressTypes,\n+                                                  cacheSpec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aff040d7a976cd067b775108a8755db148e72616"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODI2NjI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzoyNjo0N1rOHlY3NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzoyNjo0N1rOHlY3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2NjcwOQ==", "bodyText": "Let's use dnsCacheSpec", "url": "https://github.com/line/armeria/pull/3007#discussion_r508966709", "createdAt": "2020-10-21T03:26:47Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -355,6 +355,11 @@\n             CSV_SPLITTER.splitToList(getNormalized(\n                     \"cachedHeaders\", DEFAULT_CACHED_HEADERS, CharMatcher.ascii()::matchesAllOf));\n \n+    private static final String DEFAULT_DNS_CACHE_SPEC = \"maximumSize=4096\";\n+    @Nullable\n+    private static final String DNS_CACHE_SPEC =\n+            caffeineSpec(\"dnsCache\", DEFAULT_DNS_CACHE_SPEC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aff040d7a976cd067b775108a8755db148e72616"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODI2NzU4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzoyNzoyOFrOHlY38Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzoyNzoyOFrOHlY38Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2Njg5Nw==", "bodyText": "dnsCacheSpec here as well. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3007#discussion_r508966897", "createdAt": "2020-10-21T03:27:28Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -980,6 +985,20 @@ public static String fileServiceCacheSpec() {\n         return CACHED_HEADERS;\n     }\n \n+    /**\n+     * Returns the value of the {@code dnsCache} parameter. It would be used to create a Caffeine\n+     * {@link Cache} instance using {@link CaffeineSpec} for caching file entries.\n+     *\n+     * <p>The default value of this flag is {@value DEFAULT_DNS_CACHE_SPEC}. Specify the\n+     * {@code -Dcom.linecorp.armeria.dnsCache=<spec>} JVM option to override the default value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aff040d7a976cd067b775108a8755db148e72616"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODI2OTI0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzoyODozMlrOHlY47w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNjowODoyOVrOHoB2WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2NzE1MQ==", "bodyText": "nit: Probably better to take non-null cacheSpec here. I think Flags.dnsCacheSpec() could be used before creating this class.", "url": "https://github.com/line/armeria/pull/3007#discussion_r508967151", "createdAt": "2020-10-21T03:28:32Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java", "diffHunk": "@@ -115,10 +116,12 @@\n         } else {\n             dnsRecordTypes = dnsRecordTypes(resolvedAddressTypes);\n         }\n+        cache = buildCache(cacheSpec != null ? cacheSpec\n+                                             : requireNonNull(Flags.dnsCacheSpec(), \"cacheSpec\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aff040d7a976cd067b775108a8755db148e72616"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczNTM4NA==", "bodyText": "I've changed the cacheSpec as nonnull. \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/3007#discussion_r511735384", "createdAt": "2020-10-26T06:08:29Z", "author": {"login": "masonshin"}, "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java", "diffHunk": "@@ -115,10 +116,12 @@\n         } else {\n             dnsRecordTypes = dnsRecordTypes(resolvedAddressTypes);\n         }\n+        cache = buildCache(cacheSpec != null ? cacheSpec\n+                                             : requireNonNull(Flags.dnsCacheSpec(), \"cacheSpec\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2NzE1MQ=="}, "originalCommit": {"oid": "aff040d7a976cd067b775108a8755db148e72616"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODI3ODE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzozMjozNlrOHlY9qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMDo0MzowNlrOHonYpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2ODM2MQ==", "bodyText": "What happens if the spec is off?", "url": "https://github.com/line/armeria/pull/3007#discussion_r508968361", "createdAt": "2020-10-21T03:32:36Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java", "diffHunk": "@@ -137,16 +140,19 @@\n     @Override\n     public void close() {\n         super.close();\n-        while (!cache.isEmpty()) {\n-            for (final Iterator<Entry<String, CompletableFuture<CacheEntry>>> i = cache.entrySet().iterator();\n-                 i.hasNext();) {\n-                final Entry<String, CompletableFuture<CacheEntry>> entry = i.next();\n-                i.remove();\n-                entry.getValue().handle((cacheEntry, cause) -> {\n+        cache.invalidateAll();\n+    }\n+\n+    private static Cache<String, CompletableFuture<CacheEntry>> buildCache(String cacheSpec) {\n+        final Caffeine<Object, Object> b = Caffeine.from(cacheSpec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aff040d7a976cd067b775108a8755db148e72616"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczNTAwMA==", "bodyText": "I decided to keep the DNS cache as nonnull, so I've removed off from the spec.", "url": "https://github.com/line/armeria/pull/3007#discussion_r511735000", "createdAt": "2020-10-26T06:06:41Z", "author": {"login": "masonshin"}, "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java", "diffHunk": "@@ -137,16 +140,19 @@\n     @Override\n     public void close() {\n         super.close();\n-        while (!cache.isEmpty()) {\n-            for (final Iterator<Entry<String, CompletableFuture<CacheEntry>>> i = cache.entrySet().iterator();\n-                 i.hasNext();) {\n-                final Entry<String, CompletableFuture<CacheEntry>> entry = i.next();\n-                i.remove();\n-                entry.getValue().handle((cacheEntry, cause) -> {\n+        cache.invalidateAll();\n+    }\n+\n+    private static Cache<String, CompletableFuture<CacheEntry>> buildCache(String cacheSpec) {\n+        final Caffeine<Object, Object> b = Caffeine.from(cacheSpec);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2ODM2MQ=="}, "originalCommit": {"oid": "aff040d7a976cd067b775108a8755db148e72616"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1MDM3NQ==", "bodyText": "Yeah, that's a good idea. \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/3007#discussion_r512350375", "createdAt": "2020-10-27T00:43:06Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java", "diffHunk": "@@ -137,16 +140,19 @@\n     @Override\n     public void close() {\n         super.close();\n-        while (!cache.isEmpty()) {\n-            for (final Iterator<Entry<String, CompletableFuture<CacheEntry>>> i = cache.entrySet().iterator();\n-                 i.hasNext();) {\n-                final Entry<String, CompletableFuture<CacheEntry>> entry = i.next();\n-                i.remove();\n-                entry.getValue().handle((cacheEntry, cause) -> {\n+        cache.invalidateAll();\n+    }\n+\n+    private static Cache<String, CompletableFuture<CacheEntry>> buildCache(String cacheSpec) {\n+        final Caffeine<Object, Object> b = Caffeine.from(cacheSpec);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2ODM2MQ=="}, "originalCommit": {"oid": "aff040d7a976cd067b775108a8755db148e72616"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODMwMTk3OnYy", "diffSide": "LEFT", "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzo0NToxNlrOHlZK3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzo0NToxNlrOHlZK3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk3MTc0MQ==", "bodyText": "Not related to this PR, numAttemptsSoFar might be included in toString().", "url": "https://github.com/line/armeria/pull/3007#discussion_r508971741", "createdAt": "2020-10-21T03:45:16Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java", "diffHunk": "@@ -346,7 +326,6 @@ public String toString() {\n                               .add(\"questions\", questions)\n                               .add(\"cause\", cause)\n                               .add(\"hasCacheableCause\", hasCacheableCause)\n-                              .add(\"servedFromCache\", servedFromCache)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aff040d7a976cd067b775108a8755db148e72616"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODMxODgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzo1NToxN1rOHlZUNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzo1NToxN1rOHlZUNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk3NDEzNA==", "bodyText": "I guess this RemovalListener could be called by any thread if the value is completed already and close() is called by a user thread.\nDon't we need to handle the concurrency issue in the CacheEntry.clear()?\nFor example:\nvoid clear() {\n\tif (executor().inEventLoop()) {\n       clear0()\n    } else {\n       executor().execute(this::clear0)\n    }\n}", "url": "https://github.com/line/armeria/pull/3007#discussion_r508974134", "createdAt": "2020-10-21T03:55:17Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java", "diffHunk": "@@ -137,16 +140,19 @@\n     @Override\n     public void close() {\n         super.close();\n-        while (!cache.isEmpty()) {\n-            for (final Iterator<Entry<String, CompletableFuture<CacheEntry>>> i = cache.entrySet().iterator();\n-                 i.hasNext();) {\n-                final Entry<String, CompletableFuture<CacheEntry>> entry = i.next();\n-                i.remove();\n-                entry.getValue().handle((cacheEntry, cause) -> {\n+        cache.invalidateAll();\n+    }\n+\n+    private static Cache<String, CompletableFuture<CacheEntry>> buildCache(String cacheSpec) {\n+        final Caffeine<Object, Object> b = Caffeine.from(cacheSpec);\n+        b.removalListener((RemovalListener<String, CompletableFuture<CacheEntry>>) (key, value, cause) -> {\n+            if (value != null) {\n+                value.handle((cacheEntry, throwable) -> {\n                     cacheEntry.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aff040d7a976cd067b775108a8755db148e72616"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzAxOTM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMTozMjowMFrOHrLKAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMTozMjowMFrOHrLKAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMzYwMA==", "bodyText": "nit: How about declaring a final local variable rather than modifying a member field? A user did not really set the cacheSpec.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    cacheSpec = requireNonNull(cacheSpec != null ? cacheSpec : Flags.dnsCacheSpec(), \"cacheSpec\");\n          \n          \n            \n                    final String cacheSpec = firstNonNull(this.cacheSpec, Flags.dnsCacheSpec());", "url": "https://github.com/line/armeria/pull/3007#discussion_r515033600", "createdAt": "2020-10-30T11:32:00Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java", "diffHunk": "@@ -342,7 +354,9 @@ RefreshingAddressResolverGroup build(EventLoopGroup eventLoopGroup) {\n                 builder.decodeIdn(decodeIdn);\n             }\n         };\n+        cacheSpec = requireNonNull(cacheSpec != null ? cacheSpec : Flags.dnsCacheSpec(), \"cacheSpec\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c6cb823a55d33229a37ed08da43d07ab86b1f7"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODI4NDIzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDoxODozNFrOHswzlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMzowNDoyMFrOHtHnCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY5OTAzMA==", "bodyText": "Flags.dnsCacheSpec() is annotated with @Nullable. Is it intended?", "url": "https://github.com/line/armeria/pull/3007#discussion_r516699030", "createdAt": "2020-11-03T14:18:34Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java", "diffHunk": "@@ -342,7 +355,9 @@ RefreshingAddressResolverGroup build(EventLoopGroup eventLoopGroup) {\n                 builder.decodeIdn(decodeIdn);\n             }\n         };\n+        final String cacheSpec = firstNonNull(this.cacheSpec, Flags.dnsCacheSpec());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b191d17fdbb5cb767d069fc6562377409c48d8a7"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA2NzY3Ng==", "bodyText": "It will be null when specified like: -Dcom.linecorp.armeria.dnsCacheSpec=off.\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/common/Flags.java\n    \n    \n        Lines 1071 to 1084\n      in\n      6e0e47b\n    \n    \n    \n    \n\n        \n          \n           @Nullable \n        \n\n        \n          \n           private static String caffeineSpec(String name, String defaultValue) { \n        \n\n        \n          \n               final String spec = get(name, defaultValue, value -> { \n        \n\n        \n          \n                   try { \n        \n\n        \n          \n                       if (!\"off\".equals(value)) { \n        \n\n        \n          \n                           CaffeineSpec.parse(value); \n        \n\n        \n          \n                       } \n        \n\n        \n          \n                       return true; \n        \n\n        \n          \n                   } catch (Exception e) { \n        \n\n        \n          \n                       return false; \n        \n\n        \n          \n                   } \n        \n\n        \n          \n               }); \n        \n\n        \n          \n               return \"off\".equals(spec) ? null : spec; \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nFlags.dnsCacheSpec() is itself nullable, but firstNonNull checks to not be null.\nWould it better to make this NonNull when we define dnsCacheSpec?", "url": "https://github.com/line/armeria/pull/3007#discussion_r517067676", "createdAt": "2020-11-04T02:44:41Z", "author": {"login": "masonshin"}, "path": "core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java", "diffHunk": "@@ -342,7 +355,9 @@ RefreshingAddressResolverGroup build(EventLoopGroup eventLoopGroup) {\n                 builder.decodeIdn(decodeIdn);\n             }\n         };\n+        final String cacheSpec = firstNonNull(this.cacheSpec, Flags.dnsCacheSpec());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY5OTAzMA=="}, "originalCommit": {"oid": "b191d17fdbb5cb767d069fc6562377409c48d8a7"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3MDM1NQ==", "bodyText": "Would it better to make this NonNull when we define dnsCacheSpec?\n\n+1 Because the error message of firstNonNull(...) would be ambiguous. Users can get a detailed error message early by making dnsCacheSpec() non-null.\nhttps://github.com/google/guava/blob/7ef9f97cad23efee4cc18c63b5f3c90ca320f131/guava/src/com/google/common/base/MoreObjects.java#L64\n\"Both parameters are null\"", "url": "https://github.com/line/armeria/pull/3007#discussion_r517070355", "createdAt": "2020-11-04T02:55:36Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java", "diffHunk": "@@ -342,7 +355,9 @@ RefreshingAddressResolverGroup build(EventLoopGroup eventLoopGroup) {\n                 builder.decodeIdn(decodeIdn);\n             }\n         };\n+        final String cacheSpec = firstNonNull(this.cacheSpec, Flags.dnsCacheSpec());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY5OTAzMA=="}, "originalCommit": {"oid": "b191d17fdbb5cb767d069fc6562377409c48d8a7"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3MjY1MA==", "bodyText": "SGTM \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/3007#discussion_r517072650", "createdAt": "2020-11-04T03:04:20Z", "author": {"login": "masonshin"}, "path": "core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java", "diffHunk": "@@ -342,7 +355,9 @@ RefreshingAddressResolverGroup build(EventLoopGroup eventLoopGroup) {\n                 builder.decodeIdn(decodeIdn);\n             }\n         };\n+        final String cacheSpec = firstNonNull(this.cacheSpec, Flags.dnsCacheSpec());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY5OTAzMA=="}, "originalCommit": {"oid": "b191d17fdbb5cb767d069fc6562377409c48d8a7"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2263, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}