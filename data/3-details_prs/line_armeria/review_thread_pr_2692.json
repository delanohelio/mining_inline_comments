{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NDQ4NjI3", "number": 2692, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNDozNjo1MFrOD6FiLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNzozNzozOVrOD6IKdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjM0NjcxOnYy", "diffSide": "RIGHT", "path": "thrift/src/main/java/com/linecorp/armeria/common/thrift/text/StructContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNDozNjo1MFrOGRuFvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNDozNjo1MFrOGRuFvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzNDEwOQ==", "bodyText": "How about using Class#forName(, false ,) not to initialize an instance? Initializing seems unnecessary by specifications. https://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4 I guess, it makes lock shorter by reducing an overhead of class loader.", "url": "https://github.com/line/armeria/pull/2692#discussion_r421234109", "createdAt": "2020-05-07T04:36:50Z", "author": {"login": "hexoul"}, "path": "thrift/src/main/java/com/linecorp/armeria/common/thrift/text/StructContext.java", "diffHunk": "@@ -198,9 +200,18 @@ protected TField getTFieldByName(String name) throws TException {\n                     // Workaround a bug where the generated 'FieldMetaData' does not provide\n                     // a fully qualified class name.\n                     final String fqcn = clazz.getPackage().getName() + '.' + elementMetaData.getTypedefName();\n-                    try {\n-                        classMap.put(fieldName, Class.forName(fqcn));\n-                    } catch (ClassNotFoundException ignored) {\n+                    Class<?> fieldClass = fieldMetaDataClassCache.get(fqcn);\n+                    if (fieldClass == null) {\n+                        fieldClass = fieldMetaDataClassCache.computeIfAbsent(fqcn, key -> {\n+                            try {\n+                                return Class.forName(fqcn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5927817aa224290a9588b23e1cc1c4d665e8bb9"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjcwMjcyOnYy", "diffSide": "RIGHT", "path": "benchmarks/src/jmh/java/com/linecorp/armeria/internal/common/CacheableClassLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNzoxNTo0NFrOGRxZjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNzoxOToyOFrOGRxg7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI4ODMzMw==", "bodyText": "weakValueCache", "url": "https://github.com/line/armeria/pull/2692#discussion_r421288333", "createdAt": "2020-05-07T07:15:44Z", "author": {"login": "trustin"}, "path": "benchmarks/src/jmh/java/com/linecorp/armeria/internal/common/CacheableClassLoader.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import com.google.common.collect.MapMaker;\n+\n+public final class CacheableClassLoader {\n+\n+    private static final Map<String, Class<?>> cache = new ConcurrentHashMap<>();\n+    private static final Map<String, Class<?>> weakKeyCache = new MapMaker().weakValues().makeMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3fde3e83a44552289c60c1788a006fdfe6100b9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI5MDIyMA==", "bodyText": "Oops...", "url": "https://github.com/line/armeria/pull/2692#discussion_r421290220", "createdAt": "2020-05-07T07:19:28Z", "author": {"login": "ikhoon"}, "path": "benchmarks/src/jmh/java/com/linecorp/armeria/internal/common/CacheableClassLoader.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import com.google.common.collect.MapMaker;\n+\n+public final class CacheableClassLoader {\n+\n+    private static final Map<String, Class<?>> cache = new ConcurrentHashMap<>();\n+    private static final Map<String, Class<?>> weakKeyCache = new MapMaker().weakValues().makeMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI4ODMzMw=="}, "originalCommit": {"oid": "e3fde3e83a44552289c60c1788a006fdfe6100b9"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjcwNTA4OnYy", "diffSide": "RIGHT", "path": "thrift/src/main/java/com/linecorp/armeria/common/thrift/text/StructContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNzoxNjoyMlrOGRxa5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNzoxNjoyMlrOGRxa5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI4ODY3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                return Class.forName(fqcn);\n          \n          \n            \n                                                return Class.forName(key);", "url": "https://github.com/line/armeria/pull/2692#discussion_r421288677", "createdAt": "2020-05-07T07:16:22Z", "author": {"login": "anuraaga"}, "path": "thrift/src/main/java/com/linecorp/armeria/common/thrift/text/StructContext.java", "diffHunk": "@@ -197,10 +199,22 @@ protected TField getTFieldByName(String name) throws TException {\n                 } else {\n                     // Workaround a bug where the generated 'FieldMetaData' does not provide\n                     // a fully qualified class name.\n-                    final String fqcn = clazz.getPackage().getName() + '.' + elementMetaData.getTypedefName();\n-                    try {\n-                        classMap.put(fieldName, Class.forName(fqcn));\n-                    } catch (ClassNotFoundException ignored) {\n+                    final String typedefName = elementMetaData.getTypedefName();\n+                    if (typedefName != null) {\n+                        final String fqcn = clazz.getPackage().getName() + '.' + typedefName;\n+                        Class<?> fieldClass = fieldMetaDataClassCache.get(fqcn);\n+                        if (fieldClass == null) {\n+                            fieldClass = fieldMetaDataClassCache.computeIfAbsent(fqcn, key -> {\n+                                try {\n+                                    return Class.forName(fqcn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3fde3e83a44552289c60c1788a006fdfe6100b9"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjcwODEwOnYy", "diffSide": "RIGHT", "path": "thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftTreeStructureTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNzoxNzoyMVrOGRxc3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNzoxNzoyMVrOGRxc3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI4OTE4Mw==", "bodyText": "Cruft?", "url": "https://github.com/line/armeria/pull/2692#discussion_r421289183", "createdAt": "2020-05-07T07:17:21Z", "author": {"login": "trustin"}, "path": "thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftTreeStructureTest.java", "diffHunk": "@@ -66,7 +66,7 @@ void setUp() {\n         treeRequest = new TreeRequest().setBase(base);\n     }\n \n-    @Test\n+    @RepeatedTest(10)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3fde3e83a44552289c60c1788a006fdfe6100b9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjc3NzUxOnYy", "diffSide": "RIGHT", "path": "benchmarks/src/jmh/java/com/linecorp/armeria/internal/common/ClassLoadBenchmark.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNzozNzozOVrOGRyHiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNzo1ODoxOFrOGRy1vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMwMDEwNQ==", "bodyText": "nit. new line?", "url": "https://github.com/line/armeria/pull/2692#discussion_r421300105", "createdAt": "2020-05-07T07:37:39Z", "author": {"login": "hexoul"}, "path": "benchmarks/src/jmh/java/com/linecorp/armeria/internal/common/ClassLoadBenchmark.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+/**\n+ * Microbenchmarks of {@link Class} loading.\n+ */\n+public class ClassLoadBenchmark {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cde0bcfd85ee933dfbae4b7a0558401dff971f6c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxMTkzMg==", "bodyText": "That is not a strong convension, but let's make it prettier. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2692#discussion_r421311932", "createdAt": "2020-05-07T07:58:18Z", "author": {"login": "ikhoon"}, "path": "benchmarks/src/jmh/java/com/linecorp/armeria/internal/common/ClassLoadBenchmark.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+/**\n+ * Microbenchmarks of {@link Class} loading.\n+ */\n+public class ClassLoadBenchmark {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMwMDEwNQ=="}, "originalCommit": {"oid": "cde0bcfd85ee933dfbae4b7a0558401dff971f6c"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2582, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}