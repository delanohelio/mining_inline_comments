{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NzYzMTU5", "number": 2560, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMTowODowMFrODlwpSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMjozMDo0OVrODm626Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTIwOTA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMTowODowMFrOFy1KNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMTo0OTo0M1rOFzkAbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0NDA4NA==", "bodyText": "I wonder if I have to copy the RESPONSE_CONTENT as well. \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2560#discussion_r388844084", "createdAt": "2020-03-06T11:08:00Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "diffHunk": "@@ -270,11 +274,41 @@ protected static ClientRequestContext newDerivedContext(ClientRequestContext ctx\n                                                             boolean initialAttempt) {\n         final RequestId id = ctx.options().requestIdGenerator().get();\n         final EndpointGroup endpointGroup = ctx.endpointGroup();\n+        final ClientRequestContext derived;\n         if (endpointGroup != null && !initialAttempt) {\n-            return ctx.newDerivedContext(id, req, rpcReq, endpointGroup.select(ctx));\n+            derived = ctx.newDerivedContext(id, req, rpcReq, endpointGroup.select(ctx));\n         } else {\n-            return ctx.newDerivedContext(id, req, rpcReq);\n+            derived = ctx.newDerivedContext(id, req, rpcReq);\n         }\n+\n+        final RequestLogAccess parentLog = ctx.log();\n+        final RequestLog partial = parentLog.partial();\n+        final RequestLogBuilder logBuilder = derived.logBuilder();\n+        // serializationFormat is always not null, so this is fine.\n+        logBuilder.serializationFormat(partial.serializationFormat());\n+        if (parentLog.isAvailable(RequestLogProperty.NAME)) {\n+            final String name = partial.name();\n+            if (name != null) {\n+                logBuilder.name(name);\n+            }\n+        }\n+\n+        final RequestLogBuilder parentLogBuilder = ctx.logBuilder();\n+        if (parentLogBuilder.isDeferRequestContentSet()) {\n+            logBuilder.deferRequestContent();\n+        }\n+        parentLog.whenAvailable(RequestLogProperty.REQUEST_CONTENT).thenApply(requestLog -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "023b4a85e66d3d1ff4a2815a6ece10f48432ba65"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU4NTEyNw==", "bodyText": "I think so. How about copying SESSION and SCHEME as well?", "url": "https://github.com/line/armeria/pull/2560#discussion_r389585127", "createdAt": "2020-03-09T10:49:37Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "diffHunk": "@@ -270,11 +274,41 @@ protected static ClientRequestContext newDerivedContext(ClientRequestContext ctx\n                                                             boolean initialAttempt) {\n         final RequestId id = ctx.options().requestIdGenerator().get();\n         final EndpointGroup endpointGroup = ctx.endpointGroup();\n+        final ClientRequestContext derived;\n         if (endpointGroup != null && !initialAttempt) {\n-            return ctx.newDerivedContext(id, req, rpcReq, endpointGroup.select(ctx));\n+            derived = ctx.newDerivedContext(id, req, rpcReq, endpointGroup.select(ctx));\n         } else {\n-            return ctx.newDerivedContext(id, req, rpcReq);\n+            derived = ctx.newDerivedContext(id, req, rpcReq);\n         }\n+\n+        final RequestLogAccess parentLog = ctx.log();\n+        final RequestLog partial = parentLog.partial();\n+        final RequestLogBuilder logBuilder = derived.logBuilder();\n+        // serializationFormat is always not null, so this is fine.\n+        logBuilder.serializationFormat(partial.serializationFormat());\n+        if (parentLog.isAvailable(RequestLogProperty.NAME)) {\n+            final String name = partial.name();\n+            if (name != null) {\n+                logBuilder.name(name);\n+            }\n+        }\n+\n+        final RequestLogBuilder parentLogBuilder = ctx.logBuilder();\n+        if (parentLogBuilder.isDeferRequestContentSet()) {\n+            logBuilder.deferRequestContent();\n+        }\n+        parentLog.whenAvailable(RequestLogProperty.REQUEST_CONTENT).thenApply(requestLog -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0NDA4NA=="}, "originalCommit": {"oid": "023b4a85e66d3d1ff4a2815a6ece10f48432ba65"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxMTYzMQ==", "bodyText": "I think SESSION and SCHEME are not available at this point.\nThey are rather copied from child to parent.", "url": "https://github.com/line/armeria/pull/2560#discussion_r389611631", "createdAt": "2020-03-09T11:49:43Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "diffHunk": "@@ -270,11 +274,41 @@ protected static ClientRequestContext newDerivedContext(ClientRequestContext ctx\n                                                             boolean initialAttempt) {\n         final RequestId id = ctx.options().requestIdGenerator().get();\n         final EndpointGroup endpointGroup = ctx.endpointGroup();\n+        final ClientRequestContext derived;\n         if (endpointGroup != null && !initialAttempt) {\n-            return ctx.newDerivedContext(id, req, rpcReq, endpointGroup.select(ctx));\n+            derived = ctx.newDerivedContext(id, req, rpcReq, endpointGroup.select(ctx));\n         } else {\n-            return ctx.newDerivedContext(id, req, rpcReq);\n+            derived = ctx.newDerivedContext(id, req, rpcReq);\n         }\n+\n+        final RequestLogAccess parentLog = ctx.log();\n+        final RequestLog partial = parentLog.partial();\n+        final RequestLogBuilder logBuilder = derived.logBuilder();\n+        // serializationFormat is always not null, so this is fine.\n+        logBuilder.serializationFormat(partial.serializationFormat());\n+        if (parentLog.isAvailable(RequestLogProperty.NAME)) {\n+            final String name = partial.name();\n+            if (name != null) {\n+                logBuilder.name(name);\n+            }\n+        }\n+\n+        final RequestLogBuilder parentLogBuilder = ctx.logBuilder();\n+        if (parentLogBuilder.isDeferRequestContentSet()) {\n+            logBuilder.deferRequestContent();\n+        }\n+        parentLog.whenAvailable(RequestLogProperty.REQUEST_CONTENT).thenApply(requestLog -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0NDA4NA=="}, "originalCommit": {"oid": "023b4a85e66d3d1ff4a2815a6ece10f48432ba65"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDE1NTQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMDozMTozOFrOFzh21w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjowMTo0MVrOF0CYoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3NjQwNw==", "bodyText": "How about simplifying like the following?\nNote that this method does not copy the {@link RequestLog} properties to the derived\ncontext.", "url": "https://github.com/line/armeria/pull/2560#discussion_r389576407", "createdAt": "2020-03-09T10:31:38Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java", "diffHunk": "@@ -357,6 +357,8 @@ default ClientRequestContext newDerivedContext(RequestId id,\n      * Creates a new {@link ClientRequestContext} whose properties and {@link Attribute}s are copied from this\n      * {@link ClientRequestContext}, except having different {@link Request}, {@link Endpoint} and its own\n      * {@link RequestLog}.\n+     *\n+     * <p>Note that if you want to copy the properties of the {@link RequestLog}, you should do it by yourself.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "023b4a85e66d3d1ff4a2815a6ece10f48432ba65"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwOTM0NA==", "bodyText": "Fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2560#discussion_r390109344", "createdAt": "2020-03-10T06:01:41Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java", "diffHunk": "@@ -357,6 +357,8 @@ default ClientRequestContext newDerivedContext(RequestId id,\n      * Creates a new {@link ClientRequestContext} whose properties and {@link Attribute}s are copied from this\n      * {@link ClientRequestContext}, except having different {@link Request}, {@link Endpoint} and its own\n      * {@link RequestLog}.\n+     *\n+     * <p>Note that if you want to copy the properties of the {@link RequestLog}, you should do it by yourself.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3NjQwNw=="}, "originalCommit": {"oid": "023b4a85e66d3d1ff4a2815a6ece10f48432ba65"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTI4MDU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowNDoyOFrOF0TEuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMjoxMTowOVrOF0nCmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4Mjc3Ng==", "bodyText": "I wonder that could we move the code of log propopagation to DefaultRequestLog.addChild(RequestLogAccess)?", "url": "https://github.com/line/armeria/pull/2560#discussion_r390382776", "createdAt": "2020-03-10T15:04:28Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "diffHunk": "@@ -270,11 +274,57 @@ protected static ClientRequestContext newDerivedContext(ClientRequestContext ctx\n                                                             boolean initialAttempt) {\n         final RequestId id = ctx.options().requestIdGenerator().get();\n         final EndpointGroup endpointGroup = ctx.endpointGroup();\n+        final ClientRequestContext derived;\n         if (endpointGroup != null && !initialAttempt) {\n-            return ctx.newDerivedContext(id, req, rpcReq, endpointGroup.select(ctx));\n+            derived = ctx.newDerivedContext(id, req, rpcReq, endpointGroup.select(ctx));\n         } else {\n-            return ctx.newDerivedContext(id, req, rpcReq);\n+            derived = ctx.newDerivedContext(id, req, rpcReq);\n         }\n+\n+        final RequestLogAccess parentLog = ctx.log();\n+        final RequestLog partial = parentLog.partial();\n+        final RequestLogBuilder logBuilder = derived.logBuilder();\n+        // serializationFormat is always not null, so this is fine.\n+        logBuilder.serializationFormat(partial.serializationFormat());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671f91322550bfb61ad8a7ca4d2c9650598e4e37"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5NzcyMA==", "bodyText": "As I said before, addChild can be called not just by RetryingClient, but other places because it's a public API.\nWe do not know which properties we have to copy from the parent to the child.", "url": "https://github.com/line/armeria/pull/2560#discussion_r390697720", "createdAt": "2020-03-11T01:18:55Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "diffHunk": "@@ -270,11 +274,57 @@ protected static ClientRequestContext newDerivedContext(ClientRequestContext ctx\n                                                             boolean initialAttempt) {\n         final RequestId id = ctx.options().requestIdGenerator().get();\n         final EndpointGroup endpointGroup = ctx.endpointGroup();\n+        final ClientRequestContext derived;\n         if (endpointGroup != null && !initialAttempt) {\n-            return ctx.newDerivedContext(id, req, rpcReq, endpointGroup.select(ctx));\n+            derived = ctx.newDerivedContext(id, req, rpcReq, endpointGroup.select(ctx));\n         } else {\n-            return ctx.newDerivedContext(id, req, rpcReq);\n+            derived = ctx.newDerivedContext(id, req, rpcReq);\n         }\n+\n+        final RequestLogAccess parentLog = ctx.log();\n+        final RequestLog partial = parentLog.partial();\n+        final RequestLogBuilder logBuilder = derived.logBuilder();\n+        // serializationFormat is always not null, so this is fine.\n+        logBuilder.serializationFormat(partial.serializationFormat());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4Mjc3Ng=="}, "originalCommit": {"oid": "671f91322550bfb61ad8a7ca4d2c9650598e4e37"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcwOTkxNQ==", "bodyText": "I understood, thanks for the explanation! \ud83d\ude00", "url": "https://github.com/line/armeria/pull/2560#discussion_r390709915", "createdAt": "2020-03-11T02:11:09Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "diffHunk": "@@ -270,11 +274,57 @@ protected static ClientRequestContext newDerivedContext(ClientRequestContext ctx\n                                                             boolean initialAttempt) {\n         final RequestId id = ctx.options().requestIdGenerator().get();\n         final EndpointGroup endpointGroup = ctx.endpointGroup();\n+        final ClientRequestContext derived;\n         if (endpointGroup != null && !initialAttempt) {\n-            return ctx.newDerivedContext(id, req, rpcReq, endpointGroup.select(ctx));\n+            derived = ctx.newDerivedContext(id, req, rpcReq, endpointGroup.select(ctx));\n         } else {\n-            return ctx.newDerivedContext(id, req, rpcReq);\n+            derived = ctx.newDerivedContext(id, req, rpcReq);\n         }\n+\n+        final RequestLogAccess parentLog = ctx.log();\n+        final RequestLog partial = parentLog.partial();\n+        final RequestLogBuilder logBuilder = derived.logBuilder();\n+        // serializationFormat is always not null, so this is fine.\n+        logBuilder.serializationFormat(partial.serializationFormat());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4Mjc3Ng=="}, "originalCommit": {"oid": "671f91322550bfb61ad8a7ca4d2c9650598e4e37"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTM2NzIzOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientWithLoggingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMjozMDoxNlrOF0nUsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzo0Njo1NlrOF0oXPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxNDU0NA==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        await().untilAsserted(() -> assertThat(logResult.size()).isEqualTo(successLogIndex));\n          \n          \n            \n                        await().untilAsserted(() -> assertThat(logResult).hasSize(successLogIndex));", "url": "https://github.com/line/armeria/pull/2560#discussion_r390714544", "createdAt": "2020-03-11T02:30:16Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientWithLoggingTest.java", "diffHunk": "@@ -114,11 +118,38 @@ void retryingThenLogging() {\n                                           .decorator(loggingDecorator())\n                                           .decorator(RetryingClient.builder(retryStrategy)\n                                                                    .newDecorator())\n+                                          .decorator((delegate, ctx, req) -> {\n+                                              final RequestLogBuilder logBuilder = ctx.logBuilder();\n+                                              logBuilder.name(\"foo\");\n+                                              logBuilder.requestContent(\"bar\", null);\n+                                              logBuilder.deferRequestContentPreview();\n+                                              logBuilder.deferResponseContent();\n+                                              return delegate.execute(ctx, req);\n+                                          })\n                                           .build();\n-        assertThat(client.get(\"/hello\").aggregate().join().contentUtf8()).isEqualTo(\"hello\");\n+        try (ClientRequestContextCaptor captor = Clients.newContextCaptor()) {\n+            assertThat(client.get(\"/hello\").aggregate().join().contentUtf8()).isEqualTo(\"hello\");\n+            final RequestLogBuilder logBuilder = captor.get().logBuilder();\n+            logBuilder.requestContentPreview(\"baz\");\n+\n+            await().untilAsserted(() -> assertThat(logResult.size()).isEqualTo(successLogIndex));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671f91322550bfb61ad8a7ca4d2c9650598e4e37"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczMTU4Mg==", "bodyText": "Thanks, fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2560#discussion_r390731582", "createdAt": "2020-03-11T03:46:56Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientWithLoggingTest.java", "diffHunk": "@@ -114,11 +118,38 @@ void retryingThenLogging() {\n                                           .decorator(loggingDecorator())\n                                           .decorator(RetryingClient.builder(retryStrategy)\n                                                                    .newDecorator())\n+                                          .decorator((delegate, ctx, req) -> {\n+                                              final RequestLogBuilder logBuilder = ctx.logBuilder();\n+                                              logBuilder.name(\"foo\");\n+                                              logBuilder.requestContent(\"bar\", null);\n+                                              logBuilder.deferRequestContentPreview();\n+                                              logBuilder.deferResponseContent();\n+                                              return delegate.execute(ctx, req);\n+                                          })\n                                           .build();\n-        assertThat(client.get(\"/hello\").aggregate().join().contentUtf8()).isEqualTo(\"hello\");\n+        try (ClientRequestContextCaptor captor = Clients.newContextCaptor()) {\n+            assertThat(client.get(\"/hello\").aggregate().join().contentUtf8()).isEqualTo(\"hello\");\n+            final RequestLogBuilder logBuilder = captor.get().logBuilder();\n+            logBuilder.requestContentPreview(\"baz\");\n+\n+            await().untilAsserted(() -> assertThat(logResult.size()).isEqualTo(successLogIndex));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxNDU0NA=="}, "originalCommit": {"oid": "671f91322550bfb61ad8a7ca4d2c9650598e4e37"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTM2ODA5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientWithLoggingTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMjozMDo0OVrOF0nVLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMjozMDo0OVrOF0nVLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxNDY3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        assertThat(logResult.size()).isEqualTo(successLogIndex);\n          \n          \n            \n                        assertThat(logResult).hasSize(successLogIndex);", "url": "https://github.com/line/armeria/pull/2560#discussion_r390714671", "createdAt": "2020-03-11T02:30:49Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientWithLoggingTest.java", "diffHunk": "@@ -114,11 +118,38 @@ void retryingThenLogging() {\n                                           .decorator(loggingDecorator())\n                                           .decorator(RetryingClient.builder(retryStrategy)\n                                                                    .newDecorator())\n+                                          .decorator((delegate, ctx, req) -> {\n+                                              final RequestLogBuilder logBuilder = ctx.logBuilder();\n+                                              logBuilder.name(\"foo\");\n+                                              logBuilder.requestContent(\"bar\", null);\n+                                              logBuilder.deferRequestContentPreview();\n+                                              logBuilder.deferResponseContent();\n+                                              return delegate.execute(ctx, req);\n+                                          })\n                                           .build();\n-        assertThat(client.get(\"/hello\").aggregate().join().contentUtf8()).isEqualTo(\"hello\");\n+        try (ClientRequestContextCaptor captor = Clients.newContextCaptor()) {\n+            assertThat(client.get(\"/hello\").aggregate().join().contentUtf8()).isEqualTo(\"hello\");\n+            final RequestLogBuilder logBuilder = captor.get().logBuilder();\n+            logBuilder.requestContentPreview(\"baz\");\n+\n+            await().untilAsserted(() -> assertThat(logResult.size()).isEqualTo(successLogIndex));\n+            TimeUnit.SECONDS.sleep(1);\n+            // The last log is not complete because the parent log doesn't set the response content yet.\n+            assertThat(logResult.size()).isEqualTo(successLogIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671f91322550bfb61ad8a7ca4d2c9650598e4e37"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2745, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}