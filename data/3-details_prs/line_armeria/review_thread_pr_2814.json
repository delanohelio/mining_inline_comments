{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MzEzNzIx", "number": 2814, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODo0MToyOFrOEGp_VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODo0NDo1MVrOEGqEfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDE0ODY4OnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/ProtoReflectionServiceInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODo0MToyOFrOGllgfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODo0NTozOVrOGllq_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA2NTAyMg==", "bodyText": "How about creating eagerly?", "url": "https://github.com/line/armeria/pull/2814#discussion_r442065022", "createdAt": "2020-06-18T08:41:28Z", "author": {"login": "trustin"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/ProtoReflectionServiceInterceptor.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.grpc;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import io.grpc.Context;\n+import io.grpc.Contexts;\n+import io.grpc.InternalServer;\n+import io.grpc.Metadata;\n+import io.grpc.Server;\n+import io.grpc.ServerCall;\n+import io.grpc.ServerCall.Listener;\n+import io.grpc.ServerCallHandler;\n+import io.grpc.ServerInterceptor;\n+import io.grpc.ServerServiceDefinition;\n+\n+final class ProtoReflectionServiceInterceptor implements ServerInterceptor {\n+\n+    static final ProtoReflectionServiceInterceptor INSTANCE = new ProtoReflectionServiceInterceptor();\n+\n+    @Nullable\n+    private static Server dummyServer;\n+\n+    private ProtoReflectionServiceInterceptor() {}\n+\n+    @Override\n+    public <I, O> Listener<I> interceptCall(ServerCall<I, O> call, Metadata headers,\n+                                            ServerCallHandler<I, O> next) {\n+        if (dummyServer == null) {\n+            synchronized (INSTANCE) {\n+                dummyServer = newDummyServer();\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b642ec4c12526bbd0c868f899bee58bd212b8924"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA2NzcwOQ==", "bodyText": "Oh, I think we can create the dummy server when serviceAdded(...) is called and use that in this interceptor.", "url": "https://github.com/line/armeria/pull/2814#discussion_r442067709", "createdAt": "2020-06-18T08:45:39Z", "author": {"login": "ikhoon"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/ProtoReflectionServiceInterceptor.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.grpc;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import io.grpc.Context;\n+import io.grpc.Contexts;\n+import io.grpc.InternalServer;\n+import io.grpc.Metadata;\n+import io.grpc.Server;\n+import io.grpc.ServerCall;\n+import io.grpc.ServerCall.Listener;\n+import io.grpc.ServerCallHandler;\n+import io.grpc.ServerInterceptor;\n+import io.grpc.ServerServiceDefinition;\n+\n+final class ProtoReflectionServiceInterceptor implements ServerInterceptor {\n+\n+    static final ProtoReflectionServiceInterceptor INSTANCE = new ProtoReflectionServiceInterceptor();\n+\n+    @Nullable\n+    private static Server dummyServer;\n+\n+    private ProtoReflectionServiceInterceptor() {}\n+\n+    @Override\n+    public <I, O> Listener<I> interceptCall(ServerCall<I, O> call, Metadata headers,\n+                                            ServerCallHandler<I, O> next) {\n+        if (dummyServer == null) {\n+            synchronized (INSTANCE) {\n+                dummyServer = newDummyServer();\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA2NTAyMg=="}, "originalCommit": {"oid": "b642ec4c12526bbd0c868f899bee58bd212b8924"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDE0OTQ5OnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODo0MTozOVrOGllg_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODo1ODo1M1rOGlmL7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA2NTE0OA==", "bodyText": "Instead of adding here, can't we add in the same place we called notifyOnBuild before so we can use the static server config instead of request context?", "url": "https://github.com/line/armeria/pull/2814#discussion_r442065148", "createdAt": "2020-06-18T08:41:39Z", "author": {"login": "anuraaga"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java", "diffHunk": "@@ -107,11 +107,13 @@ public GrpcServiceBuilder addService(ServerServiceDefinition service) {\n      */\n     public GrpcServiceBuilder addService(BindableService bindableService) {\n         if (bindableService instanceof ProtoReflectionService) {\n-            checkState(protoReflectionService == null,\n+            checkState(!isProtoReflectionServiceSet,\n                        \"Attempting to add a ProtoReflectionService but one is already present. \" +\n                        \"ProtoReflectionService must only be added once.\");\n-            protoReflectionService = (ProtoReflectionService) bindableService;\n-        }\n+            isProtoReflectionServiceSet = true;\n+            return addService(ServerInterceptors.intercept(bindableService,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b642ec4c12526bbd0c868f899bee58bd212b8924"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA2NTg1NA==", "bodyText": "Ah nevermind guess we can't add more services there :)", "url": "https://github.com/line/armeria/pull/2814#discussion_r442065854", "createdAt": "2020-06-18T08:42:49Z", "author": {"login": "anuraaga"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java", "diffHunk": "@@ -107,11 +107,13 @@ public GrpcServiceBuilder addService(ServerServiceDefinition service) {\n      */\n     public GrpcServiceBuilder addService(BindableService bindableService) {\n         if (bindableService instanceof ProtoReflectionService) {\n-            checkState(protoReflectionService == null,\n+            checkState(!isProtoReflectionServiceSet,\n                        \"Attempting to add a ProtoReflectionService but one is already present. \" +\n                        \"ProtoReflectionService must only be added once.\");\n-            protoReflectionService = (ProtoReflectionService) bindableService;\n-        }\n+            isProtoReflectionServiceSet = true;\n+            return addService(ServerInterceptors.intercept(bindableService,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA2NTE0OA=="}, "originalCommit": {"oid": "b642ec4c12526bbd0c868f899bee58bd212b8924"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA3NjE0Mg==", "bodyText": "The creation logic is moved back to FramedGrpcService. \ud83d\ude00", "url": "https://github.com/line/armeria/pull/2814#discussion_r442076142", "createdAt": "2020-06-18T08:58:53Z", "author": {"login": "ikhoon"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java", "diffHunk": "@@ -107,11 +107,13 @@ public GrpcServiceBuilder addService(ServerServiceDefinition service) {\n      */\n     public GrpcServiceBuilder addService(BindableService bindableService) {\n         if (bindableService instanceof ProtoReflectionService) {\n-            checkState(protoReflectionService == null,\n+            checkState(!isProtoReflectionServiceSet,\n                        \"Attempting to add a ProtoReflectionService but one is already present. \" +\n                        \"ProtoReflectionService must only be added once.\");\n-            protoReflectionService = (ProtoReflectionService) bindableService;\n-        }\n+            isProtoReflectionServiceSet = true;\n+            return addService(ServerInterceptors.intercept(bindableService,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA2NTE0OA=="}, "originalCommit": {"oid": "b642ec4c12526bbd0c868f899bee58bd212b8924"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDE2MTg5OnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/ProtoReflectionServiceInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODo0NDo1MVrOGllpCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTowNzo1N1rOGlmh7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA2NzIwOA==", "bodyText": "Ah - is this supposed to be static? If so this interceptor can be static too, and yeah back to the idea we can call ProtoReflectionServiceInterceptor.addServerConfig() where we used to call notifyOnBuild", "url": "https://github.com/line/armeria/pull/2814#discussion_r442067208", "createdAt": "2020-06-18T08:44:51Z", "author": {"login": "anuraaga"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/ProtoReflectionServiceInterceptor.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.grpc;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import io.grpc.Context;\n+import io.grpc.Contexts;\n+import io.grpc.InternalServer;\n+import io.grpc.Metadata;\n+import io.grpc.Server;\n+import io.grpc.ServerCall;\n+import io.grpc.ServerCall.Listener;\n+import io.grpc.ServerCallHandler;\n+import io.grpc.ServerInterceptor;\n+import io.grpc.ServerServiceDefinition;\n+\n+final class ProtoReflectionServiceInterceptor implements ServerInterceptor {\n+\n+    static final ProtoReflectionServiceInterceptor INSTANCE = new ProtoReflectionServiceInterceptor();\n+\n+    @Nullable\n+    private static Server dummyServer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b642ec4c12526bbd0c868f899bee58bd212b8924"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA4MTc3Mg==", "bodyText": "Replied at #2814 (comment)", "url": "https://github.com/line/armeria/pull/2814#discussion_r442081772", "createdAt": "2020-06-18T09:07:57Z", "author": {"login": "ikhoon"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/ProtoReflectionServiceInterceptor.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.grpc;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import io.grpc.Context;\n+import io.grpc.Contexts;\n+import io.grpc.InternalServer;\n+import io.grpc.Metadata;\n+import io.grpc.Server;\n+import io.grpc.ServerCall;\n+import io.grpc.ServerCall.Listener;\n+import io.grpc.ServerCallHandler;\n+import io.grpc.ServerInterceptor;\n+import io.grpc.ServerServiceDefinition;\n+\n+final class ProtoReflectionServiceInterceptor implements ServerInterceptor {\n+\n+    static final ProtoReflectionServiceInterceptor INSTANCE = new ProtoReflectionServiceInterceptor();\n+\n+    @Nullable\n+    private static Server dummyServer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA2NzIwOA=="}, "originalCommit": {"oid": "b642ec4c12526bbd0c868f899bee58bd212b8924"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2362, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}