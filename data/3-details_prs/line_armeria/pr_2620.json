{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyODEwNDE5", "number": 2620, "title": "Fix the ResponseHeaders log to contain additional headers", "bodyText": "Motivation:\nAfter #2372 merged, the additional headers are not contained to the ResponseHeaders of the log.\nWe should fix it to contain.\nModifications:\n\nSplit HttpObjectEncoder.writeHeaders() to writeHeaders() and writeTrailers().\nInterface HttpObjectEncoder.\n\nAdd ClientHttpObjectEncoder and ServerHttpObjectEncoder.\n\n\nFix a bug where an exception is not wrapped with UnprocessedRequestException when it fails to write a RequestHeaders.\nFix a bug where additional headers is added to informational headers.\nFix a bug where ResponseHeaders log does not contain additional headers.\nFix a bug where response trailers is not logged\nRefactor HttpResponseSubscriber and HttpObjectEncoder\n\nResult:\n\nYou now can see the additional headers in RequestLog.\n\nTo-do:\n\nIntroduce CompositeHeaders to reduce the performance overhead.", "createdAt": "2020-03-24T06:52:10Z", "url": "https://github.com/line/armeria/pull/2620", "merged": true, "mergeCommit": {"oid": "79cda1df1dd4b7d5056ad385e5484d384ed72a14"}, "closed": true, "closedAt": "2020-03-25T06:29:09Z", "author": {"login": "minwoox"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQtPNugH2gAyMzkyODEwNDE5OjBiYjViYTY5OTYzNTFiY2FjYTc5YjA5YzYzNDY1MGQyZmI3NzU1NGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRBK4TgFqTM4MDg3NjU0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0bb5ba6996351bcaca79b09c634650d2fb77554d", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/0bb5ba6996351bcaca79b09c634650d2fb77554d", "committedDate": "2020-03-24T06:51:13Z", "message": "Fix the ResponseHeaders log to contain additional headers\nMotivation:\nAfter #2372 merged, the additional headers are not contained to the `ResponseHeaders` of the log.\nWe should fix it to contain.\n\nModifications:\n- Split `HttpObjectEncoder.writeHeaders()` to `writeHeaders()` and `writeTrailers()`.\n- Interface `HttpObjectEncoder`.\n  - Add `ClientHttpObjectEncoder` and `ServerHttpObjectEncoder`.\n- Fix a bug where an exception is not wrapped with `UnprocessedRequestException` when fails to write a `RequestHeaders`.\n- Fix a bug where additional headers is added to informational headers.\n- Fix a bug where `ResponseHeaders` log does not contain additional headers.\n- Fix a bug where response trailers is not logged\n- Refactor `HttpResponseSubscriber` and `HttpObjectEncoder`\n\nResult:\n- You now can see the additional headers in `RequestLog`.\n\nTo-do:\n- Introduce `CompositeHeaders` to reduce performance overhead."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab018403bfef8b9a350e30872a848b4a332c5bb4", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/ab018403bfef8b9a350e30872a848b4a332c5bb4", "committedDate": "2020-03-24T07:06:12Z", "message": "Change to close channel"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNjI0ODE0", "url": "https://github.com/line/armeria/pull/2620#pullrequestreview-380624814", "createdAt": "2020-03-24T19:19:01Z", "commit": {"oid": "ab018403bfef8b9a350e30872a848b4a332c5bb4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOToxOTowMlrOF6_hKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOToxOTowMlrOF6_hKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwMjQxMA==", "bodyText": "Can we remove this empty check? \ud83e\udd14\nIt seems additionalHeaders is always not empty here.", "url": "https://github.com/line/armeria/pull/2620#discussion_r397402410", "createdAt": "2020-03-24T19:19:02Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpHeadersUtil.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_REQUEST_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_RESPONSE_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.isTrailerBlacklisted;\n+\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpHeadersBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.ResponseHeadersBuilder;\n+\n+import io.netty.util.AsciiString;\n+\n+// This class will be removed after introducing CompositeHeaders.\n+public final class HttpHeadersUtil {\n+\n+    public static ResponseHeaders composeResponseHeaders(ResponseHeaders headers,\n+                                                         HttpHeaders additionalHeaders) {\n+        if (additionalHeaders.isEmpty()) {\n+            return headers;\n+        }\n+\n+        final ResponseHeadersBuilder builder = headers.toBuilder();\n+        if (!additionalHeaders.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab018403bfef8b9a350e30872a848b4a332c5bb4"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNjI1MjA1", "url": "https://github.com/line/armeria/pull/2620#pullrequestreview-380625205", "createdAt": "2020-03-24T19:19:34Z", "commit": {"oid": "ab018403bfef8b9a350e30872a848b4a332c5bb4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOToxOTozNFrOF6_icQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOToxOTozNFrOF6_icQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwMjczNw==", "bodyText": "ditto : Can we remove this empty check? \ud83e\udd14\nIt seems additionalHeaders is always not empty here.", "url": "https://github.com/line/armeria/pull/2620#discussion_r397402737", "createdAt": "2020-03-24T19:19:34Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpHeadersUtil.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_REQUEST_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_RESPONSE_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.isTrailerBlacklisted;\n+\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpHeadersBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.ResponseHeadersBuilder;\n+\n+import io.netty.util.AsciiString;\n+\n+// This class will be removed after introducing CompositeHeaders.\n+public final class HttpHeadersUtil {\n+\n+    public static ResponseHeaders composeResponseHeaders(ResponseHeaders headers,\n+                                                         HttpHeaders additionalHeaders) {\n+        if (additionalHeaders.isEmpty()) {\n+            return headers;\n+        }\n+\n+        final ResponseHeadersBuilder builder = headers.toBuilder();\n+        if (!additionalHeaders.isEmpty()) {\n+            for (AsciiString name : additionalHeaders.names()) {\n+                if (!ADDITIONAL_RESPONSE_HEADER_BLACKLIST.contains(name)) {\n+                    builder.remove(name);\n+                    additionalHeaders.forEachValue(name, value -> builder.add(name, value));\n+                }\n+            }\n+        }\n+        return builder.build();\n+    }\n+\n+    public static RequestHeaders composeRequestHeaders(RequestHeaders headers,\n+                                                       HttpHeaders additionalHeaders) {\n+        if (additionalHeaders.isEmpty()) {\n+            return headers;\n+        }\n+\n+        final RequestHeadersBuilder builder = headers.toBuilder();\n+        if (!additionalHeaders.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab018403bfef8b9a350e30872a848b4a332c5bb4"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNjMzODg4", "url": "https://github.com/line/armeria/pull/2620#pullrequestreview-380633888", "createdAt": "2020-03-24T19:32:22Z", "commit": {"oid": "ab018403bfef8b9a350e30872a848b4a332c5bb4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTozMjoyMlrOF6_-Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTozMjoyMlrOF6_-Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwOTgxNQ==", "bodyText": "Question :\nan is correct? This is so confusing to me \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2620#discussion_r397409815", "createdAt": "2020-03-24T19:32:22Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/ClientHttpObjectEncoder.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.ClosedSessionException;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.internal.common.HttpObjectEncoder;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+\n+/**\n+ * Converts an {@link HttpObject} into a protocol-specific object and writes it into a {@link Channel}.\n+ */\n+public interface ClientHttpObjectEncoder extends HttpObjectEncoder {\n+\n+    /**\n+     * Writes an {@link RequestHeaders}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab018403bfef8b9a350e30872a848b4a332c5bb4"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNjQ5NTIy", "url": "https://github.com/line/armeria/pull/2620#pullrequestreview-380649522", "createdAt": "2020-03-24T19:55:57Z", "commit": {"oid": "ab018403bfef8b9a350e30872a848b4a332c5bb4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTo1NTo1N1rOF7AwXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTo1NTo1N1rOF7AwXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyMjY4NQ==", "bodyText": "what about additionalHeaders to additionalTrailers \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2620#discussion_r397422685", "createdAt": "2020-03-24T19:55:57Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpHeadersUtil.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_REQUEST_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_RESPONSE_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.isTrailerBlacklisted;\n+\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpHeadersBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.ResponseHeadersBuilder;\n+\n+import io.netty.util.AsciiString;\n+\n+// This class will be removed after introducing CompositeHeaders.\n+public final class HttpHeadersUtil {\n+\n+    public static ResponseHeaders composeResponseHeaders(ResponseHeaders headers,\n+                                                         HttpHeaders additionalHeaders) {\n+        if (additionalHeaders.isEmpty()) {\n+            return headers;\n+        }\n+\n+        final ResponseHeadersBuilder builder = headers.toBuilder();\n+        if (!additionalHeaders.isEmpty()) {\n+            for (AsciiString name : additionalHeaders.names()) {\n+                if (!ADDITIONAL_RESPONSE_HEADER_BLACKLIST.contains(name)) {\n+                    builder.remove(name);\n+                    additionalHeaders.forEachValue(name, value -> builder.add(name, value));\n+                }\n+            }\n+        }\n+        return builder.build();\n+    }\n+\n+    public static RequestHeaders composeRequestHeaders(RequestHeaders headers,\n+                                                       HttpHeaders additionalHeaders) {\n+        if (additionalHeaders.isEmpty()) {\n+            return headers;\n+        }\n+\n+        final RequestHeadersBuilder builder = headers.toBuilder();\n+        if (!additionalHeaders.isEmpty()) {\n+            for (AsciiString name : additionalHeaders.names()) {\n+                if (!ADDITIONAL_REQUEST_HEADER_BLACKLIST.contains(name)) {\n+                    builder.remove(name);\n+                    additionalHeaders.forEachValue(name, value -> builder.add(name, value));\n+                }\n+            }\n+        }\n+        return builder.build();\n+    }\n+\n+    public static HttpHeaders composeTrailers(HttpHeaders headers, HttpHeaders additionalHeaders) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab018403bfef8b9a350e30872a848b4a332c5bb4"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6cac696de3cbb107b5a3d30d5a1e770416ac633", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/e6cac696de3cbb107b5a3d30d5a1e770416ac633", "committedDate": "2020-03-25T00:39:27Z", "message": "Address comments by @jyblue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efd7738b673baac68d7f790c5d592e14660238d2", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/efd7738b673baac68d7f790c5d592e14660238d2", "committedDate": "2020-03-25T01:05:56Z", "message": "Fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODAyMjQ0", "url": "https://github.com/line/armeria/pull/2620#pullrequestreview-380802244", "createdAt": "2020-03-25T01:20:08Z", "commit": {"oid": "efd7738b673baac68d7f790c5d592e14660238d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMToyMDowOFrOF7I6tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMToyMDowOFrOF7I6tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1NjQwNA==", "bodyText": "nit: // TODO(minwoox): Replace this class with CompositeHeaders.", "url": "https://github.com/line/armeria/pull/2620#discussion_r397556404", "createdAt": "2020-03-25T01:20:08Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpHeadersUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_REQUEST_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_RESPONSE_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.isTrailerBlacklisted;\n+\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpHeadersBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.ResponseHeadersBuilder;\n+\n+import io.netty.util.AsciiString;\n+\n+// This class will be removed after introducing CompositeHeaders.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd7738b673baac68d7f790c5d592e14660238d2"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODAyMzUw", "url": "https://github.com/line/armeria/pull/2620#pullrequestreview-380802350", "createdAt": "2020-03-25T01:20:31Z", "commit": {"oid": "efd7738b673baac68d7f790c5d592e14660238d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMToyMDozMlrOF7I7Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMToyMDozMlrOF7I7Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1NjUxMA==", "bodyText": "compose -> merge?", "url": "https://github.com/line/armeria/pull/2620#discussion_r397556510", "createdAt": "2020-03-25T01:20:32Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpHeadersUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_REQUEST_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_RESPONSE_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.isTrailerBlacklisted;\n+\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpHeadersBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.ResponseHeadersBuilder;\n+\n+import io.netty.util.AsciiString;\n+\n+// This class will be removed after introducing CompositeHeaders.\n+public final class HttpHeadersUtil {\n+\n+    public static ResponseHeaders composeResponseHeaders(ResponseHeaders headers,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd7738b673baac68d7f790c5d592e14660238d2"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODAzMTIz", "url": "https://github.com/line/armeria/pull/2620#pullrequestreview-380803123", "createdAt": "2020-03-25T01:23:20Z", "commit": {"oid": "efd7738b673baac68d7f790c5d592e14660238d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMToyMzoyMFrOF7I97g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMToyMzoyMFrOF7I97g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1NzIzMA==", "bodyText": "Probably better reusing a single instance for the case where endOfStream is false?", "url": "https://github.com/line/armeria/pull/2620#discussion_r397557230", "createdAt": "2020-03-25T01:23:20Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -135,20 +144,33 @@ public void onNext(HttpObject o) {\n \n                 final ResponseHeaders headers = (ResponseHeaders) o;\n                 final HttpStatus status = headers.status();\n+                final ResponseHeaders composedHeaders;\n                 if (status.isInformational()) {\n-                    // Needs non-informational headers.\n-                    break;\n-                }\n-\n-                if (req.method() == HttpMethod.HEAD) {\n-                    endOfStream = true;\n-                } else if (status.isContentAlwaysEmpty()) {\n-                    state = State.NEEDS_TRAILERS;\n+                    if (endOfStream) {\n+                        failAndRespond(new IllegalStateException(\n+                                \"published an informational headers whose endOfStream is true: \" + o +\n+                                \" (service: \" + service() + ')'));\n+                        return;\n+                    }\n+                    composedHeaders = headers;\n                 } else {\n-                    state = State.NEEDS_DATA_OR_TRAILERS;\n+                    if (req.method() == HttpMethod.HEAD) {\n+                        endOfStream = true;\n+                    } else if (status.isContentAlwaysEmpty()) {\n+                        state = State.NEEDS_TRAILERS;\n+                    } else {\n+                        state = State.NEEDS_DATA_OR_TRAILERS;\n+                    }\n+                    if (endOfStream) {\n+                        setDone();\n+                    }\n+                    composedHeaders = composeResponseHeaders(headers, reqCtx.additionalResponseHeaders());\n+                    logBuilder().responseHeaders(composedHeaders);\n                 }\n \n-                logBuilder().responseHeaders(headers);\n+                responseEncoder.writeHeaders(req.id(), req.streamId(), composedHeaders, endOfStream,\n+                                             reqCtx.additionalResponseTrailers().isEmpty())\n+                               .addListener(new WriteHeadersFutureListener(endOfStream));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd7738b673baac68d7f790c5d592e14660238d2"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODA0Mzc3", "url": "https://github.com/line/armeria/pull/2620#pullrequestreview-380804377", "createdAt": "2020-03-25T01:27:28Z", "commit": {"oid": "efd7738b673baac68d7f790c5d592e14660238d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMToyNzoyOFrOF7JCTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMToyNzoyOFrOF7JCTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1ODM0OA==", "bodyText": "Would it be possible to piggy-bag this into addCallbackAndFlush(), so that we keep the number of listeners minimal?", "url": "https://github.com/line/armeria/pull/2620#discussion_r397558348", "createdAt": "2020-03-25T01:27:28Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -389,9 +371,28 @@ private void failAndRespond(Throwable cause, AggregatedHttpResponse res, Http2Er\n         addCallbackAndFlush(cause, oldState, future);\n     }\n \n+    private void maybeLogFirstResponseBytesTransferred(ChannelFuture future) {\n+        future.addListener((ChannelFuture f) -> {\n+            if (f.isSuccess()) {\n+                maybeLogFirstResponseBytesTransferred();\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd7738b673baac68d7f790c5d592e14660238d2"}, "originalPosition": 385}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "431599894a79742cdd45a8ba776d2261e0781c2d", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/431599894a79742cdd45a8ba776d2261e0781c2d", "committedDate": "2020-03-25T02:12:00Z", "message": "Address comments by @trustin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eede2ebd48086a8644d99e4fa63e41667caf989b", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/eede2ebd48086a8644d99e4fa63e41667caf989b", "committedDate": "2020-03-25T02:19:24Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODE5NjU0", "url": "https://github.com/line/armeria/pull/2620#pullrequestreview-380819654", "createdAt": "2020-03-25T02:21:43Z", "commit": {"oid": "eede2ebd48086a8644d99e4fa63e41667caf989b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fd2a759f61efd3f82aaaff1910049b0f0f56c57", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/8fd2a759f61efd3f82aaaff1910049b0f0f56c57", "committedDate": "2020-03-25T02:42:18Z", "message": "Fix reset"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODI0NTcx", "url": "https://github.com/line/armeria/pull/2620#pullrequestreview-380824571", "createdAt": "2020-03-25T02:40:13Z", "commit": {"oid": "eede2ebd48086a8644d99e4fa63e41667caf989b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjo0MDoxM1rOF7KMyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo0NzoxMFrOF7LPFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3NzQxOA==", "bodyText": "nit\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final RequestHeaders composed = mergeRequestHeaders(firstHeaders, ctx.additionalRequestHeaders());\n          \n          \n            \n                    final RequestHeaders merged = mergeRequestHeaders(firstHeaders, ctx.additionalRequestHeaders());", "url": "https://github.com/line/armeria/pull/2620#discussion_r397577418", "createdAt": "2020-03-25T02:40:13Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -192,16 +158,16 @@ private void writeFirstHeader(HttpSession session) {\n \n         final SessionProtocol protocol = session.protocol();\n         assert protocol != null;\n-        logBuilder.requestHeaders(firstHeaders);\n-\n         if (request.isEmpty()) {\n             state = State.DONE;\n         } else {\n             state = State.NEEDS_DATA_OR_TRAILERS;\n         }\n-        final ChannelFuture future = encoder.writeHeaders(id, streamId(), firstHeaders, request.isEmpty(),\n-                                                          ctx.additionalRequestHeaders(), HttpHeaders.of());\n-        future.addListener(this);\n+\n+        final RequestHeaders composed = mergeRequestHeaders(firstHeaders, ctx.additionalRequestHeaders());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eede2ebd48086a8644d99e4fa63e41667caf989b"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5MDE3Mw==", "bodyText": "Couldn't we use loggedRequestFirstBytesTransferred for UnprocessedRequestException?", "url": "https://github.com/line/armeria/pull/2620#discussion_r397590173", "createdAt": "2020-03-25T03:28:53Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -370,4 +334,68 @@ private boolean cancelTimeout() {\n         this.timeoutFuture = null;\n         return timeoutFuture.cancel(false);\n     }\n+\n+    private WriteFutureListener writeFutureListener(boolean isRequestHeadersFuture) {\n+        if (!isRequestHeadersFuture) {\n+            // Reuse in case sending streaming requests.\n+            if (cachedWriteFutureListener == null) {\n+                cachedWriteFutureListener = new WriteFutureListener(false);\n+            }\n+            return cachedWriteFutureListener;\n+        }\n+        return new WriteFutureListener(true);\n+    }\n+\n+    private class WriteFutureListener implements ChannelFutureListener {\n+\n+        private final boolean isRequestHeadersFuture;\n+\n+        WriteFutureListener(boolean isRequestHeadersFuture) {\n+            this.isRequestHeadersFuture = isRequestHeadersFuture;\n+        }\n+\n+        @Override\n+        public void operationComplete(ChannelFuture future) throws Exception {\n+            // If a message has been sent out, cancel the timeout for starting a request.\n+            cancelTimeout();\n+\n+            try (SafeCloseable ignored = RequestContextUtil.pop()) {\n+                if (future.isSuccess()) {\n+                    // The first write is always the first headers, so log that we finished our first transfer\n+                    // over the wire.\n+                    if (!loggedRequestFirstBytesTransferred) {\n+                        logBuilder.requestFirstBytesTransferred();\n+                        loggedRequestFirstBytesTransferred = true;\n+                    }\n+\n+                    if (state == State.DONE) {\n+                        logBuilder.endRequest();\n+                        // Successfully sent the request; schedule the response timeout.\n+                        assert responseWrapper != null;\n+                        responseWrapper.initTimeout();\n+                    }\n+\n+                    // Request more messages regardless whether the state is DONE. It makes the producer have\n+                    // a chance to produce the last call such as 'onComplete' and 'onError' when there are\n+                    // no more messages it can produce.\n+                    if (!isSubscriptionCompleted) {\n+                        assert subscription != null;\n+                        subscription.request(1);\n+                    }\n+                    return;\n+                }\n+\n+                if (isRequestHeadersFuture) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fd2a759f61efd3f82aaaff1910049b0f0f56c57"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NDE5Mg==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            final ResponseHeaders composedHeaders;\n          \n          \n            \n                            final ResponseHeaders mergedHeaders;", "url": "https://github.com/line/armeria/pull/2620#discussion_r397594192", "createdAt": "2020-03-25T03:46:17Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -135,20 +150,33 @@ public void onNext(HttpObject o) {\n \n                 final ResponseHeaders headers = (ResponseHeaders) o;\n                 final HttpStatus status = headers.status();\n+                final ResponseHeaders composedHeaders;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fd2a759f61efd3f82aaaff1910049b0f0f56c57"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NDM4OA==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                final HttpHeaders composed = mergeTrailers(trailers, reqCtx.additionalResponseTrailers());\n          \n          \n            \n                                final HttpHeaders merged = mergeTrailers(trailers, reqCtx.additionalResponseTrailers());", "url": "https://github.com/line/armeria/pull/2620#discussion_r397594388", "createdAt": "2020-03-25T03:47:10Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -169,14 +197,29 @@ public void onNext(HttpObject o) {\n                                 \" (service: \" + service() + ')'));\n                         return;\n                     }\n-                    logBuilder().responseTrailers(trailers);\n-\n-                    // Trailers always end the stream even if not explicitly set.\n-                    endOfStream = true;\n-                } else if (endOfStream) { // Last DATA frame\n-                    if (!additionalTrailers.isEmpty()) {\n-                        write(o, false);\n-                        o = HttpHeaders.of();\n+                    setDone();\n+                    final HttpHeaders composed = mergeTrailers(trailers, reqCtx.additionalResponseTrailers());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fd2a759f61efd3f82aaaff1910049b0f0f56c57"}, "originalPosition": 130}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODU4MzAy", "url": "https://github.com/line/armeria/pull/2620#pullrequestreview-380858302", "createdAt": "2020-03-25T04:55:46Z", "commit": {"oid": "8fd2a759f61efd3f82aaaff1910049b0f0f56c57"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb7635705379bbb5ece1f3f5905076b7f7d90bda", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/cb7635705379bbb5ece1f3f5905076b7f7d90bda", "committedDate": "2020-03-25T05:50:37Z", "message": "Address comments by @ikhoon"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODc2NTQ2", "url": "https://github.com/line/armeria/pull/2620#pullrequestreview-380876546", "createdAt": "2020-03-25T06:04:35Z", "commit": {"oid": "cb7635705379bbb5ece1f3f5905076b7f7d90bda"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 733, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}