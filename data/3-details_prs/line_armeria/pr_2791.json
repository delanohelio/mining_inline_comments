{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNjIxNjA2", "number": 2791, "title": "Support ServerSets service discovery", "bodyText": "Motivation:\nIt will be nice if we support ServerSets service discovery.\nModifications:\n\nAdd ZooKeeperDiscoverySpec and ZooKeeperRegistrationSpec for ServerSets\nRename ...Zookeeper... to ...ZooKeeper... (K is capital letter.)\n\nResult:\n\nClose #2673\nYou can now register an Armeria server and discover services with the ServerSets compatible format.", "createdAt": "2020-06-09T08:27:27Z", "url": "https://github.com/line/armeria/pull/2791", "merged": true, "mergeCommit": {"oid": "78280bc17988ae81ad292fc7dde8fbdec60e82d3"}, "closed": true, "closedAt": "2020-06-16T09:17:08Z", "author": {"login": "minwoox"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpgv-8gH2gAyNDMxNjIxNjA2OmEzZWI5OGM1NTZhZGU4NzE5MzIyM2E3MDllMDgzN2U2MDY4NmUwY2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrxEkjAFqTQzMTI4MDkyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a3eb98c556ade87193223a709e0837e60686e0cb", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/a3eb98c556ade87193223a709e0837e60686e0cb", "committedDate": "2020-06-09T08:26:21Z", "message": "Support ServerSets service discovery\nMotivation:\nIt will be nice if we support `ServerSets` service discovery.\n\nModifications:\n- Add `ZooKeeperDiscoverySpec` and `ZooKeeperRegistrationSpec` for `ServerSets`\n- Rename `...Zookeeper...` to `...ZooKeeper...` (K is capital letter.)\n\nResult:\n- Close #2673\n- You can now register an Armeria server and discover services with the `ServerSets` compatible format."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b10ec864261420c411aaccaf8deb00a2dc981d4", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/1b10ec864261420c411aaccaf8deb00a2dc981d4", "committedDate": "2020-06-10T02:42:28Z", "message": "Add logging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MDA4MTY3", "url": "https://github.com/line/armeria/pull/2791#pullrequestreview-427008167", "createdAt": "2020-06-09T10:33:07Z", "commit": {"oid": "a3eb98c556ade87193223a709e0837e60686e0cb"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDozMzowN1rOGhDOcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNDo1NTozN1rOGhk1gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMwOTA0MQ==", "bodyText": "nit: Probably better to add a comment as you did in Eureka?\n\n  \n    \n      armeria/dependencies.yml\n    \n    \n         Line 118\n      in\n      228a8ca\n    \n    \n    \n    \n\n        \n          \n           # Eureka is used only for testing in eureka module.", "url": "https://github.com/line/armeria/pull/2791#discussion_r437309041", "createdAt": "2020-06-09T10:33:07Z", "author": {"login": "ikhoon"}, "path": "dependencies.yml", "diffHunk": "@@ -138,6 +138,10 @@ com.squareup.retrofit2:\n     - https://square.github.io/retrofit/2.x/retrofit/\n   converter-jackson: { version: *RETROFIT2_VERSION }\n \n+com.twitter:\n+  finagle-serversets_2.13:\n+    version: '20.5.0'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3eb98c556ade87193223a709e0837e60686e0cb"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMxNTQ4Mw==", "bodyText": "nit: How about linking to the API documentation? https://twitter.github.io/finagle/docs/com/twitter/serverset.html", "url": "https://github.com/line/armeria/pull/2791#discussion_r437315483", "createdAt": "2020-06-09T10:45:28Z", "author": {"login": "ikhoon"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZooKeeperDiscoverySpec.java", "diffHunk": "@@ -15,40 +15,77 @@\n  */\n package com.linecorp.armeria.client.zookeeper;\n \n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n import javax.annotation.Nullable;\n \n import com.linecorp.armeria.client.Endpoint;\n-import com.linecorp.armeria.server.zookeeper.ZookeeperRegistrationSpec;\n+import com.linecorp.armeria.common.zookeeper.ServerSetsInstance;\n+import com.linecorp.armeria.server.zookeeper.ZooKeeperRegistrationSpec;\n \n /**\n  * A discovery specification for {@link ZooKeeperEndpointGroup}. The specification is used for finding\n  * and decoding the registered instances into {@link Endpoint}s.\n  *\n- * @see ZookeeperRegistrationSpec\n+ * @see ZooKeeperRegistrationSpec\n  */\n-public interface ZookeeperDiscoverySpec {\n+public interface ZooKeeperDiscoverySpec {\n \n     /**\n-     * Returns a {@link ZookeeperDiscoverySpec} that is compatible with\n+     * Returns a {@link ZooKeeperDiscoverySpec} that is compatible with\n      * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator Service Discovery</a>.\n      * This is also compatible with\n      * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n+     *\n+     * @see ZooKeeperRegistrationSpec#curator(String)\n      */\n-    static ZookeeperDiscoverySpec curator(String serviceName) {\n+    static ZooKeeperDiscoverySpec curator(String serviceName) {\n         return builderForCurator(serviceName).build();\n     }\n \n     /**\n      * Returns a new {@link CuratorDiscoverySpecBuilder}. The specification is compatible with\n      * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator Service Discovery</a> and\n      * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n+     *\n+     * @see ZooKeeperRegistrationSpec#builderForCurator(String)\n      */\n     static CuratorDiscoverySpecBuilder builderForCurator(String serviceName) {\n         return new CuratorDiscoverySpecBuilder(serviceName);\n     }\n \n     /**\n-     * Returns the legacy {@link ZookeeperDiscoverySpec} implementation which assumes a zNode value is\n+     * Returns a {@link ZooKeeperDiscoverySpec} that is compatible with\n+     * <a href=\"https://github.com/twitter/finagle/tree/develop/finagle-serversets\">Finagle ServerSets</a>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3eb98c556ade87193223a709e0837e60686e0cb"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMyMTE4NQ==", "bodyText": "Question: Endpoint is an immutable class, do we need to copy it?", "url": "https://github.com/line/armeria/pull/2791#discussion_r437321185", "createdAt": "2020-06-09T10:56:57Z", "author": {"login": "ikhoon"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZooKeeperDiscoverySpec.java", "diffHunk": "@@ -15,40 +15,77 @@\n  */\n package com.linecorp.armeria.client.zookeeper;\n \n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n import javax.annotation.Nullable;\n \n import com.linecorp.armeria.client.Endpoint;\n-import com.linecorp.armeria.server.zookeeper.ZookeeperRegistrationSpec;\n+import com.linecorp.armeria.common.zookeeper.ServerSetsInstance;\n+import com.linecorp.armeria.server.zookeeper.ZooKeeperRegistrationSpec;\n \n /**\n  * A discovery specification for {@link ZooKeeperEndpointGroup}. The specification is used for finding\n  * and decoding the registered instances into {@link Endpoint}s.\n  *\n- * @see ZookeeperRegistrationSpec\n+ * @see ZooKeeperRegistrationSpec\n  */\n-public interface ZookeeperDiscoverySpec {\n+public interface ZooKeeperDiscoverySpec {\n \n     /**\n-     * Returns a {@link ZookeeperDiscoverySpec} that is compatible with\n+     * Returns a {@link ZooKeeperDiscoverySpec} that is compatible with\n      * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator Service Discovery</a>.\n      * This is also compatible with\n      * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n+     *\n+     * @see ZooKeeperRegistrationSpec#curator(String)\n      */\n-    static ZookeeperDiscoverySpec curator(String serviceName) {\n+    static ZooKeeperDiscoverySpec curator(String serviceName) {\n         return builderForCurator(serviceName).build();\n     }\n \n     /**\n      * Returns a new {@link CuratorDiscoverySpecBuilder}. The specification is compatible with\n      * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator Service Discovery</a> and\n      * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n+     *\n+     * @see ZooKeeperRegistrationSpec#builderForCurator(String)\n      */\n     static CuratorDiscoverySpecBuilder builderForCurator(String serviceName) {\n         return new CuratorDiscoverySpecBuilder(serviceName);\n     }\n \n     /**\n-     * Returns the legacy {@link ZookeeperDiscoverySpec} implementation which assumes a zNode value is\n+     * Returns a {@link ZooKeeperDiscoverySpec} that is compatible with\n+     * <a href=\"https://github.com/twitter/finagle/tree/develop/finagle-serversets\">Finagle ServerSets</a>.\n+     *\n+     * @see ZooKeeperRegistrationSpec#builderForServerSets()\n+     */\n+    static ZooKeeperDiscoverySpec serverSets() {\n+        return serverSets(serverSetsInstance -> {\n+            final Endpoint serviceEndpoint = serverSetsInstance.serviceEndpoint();\n+            if (serviceEndpoint == null) {\n+                return null;\n+            }\n+            return Endpoint.of(serviceEndpoint.host(), serviceEndpoint.port());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3eb98c556ade87193223a709e0837e60686e0cb"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMyMzU2OQ==", "bodyText": "From the thrift IDL definition, serviceEndpoint looks non-null.", "url": "https://github.com/line/armeria/pull/2791#discussion_r437323569", "createdAt": "2020-06-09T11:01:31Z", "author": {"login": "ikhoon"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/ServerSetsInstance.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+// =================================================================================================\n+// Copyright 2011 Twitter, Inc.\n+// -------------------------------------------------------------------------------------------------\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this work except in compliance with the License.\n+// You may obtain a copy of the License in the LICENSE file, or at:\n+//\n+//  https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+// =================================================================================================\n+package com.linecorp.armeria.common.zookeeper;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.zookeeper.ServerSetsInstanceConverter.FinagleServiceInstanceDeserializer;\n+import com.linecorp.armeria.common.zookeeper.ServerSetsInstanceConverter.FinagleServiceInstanceSerializer;\n+\n+/**\n+ * A class that represents a service instance used by\n+ * <a href=\"https://github.com/twitter/finagle/tree/develop/finagle-serversets\">Finagle ServerSets</a>.\n+ */\n+@JsonSerialize(using = FinagleServiceInstanceSerializer.class)\n+@JsonDeserialize(using = FinagleServiceInstanceDeserializer.class)\n+public final class ServerSetsInstance {\n+\n+    // IDL is defined in https://github.com/twitter/finagle/blob/finagle-20.5.0/finagle-serversets/src/main/thrift/com/twitter/thrift/endpoint.thrift\n+\n+    @Nullable\n+    private final Endpoint serviceEndpoint;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3eb98c556ade87193223a709e0837e60686e0cb"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMyNDAxMg==", "bodyText": "Make it @Nullable based on the IDL?", "url": "https://github.com/line/armeria/pull/2791#discussion_r437324012", "createdAt": "2020-06-09T11:02:23Z", "author": {"login": "ikhoon"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/ServerSetsInstance.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+// =================================================================================================\n+// Copyright 2011 Twitter, Inc.\n+// -------------------------------------------------------------------------------------------------\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this work except in compliance with the License.\n+// You may obtain a copy of the License in the LICENSE file, or at:\n+//\n+//  https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+// =================================================================================================\n+package com.linecorp.armeria.common.zookeeper;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.zookeeper.ServerSetsInstanceConverter.FinagleServiceInstanceDeserializer;\n+import com.linecorp.armeria.common.zookeeper.ServerSetsInstanceConverter.FinagleServiceInstanceSerializer;\n+\n+/**\n+ * A class that represents a service instance used by\n+ * <a href=\"https://github.com/twitter/finagle/tree/develop/finagle-serversets\">Finagle ServerSets</a>.\n+ */\n+@JsonSerialize(using = FinagleServiceInstanceSerializer.class)\n+@JsonDeserialize(using = FinagleServiceInstanceDeserializer.class)\n+public final class ServerSetsInstance {\n+\n+    // IDL is defined in https://github.com/twitter/finagle/blob/finagle-20.5.0/finagle-serversets/src/main/thrift/com/twitter/thrift/endpoint.thrift\n+\n+    @Nullable\n+    private final Endpoint serviceEndpoint;\n+    private final Map<String, Endpoint> additionalEndpoints;\n+    @Nullable\n+    private final Integer shardId;\n+    private final Map<String, String> metadata;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3eb98c556ade87193223a709e0837e60686e0cb"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NTQzNQ==", "bodyText": "Out of curiosity, what is the correct expression for znode? ZNode, znode, Znode, or zNode? \ud83e\uddd0\nhttps://github.com/apache/zookeeper/search?l=Java&p=2&q=znode\nhttps://zookeeper.apache.org/doc/r3.3.3/zookeeperProgrammers.html#sc_zkDataModel_znodes", "url": "https://github.com/line/armeria/pull/2791#discussion_r437375435", "createdAt": "2020-06-09T12:32:43Z", "author": {"login": "ikhoon"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/internal/common/zookeeper/ServerSetsNodeValueCodec.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.common.zookeeper;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import com.linecorp.armeria.client.endpoint.EndpointGroupException;\n+import com.linecorp.armeria.common.zookeeper.ServerSetsInstance;\n+\n+/**\n+ * A codec for Finagle ServerSets.\n+ */\n+public enum ServerSetsNodeValueCodec {\n+    INSTANCE;\n+\n+    private static final ObjectMapper mapper = new ObjectMapper().configure(\n+            DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+    private static final JavaType type = mapper.getTypeFactory().constructType(ServerSetsInstance.class);\n+\n+    /**\n+     * Decodes a zNode value to a {@link ServerSetsInstance}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3eb98c556ade87193223a709e0837e60686e0cb"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1OTcxMg==", "bodyText": "As you know, status has been deprecated. How about ignoring this field unless it is DEAD?\nhttps://github.com/twitter/finagle/blob/develop/finagle-serversets/src/main/java/com/twitter/finagle/common/zookeeper/ServerSetImpl.java#L181-L184", "url": "https://github.com/line/armeria/pull/2791#discussion_r437859712", "createdAt": "2020-06-10T04:55:37Z", "author": {"login": "ikhoon"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/ServerSetsInstanceConverter.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.zookeeper;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+\n+final class ServerSetsInstanceConverter {\n+\n+    private static final String SERVICE_ENDPOINT = \"serviceEndpoint\";\n+    private static final String HOST = \"host\";\n+    private static final String PORT = \"port\";\n+    private static final String ADDITIONAL_ENDPOINTS = \"additionalEndpoints\";\n+    private static final String STATUS = \"status\";\n+    private static final String ALIVE = \"ALIVE\";\n+    private static final String SHARD = \"shard\";\n+    private static final String METADATA = \"metadata\";\n+\n+    static final class FinagleServiceInstanceSerializer extends StdSerializer<ServerSetsInstance> {\n+\n+        private static final long serialVersionUID = 4497981752858570527L;\n+\n+        FinagleServiceInstanceSerializer() {\n+            super(ServerSetsInstance.class);\n+        }\n+\n+        @Override\n+        public void serialize(ServerSetsInstance value, JsonGenerator gen, SerializerProvider provider)\n+                throws IOException {\n+            gen.writeStartObject();\n+            gen.writeObjectFieldStart(SERVICE_ENDPOINT);\n+            final Endpoint serviceEndpoint = value.serviceEndpoint();\n+            assert serviceEndpoint != null;\n+            writeEndpoint(gen, serviceEndpoint);\n+            gen.writeEndObject();\n+            gen.writeObjectFieldStart(ADDITIONAL_ENDPOINTS);\n+            for (Entry<String, Endpoint> additionalEndpoint : value.additionalEndpoints().entrySet()) {\n+                gen.writeObjectFieldStart(additionalEndpoint.getKey());\n+                writeEndpoint(gen, additionalEndpoint.getValue());\n+                gen.writeEndObject();\n+            }\n+            gen.writeEndObject();\n+            // The status from ServerSets will be removed so we always use \"ALIVE\".\n+            // See https://github.com/twitter/finagle/blob/finagle-20.5.0/finagle-serversets/src/main/thrift/com/twitter/thrift/endpoint.thrift#L100\n+            gen.writeStringField(STATUS, ALIVE);\n+            final Integer shardId = value.shardId();\n+            if (shardId != null) {\n+                gen.writeNumberField(SHARD, shardId);\n+            }\n+            final Map<String, String> metadata = value.metadata();\n+            gen.writeFieldName(METADATA);\n+            gen.writeStartObject();\n+            if (!metadata.isEmpty()) {\n+                for (Entry<String, String> entry : metadata.entrySet()) {\n+                    gen.writeStringField(entry.getKey(), entry.getValue());\n+                }\n+            }\n+            gen.writeEndObject(); // end for metadata\n+            gen.writeEndObject();\n+        }\n+\n+        private static void writeEndpoint(JsonGenerator gen, Endpoint serviceEndpoint) throws IOException {\n+            gen.writeStringField(HOST, serviceEndpoint.host());\n+            gen.writeNumberField(PORT, serviceEndpoint.port());\n+        }\n+    }\n+\n+    static final class FinagleServiceInstanceDeserializer extends StdDeserializer<ServerSetsInstance> {\n+\n+        private static final long serialVersionUID = 3445603112141405710L;\n+\n+        private static final Logger logger = LoggerFactory.getLogger(FinagleServiceInstanceDeserializer.class);\n+\n+        private static final ServerSetsInstance notAliveInstance = new ServerSetsInstance(\n+          null, ImmutableMap.of(), null, ImmutableMap.of());\n+\n+        FinagleServiceInstanceDeserializer() {\n+            super(ServerSetsInstance.class);\n+        }\n+\n+        @Override\n+        public ServerSetsInstance deserialize(JsonParser p, DeserializationContext ctxt)\n+                throws IOException, JsonProcessingException {\n+            final JsonNode tree = p.getCodec().readTree(p);\n+            final JsonNode serviceEndpointNode = tree.get(SERVICE_ENDPOINT);\n+            final Endpoint serviceEndpoint = endpoint(serviceEndpointNode);\n+            final String status = tree.get(STATUS).asText();\n+            if (!ALIVE.equals(status)) {\n+                logger.warn(\"Found an instance whose status is not alive. status: {}, serviceEndpoint: {}\",\n+                            status, serviceEndpoint);\n+                return notAliveInstance;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b10ec864261420c411aaccaf8deb00a2dc981d4"}, "originalPosition": 122}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fb81d2ee396a7931a92a1d20125b57ff587608a", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/6fb81d2ee396a7931a92a1d20125b57ff587608a", "committedDate": "2020-06-10T06:02:18Z", "message": "Address comments by @ikhoon"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f5f91d4ccf5fb5aeb77ebe3487a12050b18ca57", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/6f5f91d4ccf5fb5aeb77ebe3487a12050b18ca57", "committedDate": "2020-06-10T06:43:35Z", "message": "Returns null when serviceEndpoint is null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ce3182fa78edf5672adf8e22f7fdf3a65281f8b", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/9ce3182fa78edf5672adf8e22f7fdf3a65281f8b", "committedDate": "2020-06-10T06:53:43Z", "message": "Remove the word `ZooKeeper` from `ServerSetsZooKeeper...`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3ODgwMjk5", "url": "https://github.com/line/armeria/pull/2791#pullrequestreview-427880299", "createdAt": "2020-06-10T09:31:45Z", "commit": {"oid": "9ce3182fa78edf5672adf8e22f7fdf3a65281f8b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOTozMTo0NVrOGhs0AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOTozODowOVrOGhtCbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5MDQwMQ==", "bodyText": "Should we log at WARN level instead of DEBUG?\nHow about The endpoint converter returned null from {}. ?", "url": "https://github.com/line/armeria/pull/2791#discussion_r437990401", "createdAt": "2020-06-10T09:31:45Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/CuratorDiscoverySpec.java", "diffHunk": "@@ -42,7 +46,12 @@ public String path() {\n \n     @Override\n     public Endpoint decode(byte[] data) {\n-        return converter.apply(CuratorXNodeValueCodec.INSTANCE.decode(data));\n+        final ServiceInstance<?> decodedInstance = CuratorXNodeValueCodec.INSTANCE.decode(data);\n+        final Endpoint endpoint = converter.apply(decodedInstance);\n+        if (endpoint == null) {\n+            logger.debug(\"Returned null endpoint from {}.\", decodedInstance);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce3182fa78edf5672adf8e22f7fdf3a65281f8b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5MTMzMA==", "bodyText": "Ditto", "url": "https://github.com/line/armeria/pull/2791#discussion_r437991330", "createdAt": "2020-06-10T09:33:27Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ServerSetsDiscoverySpec.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.zookeeper;\n+\n+import java.util.function.Function;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.zookeeper.ServerSetsInstance;\n+import com.linecorp.armeria.internal.common.zookeeper.ServerSetsNodeValueCodec;\n+\n+final class ServerSetsDiscoverySpec implements ZooKeeperDiscoverySpec {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ServerSetsDiscoverySpec.class);\n+\n+    private final Function<? super ServerSetsInstance, Endpoint> converter;\n+\n+    ServerSetsDiscoverySpec(Function<? super ServerSetsInstance, Endpoint> converter) {\n+        this.converter = converter;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return null;\n+    }\n+\n+    @Override\n+    public Endpoint decode(byte[] data) {\n+        final ServerSetsInstance decodedInstance = ServerSetsNodeValueCodec.INSTANCE.decode(data);\n+        if (decodedInstance.serviceEndpoint() == null) {\n+            return null;\n+        }\n+        final Endpoint endpoint = converter.apply(decodedInstance);\n+        if (endpoint == null) {\n+            logger.debug(\"Converter returned null endpoint from {}.\", decodedInstance);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce3182fa78edf5672adf8e22f7fdf3a65281f8b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5Mzk3NQ==", "bodyText": "Sets -> Adds ?", "url": "https://github.com/line/armeria/pull/2791#discussion_r437993975", "createdAt": "2020-06-10T09:37:59Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ServerSetsRegistrationSpecBuilder.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.zookeeper;\n+\n+import static com.linecorp.armeria.internal.common.zookeeper.ZooKeeperPathUtil.validatePath;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.zookeeper.CreateMode;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.zookeeper.ServerSetsInstance;\n+\n+/**\n+ * Builds a {@link ZooKeeperRegistrationSpec} for\n+ * <a href=\"https://twitter.github.io/finagle/docs/com/twitter/serverset.html\">Finagle ServerSets</a>.\n+ */\n+public final class ServerSetsRegistrationSpecBuilder {\n+\n+    private static final String DEFAULT_NODE_NAME = \"member_\";\n+\n+    @Nullable\n+    private Endpoint serviceEndpoint;\n+    private final ImmutableMap.Builder<String, Endpoint> additionalEndpointsBuilder = ImmutableMap.builder();\n+    @Nullable\n+    private Integer shardId;\n+    private Map<String, String> metadata = ImmutableMap.of();\n+\n+    // https://github.com/twitter/finagle/blob/finagle-20.5.0/finagle-serversets/src/main/java/com/twitter/finagle/common/zookeeper/Group.java#L58\n+    // Finagle uses the sequential node with the prefix by default.\n+    // So the node name will be \"member_0000000000\", \"member_0000000001\" and so on.\n+    private String nodeName = DEFAULT_NODE_NAME;\n+    private boolean sequential = true;\n+\n+    ServerSetsRegistrationSpecBuilder() {}\n+\n+    /**\n+     * Sets the specified {@link Endpoint}.\n+     */\n+    public ServerSetsRegistrationSpecBuilder serviceEndpoint(Endpoint serviceEndpoint) {\n+        this.serviceEndpoint = requireNonNull(serviceEndpoint, \"serviceEndpoint\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified additional {@link Endpoint} with the specified {@code name}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce3182fa78edf5672adf8e22f7fdf3a65281f8b"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5NDA5NQ==", "bodyText": "Sets -> Adds ?", "url": "https://github.com/line/armeria/pull/2791#discussion_r437994095", "createdAt": "2020-06-10T09:38:09Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ServerSetsRegistrationSpecBuilder.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.zookeeper;\n+\n+import static com.linecorp.armeria.internal.common.zookeeper.ZooKeeperPathUtil.validatePath;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.zookeeper.CreateMode;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.zookeeper.ServerSetsInstance;\n+\n+/**\n+ * Builds a {@link ZooKeeperRegistrationSpec} for\n+ * <a href=\"https://twitter.github.io/finagle/docs/com/twitter/serverset.html\">Finagle ServerSets</a>.\n+ */\n+public final class ServerSetsRegistrationSpecBuilder {\n+\n+    private static final String DEFAULT_NODE_NAME = \"member_\";\n+\n+    @Nullable\n+    private Endpoint serviceEndpoint;\n+    private final ImmutableMap.Builder<String, Endpoint> additionalEndpointsBuilder = ImmutableMap.builder();\n+    @Nullable\n+    private Integer shardId;\n+    private Map<String, String> metadata = ImmutableMap.of();\n+\n+    // https://github.com/twitter/finagle/blob/finagle-20.5.0/finagle-serversets/src/main/java/com/twitter/finagle/common/zookeeper/Group.java#L58\n+    // Finagle uses the sequential node with the prefix by default.\n+    // So the node name will be \"member_0000000000\", \"member_0000000001\" and so on.\n+    private String nodeName = DEFAULT_NODE_NAME;\n+    private boolean sequential = true;\n+\n+    ServerSetsRegistrationSpecBuilder() {}\n+\n+    /**\n+     * Sets the specified {@link Endpoint}.\n+     */\n+    public ServerSetsRegistrationSpecBuilder serviceEndpoint(Endpoint serviceEndpoint) {\n+        this.serviceEndpoint = requireNonNull(serviceEndpoint, \"serviceEndpoint\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified additional {@link Endpoint} with the specified {@code name}.\n+     */\n+    public ServerSetsRegistrationSpecBuilder additionalEndpoint(\n+            String name, Endpoint additionalEndpoint) {\n+        additionalEndpointsBuilder.put(requireNonNull(name, \"name\"),\n+                                       requireNonNull(additionalEndpoint, \"additionalEndpoint\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified additional {@link Endpoint}s.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce3182fa78edf5672adf8e22f7fdf3a65281f8b"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0284b51ed652e8fbdd04ceed1d28deea9bd7f1c3", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/0284b51ed652e8fbdd04ceed1d28deea9bd7f1c3", "committedDate": "2020-06-10T11:02:59Z", "message": "Address comments by @trustin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59d3a2530d0be38745465d14be169974c9e6b0b2", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/59d3a2530d0be38745465d14be169974c9e6b0b2", "committedDate": "2020-06-16T07:53:20Z", "message": "Add serverSets static method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMjYxOTI2", "url": "https://github.com/line/armeria/pull/2791#pullrequestreview-431261926", "createdAt": "2020-06-16T08:11:23Z", "commit": {"oid": "59d3a2530d0be38745465d14be169974c9e6b0b2"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODoxMToyNFrOGkQIsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODoxMjoxMVrOGkQKfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY2NjI4OQ==", "bodyText": "nit: \ud83d\ude09\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Builder<Endpoint> builder = ImmutableSet.builder();\n          \n          \n            \n                    final ImmutableSet.Builder<Endpoint> builder = ImmutableSet.builder();", "url": "https://github.com/line/armeria/pull/2791#discussion_r440666289", "createdAt": "2020-06-16T08:11:24Z", "author": {"login": "ikhoon"}, "path": "zookeeper/src/test/java/com/linecorp/armeria/client/zookeeper/ServerSetDiscoveryTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.zookeeper;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.ZooDefs.Ids;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.ImmutableSet.Builder;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.zookeeper.ZooKeeperExtension;\n+import com.linecorp.armeria.common.zookeeper.ZooKeeperTestUtil;\n+import com.linecorp.armeria.server.zookeeper.ZooKeeperRegistrationSpec;\n+\n+import zookeeperjunit.CloseableZooKeeper;\n+\n+class ServerSetDiscoveryTest {\n+\n+    private static final String Z_NODE = \"/testEndPoints\";\n+    private static final int SESSION_TIMEOUT_MILLIS = 20000;\n+\n+    @RegisterExtension\n+    static ZooKeeperExtension zkInstance = new ZooKeeperExtension();\n+\n+    @Test\n+    void serverSetDiscoveryUpdatingListener() throws Throwable {\n+        final List<Endpoint> sampleEndpoints = ZooKeeperTestUtil.sampleEndpoints(3);\n+        setServerSetNodeChildren(sampleEndpoints, 0);\n+        final ZooKeeperDiscoverySpec spec = ZooKeeperDiscoverySpec.serverSets();\n+\n+        final ZooKeeperEndpointGroup endpointGroup = endpointGroup(spec);\n+        await().untilAsserted(() -> assertThat(endpointGroup.endpoints()).hasSameElementsAs(sampleEndpoints));\n+\n+        // Add two more nodes.\n+        final List<Endpoint> extraEndpoints = ZooKeeperTestUtil.sampleEndpoints(2);\n+        setServerSetNodeChildren(extraEndpoints, 3);\n+\n+        // Construct the final expected node list.\n+        final Builder<Endpoint> builder = ImmutableSet.builder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d3a2530d0be38745465d14be169974c9e6b0b2"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY2Njc0OQ==", "bodyText": "Cruft?", "url": "https://github.com/line/armeria/pull/2791#discussion_r440666749", "createdAt": "2020-06-16T08:12:11Z", "author": {"login": "ikhoon"}, "path": "zookeeper/src/test/java/com/linecorp/armeria/client/zookeeper/ServerSetDiscoveryTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.zookeeper;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.ZooDefs.Ids;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.ImmutableSet.Builder;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.zookeeper.ZooKeeperExtension;\n+import com.linecorp.armeria.common.zookeeper.ZooKeeperTestUtil;\n+import com.linecorp.armeria.server.zookeeper.ZooKeeperRegistrationSpec;\n+\n+import zookeeperjunit.CloseableZooKeeper;\n+\n+class ServerSetDiscoveryTest {\n+\n+    private static final String Z_NODE = \"/testEndPoints\";\n+    private static final int SESSION_TIMEOUT_MILLIS = 20000;\n+\n+    @RegisterExtension\n+    static ZooKeeperExtension zkInstance = new ZooKeeperExtension();\n+\n+    @Test\n+    void serverSetDiscoveryUpdatingListener() throws Throwable {\n+        final List<Endpoint> sampleEndpoints = ZooKeeperTestUtil.sampleEndpoints(3);\n+        setServerSetNodeChildren(sampleEndpoints, 0);\n+        final ZooKeeperDiscoverySpec spec = ZooKeeperDiscoverySpec.serverSets();\n+\n+        final ZooKeeperEndpointGroup endpointGroup = endpointGroup(spec);\n+        await().untilAsserted(() -> assertThat(endpointGroup.endpoints()).hasSameElementsAs(sampleEndpoints));\n+\n+        // Add two more nodes.\n+        final List<Endpoint> extraEndpoints = ZooKeeperTestUtil.sampleEndpoints(2);\n+        setServerSetNodeChildren(extraEndpoints, 3);\n+\n+        // Construct the final expected node list.\n+        final Builder<Endpoint> builder = ImmutableSet.builder();\n+        builder.addAll(sampleEndpoints).addAll(extraEndpoints);\n+        try (CloseableZooKeeper zk = zkInstance.connection()) {\n+            zk.sync(Z_NODE, (rc, path, ctx) -> {}, null);\n+        }\n+\n+        final Set<Endpoint> expected = builder.build();\n+        await().untilAsserted(() -> assertThat(endpointGroup.endpoints()).hasSameElementsAs(expected));\n+        disconnectZk(endpointGroup);\n+    }\n+\n+    private static void disconnectZk(ZooKeeperEndpointGroup endpointGroup) {\n+        endpointGroup.close();\n+        // Clear the ZooKeeper nodes.\n+        try (CloseableZooKeeper zk = zkInstance.connection()) {\n+            zk.deleteRecursively(Z_NODE);\n+        }\n+    }\n+\n+    private static ZooKeeperEndpointGroup endpointGroup(ZooKeeperDiscoverySpec spec) {\n+        return ZooKeeperEndpointGroup.builder(zkInstance.instance().connectString().get(), Z_NODE, spec)\n+                                     .sessionTimeoutMillis(SESSION_TIMEOUT_MILLIS)\n+                                     .build();\n+    }\n+\n+    private static void setServerSetNodeChildren(\n+            List<Endpoint> children, int startingIdNumber) throws Throwable {\n+        try (CloseableZooKeeper zk = zkInstance.connection()) {\n+            // If the parent node does not exist, create it.\n+            if (!zk.exists(Z_NODE).get()) {\n+                zk.create(Z_NODE, null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+            }\n+            // Register all child nodes.\n+            for (int i = 0; i < children.size(); i++) {\n+                System.err.println(zk.create(Z_NODE + \"/member_\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d3a2530d0be38745465d14be169974c9e6b0b2"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45f96716485ca4c1e9c8e8f5eef3bac7d71d8b03", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/45f96716485ca4c1e9c8e8f5eef3bac7d71d8b03", "committedDate": "2020-06-16T08:20:55Z", "message": "Address comments by @ikhoon"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMjgwOTI2", "url": "https://github.com/line/armeria/pull/2791#pullrequestreview-431280926", "createdAt": "2020-06-16T08:35:11Z", "commit": {"oid": "45f96716485ca4c1e9c8e8f5eef3bac7d71d8b03"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 198, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}