{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MDY2MTg3", "number": 2980, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMjoyNDoxN1rOEWo0Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNTozNToxMlrOEXehvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTcyODgzOnYy", "diffSide": "RIGHT", "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMjoyNDoxN1rOG9_4SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMjoyNToyOFrOG9_5FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2MjkyMQ==", "bodyText": "How about calling ensureValidPort(managementPort) so that an exception is raised if it's under 0?", "url": "https://github.com/line/armeria/pull/2980#discussion_r467662921", "createdAt": "2020-08-10T02:24:17Z", "author": {"login": "minwoox"}, "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java", "diffHunk": "@@ -207,7 +220,39 @@ public WebServer getWebServer(HttpHandler httpHandler) {\n                 firstNonNull(findBean(DataBufferFactoryWrapper.class), DataBufferFactoryWrapper.DEFAULT);\n \n         final Server server = configureService(sb, httpHandler, factoryWrapper, getServerHeader()).build();\n-        return new ArmeriaWebServer(server, protocol, address, port, beanFactory);\n+        armeriaWebServer = new ArmeriaWebServer(server, protocol, address, port, beanFactory);\n+        return armeriaWebServer;\n+    }\n+\n+    private boolean needsToReuseWebServer(int port) {\n+        final boolean samePort = isManagementPortEqualsToServerPort();\n+        Server existingServer = null;\n+        try {\n+            existingServer = beanFactory.getBean(Server.class);\n+        } catch (NoSuchBeanDefinitionException ignore) {\n+        }\n+\n+        if (samePort || existingServer == null) {\n+            return false;\n+        } else {\n+            final Map<InetSocketAddress, ServerPort> activePorts = existingServer.activePorts();\n+\n+            // reuse the existing WebServer if it has the same port\n+            return activePorts.values().stream()\n+                              .anyMatch(serverPort -> serverPort.localAddress().getPort() == port);\n+        }\n+    }\n+\n+    private boolean isManagementPortEqualsToServerPort() {\n+        final Integer managementPort = environment.getProperty(\"management.server.port\", Integer.class);\n+        if (managementPort != null && managementPort < 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03aadda7e0d465a6b4dce1508d19730dd9cf4d1d"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2MzEyNA==", "bodyText": "Also, how about returning early if managementPort is null?", "url": "https://github.com/line/armeria/pull/2980#discussion_r467663124", "createdAt": "2020-08-10T02:25:28Z", "author": {"login": "minwoox"}, "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java", "diffHunk": "@@ -207,7 +220,39 @@ public WebServer getWebServer(HttpHandler httpHandler) {\n                 firstNonNull(findBean(DataBufferFactoryWrapper.class), DataBufferFactoryWrapper.DEFAULT);\n \n         final Server server = configureService(sb, httpHandler, factoryWrapper, getServerHeader()).build();\n-        return new ArmeriaWebServer(server, protocol, address, port, beanFactory);\n+        armeriaWebServer = new ArmeriaWebServer(server, protocol, address, port, beanFactory);\n+        return armeriaWebServer;\n+    }\n+\n+    private boolean needsToReuseWebServer(int port) {\n+        final boolean samePort = isManagementPortEqualsToServerPort();\n+        Server existingServer = null;\n+        try {\n+            existingServer = beanFactory.getBean(Server.class);\n+        } catch (NoSuchBeanDefinitionException ignore) {\n+        }\n+\n+        if (samePort || existingServer == null) {\n+            return false;\n+        } else {\n+            final Map<InetSocketAddress, ServerPort> activePorts = existingServer.activePorts();\n+\n+            // reuse the existing WebServer if it has the same port\n+            return activePorts.values().stream()\n+                              .anyMatch(serverPort -> serverPort.localAddress().getPort() == port);\n+        }\n+    }\n+\n+    private boolean isManagementPortEqualsToServerPort() {\n+        final Integer managementPort = environment.getProperty(\"management.server.port\", Integer.class);\n+        if (managementPort != null && managementPort < 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2MjkyMQ=="}, "originalCommit": {"oid": "03aadda7e0d465a6b4dce1508d19730dd9cf4d1d"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTc0NDE2OnYy", "diffSide": "RIGHT", "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMjozNTo0M1rOG9__2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODo0OTowNlrOG-bBwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2NDg1OQ==", "bodyText": "If armeriaWebServer is not null and the port is different, it seems like the previously configured settings to armeriaWebServer are gone. Isn't it right?", "url": "https://github.com/line/armeria/pull/2980#discussion_r467664859", "createdAt": "2020-08-10T02:35:43Z", "author": {"login": "minwoox"}, "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java", "diffHunk": "@@ -131,6 +140,11 @@ public ArmeriaReactiveWebServerFactory(ConfigurableListableBeanFactory beanFacto\n \n     @Override\n     public WebServer getWebServer(HttpHandler httpHandler) {\n+        final int port = ensureValidPort(getPort());\n+        if (armeriaWebServer != null && needsToReuseWebServer(port)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03aadda7e0d465a6b4dce1508d19730dd9cf4d1d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNzcxMg==", "bodyText": "The previously configured settings remains.\nI'll add some tests to check this.", "url": "https://github.com/line/armeria/pull/2980#discussion_r468107712", "createdAt": "2020-08-10T18:49:06Z", "author": {"login": "matsumana"}, "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java", "diffHunk": "@@ -131,6 +140,11 @@ public ArmeriaReactiveWebServerFactory(ConfigurableListableBeanFactory beanFacto\n \n     @Override\n     public WebServer getWebServer(HttpHandler httpHandler) {\n+        final int port = ensureValidPort(getPort());\n+        if (armeriaWebServer != null && needsToReuseWebServer(port)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2NDg1OQ=="}, "originalCommit": {"oid": "03aadda7e0d465a6b4dce1508d19730dd9cf4d1d"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjcwMjE3OnYy", "diffSide": "RIGHT", "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwODozOTowMVrOG-uDKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwODozOTowMVrOG-uDKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQxOTM2OA==", "bodyText": "How about leaving a comment?\nThe management port is set to the Server in ArmeriaSpringActuatorAutoConfiguration.", "url": "https://github.com/line/armeria/pull/2980#discussion_r468419368", "createdAt": "2020-08-11T08:39:01Z", "author": {"login": "minwoox"}, "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java", "diffHunk": "@@ -207,7 +217,27 @@ public WebServer getWebServer(HttpHandler httpHandler) {\n                 firstNonNull(findBean(DataBufferFactoryWrapper.class), DataBufferFactoryWrapper.DEFAULT);\n \n         final Server server = configureService(sb, httpHandler, factoryWrapper, getServerHeader()).build();\n-        return new ArmeriaWebServer(server, protocol, address, port, beanFactory);\n+        final ArmeriaWebServer armeriaWebServer = new ArmeriaWebServer(server, protocol, address, port,\n+                                                                       beanFactory);\n+        if (!isManagementPortEqualsToServerPort()) {\n+            // Since this method will be called twice, need to reuse ArmeriaWebServer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "206e009150c7fac1a11fe4639756898077e076ae"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDUyNjY0OnYy", "diffSide": "RIGHT", "path": "spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactoryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNTozNDoxNFrOG_SYvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNTozNDoxNFrOG_SYvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxNDcxOA==", "bodyText": "Could use assertThatThrownBy(...)", "url": "https://github.com/line/armeria/pull/2980#discussion_r469014718", "createdAt": "2020-08-12T05:34:14Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactoryTest.java", "diffHunk": "@@ -388,4 +403,122 @@ void testDocServiceConfigurator_withoutDocServiceConfigurator() {\n             }\n         });\n     }\n+\n+    @ParameterizedTest\n+    @CsvSource({\n+            \"8080, 8080, true\",\n+            \"8080, , true\",\n+            \", 8080, true\",\n+            \", 8081, true\",\n+            \", , true\",\n+            \"18080, 8080, false\",\n+            \"18080, , false\",\n+            \"0, 8080, false\",\n+            \"1, 8080, false\",\n+            \"65535, 8080, false\",\n+    })\n+    void isManagementPortEqualsToServerPort(String managementPort, String serverPort,\n+                                            boolean expected) {\n+        final MockEnvironment environment = new MockEnvironment();\n+        if (!Strings.isNullOrEmpty(managementPort)) {\n+            environment.setProperty(\"management.server.port\", managementPort);\n+        }\n+        if (!Strings.isNullOrEmpty(serverPort)) {\n+            environment.setProperty(\"server.port\", serverPort);\n+        }\n+        final ArmeriaReactiveWebServerFactory factory = new ArmeriaReactiveWebServerFactory(beanFactory,\n+                                                                                            environment);\n+        assertThat(factory.isManagementPortEqualsToServerPort()).isEqualTo(expected);\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource({\n+            \"-1\",\n+            \"65536\",\n+    })\n+    void isManagementPortEqualsToServerPortThrows(String managementPort) {\n+        assertThrows(IllegalArgumentException.class, () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5c5a7071adf014b05d10d6cbd14304588fd2cc4"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDUyODYzOnYy", "diffSide": "RIGHT", "path": "spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactoryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNTozNToxMlrOG_SZzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNTozNToxMlrOG_SZzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxNDk5MQ==", "bodyText": "Just throws the exception?", "url": "https://github.com/line/armeria/pull/2980#discussion_r469014991", "createdAt": "2020-08-12T05:35:12Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactoryTest.java", "diffHunk": "@@ -388,4 +403,122 @@ void testDocServiceConfigurator_withoutDocServiceConfigurator() {\n             }\n         });\n     }\n+\n+    @ParameterizedTest\n+    @CsvSource({\n+            \"8080, 8080, true\",\n+            \"8080, , true\",\n+            \", 8080, true\",\n+            \", 8081, true\",\n+            \", , true\",\n+            \"18080, 8080, false\",\n+            \"18080, , false\",\n+            \"0, 8080, false\",\n+            \"1, 8080, false\",\n+            \"65535, 8080, false\",\n+    })\n+    void isManagementPortEqualsToServerPort(String managementPort, String serverPort,\n+                                            boolean expected) {\n+        final MockEnvironment environment = new MockEnvironment();\n+        if (!Strings.isNullOrEmpty(managementPort)) {\n+            environment.setProperty(\"management.server.port\", managementPort);\n+        }\n+        if (!Strings.isNullOrEmpty(serverPort)) {\n+            environment.setProperty(\"server.port\", serverPort);\n+        }\n+        final ArmeriaReactiveWebServerFactory factory = new ArmeriaReactiveWebServerFactory(beanFactory,\n+                                                                                            environment);\n+        assertThat(factory.isManagementPortEqualsToServerPort()).isEqualTo(expected);\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource({\n+            \"-1\",\n+            \"65536\",\n+    })\n+    void isManagementPortEqualsToServerPortThrows(String managementPort) {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ArmeriaReactiveWebServerFactory factory = new ArmeriaReactiveWebServerFactory(\n+                    beanFactory, new MockEnvironment().withProperty(\"management.server.port\", managementPort));\n+            factory.isManagementPortEqualsToServerPort();\n+        });\n+    }\n+\n+    @SpringBootApplication\n+    @RestController\n+    static class ArmeriaReactiveWebServerFactoryWithManagementServerPortTestConfiguration {\n+\n+        @Bean\n+        public ArmeriaServerConfigurator armeriaServerConfigurator() {\n+            return builder -> builder.annotatedService()\n+                                     .build(new HelloService());\n+        }\n+\n+        @Bean\n+        public DocServiceConfigurator docServiceConfigurator() {\n+            return builder -> builder.examplePaths(HelloService.class, \"hello\", \"/hello/foo\")\n+                                     .build();\n+        }\n+\n+        @GetMapping(\"/webflux\")\n+        Mono<String> hello() {\n+            return Mono.just(\"Hello, WebFlux!\");\n+        }\n+    }\n+\n+    @Nested\n+    @SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT,\n+            classes = ArmeriaReactiveWebServerFactoryWithManagementServerPortTestConfiguration.class,\n+            properties = \"management.server.port=18080\")\n+    @EnableAutoConfiguration\n+    @ImportAutoConfiguration(ArmeriaSpringActuatorAutoConfiguration.class)\n+    class ArmeriaReactiveWebServerFactoryWithManagementServerPortTest {\n+\n+        private static final int SERVER_PORT = 8080;\n+        private static final int MANAGEMENT_PORT = 18080;\n+\n+        @Test\n+        void testServerPort() {\n+            final WebClient client = WebClient.builder(\"http://127.0.0.1:\" + SERVER_PORT)\n+                                              .factory(clientFactory)\n+                                              .build();\n+\n+            // Request to Armeria service\n+            final AggregatedHttpResponse res1 = client.get(\"/hello/world\")\n+                                                      .aggregate()\n+                                                      .join();\n+            assertThat(res1.status()).isEqualTo(com.linecorp.armeria.common.HttpStatus.OK);\n+\n+            // Request to WebFlux controller\n+            final AggregatedHttpResponse res2 = client.get(\"/webflux\")\n+                                                      .aggregate()\n+                                                      .join();\n+            assertThat(res2.status()).isEqualTo(com.linecorp.armeria.common.HttpStatus.OK);\n+        }\n+\n+        @Test\n+        void testManagementPort() {\n+            final WebClient client = WebClient.builder(\"http://127.0.0.1:\" + MANAGEMENT_PORT)\n+                                              .factory(clientFactory)\n+                                              .build();\n+            final AggregatedHttpResponse res = client.get(\"/internal/docs/specification.json\")\n+                                                     .aggregate()\n+                                                     .join();\n+            assertThat(res.status()).isEqualTo(com.linecorp.armeria.common.HttpStatus.OK);\n+\n+            try {\n+                final JsonNode actualJson = mapper.readTree(res.contentUtf8());\n+                assertThat(actualJson.path(\"services\")\n+                                     .path(0)\n+                                     .path(\"methods\")\n+                                     .path(0)\n+                                     .path(\"examplePaths\")\n+                                     .path(0)\n+                                     .textValue())\n+                        .isEqualTo(\"/hello/foo\");\n+            } catch (JsonProcessingException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5c5a7071adf014b05d10d6cbd14304588fd2cc4"}, "originalPosition": 178}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2196, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}