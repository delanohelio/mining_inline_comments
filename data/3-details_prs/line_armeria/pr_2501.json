{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MTY0MTA1", "number": 2501, "title": "Support RxJava 3", "bodyText": "Motivation:\nRecently RxJava 3 has been released.\nhttps://github.com/ReactiveX/RxJava/releases/tag/v3.0.0\nArmeria supports RxJava2 integration with armeria-rxjava.\nThis PR migrates RequestContextAssembly from RxJava2 to RxJava3.\nRxJava 3 being based on Java 8 also supports seamless conversions between CompletionStage and Single, Maybe, Observable.\nModifications:\n\nRename original armeria-rxjava to armeria-rxjava2\nMake armeria-rxjava support RxJava 3\nUse built-in converter methods for ObservableResponseConverterFunction\nChange *Callable to *Supplier\nReactiveX/RxJava#6511\nRemove assemblyContext.push() in RequestContextScalarCallable*.get()\n\nDon't need to push RequestContext for scalar type such as Maybe.just(T)\n\n\nDelegate reset() method to RequestContextConnectableFlowable, RequestContextConnectableObservable\nhttps://github.com/ReactiveX/RxJava/wiki/What's-different-in-3.0#connectable-source-reset\nMigrate examples/context-propagation/rxjava to RxJava 3\n\nResult:\nYou can now use RxJava 3 with Armeria.\nFixes: #2378", "createdAt": "2020-02-17T14:23:48Z", "url": "https://github.com/line/armeria/pull/2501", "merged": true, "mergeCommit": {"oid": "519dbca82259427edaa5237564f6cead27a3eb4f"}, "closed": true, "closedAt": "2020-02-27T07:03:21Z", "author": {"login": "ikhoon"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFOF-XAH2gAyMzc2MTY0MTA1OmQ5Y2Y4OGI4NjVjM2E3NGRhODUyNzk5NGNjZTg1ODkzM2Y0MTc4Zjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIVxcGgFqTM2NTQ0OTg2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d9cf88b865c3a74da8527994cce858933f4178f7", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/d9cf88b865c3a74da8527994cce858933f4178f7", "committedDate": "2020-02-17T14:20:54Z", "message": "Support RxJava 3\n\nMotivation:\nRecently RxJava 3 has been released.\nhttps://github.com/ReactiveX/RxJava/releases/tag/v3.0.0\nArmeria supports RxJava2 integration with `armeria-rxjava`.\nThis PR migrates `RequestContextAssembly` from RxJava2 to RxJava3.\nRxJava 3 being based on Java 8 also supports seamless conversions between CompletionStage and Single, Maybe, Observable.\n\nModifications:\n* Rename original `armeria-rxjava` to `armeria-rxjava2`\n* Make armeria-rxjava support RxJava 3\n* Use built-in converter methods for ObservableResponseConverterFunction\n* Change `*Callable` to `*Supplier`\n  https://github.com/ReactiveX/RxJava/pull/6511\n* Don't migrate `RequestContextScalarCallableCompletable` and `RequestContextCallableCompletable`\n  There is no subclasses of `Completable` that implement `Supplier`\n* Delegate `reset()` in `ConnectableFlowable`\n  https://github.com/ReactiveX/RxJava/wiki/What's-different-in-3.0#connectable-source-reset\n\nResult:\nYou can now use RxJava 3 with Armeria.\nFixes: #2378"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMDQyMTcz", "url": "https://github.com/line/armeria/pull/2501#pullrequestreview-360042173", "createdAt": "2020-02-18T02:45:16Z", "commit": {"oid": "d9cf88b865c3a74da8527994cce858933f4178f7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMjo0NToxNlrOFqzpBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMjo0NToxNlrOFqzpBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQzMDU5OQ==", "bodyText": "The value of ScalarSupplier, which was ScalarCallable in RxJava 2, was captured when calling Maybe.just(T).\nI wonder do we need to push RequestContext here? If not, I think we could remove all RequestContextScalarSupplier*. \ud83e\uddd0", "url": "https://github.com/line/armeria/pull/2501#discussion_r380430599", "createdAt": "2020-02-18T02:45:16Z", "author": {"login": "ikhoon"}, "path": "rxjava/src/main/java/com/linecorp/armeria/rxjava/RequestContextScalarSupplierMaybe.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.rxjava;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+import io.reactivex.rxjava3.core.Maybe;\n+import io.reactivex.rxjava3.core.MaybeObserver;\n+import io.reactivex.rxjava3.core.MaybeSource;\n+import io.reactivex.rxjava3.internal.fuseable.ScalarSupplier;\n+\n+final class RequestContextScalarSupplierMaybe<T> extends Maybe<T>\n+        implements ScalarSupplier<T> {\n+    private final MaybeSource<T> source;\n+    private final RequestContext assemblyContext;\n+\n+    RequestContextScalarSupplierMaybe(MaybeSource<T> source, RequestContext assemblyContext) {\n+        this.source = source;\n+        this.assemblyContext = assemblyContext;\n+    }\n+\n+    @Override\n+    protected void subscribeActual(MaybeObserver<? super T> s) {\n+        try (SafeCloseable ignored = assemblyContext.push()) {\n+            source.subscribe(new RequestContextMaybeObserver<>(s, assemblyContext));\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public T get() {\n+        try (SafeCloseable ignored = assemblyContext.push()) {\n+            return ((ScalarSupplier<T>) source).get();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9cf88b865c3a74da8527994cce858933f4178f7"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26e5f85a2cb0284a02864d58228cec85be30677f", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/26e5f85a2cb0284a02864d58228cec85be30677f", "committedDate": "2020-02-18T04:06:51Z", "message": "Fix wrong package name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNjYzMTg1", "url": "https://github.com/line/armeria/pull/2501#pullrequestreview-361663185", "createdAt": "2020-02-20T06:43:30Z", "commit": {"oid": "26e5f85a2cb0284a02864d58228cec85be30677f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo0MzozMFrOFsHp7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo0NTo0OVrOFsHvCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgwNzA4NQ==", "bodyText": "Could merge the two lines", "url": "https://github.com/line/armeria/pull/2501#discussion_r381807085", "createdAt": "2020-02-20T06:43:30Z", "author": {"login": "trustin"}, "path": "rxjava/src/main/java/com/linecorp/armeria/rxjava/RequestContextAssembly.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.rxjava;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+\n+import io.reactivex.rxjava3.core.Completable;\n+import io.reactivex.rxjava3.core.Flowable;\n+import io.reactivex.rxjava3.core.Maybe;\n+import io.reactivex.rxjava3.core.Observable;\n+import io.reactivex.rxjava3.core.Single;\n+import io.reactivex.rxjava3.flowables.ConnectableFlowable;\n+import io.reactivex.rxjava3.functions.Function;\n+import io.reactivex.rxjava3.functions.Supplier;\n+import io.reactivex.rxjava3.internal.fuseable.ScalarSupplier;\n+import io.reactivex.rxjava3.observables.ConnectableObservable;\n+import io.reactivex.rxjava3.parallel.ParallelFlowable;\n+import io.reactivex.rxjava3.plugins.RxJavaPlugins;\n+\n+/**\n+ * Utility class to keep {@link RequestContext} during RxJava operations.\n+ */\n+public final class RequestContextAssembly {\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super Observable, ? extends Observable> oldOnObservableAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super ConnectableObservable, ? extends ConnectableObservable>\n+            oldOnConnectableObservableAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super Completable, ? extends Completable> oldOnCompletableAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super Single, ? extends Single> oldOnSingleAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super Maybe, ? extends Maybe> oldOnMaybeAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super Flowable, ? extends Flowable> oldOnFlowableAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super ConnectableFlowable, ? extends ConnectableFlowable>\n+            oldOnConnectableFlowableAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super ParallelFlowable, ? extends ParallelFlowable> oldOnParallelAssembly;\n+\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static boolean enabled;\n+\n+    private RequestContextAssembly() {\n+    }\n+\n+    /**\n+     * Enable {@link RequestContext} during operators.\n+     */\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    public static synchronized void enable() {\n+        if (enabled) {\n+            return;\n+        }\n+\n+        oldOnObservableAssembly = RxJavaPlugins.getOnObservableAssembly();\n+        RxJavaPlugins.setOnObservableAssembly(compose(\n+                oldOnObservableAssembly,\n+                new ConditionalOnCurrentRequestContextFunction<Observable>() {\n+                    @Override\n+                    Observable applyActual(Observable o, RequestContext ctx) {\n+                        if (!(o instanceof Supplier)) {\n+                            return new RequestContextObservable(o, ctx);\n+                        }\n+                        if (o instanceof ScalarSupplier) {\n+                            return new RequestContextScalarSupplierObservable(o, ctx);\n+                        }\n+                        return new RequestContextSupplierObservable(o, ctx);\n+                    }\n+                }));\n+\n+        oldOnConnectableObservableAssembly = RxJavaPlugins.getOnConnectableObservableAssembly();\n+        RxJavaPlugins.setOnConnectableObservableAssembly(compose(\n+                oldOnConnectableObservableAssembly,\n+                new ConditionalOnCurrentRequestContextFunction<ConnectableObservable>() {\n+                    @Override\n+                    ConnectableObservable applyActual(ConnectableObservable co, RequestContext ctx) {\n+                        return new RequestContextConnectableObservable(co, ctx);\n+                    }\n+                }));\n+\n+        oldOnCompletableAssembly = RxJavaPlugins.getOnCompletableAssembly();\n+        RxJavaPlugins.setOnCompletableAssembly(\n+                compose(oldOnCompletableAssembly,\n+                        new ConditionalOnCurrentRequestContextFunction<Completable>() {\n+                            @Override\n+                            Completable applyActual(Completable c, RequestContext ctx) {\n+                                return new RequestContextCompletable(c, ctx);\n+                            }\n+                        }));\n+\n+        oldOnSingleAssembly = RxJavaPlugins.getOnSingleAssembly();\n+        RxJavaPlugins.setOnSingleAssembly(\n+                compose(oldOnSingleAssembly, new ConditionalOnCurrentRequestContextFunction<Single>() {\n+                    @Override\n+                    Single applyActual(Single s, RequestContext ctx) {\n+                        if (!(s instanceof Supplier)) {\n+                            return new RequestContextSingle(s, ctx);\n+                        }\n+                        if (s instanceof ScalarSupplier) {\n+                            return new RequestContextScalarSupplierSingle(s, ctx);\n+                        }\n+                        return new RequestContextSupplierSingle(s, ctx);\n+                    }\n+                }));\n+\n+        oldOnMaybeAssembly = RxJavaPlugins.getOnMaybeAssembly();\n+        RxJavaPlugins.setOnMaybeAssembly(\n+                compose(oldOnMaybeAssembly, new ConditionalOnCurrentRequestContextFunction<Maybe>() {\n+                    @Override\n+                    Maybe applyActual(Maybe m, RequestContext ctx) {\n+                        if (!(m instanceof Supplier)) {\n+                            return new RequestContextMaybe(m, ctx);\n+                        }\n+                        if (m instanceof ScalarSupplier) {\n+                            return new RequestContextScalarSupplierMaybe(m, ctx);\n+                        }\n+                        return new RequestContextSupplierMaybe(m, ctx);\n+                    }\n+                }));\n+\n+        oldOnFlowableAssembly = RxJavaPlugins.getOnFlowableAssembly();\n+        RxJavaPlugins.setOnFlowableAssembly(\n+                compose(oldOnFlowableAssembly, new ConditionalOnCurrentRequestContextFunction<Flowable>() {\n+                    @Override\n+                    Flowable applyActual(Flowable f, RequestContext ctx) {\n+                        if (!(f instanceof Supplier)) {\n+                            return new RequestContextFlowable(f, ctx);\n+                        }\n+                        if (f instanceof ScalarSupplier) {\n+                            return new RequestContextScalarSupplierFlowable(f, ctx);\n+                        }\n+                        return new RequestContextSupplierFlowable(f, ctx);\n+                    }\n+                }));\n+\n+        oldOnConnectableFlowableAssembly = RxJavaPlugins.getOnConnectableFlowableAssembly();\n+        RxJavaPlugins.setOnConnectableFlowableAssembly(\n+                compose(oldOnConnectableFlowableAssembly,\n+                        new ConditionalOnCurrentRequestContextFunction<ConnectableFlowable>() {\n+                            @Override\n+                            ConnectableFlowable applyActual(\n+                                    ConnectableFlowable cf,\n+                                    RequestContext ctx) {\n+                                return new RequestContextConnectableFlowable(\n+                                        cf, ctx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e5f85a2cb0284a02864d58228cec85be30677f"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgwNzMxNA==", "bodyText": "Could be moved after the public static methods", "url": "https://github.com/line/armeria/pull/2501#discussion_r381807314", "createdAt": "2020-02-20T06:43:49Z", "author": {"login": "trustin"}, "path": "rxjava/src/main/java/com/linecorp/armeria/rxjava/RequestContextAssembly.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.rxjava;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+\n+import io.reactivex.rxjava3.core.Completable;\n+import io.reactivex.rxjava3.core.Flowable;\n+import io.reactivex.rxjava3.core.Maybe;\n+import io.reactivex.rxjava3.core.Observable;\n+import io.reactivex.rxjava3.core.Single;\n+import io.reactivex.rxjava3.flowables.ConnectableFlowable;\n+import io.reactivex.rxjava3.functions.Function;\n+import io.reactivex.rxjava3.functions.Supplier;\n+import io.reactivex.rxjava3.internal.fuseable.ScalarSupplier;\n+import io.reactivex.rxjava3.observables.ConnectableObservable;\n+import io.reactivex.rxjava3.parallel.ParallelFlowable;\n+import io.reactivex.rxjava3.plugins.RxJavaPlugins;\n+\n+/**\n+ * Utility class to keep {@link RequestContext} during RxJava operations.\n+ */\n+public final class RequestContextAssembly {\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super Observable, ? extends Observable> oldOnObservableAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super ConnectableObservable, ? extends ConnectableObservable>\n+            oldOnConnectableObservableAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super Completable, ? extends Completable> oldOnCompletableAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super Single, ? extends Single> oldOnSingleAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super Maybe, ? extends Maybe> oldOnMaybeAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super Flowable, ? extends Flowable> oldOnFlowableAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super ConnectableFlowable, ? extends ConnectableFlowable>\n+            oldOnConnectableFlowableAssembly;\n+    @SuppressWarnings(\"rawtypes\")\n+    @Nullable\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static Function<? super ParallelFlowable, ? extends ParallelFlowable> oldOnParallelAssembly;\n+\n+    @GuardedBy(\"RequestContextAssembly.class\")\n+    private static boolean enabled;\n+\n+    private RequestContextAssembly() {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e5f85a2cb0284a02864d58228cec85be30677f"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgwODIzOQ==", "bodyText": "Provides", "url": "https://github.com/line/armeria/pull/2501#discussion_r381808239", "createdAt": "2020-02-20T06:45:36Z", "author": {"login": "trustin"}, "path": "rxjava2/src/main/java/com/linecorp/armeria/server/rxjava2/package-info.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Provide a default {@link com.linecorp.armeria.server.annotation.ResponseConverterFunction}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e5f85a2cb0284a02864d58228cec85be30677f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgwODM5NA==", "bodyText": "Provides", "url": "https://github.com/line/armeria/pull/2501#discussion_r381808394", "createdAt": "2020-02-20T06:45:49Z", "author": {"login": "trustin"}, "path": "rxjava/src/main/java/com/linecorp/armeria/internal/server/rxjava/package-info.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Provide a default {@link com.linecorp.armeria.server.annotation.ResponseConverterFunction}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e5f85a2cb0284a02864d58228cec85be30677f"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "234203e44e6bd123cc8c7742f23ff5017584a522", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/234203e44e6bd123cc8c7742f23ff5017584a522", "committedDate": "2020-02-20T09:40:47Z", "message": "Address comments by @trustin / Clean up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MDU5OTUx", "url": "https://github.com/line/armeria/pull/2501#pullrequestreview-364059951", "createdAt": "2020-02-25T11:12:44Z", "commit": {"oid": "234203e44e6bd123cc8c7742f23ff5017584a522"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff5f88fd733453f2981fd65f02360707fe95efea", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/ff5f88fd733453f2981fd65f02360707fe95efea", "committedDate": "2020-02-25T13:56:30Z", "message": "Remove context push in RequestContextScala*.call()"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4d8766685bff162e3793c9077847663bbd50bcab", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/4d8766685bff162e3793c9077847663bbd50bcab", "committedDate": "2020-02-25T13:02:33Z", "message": "Address comments by @minwoox / Remove class implementing Scalar{Callable,Suppler}"}, "afterCommit": {"oid": "ff5f88fd733453f2981fd65f02360707fe95efea", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/ff5f88fd733453f2981fd65f02360707fe95efea", "committedDate": "2020-02-25T13:56:30Z", "message": "Remove context push in RequestContextScala*.call()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c81cf78876ff79b47fa3b4299f39b00dd4eecb08", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/c81cf78876ff79b47fa3b4299f39b00dd4eecb08", "committedDate": "2020-02-25T14:05:11Z", "message": "Fix indent"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MzE5Mjky", "url": "https://github.com/line/armeria/pull/2501#pullrequestreview-365319292", "createdAt": "2020-02-26T23:29:02Z", "commit": {"oid": "c81cf78876ff79b47fa3b4299f39b00dd4eecb08"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzoyOTowMlrOFvAJmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzoyOTowMlrOFvAJmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyOTg1MA==", "bodyText": "As the comment above, do we need to remove here too? I still see some ScalarSupplier has context.", "url": "https://github.com/line/armeria/pull/2501#discussion_r384829850", "createdAt": "2020-02-26T23:29:02Z", "author": {"login": "kojilin"}, "path": "rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextSupplierFlowable.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.rxjava;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+import io.reactivex.rxjava3.core.Flowable;\n+import io.reactivex.rxjava3.functions.Supplier;\n+import io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber;\n+\n+final class RequestContextSupplierFlowable<T> extends Flowable<T> implements Supplier<T> {\n+    private final Publisher<T> source;\n+    private final RequestContext assemblyContext;\n+\n+    RequestContextSupplierFlowable(Publisher<T> source, RequestContext assemblyContext) {\n+        this.source = source;\n+        this.assemblyContext = assemblyContext;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    protected void subscribeActual(Subscriber<? super T> s) {\n+        try (SafeCloseable ignored = assemblyContext.push()) {\n+            if (s instanceof ConditionalSubscriber) {\n+                source.subscribe(new RequestContextConditionalSubscriber<>((ConditionalSubscriber<? super T>) s,\n+                                                                           assemblyContext));\n+            } else {\n+                source.subscribe(new RequestContextSubscriber<>(s, assemblyContext));\n+            }\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public T get() throws Throwable {\n+        try (SafeCloseable ignored = assemblyContext.push()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c81cf78876ff79b47fa3b4299f39b00dd4eecb08"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NDQ5ODYy", "url": "https://github.com/line/armeria/pull/2501#pullrequestreview-365449862", "createdAt": "2020-02-27T06:59:29Z", "commit": {"oid": "c81cf78876ff79b47fa3b4299f39b00dd4eecb08"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1009, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}