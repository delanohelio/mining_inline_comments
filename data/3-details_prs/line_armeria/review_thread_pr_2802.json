{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NTY3NTY2", "number": 2802, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjoyNToxMlrOEGNbqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjoyMToxNFrOEGUzfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTQ2OTg3OnYy", "diffSide": "RIGHT", "path": "spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaGracefulShutdownConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjoyNToxMlrOGk3RyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwOTo1Mjo0MFrOGk-exw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwNzU5Mw==", "bodyText": "nit: Seems better to use System.nanoTime()?", "url": "https://github.com/line/armeria/pull/2802#discussion_r441307593", "createdAt": "2020-06-17T06:25:12Z", "author": {"login": "ikhoon"}, "path": "spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaGracefulShutdownConfigurationTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Duration;\n+\n+import javax.annotation.Nullable;\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.spring.ArmeriaAutoConfigurationTest.TestConfiguration;\n+\n+/**\n+ * This uses {@link ArmeriaAutoConfiguration} for integration tests.\n+ * {@code application-gracefulShutdownTest.yml} will be loaded with minimal settings to make it work.\n+ */\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes = TestConfiguration.class)\n+@ActiveProfiles({ \"local\", \"gracefulShutdownTest\" })\n+@DirtiesContext\n+public class ArmeriaGracefulShutdownConfigurationTest {\n+\n+    @SpringBootApplication\n+    static class TestConfiguration {}\n+\n+    @Inject\n+    @Nullable\n+    private Server server;\n+\n+    @Value(\"${spring.lifecycle.timeout-per-shutdown-phase}\")\n+    private Duration duration;\n+\n+    @Test\n+    public void testGracefulShutdown() throws Exception {\n+        final long startTime = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f7e24cbd922add1d749dc0bb4487d65a0f9adad"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQyNTYwNw==", "bodyText": "Fixed fbf3274", "url": "https://github.com/line/armeria/pull/2802#discussion_r441425607", "createdAt": "2020-06-17T09:52:40Z", "author": {"login": "heowc"}, "path": "spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaGracefulShutdownConfigurationTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Duration;\n+\n+import javax.annotation.Nullable;\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.spring.ArmeriaAutoConfigurationTest.TestConfiguration;\n+\n+/**\n+ * This uses {@link ArmeriaAutoConfiguration} for integration tests.\n+ * {@code application-gracefulShutdownTest.yml} will be loaded with minimal settings to make it work.\n+ */\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes = TestConfiguration.class)\n+@ActiveProfiles({ \"local\", \"gracefulShutdownTest\" })\n+@DirtiesContext\n+public class ArmeriaGracefulShutdownConfigurationTest {\n+\n+    @SpringBootApplication\n+    static class TestConfiguration {}\n+\n+    @Inject\n+    @Nullable\n+    private Server server;\n+\n+    @Value(\"${spring.lifecycle.timeout-per-shutdown-phase}\")\n+    private Duration duration;\n+\n+    @Test\n+    public void testGracefulShutdown() throws Exception {\n+        final long startTime = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwNzU5Mw=="}, "originalCommit": {"oid": "9f7e24cbd922add1d749dc0bb4487d65a0f9adad"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTQ4MzUzOnYy", "diffSide": "RIGHT", "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjozMDozN1rOGk3aVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwOTo1Mjo0NVrOGk-fBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwOTc4MA==", "bodyText": "Could move the if condition to out side of lambda?", "url": "https://github.com/line/armeria/pull/2802#discussion_r441309780", "createdAt": "2020-06-17T06:30:37Z", "author": {"login": "ikhoon"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaAutoConfiguration.java", "diffHunk": "@@ -160,4 +165,19 @@ public Server armeriaServer(\n         logger.info(\"Armeria server started at ports: {}\", server.activePorts());\n         return server;\n     }\n+\n+    /**\n+     * A user can configure a {@link Server} by providing an {@link ArmeriaServerConfigurator} bean.\n+     */\n+    @Bean\n+    @ConditionalOnProperty(\"server.shutdown\")\n+    public ArmeriaServerConfigurator gracefulShutdownServerConfigurator(\n+            @Value(\"${server.shutdown}\") String shutdown,\n+            @Value(\"${spring.lifecycle.timeout-per-shutdown-phase:30s}\") Duration duration) {\n+        return sb -> {\n+            if (GRACEFUL_SHUTDOWN.equalsIgnoreCase(shutdown)) {\n+                sb.gracefulShutdownTimeout(duration, duration);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f7e24cbd922add1d749dc0bb4487d65a0f9adad"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQyNTY3MQ==", "bodyText": "Fixed fbf3274", "url": "https://github.com/line/armeria/pull/2802#discussion_r441425671", "createdAt": "2020-06-17T09:52:45Z", "author": {"login": "heowc"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaAutoConfiguration.java", "diffHunk": "@@ -160,4 +165,19 @@ public Server armeriaServer(\n         logger.info(\"Armeria server started at ports: {}\", server.activePorts());\n         return server;\n     }\n+\n+    /**\n+     * A user can configure a {@link Server} by providing an {@link ArmeriaServerConfigurator} bean.\n+     */\n+    @Bean\n+    @ConditionalOnProperty(\"server.shutdown\")\n+    public ArmeriaServerConfigurator gracefulShutdownServerConfigurator(\n+            @Value(\"${server.shutdown}\") String shutdown,\n+            @Value(\"${spring.lifecycle.timeout-per-shutdown-phase:30s}\") Duration duration) {\n+        return sb -> {\n+            if (GRACEFUL_SHUTDOWN.equalsIgnoreCase(shutdown)) {\n+                sb.gracefulShutdownTimeout(duration, duration);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwOTc4MA=="}, "originalCommit": {"oid": "9f7e24cbd922add1d749dc0bb4487d65a0f9adad"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDY3NzczOnYy", "diffSide": "RIGHT", "path": "spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaGracefulShutdownConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjoyMToxNFrOGlDKFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMTo1Mjo0NVrOGlc6Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwMjIzMA==", "bodyText": "duration.toNanos() ?", "url": "https://github.com/line/armeria/pull/2802#discussion_r441502230", "createdAt": "2020-06-17T12:21:14Z", "author": {"login": "trustin"}, "path": "spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaGracefulShutdownConfigurationTest.java", "diffHunk": "@@ -56,8 +56,8 @@\n \n     @Test\n     public void testGracefulShutdown() throws Exception {\n-        final long startTime = System.currentTimeMillis();\n+        final long startTime = System.nanoTime();\n         server.stop().join();\n-        assertThat(System.currentTimeMillis() - startTime).isGreaterThanOrEqualTo(duration.toMillis());\n+        assertThat(System.nanoTime() - startTime).isGreaterThanOrEqualTo(duration.toMillis());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbf327466ebeb1aaee1a08c78c87662a78caf06a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkyNDE0Ng==", "bodyText": "Oops... I forgot.", "url": "https://github.com/line/armeria/pull/2802#discussion_r441924146", "createdAt": "2020-06-18T01:52:45Z", "author": {"login": "heowc"}, "path": "spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaGracefulShutdownConfigurationTest.java", "diffHunk": "@@ -56,8 +56,8 @@\n \n     @Test\n     public void testGracefulShutdown() throws Exception {\n-        final long startTime = System.currentTimeMillis();\n+        final long startTime = System.nanoTime();\n         server.stop().join();\n-        assertThat(System.currentTimeMillis() - startTime).isGreaterThanOrEqualTo(duration.toMillis());\n+        assertThat(System.nanoTime() - startTime).isGreaterThanOrEqualTo(duration.toMillis());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwMjIzMA=="}, "originalCommit": {"oid": "fbf327466ebeb1aaee1a08c78c87662a78caf06a"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2351, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}