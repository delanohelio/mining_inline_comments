{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MjY0OTAw", "number": 2503, "title": "Make `Throttling*Service` responses configurable", "bodyText": "Fixes #2482\nAdded Throttling{Accept,Reject}Handler, similar to Auth{Success,Failure}Handler, to customize throttling response rejection/acceptance.\nAdjusted ThrottlingService and ThrottlingRpcService to leverage the new API.\nAdded service builders: AbstractThrottlingBuilder, ThrottlingServiceBuilder, ThrottlingRpcServiceBuilder.\nAdded ThrottlingService.builder() and ThrottlingRpcService.builder().\nSet HttpStatus.SERVICE_UNAVAILABLE as default for RpcRequest.\nSet HttpStatus.TOO_MANY_REQUESTS as a default for HttpRequest.\nModified unit tests to cover the accept/reject scenarios.", "createdAt": "2020-02-17T18:15:56Z", "url": "https://github.com/line/armeria/pull/2503", "merged": true, "mergeCommit": {"oid": "ed46c75d224675f4cb006ec8d683b988badfecfb"}, "closed": true, "closedAt": "2020-03-09T08:32:55Z", "author": {"login": "max904-github"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFRZsKgH2gAyMzc2MjY0OTAwOjZkYTlkNjYyOTQ4MjUzODUwZWYyNjUxNjBhOTAzY2IwZWQ3Nzc5YWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcL5nYPgFqTM3MDk4MDUxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6da9d662948253850ef265160a903cb0ed7779ae", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/6da9d662948253850ef265160a903cb0ed7779ae", "committedDate": "2020-02-17T18:12:09Z", "message": "A fix for issue #2482 (Throttling failure response status shall be configurable):\n- added AbstractThrottlingService.strategy() method to provide access to the strategy set to the throttling service.\n- added ThrottlingStrategy.failureStatus() method to provide status for throttled requests.\n- adjusted ThrottlingService and RpcThrottlingService to leverage ThrottlingStrategy.failureStatus().\n- adjusted various constructor methods to support failureStatus parameter.\n- modified unit tests to cover the failure status."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMTAzMTE1", "url": "https://github.com/line/armeria/pull/2503#pullrequestreview-360103115", "createdAt": "2020-02-18T06:53:50Z", "commit": {"oid": "6da9d662948253850ef265160a903cb0ed7779ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNjo1Mzo1MFrOFq3DoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNjo1Mzo1MFrOFq3DoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ4NjU2MA==", "bodyText": "Instead of adding just this knob to strategy, how about adding ThrottlingFailureHandler similar to our auth service?\nhttps://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/server/auth/AuthService.java#L75\nBy letting it return an arbitrary response, we get more flexibility (including implementing the x-ratelimit headers if we add a token throttler).", "url": "https://github.com/line/armeria/pull/2503#discussion_r380486560", "createdAt": "2020-02-18T06:53:50Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingStrategy.java", "diffHunk": "@@ -126,4 +152,11 @@ protected ThrottlingStrategy(@Nullable String name) {\n     public String name() {\n         return name;\n     }\n+\n+    /**\n+     * Returns the failure status to be used for the throttled requests.\n+     */\n+    protected HttpStatus failureStatus() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6da9d662948253850ef265160a903cb0ed7779ae"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a", "committedDate": "2020-02-24T09:57:01Z", "message": "A fix for issue #2482 (Throttling failure response status shall be configurable):\n- implemented ThrottlingReject/AcceptHandler approach, similar to AuthService, to customize throttling response rejection/acceptance.\n- added service builders: AbstractThrottlingBuilder, ThrottlingServiceBuilder, ThrottlingRpcServiceBuilder.\n- added ThrottlingService.builder() and ThrottlingRpcService.builder().\n- set HttpStatus.SERVICE_UNAVAILABLE as default for RpcRequest.\n- set HttpStatus.TOO_MANY_REQUESTS as a default for HttpRequest."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NDMyNDM1", "url": "https://github.com/line/armeria/pull/2503#pullrequestreview-365432435", "createdAt": "2020-02-27T06:05:29Z", "commit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjowNToyOVrOFvGLcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjowOTozNFrOFvGPfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyODYyNw==", "bodyText": "All protected methods in this class could be package-private and final.", "url": "https://github.com/line/armeria/pull/2503#discussion_r384928627", "createdAt": "2020-02-27T06:05:29Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;\n+    private ThrottlingRejectHandler<I, O> rejectHandler;\n+\n+    AbstractThrottlingServiceBuilder() {\n+        acceptHandler = requireNonNull(defaultAcceptHandler(), \"defaultAcceptHandler\");\n+        rejectHandler = requireNonNull(defaultRejectHandler(), \"defaultRejectHandler\");\n+    }\n+\n+    /**\n+     * Provides default request accept handler.\n+     */\n+    protected ThrottlingAcceptHandler<I, O> defaultAcceptHandler() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyODk5MA==", "bodyText": "Could we require a strategy at construction time? e.g. ThrottlingRpcService.builder(strategy)...build()", "url": "https://github.com/line/armeria/pull/2503#discussion_r384928990", "createdAt": "2020-02-27T06:06:43Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;\n+    private ThrottlingRejectHandler<I, O> rejectHandler;\n+\n+    AbstractThrottlingServiceBuilder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyOTAzOQ==", "bodyText": "nit: 2020", "url": "https://github.com/line/armeria/pull/2503#discussion_r384929039", "createdAt": "2020-02-27T06:07:00Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyOTUwNQ==", "bodyText": "Could be ThrottlingRejectHandler<? super RpcRequest, ? extends RpcResponse>", "url": "https://github.com/line/armeria/pull/2503#discussion_r384929505", "createdAt": "2020-02-27T06:08:48Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingRpcServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.RpcRequest;\n+import com.linecorp.armeria.common.RpcResponse;\n+import com.linecorp.armeria.server.HttpStatusException;\n+import com.linecorp.armeria.server.RpcService;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link ThrottlingRpcService}.\n+ */\n+public class ThrottlingRpcServiceBuilder extends AbstractThrottlingServiceBuilder<RpcRequest, RpcResponse> {\n+\n+    ThrottlingRpcServiceBuilder() {}\n+\n+    /**\n+     * Sets {@link ThrottlingStrategy}.\n+     */\n+    public ThrottlingRpcServiceBuilder strategy(ThrottlingStrategy<RpcRequest> strategy) {\n+        setStrategy(strategy);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingAcceptHandler}.\n+     */\n+    public ThrottlingRpcServiceBuilder onAcceptedRequest(\n+            ThrottlingAcceptHandler<RpcRequest, RpcResponse> acceptHandler) {\n+        setAcceptHandler(acceptHandler);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingRejectHandler}.\n+     */\n+    public ThrottlingRpcServiceBuilder onRejectedRequest(\n+            ThrottlingRejectHandler<RpcRequest, RpcResponse> rejectHandler) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyOTUzNw==", "bodyText": "Could be ThrottlingAcceptHandler<? super RpcRequest, ? extends RpcResponse>", "url": "https://github.com/line/armeria/pull/2503#discussion_r384929537", "createdAt": "2020-02-27T06:08:55Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingRpcServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.RpcRequest;\n+import com.linecorp.armeria.common.RpcResponse;\n+import com.linecorp.armeria.server.HttpStatusException;\n+import com.linecorp.armeria.server.RpcService;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link ThrottlingRpcService}.\n+ */\n+public class ThrottlingRpcServiceBuilder extends AbstractThrottlingServiceBuilder<RpcRequest, RpcResponse> {\n+\n+    ThrottlingRpcServiceBuilder() {}\n+\n+    /**\n+     * Sets {@link ThrottlingStrategy}.\n+     */\n+    public ThrottlingRpcServiceBuilder strategy(ThrottlingStrategy<RpcRequest> strategy) {\n+        setStrategy(strategy);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingAcceptHandler}.\n+     */\n+    public ThrottlingRpcServiceBuilder onAcceptedRequest(\n+            ThrottlingAcceptHandler<RpcRequest, RpcResponse> acceptHandler) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyOTYxOQ==", "bodyText": "Could be ThrottlingAcceptHandler<? super I, ? extends O>", "url": "https://github.com/line/armeria/pull/2503#discussion_r384929619", "createdAt": "2020-02-27T06:09:26Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;\n+    private ThrottlingRejectHandler<I, O> rejectHandler;\n+\n+    AbstractThrottlingServiceBuilder() {\n+        acceptHandler = requireNonNull(defaultAcceptHandler(), \"defaultAcceptHandler\");\n+        rejectHandler = requireNonNull(defaultRejectHandler(), \"defaultRejectHandler\");\n+    }\n+\n+    /**\n+     * Provides default request accept handler.\n+     */\n+    protected ThrottlingAcceptHandler<I, O> defaultAcceptHandler() {\n+        return Service::serve;\n+    }\n+\n+    /**\n+     * Provides default request reject handler.\n+     */\n+    protected abstract ThrottlingRejectHandler<I, O> defaultRejectHandler();\n+\n+    /**\n+     * Sets {@link ThrottlingStrategy}.\n+     */\n+    protected void setStrategy(ThrottlingStrategy<I> strategy) {\n+        this.strategy = requireNonNull(strategy, \"strategy\");\n+    }\n+\n+    protected ThrottlingStrategy<I> getStrategy() {\n+        if (strategy == null) {\n+            throw new IllegalStateException(\"no \" + ThrottlingStrategy.class.getSimpleName() + \" was added.\");\n+        }\n+        return strategy;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingAcceptHandler}.\n+     */\n+    protected void setAcceptHandler(\n+            ThrottlingAcceptHandler<I, O> acceptHandler) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyOTY2Mw==", "bodyText": "Could be ThrottlingRejectHandler<? super I, ? extends O>", "url": "https://github.com/line/armeria/pull/2503#discussion_r384929663", "createdAt": "2020-02-27T06:09:34Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;\n+    private ThrottlingRejectHandler<I, O> rejectHandler;\n+\n+    AbstractThrottlingServiceBuilder() {\n+        acceptHandler = requireNonNull(defaultAcceptHandler(), \"defaultAcceptHandler\");\n+        rejectHandler = requireNonNull(defaultRejectHandler(), \"defaultRejectHandler\");\n+    }\n+\n+    /**\n+     * Provides default request accept handler.\n+     */\n+    protected ThrottlingAcceptHandler<I, O> defaultAcceptHandler() {\n+        return Service::serve;\n+    }\n+\n+    /**\n+     * Provides default request reject handler.\n+     */\n+    protected abstract ThrottlingRejectHandler<I, O> defaultRejectHandler();\n+\n+    /**\n+     * Sets {@link ThrottlingStrategy}.\n+     */\n+    protected void setStrategy(ThrottlingStrategy<I> strategy) {\n+        this.strategy = requireNonNull(strategy, \"strategy\");\n+    }\n+\n+    protected ThrottlingStrategy<I> getStrategy() {\n+        if (strategy == null) {\n+            throw new IllegalStateException(\"no \" + ThrottlingStrategy.class.getSimpleName() + \" was added.\");\n+        }\n+        return strategy;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingAcceptHandler}.\n+     */\n+    protected void setAcceptHandler(\n+            ThrottlingAcceptHandler<I, O> acceptHandler) {\n+        this.acceptHandler = requireNonNull(acceptHandler, \"acceptHandler\");\n+    }\n+\n+    protected ThrottlingAcceptHandler<I, O> getAcceptHandler() {\n+        return acceptHandler;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingRejectHandler}.\n+     */\n+    protected void setRejectHandler(\n+            ThrottlingRejectHandler<I, O> rejectHandler) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NDM1Mzk0", "url": "https://github.com/line/armeria/pull/2503#pullrequestreview-365435394", "createdAt": "2020-02-27T06:15:39Z", "commit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoxNTozOVrOFvGVOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoxNTozOVrOFvGVOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMTEzMA==", "bodyText": "Just wondering, any thoughts on\n\nRemoving accept handler (what can we expect other than just running the delegate?)\nRemove delegate from reject handler (what can we expect other than not running delegate?)\n\nI think it's fine to have them too but it does add some complexity which might not ever be needed.", "url": "https://github.com/line/armeria/pull/2503#discussion_r384931130", "createdAt": "2020-02-27T06:15:39Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingAcceptHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.RpcRequest;\n+import com.linecorp.armeria.common.RpcResponse;\n+import com.linecorp.armeria.server.Service;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * A callback which is invoked to handle accepted (successful) requests indicated by {@link ThrottlingStrategy}.\n+ *\n+ * @param <I> the type of incoming {@link Request}. Must be {@link HttpRequest} or {@link RpcRequest}.\n+ * @param <O> the type of outgoing {@link Response}. Must be {@link HttpResponse} or {@link RpcResponse}.\n+ *\n+ * @see ThrottlingServiceBuilder#onAcceptedRequest(ThrottlingAcceptHandler)\n+ */\n+@FunctionalInterface\n+public interface ThrottlingAcceptHandler<I extends Request, O extends Response> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NDM1OTk4", "url": "https://github.com/line/armeria/pull/2503#pullrequestreview-365435998", "createdAt": "2020-02-27T06:17:41Z", "commit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoxNzo0MVrOFvGXSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoxOToyNVrOFvGY_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMTY1Ng==", "bodyText": "Let's move lambdas to singleton constants", "url": "https://github.com/line/armeria/pull/2503#discussion_r384931656", "createdAt": "2020-02-27T06:17:41Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link ThrottlingService}.\n+ */\n+public class ThrottlingServiceBuilder extends AbstractThrottlingServiceBuilder<HttpRequest, HttpResponse> {\n+\n+    ThrottlingServiceBuilder() {}\n+\n+    /**\n+     * Sets {@link ThrottlingStrategy}.\n+     */\n+    public ThrottlingServiceBuilder strategy(ThrottlingStrategy<HttpRequest> strategy) {\n+        setStrategy(strategy);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingAcceptHandler}.\n+     */\n+    public ThrottlingServiceBuilder onAcceptedRequest(\n+            ThrottlingAcceptHandler<HttpRequest, HttpResponse> acceptHandler) {\n+        setAcceptHandler(acceptHandler);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingRejectHandler}.\n+     */\n+    public ThrottlingServiceBuilder onRejectedRequest(\n+            ThrottlingRejectHandler<HttpRequest, HttpResponse> rejectHandler) {\n+        setRejectHandler(rejectHandler);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides default throttling reject behaviour for {@link HttpRequest}.\n+     * Returns an {@link HttpResponse} with {@link HttpStatus#TOO_MANY_REQUESTS}.\n+     */\n+    @Override\n+    protected ThrottlingRejectHandler<HttpRequest, HttpResponse> defaultRejectHandler() {\n+        return (delegate, ctx, req, cause) -> HttpResponse.of(HttpStatus.TOO_MANY_REQUESTS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMTc1Ng==", "bodyText": "Ditto", "url": "https://github.com/line/armeria/pull/2503#discussion_r384931756", "createdAt": "2020-02-27T06:18:06Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingRpcServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.RpcRequest;\n+import com.linecorp.armeria.common.RpcResponse;\n+import com.linecorp.armeria.server.HttpStatusException;\n+import com.linecorp.armeria.server.RpcService;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link ThrottlingRpcService}.\n+ */\n+public class ThrottlingRpcServiceBuilder extends AbstractThrottlingServiceBuilder<RpcRequest, RpcResponse> {\n+\n+    ThrottlingRpcServiceBuilder() {}\n+\n+    /**\n+     * Sets {@link ThrottlingStrategy}.\n+     */\n+    public ThrottlingRpcServiceBuilder strategy(ThrottlingStrategy<RpcRequest> strategy) {\n+        setStrategy(strategy);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingAcceptHandler}.\n+     */\n+    public ThrottlingRpcServiceBuilder onAcceptedRequest(\n+            ThrottlingAcceptHandler<RpcRequest, RpcResponse> acceptHandler) {\n+        setAcceptHandler(acceptHandler);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingRejectHandler}.\n+     */\n+    public ThrottlingRpcServiceBuilder onRejectedRequest(\n+            ThrottlingRejectHandler<RpcRequest, RpcResponse> rejectHandler) {\n+        setRejectHandler(rejectHandler);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides default throttling reject behaviour for {@link RpcRequest}.\n+     * Responds with {@link HttpStatusException} with {@code 503 Service Unavailable}.\n+     */\n+    @Override\n+    protected ThrottlingRejectHandler<RpcRequest, RpcResponse> defaultRejectHandler() {\n+        return (delegate, ctx, req, cause) ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMjA5NA==", "bodyText": "I think instead of having default*Handler methods we can initialize these to defaults instead of null. Doesn't hurt to add the accept handler to the constructor to be called with super in child builder.", "url": "https://github.com/line/armeria/pull/2503#discussion_r384932094", "createdAt": "2020-02-27T06:19:25Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18301d689d95667185e14c46f94ec3a78781b886", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/18301d689d95667185e14c46f94ec3a78781b886", "committedDate": "2020-02-28T15:58:16Z", "message": "A fix for issue #2482 (Throttling failure response status shall be configurable):\n- changed to set strategy in the builder's constructor like the following ThrottlingRpcService.builder(strategy)...build().\n- made all methods package-private at AbstractThrottlingServiceBuilder.\n- moved lambdas to singleton constants at ThrottlingServiceBuilder, ThrottlingRpcServiceBuilder.\n- updated copyright date wherever applicable.\n- other minor refactoring."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NDgzNzE3", "url": "https://github.com/line/armeria/pull/2503#pullrequestreview-368483717", "createdAt": "2020-03-04T03:29:40Z", "commit": {"oid": "18301d689d95667185e14c46f94ec3a78781b886"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMzoyOTo0MFrOFxe7_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDoxMDozOVrOFxfcmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzMTQyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.responseConverter = requireNonNull(responseConverter);\n          \n          \n            \n                    this.acceptHandler = acceptHandler;\n          \n          \n            \n                    this.rejectHandler = rejectHandler;\n          \n          \n            \n                    this.responseConverter = requireNonNull(responseConverter, \"responseConverter\");\n          \n          \n            \n                    this.acceptHandler = requireNonNull(acceptHandler, \"acceptHandler\");\n          \n          \n            \n                    this.rejectHandler = requireNonNull(rejectHandler, \"rejectHandler);", "url": "https://github.com/line/armeria/pull/2503#discussion_r387431421", "createdAt": "2020-03-04T03:29:40Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingService.java", "diffHunk": "@@ -38,41 +35,32 @@\n \n     private final ThrottlingStrategy<I> strategy;\n     private final Function<CompletionStage<? extends O>, O> responseConverter;\n+    private final ThrottlingAcceptHandler<I, O> acceptHandler;\n+    private final ThrottlingRejectHandler<I, O> rejectHandler;\n \n     /**\n      * Creates a new instance that decorates the specified {@link Service}.\n      */\n     protected AbstractThrottlingService(Service<I, O> delegate, ThrottlingStrategy<I> strategy,\n-                                        Function<CompletionStage<? extends O>, O> responseConverter) {\n+                                        Function<CompletionStage<? extends O>, O> responseConverter,\n+                                        ThrottlingAcceptHandler<I, O> acceptHandler,\n+                                        ThrottlingRejectHandler<I, O> rejectHandler) {\n         super(delegate);\n         this.strategy = requireNonNull(strategy, \"strategy\");\n         this.responseConverter = requireNonNull(responseConverter);\n+        this.acceptHandler = acceptHandler;\n+        this.rejectHandler = rejectHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18301d689d95667185e14c46f94ec3a78781b886"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNjUzOQ==", "bodyText": "Remove @Nullable?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private final ThrottlingStrategy<I> strategy;\n          \n          \n            \n                private final ThrottlingStrategy<I> strategy;", "url": "https://github.com/line/armeria/pull/2503#discussion_r387436539", "createdAt": "2020-03-04T03:53:58Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private final ThrottlingStrategy<I> strategy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18301d689d95667185e14c46f94ec3a78781b886"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNjY4Ng==", "bodyText": "I think we can remove this.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (strategy == null) {\n          \n          \n            \n                        throw new IllegalStateException(\"no \" + ThrottlingStrategy.class.getSimpleName() + \" was added.\");\n          \n          \n            \n                    }", "url": "https://github.com/line/armeria/pull/2503#discussion_r387436686", "createdAt": "2020-03-04T03:54:45Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private final ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;\n+    private ThrottlingRejectHandler<I, O> rejectHandler;\n+\n+    AbstractThrottlingServiceBuilder(ThrottlingStrategy<I> strategy) {\n+        this.strategy = requireNonNull(strategy, \"strategy\");\n+        acceptHandler = requireNonNull(defaultAcceptHandler(), \"defaultAcceptHandler\");\n+        rejectHandler = requireNonNull(defaultRejectHandler(), \"defaultRejectHandler\");\n+    }\n+\n+    /**\n+     * Provides default request accept handler.\n+     */\n+    ThrottlingAcceptHandler<I, O> defaultAcceptHandler() {\n+        return Service::serve;\n+    }\n+\n+    /**\n+     * Provides default request reject handler.\n+     */\n+    abstract ThrottlingRejectHandler<I, O> defaultRejectHandler();\n+\n+    final ThrottlingStrategy<I> getStrategy() {\n+        if (strategy == null) {\n+            throw new IllegalStateException(\"no \" + ThrottlingStrategy.class.getSimpleName() + \" was added.\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18301d689d95667185e14c46f94ec3a78781b886"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzOTc2OA==", "bodyText": "Why don't we add a test for a custom reject handler?", "url": "https://github.com/line/armeria/pull/2503#discussion_r387439768", "createdAt": "2020-03-04T04:10:39Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/server/throttling/ThrottlingServiceTest.java", "diffHunk": "@@ -46,8 +47,13 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)\n     public ServerRule serverRule = new ServerRule() {\n         @Override\n         protected void configure(ServerBuilder sb) throws Exception {\n-            sb.service(\"/http-never\", SERVICE.decorate(ThrottlingService.newDecorator(never())));\n             sb.service(\"/http-always\", SERVICE.decorate(ThrottlingService.newDecorator(always())));\n+            sb.service(\"/http-never\", SERVICE.decorate(ThrottlingService.newDecorator(never())));\n+            sb.service(\"/http-never-custom\", SERVICE.decorate(\n+                    ThrottlingService.newDecorator(ThrottlingStrategy.of((ctx, req) -> completedFuture(false)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18301d689d95667185e14c46f94ec3a78781b886"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b8fcf10c2eda15338ab875702aef892f8e0d1b6", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/5b8fcf10c2eda15338ab875702aef892f8e0d1b6", "committedDate": "2020-03-04T19:46:07Z", "message": "Incorporated review feedback by @ikhoon"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MjQ2MDU3", "url": "https://github.com/line/armeria/pull/2503#pullrequestreview-369246057", "createdAt": "2020-03-05T01:46:32Z", "commit": {"oid": "5b8fcf10c2eda15338ab875702aef892f8e0d1b6"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMTo0NjozMlrOFyD2oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMTo0NjozMlrOFyD2oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzNjI1Nw==", "bodyText": "Ah, Thanks!", "url": "https://github.com/line/armeria/pull/2503#discussion_r388036257", "createdAt": "2020-03-05T01:46:32Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/server/throttling/ThrottlingServiceTest.java", "diffHunk": "@@ -46,8 +47,13 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)\n     public ServerRule serverRule = new ServerRule() {\n         @Override\n         protected void configure(ServerBuilder sb) throws Exception {\n-            sb.service(\"/http-never\", SERVICE.decorate(ThrottlingService.newDecorator(never())));\n             sb.service(\"/http-always\", SERVICE.decorate(ThrottlingService.newDecorator(always())));\n+            sb.service(\"/http-never\", SERVICE.decorate(ThrottlingService.newDecorator(never())));\n+            sb.service(\"/http-never-custom\", SERVICE.decorate(\n+                    ThrottlingService.newDecorator(ThrottlingStrategy.of((ctx, req) -> completedFuture(false)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzOTc2OA=="}, "originalCommit": {"oid": "18301d689d95667185e14c46f94ec3a78781b886"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NTg1ODA5", "url": "https://github.com/line/armeria/pull/2503#pullrequestreview-369585809", "createdAt": "2020-03-05T13:55:31Z", "commit": {"oid": "5b8fcf10c2eda15338ab875702aef892f8e0d1b6"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzo1NTozMVrOFyUYog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzo1NjowNlrOFyUaTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwNzEwNg==", "bodyText": "nit: final\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ThrottlingRpcServiceBuilder extends AbstractThrottlingServiceBuilder<RpcRequest, RpcResponse> {\n          \n          \n            \n            public final class ThrottlingRpcServiceBuilder\n          \n          \n            \n                    extends AbstractThrottlingServiceBuilder<RpcRequest, RpcResponse> {", "url": "https://github.com/line/armeria/pull/2503#discussion_r388307106", "createdAt": "2020-03-05T13:55:31Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingRpcServiceBuilder.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.RpcRequest;\n+import com.linecorp.armeria.common.RpcResponse;\n+import com.linecorp.armeria.server.HttpStatusException;\n+import com.linecorp.armeria.server.RpcService;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link ThrottlingRpcService}.\n+ */\n+public class ThrottlingRpcServiceBuilder extends AbstractThrottlingServiceBuilder<RpcRequest, RpcResponse> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8fcf10c2eda15338ab875702aef892f8e0d1b6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwNzUzMg==", "bodyText": "nit: final\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ThrottlingServiceBuilder extends AbstractThrottlingServiceBuilder<HttpRequest, HttpResponse> {\n          \n          \n            \n            public final class ThrottlingServiceBuilder\n          \n          \n            \n                    extends AbstractThrottlingServiceBuilder<HttpRequest, HttpResponse> {", "url": "https://github.com/line/armeria/pull/2503#discussion_r388307532", "createdAt": "2020-03-05T13:56:06Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link ThrottlingService}.\n+ */\n+public class ThrottlingServiceBuilder extends AbstractThrottlingServiceBuilder<HttpRequest, HttpResponse> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8fcf10c2eda15338ab875702aef892f8e0d1b6"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82b411b24194be0941ce26672fb940cc5adedc1f", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/82b411b24194be0941ce26672fb940cc5adedc1f", "committedDate": "2020-03-06T10:32:11Z", "message": "Incorporated review feedback by @trustin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8d0593927f03209275992af95c4b25c4ff5b566", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/f8d0593927f03209275992af95c4b25c4ff5b566", "committedDate": "2020-03-06T14:41:37Z", "message": "Incorporated review feedback by @anuraaga"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMzc1NTA2", "url": "https://github.com/line/armeria/pull/2503#pullrequestreview-370375506", "createdAt": "2020-03-06T14:48:08Z", "commit": {"oid": "f8d0593927f03209275992af95c4b25c4ff5b566"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwOTA3MDY5", "url": "https://github.com/line/armeria/pull/2503#pullrequestreview-370907069", "createdAt": "2020-03-09T03:58:36Z", "commit": {"oid": "f8d0593927f03209275992af95c4b25c4ff5b566"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMzo1ODozNlrOFzaYmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMzo1ODozNlrOFzaYmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ1Mzk3Nw==", "bodyText": "Then, we should fix AuthService first. \ud83d\ude04\nI must be forgotten when I was doing #2323. But don't worry, after this is merged, I will work on it. Thanks!", "url": "https://github.com/line/armeria/pull/2503#discussion_r389453977", "createdAt": "2020-03-09T03:58:36Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;\n+    private ThrottlingRejectHandler<I, O> rejectHandler;\n+\n+    AbstractThrottlingServiceBuilder() {\n+        acceptHandler = requireNonNull(defaultAcceptHandler(), \"defaultAcceptHandler\");\n+        rejectHandler = requireNonNull(defaultRejectHandler(), \"defaultRejectHandler\");\n+    }\n+\n+    /**\n+     * Provides default request accept handler.\n+     */\n+    protected ThrottlingAcceptHandler<I, O> defaultAcceptHandler() {\n+        return Service::serve;\n+    }\n+\n+    /**\n+     * Provides default request reject handler.\n+     */\n+    protected abstract ThrottlingRejectHandler<I, O> defaultRejectHandler();\n+\n+    /**\n+     * Sets {@link ThrottlingStrategy}.\n+     */\n+    protected void setStrategy(ThrottlingStrategy<I> strategy) {\n+        this.strategy = requireNonNull(strategy, \"strategy\");\n+    }\n+\n+    protected ThrottlingStrategy<I> getStrategy() {\n+        if (strategy == null) {\n+            throw new IllegalStateException(\"no \" + ThrottlingStrategy.class.getSimpleName() + \" was added.\");\n+        }\n+        return strategy;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingAcceptHandler}.\n+     */\n+    protected void setAcceptHandler(\n+            ThrottlingAcceptHandler<I, O> acceptHandler) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyOTYxOQ=="}, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwOTgwNTE4", "url": "https://github.com/line/armeria/pull/2503#pullrequestreview-370980518", "createdAt": "2020-03-09T08:26:51Z", "commit": {"oid": "f8d0593927f03209275992af95c4b25c4ff5b566"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1019, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}