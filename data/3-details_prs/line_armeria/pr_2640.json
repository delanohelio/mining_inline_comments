{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1Njc3NjMy", "number": 2640, "title": "Create properties files based on Doc Comments for Rest APIs", "bodyText": "First PR of two\nCreates a compiler preprocessor that creates properties files containing the javadoc comment of all parameters in the rest api. The content of these files can be used in the doc service to supplement the documentation of APIs.\nThe second PR will implement the usage in the doc service.\nIf you prefer to do everything in one PR, I can do that.", "createdAt": "2020-03-30T14:10:25Z", "url": "https://github.com/line/armeria/pull/2640", "merged": true, "mergeCommit": {"oid": "a73a6d01d0c049d55c9ff977525ec1deb6975a9b"}, "closed": true, "closedAt": "2020-05-08T05:12:32Z", "author": {"login": "hueneburg"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcU53x8gFqTM4ODAwNjg4OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfHDvEgFqTQwNzkyOTU1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MDA2ODg5", "url": "https://github.com/line/armeria/pull/2640#pullrequestreview-388006889", "createdAt": "2020-04-06T07:50:04Z", "commit": {"oid": "479cc487b4dca4fdc33d57026e665421e79df011"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNzo1MDowNVrOGBLoZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNzo1MDowNVrOGBLoZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg5MjMyNA==", "bodyText": "Perhaps we should name the file in a similar manner with the version properties files, i.e. META-INF/com.linecorp.armeria.docstrings.annotated.properties", "url": "https://github.com/line/armeria/pull/2640#discussion_r403892324", "createdAt": "2020-04-06T07:50:05Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .parallelStream()\n+                .filter(element -> element.getKind() == ElementKind.METHOD)\n+                // Element is always ExecutableElement because it is a method.\n+                .forEachOrdered(element -> {\n+                    try {\n+                        processMethod((ExecutableElement) element);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                });\n+    }\n+\n+    private void processMethod(ExecutableElement method) throws IOException {\n+        final String className = ((TypeElement) method.getEnclosingElement()).getQualifiedName().toString();\n+        final Properties properties = readProperties(className);\n+        final String docComment = processingEnv.getElementUtils().getDocComment(method);\n+        if (docComment == null || !docComment.contains(\"@param\")) {\n+            return;\n+        }\n+        final List<List<String>> lines = Arrays.stream(docComment.split(\"\\\\R\"))\n+                                               .filter(line -> !line.trim().isEmpty())\n+                                               .map(line -> Arrays.stream(line.split(\"\\\\s\"))\n+                                                                  .filter(word -> !word.trim().isEmpty())\n+                                                                  .collect(toImmutableList()))\n+                                               .collect(toImmutableList());\n+        method.getParameters().forEach(param -> {\n+            final StringBuilder stringBuilder = new StringBuilder();\n+            JavaDocParserState state = JavaDocParserState.SEARCHING;\n+            for (List<String> line : lines) {\n+                final List<String> subLine;\n+                if ((line.size() < 3 ||\n+                     !\"@param\".equals(line.get(0)) ||\n+                     !param.getSimpleName().toString().equals(line.get(1))) &&\n+                    state == JavaDocParserState.SEARCHING) {\n+                    continue;\n+                } else if (state == JavaDocParserState.IN_DESCRIPTION &&\n+                           line.size() > 0 &&\n+                           \"@param\".equals(line.get(0))) {\n+                    break;\n+                } else if (state == JavaDocParserState.SEARCHING) {\n+                    subLine = line.subList(2, line.size());\n+                    state = JavaDocParserState.IN_DESCRIPTION;\n+                } else {\n+                    subLine = line;\n+                }\n+                for (String word : subLine) {\n+                    stringBuilder.append(word);\n+                    stringBuilder.append(' ');\n+                }\n+            }\n+            setProperty(properties, method, param, stringBuilder.toString().trim());\n+        });\n+    }\n+\n+    private void setProperty(Properties properties,\n+                             ExecutableElement method,\n+                             VariableElement parameter,\n+                             String description) {\n+        final String methodName = method.getSimpleName().toString();\n+        final String parameterName = parameter.getSimpleName().toString();\n+        properties.setProperty(methodName + \".\" + parameterName, description);\n+    }\n+\n+    /**\n+     * Creates the file name used in the rest api documentation properties files.\n+     * @param className The class name used for generating the file name.\n+     * @return The used file name.\n+     */\n+    public static String getFileName(String className) {\n+        return className + \"-generated-docs.properties\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "479cc487b4dca4fdc33d57026e665421e79df011"}, "originalPosition": 180}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MDA4MjQ3", "url": "https://github.com/line/armeria/pull/2640#pullrequestreview-388008247", "createdAt": "2020-04-06T07:52:13Z", "commit": {"oid": "479cc487b4dca4fdc33d57026e665421e79df011"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4Nzg4ODE5", "url": "https://github.com/line/armeria/pull/2640#pullrequestreview-388788819", "createdAt": "2020-04-07T05:15:27Z", "commit": {"oid": "897b839bc4165a615547e0b2ebb425529f994207"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNToxNToyN1rOGBzJuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNToxNToyN1rOGBzJuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzOTgzNQ==", "bodyText": "I think we should move this to a separate artifact - some build systems will automatically run all annotation processors on classpath but it's probably better for this to be opt-in like spring boot configuration process", "url": "https://github.com/line/armeria/pull/2640#discussion_r404539835", "createdAt": "2020-04-07T05:15:27Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "897b839bc4165a615547e0b2ebb425529f994207"}, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "897b839bc4165a615547e0b2ebb425529f994207", "author": {"user": {"login": "hueneburg", "name": "Armin H\u00fcneburg"}}, "url": "https://github.com/line/armeria/commit/897b839bc4165a615547e0b2ebb425529f994207", "committedDate": "2020-04-07T01:13:05Z", "message": "Clean up file name and files that are not needed"}, "afterCommit": {"oid": "6ea61877ed795758eaa07f91b8d3c600c55e5885", "author": {"user": {"login": "hueneburg", "name": "Armin H\u00fcneburg"}}, "url": "https://github.com/line/armeria/commit/6ea61877ed795758eaa07f91b8d3c600c55e5885", "committedDate": "2020-04-18T09:42:44Z", "message": "Move preprocessor into extra project, Add description in examples"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODk5MzQ3", "url": "https://github.com/line/armeria/pull/2640#pullrequestreview-395899347", "createdAt": "2020-04-18T09:47:18Z", "commit": {"oid": "05ef87f1e1e13863b384c8eef2ebaf679405fc51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwOTo0NzoxOFrOGHprNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwOTo0NzoxOFrOGHprNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NjAyMw==", "bodyText": "I'm not sure this is right. I'm not sure what the relocate flag does...\n@anuraaga @trustin @ikhoon @minwoox please take a look \ud83d\ude47", "url": "https://github.com/line/armeria/pull/2640#discussion_r410676023", "createdAt": "2020-04-18T09:47:18Z", "author": {"login": "hueneburg"}, "path": "settings.gradle", "diffHunk": "@@ -36,6 +36,7 @@ includeWithFlags ':tomcat8.5',                          'java', 'publish', 'relo\n includeWithFlags ':zookeeper',                          'java', 'publish', 'relocate'\n includeWithFlags ':saml',                               'java', 'publish', 'relocate'\n includeWithFlags ':bucket4j',                           'java', 'publish', 'relocate'\n+includeWithFlags ':preprocessor',                       'java', 'publish', 'relocate'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05ef87f1e1e13863b384c8eef2ebaf679405fc51"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e0620ad2fa2b1d2c24ee54f0987cb5f1cb7f5049", "author": {"user": {"login": "hueneburg", "name": "Armin H\u00fcneburg"}}, "url": "https://github.com/line/armeria/commit/e0620ad2fa2b1d2c24ee54f0987cb5f1cb7f5049", "committedDate": "2020-04-22T08:45:04Z", "message": "Fix processor file"}, "afterCommit": {"oid": "b26245a664c2115be389ece10701ce9c80f22847", "author": {"user": {"login": "hueneburg", "name": "Armin H\u00fcneburg"}}, "url": "https://github.com/line/armeria/commit/b26245a664c2115be389ece10701ce9c80f22847", "committedDate": "2020-04-23T00:35:44Z", "message": "Fix processor file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NjE3MzE3", "url": "https://github.com/line/armeria/pull/2640#pullrequestreview-399617317", "createdAt": "2020-04-24T03:33:58Z", "commit": {"oid": "b26245a664c2115be389ece10701ce9c80f22847"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzozMzo1OFrOGLE2DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzozMzo1OFrOGLE2DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2Njg5Mg==", "bodyText": "I think we should either just stick to normal stream or have a flag to control whether this is parallel or not. Many builds have a lot of parallelism already managed by Gradle so having annotation processors also starting threads can be undesirable.", "url": "https://github.com/line/armeria/pull/2640#discussion_r414266892", "createdAt": "2020-04-24T03:33:58Z", "author": {"login": "anuraaga"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .parallelStream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b26245a664c2115be389ece10701ce9c80f22847"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNjYyODE1", "url": "https://github.com/line/armeria/pull/2640#pullrequestreview-400662815", "createdAt": "2020-04-27T06:39:12Z", "commit": {"oid": "6861c5c1bf9063159a3f9982c08d902b10a82a5d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98d053178469912fb5283fb31c6730b5bb974c97", "author": {"user": {"login": "hueneburg", "name": "Armin H\u00fcneburg"}}, "url": "https://github.com/line/armeria/commit/98d053178469912fb5283fb31c6730b5bb974c97", "committedDate": "2020-04-28T00:42:12Z", "message": "Create properties files based on Doc Comments for Rest APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6671dce5a3b4790025431c206ddc4e7899c535a", "author": {"user": {"login": "hueneburg", "name": "Armin H\u00fcneburg"}}, "url": "https://github.com/line/armeria/commit/c6671dce5a3b4790025431c206ddc4e7899c535a", "committedDate": "2020-04-28T00:42:12Z", "message": "Clean up file name and files that are not needed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f536618580a8d610fc15c8a1b9a2ab87efbbe4e7", "author": {"user": {"login": "hueneburg", "name": "Armin H\u00fcneburg"}}, "url": "https://github.com/line/armeria/commit/f536618580a8d610fc15c8a1b9a2ab87efbbe4e7", "committedDate": "2020-04-28T00:42:12Z", "message": "Move preprocessor into extra project, Add description in examples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7712d873e3ff6005dc18ef05278f0b03797265ad", "author": {"user": {"login": "hueneburg", "name": "Armin H\u00fcneburg"}}, "url": "https://github.com/line/armeria/commit/7712d873e3ff6005dc18ef05278f0b03797265ad", "committedDate": "2020-04-28T00:42:12Z", "message": "Fix problems found"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31da3e02fa282e4d2a7f80a786413b830109127e", "author": {"user": {"login": "hueneburg", "name": "Armin H\u00fcneburg"}}, "url": "https://github.com/line/armeria/commit/31da3e02fa282e4d2a7f80a786413b830109127e", "committedDate": "2020-04-28T00:42:12Z", "message": "Rename package and add unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cebfdd49b5384e816d0ab447fcead78b89f21be8", "author": {"user": {"login": "hueneburg", "name": "Armin H\u00fcneburg"}}, "url": "https://github.com/line/armeria/commit/cebfdd49b5384e816d0ab447fcead78b89f21be8", "committedDate": "2020-04-28T00:42:12Z", "message": "Fix processor file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7041f70424057d90ebd9ab800418d90d86c314e3", "author": {"user": {"login": "hueneburg", "name": "Armin H\u00fcneburg"}}, "url": "https://github.com/line/armeria/commit/7041f70424057d90ebd9ab800418d90d86c314e3", "committedDate": "2020-04-28T00:42:12Z", "message": "Apply review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6861c5c1bf9063159a3f9982c08d902b10a82a5d", "author": {"user": {"login": "hueneburg", "name": "Armin H\u00fcneburg"}}, "url": "https://github.com/line/armeria/commit/6861c5c1bf9063159a3f9982c08d902b10a82a5d", "committedDate": "2020-04-27T01:51:15Z", "message": "Apply review"}, "afterCommit": {"oid": "7041f70424057d90ebd9ab800418d90d86c314e3", "author": {"user": {"login": "hueneburg", "name": "Armin H\u00fcneburg"}}, "url": "https://github.com/line/armeria/commit/7041f70424057d90ebd9ab800418d90d86c314e3", "committedDate": "2020-04-28T00:42:12Z", "message": "Apply review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/17144cc109528b1864fe6964e2f61cfc12169f82", "committedDate": "2020-04-29T10:01:09Z", "message": "Update DocumentationProcessorTest.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNTI0OTg2", "url": "https://github.com/line/armeria/pull/2640#pullrequestreview-402524986", "createdAt": "2020-04-29T10:01:53Z", "commit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0Njg5MDc1", "url": "https://github.com/line/armeria/pull/2640#pullrequestreview-404689075", "createdAt": "2020-05-04T02:44:18Z", "commit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMjo0NDoxOFrOGPxoyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNTo1MjoxNlrOGPzY-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5NTA4MA==", "bodyText": "Let's add a logger and use it.\nForget about this. \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2640#discussion_r419195080", "createdAt": "2020-05-04T02:44:18Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .stream()\n+                .filter(element -> element.getKind() == ElementKind.METHOD)\n+                // Element is always ExecutableElement because it is a method.\n+                .forEachOrdered(element -> {\n+                    try {\n+                        processMethod((ExecutableElement) element);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxNzczOA==", "bodyText": "nit: properties.isEmpty()", "url": "https://github.com/line/armeria/pull/2640#discussion_r419217738", "createdAt": "2020-05-04T05:20:58Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxOTEyOA==", "bodyText": "Could be a static method.", "url": "https://github.com/line/armeria/pull/2640#discussion_r419219128", "createdAt": "2020-05-04T05:28:43Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .stream()\n+                .filter(element -> element.getKind() == ElementKind.METHOD)\n+                // Element is always ExecutableElement because it is a method.\n+                .forEachOrdered(element -> {\n+                    try {\n+                        processMethod((ExecutableElement) element);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                });\n+    }\n+\n+    private void processMethod(ExecutableElement method) throws IOException {\n+        final String className = ((TypeElement) method.getEnclosingElement()).getQualifiedName().toString();\n+        final Properties properties = readProperties(className);\n+        final String docComment = processingEnv.getElementUtils().getDocComment(method);\n+        if (docComment == null || !docComment.contains(\"@param\")) {\n+            return;\n+        }\n+        final List<List<String>> lines = Arrays.stream(docComment.split(\"\\\\R\"))\n+                                               .filter(line -> !line.trim().isEmpty())\n+                                               .map(line -> Arrays.stream(line.split(\"\\\\s\"))\n+                                                                  .filter(word -> !word.trim().isEmpty())\n+                                                                  .collect(toImmutableList()))\n+                                               .collect(toImmutableList());\n+        method.getParameters().forEach(param -> {\n+            final StringBuilder stringBuilder = new StringBuilder();\n+            JavaDocParserState state = JavaDocParserState.SEARCHING;\n+            for (List<String> line : lines) {\n+                final List<String> subLine;\n+                if ((line.size() < 3 ||\n+                     !\"@param\".equals(line.get(0)) ||\n+                     !param.getSimpleName().toString().equals(line.get(1))) &&\n+                    state == JavaDocParserState.SEARCHING) {\n+                    continue;\n+                } else if (state == JavaDocParserState.IN_DESCRIPTION &&\n+                           line.size() > 0 &&\n+                           \"@param\".equals(line.get(0))) {\n+                    break;\n+                } else if (state == JavaDocParserState.SEARCHING) {\n+                    subLine = line.subList(2, line.size());\n+                    state = JavaDocParserState.IN_DESCRIPTION;\n+                } else {\n+                    subLine = line;\n+                }\n+                for (String word : subLine) {\n+                    stringBuilder.append(word);\n+                    stringBuilder.append(' ');\n+                }\n+            }\n+            setProperty(properties, method, param, stringBuilder.toString().trim());\n+        });\n+    }\n+\n+    private void setProperty(Properties properties,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxOTE3MQ==", "bodyText": "nit: \".\" -> '.'", "url": "https://github.com/line/armeria/pull/2640#discussion_r419219171", "createdAt": "2020-05-04T05:28:58Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .stream()\n+                .filter(element -> element.getKind() == ElementKind.METHOD)\n+                // Element is always ExecutableElement because it is a method.\n+                .forEachOrdered(element -> {\n+                    try {\n+                        processMethod((ExecutableElement) element);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                });\n+    }\n+\n+    private void processMethod(ExecutableElement method) throws IOException {\n+        final String className = ((TypeElement) method.getEnclosingElement()).getQualifiedName().toString();\n+        final Properties properties = readProperties(className);\n+        final String docComment = processingEnv.getElementUtils().getDocComment(method);\n+        if (docComment == null || !docComment.contains(\"@param\")) {\n+            return;\n+        }\n+        final List<List<String>> lines = Arrays.stream(docComment.split(\"\\\\R\"))\n+                                               .filter(line -> !line.trim().isEmpty())\n+                                               .map(line -> Arrays.stream(line.split(\"\\\\s\"))\n+                                                                  .filter(word -> !word.trim().isEmpty())\n+                                                                  .collect(toImmutableList()))\n+                                               .collect(toImmutableList());\n+        method.getParameters().forEach(param -> {\n+            final StringBuilder stringBuilder = new StringBuilder();\n+            JavaDocParserState state = JavaDocParserState.SEARCHING;\n+            for (List<String> line : lines) {\n+                final List<String> subLine;\n+                if ((line.size() < 3 ||\n+                     !\"@param\".equals(line.get(0)) ||\n+                     !param.getSimpleName().toString().equals(line.get(1))) &&\n+                    state == JavaDocParserState.SEARCHING) {\n+                    continue;\n+                } else if (state == JavaDocParserState.IN_DESCRIPTION &&\n+                           line.size() > 0 &&\n+                           \"@param\".equals(line.get(0))) {\n+                    break;\n+                } else if (state == JavaDocParserState.SEARCHING) {\n+                    subLine = line.subList(2, line.size());\n+                    state = JavaDocParserState.IN_DESCRIPTION;\n+                } else {\n+                    subLine = line;\n+                }\n+                for (String word : subLine) {\n+                    stringBuilder.append(word);\n+                    stringBuilder.append(' ');\n+                }\n+            }\n+            setProperty(properties, method, param, stringBuilder.toString().trim());\n+        });\n+    }\n+\n+    private void setProperty(Properties properties,\n+                             ExecutableElement method,\n+                             VariableElement parameter,\n+                             String description) {\n+        final String methodName = method.getSimpleName().toString();\n+        final String parameterName = parameter.getSimpleName().toString();\n+        properties.setProperty(methodName + \".\" + parameterName, description);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxOTQ5Ng==", "bodyText": "Let's use annotated services instead of RESTful services throughout this PR. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2640#discussion_r419219496", "createdAt": "2020-05-04T05:30:53Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/package-info.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Annotation processors for RESTful services.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyMDY5OQ==", "bodyText": "How about publishing this artifact after we implement the logic in doc service which uses the processor?", "url": "https://github.com/line/armeria/pull/2640#discussion_r419220699", "createdAt": "2020-05-04T05:37:16Z", "author": {"login": "minwoox"}, "path": "settings.gradle", "diffHunk": "@@ -36,6 +36,7 @@ includeWithFlags ':tomcat8.5',                          'java', 'publish', 'relo\n includeWithFlags ':zookeeper',                          'java', 'publish', 'relocate'\n includeWithFlags ':saml',                               'java', 'publish', 'relocate'\n includeWithFlags ':bucket4j',                           'java', 'publish', 'relocate'\n+includeWithFlags ':annotation-processor',               'java', 'publish', 'relocate'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyMDk3Mg==", "bodyText": "Let's use properties.getProperty", "url": "https://github.com/line/armeria/pull/2640#discussion_r419220972", "createdAt": "2020-05-04T05:38:51Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/test/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessorTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assumptions.assumeThat;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+\n+import org.joor.CompileOptions;\n+import org.joor.Reflect;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.io.CharStreams;\n+\n+import com.linecorp.armeria.common.util.SystemInfo;\n+\n+public class DocumentationProcessorTest {\n+    private final DocumentationProcessor target = new DocumentationProcessor();\n+\n+    @BeforeAll\n+    public static void classSetup() {\n+        assumeThat(SystemInfo.javaVersion()).isGreaterThanOrEqualTo(13);\n+    }\n+\n+    @Test\n+    public void withJavaDoc() throws IOException {\n+        Reflect.compile(\n+                \"com.linecorp.armeria.WithJavaDoc\",\n+                loadFile(\"WithJavaDoc.java\"),\n+                new CompileOptions().processors(target)\n+        );\n+        testAndDeleteFile(\"com.linecorp.armeria.WithJavaDoc\");\n+    }\n+\n+    @Test\n+    public void noJavaDoc() throws IOException {\n+        Reflect.compile(\n+                \"com.linecorp.armeria.NoJavaDoc\",\n+                loadFile(\"NoJavaDoc.java\"),\n+                new CompileOptions().processors(target)\n+        );\n+        final String fileName = DocumentationProcessor.getFileName(\"com.linecorp.armeria.NoJavaDoc\");\n+        assertThat(Files.notExists(Paths.get(fileName))).isTrue();\n+    }\n+\n+    private void testAndDeleteFile(String fileName) throws IOException {\n+        final Path path = Paths.get(DocumentationProcessor.getFileName(fileName));\n+        assertThat(Files.exists(path)).isTrue();\n+        final Properties properties = new Properties();\n+        properties.load(Files.newInputStream(path));\n+        assertThat(properties.get(\"a.x\")).isEqualTo(\"The x variable in a\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyMTAwNA==", "bodyText": "Could be static", "url": "https://github.com/line/armeria/pull/2640#discussion_r419221004", "createdAt": "2020-05-04T05:38:57Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/test/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessorTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assumptions.assumeThat;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+\n+import org.joor.CompileOptions;\n+import org.joor.Reflect;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.io.CharStreams;\n+\n+import com.linecorp.armeria.common.util.SystemInfo;\n+\n+public class DocumentationProcessorTest {\n+    private final DocumentationProcessor target = new DocumentationProcessor();\n+\n+    @BeforeAll\n+    public static void classSetup() {\n+        assumeThat(SystemInfo.javaVersion()).isGreaterThanOrEqualTo(13);\n+    }\n+\n+    @Test\n+    public void withJavaDoc() throws IOException {\n+        Reflect.compile(\n+                \"com.linecorp.armeria.WithJavaDoc\",\n+                loadFile(\"WithJavaDoc.java\"),\n+                new CompileOptions().processors(target)\n+        );\n+        testAndDeleteFile(\"com.linecorp.armeria.WithJavaDoc\");\n+    }\n+\n+    @Test\n+    public void noJavaDoc() throws IOException {\n+        Reflect.compile(\n+                \"com.linecorp.armeria.NoJavaDoc\",\n+                loadFile(\"NoJavaDoc.java\"),\n+                new CompileOptions().processors(target)\n+        );\n+        final String fileName = DocumentationProcessor.getFileName(\"com.linecorp.armeria.NoJavaDoc\");\n+        assertThat(Files.notExists(Paths.get(fileName))).isTrue();\n+    }\n+\n+    private void testAndDeleteFile(String fileName) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyMzM5Mw==", "bodyText": "How about using a Splitter so that we don't need this line?\nprivate static final Splitter splitter = Splitter.on(\"\\n\").trimResults();\n...\nfinal List<List<String>> lines = Streams.stream(splitter.split(docComment)).map(...)", "url": "https://github.com/line/armeria/pull/2640#discussion_r419223393", "createdAt": "2020-05-04T05:50:31Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .stream()\n+                .filter(element -> element.getKind() == ElementKind.METHOD)\n+                // Element is always ExecutableElement because it is a method.\n+                .forEachOrdered(element -> {\n+                    try {\n+                        processMethod((ExecutableElement) element);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                });\n+    }\n+\n+    private void processMethod(ExecutableElement method) throws IOException {\n+        final String className = ((TypeElement) method.getEnclosingElement()).getQualifiedName().toString();\n+        final Properties properties = readProperties(className);\n+        final String docComment = processingEnv.getElementUtils().getDocComment(method);\n+        if (docComment == null || !docComment.contains(\"@param\")) {\n+            return;\n+        }\n+        final List<List<String>> lines = Arrays.stream(docComment.split(\"\\\\R\"))\n+                                               .filter(line -> !line.trim().isEmpty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyMzQ4Ng==", "bodyText": "Could it be just \\n? instead of \\\\R", "url": "https://github.com/line/armeria/pull/2640#discussion_r419223486", "createdAt": "2020-05-04T05:50:53Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .stream()\n+                .filter(element -> element.getKind() == ElementKind.METHOD)\n+                // Element is always ExecutableElement because it is a method.\n+                .forEachOrdered(element -> {\n+                    try {\n+                        processMethod((ExecutableElement) element);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                });\n+    }\n+\n+    private void processMethod(ExecutableElement method) throws IOException {\n+        final String className = ((TypeElement) method.getEnclosingElement()).getQualifiedName().toString();\n+        final Properties properties = readProperties(className);\n+        final String docComment = processingEnv.getElementUtils().getDocComment(method);\n+        if (docComment == null || !docComment.contains(\"@param\")) {\n+            return;\n+        }\n+        final List<List<String>> lines = Arrays.stream(docComment.split(\"\\\\R\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyMzU2MA==", "bodyText": "Could it be just  (space) instead of \\\\s?", "url": "https://github.com/line/armeria/pull/2640#discussion_r419223560", "createdAt": "2020-05-04T05:51:12Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .stream()\n+                .filter(element -> element.getKind() == ElementKind.METHOD)\n+                // Element is always ExecutableElement because it is a method.\n+                .forEachOrdered(element -> {\n+                    try {\n+                        processMethod((ExecutableElement) element);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                });\n+    }\n+\n+    private void processMethod(ExecutableElement method) throws IOException {\n+        final String className = ((TypeElement) method.getEnclosingElement()).getQualifiedName().toString();\n+        final Properties properties = readProperties(className);\n+        final String docComment = processingEnv.getElementUtils().getDocComment(method);\n+        if (docComment == null || !docComment.contains(\"@param\")) {\n+            return;\n+        }\n+        final List<List<String>> lines = Arrays.stream(docComment.split(\"\\\\R\"))\n+                                               .filter(line -> !line.trim().isEmpty())\n+                                               .map(line -> Arrays.stream(line.split(\"\\\\s\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyMzgwMQ==", "bodyText": "How about adding a case that the parameter description is on multiple lines?", "url": "https://github.com/line/armeria/pull/2640#discussion_r419223801", "createdAt": "2020-05-04T05:52:16Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/test/resources/DocumentationProcessor/WithJavaDoc.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria;\n+\n+import com.linecorp.armeria.server.annotation.Delete;\n+import com.linecorp.armeria.server.annotation.Get;\n+import com.linecorp.armeria.server.annotation.Param;\n+import com.linecorp.armeria.server.annotation.Post;\n+import com.linecorp.armeria.server.annotation.Put;\n+\n+public class WithJavaDoc {\n+    /**\n+     * A method.\n+     * @param x The x variable in a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NzYyOTE1", "url": "https://github.com/line/armeria/pull/2640#pullrequestreview-404762915", "createdAt": "2020-05-04T07:37:41Z", "commit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNzozNzo0MVrOGP1ecA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNzozNzo0MVrOGP1ecA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI1Nzk2OA==", "bodyText": "This will not cover a Javadoc which a user adds another tags such as @returns, @throws to.\nIf use switch statement, we can simplify this a little bit.\n\nouter:\nfor (List<String> line : lines) {\n    switch (state) {\n        case SEARCHING:\n            final int size = line.size();\n            if (size < 3 ||\n                !\"@param\".equals(line.get(0)) ||\n                !param.getSimpleName().toString().equals(line.get(1))) {\n                break;\n            }\n            line = line.subList(2, size);\n            state = JavaDocParserState.IN_PARAM;\n        case IN_PARAM:\n            if (!line.isEmpty()) {\n                final String first = line.get(0);\n                // break loop if first is `@xxxxx`\n                if (!first.isEmpty() && first.charAt(0) == '@') {\n                    break outer;\n                }\n\n                for (String word : line) {\n                    stringBuilder.append(word);\n                    stringBuilder.append(' ');\n                }\n            }\n            break;\n        }\n}", "url": "https://github.com/line/armeria/pull/2640#discussion_r419257968", "createdAt": "2020-05-04T07:37:41Z", "author": {"login": "ikhoon"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .stream()\n+                .filter(element -> element.getKind() == ElementKind.METHOD)\n+                // Element is always ExecutableElement because it is a method.\n+                .forEachOrdered(element -> {\n+                    try {\n+                        processMethod((ExecutableElement) element);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                });\n+    }\n+\n+    private void processMethod(ExecutableElement method) throws IOException {\n+        final String className = ((TypeElement) method.getEnclosingElement()).getQualifiedName().toString();\n+        final Properties properties = readProperties(className);\n+        final String docComment = processingEnv.getElementUtils().getDocComment(method);\n+        if (docComment == null || !docComment.contains(\"@param\")) {\n+            return;\n+        }\n+        final List<List<String>> lines = Arrays.stream(docComment.split(\"\\\\R\"))\n+                                               .filter(line -> !line.trim().isEmpty())\n+                                               .map(line -> Arrays.stream(line.split(\"\\\\s\"))\n+                                                                  .filter(word -> !word.trim().isEmpty())\n+                                                                  .collect(toImmutableList()))\n+                                               .collect(toImmutableList());\n+        method.getParameters().forEach(param -> {\n+            final StringBuilder stringBuilder = new StringBuilder();\n+            JavaDocParserState state = JavaDocParserState.SEARCHING;\n+            for (List<String> line : lines) {\n+                final List<String> subLine;\n+                if ((line.size() < 3 ||\n+                     !\"@param\".equals(line.get(0)) ||\n+                     !param.getSimpleName().toString().equals(line.get(1))) &&\n+                    state == JavaDocParserState.SEARCHING) {\n+                    continue;\n+                } else if (state == JavaDocParserState.IN_DESCRIPTION &&\n+                           line.size() > 0 &&\n+                           \"@param\".equals(line.get(0))) {\n+                    break;\n+                } else if (state == JavaDocParserState.SEARCHING) {\n+                    subLine = line.subList(2, line.size());\n+                    state = JavaDocParserState.IN_DESCRIPTION;\n+                } else {\n+                    subLine = line;\n+                }\n+                for (String word : subLine) {\n+                    stringBuilder.append(word);\n+                    stringBuilder.append(' ');\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 160}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b1ef7aa7004043f96b6e0e4adac2ed1d6856af4", "author": {"user": {"login": "hueneburg", "name": "Armin H\u00fcneburg"}}, "url": "https://github.com/line/armeria/commit/9b1ef7aa7004043f96b6e0e4adac2ed1d6856af4", "committedDate": "2020-05-05T01:26:41Z", "message": "Apply reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd5901513e1c05599252e7299028a028715fec6b", "author": {"user": {"login": "hueneburg", "name": "Armin H\u00fcneburg"}}, "url": "https://github.com/line/armeria/commit/fd5901513e1c05599252e7299028a028715fec6b", "committedDate": "2020-05-05T01:27:31Z", "message": "Merge branch 'use-javadoc-for-parameter-description' of github.com:hueneburg/armeria into use-javadoc-for-parameter-description"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2Mjc3MTU0", "url": "https://github.com/line/armeria/pull/2640#pullrequestreview-406277154", "createdAt": "2020-05-06T02:56:53Z", "commit": {"oid": "fd5901513e1c05599252e7299028a028715fec6b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMjo1Njo1M1rOGRCfjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMjo1Njo1M1rOGRCfjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxOTgyMw==", "bodyText": "Could you add a non-@param annotation such as @since before these lines?", "url": "https://github.com/line/armeria/pull/2640#discussion_r420519823", "createdAt": "2020-05-06T02:56:53Z", "author": {"login": "ikhoon"}, "path": "annotation-processor/src/test/resources/DocumentationProcessor/WithJavaDoc.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria;\n+\n+import com.linecorp.armeria.server.annotation.Delete;\n+import com.linecorp.armeria.server.annotation.Get;\n+import com.linecorp.armeria.server.annotation.Param;\n+import com.linecorp.armeria.server.annotation.Post;\n+import com.linecorp.armeria.server.annotation.Put;\n+\n+public class WithJavaDoc {\n+    /**\n+     * A method.\n+     * @param x The x variable in a\n+     * @param y The y variable in a\n+     */\n+    @Post(\"/a\")\n+    public void a(@Param(\"x\") String x,\n+                  @Param(\"y\") String y) {\n+        System.out.println(x + y);\n+    }\n+\n+    /**\n+     * B method.\n+     * @param x The x variable in b\n+     * @param y The y variable in b\n+     */\n+    @Put(\"/b\")\n+    public void b(@Param(\"x\") String x,\n+                  @Param(\"y\") String y) {\n+        System.out.println(x + y);\n+    }\n+\n+    /**\n+     * C method.\n+     * @param x The x variable in c\n+     * @param y The y variable in c\n+     */\n+    @Delete(\"/c/{x}/{y}\")\n+    public void c(@Param(\"x\") String x,\n+                  @Param(\"y\") String y) {\n+        System.out.println(x + y);\n+    }\n+\n+    /**\n+     * D method.\n+     * @param x The x variable in d\n+     * @param y The y variable in d\n+     */\n+    @Get(\"/d/{x}/{y}\")\n+    public void d(@Param(\"x\") String x,\n+                  @Param(\"y\") String y) {\n+        System.out.println(x + y);\n+    }\n+\n+    /**\n+     * hasReturn method.\n+     * @param x The x variable in hasReturn\n+     * @return The number 1\n+     */\n+    @Get\n+    public int hasReturn(@Param(\"x\") String x) {\n+        System.out.println(x);\n+        return 1;\n+    }\n+\n+    /**\n+     * hasThrows method.\n+     * @param x The x variable in hasThrows\n+     * @throws IllegalArgumentException when x is empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd5901513e1c05599252e7299028a028715fec6b"}, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4002061ba1bf8b2e531141ab0f83136a67bf4419", "author": {"user": {"login": "hueneburg", "name": "Armin H\u00fcneburg"}}, "url": "https://github.com/line/armeria/commit/4002061ba1bf8b2e531141ab0f83136a67bf4419", "committedDate": "2020-05-06T23:37:48Z", "message": "Add @since to method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15f197d987fb3b00677150e229f757b02d468244", "author": {"user": {"login": "hueneburg", "name": "Armin H\u00fcneburg"}}, "url": "https://github.com/line/armeria/commit/15f197d987fb3b00677150e229f757b02d468244", "committedDate": "2020-05-07T01:14:59Z", "message": "Rename test files to hopefully not trigger test coverage to include them"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MTEzOTgy", "url": "https://github.com/line/armeria/pull/2640#pullrequestreview-407113982", "createdAt": "2020-05-07T02:42:45Z", "commit": {"oid": "15f197d987fb3b00677150e229f757b02d468244"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMjo0Mjo0NlrOGRsXxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMjo0Mjo0NlrOGRsXxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwNTk1Nw==", "bodyText": "I've tested this locally, if an annotation descripotion starts with a param name,\nthe test failed.\n* @deprecated x is deprecated\n* @param x The x variable in hasReturnAndThrows\n* @return The number 1", "url": "https://github.com/line/armeria/pull/2640#discussion_r421205957", "createdAt": "2020-05-07T02:42:46Z", "author": {"login": "ikhoon"}, "path": "annotation-processor/src/test/resources/DocumentationProcessor/WithJavaDoc.java.txt", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria;\n+\n+import com.linecorp.armeria.server.annotation.Delete;\n+import com.linecorp.armeria.server.annotation.Get;\n+import com.linecorp.armeria.server.annotation.Param;\n+import com.linecorp.armeria.server.annotation.Post;\n+import com.linecorp.armeria.server.annotation.Put;\n+\n+public class WithJavaDoc {\n+    /**\n+     * A method.\n+     * @param x The x variable in a\n+     * @param y The y variable in a\n+     */\n+    @Post(\"/a\")\n+    public void a(@Param(\"x\") String x,\n+                  @Param(\"y\") String y) {\n+        System.out.println(x + y);\n+    }\n+\n+    /**\n+     * B method.\n+     * @param x The x variable in b\n+     * @param y The y variable in b\n+     */\n+    @Put(\"/b\")\n+    public void b(@Param(\"x\") String x,\n+                  @Param(\"y\") String y) {\n+        System.out.println(x + y);\n+    }\n+\n+    /**\n+     * C method.\n+     * @param x The x variable in c\n+     * @param y The y variable in c\n+     */\n+    @Delete(\"/c/{x}/{y}\")\n+    public void c(@Param(\"x\") String x,\n+                  @Param(\"y\") String y) {\n+        System.out.println(x + y);\n+    }\n+\n+    /**\n+     * D method.\n+     * @param x The x variable in d\n+     * @param y The y variable in d\n+     */\n+    @Get(\"/d/{x}/{y}\")\n+    public void d(@Param(\"x\") String x,\n+                  @Param(\"y\") String y) {\n+        System.out.println(x + y);\n+    }\n+\n+    /**\n+     * hasReturn method.\n+     * @param x The x variable in hasReturn\n+     * @return The number 1\n+     */\n+    @Get\n+    public int hasReturn(@Param(\"x\") String x) {\n+        System.out.println(x);\n+        return 1;\n+    }\n+\n+    /**\n+     * hasThrows method.\n+     * @param x The x variable in hasThrows\n+     * @throws IllegalArgumentException when x is empty\n+     */\n+    @Get\n+    public void hasThrows(@Param(\"x\") String x) {\n+        if (x.isEmpty()) {\n+            throw new IllegalArgumentException(\"x is empty\");\n+        }\n+        System.out.println(x);\n+    }\n+\n+    /**\n+     * hasReturnAndThrows method.\n+     * @since 1.4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f197d987fb3b00677150e229f757b02d468244"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38f3d670d6cdac679aa23da6959c20edb21700ef", "author": {"user": {"login": "hueneburg", "name": "Armin H\u00fcneburg"}}, "url": "https://github.com/line/armeria/commit/38f3d670d6cdac679aa23da6959c20edb21700ef", "committedDate": "2020-05-07T02:51:12Z", "message": "Fix issue with parser"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MTM4MDgy", "url": "https://github.com/line/armeria/pull/2640#pullrequestreview-407138082", "createdAt": "2020-05-07T04:16:13Z", "commit": {"oid": "38f3d670d6cdac679aa23da6959c20edb21700ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3OTI5NTUx", "url": "https://github.com/line/armeria/pull/2640#pullrequestreview-407929551", "createdAt": "2020-05-08T00:51:09Z", "commit": {"oid": "38f3d670d6cdac679aa23da6959c20edb21700ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 760, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}