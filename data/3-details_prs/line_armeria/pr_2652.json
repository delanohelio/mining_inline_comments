{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5MzUyMTM3", "number": 2652, "title": "Add `RetryStrategy.onException()`", "bodyText": "Motivation:\nA user sometimes needs to retry on any (or certain type of) exceptions.\nModifications:\n\nAdd RetryStrategy.onException()\nRelax the type parameter of onStatus()\nClean up the JavaDoc\n\nResult:\nA user can retry on any (or certain type of) exceptions more conveniently.", "createdAt": "2020-04-06T02:57:22Z", "url": "https://github.com/line/armeria/pull/2652", "merged": true, "mergeCommit": {"oid": "f09b5e2bb368fd068fe686022a60ae620a7b8395"}, "closed": true, "closedAt": "2020-04-06T05:47:19Z", "author": {"login": "trustin"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcU1pkAAH2gAyMzk5MzUyMTM3OjVjY2NjOTc2YzA4ODY5NzY4YzlmYjdmYjMzZjhlZjg0NmI2OWZlOTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcU3RDDAFqTM4NzkzMTI4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5cccc976c08869768c9fb7fb33f8ef846b69fe98", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/5cccc976c08869768c9fb7fb33f8ef846b69fe98", "committedDate": "2020-04-06T02:54:56Z", "message": "Add `RetryStrategy.onException()`\n\nMotivation:\n\nA user sometimes needs to retry on any (or certain type of) exceptions.\n\nModifications:\n\n- Add `RetryStrategy.onException()`\n- Relax the type parameter of `onStatus()`\n- Clean up the JavaDoc\n\nResult:\n\nA user can retry on any (or certain type of) exceptions more conveniently."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3OTA5NjIw", "url": "https://github.com/line/armeria/pull/2652#pullrequestreview-387909620", "createdAt": "2020-04-06T03:04:04Z", "commit": {"oid": "5cccc976c08869768c9fb7fb33f8ef846b69fe98"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3OTExOTg2", "url": "https://github.com/line/armeria/pull/2652#pullrequestreview-387911986", "createdAt": "2020-04-06T03:16:02Z", "commit": {"oid": "5cccc976c08869768c9fb7fb33f8ef846b69fe98"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12d2add05b72c4346331e29cf3c3085dbec720e0", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/12d2add05b72c4346331e29cf3c3085dbec720e0", "committedDate": "2020-04-06T03:32:19Z", "message": "Checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3OTMxMjg5", "url": "https://github.com/line/armeria/pull/2652#pullrequestreview-387931289", "createdAt": "2020-04-06T04:47:58Z", "commit": {"oid": "12d2add05b72c4346331e29cf3c3085dbec720e0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNDo0Nzo1OFrOGBHr6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNDo0Nzo1OFrOGBHr6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgyNzY4OA==", "bodyText": "now that we have onException wouldn't it make sense to only handle server status codes here?", "url": "https://github.com/line/armeria/pull/2652#discussion_r403827688", "createdAt": "2020-04-06T04:47:58Z", "author": {"login": "mauhiz"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategy.java", "diffHunk": "@@ -39,45 +39,63 @@\n public interface RetryStrategy {\n \n     /**\n-     * A {@link RetryStrategy} that defines a retry should not be performed.\n+     * Returns a {@link RetryStrategy} that never retries.\n      */\n     static RetryStrategy never() {\n         return (ctx, cause) -> CompletableFuture.completedFuture(null);\n     }\n \n     /**\n-     * A {@link RetryStrategy} that retries only on {@link UnprocessedRequestException} with\n-     * the {@link Backoff#ofDefault()}.\n+     * Returns a {@link RetryStrategy} that retries with {@link Backoff#ofDefault()}\n+     * only on an {@link UnprocessedRequestException}.\n      */\n     static RetryStrategy onUnprocessed() {\n         return onUnprocessed(Backoff.ofDefault());\n     }\n \n     /**\n-     * A {@link RetryStrategy} that retries only on {@link UnprocessedRequestException} with the specified\n-     * {@link Backoff}.\n+     * Returns a {@link RetryStrategy} that retries with the specified {@link Backoff}\n+     * only on an {@link UnprocessedRequestException}.\n      */\n     static RetryStrategy onUnprocessed(Backoff backoff) {\n         requireNonNull(backoff, \"backoff\");\n+        return onException(cause -> cause instanceof UnprocessedRequestException ? backoff : null);\n+    }\n+\n+    /**\n+     * Returns a {@link RetryStrategy} that retries with {@link Backoff#ofDefault()} on any {@link Exception}.\n+     */\n+    static RetryStrategy onException() {\n+        return onException(cause -> Backoff.ofDefault());\n+    }\n+\n+    /**\n+     * Returns a {@link RetryStrategy} that decides to retry using the specified {@code backoffFunction}.\n+     *\n+     * @param backoffFunction A {@link Function} that returns the {@link Backoff} or {@code null} (no retry)\n+     *                        according to the given {@link Throwable}\n+     */\n+    static RetryStrategy onException(Function<? super Throwable, ? extends Backoff> backoffFunction) {\n+        requireNonNull(backoffFunction, \"backoffFunction\");\n         return onStatus((status, thrown) -> {\n-            if (thrown != null && Exceptions.peel(thrown) instanceof UnprocessedRequestException) {\n-                return backoff;\n+            if (thrown != null) {\n+                return backoffFunction.apply(Exceptions.peel(thrown));\n             }\n             return null;\n         });\n     }\n \n     /**\n-     * Returns the {@link RetryStrategy} that retries the request with the {@link Backoff#ofDefault()}\n-     * when the response status matches {@link HttpStatusClass#SERVER_ERROR} or an {@link Exception} is raised.\n+     * Returns a {@link RetryStrategy} that retries with the {@link Backoff#ofDefault()}\n+     * when the response status is 5xx (server error) or an {@link Exception} is raised.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12d2add05b72c4346331e29cf3c3085dbec720e0"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 768, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}