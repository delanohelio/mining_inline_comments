{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNTIwNTE5", "number": 2659, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMjozODowOFrODw8brA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMTozOTowOVrOD0g_VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjQ4MzY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/Server.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMjozODowOFrOGEM60A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwODo1NzowM1rOGHFwZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1OTE1Mg==", "bodyText": "I think we don't need to return an object here. How about making the return type void?", "url": "https://github.com/line/armeria/pull/2659#discussion_r407059152", "createdAt": "2020-04-11T12:38:08Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/Server.java", "diffHunk": "@@ -328,6 +328,14 @@ public int numConnections() {\n         return connectionLimitingHandler.numConnections();\n     }\n \n+    /**\n+     * Returns the result of {@link CompletableFuture} which is completed after the {@link #close()} or\n+     * {@link #closeAsync()} operation is completed.\n+     */\n+    public Object blockUntilShutdown() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af0d4aaa0514670e4b9263605ef6adab0064699"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1OTk5MA==", "bodyText": "It would be nice to add a test that registers a ServerListener to the test server and could check serverStopped(...) serverStopping(...) was invoked.", "url": "https://github.com/line/armeria/pull/2659#discussion_r407059990", "createdAt": "2020-04-11T12:46:31Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/Server.java", "diffHunk": "@@ -328,6 +328,14 @@ public int numConnections() {\n         return connectionLimitingHandler.numConnections();\n     }\n \n+    /**\n+     * Returns the result of {@link CompletableFuture} which is completed after the {@link #close()} or\n+     * {@link #closeAsync()} operation is completed.\n+     */\n+    public Object blockUntilShutdown() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1OTE1Mg=="}, "originalCommit": {"oid": "7af0d4aaa0514670e4b9263605ef6adab0064699"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMzMzU4Mg==", "bodyText": "Hi,\nI changed the method, but I'm having trouble with the test. I don't know how to check if server stop has been invoked. Can you help? Thanks!", "url": "https://github.com/line/armeria/pull/2659#discussion_r409333582", "createdAt": "2020-04-16T07:18:33Z", "author": {"login": "Charliocat"}, "path": "core/src/main/java/com/linecorp/armeria/server/Server.java", "diffHunk": "@@ -328,6 +328,14 @@ public int numConnections() {\n         return connectionLimitingHandler.numConnections();\n     }\n \n+    /**\n+     * Returns the result of {@link CompletableFuture} which is completed after the {@link #close()} or\n+     * {@link #closeAsync()} operation is completed.\n+     */\n+    public Object blockUntilShutdown() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1OTE1Mg=="}, "originalCommit": {"oid": "7af0d4aaa0514670e4b9263605ef6adab0064699"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNjkxOA==", "bodyText": "You could do this:\nassertThat(server.activePorts()).isEmpty();", "url": "https://github.com/line/armeria/pull/2659#discussion_r410026918", "createdAt": "2020-04-17T06:56:11Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/Server.java", "diffHunk": "@@ -328,6 +328,14 @@ public int numConnections() {\n         return connectionLimitingHandler.numConnections();\n     }\n \n+    /**\n+     * Returns the result of {@link CompletableFuture} which is completed after the {@link #close()} or\n+     * {@link #closeAsync()} operation is completed.\n+     */\n+    public Object blockUntilShutdown() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1OTE1Mg=="}, "originalCommit": {"oid": "7af0d4aaa0514670e4b9263605ef6adab0064699"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyOTI3NA==", "bodyText": "You can test the method like the following.\n@Test\nvoid testShutdownServer() {\n    final AtomicBoolean stopped = new AtomicBoolean();\n    final Server server = Server.builder()\n                                .service(\"/\", (ctx, req) -> HttpResponse.of(HttpStatus.OK))\n                                .serverListener(new ServerListenerAdapter() {\n                                    @Override\n                                    public void serverStopping(Server server) throws Exception {\n                                        stopped.set(true);\n                                    }\n                                })\n                                .build();\n    server.start().join();\n    CommonPools.blockingTaskExecutor().schedule(server::close, 1, TimeUnit.SECONDS);\n    server.whenClosed().join(); // replace with new method\n    assertThat(stopped).isTrue();\n}", "url": "https://github.com/line/armeria/pull/2659#discussion_r410029274", "createdAt": "2020-04-17T07:01:51Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/Server.java", "diffHunk": "@@ -328,6 +328,14 @@ public int numConnections() {\n         return connectionLimitingHandler.numConnections();\n     }\n \n+    /**\n+     * Returns the result of {@link CompletableFuture} which is completed after the {@link #close()} or\n+     * {@link #closeAsync()} operation is completed.\n+     */\n+    public Object blockUntilShutdown() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1OTE1Mg=="}, "originalCommit": {"oid": "7af0d4aaa0514670e4b9263605ef6adab0064699"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA4NzUyNw==", "bodyText": "I see.. I was going for a ServerTest and a ThreadRecordingServerListener as a listener, thanks!", "url": "https://github.com/line/armeria/pull/2659#discussion_r410087527", "createdAt": "2020-04-17T08:57:03Z", "author": {"login": "Charliocat"}, "path": "core/src/main/java/com/linecorp/armeria/server/Server.java", "diffHunk": "@@ -328,6 +328,14 @@ public int numConnections() {\n         return connectionLimitingHandler.numConnections();\n     }\n \n+    /**\n+     * Returns the result of {@link CompletableFuture} which is completed after the {@link #close()} or\n+     * {@link #closeAsync()} operation is completed.\n+     */\n+    public Object blockUntilShutdown() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1OTE1Mg=="}, "originalCommit": {"oid": "7af0d4aaa0514670e4b9263605ef6adab0064699"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDU1Mjg5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/Server.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODo1Nzo0N1rOGIKRNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODo1Nzo0N1rOGIKRNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIxMDAzNw==", "bodyText": "Could you use more specific throws clause? e.g. throws InterruptedException, ...", "url": "https://github.com/line/armeria/pull/2659#discussion_r411210037", "createdAt": "2020-04-20T08:57:47Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/Server.java", "diffHunk": "@@ -328,6 +328,14 @@ public int numConnections() {\n         return connectionLimitingHandler.numConnections();\n     }\n \n+    /**\n+     * Waits until the result of {@link CompletableFuture} which is completed after the {@link #close()} or\n+     * {@link #closeAsync()} operation is completed.\n+     */\n+    public void blockUntilShutdown() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac1dcc252fc0578afd9da83b4ec706de72563a71"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MzkzMDQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/Server.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMTozOTowOVrOGJfd2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDoxNTo1NFrOGKJsVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYwNTkxMw==", "bodyText": "After thinking a little bit, how about catching ExecutionException and turning it into CompletionException? i.e.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void blockUntilShutdown() throws ExecutionException, InterruptedException {\n          \n          \n            \n                    whenClosed().get();\n          \n          \n            \n                }\n          \n          \n            \n                public void blockUntilShutdown() throws InterruptedException {\n          \n          \n            \n                    try {\n          \n          \n            \n                        whenClosed().get();\n          \n          \n            \n                    } catch (ExecutionException e) {\n          \n          \n            \n                        throw new CompletionException(e.toString(), Exceptions.peel(e));\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\n.. because we do not usually use ExecutionException in our API.", "url": "https://github.com/line/armeria/pull/2659#discussion_r412605913", "createdAt": "2020-04-22T01:39:09Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/Server.java", "diffHunk": "@@ -332,7 +333,7 @@ public int numConnections() {\n      * Waits until the result of {@link CompletableFuture} which is completed after the {@link #close()} or\n      * {@link #closeAsync()} operation is completed.\n      */\n-    public void blockUntilShutdown() throws Exception {\n+    public void blockUntilShutdown() throws ExecutionException, InterruptedException {\n         whenClosed().get();\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32af1c7a83d8a8e7c7f6c3808f49dd8896382a72"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI5Nzc0OQ==", "bodyText": "Yes I can change that. It makes sense to me.", "url": "https://github.com/line/armeria/pull/2659#discussion_r413297749", "createdAt": "2020-04-22T20:15:54Z", "author": {"login": "Charliocat"}, "path": "core/src/main/java/com/linecorp/armeria/server/Server.java", "diffHunk": "@@ -332,7 +333,7 @@ public int numConnections() {\n      * Waits until the result of {@link CompletableFuture} which is completed after the {@link #close()} or\n      * {@link #closeAsync()} operation is completed.\n      */\n-    public void blockUntilShutdown() throws Exception {\n+    public void blockUntilShutdown() throws ExecutionException, InterruptedException {\n         whenClosed().get();\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYwNTkxMw=="}, "originalCommit": {"oid": "32af1c7a83d8a8e7c7f6c3808f49dd8896382a72"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2834, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}