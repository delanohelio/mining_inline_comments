{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMTgxMzc4", "number": 2840, "title": "OAuth2 Support", "bodyText": "Related issue: #2268\nThis changeset contains the following new experimental features:\n\nOAuth 2.0 server-side token authorization:\n\nOAuth2TokenIntrospectionAuthorizer - implementing Token Introspection [RFC7662] - https://datatracker.ietf.org/doc/rfc7662/\n\n\nOAuth 2.0 client-side authorization grants for confidential clients (OAuth2Client), including:\n\nOAuth2ClientCredentialsGrant - implementing Client Credentials Grant [RFC6749], Section 4.4 - https://datatracker.ietf.org/doc/html/rfc6749#section-4.4\nOAuth2ResourceOwnerPasswordCredentialsGrant - implementing Resource Owner Password Credentials Grant [RFC6749], Section 4.3 - https://datatracker.ietf.org/doc/html/rfc6749#section-4.3\n\n\nOAuth 2.0 Token Revocation [RFC7009] - https://datatracker.ietf.org/doc/rfc7009/\n\nThis changeset also adds the following to support OAuth2 authorization properly:\n\nAuthorizer.authorizeAndSupplyHandlers()\nAuthorizationStatus\nAbstractAuthorizerWithHandlers", "createdAt": "2020-06-25T18:15:33Z", "url": "https://github.com/line/armeria/pull/2840", "merged": true, "mergeCommit": {"oid": "7262b8443635fa0a9ca1134899558309c994c087"}, "closed": true, "closedAt": "2021-03-28T08:24:35Z", "author": {"login": "max904-github"}, "timelineItems": {"totalCount": 61, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuyryogH2gAyNDQwMTgxMzc4OjdmZDAyOWZjZjE4N2MyNDA1NDgwMDliODk1ZTc4MTYzZWRmNTk3MTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeHfqc4gH2gAyNDQwMTgxMzc4OjZmYTcwMGFjNjg0N2Y3MDgxMGE3NzJlMDA3ZDVmNzU0YWYwZTdmNDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7fd029fcf187c240548009b895e78163edf59710", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/7fd029fcf187c240548009b895e78163edf59710", "committedDate": "2020-06-25T18:09:41Z", "message": "OAuth 2.0 server-side token authorization:\n * OAuth2TokenIntrospectionAuthorizer - implementing Token Introspection [RFC7662] - https://tools.ietf.org/html/rfc7662\n\nOAuth 2.0 client-side authorization grants for confidential clients (OAuth2Client), including:\n * OAuth2ClientCredentialsGrant - implementing Client Credentials Grant [RFC6749], Section 4.4 - https://tools.ietf.org/html/rfc6749#section-4.4\n * OAuth2ResourceOwnerPasswordCredentialsGrant - implementing Resource Owner Password Credentials Grant [RFC6749], Section 4.3 - https://tools.ietf.org/html/rfc6749#section-4.3\n\nOAuth 2.0 Token Revocation [RFC7009] - https://tools.ietf.org/html/rfc7009"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c9c81f30683fd44cec2f629fd8d543b8ad43d21", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/8c9c81f30683fd44cec2f629fd8d543b8ad43d21", "committedDate": "2020-06-30T01:45:24Z", "message": "Add the major version to artifacts (#2843)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1d8b5ea43d8c459bd76307f8c7cef711f9f146d", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/e1d8b5ea43d8c459bd76307f8c7cef711f9f146d", "committedDate": "2020-06-30T01:48:06Z", "message": "Merge branch 'master' into oauth2-issue2268"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/4e4b80ee25148be663faa0a929741aa7777a305c", "committedDate": "2020-06-30T02:02:57Z", "message": "Merge branch 'master' into oauth2-issue2268"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNzMzNDQ3", "url": "https://github.com/line/armeria/pull/2840#pullrequestreview-442733447", "createdAt": "2020-07-06T01:48:35Z", "commit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "state": "COMMENTED", "comments": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMTo0ODozNVrOGtGqRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjo0NzozNlrOGtHUQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk0ODIyOA==", "bodyText": "If there are no dependencies, you can just delete build.gradle - it will just build fine without build.gradle.", "url": "https://github.com/line/armeria/pull/2840#discussion_r449948228", "createdAt": "2020-07-06T01:48:35Z", "author": {"login": "trustin"}, "path": "oauth2/build.gradle", "diffHunk": "@@ -0,0 +1,2 @@\n+dependencies {\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MDI5Nw==", "bodyText": "obtainAccessToken() is an asynchronous operation, so I guess just using synchronized will not prevent a subclass from obtaining tokens simultaneously. Am I missing something? Also, it'd be nice if we can reduce the potential lock contention which may block the event loop.", "url": "https://github.com/line/armeria/pull/2840#discussion_r449950297", "createdAt": "2020-07-06T02:00:07Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, @Nullable Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = refreshBefore == null ? DEFAULT_REFRESH_BEFORE : refreshBefore;\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessToken(\n+            @Nullable AccessTokenCapsule token);\n+\n+    private CompletableFuture<AccessTokenCapsule> obtainAccessTokenExclusively(\n+            @Nullable AccessTokenCapsule token) {\n+        return obtainAccessToken(token).thenApply(t -> {\n+            tokenRef.set(t); // reset the token reference\n+            if (tokenConsumer != null) {\n+                tokenConsumer.accept(t); // store token to an optional storage (e.g. secret store)\n+            }\n+            return t;\n+        });\n+    }\n+\n+    private CompletableFuture<AccessTokenCapsule> refreshAccessToken(AccessTokenCapsule token) {\n+        if (token.refreshToken() != null) {\n+            // try refreshing token if refresh token was previously provided\n+            try {\n+                return refreshRequest.make(token);\n+            } catch (TokenRequestException e) {\n+                // token refresh request failed\n+                // try to re-obtain access token\n+                return obtainAccessToken(token);\n+            }\n+        }\n+        // try to re-obtain access token\n+        return obtainAccessToken(token);\n+    }\n+\n+    private CompletableFuture<AccessTokenCapsule> getOrRefreshAccessToken(AccessTokenCapsule token,\n+                                                                          boolean reset,\n+                                                                          boolean lock) {\n+        // check if it's still valid\n+        final Instant instant = Instant.now().plus(refreshBefore);\n+        if (token.isValid(instant)) {\n+            // simply return a valid token\n+            if (reset) {\n+                return CompletableFuture.completedFuture(token).thenApply(t -> {\n+                    tokenRef.set(t); // reset the token reference\n+                    return t;\n+                });\n+            } else {\n+                return CompletableFuture.completedFuture(token);\n+            }\n+        } else {\n+            if (lock) {\n+                synchronized (tokenRef) {\n+                    // refresh token exclusively\n+                    return refreshAccessTokenExclusively(instant);\n+                }\n+            } else {\n+                // refresh token exclusively\n+                return refreshAccessTokenExclusively(instant);\n+            }\n+        }\n+    }\n+\n+    private CompletableFuture<AccessTokenCapsule> refreshAccessTokenExclusively(Instant instant) {\n+        // after acquiring the lock, re-check if it's a valid token\n+        final AccessTokenCapsule token = tokenRef.get();\n+        if (token.isValid(instant)) {\n+            // simply return a valid token\n+            return CompletableFuture.completedFuture(token);\n+        }\n+        // otherwise, refresh it\n+        return refreshAccessToken(token).thenApply(t -> {\n+            tokenRef.set(t); // reset the token reference\n+            if (tokenConsumer != null) {\n+                tokenConsumer.accept(t); // store token to an optional storage (e.g. secret store)\n+            }\n+            return t;\n+        });\n+    }\n+\n+    @Override\n+    public CompletionStage<AccessTokenCapsule> getAccessToken() {\n+        AccessTokenCapsule token = tokenRef.get();\n+        if (token != null) {\n+            // token already present\n+            return getOrRefreshAccessToken(token, false, true);\n+        }\n+        // token is not yet present\n+        // lock and obtain token exclusively\n+        synchronized (tokenRef) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MDg5NQ==", "bodyText": "Supplier<? extends Map.Entry<String, String>>", "url": "https://github.com/line/armeria/pull/2840#discussion_r449950895", "createdAt": "2020-07-06T02:03:33Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+\n+abstract class AbstractOAuth2AuthorizationGrantBuilder {\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    @Nullable\n+    private Duration refreshBefore;\n+\n+    @Nullable\n+    private Supplier<AccessTokenCapsule> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientCredentials(\n+            Supplier<Map.Entry<String, String>> credentialsSupplier, String authorizationType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MDkyOQ==", "bodyText": "Supplier<? extends Map.Entry<String, String>>", "url": "https://github.com/line/armeria/pull/2840#discussion_r449950929", "createdAt": "2020-07-06T02:03:51Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+\n+abstract class AbstractOAuth2AuthorizationGrantBuilder {\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    @Nullable\n+    private Duration refreshBefore;\n+\n+    @Nullable\n+    private Supplier<AccessTokenCapsule> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientCredentials(\n+            Supplier<Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientCredentials(\n+            Supplier<Map.Entry<String, String>> credentialsSupplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MTEwNQ==", "bodyText": "How about making refreshBefore non-null here and moving the default to the builder?", "url": "https://github.com/line/armeria/pull/2840#discussion_r449951105", "createdAt": "2020-07-06T02:04:53Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, @Nullable Duration refreshBefore,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MTM1NA==", "bodyText": "Could return non-null once we move the default value into this class.", "url": "https://github.com/line/armeria/pull/2840#discussion_r449951354", "createdAt": "2020-07-06T02:06:15Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+\n+abstract class AbstractOAuth2AuthorizationGrantBuilder {\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    @Nullable\n+    private Duration refreshBefore;\n+\n+    @Nullable\n+    private Supplier<AccessTokenCapsule> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientCredentials(\n+            Supplier<Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientCredentials(\n+            Supplier<Map.Entry<String, String>> credentialsSupplier) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder refreshBefore(Duration refreshBefore) {\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        return this;\n+    }\n+\n+    @Nullable\n+    protected Duration refreshBefore() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MTU0NQ==", "bodyText": "Could we make all protected methods in this class final? (except the abstract ones of course)", "url": "https://github.com/line/armeria/pull/2840#discussion_r449951545", "createdAt": "2020-07-06T02:07:27Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+\n+abstract class AbstractOAuth2AuthorizationGrantBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MTc0Nw==", "bodyText": "Global comment: Please add final to all public/protected members that users are not expected to extend/override.", "url": "https://github.com/line/armeria/pull/2840#discussion_r449951747", "createdAt": "2020-07-06T02:08:42Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Decorates a {@link HttpClient} with an OAuth 2.0 Authorization Grant flow.\n+ */\n+public class OAuth2Client extends SimpleDecoratingHttpClient {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MjA0NA==", "bodyText": "Is the comment an example value? If so, could you add e.g.?\nIndentation - should be aligned at .", "url": "https://github.com/line/armeria/pull/2840#discussion_r449952044", "createdAt": "2020-07-06T02:10:14Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Decorates a {@link HttpClient} with an OAuth 2.0 Authorization Grant flow.\n+ */\n+public class OAuth2Client extends SimpleDecoratingHttpClient {\n+\n+    /**\n+     * Creates a new {@link HttpClient} decorator that handles OAuth 2.0 Authorization Grant flow.\n+     * @param authorizationGrant An {@link OAuth2AuthorizationGrant} implementing specific\n+     *                           OAuth 2.0 Authorization Grant flow.\n+     */\n+    public static Function<? super HttpClient, OAuth2Client> newDecorator(\n+            OAuth2AuthorizationGrant authorizationGrant) {\n+        return delegate -> new OAuth2Client(delegate, authorizationGrant);\n+    }\n+\n+    private final OAuth2AuthorizationGrant authorizationGrant;\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpClient} with\n+     * an OAuth 2.0 Authorization Grant flow.\n+     */\n+    OAuth2Client(HttpClient delegate, OAuth2AuthorizationGrant authorizationGrant) {\n+        super(delegate);\n+        this.authorizationGrant = requireNonNull(authorizationGrant, \"authorizationGrant\");\n+    }\n+\n+    @Override\n+    public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n+        return HttpResponse.from(authorizationGrant.getAccessToken().thenApply(accessToken -> {\n+            // Create a new request with an additional 'Authorization' header\n+            final HttpRequest newReq =\n+                req.withHeaders(req.headers().toBuilder()\n+                    .set(HttpHeaderNames.AUTHORIZATION, accessToken.authorization()) // Bearer mF_9.B5f-4.1JqM", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MjE0Mg==", "bodyText": "You can do return Exceptions.throwUnsafely(...).", "url": "https://github.com/line/armeria/pull/2840#discussion_r449952142", "createdAt": "2020-07-06T02:10:43Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Decorates a {@link HttpClient} with an OAuth 2.0 Authorization Grant flow.\n+ */\n+public class OAuth2Client extends SimpleDecoratingHttpClient {\n+\n+    /**\n+     * Creates a new {@link HttpClient} decorator that handles OAuth 2.0 Authorization Grant flow.\n+     * @param authorizationGrant An {@link OAuth2AuthorizationGrant} implementing specific\n+     *                           OAuth 2.0 Authorization Grant flow.\n+     */\n+    public static Function<? super HttpClient, OAuth2Client> newDecorator(\n+            OAuth2AuthorizationGrant authorizationGrant) {\n+        return delegate -> new OAuth2Client(delegate, authorizationGrant);\n+    }\n+\n+    private final OAuth2AuthorizationGrant authorizationGrant;\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpClient} with\n+     * an OAuth 2.0 Authorization Grant flow.\n+     */\n+    OAuth2Client(HttpClient delegate, OAuth2AuthorizationGrant authorizationGrant) {\n+        super(delegate);\n+        this.authorizationGrant = requireNonNull(authorizationGrant, \"authorizationGrant\");\n+    }\n+\n+    @Override\n+    public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n+        return HttpResponse.from(authorizationGrant.getAccessToken().thenApply(accessToken -> {\n+            // Create a new request with an additional 'Authorization' header\n+            final HttpRequest newReq =\n+                req.withHeaders(req.headers().toBuilder()\n+                    .set(HttpHeaderNames.AUTHORIZATION, accessToken.authorization()) // Bearer mF_9.B5f-4.1JqM\n+                    .build());\n+            // Update the ctx.request\n+            ctx.updateRequest(newReq);\n+            try {\n+                return unwrap().execute(ctx, newReq);\n+            } catch (Exception e) {\n+                Exceptions.throwUnsafely(Exceptions.peel(e));\n+                //noinspection ReturnOfNull\n+                return null; // will never get here", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MzM5Mw==", "bodyText": "How about making all these protected setters package-local? Looks like all subclasses are in the same package.", "url": "https://github.com/line/armeria/pull/2840#discussion_r449953393", "createdAt": "2020-07-06T02:17:35Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+\n+abstract class AbstractOAuth2AuthorizationGrantBuilder {\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    @Nullable\n+    private Duration refreshBefore;\n+\n+    @Nullable\n+    private Supplier<AccessTokenCapsule> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1NDI4OQ==", "bodyText": "Global comment: You don't need to copy the Javadoc from the superclass if you did not change anything. Javadoc tool will do that for you.", "url": "https://github.com/line/armeria/pull/2840#discussion_r449954289", "createdAt": "2020-07-06T02:22:54Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ClientCredentialsGrantBuilder.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.ClientCredentialsTokenRequest;\n+\n+/**\n+ * Builds {@link OAuth2ClientCredentialsGrant}.\n+ */\n+public class OAuth2ClientCredentialsGrantBuilder extends AbstractOAuth2AuthorizationGrantBuilder {\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     */\n+    OAuth2ClientCredentialsGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath);\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        super.clientAuthorization(authorizationSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        super.clientBasicAuthorization(authorizationSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1NDU4Mg==", "bodyText": "Global comment: How about accepting the required properties at the construction time of the builder? e.g. OAuth2ClientCredentialsGrant.builder(...., ClientAuthorization)? This prevents a user from forgetting to set a required property ever.", "url": "https://github.com/line/armeria/pull/2840#discussion_r449954582", "createdAt": "2020-07-06T02:24:51Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ClientCredentialsGrantBuilder.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.ClientCredentialsTokenRequest;\n+\n+/**\n+ * Builds {@link OAuth2ClientCredentialsGrant}.\n+ */\n+public class OAuth2ClientCredentialsGrantBuilder extends AbstractOAuth2AuthorizationGrantBuilder {\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     */\n+    OAuth2ClientCredentialsGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath);\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        super.clientAuthorization(authorizationSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        super.clientBasicAuthorization(authorizationSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder clientCredentials(\n+            Supplier<Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        super.clientCredentials(credentialsSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder clientCredentials(\n+            Supplier<Map.Entry<String, String>> credentialsSupplier) {\n+        super.clientCredentials(credentialsSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder refreshBefore(Duration refreshBefore) {\n+        super.refreshBefore(refreshBefore);\n+        return this;\n+    }\n+\n+    /**\n+     * A {@link Supplier} to load Access Token from, to be able to restore the previous session. OPTIONAL.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder tokenSupplier(Supplier<AccessTokenCapsule> tokenSupplier) {\n+        super.tokenSupplier(tokenSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * A {@link Consumer} to store Access Token to, to be able restore the previous session. OPTIONAL.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder tokenConsumer(Consumer<AccessTokenCapsule> tokenConsumer) {\n+        super.tokenConsumer(tokenConsumer);\n+        return this;\n+    }\n+\n+    @Override\n+    protected AbstractAccessTokenRequest buildObtainRequest(WebClient accessTokenEndpoint,\n+                                                            String accessTokenEndpointPath,\n+                                                            @Nullable ClientAuthorization clientAuthorization) {\n+        return new ClientCredentialsTokenRequest(accessTokenEndpoint, accessTokenEndpointPath,\n+                                                 // clientAuthorization require for this Grant flow\n+                                                 requireNonNull(clientAuthorization, \"clientAuthorization\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1NDk5OA==", "bodyText": "com.linecorp.armeria.common.auth.oauth2 or com.linecorp.armeria.client.auth.oauth2?", "url": "https://github.com/line/armeria/pull/2840#discussion_r449954998", "createdAt": "2020-07-06T02:27:04Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/UnsupportedMediaTypeException.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1NTI1Ng==", "bodyText": "com.linecorp.armeria.common.auth.oauth2 or com.linecorp.armeria.client.auth.oauth2?", "url": "https://github.com/line/armeria/pull/2840#discussion_r449955256", "createdAt": "2020-07-06T02:28:26Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/UnsupportedResponseException.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1NjYwNA==", "bodyText": "Could just use + operator?", "url": "https://github.com/line/armeria/pull/2840#discussion_r449956604", "createdAt": "2020-07-06T02:35:27Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AccessTokenCapsule.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+public class AccessTokenCapsule implements Serializable {\n+\n+    private static final long serialVersionUID = 8698118404098897958L;\n+\n+    /**\n+     * Creates a new {@link AccessTokenCapsule} based on the {@code JSON}-formatted raw response body and\n+     * optional raw formatted {@code scope} used to request the token.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @param requestScope OPTIONAL. A list of space-delimited, case-sensitive strings.\n+     *                     The strings are defined by the authorization server.\n+     *                     The authorization server MAY fully or partially ignore the scope requested by the\n+     *                     client, based on the authorization server policy or the resource owner's\n+     *                     instructions. If the issued access token scope is different from the one requested\n+     *                     by the client, the authorization server MUST include the \"scope\" response\n+     *                     parameter to inform the client of the actual scope granted.\n+     *                     If the client omits the scope parameter when requesting authorization, the\n+     *                     authorization server MUST either process the request using a pre-defined default\n+     *                     value or fail the request indicating an invalid scope.\n+     * @return A new instance of {@link AccessTokenCapsule}.\n+     */\n+    public static AccessTokenCapsule of(String rawResponse, @Nullable String requestScope) {\n+        return AccessTokenCapsuleBuilder.of(rawResponse, requestScope);\n+    }\n+\n+    /**\n+     * Creates a new {@link AccessTokenCapsuleBuilder} to build a new {@link AccessTokenCapsule} and\n+     * supplied it with a value of {@code access_token} Access Token response field.\n+     * @return A new instance of {@link AccessTokenCapsuleBuilder}.\n+     */\n+    public static AccessTokenCapsuleBuilder builder(String accessToken) {\n+        return new AccessTokenCapsuleBuilder(accessToken);\n+    }\n+\n+    static final String ACCESS_TOKEN = \"access_token\";\n+    static final String TOKEN_TYPE = \"token_type\";\n+    static final String EXPIRES_IN = \"expires_in\";\n+    static final String REFRESH_TOKEN = \"refresh_token\";\n+    static final String SCOPE = \"scope\";\n+\n+    static final String ISSUED_AT = \"issued_at\";\n+\n+    static final String SCOPE_SEPARATOR = \" \";\n+    static final String AUTHORIZATION_SEPARATOR = \" \";\n+\n+    static final String DEFAULT_TOKEN_TYPE = \"bearer\";\n+\n+    static final ObjectMapper JSON = new ObjectMapper();\n+\n+    /**\n+     * {@code access_token} Access Token response field,\n+     * REQUIRED. The access token issued by the authorization server.\n+     */\n+    private final String accessToken;\n+\n+    /**\n+     * {@code token_type} Access Token response field,\n+     * REQUIRED. The type of the token issued as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>, e.g. \"bearer\".\n+     * Value is case insensitive.\n+     */\n+    @Nullable\n+    private final String tokenType;\n+\n+    /**\n+     * {@code expires_in} Access Token response field,\n+     * RECOMMENDED. The lifetime in seconds of the access token. For example, the value \"3600\" denotes\n+     * that the access token will expire in one hour from the time the response was generated. If\n+     * omitted, the authorization server SHOULD provide the expiration time via other means or\n+     * document the default value.\n+     */\n+    @Nullable\n+    private final Duration expiresIn;\n+\n+    /**\n+     * {@code refresh_token} Access Token response field,\n+     * OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same\n+     * authorization grant as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     */\n+    @Nullable\n+    private final String refreshToken;\n+\n+    /**\n+     * {@code scope} Access Token response field,\n+     * OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of\n+     * the access token as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     * A list of space-delimited, case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     * The authorization server MAY fully or partially ignore the scope requested by the client, based\n+     * on the authorization server policy or the resource owner's instructions.  If the issued access\n+     * token scope is different from the one requested by the client, the authorization server MUST\n+     * include the \"scope\" response parameter to inform the client of the actual scope granted.\n+     * If the client omits the scope parameter when requesting authorization, the authorization server\n+     * MUST either process the request using a pre-defined default value or fail the request\n+     * indicating an invalid scope.\n+     */\n+    @Nullable\n+    private final String scope;\n+\n+    /**\n+     * A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    private final Set<String> scopeSet;\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Access Token response,\n+     * OPTIONAL.\n+     */\n+    private final Map<String, String> extras;\n+\n+    private final Instant issuedAt;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    @Nullable\n+    private transient Instant expiresAt;\n+\n+    @Nullable\n+    private transient String authorization;\n+\n+    @Nullable\n+    private transient String toString;\n+\n+    AccessTokenCapsule(String accessToken, @Nullable String tokenType,\n+                       Instant issuedAt, @Nullable Duration expiresIn,\n+                       @Nullable String refreshToken, @Nullable List<String> scopeList,\n+                       @Nullable ImmutableMap<String, String> extras,\n+                       @Nullable String rawResponse) {\n+        // token fields\n+        this.accessToken = requireNonNull(accessToken, ACCESS_TOKEN);\n+        this.tokenType = tokenType;\n+        this.expiresIn = expiresIn;\n+        this.issuedAt = requireNonNull(issuedAt, ISSUED_AT);\n+        this.refreshToken = refreshToken;\n+        scope = toScopeString(scopeList);\n+        scopeSet = (scopeList == null) ? ImmutableSet.of() : ImmutableSet.copyOf(scopeList);\n+        this.extras = (extras == null) ? ImmutableMap.of() : extras;\n+        // raw response\n+        this.rawResponse = rawResponse;\n+    }\n+\n+    /**\n+     * {@code access_token} Access Token response field,\n+     * REQUIRED. The access token issued by the authorization server.\n+     */\n+    public String accessToken() {\n+        return accessToken;\n+    }\n+\n+    /**\n+     * {@code token_type}  Access Token response field,\n+     * REQUIRED. The type of the token issued as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     * Value is case insensitive.\n+     */\n+    @Nullable\n+    public String tokenType() {\n+        return tokenType;\n+    }\n+\n+    /**\n+     * {@code expires_in} Access Token response field,\n+     * RECOMMENDED. {@link Duration} indicating the lifetime of the access token. For example,\n+     * the value 3600 seconds denotes that the access token will expire in one hour from the time\n+     * the response was generated. If omitted, the authorization server SHOULD provide the expiration\n+     * time via other means or document the default value.\n+     */\n+    @Nullable\n+    public Duration expiresIn() {\n+        return expiresIn;\n+    }\n+\n+    /**\n+     * An {@link Instant} indicating when the Access Token was issued.\n+     * The value is NOT supplied with the Access Token response and calculated approximately using\n+     * {@code expires_in} field.\n+     */\n+    public Instant issuedAt() {\n+        return issuedAt;\n+    }\n+\n+    /**\n+     * An {@link Instant} representing a derived value using {@code issuedAt + expiresIn}.\n+     */\n+    @Nullable\n+    public Instant expiresAt() {\n+        if (expiresIn == null) {\n+            return null;\n+        }\n+        if (expiresAt == null) {\n+            expiresAt = issuedAt.plus(expiresIn);\n+        }\n+        return expiresAt;\n+    }\n+\n+    /**\n+     * Indicates whether or not the Access Token expire at the given {@link Instant} time based on\n+     * {@link #expiresAt()} function.\n+     */\n+    public boolean isValid(Instant instant) {\n+        final Instant expires = expiresAt();\n+        return (expires == null) || requireNonNull(instant, \"instant\").isBefore(expires);\n+    }\n+\n+    /**\n+     * Indicates whether or not the Access Token already expired based on {@link #expiresAt()} function.\n+     */\n+    public boolean isValid() {\n+        return isValid(Instant.now());\n+    }\n+\n+    /**\n+     * {@code refresh_token} Access Token response field,\n+     * OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same\n+     * authorization grant as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     */\n+    @Nullable\n+    public String refreshToken() {\n+        return refreshToken;\n+    }\n+\n+    /**\n+     * {@code scope} Access Token response field,\n+     * OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of\n+     * the access token as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     * A list of space-delimited, case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     * The authorization server MAY fully or partially ignore the scope requested by the client, based\n+     * on the authorization server policy or the resource owner's instructions.  If the issued access\n+     * token scope is different from the one requested by the client, the authorization server MUST\n+     * include the \"scope\" response parameter to inform the client of the actual scope granted.\n+     * If the client omits the scope parameter when requesting authorization, the authorization server\n+     * MUST either process the request using a pre-defined default value or fail the request\n+     * indicating an invalid scope.\n+     */\n+    @Nullable\n+    public String scope() {\n+        return scope;\n+    }\n+\n+    /**\n+     * {@code scope} Access Token response field,\n+     * OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of\n+     * the access token as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     * A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     * The authorization server MAY fully or partially ignore the scope requested by the client, based\n+     * on the authorization server policy or the resource owner's instructions.  If the issued access\n+     * token scope is different from the one requested by the client, the authorization server MUST\n+     * include the \"scope\" response parameter to inform the client of the actual scope granted.\n+     * If the client omits the scope parameter when requesting authorization, the authorization server\n+     * MUST either process the request using a pre-defined default value or fail the request\n+     * indicating an invalid scope.\n+     */\n+    public Set<String> scopeSet() {\n+        return scopeSet;\n+    }\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Access Token response,\n+     * OPTIONAL.\n+     */\n+    public Map<String, String> extras() {\n+        return extras;\n+    }\n+\n+    /**\n+     * A value of the {@link HttpHeaderNames#AUTHORIZATION} header based on this access token.\n+     */\n+    public String authorization() {\n+        if (authorization == null) {\n+            final String type = (tokenType == null) ? DEFAULT_TOKEN_TYPE : tokenType;\n+            authorization = String.join(AUTHORIZATION_SEPARATOR,\n+                                        CaseUtil.firstUpperAllLowerCase(type), accessToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 323}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1NjY5NA==", "bodyText": "How about adding 'why'?", "url": "https://github.com/line/armeria/pull/2840#discussion_r449956694", "createdAt": "2020-07-06T02:36:06Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AccessTokenCapsule.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+public class AccessTokenCapsule implements Serializable {\n+\n+    private static final long serialVersionUID = 8698118404098897958L;\n+\n+    /**\n+     * Creates a new {@link AccessTokenCapsule} based on the {@code JSON}-formatted raw response body and\n+     * optional raw formatted {@code scope} used to request the token.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @param requestScope OPTIONAL. A list of space-delimited, case-sensitive strings.\n+     *                     The strings are defined by the authorization server.\n+     *                     The authorization server MAY fully or partially ignore the scope requested by the\n+     *                     client, based on the authorization server policy or the resource owner's\n+     *                     instructions. If the issued access token scope is different from the one requested\n+     *                     by the client, the authorization server MUST include the \"scope\" response\n+     *                     parameter to inform the client of the actual scope granted.\n+     *                     If the client omits the scope parameter when requesting authorization, the\n+     *                     authorization server MUST either process the request using a pre-defined default\n+     *                     value or fail the request indicating an invalid scope.\n+     * @return A new instance of {@link AccessTokenCapsule}.\n+     */\n+    public static AccessTokenCapsule of(String rawResponse, @Nullable String requestScope) {\n+        return AccessTokenCapsuleBuilder.of(rawResponse, requestScope);\n+    }\n+\n+    /**\n+     * Creates a new {@link AccessTokenCapsuleBuilder} to build a new {@link AccessTokenCapsule} and\n+     * supplied it with a value of {@code access_token} Access Token response field.\n+     * @return A new instance of {@link AccessTokenCapsuleBuilder}.\n+     */\n+    public static AccessTokenCapsuleBuilder builder(String accessToken) {\n+        return new AccessTokenCapsuleBuilder(accessToken);\n+    }\n+\n+    static final String ACCESS_TOKEN = \"access_token\";\n+    static final String TOKEN_TYPE = \"token_type\";\n+    static final String EXPIRES_IN = \"expires_in\";\n+    static final String REFRESH_TOKEN = \"refresh_token\";\n+    static final String SCOPE = \"scope\";\n+\n+    static final String ISSUED_AT = \"issued_at\";\n+\n+    static final String SCOPE_SEPARATOR = \" \";\n+    static final String AUTHORIZATION_SEPARATOR = \" \";\n+\n+    static final String DEFAULT_TOKEN_TYPE = \"bearer\";\n+\n+    static final ObjectMapper JSON = new ObjectMapper();\n+\n+    /**\n+     * {@code access_token} Access Token response field,\n+     * REQUIRED. The access token issued by the authorization server.\n+     */\n+    private final String accessToken;\n+\n+    /**\n+     * {@code token_type} Access Token response field,\n+     * REQUIRED. The type of the token issued as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>, e.g. \"bearer\".\n+     * Value is case insensitive.\n+     */\n+    @Nullable\n+    private final String tokenType;\n+\n+    /**\n+     * {@code expires_in} Access Token response field,\n+     * RECOMMENDED. The lifetime in seconds of the access token. For example, the value \"3600\" denotes\n+     * that the access token will expire in one hour from the time the response was generated. If\n+     * omitted, the authorization server SHOULD provide the expiration time via other means or\n+     * document the default value.\n+     */\n+    @Nullable\n+    private final Duration expiresIn;\n+\n+    /**\n+     * {@code refresh_token} Access Token response field,\n+     * OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same\n+     * authorization grant as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     */\n+    @Nullable\n+    private final String refreshToken;\n+\n+    /**\n+     * {@code scope} Access Token response field,\n+     * OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of\n+     * the access token as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     * A list of space-delimited, case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     * The authorization server MAY fully or partially ignore the scope requested by the client, based\n+     * on the authorization server policy or the resource owner's instructions.  If the issued access\n+     * token scope is different from the one requested by the client, the authorization server MUST\n+     * include the \"scope\" response parameter to inform the client of the actual scope granted.\n+     * If the client omits the scope parameter when requesting authorization, the authorization server\n+     * MUST either process the request using a pre-defined default value or fail the request\n+     * indicating an invalid scope.\n+     */\n+    @Nullable\n+    private final String scope;\n+\n+    /**\n+     * A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    private final Set<String> scopeSet;\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Access Token response,\n+     * OPTIONAL.\n+     */\n+    private final Map<String, String> extras;\n+\n+    private final Instant issuedAt;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    @Nullable\n+    private transient Instant expiresAt;\n+\n+    @Nullable\n+    private transient String authorization;\n+\n+    @Nullable\n+    private transient String toString;\n+\n+    AccessTokenCapsule(String accessToken, @Nullable String tokenType,\n+                       Instant issuedAt, @Nullable Duration expiresIn,\n+                       @Nullable String refreshToken, @Nullable List<String> scopeList,\n+                       @Nullable ImmutableMap<String, String> extras,\n+                       @Nullable String rawResponse) {\n+        // token fields\n+        this.accessToken = requireNonNull(accessToken, ACCESS_TOKEN);\n+        this.tokenType = tokenType;\n+        this.expiresIn = expiresIn;\n+        this.issuedAt = requireNonNull(issuedAt, ISSUED_AT);\n+        this.refreshToken = refreshToken;\n+        scope = toScopeString(scopeList);\n+        scopeSet = (scopeList == null) ? ImmutableSet.of() : ImmutableSet.copyOf(scopeList);\n+        this.extras = (extras == null) ? ImmutableMap.of() : extras;\n+        // raw response\n+        this.rawResponse = rawResponse;\n+    }\n+\n+    /**\n+     * {@code access_token} Access Token response field,\n+     * REQUIRED. The access token issued by the authorization server.\n+     */\n+    public String accessToken() {\n+        return accessToken;\n+    }\n+\n+    /**\n+     * {@code token_type}  Access Token response field,\n+     * REQUIRED. The type of the token issued as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     * Value is case insensitive.\n+     */\n+    @Nullable\n+    public String tokenType() {\n+        return tokenType;\n+    }\n+\n+    /**\n+     * {@code expires_in} Access Token response field,\n+     * RECOMMENDED. {@link Duration} indicating the lifetime of the access token. For example,\n+     * the value 3600 seconds denotes that the access token will expire in one hour from the time\n+     * the response was generated. If omitted, the authorization server SHOULD provide the expiration\n+     * time via other means or document the default value.\n+     */\n+    @Nullable\n+    public Duration expiresIn() {\n+        return expiresIn;\n+    }\n+\n+    /**\n+     * An {@link Instant} indicating when the Access Token was issued.\n+     * The value is NOT supplied with the Access Token response and calculated approximately using\n+     * {@code expires_in} field.\n+     */\n+    public Instant issuedAt() {\n+        return issuedAt;\n+    }\n+\n+    /**\n+     * An {@link Instant} representing a derived value using {@code issuedAt + expiresIn}.\n+     */\n+    @Nullable\n+    public Instant expiresAt() {\n+        if (expiresIn == null) {\n+            return null;\n+        }\n+        if (expiresAt == null) {\n+            expiresAt = issuedAt.plus(expiresIn);\n+        }\n+        return expiresAt;\n+    }\n+\n+    /**\n+     * Indicates whether or not the Access Token expire at the given {@link Instant} time based on\n+     * {@link #expiresAt()} function.\n+     */\n+    public boolean isValid(Instant instant) {\n+        final Instant expires = expiresAt();\n+        return (expires == null) || requireNonNull(instant, \"instant\").isBefore(expires);\n+    }\n+\n+    /**\n+     * Indicates whether or not the Access Token already expired based on {@link #expiresAt()} function.\n+     */\n+    public boolean isValid() {\n+        return isValid(Instant.now());\n+    }\n+\n+    /**\n+     * {@code refresh_token} Access Token response field,\n+     * OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same\n+     * authorization grant as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     */\n+    @Nullable\n+    public String refreshToken() {\n+        return refreshToken;\n+    }\n+\n+    /**\n+     * {@code scope} Access Token response field,\n+     * OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of\n+     * the access token as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     * A list of space-delimited, case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     * The authorization server MAY fully or partially ignore the scope requested by the client, based\n+     * on the authorization server policy or the resource owner's instructions.  If the issued access\n+     * token scope is different from the one requested by the client, the authorization server MUST\n+     * include the \"scope\" response parameter to inform the client of the actual scope granted.\n+     * If the client omits the scope parameter when requesting authorization, the authorization server\n+     * MUST either process the request using a pre-defined default value or fail the request\n+     * indicating an invalid scope.\n+     */\n+    @Nullable\n+    public String scope() {\n+        return scope;\n+    }\n+\n+    /**\n+     * {@code scope} Access Token response field,\n+     * OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of\n+     * the access token as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     * A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     * The authorization server MAY fully or partially ignore the scope requested by the client, based\n+     * on the authorization server policy or the resource owner's instructions.  If the issued access\n+     * token scope is different from the one requested by the client, the authorization server MUST\n+     * include the \"scope\" response parameter to inform the client of the actual scope granted.\n+     * If the client omits the scope parameter when requesting authorization, the authorization server\n+     * MUST either process the request using a pre-defined default value or fail the request\n+     * indicating an invalid scope.\n+     */\n+    public Set<String> scopeSet() {\n+        return scopeSet;\n+    }\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Access Token response,\n+     * OPTIONAL.\n+     */\n+    public Map<String, String> extras() {\n+        return extras;\n+    }\n+\n+    /**\n+     * A value of the {@link HttpHeaderNames#AUTHORIZATION} header based on this access token.\n+     */\n+    public String authorization() {\n+        if (authorization == null) {\n+            final String type = (tokenType == null) ? DEFAULT_TOKEN_TYPE : tokenType;\n+            authorization = String.join(AUTHORIZATION_SEPARATOR,\n+                                        CaseUtil.firstUpperAllLowerCase(type), accessToken);\n+        }\n+        return authorization;\n+    }\n+\n+    /**\n+     * {@code JSON}-formatted raw Token Introspection Response body. If the {@link AccessTokenCapsule} was not\n+     * parsed out of the raw response body, this value calculated based on the other {@link AccessTokenCapsule}\n+     * values.\n+     */\n+    public String rawResponse() {\n+        if (rawResponse == null) {\n+            // WARNING: do not include {@code issuedAt} to the raw response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 335}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1Nzc0Mg==", "bodyText": "Better using Ascii?", "url": "https://github.com/line/armeria/pull/2840#discussion_r449957742", "createdAt": "2020-07-06T02:41:11Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/CaseUtil.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+final class CaseUtil {\n+\n+  @Nullable\n+  static String firstUpperCase(@Nullable String word) {\n+    if (word == null || word.isEmpty()) {\n+      return word;\n+    }\n+    return Character.toUpperCase(word.charAt(0)) + word.substring(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1Nzc2OQ==", "bodyText": "Better using Ascii?", "url": "https://github.com/line/armeria/pull/2840#discussion_r449957769", "createdAt": "2020-07-06T02:41:19Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/CaseUtil.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+final class CaseUtil {\n+\n+  @Nullable\n+  static String firstUpperCase(@Nullable String word) {\n+    if (word == null || word.isEmpty()) {\n+      return word;\n+    }\n+    return Character.toUpperCase(word.charAt(0)) + word.substring(1);\n+  }\n+\n+  @Nullable\n+  static String firstUpperAllLowerCase(@Nullable String word) {\n+    if (word == null || word.isEmpty()) {\n+      return word;\n+    }\n+    return Character.toUpperCase(word.charAt(0)) + word.substring(1).toLowerCase();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1ODg0NQ==", "bodyText": "Could be char?", "url": "https://github.com/line/armeria/pull/2840#discussion_r449958845", "createdAt": "2020-07-06T02:47:03Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+public final class ClientAuthorization {\n+\n+  private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+  private static final String AUTHORIZATION_SEPARATOR = \" \";\n+  private static final String CREDENTIALS_SEPARATOR = \":\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1ODg5MQ==", "bodyText": "Could be char?", "url": "https://github.com/line/armeria/pull/2840#discussion_r449958891", "createdAt": "2020-07-06T02:47:12Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+public final class ClientAuthorization {\n+\n+  private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+  private static final String AUTHORIZATION_SEPARATOR = \" \";\n+  private static final String CREDENTIALS_SEPARATOR = \":\";\n+\n+  private static final String CLIENT_ID = \"client_id\";\n+  private static final String CLIENT_SECRET = \"client_secret\";\n+  private static final char FORM_ENTRY_SEPARATOR = '=';\n+  private static final char FORM_TUPLE_SEPARATOR = '&';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1ODk3Ng==", "bodyText": "Could just use + operator", "url": "https://github.com/line/armeria/pull/2840#discussion_r449958976", "createdAt": "2020-07-06T02:47:36Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+public final class ClientAuthorization {\n+\n+  private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+  private static final String AUTHORIZATION_SEPARATOR = \" \";\n+  private static final String CREDENTIALS_SEPARATOR = \":\";\n+\n+  private static final String CLIENT_ID = \"client_id\";\n+  private static final String CLIENT_SECRET = \"client_secret\";\n+  private static final char FORM_ENTRY_SEPARATOR = '=';\n+  private static final char FORM_TUPLE_SEPARATOR = '&';\n+\n+  private final String authorizationType;\n+  @Nullable\n+  private final Supplier<String> authorizationSupplier;\n+  @Nullable\n+  private final Supplier<Map.Entry<String, String>> credentialsSupplier;\n+\n+  /**\n+   * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+   * authorization type,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+   *\n+   * @param authorizationSupplier A supplier of encoded client authorization token.\n+   * @param authorizationType One of the registered HTTP authentication schemes as per\n+   *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+   *                          HTTP Authentication Scheme Registry</a>.\n+   */\n+  public static ClientAuthorization ofAuthorization(\n+      Supplier<String> authorizationSupplier, String authorizationType) {\n+    return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+        null, requireNonNull(authorizationType, \"authorizationType\"));\n+  }\n+\n+  /**\n+   * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+   * {@code Basic} authorization type,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+   *\n+   * @param authorizationSupplier A supplier of encoded client authorization token.\n+   */\n+  public static ClientAuthorization ofBasicAuthorization(\n+      Supplier<String> authorizationSupplier) {\n+    return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+        null, null);\n+  }\n+\n+  /**\n+   * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+   * authorization type,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+   *\n+   * @param credentialsSupplier A supplier of client credentials.\n+   * @param authorizationType One of the registered HTTP authentication schemes as per\n+   *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+   *                          HTTP Authentication Scheme Registry</a>.\n+   */\n+  public static ClientAuthorization ofCredentials(\n+      Supplier<Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+    return new ClientAuthorization(null,\n+        requireNonNull(credentialsSupplier, \"credentialsSupplier\"),\n+        requireNonNull(authorizationType, \"authorizationType\"));\n+  }\n+\n+  /**\n+   * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+   * {@code Basic} authorization type,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+   *\n+   * @param credentialsSupplier A supplier of client credentials.\n+   */\n+  public static ClientAuthorization ofCredentials(\n+      Supplier<Map.Entry<String, String>> credentialsSupplier) {\n+    return new ClientAuthorization(null,\n+        requireNonNull(credentialsSupplier, \"credentialsSupplier\"), null);\n+  }\n+\n+  private ClientAuthorization(@Nullable Supplier<String> authorizationSupplier,\n+      @Nullable Supplier<Map.Entry<String, String>> credentialsSupplier,\n+      @Nullable String authorizationType) {\n+    if (authorizationSupplier == null && credentialsSupplier == null) {\n+      throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+    }\n+    this.authorizationSupplier = authorizationSupplier;\n+    this.credentialsSupplier = credentialsSupplier;\n+    this.authorizationType =\n+        authorizationType == null ? DEFAULT_AUTHORIZATION_TYPE : authorizationType;\n+  }\n+\n+  private String composeAuthorizationString() {\n+    final String clientAuthorization;\n+    if (authorizationSupplier != null) {\n+      clientAuthorization = authorizationSupplier.get();\n+    } else if (credentialsSupplier != null) {\n+      final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+      clientAuthorization = encodeClientCredentials(clientCredentials.getKey(), clientCredentials.getValue());\n+    } else {\n+      // we should not get here\n+      throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+    }\n+    return clientAuthorization;\n+  }\n+\n+  /**\n+   * Fetches client authorization token or client credentials from the supplier and composes client\n+   * {@code Authorization} header value,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+   * <pre>{@code\n+   * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+   * }</pre>.\n+   *\n+   * @return encoded client {@code Authorization} header value.\n+   */\n+  public String authorizationHeaderValue() {\n+    return String.join(AUTHORIZATION_SEPARATOR,\n+                       CaseUtil.firstUpperAllLowerCase(authorizationType), composeAuthorizationString());\n+  }\n+\n+  /**\n+   * Fetches client credentials from the supplier and composes required body parameters,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+   * <pre>{@code\n+   * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+   * }</pre>.\n+   *\n+   * @return encoded client credentials request body parameters.\n+   */\n+  public String credentialsBodyParameters() {\n+    requireNonNull(credentialsSupplier, \"credentialsSupplier\");\n+    final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+    final StringBuilder builder = new StringBuilder()\n+        .append(CLIENT_ID).append(FORM_ENTRY_SEPARATOR)\n+        .append(urlEncode(clientCredentials.getKey()))\n+        .append(FORM_TUPLE_SEPARATOR)\n+        .append(CLIENT_SECRET).append(FORM_ENTRY_SEPARATOR)\n+        .append(urlEncode(clientCredentials.getValue()));\n+    return builder.toString();\n+  }\n+\n+  private static String encodeClientCredentials(String clientId, String clientSecret) {\n+      return Base64.getEncoder()\n+                   .encodeToString(\n+                           String.join(CREDENTIALS_SEPARATOR, clientId, clientSecret)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 184}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/7e258fbe3783684db657d1a998fc24a181a80b55", "committedDate": "2020-07-12T10:32:54Z", "message": "- incorporated review comments by @trustin and @minwoox\n- fixed thread synchronization issue at AbstractOAuth2AuthorizationGrant and perform obtain/refresh requests using dedicated thread to minimize blocking of the event loop."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MTY0NjQx", "url": "https://github.com/line/armeria/pull/2840#pullrequestreview-447164641", "createdAt": "2020-07-13T11:27:17Z", "commit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMToyNzoxN1rOGwke1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMToyNzoxN1rOGwke1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4MjU1MA==", "bodyText": "Question: do you think it is better to abbreviate Authorization into Authz?", "url": "https://github.com/line/armeria/pull/2840#discussion_r453582550", "createdAt": "2020-07-13T11:27:17Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+@FunctionalInterface\n+public interface OAuth2AuthorizationGrant {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MTY1NjM2", "url": "https://github.com/line/armeria/pull/2840#pullrequestreview-447165636", "createdAt": "2020-07-13T11:28:57Z", "commit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMToyODo1N1rOGwkh6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMToyODo1N1rOGwkh6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4MzMzNw==", "bodyText": "Is the term Capsule something defined in OAuth 2 or an authorization jargon? If not, what would be a better name? GrantedAccessToken? \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2840#discussion_r453583337", "createdAt": "2020-07-13T11:28:57Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+@FunctionalInterface\n+public interface OAuth2AuthorizationGrant {\n+\n+    /**\n+     * Produces OAuth 2.0 Access Token\n+     */\n+    CompletionStage<AccessTokenCapsule> getAccessToken();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NTg2OTM5", "url": "https://github.com/line/armeria/pull/2840#pullrequestreview-448586939", "createdAt": "2020-07-15T02:28:21Z", "commit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMjoyODoyMVrOGxr5fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMzo0ODoyMlrOGxtKXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc1MjYzNg==", "bodyText": "You can use QueryParams instead of the manual building of parameters string. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2840#discussion_r454752636", "createdAt": "2020-07-15T02:28:21Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+public final class ClientAuthorization {\n+\n+  private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+  private static final char AUTHORIZATION_SEPARATOR = ' ';\n+  private static final char CREDENTIALS_SEPARATOR = ':';\n+\n+  private static final String CLIENT_ID = \"client_id\";\n+  private static final String CLIENT_SECRET = \"client_secret\";\n+  private static final char FORM_ENTRY_SEPARATOR = '=';\n+  private static final char FORM_TUPLE_SEPARATOR = '&';\n+\n+  private final String authorizationType;\n+  @Nullable\n+  private final Supplier<String> authorizationSupplier;\n+  @Nullable\n+  private final Supplier<? extends Map.Entry<String, String>> credentialsSupplier;\n+\n+  /**\n+   * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+   * authorization type,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+   *\n+   * @param authorizationSupplier A supplier of encoded client authorization token.\n+   * @param authorizationType One of the registered HTTP authentication schemes as per\n+   *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+   *                          HTTP Authentication Scheme Registry</a>.\n+   */\n+  public static ClientAuthorization ofAuthorization(\n+      Supplier<String> authorizationSupplier, String authorizationType) {\n+    return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+        null, requireNonNull(authorizationType, \"authorizationType\"));\n+  }\n+\n+  /**\n+   * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+   * {@code Basic} authorization type,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+   *\n+   * @param authorizationSupplier A supplier of encoded client authorization token.\n+   */\n+  public static ClientAuthorization ofBasicAuthorization(\n+      Supplier<String> authorizationSupplier) {\n+    return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+        null, null);\n+  }\n+\n+  /**\n+   * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+   * authorization type,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+   *\n+   * @param credentialsSupplier A supplier of client credentials.\n+   * @param authorizationType One of the registered HTTP authentication schemes as per\n+   *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+   *                          HTTP Authentication Scheme Registry</a>.\n+   */\n+  public static ClientAuthorization ofCredentials(\n+      Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+    return new ClientAuthorization(null,\n+        requireNonNull(credentialsSupplier, \"credentialsSupplier\"),\n+        requireNonNull(authorizationType, \"authorizationType\"));\n+  }\n+\n+  /**\n+   * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+   * {@code Basic} authorization type,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+   *\n+   * @param credentialsSupplier A supplier of client credentials.\n+   */\n+  public static ClientAuthorization ofCredentials(\n+      Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+    return new ClientAuthorization(null,\n+        requireNonNull(credentialsSupplier, \"credentialsSupplier\"), null);\n+  }\n+\n+  private ClientAuthorization(@Nullable Supplier<String> authorizationSupplier,\n+      @Nullable Supplier<? extends Map.Entry<String, String>> credentialsSupplier,\n+      @Nullable String authorizationType) {\n+    if (authorizationSupplier == null && credentialsSupplier == null) {\n+      throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+    }\n+    this.authorizationSupplier = authorizationSupplier;\n+    this.credentialsSupplier = credentialsSupplier;\n+    this.authorizationType =\n+        authorizationType == null ? DEFAULT_AUTHORIZATION_TYPE : authorizationType;\n+  }\n+\n+  private String composeAuthorizationString() {\n+    final String clientAuthorization;\n+    if (authorizationSupplier != null) {\n+      clientAuthorization = authorizationSupplier.get();\n+    } else if (credentialsSupplier != null) {\n+      final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+      clientAuthorization = encodeClientCredentials(clientCredentials.getKey(), clientCredentials.getValue());\n+    } else {\n+      // we should not get here\n+      throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+    }\n+    return clientAuthorization;\n+  }\n+\n+  /**\n+   * Fetches client authorization token or client credentials from the supplier and composes client\n+   * {@code Authorization} header value,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+   * <pre>{@code\n+   * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+   * }</pre>.\n+   *\n+   * @return encoded client {@code Authorization} header value.\n+   */\n+  public String authorizationHeaderValue() {\n+    return CaseUtil.firstUpperAllLowerCase(authorizationType) +\n+           AUTHORIZATION_SEPARATOR + composeAuthorizationString();\n+  }\n+\n+  /**\n+   * Fetches client credentials from the supplier and composes required body parameters,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+   * <pre>{@code\n+   * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+   * }</pre>.\n+   *\n+   * @return encoded client credentials request body parameters.\n+   */\n+  public String credentialsBodyParameters() {\n+    requireNonNull(credentialsSupplier, \"credentialsSupplier\");\n+    final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+    final StringBuilder builder = new StringBuilder()\n+        .append(CLIENT_ID).append(FORM_ENTRY_SEPARATOR)\n+        .append(urlEncode(clientCredentials.getKey()))\n+        .append(FORM_TUPLE_SEPARATOR)\n+        .append(CLIENT_SECRET).append(FORM_ENTRY_SEPARATOR)\n+        .append(urlEncode(clientCredentials.getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc1NDcxMQ==", "bodyText": "Ditto, You can use QueryParams instead of the manual building of the parameters string.", "url": "https://github.com/line/armeria/pull/2840#discussion_r454754711", "createdAt": "2020-07-15T02:36:19Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AbstractAuthorizationRequest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+\n+/**\n+ * A common abstraction for the requests implementing various Authorization request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+abstract class AbstractAuthorizationRequest<T> {\n+\n+    private static final String FORM_ENTRY_SEPARATOR = \"=\";\n+    private static final String FORM_TUPLE_SEPARATOR = \"&\";\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param authorizationEndpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                              correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param authorizationEndpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                                  OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractAuthorizationRequest(WebClient authorizationEndpoint, String authorizationEndpointPath,\n+                                           @Nullable ClientAuthorization clientAuthorization) {\n+        endpoint = Objects.requireNonNull(authorizationEndpoint, \"authorizationEndpoint\");\n+        endpointPath = Objects.requireNonNull(authorizationEndpointPath, \"authorizationEndpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected WebClient endpoint() {\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Returns the authorization endpoint path.\n+     */\n+    protected String endpointPath() {\n+        return endpointPath;\n+    }\n+\n+    /**\n+     * Returns the value for the {@link HttpHeaderNames#AUTHORIZATION}.\n+     */\n+    @Nullable\n+    protected String authorizationHeaderValue() {\n+        return clientAuthorization == null ? null : clientAuthorization.authorizationHeaderValue();\n+    }\n+\n+    /**\n+     * Composes headers for the authorization request.\n+     */\n+    protected RequestHeaders composeRequestHeaders() {\n+        final RequestHeadersBuilder headersBuilder =\n+                RequestHeaders.of(HttpMethod.POST, endpointPath()).toBuilder();\n+        final String authorizationHeaderValue = authorizationHeaderValue();\n+        if (authorizationHeaderValue != null) {\n+            headersBuilder.add(HttpHeaderNames.AUTHORIZATION, authorizationHeaderValue);\n+        }\n+        headersBuilder.add(HttpHeaderNames.CONTENT_TYPE, MediaType.FORM_DATA.toString());\n+        return headersBuilder.build();\n+    }\n+\n+    /**\n+     * Extracts the result and convert it to the target type {@code T} or throw an error in case of an error\n+     * result.\n+     * @param response An {@link AggregatedHttpResponse} returned by the authorization endpoint.\n+     * @param requestData A {@link Map} that contains all the elements of the request form sent with the\n+     *                    request.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    @Nullable\n+    protected T extractResults(AggregatedHttpResponse response, Map<String, String> requestData) {\n+        final HttpStatus status = response.status();\n+        switch (status.code()) {\n+            case 200: // OK\n+                // expected Content-Type: application/json;charset=UTF-8\n+                validateContentType(response, MediaType.JSON);\n+                return extractOkResults(response, requestData);\n+            case 400: // Bad Request\n+                // expected Content-Type: application/json;charset=UTF-8\n+                validateContentType(response, MediaType.JSON);\n+                throw onBadRequestError(response);\n+            case 401: // Unauthorized\n+                throw onUnauthorizedError(response);\n+        }\n+        throw new UnsupportedResponseException(status.code(), status.toString(), response.contentUtf8());\n+    }\n+\n+    /**\n+     * Validates the content type of the response.\n+     */\n+    private static void validateContentType(AggregatedHttpResponse response, MediaType expectedType) {\n+        final MediaType contentType = response.contentType();\n+        if (contentType == null) {\n+            // if omitted, assume that the type matches the expected\n+            return;\n+        }\n+        final String mediaType = contentType.nameWithoutParameters();\n+        if (!mediaType.equalsIgnoreCase(expectedType.nameWithoutParameters())) {\n+            throw new UnsupportedMediaTypeException(mediaType,\n+                                                    response.status().toString(), response.contentUtf8());\n+        }\n+    }\n+\n+    /**\n+     * Extracts data from OK response and converts it to the target type {@code T}.\n+     */\n+    protected abstract T extractOkResults(AggregatedHttpResponse response, Map<String, String> requestData);\n+\n+    /**\n+     * Composes {@link TokenRequestException} upon 400 Bad Request response\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-5.2\">[RFC6749], Section 5.2</a>.\n+     * @param errorResponse response received from the server\n+     * @return an instance of {@link TokenRequestException}\n+     */\n+    protected TokenRequestException onBadRequestError(AggregatedHttpResponse errorResponse) {\n+        return TokenRequestException.builder().of(errorResponse.contentUtf8());\n+    }\n+\n+    /**\n+     * Composes {@link InvalidClientException} upon 401 Unauthorized response\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-5.2\">[RFC6749], Section 5.2</a> (invalid_client).\n+     * @param errorResponse response received from the server\n+     * @return an instance of {@link InvalidClientException}\n+     */\n+    protected TokenRequestException onUnauthorizedError(AggregatedHttpResponse errorResponse) {\n+        final StringBuilder messageBuilder = new StringBuilder().append(errorResponse.status());\n+        final String wwwAuthenticate = errorResponse.headers().get(HttpHeaderNames.WWW_AUTHENTICATE);\n+        if (wwwAuthenticate != null) {\n+            messageBuilder.append(\": \").append(wwwAuthenticate);\n+        }\n+        final HttpData errorResponseContents = errorResponse.content();\n+        if (!errorResponse.content().isEmpty()) {\n+            messageBuilder.append(\": \").append(errorResponseContents.toStringUtf8());\n+        }\n+        return new InvalidClientException(messageBuilder.toString(), null);\n+    }\n+\n+    /**\n+     * Makes a request to the authorization endpoint using supplied {@code requestForm} parameters and converts\n+     * the result to the given type {@code T}.\n+     */\n+    protected CompletableFuture<T> make(LinkedHashMap<String, String> requestForm) {\n+        final HttpData requestContents = HttpData.ofUtf8(\n+                requestForm.entrySet().stream().map(AbstractAuthorizationRequest::urlEncode)\n+                           .collect(Collectors.joining(FORM_TUPLE_SEPARATOR)));\n+        final RequestHeaders requestHeaders = composeRequestHeaders();\n+        final HttpResponse response = endpoint().execute(requestHeaders, requestContents);\n+        // when response aggregated, then extract the results...\n+        return response.aggregate().thenApply(r -> extractResults(r, Collections.unmodifiableMap(requestForm)));\n+    }\n+\n+    private static String urlEncode(Map.Entry<String, String> entry) {\n+        return entry.getKey() + FORM_ENTRY_SEPARATOR + urlEncode(entry.getValue());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc2MzI1Ng==", "bodyText": "Could you use JUnit 5 and ServerExtension? We prefer JUnit 5 for the new test code.\nhttps://armeria.dev/community/developer-guide#use-junit-5-instead-of-junit-4-for-testing", "url": "https://github.com/line/armeria/pull/2840#discussion_r454763256", "createdAt": "2020-07-15T03:07:41Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/test/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ClientCredentialsGrantTest.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.MockOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.MockOAuth2ClientCredentialsService;\n+import com.linecorp.armeria.common.auth.oauth2.MockOAuth2IntrospectionService;\n+import com.linecorp.armeria.server.AbstractHttpService;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.oauth2.OAuth2TokenIntrospectionAuthorizer;\n+import com.linecorp.armeria.testing.junit4.server.ServerRule;\n+\n+public class OAuth2ClientCredentialsGrantTest {\n+\n+    static final String CLIENT_CREDENTIALS = \"dGVzdF9jbGllbnQ6Y2xpZW50X3NlY3JldA==\"; //test_client:client_secret\n+    static final String SERVER_CREDENTIALS = \"dGVzdF9zZXJ2ZXI6c2VydmVyX3NlY3JldA==\"; //test_server:server_secret\n+\n+    static final MockOAuth2AccessToken TOKEN =\n+        MockOAuth2AccessToken.generate(\"test_client\", null, Duration.ofHours(3L),\n+                                       ImmutableMap.of(\"extension_field\", \"twenty-seven\"), \"read\", \"write\");\n+\n+    static final HttpService SERVICE = new AbstractHttpService() {\n+        @Override\n+        protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)\n+                throws Exception {\n+            return HttpResponse.of(HttpStatus.OK);\n+        }\n+    };\n+\n+    @Rule\n+    public ServerRule authServerRule = new ServerRule() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3MzM0MA==", "bodyText": "OAuth2Client looks nice! However, it has to create WebClient every time for different resource owners. \ud83e\udd14\nHow about adding a new method such as signedRequest(HttpRequest) to OAuth2ClientCredentialsGrant? Then users can set an HttpRequest that has AUTHORIZATION header to the existing WebClient without creating a new one.\nclass OAuth2ClientCredentialsGrant {\n    CompletableFuture<HttpRequest> signedRequest(HttpRequest req) {\n        return getAccessToken().thenApply(accessToken -> {\n            return req.withHeaders(/* set AUTHORIZATION header */);\n        });\n    }\n}\n\nHttpRequest request = HttpRequest.of(HttpMethod.GET, \"/resource-read-write/\");\nCompletableFuture<HttpRequest> signedRequest = grant.signRequest(request);\nAggregatedHttpResponse response = \n        signedRequest.thenCompose(signed -> client.execute(signed).aggregate()).join();", "url": "https://github.com/line/armeria/pull/2840#discussion_r454773340", "createdAt": "2020-07-15T03:48:22Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/test/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ClientCredentialsGrantTest.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.MockOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.MockOAuth2ClientCredentialsService;\n+import com.linecorp.armeria.common.auth.oauth2.MockOAuth2IntrospectionService;\n+import com.linecorp.armeria.server.AbstractHttpService;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.oauth2.OAuth2TokenIntrospectionAuthorizer;\n+import com.linecorp.armeria.testing.junit4.server.ServerRule;\n+\n+public class OAuth2ClientCredentialsGrantTest {\n+\n+    static final String CLIENT_CREDENTIALS = \"dGVzdF9jbGllbnQ6Y2xpZW50X3NlY3JldA==\"; //test_client:client_secret\n+    static final String SERVER_CREDENTIALS = \"dGVzdF9zZXJ2ZXI6c2VydmVyX3NlY3JldA==\"; //test_server:server_secret\n+\n+    static final MockOAuth2AccessToken TOKEN =\n+        MockOAuth2AccessToken.generate(\"test_client\", null, Duration.ofHours(3L),\n+                                       ImmutableMap.of(\"extension_field\", \"twenty-seven\"), \"read\", \"write\");\n+\n+    static final HttpService SERVICE = new AbstractHttpService() {\n+        @Override\n+        protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)\n+                throws Exception {\n+            return HttpResponse.of(HttpStatus.OK);\n+        }\n+    };\n+\n+    @Rule\n+    public ServerRule authServerRule = new ServerRule() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.annotatedService(\"/token\", new MockOAuth2ClientCredentialsService()\n+                    .withAuthorizedClient(\"test_client\", \"client_secret\")\n+                    .withAuthorizedClient(\"test_server\", \"server_secret\")\n+                    .withClientToken(\"test_client\", TOKEN));\n+            sb.annotatedService(\"/introspect\", new MockOAuth2IntrospectionService()\n+                    .withAuthorizedClient(\"test_client\", \"client_secret\")\n+                    .withAuthorizedClient(\"test_server\", \"server_secret\")\n+                    .withClientToken(\"test_client\", TOKEN));\n+        }\n+    };\n+\n+    private final ServerRule resourceServerRule = new ServerRule(false) {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            final WebClient introspectClient = WebClient.of(authServerRule.httpUri());\n+            sb.service(\"/resource-read-write/\",\n+                       OAuth2TokenIntrospectionAuthorizer.builder(introspectClient, \"/introspect/token/\")\n+                                                         .realm(\"protected resource read-write\")\n+                                                         .accessTokenType(\"Bearer\")\n+                                                         .clientBasicAuthorization(() -> SERVER_CREDENTIALS)\n+                                                         .permittedScope(\"read\", \"write\")\n+                                                         .build().asAuthService(SERVICE));\n+            sb.service(\"/resource-read/\",\n+                       OAuth2TokenIntrospectionAuthorizer.builder(introspectClient, \"/introspect/token/\")\n+                                                         .realm(\"protected resource read\")\n+                                                         .accessTokenType(\"Bearer\")\n+                                                         .clientBasicAuthorization(() -> SERVER_CREDENTIALS)\n+                                                         .permittedScope(\"read\")\n+                                                         .build().asAuthService(SERVICE));\n+            sb.service(\"/resource-read-write-update/\",\n+                       OAuth2TokenIntrospectionAuthorizer.builder(introspectClient, \"/introspect/token/\")\n+                                                         .realm(\"protected resource read-write-update\")\n+                                                         .accessTokenType(\"Bearer\")\n+                                                         .clientBasicAuthorization(() -> SERVER_CREDENTIALS)\n+                                                         .permittedScope(\"read\", \"write\", \"update\")\n+                                                         .build().asAuthService(SERVICE));\n+        }\n+    };\n+\n+    @Test\n+    public void testOk() throws Exception {\n+        try (Server resourceServer = resourceServerRule.start()) {\n+\n+            final WebClient authClient = WebClient.of(authServerRule.httpUri());\n+            final OAuth2ClientCredentialsGrant grant = OAuth2ClientCredentialsGrant\n+                    .builder(authClient, \"/token/client/\")\n+                    .clientBasicAuthorization(() -> CLIENT_CREDENTIALS).build();\n+\n+            final WebClient client = WebClient.builder(resourceServerRule.httpUri())\n+                                              .decorator(OAuth2Client.newDecorator(grant))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NjE1OTE1", "url": "https://github.com/line/armeria/pull/2840#pullrequestreview-448615915", "createdAt": "2020-07-15T04:12:43Z", "commit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDoxMjo0M1rOGxti9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDoxMjo0M1rOGxti9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3OTYzNw==", "bodyText": "Question: Is there a special reason that we call join() here? Shouldn't we return CompletableFuture<AccessTokenCapsule>?\nIIUC, tokenRef could be set by refreshAccessTokenAsync(token).whenComplete(...)", "url": "https://github.com/line/armeria/pull/2840#discussion_r454779637", "createdAt": "2020-07-15T04:12:43Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessTokenAsync(\n+            @Nullable AccessTokenCapsule token);\n+\n+    /**\n+     * Obtains a new access token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule obtainAccessToken() {\n+        final AccessTokenCapsule token = obtainAccessTokenAsync(null).join();\n+        tokenRef.set(token); // reset the token reference\n+        if (tokenConsumer != null) {\n+            tokenConsumer.accept(token); // store token to an optional storage (e.g. secret store)\n+        }\n+        return token;\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response\n+     * asynchronously, otherwise, if no refresh token available, re-obtains a new access token from the token\n+     * end-point.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private CompletableFuture<AccessTokenCapsule> refreshAccessTokenAsync(AccessTokenCapsule token) {\n+        if (token.refreshToken() != null) {\n+            // try refreshing token if refresh token was previously provided\n+            return refreshRequest.make(token);\n+        }\n+        // try to re-obtain access token\n+        return obtainAccessTokenAsync(token);\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response, otherwise,\n+     * if no refresh token available, re-obtains a new access token from the token end-point.\n+     * If the refresh token request fails with {@link TokenRequestException}, tries to re-obtains a new access\n+     * token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule refreshAccessToken(Instant instant) {\n+        // after acquiring the lock, re-check if it's a valid token\n+        final AccessTokenCapsule token = tokenRef.get();\n+        if (token.isValid(instant)) {\n+            // simply return a valid token\n+            return token;\n+        }\n+        // otherwise, refresh it\n+        AccessTokenCapsule refreshedToken;\n+        try {\n+            refreshedToken = refreshAccessTokenAsync(token).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 165}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NjE2NDA5", "url": "https://github.com/line/armeria/pull/2840#pullrequestreview-448616409", "createdAt": "2020-07-15T04:14:38Z", "commit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDoxNDozOFrOGxtkvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDoyNzo0N1rOGxtyJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MDA5NA==", "bodyText": "Do we have to create a new ExecutorService for every request? I think this might cause GC pressure in the high traffic. \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2840#discussion_r454780094", "createdAt": "2020-07-15T04:14:38Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MTI5NQ==", "bodyText": "I think expires is not that short. So RefreshAccessTokenRequest might not be used for short live requests.", "url": "https://github.com/line/armeria/pull/2840#discussion_r454781295", "createdAt": "2020-07-15T04:19:33Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MDA5NA=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MTYzOQ==", "bodyText": "Ditto, Couldn't we return CompletableFuture<AccessTokenCapsule>?", "url": "https://github.com/line/armeria/pull/2840#discussion_r454781639", "createdAt": "2020-07-15T04:20:46Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessTokenAsync(\n+            @Nullable AccessTokenCapsule token);\n+\n+    /**\n+     * Obtains a new access token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule obtainAccessToken() {\n+        final AccessTokenCapsule token = obtainAccessTokenAsync(null).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MjE2OQ==", "bodyText": "nit: Could merge two lines.", "url": "https://github.com/line/armeria/pull/2840#discussion_r454782169", "createdAt": "2020-07-15T04:22:32Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<AccessTokenCapsule> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MjQ0MQ==", "bodyText": "nit: Could merge two lines.", "url": "https://github.com/line/armeria/pull/2840#discussion_r454782441", "createdAt": "2020-07-15T04:23:39Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<AccessTokenCapsule> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T refreshBefore(Duration refreshBefore) {\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        return (T) this;\n+    }\n+\n+    public final Duration refreshBefore() {\n+        return refreshBefore;\n+    }\n+\n+    @Nullable\n+    public final Supplier<AccessTokenCapsule> tokenSupplier() {\n+        return tokenSupplier;\n+    }\n+\n+    /**\n+     * A {@link Supplier} to load Access Token from, to be able to restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenSupplier(\n+            Supplier<AccessTokenCapsule> tokenSupplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MjQ3Ng==", "bodyText": "Could merge two lines.\nGlobal comment Consumer<? super AccessTokenCapsule> and Supplier<? extends AccessTokenCapsule>", "url": "https://github.com/line/armeria/pull/2840#discussion_r454782476", "createdAt": "2020-07-15T04:23:49Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<AccessTokenCapsule> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T refreshBefore(Duration refreshBefore) {\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        return (T) this;\n+    }\n+\n+    public final Duration refreshBefore() {\n+        return refreshBefore;\n+    }\n+\n+    @Nullable\n+    public final Supplier<AccessTokenCapsule> tokenSupplier() {\n+        return tokenSupplier;\n+    }\n+\n+    /**\n+     * A {@link Supplier} to load Access Token from, to be able to restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenSupplier(\n+            Supplier<AccessTokenCapsule> tokenSupplier) {\n+        this.tokenSupplier = requireNonNull(tokenSupplier, \"tokenSupplier\");\n+        return (T) this;\n+    }\n+\n+    @Nullable\n+    public final Consumer<AccessTokenCapsule> tokenConsumer() {\n+        return tokenConsumer;\n+    }\n+\n+    /**\n+     * A {@link Consumer} to store Access Token to, to be able restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenConsumer(\n+            Consumer<AccessTokenCapsule> tokenConsumer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MzE1MQ==", "bodyText": "I prefer OAuth2AccessToken \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2840#discussion_r454783151", "createdAt": "2020-07-15T04:26:22Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+@FunctionalInterface\n+public interface OAuth2AuthorizationGrant {\n+\n+    /**\n+     * Produces OAuth 2.0 Access Token\n+     */\n+    CompletionStage<AccessTokenCapsule> getAccessToken();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4MzMzNw=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MzUyNA==", "bodyText": "Do we need to catch an Exception?\nI think we can just return unwrap().execute(ctx, newReq) without try...catch", "url": "https://github.com/line/armeria/pull/2840#discussion_r454783524", "createdAt": "2020-07-15T04:27:47Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Decorates a {@link HttpClient} with an OAuth 2.0 Authorization Grant flow.\n+ */\n+public class OAuth2Client extends SimpleDecoratingHttpClient {\n+\n+    /**\n+     * Creates a new {@link HttpClient} decorator that handles OAuth 2.0 Authorization Grant flow.\n+     * @param authorizationGrant An {@link OAuth2AuthorizationGrant} implementing specific\n+     *                           OAuth 2.0 Authorization Grant flow.\n+     */\n+    public static Function<? super HttpClient, OAuth2Client> newDecorator(\n+            OAuth2AuthorizationGrant authorizationGrant) {\n+        return delegate -> new OAuth2Client(delegate, authorizationGrant);\n+    }\n+\n+    private final OAuth2AuthorizationGrant authorizationGrant;\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpClient} with\n+     * an OAuth 2.0 Authorization Grant flow.\n+     */\n+    OAuth2Client(HttpClient delegate, OAuth2AuthorizationGrant authorizationGrant) {\n+        super(delegate);\n+        this.authorizationGrant = requireNonNull(authorizationGrant, \"authorizationGrant\");\n+    }\n+\n+    @Override\n+    public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n+        return HttpResponse.from(authorizationGrant.getAccessToken().thenApply(accessToken -> {\n+            // Create a new request with an additional 'Authorization' header\n+            final HttpRequest newReq =\n+                req.withHeaders(req.headers().toBuilder()\n+                                   .set(HttpHeaderNames.AUTHORIZATION, accessToken.authorization())\n+                                   .build());\n+            // Update the ctx.request\n+            ctx.updateRequest(newReq);\n+            try {\n+                return unwrap().execute(ctx, newReq);\n+            } catch (Exception e) {\n+                return Exceptions.throwUnsafely(Exceptions.peel(e));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44ac8f0b4e478dad703a33614736f8e561c22b09", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/44ac8f0b4e478dad703a33614736f8e561c22b09", "committedDate": "2020-07-21T11:01:36Z", "message": "- incorporated review comments by @ikhoon"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71764df4cfc611e905efe7f57e8b3418237f0808", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/71764df4cfc611e905efe7f57e8b3418237f0808", "committedDate": "2020-07-21T11:12:19Z", "message": "- renamed AccessTokenCapsule to OAuth2AccessToken\n- renamed TokenDescriptor to OAuth2TokenDescriptor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyOTgzMTU3", "url": "https://github.com/line/armeria/pull/2840#pullrequestreview-452983157", "createdAt": "2020-07-22T04:18:52Z", "commit": {"oid": "71764df4cfc611e905efe7f57e8b3418237f0808"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNDoxODo1M1rOG1SHzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNDoxODo1M1rOG1SHzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyNDYyMw==", "bodyText": "I realized that we already have a class named OAuth2Token at com.linecorp.armeria.common.auth. How about OAuth2AccessTokenResponse?", "url": "https://github.com/line/armeria/pull/2840#discussion_r458524623", "createdAt": "2020-07-22T04:18:53Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+public class OAuth2AccessToken implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71764df4cfc611e905efe7f57e8b3418237f0808"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed953b11229b23d72d7156c62d2a91826db4a702", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/ed953b11229b23d72d7156c62d2a91826db4a702", "committedDate": "2020-07-22T10:45:59Z", "message": "- renamed AbstractAuthorizationRequest to AbstractOAuth2Request\n- minor refactoring of AbstractOAuth2Request"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzODI4MjY4", "url": "https://github.com/line/armeria/pull/2840#pullrequestreview-453828268", "createdAt": "2020-07-23T04:24:32Z", "commit": {"oid": "ed953b11229b23d72d7156c62d2a91826db4a702"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoyNDozMlrOG17z_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoyOToxMlrOG173kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNzY3Ng==", "bodyText": "nit: Could you use 4 spaces for indentation?", "url": "https://github.com/line/armeria/pull/2840#discussion_r459207676", "createdAt": "2020-07-23T04:24:32Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+public final class ClientAuthorization {\n+\n+  private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed953b11229b23d72d7156c62d2a91826db4a702"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwODU5NA==", "bodyText": "I see!", "url": "https://github.com/line/armeria/pull/2840#discussion_r459208594", "createdAt": "2020-07-23T04:29:12Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Decorates a {@link HttpClient} with an OAuth 2.0 Authorization Grant flow.\n+ */\n+public class OAuth2Client extends SimpleDecoratingHttpClient {\n+\n+    /**\n+     * Creates a new {@link HttpClient} decorator that handles OAuth 2.0 Authorization Grant flow.\n+     * @param authorizationGrant An {@link OAuth2AuthorizationGrant} implementing specific\n+     *                           OAuth 2.0 Authorization Grant flow.\n+     */\n+    public static Function<? super HttpClient, OAuth2Client> newDecorator(\n+            OAuth2AuthorizationGrant authorizationGrant) {\n+        return delegate -> new OAuth2Client(delegate, authorizationGrant);\n+    }\n+\n+    private final OAuth2AuthorizationGrant authorizationGrant;\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpClient} with\n+     * an OAuth 2.0 Authorization Grant flow.\n+     */\n+    OAuth2Client(HttpClient delegate, OAuth2AuthorizationGrant authorizationGrant) {\n+        super(delegate);\n+        this.authorizationGrant = requireNonNull(authorizationGrant, \"authorizationGrant\");\n+    }\n+\n+    @Override\n+    public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n+        return HttpResponse.from(authorizationGrant.getAccessToken().thenApply(accessToken -> {\n+            // Create a new request with an additional 'Authorization' header\n+            final HttpRequest newReq =\n+                req.withHeaders(req.headers().toBuilder()\n+                                   .set(HttpHeaderNames.AUTHORIZATION, accessToken.authorization())\n+                                   .build());\n+            // Update the ctx.request\n+            ctx.updateRequest(newReq);\n+            try {\n+                return unwrap().execute(ctx, newReq);\n+            } catch (Exception e) {\n+                return Exceptions.throwUnsafely(Exceptions.peel(e));\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MzUyNA=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba6f23bd28e4660016609fddc85dc13f0c2b845e", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/ba6f23bd28e4660016609fddc85dc13f0c2b845e", "committedDate": "2020-07-23T09:04:15Z", "message": "- moved RefreshAccessTokenRequest, ClientCredentialsTokenRequest, ResourceOwnerPasswordCredentialsTokenRequest and AbstractAccessTokenRequest to the client package.\n- moved TokenIntrospectionRequest to the server package.\n- fixed indentation at ClientAuthorization."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7b8ccb65dad74e731cf206dde240eb0d9e6bf5b", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/b7b8ccb65dad74e731cf206dde240eb0d9e6bf5b", "committedDate": "2020-07-23T09:57:53Z", "message": "- renamed OAuth2AccessToken -> GrantedOAuth2AccessToken."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aaa285b1122f1a4016e22f556f332910279fae73", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/aaa285b1122f1a4016e22f556f332910279fae73", "committedDate": "2020-08-03T14:02:10Z", "message": "- introduced TokenLifecycleManager to abstract token lifecycle management out of OAuth2AuthorizationGrant;\n- introduced SerialFuture execute asynchronous actions (Callable<CompletionStage<T>>) serially;\n- added optional Executor to AbstractOAuth2AuthorizationGrant and AbstractOAuth2AuthorizationGrantBuilder to support asynchronous execution by a dedicated thread pool;"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/e2eef13ef36d705634355e43cb7c3123382f44bd", "committedDate": "2020-08-04T09:30:40Z", "message": "- enhanced SerialFutureTest;"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjY2MTI3", "url": "https://github.com/line/armeria/pull/2840#pullrequestreview-465666127", "createdAt": "2020-08-12T07:42:46Z", "commit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzo0Mjo0NlrOG_VmsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzo0Mzo1M1rOG_VpGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA2NzQ0MQ==", "bodyText": "Is it possible to use QueryParams instead of Map<String, String> here?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469067441", "createdAt": "2020-08-12T07:42:46Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected WebClient endpoint() {\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Returns the authorization endpoint path.\n+     */\n+    protected String endpointPath() {\n+        return endpointPath;\n+    }\n+\n+    /**\n+     * Returns the client authorization object.\n+     */\n+    @Nullable\n+    protected ClientAuthorization clientAuthorization() {\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Extracts data from OK response and converts it to the target type {@code T}.\n+     */\n+    protected abstract T extractOkResults(AggregatedHttpResponse response, Map<String, String> requestData);\n+\n+    /**\n+     * Returns the value for the {@link HttpHeaderNames#AUTHORIZATION}.\n+     */\n+    @Nullable\n+    protected String authorizationHeaderValue() {\n+        return clientAuthorization == null ? null : clientAuthorization.authorizationHeaderValue();\n+    }\n+\n+    /**\n+     * Sets client credentials as form data parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected void setCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {\n+        if (clientAuthorization != null) {\n+            clientAuthorization.setCredentialsAsBodyParameters(formBuilder);\n+        }\n+    }\n+\n+    /**\n+     * Makes a request to the authorization endpoint using supplied {@code requestForm} parameters and converts\n+     * the result to the given type {@code T}.\n+     */\n+    protected CompletableFuture<T> executeWithParameters(LinkedHashMap<String, String> requestFormData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA2ODA1Ng==", "bodyText": "Ditto - could use QueryParams?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469068056", "createdAt": "2020-08-12T07:43:53Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected WebClient endpoint() {\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Returns the authorization endpoint path.\n+     */\n+    protected String endpointPath() {\n+        return endpointPath;\n+    }\n+\n+    /**\n+     * Returns the client authorization object.\n+     */\n+    @Nullable\n+    protected ClientAuthorization clientAuthorization() {\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Extracts data from OK response and converts it to the target type {@code T}.\n+     */\n+    protected abstract T extractOkResults(AggregatedHttpResponse response, Map<String, String> requestData);\n+\n+    /**\n+     * Returns the value for the {@link HttpHeaderNames#AUTHORIZATION}.\n+     */\n+    @Nullable\n+    protected String authorizationHeaderValue() {\n+        return clientAuthorization == null ? null : clientAuthorization.authorizationHeaderValue();\n+    }\n+\n+    /**\n+     * Sets client credentials as form data parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected void setCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {\n+        if (clientAuthorization != null) {\n+            clientAuthorization.setCredentialsAsBodyParameters(formBuilder);\n+        }\n+    }\n+\n+    /**\n+     * Makes a request to the authorization endpoint using supplied {@code requestForm} parameters and converts\n+     * the result to the given type {@code T}.\n+     */\n+    protected CompletableFuture<T> executeWithParameters(LinkedHashMap<String, String> requestFormData) {\n+        final Map<String, String> requestData = Collections.unmodifiableMap(requestFormData);\n+        final HttpResponse response = endpoint().execute(createHttpRequest(endpointPath, requestData));\n+        // when response aggregated, then extract the results...\n+        return response.aggregate().thenApply(r -> extractResults(r, Collections.unmodifiableMap(requestData)));\n+    }\n+\n+    /**\n+     * Produces {@link HttpRequest} based on this object.\n+     */\n+    private HttpRequest createHttpRequest(String endpointPath, Map<String, String> requestFormData) {\n+        final QueryParamsBuilder requestFormBuilder = QueryParams.builder();\n+        requestFormBuilder.add(requestFormData.entrySet());\n+\n+        final RequestHeadersBuilder headersBuilder =\n+                RequestHeaders.of(HttpMethod.POST, endpointPath).toBuilder();\n+        final String authorizationHeaderValue = authorizationHeaderValue();\n+        if (authorizationHeaderValue != null) {\n+            headersBuilder.add(HttpHeaderNames.AUTHORIZATION, authorizationHeaderValue);\n+        } else {\n+            setCredentialsAsBodyParameters(requestFormBuilder);\n+        }\n+        headersBuilder.add(HttpHeaderNames.CONTENT_TYPE, MediaType.FORM_DATA.toString());\n+\n+        return HttpRequest.of(headersBuilder.build(), HttpData.ofUtf8(requestFormBuilder.toQueryString()));\n+    }\n+\n+    /**\n+     * Extracts the result and convert it to the target type {@code T} or throw an error in case of an error\n+     * result.\n+     * @param response An {@link AggregatedHttpResponse} returned by the authorization endpoint.\n+     * @param requestData A {@link Map} that contains all the elements of the request form sent with the\n+     *                    request.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    @Nullable\n+    protected T extractResults(AggregatedHttpResponse response, Map<String, String> requestData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 163}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjkxOTA1", "url": "https://github.com/line/armeria/pull/2840#pullrequestreview-465691905", "createdAt": "2020-08-12T08:19:49Z", "commit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODoxOTo0OVrOG_W06Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODoyMDoyOFrOG_W2gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4NzQ2NQ==", "bodyText": "This is interesting. I was rather expecting something like:\nAuthService.builder()\n           .addOAuth2(OAuth2TokenIntrospectionAuthorizer.builder()....build())\n           .newDecorator(); // or .build(..);\nOne missing piece here is that you cannot specify the failure handler. To solve this problem, what do you think about adding some default methods to Authorizer? e.g.\npublic interface Authorizer<T> {\n    ...\n    @Nullable // null means 'use the default or what's specified in the builder.'\n    default AuthSuccessHandler successHandler() { return null; }\n    @Nullable // null means 'use the default or what's specified in the builder.'\n    default AuthFailureHandler failureHandler() { return null; }\n}\n.. so that you can specify the success/failure handler specific to OAuth2.", "url": "https://github.com/line/armeria/pull/2840#discussion_r469087465", "createdAt": "2020-08-12T08:19:49Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.cache.Cache;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.auth.OAuth2Token;\n+import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.AuthFailureHandler;\n+import com.linecorp.armeria.server.auth.AuthService;\n+import com.linecorp.armeria.server.auth.Authorizer;\n+\n+import io.netty.util.AttributeKey;\n+\n+/**\n+ * Determines whether a given {@link OAuth2Token} is authorized for the service registered in using OAuth 2.0\n+ * Token Introspection. {@code ctx} can be used for storing authorization information about the request for use\n+ * in business logic.\n+ */\n+public class OAuth2TokenIntrospectionAuthorizer implements Authorizer<OAuth2Token> {\n+\n+    /**\n+     * Returns a newly created {@link OAuth2TokenIntrospectionAuthorizerBuilder}.\n+     *\n+     * @param introspectionEndpoint A {@link WebClient} to facilitate the Token Introspection request. Must\n+     *                              correspond to the Token Introspection endpoint of the OAuth 2.0 system.\n+     * @param introspectionEndpointPath A URI path that corresponds to the Token Introspection endpoint of the\n+     *                                  OAuth 2.0 system.\n+     */\n+    public static OAuth2TokenIntrospectionAuthorizerBuilder builder(WebClient introspectionEndpoint,\n+                                                                    String introspectionEndpointPath) {\n+        return new OAuth2TokenIntrospectionAuthorizerBuilder(introspectionEndpoint, introspectionEndpointPath);\n+    }\n+\n+    static final AttributeKey<Integer> ERROR_CODE = AttributeKey.valueOf(\"x-oauth2-error\");\n+    static final AttributeKey<String> ERROR_TYPE = AttributeKey.valueOf(\"x-oauth2-error-type\");\n+    static final String UNSUPPORTED_TOKEN_TYPE = \"unsupported_token_type\";\n+    static final String INVALID_TOKEN = \"invalid_token\";\n+    static final String INSUFFICIENT_SCOPE = \"insufficient_scope\";\n+\n+    private final Cache<String, OAuth2TokenDescriptor> tokenCache;\n+    private final Set<String> permittedScope;\n+    @Nullable\n+    private final String accessTokenType;\n+    @Nullable\n+    private final String realm;\n+    private final TokenIntrospectionRequest tokenIntrospectionRequest;\n+    private final AuthFailureHandler authFailureHandler;\n+\n+    OAuth2TokenIntrospectionAuthorizer(Cache<String, OAuth2TokenDescriptor> tokenCache,\n+                                       @Nullable String accessTokenType, @Nullable String realm,\n+                                       Set<String> permittedScope,\n+                                       TokenIntrospectionRequest tokenIntrospectionRequest) {\n+        this.tokenCache = requireNonNull(tokenCache, \"tokenCache\");\n+        this.accessTokenType = accessTokenType;\n+        this.realm = realm;\n+        this.permittedScope = requireNonNull(permittedScope, \"permittedScope\");\n+        this.tokenIntrospectionRequest =\n+                requireNonNull(tokenIntrospectionRequest, \"tokenIntrospectionRequest\");\n+        authFailureHandler =\n+                new OAuth2AuthorizationFailureHandler(accessTokenType, realm, String.join(\" \", permittedScope));\n+    }\n+\n+    /**\n+     * Creates a new {@link AuthService} that authorizes HTTP requests using OAuth 2.0 Token Introspection.\n+     */\n+    public AuthService asAuthService(HttpService delegate) {\n+        return AuthService.builder()\n+                          .addOAuth2(this)\n+                          .onFailure(authFailureHandler())\n+                          .build(delegate);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4Nzg3NQ==", "bodyText": "With the change I suggested above, we will not need this method.", "url": "https://github.com/line/armeria/pull/2840#discussion_r469087875", "createdAt": "2020-08-12T08:20:28Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.cache.Cache;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.auth.OAuth2Token;\n+import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.AuthFailureHandler;\n+import com.linecorp.armeria.server.auth.AuthService;\n+import com.linecorp.armeria.server.auth.Authorizer;\n+\n+import io.netty.util.AttributeKey;\n+\n+/**\n+ * Determines whether a given {@link OAuth2Token} is authorized for the service registered in using OAuth 2.0\n+ * Token Introspection. {@code ctx} can be used for storing authorization information about the request for use\n+ * in business logic.\n+ */\n+public class OAuth2TokenIntrospectionAuthorizer implements Authorizer<OAuth2Token> {\n+\n+    /**\n+     * Returns a newly created {@link OAuth2TokenIntrospectionAuthorizerBuilder}.\n+     *\n+     * @param introspectionEndpoint A {@link WebClient} to facilitate the Token Introspection request. Must\n+     *                              correspond to the Token Introspection endpoint of the OAuth 2.0 system.\n+     * @param introspectionEndpointPath A URI path that corresponds to the Token Introspection endpoint of the\n+     *                                  OAuth 2.0 system.\n+     */\n+    public static OAuth2TokenIntrospectionAuthorizerBuilder builder(WebClient introspectionEndpoint,\n+                                                                    String introspectionEndpointPath) {\n+        return new OAuth2TokenIntrospectionAuthorizerBuilder(introspectionEndpoint, introspectionEndpointPath);\n+    }\n+\n+    static final AttributeKey<Integer> ERROR_CODE = AttributeKey.valueOf(\"x-oauth2-error\");\n+    static final AttributeKey<String> ERROR_TYPE = AttributeKey.valueOf(\"x-oauth2-error-type\");\n+    static final String UNSUPPORTED_TOKEN_TYPE = \"unsupported_token_type\";\n+    static final String INVALID_TOKEN = \"invalid_token\";\n+    static final String INSUFFICIENT_SCOPE = \"insufficient_scope\";\n+\n+    private final Cache<String, OAuth2TokenDescriptor> tokenCache;\n+    private final Set<String> permittedScope;\n+    @Nullable\n+    private final String accessTokenType;\n+    @Nullable\n+    private final String realm;\n+    private final TokenIntrospectionRequest tokenIntrospectionRequest;\n+    private final AuthFailureHandler authFailureHandler;\n+\n+    OAuth2TokenIntrospectionAuthorizer(Cache<String, OAuth2TokenDescriptor> tokenCache,\n+                                       @Nullable String accessTokenType, @Nullable String realm,\n+                                       Set<String> permittedScope,\n+                                       TokenIntrospectionRequest tokenIntrospectionRequest) {\n+        this.tokenCache = requireNonNull(tokenCache, \"tokenCache\");\n+        this.accessTokenType = accessTokenType;\n+        this.realm = realm;\n+        this.permittedScope = requireNonNull(permittedScope, \"permittedScope\");\n+        this.tokenIntrospectionRequest =\n+                requireNonNull(tokenIntrospectionRequest, \"tokenIntrospectionRequest\");\n+        authFailureHandler =\n+                new OAuth2AuthorizationFailureHandler(accessTokenType, realm, String.join(\" \", permittedScope));\n+    }\n+\n+    /**\n+     * Creates a new {@link AuthService} that authorizes HTTP requests using OAuth 2.0 Token Introspection.\n+     */\n+    public AuthService asAuthService(HttpService delegate) {\n+        return AuthService.builder()\n+                          .addOAuth2(this)\n+                          .onFailure(authFailureHandler())\n+                          .build(delegate);\n+    }\n+\n+    /**\n+     * Creates a new {@link AuthService} that authorizes HTTP requests using OAuth 2.0 Token Introspection.\n+     * Returns this service as a decorator.\n+     */\n+    public Function<? super HttpService, ? extends HttpService> asDecorator() {\n+        return this::asAuthService;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1ODg1NDc3", "url": "https://github.com/line/armeria/pull/2840#pullrequestreview-465885477", "createdAt": "2020-08-12T12:53:06Z", "commit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "state": "COMMENTED", "comments": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo1MzowNlrOG_f5dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzo1Mjo0N1rOG_iVFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzNjA4NQ==", "bodyText": "We can drop protected if this class is package-local.", "url": "https://github.com/line/armeria/pull/2840#discussion_r469236085", "createdAt": "2020-08-12T12:53:06Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractAccessTokenRequest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.SCOPE;\n+\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractOAuth2Request;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+/**\n+ * A common abstraction for the requests implementing various Access Token request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+ */\n+abstract class AbstractAccessTokenRequest extends AbstractOAuth2Request<GrantedOAuth2AccessToken> {\n+\n+    protected static final String GRANT_TYPE = \"grant_type\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzNjQyMQ==", "bodyText": "We can drop protected if this class is package-local.", "url": "https://github.com/line/armeria/pull/2840#discussion_r469236421", "createdAt": "2020-08-12T12:53:44Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractAccessTokenRequest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.SCOPE;\n+\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractOAuth2Request;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+/**\n+ * A common abstraction for the requests implementing various Access Token request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+ */\n+abstract class AbstractAccessTokenRequest extends AbstractOAuth2Request<GrantedOAuth2AccessToken> {\n+\n+    protected static final String GRANT_TYPE = \"grant_type\";\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractAccessTokenRequest(WebClient accessTokenEndpoint, String accessTokenEndpointPath,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzODEwMA==", "bodyText": "Does it make sense to drop client from all client*() builder methods for brevity?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469238100", "createdAt": "2020-08-12T12:56:28Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<? super GrantedOAuth2AccessToken> tokenConsumer;\n+\n+    @Nullable\n+    private Executor executor;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientBasicAuthorization(Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzOTIyOA==", "bodyText": "Global comment:\n\nIn our convention, the getter methods are usually hidden (i.e. they are protected or package-local). Could you reduce the visibility of the getters in builder classes?\nMissing Javadoc", "url": "https://github.com/line/armeria/pull/2840#discussion_r469239228", "createdAt": "2020-08-12T12:58:12Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<? super GrantedOAuth2AccessToken> tokenConsumer;\n+\n+    @Nullable\n+    private Executor executor;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientBasicAuthorization(Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T refreshBefore(Duration refreshBefore) {\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        return (T) this;\n+    }\n+\n+    public final Duration refreshBefore() {\n+        return refreshBefore;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzOTg1MA==", "bodyText": "How about just executor() for consistency with other existing builders?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469239850", "createdAt": "2020-08-12T12:59:14Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<? super GrantedOAuth2AccessToken> tokenConsumer;\n+\n+    @Nullable\n+    private Executor executor;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientBasicAuthorization(Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T refreshBefore(Duration refreshBefore) {\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        return (T) this;\n+    }\n+\n+    public final Duration refreshBefore() {\n+        return refreshBefore;\n+    }\n+\n+    @Nullable\n+    public final Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier() {\n+        return tokenSupplier;\n+    }\n+\n+    /**\n+     * A {@link Supplier} to load Access Token from, to be able to restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenSupplier(Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier) {\n+        this.tokenSupplier = requireNonNull(tokenSupplier, \"tokenSupplier\");\n+        return (T) this;\n+    }\n+\n+    @Nullable\n+    public final Consumer<? super GrantedOAuth2AccessToken> tokenConsumer() {\n+        return tokenConsumer;\n+    }\n+\n+    /**\n+     * A {@link Consumer} to store Access Token to, to be able restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenConsumer(Consumer<? super GrantedOAuth2AccessToken> tokenConsumer) {\n+        this.tokenConsumer = requireNonNull(tokenConsumer, \"tokenConsumer\");\n+        return (T) this;\n+    }\n+\n+    /**\n+     * An optional {@link Executor} that facilitates asynchronous access token obtain and refresh operations.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T withExecutor(Executor executor) {\n+        this.executor = requireNonNull(executor, \"executor\");\n+        return (T) this;\n+    }\n+\n+    public final Executor withExecutor() {\n+        return executor;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0MDUyNQ==", "bodyText": "Global comment: Consider dropping protected from package-local classes.", "url": "https://github.com/line/armeria/pull/2840#discussion_r469240525", "createdAt": "2020-08-12T13:00:10Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<? super GrantedOAuth2AccessToken> tokenConsumer;\n+\n+    @Nullable\n+    private Executor executor;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientBasicAuthorization(Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T refreshBefore(Duration refreshBefore) {\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        return (T) this;\n+    }\n+\n+    public final Duration refreshBefore() {\n+        return refreshBefore;\n+    }\n+\n+    @Nullable\n+    public final Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier() {\n+        return tokenSupplier;\n+    }\n+\n+    /**\n+     * A {@link Supplier} to load Access Token from, to be able to restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenSupplier(Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier) {\n+        this.tokenSupplier = requireNonNull(tokenSupplier, \"tokenSupplier\");\n+        return (T) this;\n+    }\n+\n+    @Nullable\n+    public final Consumer<? super GrantedOAuth2AccessToken> tokenConsumer() {\n+        return tokenConsumer;\n+    }\n+\n+    /**\n+     * A {@link Consumer} to store Access Token to, to be able restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenConsumer(Consumer<? super GrantedOAuth2AccessToken> tokenConsumer) {\n+        this.tokenConsumer = requireNonNull(tokenConsumer, \"tokenConsumer\");\n+        return (T) this;\n+    }\n+\n+    /**\n+     * An optional {@link Executor} that facilitates asynchronous access token obtain and refresh operations.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T withExecutor(Executor executor) {\n+        this.executor = requireNonNull(executor, \"executor\");\n+        return (T) this;\n+    }\n+\n+    public final Executor withExecutor() {\n+        return executor;\n+    }\n+\n+    protected abstract AbstractAccessTokenRequest buildObtainRequest(\n+            WebClient accessTokenEndpoint, String accessTokenEndpointPath,\n+            @Nullable ClientAuthorization clientAuthorization);\n+\n+    protected final AbstractAccessTokenRequest buildObtainRequest() {\n+        return buildObtainRequest(accessTokenEndpoint, accessTokenEndpointPath, clientAuthorization);\n+    }\n+\n+    protected final RefreshAccessTokenRequest buildRefreshRequest() {\n+        return new RefreshAccessTokenRequest(accessTokenEndpoint, accessTokenEndpointPath, clientAuthorization);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0MTA0NQ==", "bodyText": "Global comment: Please add final to all classes that can be final.", "url": "https://github.com/line/armeria/pull/2840#discussion_r469241045", "createdAt": "2020-08-12T13:00:56Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/ClientCredentialsTokenRequest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.SCOPE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.LinkedHashMap;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+\n+/**\n+ * Implements Client Credentials Grant request/response flow,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-4.4\">[RFC6749], Section 4.4</a>.\n+ */\n+class ClientCredentialsTokenRequest extends AbstractAccessTokenRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0MTE4MA==", "bodyText": "nit: indentation", "url": "https://github.com/line/armeria/pull/2840#discussion_r469241180", "createdAt": "2020-08-12T13:01:10Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/ClientCredentialsTokenRequest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.SCOPE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.LinkedHashMap;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+\n+/**\n+ * Implements Client Credentials Grant request/response flow,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-4.4\">[RFC6749], Section 4.4</a>.\n+ */\n+class ClientCredentialsTokenRequest extends AbstractAccessTokenRequest {\n+\n+    private static final String CLIENT_CREDENTIALS_GRANT_TYPE = \"client_credentials\";\n+\n+    /**\n+     * Implements Client Credentials Grant request/response flow,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-4.4\">[RFC6749], Section 4.4</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    ClientCredentialsTokenRequest(WebClient accessTokenEndpoint, String accessTokenEndpointPath,\n+                                         ClientAuthorization clientAuthorization) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NDM4NA==", "bodyText": "Do you have a better name than this? with*() usually returns a new object modified from the callee in our API, e.g. HttpData.withEndOfStream(), HttpRequest.withHeaders(). How about overloading getAccessToken()?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469244384", "createdAt": "2020-08-12T13:06:21Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+public interface OAuth2AuthorizationGrant {\n+\n+    /**\n+     * Produces OAuth 2.0 Access Token\n+     */\n+    CompletionStage<GrantedOAuth2AccessToken> getAccessToken();\n+\n+    /**\n+     * Produces (if necessary) OAuth 2.0 Access Token and adds it to the {@code req} in form of the\n+     * {@code Authorization} header.\n+     * @param req {@link HttpRequest} to wrap with OAuth 2.0 authorization.\n+     * @return {@link CompletionStage} that refers to {@link HttpRequest} wrapped wrap with\n+     *         OAuth 2.0 authorization information.\n+     */\n+    default CompletionStage<HttpRequest> withAuthorization(HttpRequest req) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NjAzMQ==", "bodyText": "Could use withAuthorization().", "url": "https://github.com/line/armeria/pull/2840#discussion_r469246031", "createdAt": "2020-08-12T13:08:56Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Decorates a {@link HttpClient} with an OAuth 2.0 Authorization Grant flow.\n+ */\n+public class OAuth2Client extends SimpleDecoratingHttpClient {\n+\n+    /**\n+     * Creates a new {@link HttpClient} decorator that handles OAuth 2.0 Authorization Grant flow.\n+     * @param authorizationGrant An {@link OAuth2AuthorizationGrant} implementing specific\n+     *                           OAuth 2.0 Authorization Grant flow.\n+     */\n+    public static Function<? super HttpClient, OAuth2Client> newDecorator(\n+            OAuth2AuthorizationGrant authorizationGrant) {\n+        return delegate -> new OAuth2Client(delegate, authorizationGrant);\n+    }\n+\n+    private final OAuth2AuthorizationGrant authorizationGrant;\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpClient} with\n+     * an OAuth 2.0 Authorization Grant flow.\n+     */\n+    OAuth2Client(HttpClient delegate, OAuth2AuthorizationGrant authorizationGrant) {\n+        super(delegate);\n+        this.authorizationGrant = requireNonNull(authorizationGrant, \"authorizationGrant\");\n+    }\n+\n+    @Override\n+    public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n+        return HttpResponse.from(authorizationGrant.getAccessToken().thenApply(accessToken -> {\n+            // Create a new request with an additional 'Authorization' header\n+            final HttpRequest newReq =\n+                req.withHeaders(req.headers().toBuilder()\n+                                   .set(HttpHeaderNames.AUTHORIZATION, accessToken.authorization())\n+                                   .build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0Njk3Mw==", "bodyText": "Global comment: All concrete builders should be final unless there's a good reason for not doing so.", "url": "https://github.com/line/armeria/pull/2840#discussion_r469246973", "createdAt": "2020-08-12T13:10:24Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ClientCredentialsGrantBuilder.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+\n+/**\n+ * Builds {@link OAuth2ClientCredentialsGrant}.\n+ */\n+public class OAuth2ClientCredentialsGrantBuilder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MjkwMg==", "bodyText": "Does it make sense to use auth.BasicToken instead of Map.Entry?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469252902", "createdAt": "2020-08-12T13:19:34Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ResourceOwnerPasswordCredentialsGrantBuilder.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+\n+/**\n+ * Builds {@link OAuth2ClientCredentialsGrant}.\n+ */\n+public class OAuth2ResourceOwnerPasswordCredentialsGrantBuilder\n+        extends AbstractOAuth2AuthorizationGrantBuilder<OAuth2ResourceOwnerPasswordCredentialsGrantBuilder> {\n+\n+    @Nullable\n+    private Supplier<? extends Map.Entry<String, String>> userCredentialsSupplier;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     */\n+    OAuth2ResourceOwnerPasswordCredentialsGrantBuilder(\n+            WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath);\n+    }\n+\n+    /**\n+     * A supplier of user credentials: \"username\" and \"password\" used to grant the Access Token. REQUIRED.\n+     */\n+    public OAuth2ResourceOwnerPasswordCredentialsGrantBuilder userCredentialsSupplier(\n+            Supplier<Entry<String, String>> userCredentialsSupplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MzI1OQ==", "bodyText": "Could use QueryParams?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469253259", "createdAt": "2020-08-12T13:20:07Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/RefreshAccessTokenRequest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.REFRESH_TOKEN;\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.SCOPE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.LinkedHashMap;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+\n+/**\n+ * Implements Access Token Refresh request\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+ */\n+class RefreshAccessTokenRequest extends AbstractAccessTokenRequest {\n+\n+    /**\n+     * Implements Client Credentials Grant request/response flow,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    RefreshAccessTokenRequest(WebClient accessTokenEndpoint, String accessTokenEndpointPath,\n+                              @Nullable ClientAuthorization clientAuthorization) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath, clientAuthorization);\n+    }\n+\n+    /**\n+     * Makes Access Token Refresh request using the given {@code refresh_token} and handles the response\n+     * converting the result data to {@link GrantedOAuth2AccessToken}.\n+     * @param refreshToken The Refresh Token issued to the client to re-new an Access Token.\n+     * @param scope OPTIONAL. Scope to request for the token. A list of space-delimited,\n+     *              case-sensitive strings. The strings are defined by the authorization server.\n+     *              The authorization server MAY fully or partially ignore the scope requested by the\n+     *              client, based on the authorization server policy or the resource owner's\n+     *              instructions. If the issued access token scope is different from the one requested\n+     *              by the client, the authorization server MUST include the \"scope\" response\n+     *              parameter to inform the client of the actual scope granted.\n+     *              If the client omits the scope parameter when requesting authorization, the\n+     *              authorization server MUST either process the request using a pre-defined default\n+     *              value or fail the request indicating an invalid scope.\n+     * @return A {@link CompletableFuture} carrying the target result as {@link GrantedOAuth2AccessToken}.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    public CompletableFuture<GrantedOAuth2AccessToken> make(String refreshToken, @Nullable String scope) {\n+\n+        requireNonNull(refreshToken, REFRESH_TOKEN);\n+        final LinkedHashMap<String, String> requestFormItems = new LinkedHashMap<>(3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MzcxNQ==", "bodyText": "Ditto - could use Supplier<BasicToken>?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469253715", "createdAt": "2020-08-12T13:20:48Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/ResourceOwnerPasswordCredentialsTokenRequest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.SCOPE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+\n+/**\n+ * Implements Resource Owner Password Credentials Grant request\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-4.3\">[RFC6749], Section 4.3</a>.\n+ */\n+class ResourceOwnerPasswordCredentialsTokenRequest extends AbstractAccessTokenRequest {\n+\n+    private static final String USERNAME = \"username\";\n+    private static final String PASSWORD = \"password\";\n+    private static final String PASSWORD_GRANT_TYPE = PASSWORD;\n+\n+    private final Supplier<? extends Map.Entry<String, String>> userCredentialsSupplier;\n+\n+    /**\n+     * Implements Resource Owner Password Credentials Grant request/response flow,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-4.3\">[RFC6749], Section 4.3</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     * @param userCredentialsSupplier A supplier of user credentials: \"username\" and \"password\" used to grant\n+     *                                the Access Token.\n+     */\n+    ResourceOwnerPasswordCredentialsTokenRequest(\n+            WebClient accessTokenEndpoint, String accessTokenEndpointPath,\n+            @Nullable ClientAuthorization clientAuthorization,\n+            Supplier<? extends Map.Entry<String, String>> userCredentialsSupplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1NTI4MA==", "bodyText": "Global comment: Could we use UnmodifiableFuture.completedFuture() wherever possible, so that a caller cannot complete or cancel the returned future arbitrarily?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469255280", "createdAt": "2020-08-12T13:23:03Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/TokenLifecycleManager.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.BiPredicate;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.SerialFuture;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Holds a token object and facilitates its lifecycle based on a number of procedures,\n+ * such as supply, update, load, store.\n+ * @param <T> the type of the token object\n+ */\n+class TokenLifecycleManager<T> {\n+\n+    /**\n+     * Holds a reference to the token.\n+     */\n+    private final AtomicReference<T> ref;\n+\n+    /**\n+     * Executes token operations serially on a separate thread.\n+     */\n+    private final SerialFuture serialFuture;\n+\n+    private final BiPredicate<? super T, Instant> validator;\n+\n+    private final Predicate<? super T> isUpdatable;\n+\n+    private final Predicate<Throwable> shallResupply;\n+\n+    private final Function<? super T, CompletionStage<? extends T>> serviceSupplier;\n+\n+    @Nullable\n+    private final Function<? super T, CompletionStage<? extends T>> serviceUpdater;\n+\n+    @Nullable\n+    private final Supplier<? extends T> storageSupplier;\n+\n+    @Nullable\n+    private final Consumer<? super T> storageConsumer;\n+\n+    /**\n+     * Constructs new {@link TokenLifecycleManager}.\n+     * @param validator A {@link BiPredicate} that tests the token for validity at the {@link Instant} time.\n+     * @param isUpdatable A {@link Predicate} that tests whether the token object can be updated or re-supplied.\n+     * @param shallResupply A {@link Predicate} that tests whether given {@link Throwable} indicates that\n+     *                      the token shall be re-supplied after the update operation failure.\n+     * @param serviceSupplier A {@link Function} that supplies an initial token object.\n+     * @param serviceUpdater A {@link Function} that updates token object.\n+     * @param storageSupplier A {@link Supplier} that can optionally load previously stored token object.\n+     * @param storageConsumer A {@link Consumer} that can optionally store token object.\n+     * @param executor An optional {@link Executor} that facilitates asynchronous supply and update operations.\n+     *                 A new single thread {@link Executor} will be created using\n+     *                 {@link Executors#newSingleThreadExecutor()} if the {@code null}.\n+     */\n+    TokenLifecycleManager(BiPredicate<? super T, Instant> validator,\n+                          Predicate<? super T> isUpdatable, Predicate<Throwable> shallResupply,\n+                          Function<? super T, CompletionStage<? extends T>> serviceSupplier,\n+                          @Nullable Function<? super T, CompletionStage<? extends T>> serviceUpdater,\n+                          @Nullable Supplier<? extends T> storageSupplier,\n+                          @Nullable Consumer<? super T> storageConsumer,\n+                          @Nullable Executor executor) {\n+        ref = new AtomicReference<>();\n+        serialFuture = new SerialFuture(executor);\n+        this.validator = requireNonNull(validator, \"validator\");\n+        this.isUpdatable = requireNonNull(isUpdatable, \"isUpdatable\");\n+        this.shallResupply = requireNonNull(shallResupply, \"shallResupply\");\n+        this.serviceSupplier = requireNonNull(serviceSupplier, \"serviceSupplier\");\n+        this.serviceUpdater = serviceUpdater;\n+        this.storageSupplier = storageSupplier;\n+        this.storageConsumer = storageConsumer;\n+    }\n+\n+    /**\n+     * Provides managed token object asynchronously. This operation may involve initial token supply or\n+     * token update operation, if required.\n+     */\n+    public CompletionStage<T> get() {\n+        final T t = ref.get();\n+        if (t != null) {\n+            // token already present\n+            return validateOrUpdate(t);\n+        }\n+\n+        // token is not yet present\n+        // try to supply an initial token serially using a serial execution\n+        return serialFuture.executeAsync(this::supplySerially);\n+    }\n+\n+    private CompletionStage<T> supplySerially() {\n+        // re-check if the token already present\n+        T t = ref.get();\n+        if (t != null) {\n+            // token already present\n+            return validateOrUpdate(t, false);\n+        }\n+\n+        // token not yet loaded\n+        // try loading from storage\n+        t = load();\n+        if (t != null) {\n+            // token loaded\n+            return validateOrUpdate(t, true);\n+        }\n+\n+        // token has never been supplied\n+        // otherwise, supply initial value\n+        return supplyInitial();\n+    }\n+\n+    /**\n+     * Updates the token object if it's invalid at the given {@link Instant} time.\n+     */\n+    private CompletionStage<T> updateSerially(Instant instant) {\n+        // after acquiring the lock, re-check if it's a valid token\n+        final T t = ref.get();\n+        if (validator.test(t, instant)) {\n+            // simply return a valid token\n+            return CompletableFuture.completedFuture(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1NzA4OA==", "bodyText": "How about adding a hyperlink to a good resource about OAuth 2.0 for the text OAuth 2.0?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469257088", "createdAt": "2020-08-12T13:25:37Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/package-info.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Client-side OAuth 2.0 implementation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1OTg5Mw==", "bodyText": "I see both *Request and *Grant require WebClient as an endpoint. How about letting a user specify a WebClient when creating an OAuth2Client or OAuth2*Authorizer and changing *Request and *Grant to require a WebClient when sending a request? This way, we can keep only one WebClient in OAuth2Client or OAuth2*Authorizer.\nOr, is there a use case for specifying different WebClient for each request?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469259893", "createdAt": "2020-08-12T13:29:43Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2NDk1OA==", "bodyText": "Should these be public? If we want to hide these fields, we could add private or remove public. If it's accessed by the classes in other package, we could extract these constants into a class like OAuth2Constants in internal.common.auth.oauth2 package to hide them from the public API.", "url": "https://github.com/line/armeria/pull/2840#discussion_r469264958", "createdAt": "2020-08-12T13:37:26Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+public class GrantedOAuth2AccessToken implements Serializable {\n+\n+    private static final long serialVersionUID = 8698118404098897958L;\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessToken} based on the {@code JSON}-formatted raw response body and\n+     * optional raw formatted {@code scope} used to request the token.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @param requestScope OPTIONAL. A list of space-delimited, case-sensitive strings.\n+     *                     The strings are defined by the authorization server.\n+     *                     The authorization server MAY fully or partially ignore the scope requested by the\n+     *                     client, based on the authorization server policy or the resource owner's\n+     *                     instructions. If the issued access token scope is different from the one requested\n+     *                     by the client, the authorization server MUST include the \"scope\" response\n+     *                     parameter to inform the client of the actual scope granted.\n+     *                     If the client omits the scope parameter when requesting authorization, the\n+     *                     authorization server MUST either process the request using a pre-defined default\n+     *                     value or fail the request indicating an invalid scope.\n+     * @return A new instance of {@link GrantedOAuth2AccessToken}.\n+     */\n+    public static GrantedOAuth2AccessToken of(String rawResponse, @Nullable String requestScope) {\n+        return GrantedOAuth2AccessTokenBuilder.of(rawResponse, requestScope);\n+    }\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessTokenBuilder} to build a new {@link GrantedOAuth2AccessToken} and\n+     * supplied it with a value of {@code access_token} Access Token response field.\n+     * @return A new instance of {@link GrantedOAuth2AccessTokenBuilder}.\n+     */\n+    public static GrantedOAuth2AccessTokenBuilder builder(String accessToken) {\n+        return new GrantedOAuth2AccessTokenBuilder(accessToken);\n+    }\n+\n+    public static final String ACCESS_TOKEN = \"access_token\";\n+    public static final String REFRESH_TOKEN = \"refresh_token\";\n+    public static final String SCOPE = \"scope\";\n+    public static final String TOKEN_TYPE = \"token_type\";\n+    public static final String EXPIRES_IN = \"expires_in\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2NTU0OQ==", "bodyText": "Global comment: Could use {@value ...} expression, e.g. {@value #ACCESS_TOKEN}.", "url": "https://github.com/line/armeria/pull/2840#discussion_r469265549", "createdAt": "2020-08-12T13:38:15Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+public class GrantedOAuth2AccessToken implements Serializable {\n+\n+    private static final long serialVersionUID = 8698118404098897958L;\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessToken} based on the {@code JSON}-formatted raw response body and\n+     * optional raw formatted {@code scope} used to request the token.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @param requestScope OPTIONAL. A list of space-delimited, case-sensitive strings.\n+     *                     The strings are defined by the authorization server.\n+     *                     The authorization server MAY fully or partially ignore the scope requested by the\n+     *                     client, based on the authorization server policy or the resource owner's\n+     *                     instructions. If the issued access token scope is different from the one requested\n+     *                     by the client, the authorization server MUST include the \"scope\" response\n+     *                     parameter to inform the client of the actual scope granted.\n+     *                     If the client omits the scope parameter when requesting authorization, the\n+     *                     authorization server MUST either process the request using a pre-defined default\n+     *                     value or fail the request indicating an invalid scope.\n+     * @return A new instance of {@link GrantedOAuth2AccessToken}.\n+     */\n+    public static GrantedOAuth2AccessToken of(String rawResponse, @Nullable String requestScope) {\n+        return GrantedOAuth2AccessTokenBuilder.of(rawResponse, requestScope);\n+    }\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessTokenBuilder} to build a new {@link GrantedOAuth2AccessToken} and\n+     * supplied it with a value of {@code access_token} Access Token response field.\n+     * @return A new instance of {@link GrantedOAuth2AccessTokenBuilder}.\n+     */\n+    public static GrantedOAuth2AccessTokenBuilder builder(String accessToken) {\n+        return new GrantedOAuth2AccessTokenBuilder(accessToken);\n+    }\n+\n+    public static final String ACCESS_TOKEN = \"access_token\";\n+    public static final String REFRESH_TOKEN = \"refresh_token\";\n+    public static final String SCOPE = \"scope\";\n+    public static final String TOKEN_TYPE = \"token_type\";\n+    public static final String EXPIRES_IN = \"expires_in\";\n+\n+    static final String ISSUED_AT = \"issued_at\";\n+\n+    static final String SCOPE_SEPARATOR = \" \";\n+    static final char AUTHORIZATION_SEPARATOR = ' ';\n+\n+    static final String DEFAULT_TOKEN_TYPE = \"bearer\";\n+\n+    static final ObjectMapper JSON = new ObjectMapper();\n+\n+    /**\n+     * {@code access_token} Access Token response field,\n+     * REQUIRED. The access token issued by the authorization server.\n+     */\n+    private final String accessToken;\n+\n+    /**\n+     * {@code token_type} Access Token response field,\n+     * REQUIRED. The type of the token issued as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>, e.g. \"bearer\".\n+     * Value is case insensitive.\n+     */\n+    @Nullable\n+    private final String tokenType;\n+\n+    /**\n+     * {@code expires_in} Access Token response field,\n+     * RECOMMENDED. The lifetime in seconds of the access token. For example, the value \"3600\" denotes\n+     * that the access token will expire in one hour from the time the response was generated. If\n+     * omitted, the authorization server SHOULD provide the expiration time via other means or\n+     * document the default value.\n+     */\n+    @Nullable\n+    private final Duration expiresIn;\n+\n+    /**\n+     * {@code refresh_token} Access Token response field,\n+     * OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same\n+     * authorization grant as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     */\n+    @Nullable\n+    private final String refreshToken;\n+\n+    /**\n+     * {@code scope} Access Token response field,\n+     * OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of\n+     * the access token as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     * A list of space-delimited, case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     * The authorization server MAY fully or partially ignore the scope requested by the client, based\n+     * on the authorization server policy or the resource owner's instructions.  If the issued access\n+     * token scope is different from the one requested by the client, the authorization server MUST\n+     * include the \"scope\" response parameter to inform the client of the actual scope granted.\n+     * If the client omits the scope parameter when requesting authorization, the authorization server\n+     * MUST either process the request using a pre-defined default value or fail the request\n+     * indicating an invalid scope.\n+     */\n+    @Nullable\n+    private final String scope;\n+\n+    /**\n+     * A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    private final Set<String> scopeSet;\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Access Token response,\n+     * OPTIONAL.\n+     */\n+    private final Map<String, String> extras;\n+\n+    private final Instant issuedAt;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    @Nullable\n+    private transient Instant expiresAt;\n+\n+    @Nullable\n+    private transient String authorization;\n+\n+    @Nullable\n+    private transient String toString;\n+\n+    GrantedOAuth2AccessToken(String accessToken, @Nullable String tokenType,\n+                             Instant issuedAt, @Nullable Duration expiresIn,\n+                             @Nullable String refreshToken, @Nullable List<String> scopeList,\n+                             @Nullable ImmutableMap<String, String> extras,\n+                             @Nullable String rawResponse) {\n+        // token fields\n+        this.accessToken = requireNonNull(accessToken, ACCESS_TOKEN);\n+        this.tokenType = tokenType;\n+        this.expiresIn = expiresIn;\n+        this.issuedAt = requireNonNull(issuedAt, ISSUED_AT);\n+        this.refreshToken = refreshToken;\n+        scope = toScopeString(scopeList);\n+        scopeSet = (scopeList == null) ? ImmutableSet.of() : ImmutableSet.copyOf(scopeList);\n+        this.extras = (extras == null) ? ImmutableMap.of() : extras;\n+        // raw response\n+        this.rawResponse = rawResponse;\n+    }\n+\n+    /**\n+     * {@code access_token} Access Token response field,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2NzQxMw==", "bodyText": "Could share one ObjectMapper instance across all classes unless some needs to be configured differently?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469267413", "createdAt": "2020-08-12T13:40:47Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptor.java", "diffHunk": "@@ -0,0 +1,511 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+/**\n+ * Defines a structure of the Token Introspection Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc7662#section-2.2\">[RFC7662], Section 2.2</a>.\n+ */\n+public class OAuth2TokenDescriptor implements Serializable {\n+\n+    private static final long serialVersionUID = -3976877781134216467L;\n+\n+    /**\n+     * Creates a new {@link OAuth2TokenDescriptor} based on the {@code JSON}-formatted raw response body.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @return A new instance of {@link OAuth2TokenDescriptor}.\n+     */\n+    public static OAuth2TokenDescriptor of(String rawResponse) {\n+        return OAuth2TokenDescriptorBuilder.of(rawResponse);\n+    }\n+\n+    /**\n+     * Creates a new {@link OAuth2TokenDescriptorBuilder} to build a new {@link OAuth2TokenDescriptor} and\n+     * supplied it with a value of {@code active} Token Introspection Response field.\n+     * @return A new instance of {@link OAuth2TokenDescriptorBuilder}.\n+     */\n+    public static OAuth2TokenDescriptorBuilder builder(boolean active) {\n+        return new OAuth2TokenDescriptorBuilder(active);\n+    }\n+\n+    static final String ACTIVE = \"active\";\n+    static final String SCOPE = \"scope\";\n+    static final String CLIENT_ID = \"client_id\";\n+    static final String USER_NAME = \"username\";\n+    static final String TOKEN_TYPE = \"token_type\";\n+    static final String EXPIRES_AT = \"exp\";\n+    static final String ISSUED_AT = \"iat\";\n+    static final String NOT_BEFORE = \"nbf\";\n+    static final String SUBJECT = \"sub\";\n+    static final String AUDIENCE = \"aud\";\n+    static final String ISSUER = \"iss\";\n+    static final String JWT_ID = \"jti\";\n+\n+    static final String SCOPE_SEPARATOR = \" \";\n+\n+    static final ObjectMapper JSON = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2NzcxOQ==", "bodyText": "Could use {@value ...}", "url": "https://github.com/line/armeria/pull/2840#discussion_r469267719", "createdAt": "2020-08-12T13:41:14Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptor.java", "diffHunk": "@@ -0,0 +1,511 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+/**\n+ * Defines a structure of the Token Introspection Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc7662#section-2.2\">[RFC7662], Section 2.2</a>.\n+ */\n+public class OAuth2TokenDescriptor implements Serializable {\n+\n+    private static final long serialVersionUID = -3976877781134216467L;\n+\n+    /**\n+     * Creates a new {@link OAuth2TokenDescriptor} based on the {@code JSON}-formatted raw response body.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @return A new instance of {@link OAuth2TokenDescriptor}.\n+     */\n+    public static OAuth2TokenDescriptor of(String rawResponse) {\n+        return OAuth2TokenDescriptorBuilder.of(rawResponse);\n+    }\n+\n+    /**\n+     * Creates a new {@link OAuth2TokenDescriptorBuilder} to build a new {@link OAuth2TokenDescriptor} and\n+     * supplied it with a value of {@code active} Token Introspection Response field.\n+     * @return A new instance of {@link OAuth2TokenDescriptorBuilder}.\n+     */\n+    public static OAuth2TokenDescriptorBuilder builder(boolean active) {\n+        return new OAuth2TokenDescriptorBuilder(active);\n+    }\n+\n+    static final String ACTIVE = \"active\";\n+    static final String SCOPE = \"scope\";\n+    static final String CLIENT_ID = \"client_id\";\n+    static final String USER_NAME = \"username\";\n+    static final String TOKEN_TYPE = \"token_type\";\n+    static final String EXPIRES_AT = \"exp\";\n+    static final String ISSUED_AT = \"iat\";\n+    static final String NOT_BEFORE = \"nbf\";\n+    static final String SUBJECT = \"sub\";\n+    static final String AUDIENCE = \"aud\";\n+    static final String ISSUER = \"iss\";\n+    static final String JWT_ID = \"jti\";\n+\n+    static final String SCOPE_SEPARATOR = \" \";\n+\n+    static final ObjectMapper JSON = new ObjectMapper();\n+\n+    /**\n+     * {@code active} Token Introspection Response field,\n+     * REQUIRED. Boolean indicator of whether or not the presented token is currently active. The\n+     * specifics of a token's \"active\" state will vary depending on the implementation of the\n+     * authorization server and the information it keeps about its tokens, but a \"true\" value return\n+     * for the \"active\" property will generally indicate that a given token has been issued by this\n+     * authorization server, has not been revoked by the resource owner, and is within its given time\n+     * window of validity (e.g., after its issuance time and before its expiration time).\n+     */\n+    private final boolean active;\n+\n+    /**\n+     * {@code scope} Token Introspection Response field,\n+     * OPTIONAL. A JSON string containing a space-separated list of scopes associated with this token,\n+     * in the format described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     */\n+    @Nullable\n+    private final String scope;\n+\n+    /**\n+     * A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    private final Set<String> scopeSet;\n+\n+    /**\n+     * {@code client_id} Token Introspection Response field,\n+     * OPTIONAL. Client identifier for the OAuth 2.0 client that requested this token.\n+     */\n+    @Nullable\n+    private final String clientId;\n+\n+    /**\n+     * {@code username} Token Introspection Response field,\n+     * OPTIONAL. Human-readable identifier for the resource owner who authorized this token.\n+     */\n+    @Nullable\n+    private final String userName;\n+\n+    /**\n+     * {@code token_type} Token Introspection Response field,\n+     * OPTIONAL. Type of the token as defined at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     */\n+    @Nullable\n+    private final String tokenType;\n+\n+    /**\n+     * {@code exp} Token Introspection Response field,\n+     * OPTIONAL. Integer timestamp, measured in the number of seconds since January 1 1970 UTC,\n+     * indicating when this token will expire, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final Instant expiresAt;\n+\n+    /**\n+     * {@code iat} Token Introspection Response field,\n+     * OPTIONAL. Integer timestamp, measured in the number of seconds since January 1 1970 UTC,\n+     * indicating when this token was originally issued, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final Instant issuedAt;\n+\n+    /**\n+     * {@code nbf} Token Introspection Response field,\n+     * OPTIONAL. Integer timestamp, measured in the number of seconds since January 1 1970 UTC,\n+     * indicating when this token is not to be used before, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final Instant notBefore;\n+\n+    /**\n+     * {@code sub} Token Introspection Response field,\n+     * OPTIONAL. Subject of the token. Usually a machine-readable\n+     * identifier of the resource owner who authorized this token. As defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String subject;\n+\n+    /**\n+     * {@code aud} Token Introspection Response field,\n+     * OPTIONAL. Service-specific string identifier or list of string identifiers representing the\n+     * intended audience for this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String audience;\n+\n+    /**\n+     * {@code iss} Token Introspection Response field,\n+     * OPTIONAL. String representing the issuer of this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String issuer;\n+\n+    /**\n+     * {@code jti} Token Introspection Response field,\n+     * OPTIONAL. String identifier for the token - JWT ID, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String jwtId;\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Token Introspection Response,\n+     * OPTIONAL.\n+     */\n+    private final Map<String, String> extras;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    @Nullable\n+    private transient String toString;\n+\n+    OAuth2TokenDescriptor(boolean active, @Nullable List<String> scopeList, @Nullable String clientId,\n+                          @Nullable String userName, @Nullable String tokenType,\n+                          @Nullable Instant expiresAt, @Nullable Instant issuedAt,\n+                          @Nullable Instant notBefore, @Nullable String subject,\n+                          @Nullable String audience, @Nullable String issuer,\n+                          @Nullable String jwtId, @Nullable ImmutableMap<String, String> extras,\n+                          @Nullable String rawResponse) {\n+        this.active = active;\n+        scope = toScopeString(scopeList);\n+        scopeSet = (scopeList == null) ? ImmutableSet.of() : ImmutableSet.copyOf(scopeList);\n+        this.clientId = clientId;\n+        this.userName = userName;\n+        this.tokenType = tokenType;\n+        this.expiresAt = expiresAt;\n+        this.issuedAt = issuedAt;\n+        this.notBefore = notBefore;\n+        this.subject = subject;\n+        this.audience = audience;\n+        this.issuer = issuer;\n+        this.jwtId = jwtId;\n+        this.extras = (extras == null) ? ImmutableMap.of() : extras;\n+        // raw response\n+        this.rawResponse = rawResponse;\n+    }\n+\n+    /**\n+     * {@code active} Token Introspection Response field,\n+     * REQUIRED. Boolean indicator of whether or not the presented token is currently active. The\n+     * specifics of a token's \"active\" state will vary depending on the implementation of the\n+     * authorization server and the information it keeps about its tokens, but a \"true\" value return\n+     * for the \"active\" property will generally indicate that a given token has been issued by this\n+     * authorization server, has not been revoked by the resource owner, and is within its given time\n+     * window of validity (e.g., after its issuance time and before its expiration time).\n+     */\n+    public boolean isActive() {\n+        return active;\n+    }\n+\n+    /**\n+     * Indicates whether or not the Token expire at the given {@link Instant} time based on\n+     * {@link #expiresAt()} function.\n+     */\n+    public boolean isValid(Instant instant) {\n+        final Instant expires = expiresAt();\n+        return (expires == null) || requireNonNull(instant, \"instant\").isBefore(expires);\n+    }\n+\n+    /**\n+     * Indicates whether or not the Token already expired based on {@link #expiresAt()} function.\n+     */\n+    public boolean isValid() {\n+        return isValid(Instant.now());\n+    }\n+\n+    /**\n+     * Indicates whether or not the Token used prematurely based on {@link #notBefore()} function.\n+     */\n+    public boolean isNotBefore() {\n+        final Instant notBefore = notBefore();\n+        return (notBefore == null) || Instant.now().isAfter(notBefore);\n+    }\n+\n+    /**\n+     * {@code scope} Token Introspection Response field,\n+     * OPTIONAL. A JSON string containing a space-separated list of scopes associated with this token,\n+     * in the format described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     */\n+    @Nullable\n+    public String scope() {\n+        return scope;\n+    }\n+\n+    /**\n+     * {@code scope} Token Introspection Response field,\n+     * OPTIONAL. A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    public Set<String> scopeSet() {\n+        return scopeSet;\n+    }\n+\n+    /**\n+     * {@code client_id} Token Introspection Response field,\n+     * OPTIONAL. Client identifier for the OAuth 2.0 client that requested this token.\n+     */\n+    @Nullable\n+    public String clientId() {\n+        return clientId;\n+    }\n+\n+    /**\n+     * {@code username} Token Introspection Response field,\n+     * OPTIONAL. Human-readable identifier for the resource owner who authorized this token.\n+     */\n+    @Nullable\n+    public String userName() {\n+        return userName;\n+    }\n+\n+    /**\n+     * {@code token_type} Token Introspection Response field,\n+     * OPTIONAL. Type of the token as defined at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     */\n+    @Nullable\n+    public String tokenType() {\n+        return tokenType;\n+    }\n+\n+    /**\n+     * {@code exp} Token Introspection Response field,\n+     * OPTIONAL. {@link Instant} timestamp, indicating when this token will expire, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public Instant expiresAt() {\n+        return expiresAt;\n+    }\n+\n+    /**\n+     * {@code iat} Token Introspection Response field,\n+     * OPTIONAL. {@link Instant} timestamp, indicating when this token was originally issued, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public Instant issuedAt() {\n+        return issuedAt;\n+    }\n+\n+    /**\n+     * {@link Duration} indicating the lifetime of the access token. The value is NOT supplied with the\n+     * Token Introspection response and calculated based on {@code iat} and {@code exp} response fields every\n+     * time this method invoked.\n+     */\n+    @Nullable\n+    public Duration expiresIn() {\n+        if (issuedAt != null && expiresAt != null) {\n+            return Duration.ofMillis(issuedAt.until(expiresAt, ChronoUnit.MILLIS));\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * {@code nbf} Token Introspection Response field,\n+     * OPTIONAL. {@link Instant} timestamp, indicating when this token is not to be used before, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public Instant notBefore() {\n+        return notBefore;\n+    }\n+\n+    /**\n+     * {@code sub} Token Introspection Response field,\n+     * OPTIONAL. Subject of the token. Usually a machine-readable\n+     * identifier of the resource owner who authorized this token. As defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public String subject() {\n+        return subject;\n+    }\n+\n+    /**\n+     * {@code aud} Token Introspection Response field,\n+     * OPTIONAL. Service-specific string identifier or list of string identifiers representing the\n+     * intended audience for this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public String audience() {\n+        return audience;\n+    }\n+\n+    /**\n+     * {@code iss} Token Introspection Response field,\n+     * OPTIONAL. String representing the issuer of this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public String issuer() {\n+        return issuer;\n+    }\n+\n+    /**\n+     * {@code jti} Token Introspection Response field,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 388}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2ODQ4MA==", "bodyText": "Should this method be moved to OAuth2TokenDescriptor and renamed to builder(String)?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469268480", "createdAt": "2020-08-12T13:42:20Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptorBuilder.java", "diffHunk": "@@ -0,0 +1,331 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.ACTIVE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.AUDIENCE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.CLIENT_ID;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.EXPIRES_AT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.ISSUED_AT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.ISSUER;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.JSON;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.JWT_ID;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.NOT_BEFORE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SCOPE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SCOPE_SEPARATOR;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SUBJECT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.TOKEN_TYPE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.USER_NAME;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Instant;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Builds an instance of {@link OAuth2TokenDescriptor}.\n+ */\n+public class OAuth2TokenDescriptorBuilder {\n+\n+    private static final TypeReference<LinkedHashMap<String, String>> MAP_TYPE =\n+            new TypeReference<LinkedHashMap<String, String>>() {};\n+\n+    static OAuth2TokenDescriptor of(String rawResponse) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2OTE4OA==", "bodyText": "Could we remove public or move to internal.common.auth.oauth2?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469269188", "createdAt": "2020-08-12T13:43:23Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+public class SerialFuture {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2OTQwNg==", "bodyText": "this(null)", "url": "https://github.com/line/armeria/pull/2840#discussion_r469269406", "createdAt": "2020-08-12T13:43:40Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+public class SerialFuture {\n+\n+    private final Queue<Runnable> actions = new LinkedList<>();\n+\n+    @Nullable\n+    private Runnable active;\n+\n+    @Nullable\n+    Executor executor;\n+\n+    /**\n+     * Constructs {@link SerialFuture} with a supplied {@link Executor}.\n+     * @param executor An {@link Executor} to execute asynchronous actions.\n+     */\n+    public SerialFuture(@Nullable Executor executor) {\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Constructs {@link SerialFuture}.\n+     */\n+    public SerialFuture() {\n+        executor = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3MDIzMg==", "bodyText": "Please use handle with a null-returning BiFunction, because whenComplete() has a known performance issue in Java 8.", "url": "https://github.com/line/armeria/pull/2840#discussion_r469270232", "createdAt": "2020-08-12T13:44:51Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+public class SerialFuture {\n+\n+    private final Queue<Runnable> actions = new LinkedList<>();\n+\n+    @Nullable\n+    private Runnable active;\n+\n+    @Nullable\n+    Executor executor;\n+\n+    /**\n+     * Constructs {@link SerialFuture} with a supplied {@link Executor}.\n+     * @param executor An {@link Executor} to execute asynchronous actions.\n+     */\n+    public SerialFuture(@Nullable Executor executor) {\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Constructs {@link SerialFuture}.\n+     */\n+    public SerialFuture() {\n+        executor = null;\n+    }\n+\n+    /**\n+     * Executes submitted {@link Callable} action asynchronously in sequence.\n+     * @param action An asynchronous {@link Callable} action to be executed in sequence.\n+     *               It returns {@link CompletionStage} that produces the final result when the action\n+     *               completes.\n+     * @return Returns a new {@link CompletionStage} with the same result or exception as the {@code action},\n+     *         that executes the given action when this stage completes.\n+     */\n+    public synchronized <V> CompletionStage<V> executeAsync(Callable<CompletionStage<V>> action) {\n+        final CompletableFuture<V> result = new CompletableFuture<>();\n+        actions.add(() -> {\n+            final CompletionStage<V> future;\n+            try {\n+                future = action.call();\n+            } catch (Exception e) {\n+                result.completeExceptionally(Exceptions.peel(e));\n+                executeNext();\n+                return;\n+            }\n+            future.whenComplete((v, ex) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3MDc1Mw==", "bodyText": "Could catch Throwable and call executeNext() in finally.", "url": "https://github.com/line/armeria/pull/2840#discussion_r469270753", "createdAt": "2020-08-12T13:45:35Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+public class SerialFuture {\n+\n+    private final Queue<Runnable> actions = new LinkedList<>();\n+\n+    @Nullable\n+    private Runnable active;\n+\n+    @Nullable\n+    Executor executor;\n+\n+    /**\n+     * Constructs {@link SerialFuture} with a supplied {@link Executor}.\n+     * @param executor An {@link Executor} to execute asynchronous actions.\n+     */\n+    public SerialFuture(@Nullable Executor executor) {\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Constructs {@link SerialFuture}.\n+     */\n+    public SerialFuture() {\n+        executor = null;\n+    }\n+\n+    /**\n+     * Executes submitted {@link Callable} action asynchronously in sequence.\n+     * @param action An asynchronous {@link Callable} action to be executed in sequence.\n+     *               It returns {@link CompletionStage} that produces the final result when the action\n+     *               completes.\n+     * @return Returns a new {@link CompletionStage} with the same result or exception as the {@code action},\n+     *         that executes the given action when this stage completes.\n+     */\n+    public synchronized <V> CompletionStage<V> executeAsync(Callable<CompletionStage<V>> action) {\n+        final CompletableFuture<V> result = new CompletableFuture<>();\n+        actions.add(() -> {\n+            final CompletionStage<V> future;\n+            try {\n+                future = action.call();\n+            } catch (Exception e) {\n+                result.completeExceptionally(Exceptions.peel(e));\n+                executeNext();\n+                return;\n+            }\n+            future.whenComplete((v, ex) -> {\n+                if (ex == null) {\n+                    result.complete(v);\n+                } else {\n+                    result.completeExceptionally(ex);\n+                }\n+                executeNext();\n+            });\n+        });\n+\n+        if (active == null) {\n+            executeNext();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Calls submitted {@link Callable} action asynchronously in sequence.\n+     * @param action A {@link Callable} action to be called asynchronously in sequence.\n+     *               It returns that produces the final result of computation.\n+     * @return Returns a new {@link CompletionStage} with the same result or exception as the {@code action},\n+     *         that executes the given action when this stage completes.\n+     */\n+    public synchronized <V> CompletionStage<V> callAsync(Callable<V> action) {\n+        final CompletableFuture<V> result = new CompletableFuture<>();\n+        actions.add(() -> {\n+            try {\n+                result.complete(action.call());\n+                executeNext();\n+            } catch (Exception e) {\n+                result.completeExceptionally(Exceptions.peel(e));\n+                executeNext();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3MTIxMA==", "bodyText": "Catch Throwable, since nobody will probably catch when Error is thrown here?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469271210", "createdAt": "2020-08-12T13:46:18Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+public class SerialFuture {\n+\n+    private final Queue<Runnable> actions = new LinkedList<>();\n+\n+    @Nullable\n+    private Runnable active;\n+\n+    @Nullable\n+    Executor executor;\n+\n+    /**\n+     * Constructs {@link SerialFuture} with a supplied {@link Executor}.\n+     * @param executor An {@link Executor} to execute asynchronous actions.\n+     */\n+    public SerialFuture(@Nullable Executor executor) {\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Constructs {@link SerialFuture}.\n+     */\n+    public SerialFuture() {\n+        executor = null;\n+    }\n+\n+    /**\n+     * Executes submitted {@link Callable} action asynchronously in sequence.\n+     * @param action An asynchronous {@link Callable} action to be executed in sequence.\n+     *               It returns {@link CompletionStage} that produces the final result when the action\n+     *               completes.\n+     * @return Returns a new {@link CompletionStage} with the same result or exception as the {@code action},\n+     *         that executes the given action when this stage completes.\n+     */\n+    public synchronized <V> CompletionStage<V> executeAsync(Callable<CompletionStage<V>> action) {\n+        final CompletableFuture<V> result = new CompletableFuture<>();\n+        actions.add(() -> {\n+            final CompletionStage<V> future;\n+            try {\n+                future = action.call();\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3MjE3MA==", "bodyText": "How about accepting URI when constructing this exception and returning a URI?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469272170", "createdAt": "2020-08-12T13:47:41Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRequestException.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A common token request exception type.\n+ */\n+public class TokenRequestException extends RuntimeException {\n+\n+  private static final long serialVersionUID = 3324433572773111913L;\n+\n+  private static final TokenRequestExceptionBuilder BUILDER = new TokenRequestExceptionBuilder();\n+\n+  /**\n+   * Returns a {@link TokenRequestExceptionBuilder} to build error-specific types\n+   * of {@link TokenRequestException}.\n+   */\n+  public static TokenRequestExceptionBuilder builder() {\n+    return BUILDER;\n+  }\n+\n+  @Nullable\n+  private final String errorUri;\n+\n+  /**\n+   * Constructs a new {@link TokenRequestException} using {@code errorDescription} and {@code errorUri}.\n+   * @param errorDescription OPTIONAL. Human-readable ASCII [USASCII] text providing additional information,\n+   *                         used to assist the client developer in understanding the error that occurred.\n+   *                         Values for the {@code errorDescription} parameter MUST NOT include\n+   *                         characters outside the set {@code %x20-21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   * @param errorUri OPTIONAL. A URI identifying a human-readable web page with information about the error,\n+   *                 used to provide the client developer with additional information about the error.\n+   *                 Values for the {@code errorUri} parameter MUST conform to the URI-reference syntax and\n+   *                 thus MUST NOT include characters outside\n+   *                 the set {@code %x21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   */\n+  public TokenRequestException(String errorDescription, @Nullable String errorUri) {\n+    super(errorDescription);\n+    this.errorUri = errorUri;\n+  }\n+\n+  /**\n+   * Constructs a new {@link TokenRequestException} using {@code errorDescription} and {@code errorUri}.\n+   * @param errorDescription OPTIONAL. Human-readable ASCII [USASCII] text providing additional information,\n+   *                         used to assist the client developer in understanding the error that occurred.\n+   *                         Values for the {@code errorDescription} parameter MUST NOT include\n+   *                         characters outside the set {@code %x20-21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   * @param errorUri OPTIONAL. A URI identifying a human-readable web page with information about the error,\n+   *                 used to provide the client developer with additional information about the error.\n+   *                 Values for the {@code errorUri} parameter MUST conform to the URI-reference syntax and\n+   *                 thus MUST NOT include characters outside\n+   *                 the set {@code %x21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   * @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method).\n+   *              (A {@code null} value is permitted, and indicates that the cause is nonexistent or unknown.)\n+   */\n+  public TokenRequestException(String errorDescription, @Nullable String errorUri, Throwable cause) {\n+    super(errorDescription, cause);\n+    this.errorUri = errorUri;\n+  }\n+\n+  /**\n+   * A URI identifying a human-readable web page with information about the error, used to provide the client\n+   * developer with additional information about the error.\n+   * Values for the {@code errorUri} parameter MUST conform to the URI-reference syntax and thus MUST NOT\n+   * include characters outside the set {@code %x21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   */\n+  @Nullable\n+  public String getErrorUri() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3MjkzMg==", "bodyText": "Could be made static and moved to TokenRequestException?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469272932", "createdAt": "2020-08-12T13:48:47Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRequestExceptionBuilder.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.LinkedHashMap;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * A builder of a {@link TokenRequestException}.\n+ */\n+public class TokenRequestExceptionBuilder {\n+\n+    private static final String ERROR = \"error\";\n+    private static final String ERROR_DESCRIPTION = \"error_description\";\n+    private static final String ERROR_URI = \"error_uri\";\n+\n+    // RFC6749 (The OAuth 2.0 Authorization Framework) - https://tools.ietf.org/html/rfc6749#section-5.2\n+    private static final String INVALID_REQUEST = \"invalid_request\";\n+    private static final String INVALID_CLIENT = \"invalid_client\";\n+    private static final String INVALID_GRANT = \"invalid_grant\";\n+    private static final String UNAUTHORIZED_CLIENT = \"unauthorized_client\";\n+    private static final String UNSUPPORTED_GRANT_TYPE = \"unsupported_grant_type\";\n+    private static final String INVALID_SCOPE = \"invalid_scope\";\n+\n+    // RFC7009 (OAuth 2.0 Token Revocation) - https://tools.ietf.org/html/rfc7009\n+    private static final String UNSUPPORTED_TOKEN_TYPE = \"unsupported_token_type\";\n+\n+    static final ObjectMapper JSON = new ObjectMapper();\n+    private static final TypeReference<LinkedHashMap<String, String>> MAP_TYPE =\n+            new TypeReference<LinkedHashMap<String, String>>() {};\n+\n+    /**\n+     * Parses {@code JSON} error response body and created a new instance of {@link TokenRequestException}\n+     * using the response data.\n+     * @param rawResponse {@code JSON} formatted error response body.\n+     * @return a new instance of {@link TokenRequestException}\n+     */\n+    public TokenRequestException of(String rawResponse) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3NDIxNA==", "bodyText": "getMediaType() or mediaType()?\nCould accept and return MediaType?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469274214", "createdAt": "2020-08-12T13:50:30Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedMediaTypeException.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * A response {@code Content-Type} header does not match the expected type.\n+ */\n+public class UnsupportedMediaTypeException extends RuntimeException {\n+\n+    private static final long serialVersionUID = 5350546517834409748L;\n+\n+    private final String mediaType;\n+\n+    /**\n+     * Constructs new {@link UnsupportedMediaTypeException}.\n+     * @param mediaType A {@code Content-Type} of the response.\n+     * @param status An HTTP status of the response.\n+     * @param message A response content\n+     */\n+    public UnsupportedMediaTypeException(String mediaType, String status, @Nullable String message) {\n+        super(join(mediaType, status, message));\n+        this.mediaType = mediaType;\n+    }\n+\n+    /**\n+     * Constructs new {@link UnsupportedMediaTypeException}.\n+     * @param mediaType A {@code Content-Type} of the response.\n+     * @param status An HTTP status of the response.\n+     * @param message A response content\n+     * @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method).\n+     *              (A {@code null} value is permitted, and indicates that the cause is nonexistent or unknown.)\n+     */\n+    public UnsupportedMediaTypeException(String mediaType, String status, @Nullable String message,\n+                                         @Nullable Throwable cause) {\n+        super(join(mediaType, status, message), cause);\n+        this.mediaType = mediaType;\n+    }\n+\n+    private static String join(String mediaType, String status, @Nullable String message) {\n+        final StringBuilder builder = new StringBuilder();\n+        builder.append(status).append(\": \")\n+               .append(HttpHeaderNames.CONTENT_TYPE).append(\" - \")\n+               .append(mediaType);\n+        return (message == null) ? builder.toString() : builder.append(\": \").append(message).toString();\n+    }\n+\n+    /**\n+     * A {@code Content-Type} of the response.\n+     */\n+    public String getMediaType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3NTMyMA==", "bodyText": "How about just accepting and returning an HttpStatus?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469275320", "createdAt": "2020-08-12T13:52:00Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedResponseException.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A response type in not supported by the given request/response flow.\n+ */\n+public class UnsupportedResponseException extends RuntimeException {\n+\n+    private static final long serialVersionUID = 4982498806675787821L;\n+\n+    private final int statusCode;\n+\n+    /**\n+     * Constructs new {@link UnsupportedMediaTypeException}.\n+     * @param statusCode A status code of the response.\n+     * @param status An HTTP status of the response.\n+     * @param message A response content\n+     */\n+    public UnsupportedResponseException(int statusCode, String status, @Nullable String message) {\n+        super(join(status, message));\n+        this.statusCode = statusCode;\n+    }\n+\n+    /**\n+     * Constructs new {@link UnsupportedMediaTypeException}.\n+     * @param statusCode A status code of the response.\n+     * @param status An HTTP status of the response.\n+     * @param message A response content\n+     * @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method).\n+     *              (A {@code null} value is permitted, and indicates that the cause is nonexistent or unknown.)\n+     */\n+    public UnsupportedResponseException(int statusCode, String status,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3NTkyNg==", "bodyText": "Does it make sense to hide this from the public API?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469275926", "createdAt": "2020-08-12T13:52:47Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2AuthorizationFailureHandler.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static com.linecorp.armeria.server.auth.oauth2.OAuth2TokenIntrospectionAuthorizer.ERROR_CODE;\n+import static com.linecorp.armeria.server.auth.oauth2.OAuth2TokenIntrospectionAuthorizer.ERROR_TYPE;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.AuthFailureHandler;\n+import com.linecorp.armeria.server.auth.AuthServiceBuilder;\n+import com.linecorp.armeria.server.auth.Authorizer;\n+\n+/**\n+ * A callback which is invoked to handle OAuth 2.0 authorization failure indicated by {@link Authorizer}.\n+ * Composes OAuth 2.0 authorization error response in one of the following ways:\n+ * <ul>\n+ *    <li>\n+ *    invalid_request\n+ *          <p>The request is missing a required parameter, includes an\n+ *          unsupported parameter or parameter value, repeats the same\n+ *          parameter, uses more than one method for including an access\n+ *          token, or is otherwise malformed. The resource server SHOULD\n+ *          respond with the HTTP 400 (Bad Request) status code.</p>\n+ *          Example:\n+ *          <pre>{@code\n+ *              HTTP/1.1 400 Bad Request\n+ *              Content-Type: application/json;charset=UTF-8\n+ *              {\"error\":\"unsupported_token_type\"}\n+ *          }</pre>\n+ *    </li>\n+ *    <li>\n+ *    invalid_token\n+ *          <p>The access token provided is expired, revoked, malformed, or\n+ *          invalid for other reasons. The resource SHOULD respond with\n+ *          the HTTP 401 (Unauthorized) status code. The client MAY\n+ *          request a new access token and retry the protected resource\n+ *          request.</p>\n+ *          Example:\n+ *          <pre>{@code\n+ *              HTTP/1.1 401 Unauthorized\n+ *              WWW-Authenticate: Bearer realm=\"example\",\n+ *                                error=\"invalid_token\",\n+ *                                scope=\"read write\"\n+ *          }</pre>\n+ *    </li>\n+ *    <li>\n+ *    insufficient_scope\n+ *          <p>The request requires higher privileges than provided by the\n+ *          access token. The resource server SHOULD respond with the HTTP\n+ *          403 (Forbidden) status code and MAY include the \"scope\"\n+ *          attribute with the scope necessary to access the protected\n+ *          resource.</p>\n+ *          Example:\n+ *          <pre>{@code\n+ *              HTTP/1.1 403 Forbidden\n+ *              Content-Type: application/json;charset=UTF-8\n+ *              {\"error\":\"insufficient_scope\"}\n+ *          }</pre>\n+ *    </li>\n+ * </ul>\n+ *\n+ * @see AuthServiceBuilder#onFailure(AuthFailureHandler)\n+ */\n+public class OAuth2AuthorizationFailureHandler implements AuthFailureHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c417198fb4cf397ae8ee568015a077f591be3376", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/c417198fb4cf397ae8ee568015a077f591be3376", "committedDate": "2020-08-17T15:56:57Z", "message": "- review comments by @trustin;"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4OTgyMDc4", "url": "https://github.com/line/armeria/pull/2840#pullrequestreview-468982078", "createdAt": "2020-08-18T04:27:14Z", "commit": {"oid": "c417198fb4cf397ae8ee568015a077f591be3376"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNDoyNzoxNFrOHCC3ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNDoyNzoxNFrOHCC3ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwNjI0Mw==", "bodyText": "As I mentioned, the *Request classes in common.auth.oauth2 could be hidden from the public API by moving them to internal.common.auth.oauth2.", "url": "https://github.com/line/armeria/pull/2840#discussion_r471906243", "createdAt": "2020-08-18T04:27:14Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+public abstract class AbstractOAuth2Request<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c417198fb4cf397ae8ee568015a077f591be3376"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49ea469bfaad45281267252a0f1c2f29df6434f6", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/49ea469bfaad45281267252a0f1c2f29df6434f6", "committedDate": "2020-08-18T13:10:35Z", "message": "- more review comments by @trustin:\n- introduced \"internal\" packages and moved *Request classes there;\n- introduced OAuth2Constants class;\n- replaced CompletableFuture.whenComplete() with CompletableFuture.handle();"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc067f420001186399ba8247c9c17986d35ff6a6", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/cc067f420001186399ba8247c9c17986d35ff6a6", "committedDate": "2020-08-18T13:28:16Z", "message": "- more review comments by @trustin:\n- shared common ObjectMapper for JSON parsing;"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6892ba1a7e1d82c89ed46b4ad920bd39f941fa25", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/6892ba1a7e1d82c89ed46b4ad920bd39f941fa25", "committedDate": "2020-08-18T13:46:21Z", "message": "- replaced ServerRule -> ServerExtension in the unit tests;"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03990d397ebec1d726d13088485e91f01ec7e50d", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/03990d397ebec1d726d13088485e91f01ec7e50d", "committedDate": "2020-08-18T13:58:28Z", "message": "- junit refactoring;"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "140357b0ca349368c992e2d002d708450f03f9e5", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/140357b0ca349368c992e2d002d708450f03f9e5", "committedDate": "2020-08-19T01:28:05Z", "message": "Merge branch 'master' into oauth2-issue2268"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e93caa314f04eff006b9baf1cda2686bc965da55", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/e93caa314f04eff006b9baf1cda2686bc965da55", "committedDate": "2020-09-07T08:29:05Z", "message": "- fixed build errors related with relocated classes in 1.0;"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85d92d51d2a0dc70eac909d6db3a76bdb63e473b", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/85d92d51d2a0dc70eac909d6db3a76bdb63e473b", "committedDate": "2020-10-20T12:04:36Z", "message": "review comments by @trustin:\n- added Authorizer.successHandler() and Authorizer.failureHandler() methods and set those no NULL by default;\n- eliminated OAuth2TokenIntrospectionAuthorizer.asAuthService() and OAuth2TokenIntrospectionAuthorizer.asDecorator() methods."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNTkxNTE1", "url": "https://github.com/line/armeria/pull/2840#pullrequestreview-520591515", "createdAt": "2020-10-30T11:43:22Z", "commit": {"oid": "85d92d51d2a0dc70eac909d6db3a76bdb63e473b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMTo0MzoyMlrOHrLhYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMTo0MzoyMlrOHrLhYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzOTU4Ng==", "bodyText": "What would happen if a user adds more than one authorizer? Wouldn't each authorizer need to have its own success/failure handler pair?", "url": "https://github.com/line/armeria/pull/2840#discussion_r515039586", "createdAt": "2020-10-30T11:43:22Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthServiceBuilder.java", "diffHunk": "@@ -140,6 +141,7 @@ public AuthServiceBuilder addOAuth2(Authorizer<? super OAuth2Token> authorizer,\n             return authorizer.authorize(ctx, token);\n         };\n         add(requestAuthorizer);\n+        setAuthorizerHandlers(authorizer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85d92d51d2a0dc70eac909d6db3a76bdb63e473b"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f28657a06d6af6ced09d7191746aedfb3acc93b", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/0f28657a06d6af6ced09d7191746aedfb3acc93b", "committedDate": "2020-11-26T05:15:22Z", "message": "Merge branch 'master' into oauth2-issue2268"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/dd0a7906c377dfa3b6c130b59aaf723f8d368be6", "committedDate": "2021-01-01T17:55:28Z", "message": "Review comments by @trustin - solution for Authorizer chaining problem:\n\nThe AuthService invokes the first Authorizer form the chain. If it succeeds, it terminates the chain and invokes associated successHandler. If successHandler not defined for given Authorizer, it will invoke default/common successHandler. If the Authorizer fails (returns false), the AuthService tries the next Authorizer, and so on. At the end of the chain, if none of the Authroizers returned success, the AuthService selects the Authorizer to handle the failureHandler (LAST_WITH_HANDLER - the last one that has specific failureHandler defined). The AuthService always engages matching failureHandler from the selected Authorizer. If none of the Authorizers define a failureHandler, the AuthService selects engages default/common failureHandler.\n\nSummary of the interface changes:\n\n- AuthService has successHandler and failureHandler as before - these play a role of default/common handlers.\n- AuthService has LAST_WITH_HANDLER Authorizer selection strategy hardcoded.\n- Authorizer has failureHandler and successHandler set to NULL by default, as before.\n- extracted Authorizer chaining logic into a dedicated class AuthorizerChain;\n- extracted HttpRequest authorization logic into a separate class DelegatingHttpRequestAuthorizer.\n\nThis solution is fully backward compatible and the new changes mostly applied to AuthService#serve() and AuthServiceBuilder."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxNTM5ODA0", "url": "https://github.com/line/armeria/pull/2840#pullrequestreview-561539804", "createdAt": "2021-01-05T06:23:55Z", "commit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNjoyMzo1NlrOIOLcmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNzoxOTozOVrOIOMfBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTczODUyMw==", "bodyText": "Could use @ParameterizedTest with @CsvSource?", "url": "https://github.com/line/armeria/pull/2840#discussion_r551738523", "createdAt": "2021-01-05T06:23:56Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/auth/AuthorizerTest.java", "diffHunk": "@@ -126,17 +129,71 @@ public void orElseSecond() {\n \n     @Test\n     public void orElseToString() {\n-        final Authorizer<Object> a = new AuthorizerWithToString(\"A\");\n-        final Authorizer<Object> b = new AuthorizerWithToString(\"B\");\n-        final Authorizer<Object> c = new AuthorizerWithToString(\"C\");\n-        final Authorizer<Object> d = new AuthorizerWithToString(\"D\");\n+        final Authorizer<Object> a = new NamedAuthorizer<>(\"A\");\n+        final Authorizer<Object> b = new NamedAuthorizer<>(\"B\");\n+        final Authorizer<Object> c = new NamedAuthorizer<>(\"C\");\n+        final Authorizer<Object> d = new NamedAuthorizer<>(\"D\");\n+        final Authorizer<Object> e = new NamedAuthorizer<>(\"E\");\n \n         // A + B\n         assertThat(a.orElse(b).toString()).isEqualTo(\"[A, B]\");\n-        // A + B\n+        // A + B + C\n         assertThat(a.orElse(b).orElse(c).toString()).isEqualTo(\"[A, B, C]\");\n-        // (A + B) + (C + D)\n-        assertThat(a.orElse(b).orElse(c.orElse(d)).toString()).isEqualTo(\"[A, B, C, D]\");\n+        // A + B + (C + D) + E\n+        assertThat(a.orElse(b).orElse(c.orElse(d)).orElse(e).toString()).isEqualTo(\"[A, B, [C, D], E]\");\n+    }\n+\n+    @Test\n+    public void orElseHandler() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MDEwMg==", "bodyText": "How about accepting a list of Authorizers and making an immutable copy of the list rather than keeping a mutable list?", "url": "https://github.com/line/armeria/pull/2840#discussion_r551740102", "createdAt": "2021-01-05T06:29:04Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Chains multiple {@link Authorizer}s together into a single {@link Authorizer}.\n+ * Utilizes {@link AuthorizerSelectionStrategy} to select corresponding {@link AuthFailureHandler}.\n+ */\n+final class AuthorizerChain<T> implements Authorizer<T> {\n+\n+    enum AuthorizerSelectionStrategy {\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain.\n+         */\n+        FIRST,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain.\n+         */\n+        LAST,\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        FIRST_WITH_HANDLER,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        LAST_WITH_HANDLER\n+    }\n+\n+    private final LinkedList<Authorizer<T>> authorizers = new LinkedList<>();\n+    private final AuthorizerSelectionStrategy selectionStrategy;\n+    @Nullable\n+    private AuthSuccessHandler successHandler;\n+    @Nullable\n+    private AuthFailureHandler failureHandler;\n+\n+    AuthorizerChain(Authorizer<T> firstAuthorizer, AuthorizerSelectionStrategy selectionStrategy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MDY3NA==", "bodyText": "We should not update the internal state of this class here. Could we return a new AuthorizerChain with a newly constructed list? e.g.\nfinal List<Authorizer<T>> newAuthorizers =\n    ImmutableList.builder()\n                 .addAll(authorizers)\n                 .add(requireNonNull(nextAuthorizer, \"nextAuthorizer\")\n                 .build();\nreturn new AuthorizerChain<>(newAuthorizers, ...);", "url": "https://github.com/line/armeria/pull/2840#discussion_r551740674", "createdAt": "2021-01-05T06:31:08Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Chains multiple {@link Authorizer}s together into a single {@link Authorizer}.\n+ * Utilizes {@link AuthorizerSelectionStrategy} to select corresponding {@link AuthFailureHandler}.\n+ */\n+final class AuthorizerChain<T> implements Authorizer<T> {\n+\n+    enum AuthorizerSelectionStrategy {\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain.\n+         */\n+        FIRST,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain.\n+         */\n+        LAST,\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        FIRST_WITH_HANDLER,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        LAST_WITH_HANDLER\n+    }\n+\n+    private final LinkedList<Authorizer<T>> authorizers = new LinkedList<>();\n+    private final AuthorizerSelectionStrategy selectionStrategy;\n+    @Nullable\n+    private AuthSuccessHandler successHandler;\n+    @Nullable\n+    private AuthFailureHandler failureHandler;\n+\n+    AuthorizerChain(Authorizer<T> firstAuthorizer, AuthorizerSelectionStrategy selectionStrategy) {\n+        authorizers.add(requireNonNull(firstAuthorizer, \"firstAuthorizer\"));\n+        this.selectionStrategy = requireNonNull(selectionStrategy, \"selectionStrategy\");\n+        if (selectionStrategy == AuthorizerSelectionStrategy.FIRST) {\n+            // this could be NULL\n+            failureHandler = authorizers.getFirst().failureHandler();\n+        }\n+    }\n+\n+    /**\n+     * Adds a new {@link Authorizer} to the chain.\n+     * @return an original {@link AuthorizerChain} instance with added {@link Authorizer}.\n+     */\n+    @Override\n+    public Authorizer<T> orElse(Authorizer<T> nextAuthorizer) {\n+        authorizers.add(requireNonNull(nextAuthorizer, \"nextAuthorizer\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MjM3MQ==", "bodyText": "(Global comment) Shall we remove Async suffix from all async operations? Armeria operations are usually asynchronous anyway. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2840#discussion_r551742371", "createdAt": "2021-01-05T06:36:45Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant {\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    /**\n+     * Holds a token object and facilitates its lifecycle.\n+     */\n+    private final TokenLifecycleManager<GrantedOAuth2AccessToken> tokenManager;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier,\n+                                     @Nullable Consumer<? super GrantedOAuth2AccessToken> tokenConsumer,\n+                                     @Nullable Executor executor) {\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        tokenManager = new TokenLifecycleManager<>(this::isValid, this::canRefresh,\n+                                                   this::shallObtainInsteadOfUpdate,\n+                                                   this::obtainAccessTokenAsync, this::refreshAccessTokenAsync,\n+                                                   tokenSupplier, tokenConsumer, executor);\n+    }\n+\n+    /**\n+     * Tests the token for validity at the given {@link Instant} time.\n+     */\n+    private boolean isValid(GrantedOAuth2AccessToken token, Instant now) {\n+        return token.isValid(now.plus(refreshBefore));\n+    }\n+\n+    /**\n+     * Tests whether the token object can be refreshed or re-obtained.\n+     */\n+    private boolean canRefresh(GrantedOAuth2AccessToken token) {\n+        return token.refreshToken() != null;\n+    }\n+\n+    /**\n+     * Tests whether given {@link Throwable} indicates that the token shall be re-obtained\n+     * after the refresh operation failure.\n+     */\n+    private boolean shallObtainInsteadOfUpdate(Throwable throwable) {\n+        return throwable instanceof TokenRequestException;\n+    }\n+\n+    /**\n+     * Refreshes access token.\n+     */\n+    private CompletionStage<GrantedOAuth2AccessToken> refreshAccessTokenAsync(GrantedOAuth2AccessToken token) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MjQ0MA==", "bodyText": "(Global comment) Could you make all protected methods in package-private classes package-private?", "url": "https://github.com/line/armeria/pull/2840#discussion_r551742440", "createdAt": "2021-01-05T06:36:56Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant {\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    /**\n+     * Holds a token object and facilitates its lifecycle.\n+     */\n+    private final TokenLifecycleManager<GrantedOAuth2AccessToken> tokenManager;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier,\n+                                     @Nullable Consumer<? super GrantedOAuth2AccessToken> tokenConsumer,\n+                                     @Nullable Executor executor) {\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        tokenManager = new TokenLifecycleManager<>(this::isValid, this::canRefresh,\n+                                                   this::shallObtainInsteadOfUpdate,\n+                                                   this::obtainAccessTokenAsync, this::refreshAccessTokenAsync,\n+                                                   tokenSupplier, tokenConsumer, executor);\n+    }\n+\n+    /**\n+     * Tests the token for validity at the given {@link Instant} time.\n+     */\n+    private boolean isValid(GrantedOAuth2AccessToken token, Instant now) {\n+        return token.isValid(now.plus(refreshBefore));\n+    }\n+\n+    /**\n+     * Tests whether the token object can be refreshed or re-obtained.\n+     */\n+    private boolean canRefresh(GrantedOAuth2AccessToken token) {\n+        return token.refreshToken() != null;\n+    }\n+\n+    /**\n+     * Tests whether given {@link Throwable} indicates that the token shall be re-obtained\n+     * after the refresh operation failure.\n+     */\n+    private boolean shallObtainInsteadOfUpdate(Throwable throwable) {\n+        return throwable instanceof TokenRequestException;\n+    }\n+\n+    /**\n+     * Refreshes access token.\n+     */\n+    private CompletionStage<GrantedOAuth2AccessToken> refreshAccessTokenAsync(GrantedOAuth2AccessToken token) {\n+        return refreshRequest.make(token);\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link GrantedOAuth2AccessToken} or an\n+     *         exception, if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<GrantedOAuth2AccessToken> obtainAccessTokenAsync(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MzIyNw==", "bodyText": "(Global comment) Could you add @UnstableApi annotation to all new public classes and all new packages we are introducing in this pull request, so we have some wiggle room when we have to break backward compatibility in future 1.x releases?", "url": "https://github.com/line/armeria/pull/2840#discussion_r551743227", "createdAt": "2021-01-05T06:39:49Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+public interface OAuth2AuthorizationGrant {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MzQzOQ==", "bodyText": "(Global comment) final in all public classes that are not intended for extension.", "url": "https://github.com/line/armeria/pull/2840#discussion_r551743439", "createdAt": "2021-01-05T06:40:44Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Decorates a {@link HttpClient} with an OAuth 2.0 Authorization Grant flow.\n+ */\n+public class OAuth2Client extends SimpleDecoratingHttpClient {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0NDg2MA==", "bodyText": "(Global comment) Please add @UnstableApi to all new packages, including the internal ones.", "url": "https://github.com/line/armeria/pull/2840#discussion_r551744860", "createdAt": "2021-01-05T06:45:39Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/package-info.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Client-side <a href=\"https://en.wikipedia.org/wiki/OAuth#OAuth_2.0\">OAuth 2.0</a> implementation artifacts.\n+ */\n+@NonNullByDefault\n+package com.linecorp.armeria.client.auth.oauth2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0NjE1OA==", "bodyText": "(Global comment)\n\n4-space indentation?\nPlease let me know if you forked any existing source code when writing this pull request. (Thought it's possible since these classes have different indentation.) If you forked something, we need to make it clear that we did.", "url": "https://github.com/line/armeria/pull/2840#discussion_r551746158", "createdAt": "2021-01-05T06:49:51Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidClientException.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Client authentication failed (e.g., unknown client, no client authentication included, or\n+ * unsupported authentication method). The authorization server MAY return an HTTP 401\n+ * (Unauthorized) status code to indicate which HTTP authentication schemes are supported. If the\n+ * client attempted to authenticate via the \"Authorization\" request header field, the authorization\n+ * server MUST respond with an HTTP 401 (Unauthorized) status code and include the\n+ * \"WWW-Authenticate\" response header field matching the authentication scheme used by the client.\n+ */\n+public class InvalidClientException extends TokenRequestException {\n+\n+  private static final long serialVersionUID = -1894934023468438715L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0NzA1NQ==", "bodyText": "Could just do rawResponse().hashCode() because rawResponse() will never return null.", "url": "https://github.com/line/armeria/pull/2840#discussion_r551747055", "createdAt": "2021-01-05T06:53:00Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptor.java", "diffHunk": "@@ -0,0 +1,510 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACTIVE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.AUDIENCE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.CLIENT_ID;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_AT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ISSUED_AT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ISSUER;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.JWT_ID;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.NOT_BEFORE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SUBJECT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.USER_NAME;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Defines a structure of the Token Introspection Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc7662#section-2.2\">[RFC7662], Section 2.2</a>.\n+ */\n+public class OAuth2TokenDescriptor implements Serializable {\n+\n+    private static final long serialVersionUID = -3976877781134216467L;\n+\n+    /**\n+     * Creates a new {@link OAuth2TokenDescriptor} based on the {@code JSON}-formatted raw response body.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @return A new instance of {@link OAuth2TokenDescriptor}.\n+     */\n+    public static OAuth2TokenDescriptor of(String rawResponse) {\n+        return OAuth2TokenDescriptorBuilder.of(rawResponse);\n+    }\n+\n+    /**\n+     * Creates a new {@link OAuth2TokenDescriptorBuilder} to build a new {@link OAuth2TokenDescriptor} and\n+     * supplied it with a value of {@code active} Token Introspection Response field.\n+     * @return A new instance of {@link OAuth2TokenDescriptorBuilder}.\n+     */\n+    public static OAuth2TokenDescriptorBuilder builder(boolean active) {\n+        return new OAuth2TokenDescriptorBuilder(active);\n+    }\n+\n+    static final String SCOPE_SEPARATOR = \" \";\n+\n+    /**\n+     * {@value OAuth2Constants#ACTIVE} Token Introspection Response field,\n+     * REQUIRED. Boolean indicator of whether or not the presented token is currently active. The\n+     * specifics of a token's \"active\" state will vary depending on the implementation of the\n+     * authorization server and the information it keeps about its tokens, but a \"true\" value return\n+     * for the \"active\" property will generally indicate that a given token has been issued by this\n+     * authorization server, has not been revoked by the resource owner, and is within its given time\n+     * window of validity (e.g., after its issuance time and before its expiration time).\n+     */\n+    private final boolean active;\n+\n+    /**\n+     * {@value OAuth2Constants#SCOPE} Token Introspection Response field,\n+     * OPTIONAL. A JSON string containing a space-separated list of scopes associated with this token,\n+     * in the format described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     */\n+    @Nullable\n+    private final String scope;\n+\n+    /**\n+     * A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    private final Set<String> scopeSet;\n+\n+    /**\n+     * {@value OAuth2Constants#CLIENT_ID} Token Introspection Response field,\n+     * OPTIONAL. Client identifier for the OAuth 2.0 client that requested this token.\n+     */\n+    @Nullable\n+    private final String clientId;\n+\n+    /**\n+     * {@value OAuth2Constants#USER_NAME} Token Introspection Response field,\n+     * OPTIONAL. Human-readable identifier for the resource owner who authorized this token.\n+     */\n+    @Nullable\n+    private final String userName;\n+\n+    /**\n+     * {@value OAuth2Constants#TOKEN_TYPE} Token Introspection Response field,\n+     * OPTIONAL. Type of the token as defined at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     */\n+    @Nullable\n+    private final String tokenType;\n+\n+    /**\n+     * {@value OAuth2Constants#EXPIRES_AT} Token Introspection Response field,\n+     * OPTIONAL. Integer timestamp, measured in the number of seconds since January 1 1970 UTC,\n+     * indicating when this token will expire, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final Instant expiresAt;\n+\n+    /**\n+     * {@value OAuth2Constants#ISSUED_AT} Token Introspection Response field,\n+     * OPTIONAL. Integer timestamp, measured in the number of seconds since January 1 1970 UTC,\n+     * indicating when this token was originally issued, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final Instant issuedAt;\n+\n+    /**\n+     * {@value OAuth2Constants#NOT_BEFORE} Token Introspection Response field,\n+     * OPTIONAL. Integer timestamp, measured in the number of seconds since January 1 1970 UTC,\n+     * indicating when this token is not to be used before, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final Instant notBefore;\n+\n+    /**\n+     * {@value OAuth2Constants#SUBJECT} Token Introspection Response field,\n+     * OPTIONAL. Subject of the token. Usually a machine-readable\n+     * identifier of the resource owner who authorized this token. As defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String subject;\n+\n+    /**\n+     * {@value OAuth2Constants#AUDIENCE} Token Introspection Response field,\n+     * OPTIONAL. Service-specific string identifier or list of string identifiers representing the\n+     * intended audience for this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String audience;\n+\n+    /**\n+     * {@value OAuth2Constants#ISSUER} Token Introspection Response field,\n+     * OPTIONAL. String representing the issuer of this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String issuer;\n+\n+    /**\n+     * {@value OAuth2Constants#JWT_ID} Token Introspection Response field,\n+     * OPTIONAL. String identifier for the token - JWT ID, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String jwtId;\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Token Introspection Response,\n+     * OPTIONAL.\n+     */\n+    private final Map<String, String> extras;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    @Nullable\n+    private transient String toString;\n+\n+    OAuth2TokenDescriptor(boolean active, @Nullable List<String> scopeList, @Nullable String clientId,\n+                          @Nullable String userName, @Nullable String tokenType,\n+                          @Nullable Instant expiresAt, @Nullable Instant issuedAt,\n+                          @Nullable Instant notBefore, @Nullable String subject,\n+                          @Nullable String audience, @Nullable String issuer,\n+                          @Nullable String jwtId, @Nullable ImmutableMap<String, String> extras,\n+                          @Nullable String rawResponse) {\n+        this.active = active;\n+        scope = toScopeString(scopeList);\n+        scopeSet = (scopeList == null) ? ImmutableSet.of() : ImmutableSet.copyOf(scopeList);\n+        this.clientId = clientId;\n+        this.userName = userName;\n+        this.tokenType = tokenType;\n+        this.expiresAt = expiresAt;\n+        this.issuedAt = issuedAt;\n+        this.notBefore = notBefore;\n+        this.subject = subject;\n+        this.audience = audience;\n+        this.issuer = issuer;\n+        this.jwtId = jwtId;\n+        this.extras = (extras == null) ? ImmutableMap.of() : extras;\n+        // raw response\n+        this.rawResponse = rawResponse;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#ACTIVE} Token Introspection Response field,\n+     * REQUIRED. Boolean indicator of whether or not the presented token is currently active. The\n+     * specifics of a token's \"active\" state will vary depending on the implementation of the\n+     * authorization server and the information it keeps about its tokens, but a \"true\" value return\n+     * for the \"active\" property will generally indicate that a given token has been issued by this\n+     * authorization server, has not been revoked by the resource owner, and is within its given time\n+     * window of validity (e.g., after its issuance time and before its expiration time).\n+     */\n+    public boolean isActive() {\n+        return active;\n+    }\n+\n+    /**\n+     * Indicates whether or not the Token expire at the given {@link Instant} time based on\n+     * {@link #expiresAt()} function.\n+     */\n+    public boolean isValid(Instant instant) {\n+        final Instant expires = expiresAt();\n+        return (expires == null) || requireNonNull(instant, \"instant\").isBefore(expires);\n+    }\n+\n+    /**\n+     * Indicates whether or not the Token already expired based on {@link #expiresAt()} function.\n+     */\n+    public boolean isValid() {\n+        return isValid(Instant.now());\n+    }\n+\n+    /**\n+     * Indicates whether or not the Token used prematurely based on {@link #notBefore()} function.\n+     */\n+    public boolean isNotBefore() {\n+        final Instant notBefore = notBefore();\n+        return (notBefore == null) || Instant.now().isAfter(notBefore);\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#SCOPE} Token Introspection Response field,\n+     * OPTIONAL. A JSON string containing a space-separated list of scopes associated with this token,\n+     * in the format described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     */\n+    @Nullable\n+    public String scope() {\n+        return scope;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#SCOPE} Token Introspection Response field,\n+     * OPTIONAL. A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    public Set<String> scopeSet() {\n+        return scopeSet;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#CLIENT_ID} Token Introspection Response field,\n+     * OPTIONAL. Client identifier for the OAuth 2.0 client that requested this token.\n+     */\n+    @Nullable\n+    public String clientId() {\n+        return clientId;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#USER_NAME} Token Introspection Response field,\n+     * OPTIONAL. Human-readable identifier for the resource owner who authorized this token.\n+     */\n+    @Nullable\n+    public String userName() {\n+        return userName;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#TOKEN_TYPE} Token Introspection Response field,\n+     * OPTIONAL. Type of the token as defined at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     */\n+    @Nullable\n+    public String tokenType() {\n+        return tokenType;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#EXPIRES_AT} Token Introspection Response field,\n+     * OPTIONAL. {@link Instant} timestamp, indicating when this token will expire, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public Instant expiresAt() {\n+        return expiresAt;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#ISSUED_AT} Token Introspection Response field,\n+     * OPTIONAL. {@link Instant} timestamp, indicating when this token was originally issued, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public Instant issuedAt() {\n+        return issuedAt;\n+    }\n+\n+    /**\n+     * {@link Duration} indicating the lifetime of the access token. The value is NOT supplied with the\n+     * Token Introspection response and calculated based on {@value OAuth2Constants#ISSUED_AT} and\n+     * {@value OAuth2Constants#EXPIRES_AT} response fields every time this method invoked.\n+     */\n+    @Nullable\n+    public Duration expiresIn() {\n+        if (issuedAt != null && expiresAt != null) {\n+            return Duration.ofMillis(issuedAt.until(expiresAt, ChronoUnit.MILLIS));\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#NOT_BEFORE} Token Introspection Response field,\n+     * OPTIONAL. {@link Instant} timestamp, indicating when this token is not to be used before, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public Instant notBefore() {\n+        return notBefore;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#SUBJECT} Token Introspection Response field,\n+     * OPTIONAL. Subject of the token. Usually a machine-readable\n+     * identifier of the resource owner who authorized this token. As defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public String subject() {\n+        return subject;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#AUDIENCE} Token Introspection Response field,\n+     * OPTIONAL. Service-specific string identifier or list of string identifiers representing the\n+     * intended audience for this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public String audience() {\n+        return audience;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#ISSUER} Token Introspection Response field,\n+     * OPTIONAL. String representing the issuer of this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public String issuer() {\n+        return issuer;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#JWT_ID} Token Introspection Response field,\n+     * OPTIONAL. String identifier for the token - JWT ID, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public String jwtId() {\n+        return jwtId;\n+    }\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Token Introspection Response,\n+     * OPTIONAL.\n+     */\n+    public Map<String, String> extras() {\n+        return extras;\n+    }\n+\n+    /**\n+     * {@code JSON}-formatted raw Token Introspection Response body. If the {@link OAuth2TokenDescriptor} was\n+     * not parsed out of the raw response body, this value calculated based on the other\n+     * {@link OAuth2TokenDescriptor} values.\n+     */\n+    public String rawResponse() {\n+        if (rawResponse == null) {\n+            rawResponse = composeRawResponse(active, scope, clientId, userName, tokenType,\n+                                             expiresAt, issuedAt, notBefore,\n+                                             subject, audience, issuer,\n+                                             jwtId, extras);\n+        }\n+        return rawResponse;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        if (toString == null) {\n+            toString = rawResponse();\n+        }\n+        return toString;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof OAuth2TokenDescriptor)) {\n+            return false;\n+        }\n+        final OAuth2TokenDescriptor that = (OAuth2TokenDescriptor) o;\n+        return Objects.equals(rawResponse(), that.rawResponse());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(rawResponse());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 441}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0NzM3MA==", "bodyText": "4-space indentation", "url": "https://github.com/line/armeria/pull/2840#discussion_r551747370", "createdAt": "2021-01-05T06:53:53Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRequestException.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A common token request exception type.\n+ */\n+public class TokenRequestException extends RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0NzYzMA==", "bodyText": "(Global comment) Could you add final to any methods in a non-final class if it's not meant to be overridden?", "url": "https://github.com/line/armeria/pull/2840#discussion_r551747630", "createdAt": "2021-01-05T06:54:48Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRequestException.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A common token request exception type.\n+ */\n+public class TokenRequestException extends RuntimeException {\n+\n+  private static final long serialVersionUID = 3324433572773111913L;\n+\n+  /**\n+   * Returns a {@link TokenRequestExceptionBuilder} to build error-specific types\n+   * of {@link TokenRequestException}.\n+   */\n+  public static TokenRequestException of(String rawResponse) {\n+    return TokenRequestExceptionBuilder.parse(rawResponse);\n+  }\n+\n+  @Nullable\n+  private final String errorUri;\n+\n+  /**\n+   * Constructs a new {@link TokenRequestException} using {@code errorDescription} and {@code errorUri}.\n+   * @param errorDescription OPTIONAL. Human-readable ASCII [USASCII] text providing additional information,\n+   *                         used to assist the client developer in understanding the error that occurred.\n+   *                         Values for the {@code errorDescription} parameter MUST NOT include\n+   *                         characters outside the set {@code %x20-21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   * @param errorUri OPTIONAL. A URI identifying a human-readable web page with information about the error,\n+   *                 used to provide the client developer with additional information about the error.\n+   *                 Values for the {@code errorUri} parameter MUST conform to the URI-reference syntax and\n+   *                 thus MUST NOT include characters outside\n+   *                 the set {@code %x21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   */\n+  public TokenRequestException(String errorDescription, @Nullable String errorUri) {\n+    super(errorDescription);\n+    this.errorUri = errorUri;\n+  }\n+\n+  /**\n+   * Constructs a new {@link TokenRequestException} using {@code errorDescription} and {@code errorUri}.\n+   * @param errorDescription OPTIONAL. Human-readable ASCII [USASCII] text providing additional information,\n+   *                         used to assist the client developer in understanding the error that occurred.\n+   *                         Values for the {@code errorDescription} parameter MUST NOT include\n+   *                         characters outside the set {@code %x20-21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   * @param errorUri OPTIONAL. A URI identifying a human-readable web page with information about the error,\n+   *                 used to provide the client developer with additional information about the error.\n+   *                 Values for the {@code errorUri} parameter MUST conform to the URI-reference syntax and\n+   *                 thus MUST NOT include characters outside\n+   *                 the set {@code %x21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   * @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method).\n+   *              (A {@code null} value is permitted, and indicates that the cause is nonexistent or unknown.)\n+   */\n+  public TokenRequestException(String errorDescription, @Nullable String errorUri, Throwable cause) {\n+    super(errorDescription, cause);\n+    this.errorUri = errorUri;\n+  }\n+\n+  /**\n+   * A URI identifying a human-readable web page with information about the error, used to provide the client\n+   * developer with additional information about the error.\n+   * Values for the {@code errorUri} parameter MUST conform to the URI-reference syntax and thus MUST NOT\n+   * include characters outside the set {@code %x21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   */\n+  @Nullable\n+  public String getErrorUri() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc1NTM4MQ==", "bodyText": "How about introducing a new parent exception such as OAuth2Exception? TokenRequestException could extend it as well.\nThe exception name sounds too generic. Should we add OAuth2 in its name? e.g. UnsupportedOAuth2MediaTypeException?", "url": "https://github.com/line/armeria/pull/2840#discussion_r551755381", "createdAt": "2021-01-05T07:19:07Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedMediaTypeException.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * A response {@code Content-Type} header does not match the expected type.\n+ */\n+public class UnsupportedMediaTypeException extends RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc1NTUyNQ==", "bodyText": "How about introducing a new parent exception such as OAuth2Exception? TokenRequestException could extend it as well.\nThe exception name sounds too generic. Should we add OAuth2 in its name? e.g. UnsupportedOAuth2ResponseException?", "url": "https://github.com/line/armeria/pull/2840#discussion_r551755525", "createdAt": "2021-01-05T07:19:39Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedResponseException.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpStatus;\n+\n+/**\n+ * A response type in not supported by the given request/response flow.\n+ */\n+public class UnsupportedResponseException extends RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d0f4b99b2b20210852d7ebde932c54e3208ac3f", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/2d0f4b99b2b20210852d7ebde932c54e3208ac3f", "committedDate": "2021-01-06T01:50:09Z", "message": "Review comments by @trustin - Various minor changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/d5a2061fbc22a4eef3b9cad11dc35c485638c67f", "committedDate": "2021-01-06T02:04:13Z", "message": "More review comments by @trustin - Various minor changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMzk0NDE1", "url": "https://github.com/line/armeria/pull/2840#pullrequestreview-562394415", "createdAt": "2021-01-06T08:12:13Z", "commit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "state": "COMMENTED", "comments": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODoxMjoxNFrOIO1dfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOTowOTowMVrOIO29NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyNjg3Nw==", "bodyText": "Could just pass self and nextAuthorizer in as a constructor parameter?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552426877", "createdAt": "2021-01-06T08:12:14Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/Authorizer.java", "diffHunk": "@@ -48,49 +48,31 @@\n      */\n     default Authorizer<T> orElse(Authorizer<T> nextAuthorizer) {\n         final Authorizer<T> self = this;\n-        return new Authorizer<T>() {\n-            @Nullable\n-            private String strVal;\n-\n-            @Override\n-            public CompletionStage<Boolean> authorize(ServiceRequestContext ctx, T data) {\n-                return AuthorizerUtil.authorize(self, ctx, data).thenComposeAsync(result -> {\n-                    if (result == null) {\n-                        throw AuthorizerUtil.newNullResultException(self);\n-                    } else {\n-                        return result ? CompletableFuture.completedFuture(true)\n-                                      : AuthorizerUtil.authorize(nextAuthorizer, ctx, data);\n-                    }\n-                }, ctx.eventLoop());\n-            }\n-\n-            @Override\n-            public String toString() {\n-                if (strVal != null) {\n-                    return strVal;\n-                }\n-\n-                final StringBuilder buf = new StringBuilder();\n-\n-                // Append the first authorizer.\n-                if (self.getClass() == getClass()) {\n-                    final String s = self.toString();\n-                    buf.append(s, 0, s.length() - 1);\n-                } else {\n-                    buf.append('[').append(self);\n-                }\n-                buf.append(\", \");\n+        return new AuthorizerChain<>(self, AuthorizerSelectionStrategy.LAST_WITH_HANDLER)\n+                .orElse(nextAuthorizer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyNzc3Ng==", "bodyText": "How about simplifying a little bit?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    requireNonNull(authorizers, \"authorizers\");\n          \n          \n            \n                    final Iterator<? extends Authorizer<T>> it = authorizers.iterator();\n          \n          \n            \n                    checkArgument(it.hasNext(), \"List of authorizers is empty\");\n          \n          \n            \n                    final Authorizer<T> firstAuthorizer = it.next();\n          \n          \n            \n                    requireNonNull(firstAuthorizer, \"firstAuthorizer\");\n          \n          \n            \n                    this.authorizers = ImmutableList.copyOf(authorizers);\n          \n          \n            \n                    requireNonNull(authorizers, \"authorizers\");\n          \n          \n            \n                    this.authorizers = ImmutableList.copyOf(authorizers);\n          \n          \n            \n                    checkArgument(!this.authorizers.isEmpty(), \"authorizers is empty.\");\n          \n          \n            \n                    final Authorizer<T> firstAuthorizer = this.authorizers.get(0);", "url": "https://github.com/line/armeria/pull/2840#discussion_r552427776", "createdAt": "2021-01-06T08:14:34Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Chains multiple {@link Authorizer}s together into a single {@link Authorizer}.\n+ * Utilizes {@link AuthorizerSelectionStrategy} to select corresponding {@link AuthFailureHandler}.\n+ */\n+final class AuthorizerChain<T> implements Authorizer<T> {\n+\n+    enum AuthorizerSelectionStrategy {\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain.\n+         */\n+        FIRST,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain.\n+         */\n+        LAST,\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        FIRST_WITH_HANDLER,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        LAST_WITH_HANDLER\n+    }\n+\n+    private final List<? extends Authorizer<T>> authorizers;\n+    private final AuthorizerSelectionStrategy selectionStrategy;\n+    @Nullable\n+    private AuthSuccessHandler successHandler;\n+    @Nullable\n+    private AuthFailureHandler failureHandler;\n+\n+    AuthorizerChain(Iterable<? extends Authorizer<T>> authorizers,\n+                    AuthorizerSelectionStrategy selectionStrategy) {\n+        requireNonNull(authorizers, \"authorizers\");\n+        final Iterator<? extends Authorizer<T>> it = authorizers.iterator();\n+        checkArgument(it.hasNext(), \"List of authorizers is empty\");\n+        final Authorizer<T> firstAuthorizer = it.next();\n+        requireNonNull(firstAuthorizer, \"firstAuthorizer\");\n+        this.authorizers = ImmutableList.copyOf(authorizers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyODA1OA==", "bodyText": "We could inline this constructor in Authorizer.orElse() and remove this one.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552428058", "createdAt": "2021-01-06T08:15:17Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Chains multiple {@link Authorizer}s together into a single {@link Authorizer}.\n+ * Utilizes {@link AuthorizerSelectionStrategy} to select corresponding {@link AuthFailureHandler}.\n+ */\n+final class AuthorizerChain<T> implements Authorizer<T> {\n+\n+    enum AuthorizerSelectionStrategy {\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain.\n+         */\n+        FIRST,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain.\n+         */\n+        LAST,\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        FIRST_WITH_HANDLER,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        LAST_WITH_HANDLER\n+    }\n+\n+    private final List<? extends Authorizer<T>> authorizers;\n+    private final AuthorizerSelectionStrategy selectionStrategy;\n+    @Nullable\n+    private AuthSuccessHandler successHandler;\n+    @Nullable\n+    private AuthFailureHandler failureHandler;\n+\n+    AuthorizerChain(Iterable<? extends Authorizer<T>> authorizers,\n+                    AuthorizerSelectionStrategy selectionStrategy) {\n+        requireNonNull(authorizers, \"authorizers\");\n+        final Iterator<? extends Authorizer<T>> it = authorizers.iterator();\n+        checkArgument(it.hasNext(), \"List of authorizers is empty\");\n+        final Authorizer<T> firstAuthorizer = it.next();\n+        requireNonNull(firstAuthorizer, \"firstAuthorizer\");\n+        this.authorizers = ImmutableList.copyOf(authorizers);\n+        this.selectionStrategy = requireNonNull(selectionStrategy, \"selectionStrategy\");\n+        if (selectionStrategy == AuthorizerSelectionStrategy.FIRST) {\n+            // this could be NULL\n+            failureHandler = firstAuthorizer.failureHandler();\n+        }\n+    }\n+\n+    AuthorizerChain(Authorizer<T> firstAuthorizer, AuthorizerSelectionStrategy selectionStrategy) {\n+        this(ImmutableList.of(requireNonNull(firstAuthorizer, \"firstAuthorizer\")), selectionStrategy);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyOTIzOA==", "bodyText": "How about managing these two states on a per-authorization basis? Otherwise we may have an issue when authorizing multiple requests at the same time. See below for the suggestion.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552429238", "createdAt": "2021-01-06T08:17:57Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Chains multiple {@link Authorizer}s together into a single {@link Authorizer}.\n+ * Utilizes {@link AuthorizerSelectionStrategy} to select corresponding {@link AuthFailureHandler}.\n+ */\n+final class AuthorizerChain<T> implements Authorizer<T> {\n+\n+    enum AuthorizerSelectionStrategy {\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain.\n+         */\n+        FIRST,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain.\n+         */\n+        LAST,\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        FIRST_WITH_HANDLER,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        LAST_WITH_HANDLER\n+    }\n+\n+    private final List<? extends Authorizer<T>> authorizers;\n+    private final AuthorizerSelectionStrategy selectionStrategy;\n+    @Nullable\n+    private AuthSuccessHandler successHandler;\n+    @Nullable\n+    private AuthFailureHandler failureHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyOTcyNw==", "bodyText": "We could add successHandler and failureHandler as parameters here and remove the member fields above.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552429727", "createdAt": "2021-01-06T08:19:12Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Chains multiple {@link Authorizer}s together into a single {@link Authorizer}.\n+ * Utilizes {@link AuthorizerSelectionStrategy} to select corresponding {@link AuthFailureHandler}.\n+ */\n+final class AuthorizerChain<T> implements Authorizer<T> {\n+\n+    enum AuthorizerSelectionStrategy {\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain.\n+         */\n+        FIRST,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain.\n+         */\n+        LAST,\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        FIRST_WITH_HANDLER,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        LAST_WITH_HANDLER\n+    }\n+\n+    private final List<? extends Authorizer<T>> authorizers;\n+    private final AuthorizerSelectionStrategy selectionStrategy;\n+    @Nullable\n+    private AuthSuccessHandler successHandler;\n+    @Nullable\n+    private AuthFailureHandler failureHandler;\n+\n+    AuthorizerChain(Iterable<? extends Authorizer<T>> authorizers,\n+                    AuthorizerSelectionStrategy selectionStrategy) {\n+        requireNonNull(authorizers, \"authorizers\");\n+        final Iterator<? extends Authorizer<T>> it = authorizers.iterator();\n+        checkArgument(it.hasNext(), \"List of authorizers is empty\");\n+        final Authorizer<T> firstAuthorizer = it.next();\n+        requireNonNull(firstAuthorizer, \"firstAuthorizer\");\n+        this.authorizers = ImmutableList.copyOf(authorizers);\n+        this.selectionStrategy = requireNonNull(selectionStrategy, \"selectionStrategy\");\n+        if (selectionStrategy == AuthorizerSelectionStrategy.FIRST) {\n+            // this could be NULL\n+            failureHandler = firstAuthorizer.failureHandler();\n+        }\n+    }\n+\n+    AuthorizerChain(Authorizer<T> firstAuthorizer, AuthorizerSelectionStrategy selectionStrategy) {\n+        this(ImmutableList.of(requireNonNull(firstAuthorizer, \"firstAuthorizer\")), selectionStrategy);\n+    }\n+\n+    /**\n+     * Adds a new {@link Authorizer} to the chain.\n+     * @return an original {@link AuthorizerChain} instance with added {@link Authorizer}.\n+     */\n+    @Override\n+    public Authorizer<T> orElse(Authorizer<T> nextAuthorizer) {\n+        final ImmutableList.Builder<Authorizer<T>> newAuthorizersBuilder = ImmutableList.builder();\n+        newAuthorizersBuilder.addAll(authorizers).add(requireNonNull(nextAuthorizer, \"nextAuthorizer\"));\n+        return new AuthorizerChain<>(newAuthorizersBuilder.build(), selectionStrategy);\n+    }\n+\n+    /**\n+     * Triggers an authorization on the chain of {@link Authorizer}s.\n+     * @return a {@link CompletionStage} that will resolve to {@code true} if any of {@link Authorizer}s in the\n+     *         chain authorize the request, or {@code false} if none of {@link Authorizer}s in the chain\n+     *         authorize the request. If the future resolves exceptionally, the request will not be authorized.\n+     */\n+    @Override\n+    public CompletionStage<Boolean> authorize(ServiceRequestContext ctx, T data) {\n+        return authorize(authorizers.iterator(), ctx, data);\n+    }\n+\n+    private CompletionStage<Boolean> authorize(Iterator<? extends Authorizer<T>> iterator,\n+                                               ServiceRequestContext ctx, T data) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMDI4MA==", "bodyText": "nit: in JUnit 5 tests, you don't need to make your test classes and methods public. Please remove all public modifiers.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552430280", "createdAt": "2021-01-06T08:20:43Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/auth/AuthorizerTest.java", "diffHunk": "@@ -29,35 +30,42 @@\n \n import java.util.concurrent.CompletionException;\n import java.util.concurrent.CompletionStage;\n+import java.util.stream.Stream;\n \n import javax.annotation.Nullable;\n \n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.ClassRule;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n \n import com.linecorp.armeria.common.HttpMethod;\n import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.server.HttpService;\n import com.linecorp.armeria.server.ServiceRequestContext;\n-import com.linecorp.armeria.testing.junit4.common.EventLoopRule;\n+import com.linecorp.armeria.testing.junit5.common.EventLoopExtension;\n \n public class AuthorizerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMDM4Mw==", "bodyText": "Missing final", "url": "https://github.com/line/armeria/pull/2840#discussion_r552430383", "createdAt": "2021-01-06T08:21:01Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/auth/AuthorizerTest.java", "diffHunk": "@@ -29,35 +30,42 @@\n \n import java.util.concurrent.CompletionException;\n import java.util.concurrent.CompletionStage;\n+import java.util.stream.Stream;\n \n import javax.annotation.Nullable;\n \n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.ClassRule;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n \n import com.linecorp.armeria.common.HttpMethod;\n import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.server.HttpService;\n import com.linecorp.armeria.server.ServiceRequestContext;\n-import com.linecorp.armeria.testing.junit4.common.EventLoopRule;\n+import com.linecorp.armeria.testing.junit5.common.EventLoopExtension;\n \n public class AuthorizerTest {\n \n-    @ClassRule\n-    public static final EventLoopRule eventLoop = new EventLoopRule();\n+    @RegisterExtension\n+    static EventLoopExtension eventLoop = new EventLoopExtension();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMDc0MQ==", "bodyText": "Could be final.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552430741", "createdAt": "2021-01-06T08:22:03Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant {\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    /**\n+     * Holds a token object and facilitates its lifecycle.\n+     */\n+    private final TokenLifecycleManager<GrantedOAuth2AccessToken> tokenManager;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier,\n+                                     @Nullable Consumer<? super GrantedOAuth2AccessToken> tokenConsumer,\n+                                     @Nullable Executor executor) {\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        tokenManager = new TokenLifecycleManager<>(this::isValid, this::canRefresh,\n+                                                   this::shallObtainInsteadOfUpdate,\n+                                                   this::obtainAccessToken, this::refreshAccessToken,\n+                                                   tokenSupplier, tokenConsumer, executor);\n+    }\n+\n+    /**\n+     * Tests the token for validity at the given {@link Instant} time.\n+     */\n+    private boolean isValid(GrantedOAuth2AccessToken token, Instant now) {\n+        return token.isValid(now.plus(refreshBefore));\n+    }\n+\n+    /**\n+     * Tests whether the token object can be refreshed or re-obtained.\n+     */\n+    private boolean canRefresh(GrantedOAuth2AccessToken token) {\n+        return token.refreshToken() != null;\n+    }\n+\n+    /**\n+     * Tests whether given {@link Throwable} indicates that the token shall be re-obtained\n+     * after the refresh operation failure.\n+     */\n+    private boolean shallObtainInsteadOfUpdate(Throwable throwable) {\n+        return throwable instanceof TokenRequestException;\n+    }\n+\n+    /**\n+     * Refreshes access token.\n+     */\n+    private CompletionStage<GrantedOAuth2AccessToken> refreshAccessToken(GrantedOAuth2AccessToken token) {\n+        return refreshRequest.make(token);\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link GrantedOAuth2AccessToken} or an\n+     *         exception, if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    abstract CompletableFuture<GrantedOAuth2AccessToken> obtainAccessToken(\n+            @Nullable GrantedOAuth2AccessToken token);\n+\n+    /**\n+     * Produces valid OAuth 2.0 Access Token.\n+     * Returns cached access token if previously obtained from the token end-point.\n+     * Optionally loads access token from longer term storage provided by registered {@link Supplier}.\n+     * If access token has not previously obtained, obtains is from the OAuth 2.0 token end-point using\n+     * dedicated single-thread {@link ExecutorService} which makes sure all token obtain and refresh requests\n+     * executed serially.\n+     * Validates access token and refreshes it if necessary.\n+     */\n+    @Override\n+    public CompletionStage<GrantedOAuth2AccessToken> getAccessToken() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMTQxNw==", "bodyText": "Could be final?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552431417", "createdAt": "2021-01-06T08:23:44Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ClientCredentialsGrant.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.internal.client.auth.oauth2.ClientCredentialsTokenRequest;\n+import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;\n+\n+/**\n+ * An implementation of OAuth 2.0 Client Credentials Grant flow to obtain Access Token,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-4.4\">[RFC6749], Section 4.4</a>.\n+ * Implements Access Token loading, storing, obtaining and refreshing.\n+ */\n+@UnstableApi\n+public class OAuth2ClientCredentialsGrant extends AbstractOAuth2AuthorizationGrant {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMTU4Nw==", "bodyText": "Could be final?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552431587", "createdAt": "2021-01-06T08:24:13Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ResourceOwnerPasswordCredentialsGrant.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.internal.client.auth.oauth2.ResourceOwnerPasswordCredentialsTokenRequest;\n+\n+/**\n+ * An implementation of OAuth 2.0 Resource Owner Password Credentials Grant flow to obtain Access Token,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-4.3\">[RFC6749], Section 4.3</a>.\n+ * Implements Access Token loading, storing, obtaining and refreshing.\n+ */\n+@UnstableApi\n+public class OAuth2ResourceOwnerPasswordCredentialsGrant extends AbstractOAuth2AuthorizationGrant {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMTg4MQ==", "bodyText": "public could be removed", "url": "https://github.com/line/armeria/pull/2840#discussion_r552431881", "createdAt": "2021-01-06T08:24:58Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/TokenLifecycleManager.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.BiPredicate;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+import com.linecorp.armeria.internal.common.auth.oauth2.SerialFuture;\n+\n+/**\n+ * Holds a token object and facilitates its lifecycle based on a number of procedures,\n+ * such as supply, update, load, store.\n+ * @param <T> the type of the token object\n+ */\n+class TokenLifecycleManager<T> {\n+\n+    /**\n+     * Holds a reference to the token.\n+     */\n+    private final AtomicReference<T> ref;\n+\n+    /**\n+     * Executes token operations serially on a separate thread.\n+     */\n+    private final SerialFuture serialFuture;\n+\n+    private final BiPredicate<? super T, Instant> validator;\n+\n+    private final Predicate<? super T> isUpdatable;\n+\n+    private final Predicate<Throwable> shallResupply;\n+\n+    private final Function<? super T, CompletionStage<? extends T>> serviceSupplier;\n+\n+    @Nullable\n+    private final Function<? super T, CompletionStage<? extends T>> serviceUpdater;\n+\n+    @Nullable\n+    private final Supplier<? extends T> storageSupplier;\n+\n+    @Nullable\n+    private final Consumer<? super T> storageConsumer;\n+\n+    /**\n+     * Constructs new {@link TokenLifecycleManager}.\n+     * @param validator A {@link BiPredicate} that tests the token for validity at the {@link Instant} time.\n+     * @param isUpdatable A {@link Predicate} that tests whether the token object can be updated or re-supplied.\n+     * @param shallResupply A {@link Predicate} that tests whether given {@link Throwable} indicates that\n+     *                      the token shall be re-supplied after the update operation failure.\n+     * @param serviceSupplier A {@link Function} that supplies an initial token object.\n+     * @param serviceUpdater A {@link Function} that updates token object.\n+     * @param storageSupplier A {@link Supplier} that can optionally load previously stored token object.\n+     * @param storageConsumer A {@link Consumer} that can optionally store token object.\n+     * @param executor An optional {@link Executor} that facilitates asynchronous supply and update operations.\n+     *                 A new single thread {@link Executor} will be created using\n+     *                 {@link Executors#newSingleThreadExecutor()} if the {@code null}.\n+     */\n+    TokenLifecycleManager(BiPredicate<? super T, Instant> validator,\n+                          Predicate<? super T> isUpdatable, Predicate<Throwable> shallResupply,\n+                          Function<? super T, CompletionStage<? extends T>> serviceSupplier,\n+                          @Nullable Function<? super T, CompletionStage<? extends T>> serviceUpdater,\n+                          @Nullable Supplier<? extends T> storageSupplier,\n+                          @Nullable Consumer<? super T> storageConsumer,\n+                          @Nullable Executor executor) {\n+        ref = new AtomicReference<>();\n+        serialFuture = new SerialFuture(executor);\n+        this.validator = requireNonNull(validator, \"validator\");\n+        this.isUpdatable = requireNonNull(isUpdatable, \"isUpdatable\");\n+        this.shallResupply = requireNonNull(shallResupply, \"shallResupply\");\n+        this.serviceSupplier = requireNonNull(serviceSupplier, \"serviceSupplier\");\n+        this.serviceUpdater = serviceUpdater;\n+        this.storageSupplier = storageSupplier;\n+        this.storageConsumer = storageConsumer;\n+    }\n+\n+    /**\n+     * Provides managed token object asynchronously. This operation may involve initial token supply or\n+     * token update operation, if required.\n+     */\n+    public CompletionStage<T> get() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMjYzMA==", "bodyText": "Could you rename to asHeaderValue() for consistency with other classes?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552432630", "createdAt": "2021-01-06T08:26:39Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.CaseUtil;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+@UnstableApi\n+public final class ClientAuthorization {\n+\n+    private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+    private static final char AUTHORIZATION_SEPARATOR = ' ';\n+    private static final char CREDENTIALS_SEPARATOR = ':';\n+\n+    private static final String CLIENT_ID = \"client_id\";\n+    private static final String CLIENT_SECRET = \"client_secret\";\n+\n+    private final String authorizationType;\n+    @Nullable\n+    private final Supplier<String> authorizationSupplier;\n+    @Nullable\n+    private final Supplier<? extends Map.Entry<String, String>> credentialsSupplier;\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    public static ClientAuthorization ofBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, null);\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"),\n+                                       requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"), null);\n+    }\n+\n+    private ClientAuthorization(@Nullable Supplier<String> authorizationSupplier,\n+                                @Nullable Supplier<? extends Map.Entry<String, String>> credentialsSupplier,\n+                                @Nullable String authorizationType) {\n+        if (authorizationSupplier == null && credentialsSupplier == null) {\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        this.authorizationSupplier = authorizationSupplier;\n+        this.credentialsSupplier = credentialsSupplier;\n+        this.authorizationType =\n+                authorizationType == null ? DEFAULT_AUTHORIZATION_TYPE : authorizationType;\n+    }\n+\n+    private String composeAuthorizationString() {\n+        final String clientAuthorization;\n+        if (authorizationSupplier != null) {\n+            clientAuthorization = authorizationSupplier.get();\n+        } else if (credentialsSupplier != null) {\n+            final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+            clientAuthorization = encodeClientCredentials(clientCredentials.getKey(),\n+                                                          clientCredentials.getValue());\n+        } else {\n+            // we should not get here\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Fetches client authorization token or client credentials from the supplier and composes client\n+     * {@code Authorization} header value,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+     * }</pre>.\n+     *\n+     * @return encoded client {@code Authorization} header value.\n+     */\n+    public String authorizationHeaderValue() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNDA2Ng==", "bodyText": "How about returning QueryParams, so that a user can choose whether to convert to a String or not?\nHow about renaming to asBodyParameters()? Shorter and 'as' gives a hint of conversion.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552434066", "createdAt": "2021-01-06T08:30:07Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.CaseUtil;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+@UnstableApi\n+public final class ClientAuthorization {\n+\n+    private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+    private static final char AUTHORIZATION_SEPARATOR = ' ';\n+    private static final char CREDENTIALS_SEPARATOR = ':';\n+\n+    private static final String CLIENT_ID = \"client_id\";\n+    private static final String CLIENT_SECRET = \"client_secret\";\n+\n+    private final String authorizationType;\n+    @Nullable\n+    private final Supplier<String> authorizationSupplier;\n+    @Nullable\n+    private final Supplier<? extends Map.Entry<String, String>> credentialsSupplier;\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    public static ClientAuthorization ofBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, null);\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"),\n+                                       requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"), null);\n+    }\n+\n+    private ClientAuthorization(@Nullable Supplier<String> authorizationSupplier,\n+                                @Nullable Supplier<? extends Map.Entry<String, String>> credentialsSupplier,\n+                                @Nullable String authorizationType) {\n+        if (authorizationSupplier == null && credentialsSupplier == null) {\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        this.authorizationSupplier = authorizationSupplier;\n+        this.credentialsSupplier = credentialsSupplier;\n+        this.authorizationType =\n+                authorizationType == null ? DEFAULT_AUTHORIZATION_TYPE : authorizationType;\n+    }\n+\n+    private String composeAuthorizationString() {\n+        final String clientAuthorization;\n+        if (authorizationSupplier != null) {\n+            clientAuthorization = authorizationSupplier.get();\n+        } else if (credentialsSupplier != null) {\n+            final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+            clientAuthorization = encodeClientCredentials(clientCredentials.getKey(),\n+                                                          clientCredentials.getValue());\n+        } else {\n+            // we should not get here\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Fetches client authorization token or client credentials from the supplier and composes client\n+     * {@code Authorization} header value,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+     * }</pre>.\n+     *\n+     * @return encoded client {@code Authorization} header value.\n+     */\n+    public String authorizationHeaderValue() {\n+        return CaseUtil.firstUpperAllLowerCase(authorizationType) +\n+               AUTHORIZATION_SEPARATOR + composeAuthorizationString();\n+    }\n+\n+    /**\n+     * Fetches client credentials from the supplier and composes required body parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+     * }</pre>.\n+     * The client MAY omit the {@code client_secret} parameter if the client secret is an empty string.\n+     */\n+    public void setCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {\n+        requireNonNull(credentialsSupplier, \"credentialsSupplier\");\n+        final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+        formBuilder.add(CLIENT_ID, requireNonNull(clientCredentials.getKey(), CLIENT_ID));\n+        final String clientSecret = clientCredentials.getValue();\n+        if (clientSecret != null && !clientSecret.isEmpty()) {\n+            formBuilder.add(CLIENT_SECRET, clientSecret);\n+        }\n+    }\n+\n+    /**\n+     * Fetches client credentials from the supplier and composes required body parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+     * }</pre>.\n+     * The client MAY omit the {@code client_secret} parameter if the client secret is an empty string.\n+     *\n+     * @return encoded client credentials request body parameters as a {@link String}.\n+     */\n+    public String credentialsBodyParameters() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNDU2MQ==", "bodyText": "Maybe add instead of set, because we're actually adding? We could simplify even further by removing Credentials, i.e. addAsBodyParameters.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552434561", "createdAt": "2021-01-06T08:31:32Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.CaseUtil;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+@UnstableApi\n+public final class ClientAuthorization {\n+\n+    private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+    private static final char AUTHORIZATION_SEPARATOR = ' ';\n+    private static final char CREDENTIALS_SEPARATOR = ':';\n+\n+    private static final String CLIENT_ID = \"client_id\";\n+    private static final String CLIENT_SECRET = \"client_secret\";\n+\n+    private final String authorizationType;\n+    @Nullable\n+    private final Supplier<String> authorizationSupplier;\n+    @Nullable\n+    private final Supplier<? extends Map.Entry<String, String>> credentialsSupplier;\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    public static ClientAuthorization ofBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, null);\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"),\n+                                       requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"), null);\n+    }\n+\n+    private ClientAuthorization(@Nullable Supplier<String> authorizationSupplier,\n+                                @Nullable Supplier<? extends Map.Entry<String, String>> credentialsSupplier,\n+                                @Nullable String authorizationType) {\n+        if (authorizationSupplier == null && credentialsSupplier == null) {\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        this.authorizationSupplier = authorizationSupplier;\n+        this.credentialsSupplier = credentialsSupplier;\n+        this.authorizationType =\n+                authorizationType == null ? DEFAULT_AUTHORIZATION_TYPE : authorizationType;\n+    }\n+\n+    private String composeAuthorizationString() {\n+        final String clientAuthorization;\n+        if (authorizationSupplier != null) {\n+            clientAuthorization = authorizationSupplier.get();\n+        } else if (credentialsSupplier != null) {\n+            final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+            clientAuthorization = encodeClientCredentials(clientCredentials.getKey(),\n+                                                          clientCredentials.getValue());\n+        } else {\n+            // we should not get here\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Fetches client authorization token or client credentials from the supplier and composes client\n+     * {@code Authorization} header value,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+     * }</pre>.\n+     *\n+     * @return encoded client {@code Authorization} header value.\n+     */\n+    public String authorizationHeaderValue() {\n+        return CaseUtil.firstUpperAllLowerCase(authorizationType) +\n+               AUTHORIZATION_SEPARATOR + composeAuthorizationString();\n+    }\n+\n+    /**\n+     * Fetches client credentials from the supplier and composes required body parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+     * }</pre>.\n+     * The client MAY omit the {@code client_secret} parameter if the client secret is an empty string.\n+     */\n+    public void setCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNjQ5Ng==", "bodyText": "Do you think it makes sense to have toString method, with redacted credentials?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552436496", "createdAt": "2021-01-06T08:36:12Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.CaseUtil;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+@UnstableApi\n+public final class ClientAuthorization {\n+\n+    private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+    private static final char AUTHORIZATION_SEPARATOR = ' ';\n+    private static final char CREDENTIALS_SEPARATOR = ':';\n+\n+    private static final String CLIENT_ID = \"client_id\";\n+    private static final String CLIENT_SECRET = \"client_secret\";\n+\n+    private final String authorizationType;\n+    @Nullable\n+    private final Supplier<String> authorizationSupplier;\n+    @Nullable\n+    private final Supplier<? extends Map.Entry<String, String>> credentialsSupplier;\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    public static ClientAuthorization ofBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, null);\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"),\n+                                       requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"), null);\n+    }\n+\n+    private ClientAuthorization(@Nullable Supplier<String> authorizationSupplier,\n+                                @Nullable Supplier<? extends Map.Entry<String, String>> credentialsSupplier,\n+                                @Nullable String authorizationType) {\n+        if (authorizationSupplier == null && credentialsSupplier == null) {\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        this.authorizationSupplier = authorizationSupplier;\n+        this.credentialsSupplier = credentialsSupplier;\n+        this.authorizationType =\n+                authorizationType == null ? DEFAULT_AUTHORIZATION_TYPE : authorizationType;\n+    }\n+\n+    private String composeAuthorizationString() {\n+        final String clientAuthorization;\n+        if (authorizationSupplier != null) {\n+            clientAuthorization = authorizationSupplier.get();\n+        } else if (credentialsSupplier != null) {\n+            final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+            clientAuthorization = encodeClientCredentials(clientCredentials.getKey(),\n+                                                          clientCredentials.getValue());\n+        } else {\n+            // we should not get here\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Fetches client authorization token or client credentials from the supplier and composes client\n+     * {@code Authorization} header value,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+     * }</pre>.\n+     *\n+     * @return encoded client {@code Authorization} header value.\n+     */\n+    public String authorizationHeaderValue() {\n+        return CaseUtil.firstUpperAllLowerCase(authorizationType) +\n+               AUTHORIZATION_SEPARATOR + composeAuthorizationString();\n+    }\n+\n+    /**\n+     * Fetches client credentials from the supplier and composes required body parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+     * }</pre>.\n+     * The client MAY omit the {@code client_secret} parameter if the client secret is an empty string.\n+     */\n+    public void setCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {\n+        requireNonNull(credentialsSupplier, \"credentialsSupplier\");\n+        final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+        formBuilder.add(CLIENT_ID, requireNonNull(clientCredentials.getKey(), CLIENT_ID));\n+        final String clientSecret = clientCredentials.getValue();\n+        if (clientSecret != null && !clientSecret.isEmpty()) {\n+            formBuilder.add(CLIENT_SECRET, clientSecret);\n+        }\n+    }\n+\n+    /**\n+     * Fetches client credentials from the supplier and composes required body parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+     * }</pre>.\n+     * The client MAY omit the {@code client_secret} parameter if the client secret is an empty string.\n+     *\n+     * @return encoded client credentials request body parameters as a {@link String}.\n+     */\n+    public String credentialsBodyParameters() {\n+        final QueryParamsBuilder formBuilder = QueryParams.builder();\n+        setCredentialsAsBodyParameters(formBuilder);\n+        return formBuilder.toQueryString();\n+    }\n+\n+    private static String encodeClientCredentials(String clientId, String clientSecret) {\n+        return Base64.getEncoder()\n+                     .encodeToString(\n+                             (clientId + CREDENTIALS_SEPARATOR + clientSecret)\n+                                     .getBytes(StandardCharsets.UTF_8));\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNjc4Mw==", "bodyText": "Could be final?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552436783", "createdAt": "2021-01-06T08:36:50Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.DEFAULT_TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_IN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.REFRESH_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.CaseUtil;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+@UnstableApi\n+public class GrantedOAuth2AccessToken implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNzQ1OA==", "bodyText": "Could be final", "url": "https://github.com/line/armeria/pull/2840#discussion_r552437458", "createdAt": "2021-01-06T08:38:16Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidClientException.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Client authentication failed (e.g., unknown client, no client authentication included, or\n+ * unsupported authentication method). The authorization server MAY return an HTTP 401\n+ * (Unauthorized) status code to indicate which HTTP authentication schemes are supported. If the\n+ * client attempted to authenticate via the \"Authorization\" request header field, the authorization\n+ * server MUST respond with an HTTP 401 (Unauthorized) status code and include the\n+ * \"WWW-Authenticate\" response header field matching the authentication scheme used by the client.\n+ */\n+@UnstableApi\n+public class InvalidClientException extends TokenRequestException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNzU0NQ==", "bodyText": "Could be final", "url": "https://github.com/line/armeria/pull/2840#discussion_r552437545", "createdAt": "2021-01-06T08:38:27Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidGrantException.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * The provided authorization grant (e.g., authorization code, resource owner credentials) or\n+ * refresh token is invalid, expired, revoked, does not match the redirection URI used in the\n+ * authorization request, or was issued to another client.\n+ */\n+@UnstableApi\n+public class InvalidGrantException extends TokenRequestException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNzY0OQ==", "bodyText": "Could be final", "url": "https://github.com/line/armeria/pull/2840#discussion_r552437649", "createdAt": "2021-01-06T08:38:41Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidRequestException.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * The request is missing a required parameter, includes an unsupported parameter value (other than\n+ * grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism\n+ * for authenticating the client, or is otherwise malformed.\n+ */\n+@UnstableApi\n+public class InvalidRequestException extends TokenRequestException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNzczNg==", "bodyText": "Could be final.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552437736", "createdAt": "2021-01-06T08:38:52Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidScopeException.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * The requested scope is invalid, unknown, malformed, or exceeds the scope granted by the resource\n+ * owner.\n+ */\n+@UnstableApi\n+public class InvalidScopeException extends TokenRequestException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzOTQzMw==", "bodyText": "How about merging TokenRequestExceptionBuilder into this class? It doesn't seem to do anything but parsing.\nHow about renaming this method to parse(rawResponse)?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552439433", "createdAt": "2021-01-06T08:43:03Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRequestException.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * A common token request exception type.\n+ */\n+@UnstableApi\n+public class TokenRequestException extends RuntimeException {\n+\n+    private static final long serialVersionUID = 3324433572773111913L;\n+\n+    /**\n+     * Returns a {@link TokenRequestExceptionBuilder} to build error-specific types\n+     * of {@link TokenRequestException}.\n+     */\n+    public static TokenRequestException of(String rawResponse) {\n+        return TokenRequestExceptionBuilder.parse(rawResponse);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MDUzNg==", "bodyText": "Could be final?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552440536", "createdAt": "2021-01-06T08:45:28Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnauthorizedClientException.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * The authenticated client is not authorized to use this authorization grant type.\n+ */\n+@UnstableApi\n+public class UnauthorizedClientException extends TokenRequestException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MDYyOQ==", "bodyText": "Could be final?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552440629", "createdAt": "2021-01-06T08:45:41Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedGrantTypeException.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * The authorization grant type is not supported by the authorization server.\n+ */\n+@UnstableApi\n+public class UnsupportedGrantTypeException extends TokenRequestException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MDkxMA==", "bodyText": "Could be final.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552440910", "createdAt": "2021-01-06T08:46:14Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedTokenTypeException.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * The authorization server does not support the revocation of the presented token type. That is,\n+ * the client tried to revoke an access token on a server not supporting this feature.\n+ */\n+@UnstableApi\n+public class UnsupportedTokenTypeException extends TokenRequestException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MTUxMg==", "bodyText": "Could all protected methods in this class be final?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552441512", "createdAt": "2021-01-06T08:47:38Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedResponseException;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected WebClient endpoint() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MTk3NQ==", "bodyText": "Could be final?\naddAsBodyParameters?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552441975", "createdAt": "2021-01-06T08:48:45Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedResponseException;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected WebClient endpoint() {\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Returns the authorization endpoint path.\n+     */\n+    protected String endpointPath() {\n+        return endpointPath;\n+    }\n+\n+    /**\n+     * Returns the client authorization object.\n+     */\n+    @Nullable\n+    protected ClientAuthorization clientAuthorization() {\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Extracts data from OK response and converts it to the target type {@code T}.\n+     */\n+    protected abstract T extractOkResults(AggregatedHttpResponse response, QueryParams requestFormData);\n+\n+    /**\n+     * Returns the value for the {@link HttpHeaderNames#AUTHORIZATION}.\n+     */\n+    @Nullable\n+    protected String authorizationHeaderValue() {\n+        return clientAuthorization == null ? null : clientAuthorization.authorizationHeaderValue();\n+    }\n+\n+    /**\n+     * Sets client credentials as form data parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected void setCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MzMwNg==", "bodyText": "Could these two make() methods become final (unless they are overridden)?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552443306", "createdAt": "2021-01-06T08:51:44Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractTokenOperationRequest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE_HINT;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+\n+/**\n+ * A common abstraction for the requests implementing various Token operations request/response flows,\n+ * such as Token Introspection flow\n+ * (<a href=\"https://tools.ietf.org/html/rfc7662#section-2\">[RFC7662], Section 2</a>),\n+ * and Token Revocation flow (<a href=\"https://tools.ietf.org/html/rfc7009\">[RFC7009]</a>).\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractTokenOperationRequest<T> extends AbstractOAuth2Request<T> {\n+\n+    /**\n+     * A common abstraction for the requests implementing various Token operations request/response flows,\n+     * such as Token Introspection flow\n+     * (<a href=\"https://tools.ietf.org/html/rfc7662#section-2\">[RFC7662], Section 2</a>),\n+     * and Token Revocation flow (<a href=\"https://tools.ietf.org/html/rfc7009\">[RFC7009]</a>).\n+     *\n+     * @param operationsEndpoint A {@link WebClient} to facilitate the Token Operations requests. Must\n+     *                           correspond to the required Token Operations endpoint of the OAuth 2 system.\n+     * @param operationsEndpointPath A URI path that corresponds to the token Operations endpoint of the\n+     *                               OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractTokenOperationRequest(WebClient operationsEndpoint, String operationsEndpointPath,\n+                                            @Nullable ClientAuthorization clientAuthorization) {\n+        super(operationsEndpoint, operationsEndpointPath, clientAuthorization);\n+    }\n+\n+    /**\n+     * Makes a token operations (Introspection/Revocation) request using given {@code token} and\n+     * optional {@code tokenType}.\n+     * @param token A token this operation request applies to.\n+     * @param tokenType A hint about the type of the token submitted for (Introspection/Revocation) operation.\n+     *                  Either {@code access_token} or {@code refresh_token} as per\n+     *                  <a href=\"https://tools.ietf.org/html/rfc7009#section-2.1\">[RFC7009], Section 2.1</a>.\n+     * @return A {@link CompletableFuture} carrying the target result.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    public CompletableFuture<T> make(String token, @Nullable String tokenType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MzU5NA==", "bodyText": "Could be final?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552443594", "createdAt": "2021-01-06T08:52:25Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+@UnstableApi\n+public class SerialFuture {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NDA0OQ==", "bodyText": "Could be final?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552444049", "createdAt": "2021-01-06T08:53:31Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.UNSUPPORTED_TOKEN_TYPE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.cache.Cache;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.OAuth2Token;\n+import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;\n+import com.linecorp.armeria.internal.server.auth.oauth2.TokenIntrospectionRequest;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.AuthFailureHandler;\n+import com.linecorp.armeria.server.auth.Authorizer;\n+\n+import io.netty.util.AttributeKey;\n+\n+/**\n+ * Determines whether a given {@link OAuth2Token} is authorized for the service registered in using OAuth 2.0\n+ * Token Introspection. {@code ctx} can be used for storing authorization information about the request for use\n+ * in business logic.\n+ */\n+@UnstableApi\n+public class OAuth2TokenIntrospectionAuthorizer implements Authorizer<OAuth2Token> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NDIzNA==", "bodyText": "permittedScopes?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552444234", "createdAt": "2021-01-06T08:53:54Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.UNSUPPORTED_TOKEN_TYPE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.cache.Cache;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.OAuth2Token;\n+import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;\n+import com.linecorp.armeria.internal.server.auth.oauth2.TokenIntrospectionRequest;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.AuthFailureHandler;\n+import com.linecorp.armeria.server.auth.Authorizer;\n+\n+import io.netty.util.AttributeKey;\n+\n+/**\n+ * Determines whether a given {@link OAuth2Token} is authorized for the service registered in using OAuth 2.0\n+ * Token Introspection. {@code ctx} can be used for storing authorization information about the request for use\n+ * in business logic.\n+ */\n+@UnstableApi\n+public class OAuth2TokenIntrospectionAuthorizer implements Authorizer<OAuth2Token> {\n+\n+    /**\n+     * Returns a newly created {@link OAuth2TokenIntrospectionAuthorizerBuilder}.\n+     *\n+     * @param introspectionEndpoint A {@link WebClient} to facilitate the Token Introspection request. Must\n+     *                              correspond to the Token Introspection endpoint of the OAuth 2.0 system.\n+     * @param introspectionEndpointPath A URI path that corresponds to the Token Introspection endpoint of the\n+     *                                  OAuth 2.0 system.\n+     */\n+    public static OAuth2TokenIntrospectionAuthorizerBuilder builder(WebClient introspectionEndpoint,\n+                                                                    String introspectionEndpointPath) {\n+        return new OAuth2TokenIntrospectionAuthorizerBuilder(introspectionEndpoint, introspectionEndpointPath);\n+    }\n+\n+    static final AttributeKey<Integer> ERROR_CODE = AttributeKey.valueOf(\"x-oauth2-error\");\n+    static final AttributeKey<String> ERROR_TYPE = AttributeKey.valueOf(\"x-oauth2-error-type\");\n+    static final String INVALID_TOKEN = \"invalid_token\";\n+    static final String INSUFFICIENT_SCOPE = \"insufficient_scope\";\n+\n+    private final Cache<String, OAuth2TokenDescriptor> tokenCache;\n+    private final Set<String> permittedScope;\n+    @Nullable\n+    private final String accessTokenType;\n+    @Nullable\n+    private final String realm;\n+    private final TokenIntrospectionRequest tokenIntrospectionRequest;\n+    private final AuthFailureHandler authFailureHandler;\n+\n+    OAuth2TokenIntrospectionAuthorizer(Cache<String, OAuth2TokenDescriptor> tokenCache,\n+                                       @Nullable String accessTokenType, @Nullable String realm,\n+                                       Set<String> permittedScope,\n+                                       TokenIntrospectionRequest tokenIntrospectionRequest) {\n+        this.tokenCache = requireNonNull(tokenCache, \"tokenCache\");\n+        this.accessTokenType = accessTokenType;\n+        this.realm = realm;\n+        this.permittedScope = requireNonNull(permittedScope, \"permittedScope\");\n+        this.tokenIntrospectionRequest =\n+                requireNonNull(tokenIntrospectionRequest, \"tokenIntrospectionRequest\");\n+        authFailureHandler =\n+                new OAuth2AuthorizationFailureHandler(accessTokenType, realm, String.join(\" \", permittedScope));\n+    }\n+\n+    /**\n+     * Scopes permitted by this authorizer. The authorizer will accept any scope if empty.\n+     */\n+    public Set<String> permittedScope() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NDMyNw==", "bodyText": "permittedScopes?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552444327", "createdAt": "2021-01-06T08:54:09Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.UNSUPPORTED_TOKEN_TYPE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.cache.Cache;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.OAuth2Token;\n+import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;\n+import com.linecorp.armeria.internal.server.auth.oauth2.TokenIntrospectionRequest;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.AuthFailureHandler;\n+import com.linecorp.armeria.server.auth.Authorizer;\n+\n+import io.netty.util.AttributeKey;\n+\n+/**\n+ * Determines whether a given {@link OAuth2Token} is authorized for the service registered in using OAuth 2.0\n+ * Token Introspection. {@code ctx} can be used for storing authorization information about the request for use\n+ * in business logic.\n+ */\n+@UnstableApi\n+public class OAuth2TokenIntrospectionAuthorizer implements Authorizer<OAuth2Token> {\n+\n+    /**\n+     * Returns a newly created {@link OAuth2TokenIntrospectionAuthorizerBuilder}.\n+     *\n+     * @param introspectionEndpoint A {@link WebClient} to facilitate the Token Introspection request. Must\n+     *                              correspond to the Token Introspection endpoint of the OAuth 2.0 system.\n+     * @param introspectionEndpointPath A URI path that corresponds to the Token Introspection endpoint of the\n+     *                                  OAuth 2.0 system.\n+     */\n+    public static OAuth2TokenIntrospectionAuthorizerBuilder builder(WebClient introspectionEndpoint,\n+                                                                    String introspectionEndpointPath) {\n+        return new OAuth2TokenIntrospectionAuthorizerBuilder(introspectionEndpoint, introspectionEndpointPath);\n+    }\n+\n+    static final AttributeKey<Integer> ERROR_CODE = AttributeKey.valueOf(\"x-oauth2-error\");\n+    static final AttributeKey<String> ERROR_TYPE = AttributeKey.valueOf(\"x-oauth2-error-type\");\n+    static final String INVALID_TOKEN = \"invalid_token\";\n+    static final String INSUFFICIENT_SCOPE = \"insufficient_scope\";\n+\n+    private final Cache<String, OAuth2TokenDescriptor> tokenCache;\n+    private final Set<String> permittedScope;\n+    @Nullable\n+    private final String accessTokenType;\n+    @Nullable\n+    private final String realm;\n+    private final TokenIntrospectionRequest tokenIntrospectionRequest;\n+    private final AuthFailureHandler authFailureHandler;\n+\n+    OAuth2TokenIntrospectionAuthorizer(Cache<String, OAuth2TokenDescriptor> tokenCache,\n+                                       @Nullable String accessTokenType, @Nullable String realm,\n+                                       Set<String> permittedScope,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NTYwNw==", "bodyText": "final?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552445607", "createdAt": "2021-01-06T08:56:50Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptor.java", "diffHunk": "@@ -0,0 +1,512 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACTIVE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.AUDIENCE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.CLIENT_ID;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_AT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ISSUED_AT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ISSUER;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.JWT_ID;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.NOT_BEFORE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SUBJECT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.USER_NAME;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Defines a structure of the Token Introspection Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc7662#section-2.2\">[RFC7662], Section 2.2</a>.\n+ */\n+@UnstableApi\n+public class OAuth2TokenDescriptor implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NTg0MA==", "bodyText": "Maybe parse is a better name?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552445840", "createdAt": "2021-01-06T08:57:17Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptor.java", "diffHunk": "@@ -0,0 +1,512 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACTIVE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.AUDIENCE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.CLIENT_ID;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_AT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ISSUED_AT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ISSUER;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.JWT_ID;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.NOT_BEFORE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SUBJECT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.USER_NAME;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Defines a structure of the Token Introspection Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc7662#section-2.2\">[RFC7662], Section 2.2</a>.\n+ */\n+@UnstableApi\n+public class OAuth2TokenDescriptor implements Serializable {\n+\n+    private static final long serialVersionUID = -3976877781134216467L;\n+\n+    /**\n+     * Creates a new {@link OAuth2TokenDescriptor} based on the {@code JSON}-formatted raw response body.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @return A new instance of {@link OAuth2TokenDescriptor}.\n+     */\n+    public static OAuth2TokenDescriptor of(String rawResponse) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NjM3NQ==", "bodyText": "Could be final?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552446375", "createdAt": "2021-01-06T08:58:34Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/client/auth/oauth2/AbstractAccessTokenRequest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.internal.common.auth.oauth2.AbstractOAuth2Request;\n+\n+/**\n+ * A common abstraction for the requests implementing various Access Token request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+ */\n+@UnstableApi\n+public abstract class AbstractAccessTokenRequest extends AbstractOAuth2Request<GrantedOAuth2AccessToken> {\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractAccessTokenRequest(WebClient accessTokenEndpoint, String accessTokenEndpointPath,\n+                                         @Nullable ClientAuthorization clientAuthorization) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath, clientAuthorization);\n+    }\n+\n+    /**\n+     * Extracts data from Access Token OK response and converts it to the target\n+     * type {@link GrantedOAuth2AccessToken}.\n+     */\n+    @Override\n+    protected GrantedOAuth2AccessToken extractOkResults(AggregatedHttpResponse response,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NjU4Mw==", "bodyText": "call()?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552446583", "createdAt": "2021-01-06T08:59:01Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+@UnstableApi\n+public class SerialFuture {\n+\n+    private final Queue<Runnable> actions = new LinkedList<>();\n+\n+    @Nullable\n+    private Runnable active;\n+\n+    @Nullable\n+    Executor executor;\n+\n+    /**\n+     * Constructs {@link SerialFuture} with a supplied {@link Executor}.\n+     * @param executor An {@link Executor} to execute asynchronous actions.\n+     */\n+    public SerialFuture(@Nullable Executor executor) {\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Constructs {@link SerialFuture}.\n+     */\n+    public SerialFuture() {\n+        this(null);\n+    }\n+\n+    /**\n+     * Executes submitted {@link Callable} action asynchronously in sequence.\n+     * @param action An asynchronous {@link Callable} action to be executed in sequence.\n+     *               It returns {@link CompletionStage} that produces the final result when the action\n+     *               completes.\n+     * @return Returns a new {@link CompletionStage} with the same result or exception as the {@code action},\n+     *         that executes the given action when this stage completes.\n+     */\n+    public synchronized <V> CompletionStage<V> executeAsync(Callable<CompletionStage<V>> action) {\n+        final CompletableFuture<V> result = new CompletableFuture<>();\n+        actions.add(() -> {\n+            final CompletionStage<V> future;\n+            try {\n+                future = action.call();\n+            } catch (Throwable e) {\n+                result.completeExceptionally(Exceptions.peel(e));\n+                executeNext();\n+                return;\n+            }\n+            // replaced CompletableFuture.whenComplete() with CompletableFuture.handle()\n+            // due to performance issue described at\n+            // <a href=\"https://github.com/line/armeria/pull/1440\">#1440</a>.\n+            future.handle((v, ex) -> {\n+                if (ex == null) {\n+                    result.complete(v);\n+                } else {\n+                    result.completeExceptionally(ex);\n+                }\n+                executeNext();\n+                //noinspection ReturnOfNull\n+                return null;\n+            });\n+        });\n+\n+        if (active == null) {\n+            executeNext();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Calls submitted {@link Callable} action asynchronously in sequence.\n+     * @param action A {@link Callable} action to be called asynchronously in sequence.\n+     *               It returns that produces the final result of computation.\n+     * @return Returns a new {@link CompletionStage} with the same result or exception as the {@code action},\n+     *         that executes the given action when this stage completes.\n+     */\n+    public synchronized <V> CompletionStage<V> callAsync(Callable<V> action) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NjY2OQ==", "bodyText": "execute()?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552446669", "createdAt": "2021-01-06T08:59:13Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+@UnstableApi\n+public class SerialFuture {\n+\n+    private final Queue<Runnable> actions = new LinkedList<>();\n+\n+    @Nullable\n+    private Runnable active;\n+\n+    @Nullable\n+    Executor executor;\n+\n+    /**\n+     * Constructs {@link SerialFuture} with a supplied {@link Executor}.\n+     * @param executor An {@link Executor} to execute asynchronous actions.\n+     */\n+    public SerialFuture(@Nullable Executor executor) {\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Constructs {@link SerialFuture}.\n+     */\n+    public SerialFuture() {\n+        this(null);\n+    }\n+\n+    /**\n+     * Executes submitted {@link Callable} action asynchronously in sequence.\n+     * @param action An asynchronous {@link Callable} action to be executed in sequence.\n+     *               It returns {@link CompletionStage} that produces the final result when the action\n+     *               completes.\n+     * @return Returns a new {@link CompletionStage} with the same result or exception as the {@code action},\n+     *         that executes the given action when this stage completes.\n+     */\n+    public synchronized <V> CompletionStage<V> executeAsync(Callable<CompletionStage<V>> action) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NzI3MA==", "bodyText": "Would it be better renaming to parse(..)?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552447270", "createdAt": "2021-01-06T09:00:38Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.DEFAULT_TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_IN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.REFRESH_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.CaseUtil;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+@UnstableApi\n+public class GrantedOAuth2AccessToken implements Serializable {\n+\n+    private static final long serialVersionUID = 8698118404098897958L;\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessToken} based on the {@code JSON}-formatted raw response body and\n+     * optional raw formatted {@code scope} used to request the token.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @param requestScope OPTIONAL. A list of space-delimited, case-sensitive strings.\n+     *                     The strings are defined by the authorization server.\n+     *                     The authorization server MAY fully or partially ignore the scope requested by the\n+     *                     client, based on the authorization server policy or the resource owner's\n+     *                     instructions. If the issued access token scope is different from the one requested\n+     *                     by the client, the authorization server MUST include the \"scope\" response\n+     *                     parameter to inform the client of the actual scope granted.\n+     *                     If the client omits the scope parameter when requesting authorization, the\n+     *                     authorization server MUST either process the request using a pre-defined default\n+     *                     value or fail the request indicating an invalid scope.\n+     * @return A new instance of {@link GrantedOAuth2AccessToken}.\n+     */\n+    public static GrantedOAuth2AccessToken of(String rawResponse, @Nullable String requestScope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NzQwNA==", "bodyText": "parse(...)?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552447404", "createdAt": "2021-01-06T09:00:56Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessTokenBuilder.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.ISSUED_AT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SCOPE_SEPARATOR;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_IN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.REFRESH_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Builds an instance of {@link GrantedOAuth2AccessToken}.\n+ */\n+@UnstableApi\n+public final class GrantedOAuth2AccessTokenBuilder {\n+\n+    private static final TypeReference<LinkedHashMap<String, String>> MAP_TYPE =\n+            new TypeReference<LinkedHashMap<String, String>>() {};\n+\n+    static GrantedOAuth2AccessToken of(String rawResponse, @Nullable String requestScope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NzkzNA==", "bodyText": "I actually meant inlining and removing this method.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552447934", "createdAt": "2021-01-06T09:02:06Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptorBuilder.java", "diffHunk": "@@ -0,0 +1,331 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.ACTIVE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.AUDIENCE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.CLIENT_ID;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.EXPIRES_AT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.ISSUED_AT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.ISSUER;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.JSON;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.JWT_ID;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.NOT_BEFORE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SCOPE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SCOPE_SEPARATOR;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SUBJECT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.TOKEN_TYPE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.USER_NAME;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Instant;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Builds an instance of {@link OAuth2TokenDescriptor}.\n+ */\n+public class OAuth2TokenDescriptorBuilder {\n+\n+    private static final TypeReference<LinkedHashMap<String, String>> MAP_TYPE =\n+            new TypeReference<LinkedHashMap<String, String>>() {};\n+\n+    static OAuth2TokenDescriptor of(String rawResponse) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2ODQ4MA=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ1MTM4MQ==", "bodyText": "This class doesn't seem to be used anywhere. Is this something you're gonna use in your follow-up PR?\nIs this class meant to be used by a user? If not, we could move it to internal.common.auth.oauth2 package.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552451381", "createdAt": "2021-01-06T09:09:01Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRevocation.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.REFRESH_TOKEN;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.TokenRevocationRequest;\n+\n+/**\n+ * Implements Token Revocation request/response flow,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc7009\">[RFC7009]</a>.\n+ */\n+@UnstableApi\n+public final class TokenRevocation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyNDI4ODQx", "url": "https://github.com/line/armeria/pull/2840#pullrequestreview-562428841", "createdAt": "2021-01-06T09:13:59Z", "commit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOToxMzo1OVrOIO3Glg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOToxMzo1OVrOIO3Glg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ1Mzc4Mg==", "bodyText": "Should we rename to scopes()?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552453782", "createdAt": "2021-01-06T09:13:59Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessTokenBuilder.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.ISSUED_AT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SCOPE_SEPARATOR;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_IN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.REFRESH_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Builds an instance of {@link GrantedOAuth2AccessToken}.\n+ */\n+@UnstableApi\n+public final class GrantedOAuth2AccessTokenBuilder {\n+\n+    private static final TypeReference<LinkedHashMap<String, String>> MAP_TYPE =\n+            new TypeReference<LinkedHashMap<String, String>>() {};\n+\n+    static GrantedOAuth2AccessToken of(String rawResponse, @Nullable String requestScope) {\n+\n+        final LinkedHashMap<String, String> map;\n+        try {\n+            map = JSON.readValue(requireNonNull(rawResponse, \"rawResponse\"), MAP_TYPE);\n+        } catch (JsonProcessingException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        final GrantedOAuth2AccessTokenBuilder builder =\n+                new GrantedOAuth2AccessTokenBuilder(requireNonNull(map.remove(ACCESS_TOKEN), ACCESS_TOKEN));\n+\n+        final String tokenType = map.remove(TOKEN_TYPE);\n+        if (tokenType != null) {\n+            builder.tokenType(tokenType);\n+        }\n+        final String issuedAt = map.remove(ISSUED_AT);\n+        if (issuedAt != null) {\n+            builder.issuedAt(ISO_INSTANT.parse(issuedAt, Instant::from));\n+        }\n+        final String expiresIn = map.remove(EXPIRES_IN);\n+        if (expiresIn != null) {\n+            builder.expiresIn(Duration.ofSeconds(Long.parseLong(expiresIn)));\n+        }\n+        final String refreshToken = map.remove(REFRESH_TOKEN);\n+        if (refreshToken != null) {\n+            builder.refreshToken(refreshToken);\n+        }\n+        String scope = map.remove(SCOPE);\n+        if (scope == null) {\n+            scope = requestScope;\n+        }\n+        if (scope != null) {\n+            builder.scope(scope.split(SCOPE_SEPARATOR));\n+        }\n+        builder.extras(map);\n+\n+        builder.rawResponse(rawResponse);\n+\n+        return builder.build();\n+    }\n+\n+    private final String accessToken;\n+\n+    @Nullable\n+    private String tokenType;\n+\n+    @Nullable\n+    private Duration expiresIn;\n+\n+    @Nullable\n+    private String refreshToken;\n+\n+    private final ImmutableList.Builder<String> scope = ImmutableList.builder();\n+\n+    private final ImmutableMap.Builder<String, String> extras = ImmutableMap.builder();\n+\n+    @Nullable\n+    private Instant issuedAt;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    /**\n+     * Constructs a new instance of {@link GrantedOAuth2AccessTokenBuilder} given the mandatory value\n+     * {@value OAuth2Constants#ACCESS_TOKEN} of the access token issued by the authorization server.\n+     * @param accessToken {@value OAuth2Constants#ACCESS_TOKEN} Access Token response field,\n+     *                    REQUIRED. The access token issued by the authorization server.\n+     */\n+    GrantedOAuth2AccessTokenBuilder(String accessToken) {\n+        this.accessToken = requireNonNull(accessToken, \"accessToken\");\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#TOKEN_TYPE} Access Token response field,\n+     * REQUIRED. The type of the token issued as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     * Value is case insensitive.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder tokenType(String tokenType) {\n+        this.tokenType = requireNonNull(tokenType, \"tokenType\");\n+        return this;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#EXPIRES_IN} Access Token response field,\n+     * RECOMMENDED. {@link Duration} indicating the lifetime of the access token. For example,\n+     * the value 3600 seconds denotes that the access token will expire in one hour from the time\n+     * the response was generated. If omitted, the authorization server SHOULD provide the expiration\n+     * time via other means or document the default value.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder expiresIn(Duration expiresIn) {\n+        this.expiresIn = requireNonNull(expiresIn, \"expiresIn\");\n+        return this;\n+    }\n+\n+    /**\n+     * An {@link Instant} indicating when the Access Token was issued,\n+     * OPTIONAL. The value is NOT supplied with the Access Token response and calculated approximately using\n+     * {@value OAuth2Constants#EXPIRES_IN} field.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder issuedAt(Instant issuedAt) {\n+        this.issuedAt = requireNonNull(issuedAt, \"issuedAt\");\n+        return this;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#REFRESH_TOKEN} Access Token response field,\n+     * OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same\n+     * authorization grant as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder refreshToken(String refreshToken) {\n+        this.refreshToken = requireNonNull(refreshToken, \"refreshToken\");\n+        return this;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#SCOPE} Access Token Response field,\n+     * OPTIONAL. An {@link Iterable} of individual scope values.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder scope(Iterable<String> scope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 175}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5581c70d971f62eb34c2226861e6edadabd386d", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/e5581c70d971f62eb34c2226861e6edadabd386d", "committedDate": "2021-01-08T15:52:52Z", "message": "More review comments by @trustin - Various minor changes.\nNot yet the final set - need to solve Authorizer.successHandler()/failureHandler() problem!"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/ebb4822c919067ba8c42888f55f70fae5a7e418b", "committedDate": "2021-01-08T21:41:10Z", "message": "Another attempt to make Authorizer chaining right"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/3dda250ada08c00be95ddb63f284a3e74f35fa25", "committedDate": "2021-01-15T08:44:38Z", "message": "Optimized SerialFuture implementation:\n- replaced 'serialized' with ReentrantReadWriteLock and replaced LinkedList with ConcurrentLinkedQueue,\n- refactored the test using JUnit5 @ParameterizedTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0ODM5NzIx", "url": "https://github.com/line/armeria/pull/2840#pullrequestreview-574839721", "createdAt": "2021-01-23T11:14:21Z", "commit": {"oid": "e5581c70d971f62eb34c2226861e6edadabd386d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMToxNDoyMlrOIZBbIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMToxODoyMlrOIZBnfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEwODY0MA==", "bodyText": "Incorrect class name?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563108640", "createdAt": "2021-01-23T11:14:22Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidResponseException.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * An HTTP response that is not valid for the given request/response flow.\n+ */\n+@UnstableApi\n+public class InvalidResponseException extends RuntimeException {\n+\n+    private static final long serialVersionUID = -6985569386139579552L;\n+\n+    private final String status;\n+\n+    /**\n+     * Constructs new {@link UnsupportedMediaTypeException}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5581c70d971f62eb34c2226861e6edadabd386d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzExMTgwNA==", "bodyText": "Could just use AtomicInteger?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563111804", "createdAt": "2021-01-23T11:18:22Z", "author": {"login": "trustin"}, "path": "oauth2/src/test/java/com/linecorp/armeria/internal/common/auth/oauth2/SerialFutureTest.java", "diffHunk": "@@ -18,427 +18,263 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n import java.util.concurrent.Callable;\n import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Executor;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ForkJoinPool;\n+import java.util.function.IntFunction;\n+import java.util.stream.Collectors;\n \n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n \n public class SerialFutureTest {\n \n-    volatile int counter;\n-\n-    @Test\n-    void testExecuteAsyncWithExecutorInParallel1() throws Exception {\n-        final Executor executor = Executors.newWorkStealingPool();\n-        final SerialFuture serialFuture = new SerialFuture();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testExecuteAsync1(boolean withExecutor) throws Exception {\n+        final Executor executor = withExecutor ? Executors.newWorkStealingPool() : null;\n+        final SerialFuture serialFuture = new SerialFuture(executor);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n-\n-        // test action that allows invoking serialFuture#executeAsync(Callable) in parallel\n-        // use Executor to implement asynchronous Callable action\n-        final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.executeAsync(() ->\n-                CompletableFuture.supplyAsync(() -> {\n-                    int c = counter;\n-                    try {\n-                        Thread.sleep(timeout);\n-                    } catch (InterruptedException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                    c += 1;\n-                    counter = c;\n-                    return c;\n-                }, executor)\n-            ).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n-        }\n-\n-        // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n-        final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n-            try {\n-                return f.get();\n-            } catch (InterruptedException | ExecutionException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }).toArray(CompletableFuture[]::new);\n-\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n+\n+        final VolatileCounter counter = new VolatileCounter();\n+        final IntFunction<CompletableFuture<Integer>> testAction = i ->\n+                serialFuture.executeAsync(() -> timeoutAction(counter, inc, timeout)).toCompletableFuture();\n+        final CompletableFuture<?>[] futures = Arrays.stream(seq)\n+                                                     .mapToObj(testAction)\n+                                                     .toArray(CompletableFuture[]::new);\n         // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        assertThat(array).containsExactly(seq);\n     }\n \n-    @Test\n-    void testExecuteAsyncWithExecutorInParallel2() throws Exception {\n-        // execute all actions using dedicated Executor\n-        final Executor executor = Executors.newWorkStealingPool();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testExecuteAsyncInParallel1(boolean withExecutor) throws Exception {\n+        final Executor executor = withExecutor ? Executors.newWorkStealingPool() : null;\n         final SerialFuture serialFuture = new SerialFuture(executor);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n \n-        // test action that allows invoking serialFuture#executeAsync(Callable) in parallel\n+        final VolatileCounter counter = new VolatileCounter();\n+        // test action that allows invoking serialFuture#callAsync(Callable) in parallel\n         // use Executor as part of SerialFuture instance\n         final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.executeAsync(() ->\n-                CompletableFuture.supplyAsync(() -> {\n-                    int c = counter;\n-                    try {\n-                        Thread.sleep(timeout);\n-                    } catch (InterruptedException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                    c += 1;\n-                    counter = c;\n-                    return c;\n-                })\n-            ).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n-        }\n-\n+                serialFuture.executeAsync(() -> timeoutAction(counter, inc, timeout)).toCompletableFuture();\n+        final List<Callable<CompletableFuture<Integer>>> testActions = Arrays.stream(seq)\n+                                                                             .mapToObj(i -> testAction)\n+                                                                             .collect(Collectors.toList());\n         // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n+        final ForkJoinPool pool = new ForkJoinPool(count);\n         final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n             try {\n                 return f.get();\n             } catch (InterruptedException | ExecutionException e) {\n                 throw new RuntimeException(e);\n             }\n         }).toArray(CompletableFuture[]::new);\n+        // wait for all futures to complete\n+        CompletableFuture.allOf(futures).join();\n \n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures)\n+                                  .mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        System.out.println(Arrays.toString(array));\n+        assertThat(array).containsExactlyInAnyOrder(seq);\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testExecuteAsync2(boolean withExecutor) throws Exception {\n+        final Executor executor = Executors.newWorkStealingPool();\n+        final SerialFuture serialFuture = new SerialFuture(withExecutor ? executor : null);\n+\n+        final int inc = 1;\n+        final int count = 20;\n+        final long timeout = 10L;\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n+\n+        final VolatileCounter counter = new VolatileCounter();\n+        final IntFunction<CompletableFuture<Integer>> testAction = i ->\n+                serialFuture.executeAsync(() ->\n+                                                  CompletableFuture.supplyAsync(() ->\n+                                                                                        simpleTimeoutAction(\n+                                                                                                counter, inc,\n+                                                                                                timeout),\n+                                                                                executor))\n+                            .toCompletableFuture();\n+        final CompletableFuture<?>[] futures = Arrays.stream(seq)\n+                                                     .mapToObj(testAction)\n+                                                     .toArray(CompletableFuture[]::new);\n         // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        assertThat(array).containsExactly(seq);\n     }\n \n-    @Test\n-    void testExecuteAsyncWithoutExecutorInParallel() throws Exception {\n-        // do not use Executor, execute all actions from the invoker thread\n-        final SerialFuture serialFuture = new SerialFuture();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testExecuteAsyncInParallel2(boolean withExecutor) throws Exception {\n+        final Executor executor = Executors.newWorkStealingPool();\n+        final SerialFuture serialFuture = new SerialFuture(withExecutor ? executor : null);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n \n-        // test action that allows invoking serialFuture#executeAsync(Callable) in parallel\n+        final VolatileCounter counter = new VolatileCounter();\n+        // test action that allows invoking serialFuture#callAsync(Callable) in parallel\n+        // use Executor as part of SerialFuture instance\n         final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.executeAsync(() ->\n-                CompletableFuture.supplyAsync(() -> {\n-                    int c = counter;\n-                    try {\n-                        Thread.sleep(timeout);\n-                    } catch (InterruptedException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                    c += 1;\n-                    counter = c;\n-                    return c;\n-                })\n-            ).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n-        }\n-\n+                serialFuture.executeAsync(() ->\n+                                                  CompletableFuture.supplyAsync(() ->\n+                                                                                        simpleTimeoutAction(\n+                                                                                                counter, inc,\n+                                                                                                timeout),\n+                                                                                executor))\n+                            .toCompletableFuture();\n+        final List<Callable<CompletableFuture<Integer>>> testActions = Arrays.stream(seq)\n+                                                                             .mapToObj(i -> testAction)\n+                                                                             .collect(Collectors.toList());\n         // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n+        final ForkJoinPool pool = new ForkJoinPool(count);\n         final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n             try {\n                 return f.get();\n             } catch (InterruptedException | ExecutionException e) {\n                 throw new RuntimeException(e);\n             }\n         }).toArray(CompletableFuture[]::new);\n-\n         // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        System.out.println(Arrays.toString(array));\n+        assertThat(array).containsExactlyInAnyOrder(seq);\n     }\n \n-    @Test\n-    void testExecuteAsyncWithExecutor1() throws Exception {\n-        final Executor executor = Executors.newWorkStealingPool();\n-        final SerialFuture serialFuture = new SerialFuture();\n-\n-        final int n = 10;\n-        final long timeout = 10L;\n-        counter = 0;\n-\n-        final CompletableFuture<?>[] futures = new CompletableFuture<?>[n];\n-        // invoke serialFuture#executeAsync(Callable) one by one from the test thread\n-        // use Executor to implement asynchronous Callable action\n-        for (int i = 0; i < n; i++) {\n-            futures[i] = serialFuture.executeAsync(() ->\n-                CompletableFuture.supplyAsync(() -> {\n-                    int c = counter;\n-                    try {\n-                        Thread.sleep(timeout);\n-                    } catch (InterruptedException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                    c += 1;\n-                    counter = c;\n-                    return c;\n-                }, executor)\n-            ).toCompletableFuture();\n-        }\n-        CompletableFuture.allOf(futures).join();\n-\n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n-    }\n-\n-    @Test\n-    void testExecuteAsyncWithExecutor2() throws Exception {\n-        // execute all actions using dedicated Executor\n-        final Executor executor = Executors.newWorkStealingPool();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testCallAsync(boolean withExecutor) throws Exception {\n+        final Executor executor = withExecutor ? Executors.newWorkStealingPool() : null;\n         final SerialFuture serialFuture = new SerialFuture(executor);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n-\n-        final CompletableFuture<?>[] futures = new CompletableFuture<?>[n];\n-        // invoke serialFuture#executeAsync(Callable) one by one from the test thread\n-        // use Executor as part of SerialFuture instance\n-        for (int i = 0; i < n; i++) {\n-            futures[i] = serialFuture.executeAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return CompletableFuture.completedFuture(c);\n-            }).toCompletableFuture();\n-        }\n-        CompletableFuture.allOf(futures).join();\n-\n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n-    }\n-\n-    @Test\n-    void testExecuteAsyncWithoutExecutor() throws Exception {\n-        final SerialFuture serialFuture = new SerialFuture();\n-\n-        final int n = 10;\n-        final long timeout = 10L;\n-        counter = 0;\n-\n-        final CompletableFuture<?>[] futures = new CompletableFuture<?>[n];\n-        // invoke serialFuture#executeAsync(Callable) one by one from the test thread\n-        // do not use Executor, execute all actions from the invoker thread\n-        for (int i = 0; i < n; i++) {\n-            futures[i] = serialFuture.executeAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return CompletableFuture.completedFuture(c);\n-            }).toCompletableFuture();\n-        }\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n+\n+        final VolatileCounter counter = new VolatileCounter();\n+        final IntFunction<CompletableFuture<Integer>> testAction = i ->\n+                serialFuture.callAsync(() -> simpleTimeoutAction(counter, inc, timeout)).toCompletableFuture();\n+        final CompletableFuture<?>[] futures = Arrays.stream(seq)\n+                                                     .mapToObj(testAction)\n+                                                     .toArray(CompletableFuture[]::new);\n+        // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        assertThat(array).containsExactly(seq);\n     }\n \n-    @Test\n-    void testCallAsyncWithExecutorInParallel() throws Exception {\n-        // execute all actions using dedicated Executor\n-        final Executor executor = Executors.newWorkStealingPool();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testCallAsyncInParallel(boolean withExecutor) throws Exception {\n+        final Executor executor = withExecutor ? Executors.newWorkStealingPool() : null;\n         final SerialFuture serialFuture = new SerialFuture(executor);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n \n+        final VolatileCounter counter = new VolatileCounter();\n         // test action that allows invoking serialFuture#callAsync(Callable) in parallel\n         // use Executor as part of SerialFuture instance\n         final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.callAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return c;\n-            }).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n-        }\n-\n+                serialFuture.callAsync(() -> simpleTimeoutAction(counter, inc, timeout)).toCompletableFuture();\n+        final List<Callable<CompletableFuture<Integer>>> testActions = Arrays.stream(seq)\n+                                                                             .mapToObj(i -> testAction)\n+                                                                             .collect(Collectors.toList());\n         // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n+        final ForkJoinPool pool = new ForkJoinPool(count);\n         final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n             try {\n                 return f.get();\n             } catch (InterruptedException | ExecutionException e) {\n                 throw new RuntimeException(e);\n             }\n         }).toArray(CompletableFuture[]::new);\n-\n         // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        System.out.println(Arrays.toString(array));\n+        assertThat(array).containsExactlyInAnyOrder(seq);\n     }\n \n-    @Test\n-    void testCallAsyncWithoutExecutorInParallel() throws Exception {\n-        // do not use Executor, execute all actions from the invoker thread\n-        final SerialFuture serialFuture = new SerialFuture();\n-\n-        final int n = 10;\n-        final long timeout = 10L;\n-        counter = 0;\n-\n-        // test action that allows invoking serialFuture#callAsync(Callable) in parallel\n-        final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.callAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return c;\n-            }).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n+    private static int simpleTimeoutAction(VolatileCounter counter, int inc, long timeout) {\n+        int c = counter.get();\n+        try {\n+            Thread.sleep(timeout);\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(e);\n         }\n-\n-        // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n-        final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n-            try {\n-                return f.get();\n-            } catch (InterruptedException | ExecutionException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }).toArray(CompletableFuture[]::new);\n-\n-        // wait for all futures to complete\n-        CompletableFuture.allOf(futures).join();\n-\n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        c += inc;\n+        counter.set(c);\n+        return c;\n     }\n \n-    @Test\n-    void testCallAsyncWithExecutor() throws Exception {\n-        // execute all actions using dedicated Executor\n-        final Executor executor = Executors.newWorkStealingPool();\n-        final SerialFuture serialFuture = new SerialFuture(executor);\n-\n-        final int n = 10;\n-        final long timeout = 10L;\n-        counter = 0;\n+    private static CompletionStage<Integer> timeoutAction(VolatileCounter counter, int inc, long timeout) {\n+        return CompletableFuture.completedFuture(simpleTimeoutAction(counter, inc, timeout));\n+    }\n \n-        final CompletableFuture<?>[] futures = new CompletableFuture<?>[n];\n-        // invoke serialFuture#callAsync(Callable) one by one from the test thread\n-        // use Executor as part of SerialFuture instance\n-        for (int i = 0; i < n; i++) {\n-            futures[i] = serialFuture.callAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return c;\n-            }).toCompletableFuture();\n+    private static int[] createArithmeticSequence(int start, int inc, int count) {\n+        final int[] seq = new int[count];\n+        int current = start;\n+        for (int i = 0; i < count; i++) {\n+            seq[i] = current;\n+            current += inc;\n         }\n-        CompletableFuture.allOf(futures).join();\n-\n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        return seq;\n     }\n \n-    @Test\n-    void testCallAsyncWithoutExecutor() throws Exception {\n-        final SerialFuture serialFuture = new SerialFuture();\n+    private static final class VolatileCounter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 548}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0ODQwNDA5", "url": "https://github.com/line/armeria/pull/2840#pullrequestreview-574840409", "createdAt": "2021-01-23T11:27:47Z", "commit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMToyNzo0N1rOIZCFkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMToyNzo0N1rOIZCFkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzExOTUwNA==", "bodyText": "final?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563119504", "createdAt": "2021-01-23T11:27:47Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AbstractAuthorizerWithHandlers.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Provides base implementation for an {@link Authorizer} that defines custom\n+ * {@link AuthSuccessHandler}/{@link AuthFailureHandler}s.\n+ * @param <T> a type of authorization data. This typically is {@link HttpRequest}.\n+ */\n+@UnstableApi\n+public abstract class AbstractAuthorizerWithHandlers<T> implements Authorizer<T> {\n+\n+    @Override\n+    public CompletionStage<Boolean> authorize(ServiceRequestContext ctx, T data) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0ODQwNjQ5", "url": "https://github.com/line/armeria/pull/2840#pullrequestreview-574840649", "createdAt": "2021-01-23T11:33:19Z", "commit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMTozMzoxOVrOIZCWyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMTozNzo1NlrOIZCk_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEyMzkxNQ==", "bodyText": "Does AuthorizationResult sound better?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563123915", "createdAt": "2021-01-23T11:33:19Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Provides a status of the request authorization operation, optionally combined with {@link AuthSuccessHandler}\n+ * and {@link AuthFailureHandler} to facilitate custom status handling.\n+ */\n+@UnstableApi\n+public interface AuthorizationStatus {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEyNDE1Mg==", "bodyText": "status -> authorized?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563124152", "createdAt": "2021-01-23T11:33:38Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Provides a status of the request authorization operation, optionally combined with {@link AuthSuccessHandler}\n+ * and {@link AuthFailureHandler} to facilitate custom status handling.\n+ */\n+@UnstableApi\n+public interface AuthorizationStatus {\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} based on boolean status.\n+     */\n+    static AuthorizationStatus of(boolean status) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEyNTM0MQ==", "bodyText": "isAuthorized()?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563125341", "createdAt": "2021-01-23T11:35:17Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Provides a status of the request authorization operation, optionally combined with {@link AuthSuccessHandler}\n+ * and {@link AuthFailureHandler} to facilitate custom status handling.\n+ */\n+@UnstableApi\n+public interface AuthorizationStatus {\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} based on boolean status.\n+     */\n+    static AuthorizationStatus of(boolean status) {\n+        return new AuthorizationStatusImpl(status);\n+    }\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} based on boolean status.\n+     */\n+    @Nullable\n+    static AuthorizationStatus of(@Nullable Boolean status) {\n+        if (status == null) {\n+            return null;\n+        }\n+        return new AuthorizationStatusImpl(status);\n+    }\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} success status with optional {@link AuthSuccessHandler}.\n+     */\n+    static AuthorizationStatus ofSuccess(@Nullable AuthSuccessHandler successHandler) {\n+        return new AuthorizationStatusImpl(successHandler);\n+    }\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} success status with optional {@link AuthFailureHandler}.\n+     */\n+    static AuthorizationStatus ofFailure(@Nullable AuthFailureHandler failureHandler) {\n+        return new AuthorizationStatusImpl(failureHandler);\n+    }\n+\n+    /**\n+     * A status of the request authorization operation.\n+     * @return {@code true} if the request is authorized, or {@code false} otherwise.\n+     */\n+    boolean status();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEyNTgzOA==", "bodyText": "Could you explain what null means and when null is returned in Javadoc?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563125838", "createdAt": "2021-01-23T11:35:52Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Provides a status of the request authorization operation, optionally combined with {@link AuthSuccessHandler}\n+ * and {@link AuthFailureHandler} to facilitate custom status handling.\n+ */\n+@UnstableApi\n+public interface AuthorizationStatus {\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} based on boolean status.\n+     */\n+    static AuthorizationStatus of(boolean status) {\n+        return new AuthorizationStatusImpl(status);\n+    }\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} based on boolean status.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEyNzU0OQ==", "bodyText": "Could you explain what null data means and what the expected behavior of the method in Javadoc?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563127549", "createdAt": "2021-01-23T11:37:56Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/Authorizer.java", "diffHunk": "@@ -43,38 +43,28 @@\n      */\n     CompletionStage<Boolean> authorize(ServiceRequestContext ctx, T data);\n \n+    /**\n+     * Authorizes the given {@code data}.\n+     *\n+     * @return a {@link CompletionStage} that will resolve to {@link AuthorizationStatus}. If the future\n+     *     resolves exceptionally, the request will not be authorized.\n+     */\n+    default CompletionStage<AuthorizationStatus> authorizeAndSupplyHandlers(ServiceRequestContext ctx,\n+                                                                            @Nullable T data) {\n+        if (data == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0ODQ1MzUx", "url": "https://github.com/line/armeria/pull/2840#pullrequestreview-574845351", "createdAt": "2021-01-23T13:00:46Z", "commit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMzowMDo0NlrOIZD9tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMzozMTozM1rOIZEJCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MDI2MQ==", "bodyText": "nit style:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n          \n          \n            \n                    this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");\n          \n          \n            \n                    this.endpoint = requireNonNull(endpoint, \"endpoint\");\n          \n          \n            \n                    this.endpointPath = requireNonNull(endpointPath, \"endpointPath\");", "url": "https://github.com/line/armeria/pull/2840#discussion_r563150261", "createdAt": "2021-01-23T13:00:46Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedResponseException;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MDM2OQ==", "bodyText": "A MediaType will be converted to a String in StringValueConverter.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    headersBuilder.add(HttpHeaderNames.CONTENT_TYPE, MediaType.FORM_DATA.toString());\n          \n          \n            \n                    headersBuilder.addObject(HttpHeaderNames.CONTENT_TYPE, MediaType.FORM_DATA);", "url": "https://github.com/line/armeria/pull/2840#discussion_r563150369", "createdAt": "2021-01-23T13:02:13Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedResponseException;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected final WebClient endpoint() {\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Returns the authorization endpoint path.\n+     */\n+    protected final String endpointPath() {\n+        return endpointPath;\n+    }\n+\n+    /**\n+     * Returns the client authorization object.\n+     */\n+    @Nullable\n+    protected final ClientAuthorization clientAuthorization() {\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Extracts data from OK response and converts it to the target type {@code T}.\n+     */\n+    protected abstract T extractOkResults(AggregatedHttpResponse response, QueryParams requestFormData);\n+\n+    /**\n+     * Returns the value for the {@link HttpHeaderNames#AUTHORIZATION}.\n+     */\n+    @Nullable\n+    protected final String authorizationHeaderValue() {\n+        return clientAuthorization == null ? null : clientAuthorization.asHeaderValue();\n+    }\n+\n+    /**\n+     * Sets client credentials as form data parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected final void addCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {\n+        if (clientAuthorization != null) {\n+            clientAuthorization.addAsBodyParameters(formBuilder);\n+        }\n+    }\n+\n+    /**\n+     * Makes a request to the authorization endpoint using supplied {@code requestForm} parameters and converts\n+     * the result to the given type {@code T}.\n+     */\n+    protected CompletableFuture<T> executeWithParameters(QueryParams requestFormData) {\n+        final HttpResponse response = endpoint().execute(createHttpRequest(endpointPath, requestFormData));\n+        // when response aggregated, then extract the results...\n+        return response.aggregate().thenApply(r -> extractResults(r, requestFormData));\n+    }\n+\n+    /**\n+     * Produces {@link HttpRequest} based on this object.\n+     */\n+    private HttpRequest createHttpRequest(String endpointPath, QueryParams requestFormData) {\n+        final RequestHeadersBuilder headersBuilder =\n+                RequestHeaders.of(HttpMethod.POST, endpointPath).toBuilder();\n+        final String authorizationHeaderValue = authorizationHeaderValue();\n+        if (authorizationHeaderValue != null) {\n+            headersBuilder.add(HttpHeaderNames.AUTHORIZATION, authorizationHeaderValue);\n+        } else {\n+            requestFormData = requestFormData.withMutations(this::addCredentialsAsBodyParameters);\n+        }\n+        headersBuilder.add(HttpHeaderNames.CONTENT_TYPE, MediaType.FORM_DATA.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MDQ1Nw==", "bodyText": "We can directly create a RequestHeadersBuilder\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final RequestHeadersBuilder headersBuilder =\n          \n          \n            \n                            RequestHeaders.of(HttpMethod.POST, endpointPath).toBuilder();\n          \n          \n            \n                    final RequestHeadersBuilder headersBuilder =\n          \n          \n            \n                            RequestHeaders.builder(HttpMethod.POST, endpointPath);", "url": "https://github.com/line/armeria/pull/2840#discussion_r563150457", "createdAt": "2021-01-23T13:03:23Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedResponseException;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected final WebClient endpoint() {\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Returns the authorization endpoint path.\n+     */\n+    protected final String endpointPath() {\n+        return endpointPath;\n+    }\n+\n+    /**\n+     * Returns the client authorization object.\n+     */\n+    @Nullable\n+    protected final ClientAuthorization clientAuthorization() {\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Extracts data from OK response and converts it to the target type {@code T}.\n+     */\n+    protected abstract T extractOkResults(AggregatedHttpResponse response, QueryParams requestFormData);\n+\n+    /**\n+     * Returns the value for the {@link HttpHeaderNames#AUTHORIZATION}.\n+     */\n+    @Nullable\n+    protected final String authorizationHeaderValue() {\n+        return clientAuthorization == null ? null : clientAuthorization.asHeaderValue();\n+    }\n+\n+    /**\n+     * Sets client credentials as form data parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected final void addCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {\n+        if (clientAuthorization != null) {\n+            clientAuthorization.addAsBodyParameters(formBuilder);\n+        }\n+    }\n+\n+    /**\n+     * Makes a request to the authorization endpoint using supplied {@code requestForm} parameters and converts\n+     * the result to the given type {@code T}.\n+     */\n+    protected CompletableFuture<T> executeWithParameters(QueryParams requestFormData) {\n+        final HttpResponse response = endpoint().execute(createHttpRequest(endpointPath, requestFormData));\n+        // when response aggregated, then extract the results...\n+        return response.aggregate().thenApply(r -> extractResults(r, requestFormData));\n+    }\n+\n+    /**\n+     * Produces {@link HttpRequest} based on this object.\n+     */\n+    private HttpRequest createHttpRequest(String endpointPath, QueryParams requestFormData) {\n+        final RequestHeadersBuilder headersBuilder =\n+                RequestHeaders.of(HttpMethod.POST, endpointPath).toBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MTMwMw==", "bodyText": "Use the local variable?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!errorResponse.content().isEmpty()) {\n          \n          \n            \n                    if (!errorResponseContents.isEmpty()) {", "url": "https://github.com/line/armeria/pull/2840#discussion_r563151303", "createdAt": "2021-01-23T13:12:28Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedResponseException;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected final WebClient endpoint() {\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Returns the authorization endpoint path.\n+     */\n+    protected final String endpointPath() {\n+        return endpointPath;\n+    }\n+\n+    /**\n+     * Returns the client authorization object.\n+     */\n+    @Nullable\n+    protected final ClientAuthorization clientAuthorization() {\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Extracts data from OK response and converts it to the target type {@code T}.\n+     */\n+    protected abstract T extractOkResults(AggregatedHttpResponse response, QueryParams requestFormData);\n+\n+    /**\n+     * Returns the value for the {@link HttpHeaderNames#AUTHORIZATION}.\n+     */\n+    @Nullable\n+    protected final String authorizationHeaderValue() {\n+        return clientAuthorization == null ? null : clientAuthorization.asHeaderValue();\n+    }\n+\n+    /**\n+     * Sets client credentials as form data parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected final void addCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {\n+        if (clientAuthorization != null) {\n+            clientAuthorization.addAsBodyParameters(formBuilder);\n+        }\n+    }\n+\n+    /**\n+     * Makes a request to the authorization endpoint using supplied {@code requestForm} parameters and converts\n+     * the result to the given type {@code T}.\n+     */\n+    protected CompletableFuture<T> executeWithParameters(QueryParams requestFormData) {\n+        final HttpResponse response = endpoint().execute(createHttpRequest(endpointPath, requestFormData));\n+        // when response aggregated, then extract the results...\n+        return response.aggregate().thenApply(r -> extractResults(r, requestFormData));\n+    }\n+\n+    /**\n+     * Produces {@link HttpRequest} based on this object.\n+     */\n+    private HttpRequest createHttpRequest(String endpointPath, QueryParams requestFormData) {\n+        final RequestHeadersBuilder headersBuilder =\n+                RequestHeaders.of(HttpMethod.POST, endpointPath).toBuilder();\n+        final String authorizationHeaderValue = authorizationHeaderValue();\n+        if (authorizationHeaderValue != null) {\n+            headersBuilder.add(HttpHeaderNames.AUTHORIZATION, authorizationHeaderValue);\n+        } else {\n+            requestFormData = requestFormData.withMutations(this::addCredentialsAsBodyParameters);\n+        }\n+        headersBuilder.add(HttpHeaderNames.CONTENT_TYPE, MediaType.FORM_DATA.toString());\n+\n+        return HttpRequest.of(headersBuilder.build(), HttpData.ofUtf8(requestFormData.toQueryString()));\n+    }\n+\n+    /**\n+     * Extracts the result and convert it to the target type {@code T} or throw an error in case of an error\n+     * result.\n+     * @param response An {@link AggregatedHttpResponse} returned by the authorization endpoint.\n+     * @param requestFormData A {@link QueryParams} that contains all the elements of the request form sent with\n+     *                        the request.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    @Nullable\n+    protected T extractResults(AggregatedHttpResponse response, QueryParams requestFormData) {\n+        final HttpStatus status = response.status();\n+        switch (status.code()) {\n+            case 200: // OK\n+                // expected Content-Type: application/json;charset=UTF-8\n+                validateContentType(response, MediaType.JSON);\n+                return extractOkResults(response, requestFormData);\n+            case 400: // Bad Request\n+                // expected Content-Type: application/json;charset=UTF-8\n+                validateContentType(response, MediaType.JSON);\n+                throw onBadRequestError(response);\n+            case 401: // Unauthorized\n+                throw onUnauthorizedError(response);\n+        }\n+        throw new UnsupportedResponseException(status, response.contentUtf8());\n+    }\n+\n+    /**\n+     * Composes {@link TokenRequestException} upon 400 Bad Request response\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-5.2\">[RFC6749], Section 5.2</a>.\n+     * @param errorResponse response received from the server\n+     * @return an instance of {@link TokenRequestException}\n+     */\n+    protected TokenRequestException onBadRequestError(AggregatedHttpResponse errorResponse) {\n+        return TokenRequestException.parse(errorResponse.contentUtf8());\n+    }\n+\n+    /**\n+     * Composes {@link InvalidClientException} upon 401 Unauthorized response\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-5.2\">[RFC6749], Section 5.2</a> (invalid_client).\n+     * @param errorResponse response received from the server\n+     * @return an instance of {@link InvalidClientException}\n+     */\n+    protected TokenRequestException onUnauthorizedError(AggregatedHttpResponse errorResponse) {\n+        final StringBuilder messageBuilder = new StringBuilder().append(errorResponse.status());\n+        final String wwwAuthenticate = errorResponse.headers().get(HttpHeaderNames.WWW_AUTHENTICATE);\n+        if (wwwAuthenticate != null) {\n+            messageBuilder.append(\": \").append(wwwAuthenticate);\n+        }\n+        final HttpData errorResponseContents = errorResponse.content();\n+        if (!errorResponse.content().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MjAxMw==", "bodyText": "nit: How about checking for null of token before creating QueryParamsBuilder?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563152013", "createdAt": "2021-01-23T13:19:43Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractTokenOperationRequest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE_HINT;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+\n+/**\n+ * A common abstraction for the requests implementing various Token operations request/response flows,\n+ * such as Token Introspection flow\n+ * (<a href=\"https://tools.ietf.org/html/rfc7662#section-2\">[RFC7662], Section 2</a>),\n+ * and Token Revocation flow (<a href=\"https://tools.ietf.org/html/rfc7009\">[RFC7009]</a>).\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractTokenOperationRequest<T> extends AbstractOAuth2Request<T> {\n+\n+    /**\n+     * A common abstraction for the requests implementing various Token operations request/response flows,\n+     * such as Token Introspection flow\n+     * (<a href=\"https://tools.ietf.org/html/rfc7662#section-2\">[RFC7662], Section 2</a>),\n+     * and Token Revocation flow (<a href=\"https://tools.ietf.org/html/rfc7009\">[RFC7009]</a>).\n+     *\n+     * @param operationsEndpoint A {@link WebClient} to facilitate the Token Operations requests. Must\n+     *                           correspond to the required Token Operations endpoint of the OAuth 2 system.\n+     * @param operationsEndpointPath A URI path that corresponds to the token Operations endpoint of the\n+     *                               OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractTokenOperationRequest(WebClient operationsEndpoint, String operationsEndpointPath,\n+                                            @Nullable ClientAuthorization clientAuthorization) {\n+        super(operationsEndpoint, operationsEndpointPath, clientAuthorization);\n+    }\n+\n+    /**\n+     * Makes a token operations (Introspection/Revocation) request using given {@code token} and\n+     * optional {@code tokenType}.\n+     * @param token A token this operation request applies to.\n+     * @param tokenType A hint about the type of the token submitted for (Introspection/Revocation) operation.\n+     *                  Either {@code access_token} or {@code refresh_token} as per\n+     *                  <a href=\"https://tools.ietf.org/html/rfc7009#section-2.1\">[RFC7009], Section 2.1</a>.\n+     * @return A {@link CompletableFuture} carrying the target result.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    public CompletableFuture<T> make(String token, @Nullable String tokenType) {\n+        final QueryParamsBuilder requestFormBuilder = QueryParams.builder();\n+\n+        // populate request form data\n+        // MANDATORY token\n+        requestFormBuilder.add(TOKEN, Objects.requireNonNull(token, TOKEN));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MjE0MA==", "bodyText": "@UnstableApi could be removed for internal package.", "url": "https://github.com/line/armeria/pull/2840#discussion_r563152140", "createdAt": "2021-01-23T13:21:04Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/CaseUtil.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Ascii;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+@UnstableApi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MjI0Nw==", "bodyText": "global comment in this file: Please use 4 spaces for indentation.", "url": "https://github.com/line/armeria/pull/2840#discussion_r563152247", "createdAt": "2021-01-23T13:22:24Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/CaseUtil.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Ascii;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+@UnstableApi\n+public final class CaseUtil {\n+\n+  @Nullable\n+  public static String firstUpperCase(@Nullable String word) {\n+    if (word == null || word.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MzE2Mw==", "bodyText": "Remove @UnstableApi\npublic final class for consistency?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563153163", "createdAt": "2021-01-23T13:31:33Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/OAuth2Constants.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Common OAuth 2.0 constants.\n+ */\n+@UnstableApi\n+public interface OAuth2Constants {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0OTMyMDA1", "url": "https://github.com/line/armeria/pull/2840#pullrequestreview-574932005", "createdAt": "2021-01-24T13:45:55Z", "commit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQxMzo0NTo1NlrOIZMzvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQwNzo0OToyNlrOIZaWBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI5NTE2Ng==", "bodyText": "nit: Add @VisibleForTesting?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563295166", "createdAt": "2021-01-24T13:45:56Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.DEFAULT_TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_IN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.REFRESH_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.CaseUtil;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+@UnstableApi\n+public class GrantedOAuth2AccessToken implements Serializable {\n+\n+    private static final long serialVersionUID = 8698118404098897958L;\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessToken} based on the {@code JSON}-formatted raw response body and\n+     * optional raw formatted {@code scope} used to request the token.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @param requestScope OPTIONAL. A list of space-delimited, case-sensitive strings.\n+     *                     The strings are defined by the authorization server.\n+     *                     The authorization server MAY fully or partially ignore the scope requested by the\n+     *                     client, based on the authorization server policy or the resource owner's\n+     *                     instructions. If the issued access token scope is different from the one requested\n+     *                     by the client, the authorization server MUST include the \"scope\" response\n+     *                     parameter to inform the client of the actual scope granted.\n+     *                     If the client omits the scope parameter when requesting authorization, the\n+     *                     authorization server MUST either process the request using a pre-defined default\n+     *                     value or fail the request indicating an invalid scope.\n+     * @return A new instance of {@link GrantedOAuth2AccessToken}.\n+     */\n+    public static GrantedOAuth2AccessToken parse(String rawResponse, @Nullable String requestScope) {\n+        return GrantedOAuth2AccessTokenBuilder.parse(rawResponse, requestScope);\n+    }\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessTokenBuilder} to build a new {@link GrantedOAuth2AccessToken} and\n+     * supplied it with a value of {@code access_token} Access Token response field.\n+     * @return A new instance of {@link GrantedOAuth2AccessTokenBuilder}.\n+     */\n+    public static GrantedOAuth2AccessTokenBuilder builder(String accessToken) {\n+        return new GrantedOAuth2AccessTokenBuilder(accessToken);\n+    }\n+\n+    static final String ISSUED_AT = \"issued_at\";\n+\n+    static final String SCOPE_SEPARATOR = \" \";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI5NTYwNA==", "bodyText": "indent?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new GrantedOAuth2AccessToken(accessToken, tokenType,\n          \n          \n            \n                                                  (issuedAt == null) ? Instant.now() : issuedAt, expiresIn,\n          \n          \n            \n                                                        refreshToken, scope.build(), extras.build(), rawResponse);\n          \n          \n            \n                    return new GrantedOAuth2AccessToken(accessToken, tokenType,\n          \n          \n            \n                                                        (issuedAt == null) ? Instant.now() : issuedAt, expiresIn,\n          \n          \n            \n                                                        refreshToken, scope.build(), extras.build(), rawResponse);", "url": "https://github.com/line/armeria/pull/2840#discussion_r563295604", "createdAt": "2021-01-24T13:48:50Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessTokenBuilder.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.ISSUED_AT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SCOPE_SEPARATOR;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_IN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.REFRESH_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Builds an instance of {@link GrantedOAuth2AccessToken}.\n+ */\n+@UnstableApi\n+public final class GrantedOAuth2AccessTokenBuilder {\n+\n+    private static final TypeReference<LinkedHashMap<String, String>> MAP_TYPE =\n+            new TypeReference<LinkedHashMap<String, String>>() {};\n+\n+    static GrantedOAuth2AccessToken parse(String rawResponse, @Nullable String requestScope) {\n+\n+        final LinkedHashMap<String, String> map;\n+        try {\n+            map = JSON.readValue(requireNonNull(rawResponse, \"rawResponse\"), MAP_TYPE);\n+        } catch (JsonProcessingException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        final GrantedOAuth2AccessTokenBuilder builder =\n+                new GrantedOAuth2AccessTokenBuilder(requireNonNull(map.remove(ACCESS_TOKEN), ACCESS_TOKEN));\n+\n+        final String tokenType = map.remove(TOKEN_TYPE);\n+        if (tokenType != null) {\n+            builder.tokenType(tokenType);\n+        }\n+        final String issuedAt = map.remove(ISSUED_AT);\n+        if (issuedAt != null) {\n+            builder.issuedAt(ISO_INSTANT.parse(issuedAt, Instant::from));\n+        }\n+        final String expiresIn = map.remove(EXPIRES_IN);\n+        if (expiresIn != null) {\n+            builder.expiresIn(Duration.ofSeconds(Long.parseLong(expiresIn)));\n+        }\n+        final String refreshToken = map.remove(REFRESH_TOKEN);\n+        if (refreshToken != null) {\n+            builder.refreshToken(refreshToken);\n+        }\n+        String scope = map.remove(SCOPE);\n+        if (scope == null) {\n+            scope = requestScope;\n+        }\n+        if (scope != null) {\n+            builder.scope(scope.split(SCOPE_SEPARATOR));\n+        }\n+        builder.extras(map);\n+\n+        builder.rawResponse(rawResponse);\n+\n+        return builder.build();\n+    }\n+\n+    private final String accessToken;\n+\n+    @Nullable\n+    private String tokenType;\n+\n+    @Nullable\n+    private Duration expiresIn;\n+\n+    @Nullable\n+    private String refreshToken;\n+\n+    private final ImmutableList.Builder<String> scope = ImmutableList.builder();\n+\n+    private final ImmutableMap.Builder<String, String> extras = ImmutableMap.builder();\n+\n+    @Nullable\n+    private Instant issuedAt;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    /**\n+     * Constructs a new instance of {@link GrantedOAuth2AccessTokenBuilder} given the mandatory value\n+     * {@value OAuth2Constants#ACCESS_TOKEN} of the access token issued by the authorization server.\n+     * @param accessToken {@value OAuth2Constants#ACCESS_TOKEN} Access Token response field,\n+     *                    REQUIRED. The access token issued by the authorization server.\n+     */\n+    GrantedOAuth2AccessTokenBuilder(String accessToken) {\n+        this.accessToken = requireNonNull(accessToken, \"accessToken\");\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#TOKEN_TYPE} Access Token response field,\n+     * REQUIRED. The type of the token issued as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     * Value is case insensitive.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder tokenType(String tokenType) {\n+        this.tokenType = requireNonNull(tokenType, \"tokenType\");\n+        return this;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#EXPIRES_IN} Access Token response field,\n+     * RECOMMENDED. {@link Duration} indicating the lifetime of the access token. For example,\n+     * the value 3600 seconds denotes that the access token will expire in one hour from the time\n+     * the response was generated. If omitted, the authorization server SHOULD provide the expiration\n+     * time via other means or document the default value.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder expiresIn(Duration expiresIn) {\n+        this.expiresIn = requireNonNull(expiresIn, \"expiresIn\");\n+        return this;\n+    }\n+\n+    /**\n+     * An {@link Instant} indicating when the Access Token was issued,\n+     * OPTIONAL. The value is NOT supplied with the Access Token response and calculated approximately using\n+     * {@value OAuth2Constants#EXPIRES_IN} field.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder issuedAt(Instant issuedAt) {\n+        this.issuedAt = requireNonNull(issuedAt, \"issuedAt\");\n+        return this;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#REFRESH_TOKEN} Access Token response field,\n+     * OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same\n+     * authorization grant as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder refreshToken(String refreshToken) {\n+        this.refreshToken = requireNonNull(refreshToken, \"refreshToken\");\n+        return this;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#SCOPE} Access Token Response field,\n+     * OPTIONAL. An {@link Iterable} of individual scope values.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder scope(Iterable<String> scope) {\n+        this.scope.addAll(requireNonNull(scope, \"scope\"));\n+        return this;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#SCOPE} Access Token Response field,\n+     * OPTIONAL. An array of individual scope values.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder scope(String... scope) {\n+        this.scope.add(requireNonNull(scope, \"scope\"));\n+        return this;\n+    }\n+\n+    /**\n+     * A pair of extra system-specific token parameters included with Access Token Response,\n+     * OPTIONAL.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder extras(String key, String value) {\n+        extras.put(key, value);\n+        return this;\n+    }\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Access Token Response,\n+     * OPTIONAL.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder extras(Map<String, String> extras) {\n+        this.extras.putAll(extras);\n+        return this;\n+    }\n+\n+    /**\n+     * An {@link Iterable} of extra system-specific token parameters included with Access Token Response,\n+     * OPTIONAL.\n+     */\n+    @SuppressWarnings(\"UnstableApiUsage\")\n+    public GrantedOAuth2AccessTokenBuilder extras(\n+            Iterable<? extends Map.Entry<String, String>> extras) {\n+        this.extras.putAll(extras);\n+        return this;\n+    }\n+\n+    private GrantedOAuth2AccessTokenBuilder rawResponse(String rawResponse) {\n+        this.rawResponse = requireNonNull(rawResponse, \"rawResponse\");\n+        return this;\n+    }\n+\n+    /**\n+     * Builds a new instance of {@link GrantedOAuth2AccessToken} based on the configured parameters.\n+     */\n+    public GrantedOAuth2AccessToken build() {\n+        return new GrantedOAuth2AccessToken(accessToken, tokenType,\n+                                      (issuedAt == null) ? Instant.now() : issuedAt, expiresIn,\n+                                            refreshToken, scope.build(), extras.build(), rawResponse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzMwNDM1Ng==", "bodyText": "Armeria does not expose Guava as a public API. It is only used for internal implementation which is relocated and shaded.\nHow about taking cacheSpec and using Caffeine cache instead of Guava cache as we did in \n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java\n    \n    \n         Line 304\n      in\n      bbc877f\n    \n    \n    \n    \n\n        \n          \n           public DnsResolverGroupBuilder cacheSpec(String cacheSpec) {", "url": "https://github.com/line/armeria/pull/2840#discussion_r563304356", "createdAt": "2021-01-24T14:56:47Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizerBuilder.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;\n+import com.linecorp.armeria.internal.server.auth.oauth2.TokenIntrospectionRequest;\n+import com.linecorp.armeria.server.auth.Authorizer;\n+\n+/**\n+ * Builds a {@link OAuth2TokenIntrospectionAuthorizer} instance.\n+ */\n+@UnstableApi\n+public final class OAuth2TokenIntrospectionAuthorizerBuilder {\n+\n+    private static final long DEFAULT_CACHE_MAX_SIZE = 1000;\n+    private static final Duration DEFAULT_CACHE_MAX_AGE = Duration.ofHours(1L);\n+\n+    private static Cache<String, OAuth2TokenDescriptor> createDefaultCache() {\n+        final CacheBuilder<Object, Object> cacheBuilder =\n+                CacheBuilder.newBuilder().maximumSize(DEFAULT_CACHE_MAX_SIZE)\n+                            .concurrencyLevel(Runtime.getRuntime().availableProcessors());\n+        cacheBuilder.expireAfterWrite(DEFAULT_CACHE_MAX_AGE);\n+        return cacheBuilder.build();\n+    }\n+\n+    private final WebClient introspectionEndpoint;\n+    private final String introspectionEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    @Nullable\n+    private String accessTokenType;\n+\n+    @Nullable\n+    private String realm;\n+\n+    private final ImmutableSet.Builder<String> permittedScope = ImmutableSet.builder();\n+\n+    @Nullable\n+    private Cache<String, OAuth2TokenDescriptor> tokenCache;\n+\n+    /**\n+     * Constructs new new builder for OAuth 2.0 Token Introspection {@link Authorizer},\n+     * as per<a href=\"https://tools.ietf.org/html/rfc7662#section-2\">[RFC7662], Section 2</a>.\n+     *\n+     * @param introspectionEndpoint A {@link WebClient} to facilitate the Token Introspection request. Must\n+     *                              correspond to the Token Introspection endpoint of the OAuth 2.0 system.\n+     * @param introspectionEndpointPath A URI path that corresponds to the Token Introspection endpoint of the\n+     *                                  OAuth 2.0 system.\n+     */\n+    OAuth2TokenIntrospectionAuthorizerBuilder(WebClient introspectionEndpoint,\n+                                              String introspectionEndpointPath) {\n+        this.introspectionEndpoint = requireNonNull(introspectionEndpoint, \"introspectionEndpoint\");\n+        this.introspectionEndpointPath =\n+                requireNonNull(introspectionEndpointPath, \"introspectionEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 Introspection requests based on encoded authorization\n+     * token and authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 Introspection requests based on encoded authorization\n+     * token and {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 Introspection requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 Introspection requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * Access Token type permitted by this authorizer,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     * The authorizer will accept any type if empty. OPTIONAL.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder accessTokenType(String accessTokenType) {\n+        this.accessTokenType = requireNonNull(accessTokenType, \"accessTokenType\");\n+        return this;\n+    }\n+\n+    /**\n+     * An HTTP Realm - a name designating of the protected area. OPTIONAL.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder realm(String realm) {\n+        this.realm = requireNonNull(realm, \"realm\");\n+        return this;\n+    }\n+\n+    /**\n+     * An {@link Iterable} of case-sensitive scope strings permitted by this authorizer.\n+     * The authorizer will accept any scope if empty.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder permittedScope(Iterable<String> scope) {\n+        permittedScope.addAll(requireNonNull(scope, \"scope\"));\n+        return this;\n+    }\n+\n+    /**\n+     * An array of of case-sensitive scope strings permitted by this authorizer.\n+     * The authorizer will accept any scope if empty.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder permittedScope(String... scope) {\n+        permittedScope.add(requireNonNull(scope, \"scope\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Provides caching facility for OAuth 2.0 {@link OAuth2TokenDescriptor} in order to avoid continuous Token\n+     * Introspection as per <a href=\"https://tools.ietf.org/html/rfc7662#section-2.2\">[RFC7662], Section 2.2</a>.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder tokenCache(\n+            Cache<String, OAuth2TokenDescriptor> tokenCache) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzMwNTk0NA==", "bodyText": "Could we make AuthorizationStatus.ofSuccess(null) and CompletableFuture a singleton?\nprivate static final CompletionStage<AuthorizationStatus> SUCCESS_STATUS = \n        CompletableFuture.completedFuture(AuthorizationStatus.ofSuccess(null));", "url": "https://github.com/line/armeria/pull/2840#discussion_r563305944", "createdAt": "2021-01-24T15:08:09Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.UNSUPPORTED_TOKEN_TYPE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.cache.Cache;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.OAuth2Token;\n+import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;\n+import com.linecorp.armeria.internal.server.auth.oauth2.TokenIntrospectionRequest;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.AbstractAuthorizerWithHandlers;\n+import com.linecorp.armeria.server.auth.AuthFailureHandler;\n+import com.linecorp.armeria.server.auth.AuthorizationStatus;\n+\n+import io.netty.util.AttributeKey;\n+\n+/**\n+ * Determines whether a given {@link OAuth2Token} is authorized for the service registered in using OAuth 2.0\n+ * Token Introspection. {@code ctx} can be used for storing authorization information about the request for use\n+ * in business logic.\n+ */\n+@UnstableApi\n+public final class OAuth2TokenIntrospectionAuthorizer extends AbstractAuthorizerWithHandlers<OAuth2Token> {\n+\n+    /**\n+     * Returns a newly created {@link OAuth2TokenIntrospectionAuthorizerBuilder}.\n+     *\n+     * @param introspectionEndpoint A {@link WebClient} to facilitate the Token Introspection request. Must\n+     *                              correspond to the Token Introspection endpoint of the OAuth 2.0 system.\n+     * @param introspectionEndpointPath A URI path that corresponds to the Token Introspection endpoint of the\n+     *                                  OAuth 2.0 system.\n+     */\n+    public static OAuth2TokenIntrospectionAuthorizerBuilder builder(WebClient introspectionEndpoint,\n+                                                                    String introspectionEndpointPath) {\n+        return new OAuth2TokenIntrospectionAuthorizerBuilder(introspectionEndpoint, introspectionEndpointPath);\n+    }\n+\n+    static final AttributeKey<Integer> ERROR_CODE = AttributeKey.valueOf(\"x-oauth2-error\");\n+    static final AttributeKey<String> ERROR_TYPE = AttributeKey.valueOf(\"x-oauth2-error-type\");\n+    static final String INVALID_TOKEN = \"invalid_token\";\n+    static final String INSUFFICIENT_SCOPE = \"insufficient_scope\";\n+\n+    private final Cache<String, OAuth2TokenDescriptor> tokenCache;\n+    private final Set<String> permittedScope;\n+    @Nullable\n+    private final String accessTokenType;\n+    @Nullable\n+    private final String realm;\n+    private final TokenIntrospectionRequest tokenIntrospectionRequest;\n+    private final AuthFailureHandler authFailureHandler;\n+\n+    OAuth2TokenIntrospectionAuthorizer(Cache<String, OAuth2TokenDescriptor> tokenCache,\n+                                       @Nullable String accessTokenType, @Nullable String realm,\n+                                       Set<String> permittedScope,\n+                                       TokenIntrospectionRequest tokenIntrospectionRequest) {\n+        this.tokenCache = requireNonNull(tokenCache, \"tokenCache\");\n+        this.accessTokenType = accessTokenType;\n+        this.realm = realm;\n+        this.permittedScope = requireNonNull(permittedScope, \"permittedScope\");\n+        this.tokenIntrospectionRequest =\n+                requireNonNull(tokenIntrospectionRequest, \"tokenIntrospectionRequest\");\n+        authFailureHandler =\n+                new OAuth2AuthorizationFailureHandler(accessTokenType, realm, String.join(\" \", permittedScope));\n+    }\n+\n+    /**\n+     * Scopes permitted by this authorizer. The authorizer will accept any scope if empty.\n+     */\n+    public Set<String> permittedScope() {\n+        return permittedScope;\n+    }\n+\n+    /**\n+     * Authorization type permitted by this authorizer. The authorizer will accept any type if empty.\n+     * One of the registered HTTP authentication schemes as per\n+     * <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     * HTTP Authentication Scheme Registry</a>.\n+     */\n+    @Nullable\n+    public String accessTokenType() {\n+        return accessTokenType;\n+    }\n+\n+    /**\n+     * An HTTP Realm - a name designating the protected area. OPTIONAL.\n+     */\n+    @Nullable\n+    public String realm() {\n+        return realm;\n+    }\n+\n+    /**\n+     * An instance of {@link OAuth2AuthorizationFailureHandler}.\n+     */\n+    public AuthFailureHandler failureHandler() {\n+        return authFailureHandler;\n+    }\n+\n+    @Override\n+    public CompletionStage<AuthorizationStatus> authorizeAndSupplyHandlers(ServiceRequestContext ctx,\n+                                                                           @Nullable OAuth2Token data) {\n+\n+        if (data == null) {\n+            // no access token present\n+            return CompletableFuture.completedFuture(AuthorizationStatus.ofFailure(authFailureHandler));\n+        }\n+        final String accessToken = data.accessToken();\n+        final OAuth2TokenDescriptor tokenDescriptor = tokenCache.getIfPresent(accessToken);\n+        if (tokenDescriptor != null) {\n+            // just re-validate existing token\n+            final AuthorizationStatus status =\n+                    validateDescriptor(ctx, tokenDescriptor) ? AuthorizationStatus.ofSuccess(null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzQ5OTY5Nw==", "bodyText": "Add static?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563499697", "createdAt": "2021-01-25T07:07:13Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant {\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    /**\n+     * Holds a token object and facilitates its lifecycle.\n+     */\n+    private final TokenLifecycleManager<GrantedOAuth2AccessToken> tokenManager;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier,\n+                                     @Nullable Consumer<? super GrantedOAuth2AccessToken> tokenConsumer,\n+                                     @Nullable Executor executor) {\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        tokenManager = new TokenLifecycleManager<>(this::isValid, this::canRefresh,\n+                                                   this::shallObtainInsteadOfUpdate,\n+                                                   this::obtainAccessToken, this::refreshAccessToken,\n+                                                   tokenSupplier, tokenConsumer, executor);\n+    }\n+\n+    /**\n+     * Tests the token for validity at the given {@link Instant} time.\n+     */\n+    private boolean isValid(GrantedOAuth2AccessToken token, Instant now) {\n+        return token.isValid(now.plus(refreshBefore));\n+    }\n+\n+    /**\n+     * Tests whether the token object can be refreshed or re-obtained.\n+     */\n+    private boolean canRefresh(GrantedOAuth2AccessToken token) {\n+        return token.refreshToken() != null;\n+    }\n+\n+    /**\n+     * Tests whether given {@link Throwable} indicates that the token shall be re-obtained\n+     * after the refresh operation failure.\n+     */\n+    private boolean shallObtainInsteadOfUpdate(Throwable throwable) {\n+        return throwable instanceof TokenRequestException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUwMDI0Mg==", "bodyText": "Add @FunctionalInterface?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563500242", "createdAt": "2021-01-25T07:08:34Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+@UnstableApi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUwMDU0Mw==", "bodyText": "Drop get prefix and just accessToken()?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563500543", "createdAt": "2021-01-25T07:09:20Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+@UnstableApi\n+public interface OAuth2AuthorizationGrant {\n+\n+    /**\n+     * Produces OAuth 2.0 Access Token\n+     */\n+    CompletionStage<GrantedOAuth2AccessToken> getAccessToken();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUwMjc1Ng==", "bodyText": "How about raising an IllegalStateException if clientAuthorization was already set before.", "url": "https://github.com/line/armeria/pull/2840#discussion_r563502756", "createdAt": "2021-01-25T07:15:19Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.internal.client.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<? super GrantedOAuth2AccessToken> tokenConsumer;\n+\n+    @Nullable\n+    private Executor executor;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUwNzMxNA==", "bodyText": "How about narrowing the executor down to EventExecutor to guarantee serial execution.", "url": "https://github.com/line/armeria/pull/2840#discussion_r563507314", "createdAt": "2021-01-25T07:27:03Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.internal.client.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<? super GrantedOAuth2AccessToken> tokenConsumer;\n+\n+    @Nullable\n+    private Executor executor;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientBasicAuthorization(Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T refreshBefore(Duration refreshBefore) {\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        return (T) this;\n+    }\n+\n+    final Duration refreshBefore() {\n+        return refreshBefore;\n+    }\n+\n+    /**\n+     * A {@link Supplier} to load Access Token from, to be able to restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenSupplier(Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier) {\n+        this.tokenSupplier = requireNonNull(tokenSupplier, \"tokenSupplier\");\n+        return (T) this;\n+    }\n+\n+    @Nullable\n+    final Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier() {\n+        return tokenSupplier;\n+    }\n+\n+    /**\n+     * A {@link Consumer} to store Access Token to, to be able restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenConsumer(Consumer<? super GrantedOAuth2AccessToken> tokenConsumer) {\n+        this.tokenConsumer = requireNonNull(tokenConsumer, \"tokenConsumer\");\n+        return (T) this;\n+    }\n+\n+    @Nullable\n+    final Consumer<? super GrantedOAuth2AccessToken> tokenConsumer() {\n+        return tokenConsumer;\n+    }\n+\n+    /**\n+     * An optional {@link Executor} that facilitates asynchronous access token obtain and refresh operations.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T executor(Executor executor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUxMDY2OA==", "bodyText": "Add requireNonNull before creating a lambda?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563510668", "createdAt": "2021-01-25T07:35:23Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Decorates a {@link HttpClient} with an OAuth 2.0 Authorization Grant flow.\n+ */\n+@UnstableApi\n+public final class OAuth2Client extends SimpleDecoratingHttpClient {\n+\n+    /**\n+     * Creates a new {@link HttpClient} decorator that handles OAuth 2.0 Authorization Grant flow.\n+     * @param authorizationGrant An {@link OAuth2AuthorizationGrant} implementing specific\n+     *                           OAuth 2.0 Authorization Grant flow.\n+     */\n+    public static Function<? super HttpClient, OAuth2Client> newDecorator(\n+            OAuth2AuthorizationGrant authorizationGrant) {\n+        return delegate -> new OAuth2Client(delegate, authorizationGrant);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUxNjkzMw==", "bodyText": "I think some users may want to use a non-supplier version for building this class and others.\nHow about globally applying this pattern to other builder methods?\n// Remove `Supplier` postfix from method name\npublic OAuth2ResourceOwnerPasswordCredentialsGrantBuilder userCredentials(\n        Supplier<Entry<String, String>> userCredentialsSupplier) {\n    this.userCredentialsSupplier = requireNonNull(userCredentialsSupplier, \"userCredentialsSupplier\");\n    return this;\n}\n\npublic OAuth2ResourceOwnerPasswordCredentialsGrantBuilder userCredentials(\n        String username, String password) {\n    requireNonNull(username, \"username\");\n    requireNonNull(password, \"password\");\n    userCredentials(() -> new SimpleEntry<>(username, password));\n    return this;\n}", "url": "https://github.com/line/armeria/pull/2840#discussion_r563516933", "createdAt": "2021-01-25T07:49:26Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ResourceOwnerPasswordCredentialsGrantBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.internal.client.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.internal.client.auth.oauth2.ResourceOwnerPasswordCredentialsTokenRequest;\n+\n+/**\n+ * Builds {@link OAuth2ClientCredentialsGrant}.\n+ */\n+@UnstableApi\n+public final class OAuth2ResourceOwnerPasswordCredentialsGrantBuilder\n+        extends AbstractOAuth2AuthorizationGrantBuilder<OAuth2ResourceOwnerPasswordCredentialsGrantBuilder> {\n+\n+    @Nullable\n+    private Supplier<? extends Map.Entry<String, String>> userCredentialsSupplier;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     */\n+    OAuth2ResourceOwnerPasswordCredentialsGrantBuilder(\n+            WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath);\n+    }\n+\n+    /**\n+     * A supplier of user credentials: \"username\" and \"password\" used to grant the Access Token. REQUIRED.\n+     */\n+    public OAuth2ResourceOwnerPasswordCredentialsGrantBuilder userCredentialsSupplier(\n+            Supplier<Entry<String, String>> userCredentialsSupplier) {\n+        this.userCredentialsSupplier = requireNonNull(userCredentialsSupplier, \"userCredentialsSupplier\");\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a773eb62f0b537bd8016d4235a1d7a4c62713903", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/a773eb62f0b537bd8016d4235a1d7a4c62713903", "committedDate": "2021-01-25T21:23:47Z", "message": "more review comments by @ikhoon and @trustin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "281c3d274b29a0db34d48479bb9eef85576ba8da", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/281c3d274b29a0db34d48479bb9eef85576ba8da", "committedDate": "2021-01-26T17:17:10Z", "message": "replaced Guava Cache with Caffeine, as suggested by @ikhoon"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e956b65ebffc5e1b9c9ecfe4d7a672074bb14881", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/e956b65ebffc5e1b9c9ecfe4d7a672074bb14881", "committedDate": "2021-01-26T18:04:02Z", "message": "raising an IllegalStateException if clientAuthorization was already set before"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18fc816fc4f876d2adc00d122a9f610935d0be10", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/18fc816fc4f876d2adc00d122a9f610935d0be10", "committedDate": "2021-01-29T11:24:12Z", "message": "renamed public methods:\n- userCredentialsSupplier() -> userCredentials();\n- tokenSupplier() -> tokenPersistencySupplier(), tokenConsumer() -> tokenPersistencyConsumer()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bce7edcfba0f62af60220d6479bb26ffa964d8aa", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/bce7edcfba0f62af60220d6479bb26ffa964d8aa", "committedDate": "2021-02-03T20:06:50Z", "message": "- removed AuthorizationStatus.of(@Nullable Boolean status)\n- replaced VolatileCounter with AtomicInteger in the unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkwODU0MzUy", "url": "https://github.com/line/armeria/pull/2840#pullrequestreview-590854352", "createdAt": "2021-02-16T02:58:47Z", "commit": {"oid": "bce7edcfba0f62af60220d6479bb26ffa964d8aa"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf79a21ebfd3a074b536aa06d08746f7f5bf926b", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/bf79a21ebfd3a074b536aa06d08746f7f5bf926b", "committedDate": "2021-02-16T21:28:34Z", "message": "- extracted OAuth2TokenScopeValidator to support additional application-level token validation (e.g. fine-grained access control)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "304dadbb37ad454ea90d46e703d5594ead5889ea", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/304dadbb37ad454ea90d46e703d5594ead5889ea", "committedDate": "2021-02-19T16:07:27Z", "message": "replaced junit4 ServerRule with junit5 ServerExtension;"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA2ODgwNjk1", "url": "https://github.com/line/armeria/pull/2840#pullrequestreview-606880695", "createdAt": "2021-03-09T02:29:34Z", "commit": {"oid": "304dadbb37ad454ea90d46e703d5594ead5889ea"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wOVQwMjozNjoyM1rOIykaCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wOVQwNjo0ODoyMVrOIypwSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTg5NjIwMw==", "bodyText": "Could we change this static member to a static method such as static AuthorizationStatus ofSuccess();?", "url": "https://github.com/line/armeria/pull/2840#discussion_r589896203", "createdAt": "2021-03-09T02:36:23Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Provides a status of the request authorization operation, optionally combined with {@link AuthSuccessHandler}\n+ * and {@link AuthFailureHandler} to facilitate custom status handling.\n+ */\n+@UnstableApi\n+public interface AuthorizationStatus {\n+\n+    /**\n+     * Default Authorization Success status with no {@link AuthSuccessHandler} defined.\n+     */\n+    AuthorizationStatus SUCCESS = ofSuccess(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "304dadbb37ad454ea90d46e703d5594ead5889ea"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTk4MzgxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Supplier<Entry<String, String>> userCredentials) {\n          \n          \n            \n                        Supplier<? extends Entry<String, String>> userCredentials) {", "url": "https://github.com/line/armeria/pull/2840#discussion_r589983819", "createdAt": "2021-03-09T06:48:21Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ResourceOwnerPasswordCredentialsGrantBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.internal.client.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.internal.client.auth.oauth2.ResourceOwnerPasswordCredentialsTokenRequest;\n+\n+/**\n+ * Builds {@link OAuth2ClientCredentialsGrant}.\n+ */\n+@UnstableApi\n+public final class OAuth2ResourceOwnerPasswordCredentialsGrantBuilder\n+        extends AbstractOAuth2AuthorizationGrantBuilder<OAuth2ResourceOwnerPasswordCredentialsGrantBuilder> {\n+\n+    @Nullable\n+    private Supplier<? extends Map.Entry<String, String>> userCredentialsSupplier;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     */\n+    OAuth2ResourceOwnerPasswordCredentialsGrantBuilder(\n+            WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath);\n+    }\n+\n+    /**\n+     * A supplier of user credentials: \"username\" and \"password\" used to grant the Access Token. REQUIRED.\n+     */\n+    public OAuth2ResourceOwnerPasswordCredentialsGrantBuilder userCredentials(\n+            Supplier<Entry<String, String>> userCredentials) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "304dadbb37ad454ea90d46e703d5594ead5889ea"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4eca1bab0c42240e324136b9103b3957d66ee5c8", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/4eca1bab0c42240e324136b9103b3957d66ee5c8", "committedDate": "2021-03-10T18:03:04Z", "message": "review comments by @ikhoon"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27cf475d6dab25c2b92b3a532786cbf6324b8641", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/27cf475d6dab25c2b92b3a532786cbf6324b8641", "committedDate": "2021-03-28T06:27:21Z", "message": "Merge branch 'master' into oauth2-issue2268"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ec0a16f49049c3d4a190a63cb4e1f7727465ea8", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/2ec0a16f49049c3d4a190a63cb4e1f7727465ea8", "committedDate": "2021-03-28T07:05:34Z", "message": "Lint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fa700ac6847f70810a772e007d5f754af0e7f40", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/6fa700ac6847f70810a772e007d5f754af0e7f40", "committedDate": "2021-03-28T08:19:17Z", "message": "Minor clean-up"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 302, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}