{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMDQ1NjU3", "number": 2848, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjo0MTo1NlrOEJ9B-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjo0NzozM1rOEJ9IKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODcyNTY5OnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjo0MTo1NlrOGqt5PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjo1MDoxNlrOGquIGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0NTMwOQ==", "bodyText": "Isn't this public?", "url": "https://github.com/line/armeria/pull/2848#discussion_r447445309", "createdAt": "2020-06-30T06:41:56Z", "author": {"login": "minwoox"}, "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.grpc;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.retry.RetryRuleWithContent;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;\n+import com.linecorp.armeria.common.unsafe.PooledHttpData;\n+import com.linecorp.armeria.internal.client.grpc.InternalGrpcWebUtil;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n+/**\n+ * Utilities for working with <a href=\"https://grpc.io/docs/languages/web/basics/\">gRPC-Web</a>.\n+ */\n+public final class GrpcWebUtil {\n+\n+    private static final int HEADER_LENGTH = 5;\n+    private static final int RESERVED_MASK = 0x7E;\n+\n+    /**\n+     * Returns a gRPC-Web trailers parsed from the specified response body.\n+     * {@code null} if fail to parse a gRPC-Web trailers.\n+     *\n+     * <p>A gRPC-Web response does not contain a separated trailers according to the\n+     * <a href=\"https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md#protocol-differences-vs-grpc-over-http2\">\n+     * gRPC-Web spec</a>:\n+     * <ul>\n+     *   <li>Trailers must be the last message of the response.</li>\n+     *   <li>Trailers may be sent together with response headers, with no message in the body.</li>\n+     * </ul>\n+     * That means the response trailers should be pulled out from {@link AggregatedHttpResponse#headers()}}\n+     * or parsed from {@link AggregatedHttpResponse#content()}.\n+     *\n+     * <p>This method is useful when {@link RetryRuleWithContent} needs {@link GrpcHeaderNames#GRPC_STATUS}\n+     * to decide whether to retry. For example:\n+     * <pre>{@code\n+     * Clients.builder(grpcServerUri)\n+     *        .decorator(RetryingClient.newDecorator(\n+     *                RetryRuleWithContent.onResponse(response -> {\n+     *                    return response.aggregate().thenApply(aggregated -> {\n+     *                        HttpHeaders trailers = GrpcWebUtil.parseTrailers(aggregated.content());\n+     *                        // Retry if the 'grpc-status' is not equal to 0.\n+     *                        return trailers != null && trailers.getInt(GrpcHeaderNames.GRPC_STATUS) != 0;\n+     *                    });\n+     *                })))\n+     *        .build(MyGrpcStub.class);\n+     * }</pre>\n+     */\n+    @Nullable\n+    static HttpHeaders parseTrailers(HttpData response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b947618c0013b79626140ef2b9f680b1c5c8bb"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0OTExNQ==", "bodyText": "Oops!\ud83e\udd23", "url": "https://github.com/line/armeria/pull/2848#discussion_r447449115", "createdAt": "2020-06-30T06:50:16Z", "author": {"login": "ikhoon"}, "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.grpc;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.retry.RetryRuleWithContent;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;\n+import com.linecorp.armeria.common.unsafe.PooledHttpData;\n+import com.linecorp.armeria.internal.client.grpc.InternalGrpcWebUtil;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n+/**\n+ * Utilities for working with <a href=\"https://grpc.io/docs/languages/web/basics/\">gRPC-Web</a>.\n+ */\n+public final class GrpcWebUtil {\n+\n+    private static final int HEADER_LENGTH = 5;\n+    private static final int RESERVED_MASK = 0x7E;\n+\n+    /**\n+     * Returns a gRPC-Web trailers parsed from the specified response body.\n+     * {@code null} if fail to parse a gRPC-Web trailers.\n+     *\n+     * <p>A gRPC-Web response does not contain a separated trailers according to the\n+     * <a href=\"https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md#protocol-differences-vs-grpc-over-http2\">\n+     * gRPC-Web spec</a>:\n+     * <ul>\n+     *   <li>Trailers must be the last message of the response.</li>\n+     *   <li>Trailers may be sent together with response headers, with no message in the body.</li>\n+     * </ul>\n+     * That means the response trailers should be pulled out from {@link AggregatedHttpResponse#headers()}}\n+     * or parsed from {@link AggregatedHttpResponse#content()}.\n+     *\n+     * <p>This method is useful when {@link RetryRuleWithContent} needs {@link GrpcHeaderNames#GRPC_STATUS}\n+     * to decide whether to retry. For example:\n+     * <pre>{@code\n+     * Clients.builder(grpcServerUri)\n+     *        .decorator(RetryingClient.newDecorator(\n+     *                RetryRuleWithContent.onResponse(response -> {\n+     *                    return response.aggregate().thenApply(aggregated -> {\n+     *                        HttpHeaders trailers = GrpcWebUtil.parseTrailers(aggregated.content());\n+     *                        // Retry if the 'grpc-status' is not equal to 0.\n+     *                        return trailers != null && trailers.getInt(GrpcHeaderNames.GRPC_STATUS) != 0;\n+     *                    });\n+     *                })))\n+     *        .build(MyGrpcStub.class);\n+     * }</pre>\n+     */\n+    @Nullable\n+    static HttpHeaders parseTrailers(HttpData response) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0NTMwOQ=="}, "originalCommit": {"oid": "c3b947618c0013b79626140ef2b9f680b1c5c8bb"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODcyNjA5OnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjo0MjowNFrOGqt5eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjo0MjowNFrOGqt5eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0NTM3MA==", "bodyText": "rnn for response?", "url": "https://github.com/line/armeria/pull/2848#discussion_r447445370", "createdAt": "2020-06-30T06:42:04Z", "author": {"login": "minwoox"}, "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.grpc;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.retry.RetryRuleWithContent;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;\n+import com.linecorp.armeria.common.unsafe.PooledHttpData;\n+import com.linecorp.armeria.internal.client.grpc.InternalGrpcWebUtil;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n+/**\n+ * Utilities for working with <a href=\"https://grpc.io/docs/languages/web/basics/\">gRPC-Web</a>.\n+ */\n+public final class GrpcWebUtil {\n+\n+    private static final int HEADER_LENGTH = 5;\n+    private static final int RESERVED_MASK = 0x7E;\n+\n+    /**\n+     * Returns a gRPC-Web trailers parsed from the specified response body.\n+     * {@code null} if fail to parse a gRPC-Web trailers.\n+     *\n+     * <p>A gRPC-Web response does not contain a separated trailers according to the\n+     * <a href=\"https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md#protocol-differences-vs-grpc-over-http2\">\n+     * gRPC-Web spec</a>:\n+     * <ul>\n+     *   <li>Trailers must be the last message of the response.</li>\n+     *   <li>Trailers may be sent together with response headers, with no message in the body.</li>\n+     * </ul>\n+     * That means the response trailers should be pulled out from {@link AggregatedHttpResponse#headers()}}\n+     * or parsed from {@link AggregatedHttpResponse#content()}.\n+     *\n+     * <p>This method is useful when {@link RetryRuleWithContent} needs {@link GrpcHeaderNames#GRPC_STATUS}\n+     * to decide whether to retry. For example:\n+     * <pre>{@code\n+     * Clients.builder(grpcServerUri)\n+     *        .decorator(RetryingClient.newDecorator(\n+     *                RetryRuleWithContent.onResponse(response -> {\n+     *                    return response.aggregate().thenApply(aggregated -> {\n+     *                        HttpHeaders trailers = GrpcWebUtil.parseTrailers(aggregated.content());\n+     *                        // Retry if the 'grpc-status' is not equal to 0.\n+     *                        return trailers != null && trailers.getInt(GrpcHeaderNames.GRPC_STATUS) != 0;\n+     *                    });\n+     *                })))\n+     *        .build(MyGrpcStub.class);\n+     * }</pre>\n+     */\n+    @Nullable\n+    static HttpHeaders parseTrailers(HttpData response) {\n+        final ByteBuf buf;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b947618c0013b79626140ef2b9f680b1c5c8bb"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODc0MTU1OnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjo0NzozM1rOGquC8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjo0NzozM1rOGquC8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0Nzc5Mw==", "bodyText": "Could you leave a comment about what this is for?", "url": "https://github.com/line/armeria/pull/2848#discussion_r447447793", "createdAt": "2020-06-30T06:47:33Z", "author": {"login": "minwoox"}, "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.grpc;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.retry.RetryRuleWithContent;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;\n+import com.linecorp.armeria.common.unsafe.PooledHttpData;\n+import com.linecorp.armeria.internal.client.grpc.InternalGrpcWebUtil;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n+/**\n+ * Utilities for working with <a href=\"https://grpc.io/docs/languages/web/basics/\">gRPC-Web</a>.\n+ */\n+public final class GrpcWebUtil {\n+\n+    private static final int HEADER_LENGTH = 5;\n+    private static final int RESERVED_MASK = 0x7E;\n+\n+    /**\n+     * Returns a gRPC-Web trailers parsed from the specified response body.\n+     * {@code null} if fail to parse a gRPC-Web trailers.\n+     *\n+     * <p>A gRPC-Web response does not contain a separated trailers according to the\n+     * <a href=\"https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md#protocol-differences-vs-grpc-over-http2\">\n+     * gRPC-Web spec</a>:\n+     * <ul>\n+     *   <li>Trailers must be the last message of the response.</li>\n+     *   <li>Trailers may be sent together with response headers, with no message in the body.</li>\n+     * </ul>\n+     * That means the response trailers should be pulled out from {@link AggregatedHttpResponse#headers()}}\n+     * or parsed from {@link AggregatedHttpResponse#content()}.\n+     *\n+     * <p>This method is useful when {@link RetryRuleWithContent} needs {@link GrpcHeaderNames#GRPC_STATUS}\n+     * to decide whether to retry. For example:\n+     * <pre>{@code\n+     * Clients.builder(grpcServerUri)\n+     *        .decorator(RetryingClient.newDecorator(\n+     *                RetryRuleWithContent.onResponse(response -> {\n+     *                    return response.aggregate().thenApply(aggregated -> {\n+     *                        HttpHeaders trailers = GrpcWebUtil.parseTrailers(aggregated.content());\n+     *                        // Retry if the 'grpc-status' is not equal to 0.\n+     *                        return trailers != null && trailers.getInt(GrpcHeaderNames.GRPC_STATUS) != 0;\n+     *                    });\n+     *                })))\n+     *        .build(MyGrpcStub.class);\n+     * }</pre>\n+     */\n+    @Nullable\n+    static HttpHeaders parseTrailers(HttpData response) {\n+        final ByteBuf buf;\n+        if (response instanceof PooledHttpData) {\n+            buf = ((PooledHttpData) response).content();\n+        } else {\n+            buf = Unpooled.wrappedBuffer(response.array());\n+        }\n+        final int readerIndex = buf.readerIndex();\n+\n+        try {\n+            HttpHeaders trailers = null;\n+            while (buf.isReadable(HEADER_LENGTH)) {\n+                final short type = buf.readUnsignedByte();\n+                if ((type & RESERVED_MASK) != 0) {\n+                    // Malformed header\n+                    break;\n+                }\n+\n+                final int length = buf.readInt();\n+                if (type >> 7 == 1) {\n+                    trailers = InternalGrpcWebUtil.parseGrpcWebTrailers(buf);\n+                    break;\n+                } else {\n+                    buf.skipBytes(length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b947618c0013b79626140ef2b9f680b1c5c8bb"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2443, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}