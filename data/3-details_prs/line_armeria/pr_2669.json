{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MTcyODQ3", "number": 2669, "title": "Support Kotlin-gRPC client CoroutineStub", "bodyText": "Motivation:\ngRPC for Kotlin is actively developed and\n0.1.1 has been released last week.\nModifications:\n\nAllow GrpcClientFactory creating client from CoroutineStub\nMigrate Kotlin example to gRPC-Kotlin\n\nResult:\n\nPartially Fixes #2662\nYou can now run Armeria gRPC client with gproto* and gRPC-Kotlin CoroutinStub", "createdAt": "2020-04-16T07:37:26Z", "url": "https://github.com/line/armeria/pull/2669", "merged": true, "mergeCommit": {"oid": "b1decb5d0d33122ab4e42a06a0230cbc2f79249c"}, "closed": true, "closedAt": "2020-05-06T06:52:03Z", "author": {"login": "ikhoon"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYH9cngFqTM5NDM4NDM4NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcef1hwAFqTQwNjI3OTY3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0Mzg0Mzg0", "url": "https://github.com/line/armeria/pull/2669#pullrequestreview-394384384", "createdAt": "2020-04-16T07:56:12Z", "commit": {"oid": "e4fd5331c8258bbda348fddbcf0fab03e01f3f95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNzo1NjoxMlrOGGZD4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNzo1NjoxMlrOGGZD4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM1NTIzNQ==", "bodyText": "Not necessarily related to this PR but how about renaming stubClass to enclosingClass? Stub class is clientType actually.", "url": "https://github.com/line/armeria/pull/2669#discussion_r409355235", "createdAt": "2020-04-16T07:56:12Z", "author": {"login": "trustin"}, "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcClientFactory.java", "diffHunk": "@@ -91,6 +94,13 @@ public Object newClient(ClientBuilderParams params) {\n \n         final HttpClient httpClient = newHttpClient(params);\n         final Method stubFactoryMethod = findStubFactoryMethod(clientType, stubClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4fd5331c8258bbda348fddbcf0fab03e01f3f95"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0Mzg4MTMw", "url": "https://github.com/line/armeria/pull/2669#pullrequestreview-394388130", "createdAt": "2020-04-16T08:01:23Z", "commit": {"oid": "25fd95fbe0953596cc8830d234a9db1077fc7ebb"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODowMToyNFrOGGZQaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODowNDoxNVrOGGZW2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM1ODQ0MQ==", "bodyText": "This comment seems inconsistent with the actual code", "url": "https://github.com/line/armeria/pull/2669#discussion_r409358441", "createdAt": "2020-04-16T08:01:24Z", "author": {"login": "gary-lo"}, "path": "examples/grpc-kotlin/src/main/kotlin/example/armeria/grpc/kotlin/HelloServiceImpl.kt", "diffHunk": "@@ -42,13 +38,12 @@ class HelloServiceImpl : HelloServiceGrpc.HelloServiceImplBase() {\n         // 3. Call a blocking API in the separate thread pool you manage.\n         //\n         // In this example, we chose the option 1:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25fd95fbe0953596cc8830d234a9db1077fc7ebb"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2MDA4OA==", "bodyText": "This sleeps this thread. The original example was trying to emulate a background long running task running. Did we consider  using https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-i-o.html ?", "url": "https://github.com/line/armeria/pull/2669#discussion_r409360088", "createdAt": "2020-04-16T08:04:15Z", "author": {"login": "gary-lo"}, "path": "examples/grpc-kotlin/src/main/kotlin/example/armeria/grpc/kotlin/HelloServiceImpl.kt", "diffHunk": "@@ -42,13 +38,12 @@ class HelloServiceImpl : HelloServiceGrpc.HelloServiceImplBase() {\n         // 3. Call a blocking API in the separate thread pool you manage.\n         //\n         // In this example, we chose the option 1:\n-        ServiceRequestContext.current().blockingTaskExecutor().submit {\n+        return runBlocking {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25fd95fbe0953596cc8830d234a9db1077fc7ebb"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NTEzMDAz", "url": "https://github.com/line/armeria/pull/2669#pullrequestreview-394513003", "createdAt": "2020-04-16T10:44:43Z", "commit": {"oid": "d627ad280b1af3b336bb4185ab00431d444f9b62"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDo0NDo0M1rOGGfdmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDo0NjoyMVrOGGfg3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2MDEyMg==", "bodyText": "coroutines running on event loop will be awesome. Does Dispatchers.Unconfined allow that to happen? I guess callbacks will return on any arbitrary thread. If that's the case, we should investigate more and probably need to implement Dispatchers.ArmeriaContext. Not sure, but maybe it just means creating an implementation of the interface that delegates all methods to RequestContext.contextAwareExecutor().asCoroutineDispatcher()", "url": "https://github.com/line/armeria/pull/2669#discussion_r409460122", "createdAt": "2020-04-16T10:44:43Z", "author": {"login": "anuraaga"}, "path": "examples/grpc-kotlin/src/main/kotlin/example/armeria/grpc/kotlin/HelloServiceImpl.kt", "diffHunk": "@@ -3,52 +3,50 @@ package example.armeria.grpc.kotlin\n import com.linecorp.armeria.server.ServiceRequestContext\n import example.armeria.grpc.kotlin.Hello.HelloReply\n import example.armeria.grpc.kotlin.Hello.HelloRequest\n-import io.grpc.stub.StreamObserver\n-import java.time.Duration\n-import java.util.concurrent.TimeUnit\n-import reactor.core.publisher.Flux\n-import reactor.core.scheduler.Schedulers\n-\n-class HelloServiceImpl : HelloServiceGrpc.HelloServiceImplBase() {\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.delay\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.collect\n+import kotlinx.coroutines.flow.flow\n+import kotlinx.coroutines.flow.map\n+import kotlinx.coroutines.flow.toList\n+import kotlinx.coroutines.withContext\n+\n+/**\n+ * Note that if you want to run [HelloServiceImpl] in an event loop and\n+ * get a current [ServiceRequestContext],\n+ * you should initialize [HelloServiceImpl] with [Dispatchers.Unconfined].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d627ad280b1af3b336bb4185ab00431d444f9b62"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2MDcyNQ==", "bodyText": "Not sure, but I guess it's more idiomatic for an armeria app to use the blocking task executor - it's context aware and is language-agnostic. Should we stick with blockingTaskExecutor, either using submit or withContext(blockingTaskExecutor().asCoroutineDispatcher())?", "url": "https://github.com/line/armeria/pull/2669#discussion_r409460725", "createdAt": "2020-04-16T10:45:55Z", "author": {"login": "anuraaga"}, "path": "examples/grpc-kotlin/src/main/kotlin/example/armeria/grpc/kotlin/HelloServiceImpl.kt", "diffHunk": "@@ -3,52 +3,50 @@ package example.armeria.grpc.kotlin\n import com.linecorp.armeria.server.ServiceRequestContext\n import example.armeria.grpc.kotlin.Hello.HelloReply\n import example.armeria.grpc.kotlin.Hello.HelloRequest\n-import io.grpc.stub.StreamObserver\n-import java.time.Duration\n-import java.util.concurrent.TimeUnit\n-import reactor.core.publisher.Flux\n-import reactor.core.scheduler.Schedulers\n-\n-class HelloServiceImpl : HelloServiceGrpc.HelloServiceImplBase() {\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.delay\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.collect\n+import kotlinx.coroutines.flow.flow\n+import kotlinx.coroutines.flow.map\n+import kotlinx.coroutines.flow.toList\n+import kotlinx.coroutines.withContext\n+\n+/**\n+ * Note that if you want to run [HelloServiceImpl] in an event loop and\n+ * get a current [ServiceRequestContext],\n+ * you should initialize [HelloServiceImpl] with [Dispatchers.Unconfined].\n+ * See https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-unconfined.html\n+ * Unless [Dispatchers.Default] executor will handle this service.\n+ */\n+class HelloServiceImpl : HelloServiceGrpcKt.HelloServiceCoroutineImplBase(Dispatchers.Unconfined) {\n \n     /**\n      * Sends a [HelloReply] immediately when receiving a request.\n      */\n-    override fun hello(request: HelloRequest, responseObserver: StreamObserver<HelloReply>) {\n-        responseObserver.onNext(buildReply(toMessage(request.name)))\n-        responseObserver.onCompleted()\n+    override suspend fun hello(request: HelloRequest): HelloReply {\n+        // Make sure that current thread is request context aware\n+        ServiceRequestContext.current();\n+        return buildReply(toMessage(request.name))\n     }\n \n-    override fun lazyHello(request: HelloRequest, responseObserver: StreamObserver<HelloReply>) {\n-        // You can use the event loop for scheduling a task.\n-        ServiceRequestContext.current().contextAwareEventLoop().schedule({\n-            responseObserver.onNext(buildReply(toMessage(request.name)))\n-            responseObserver.onCompleted()\n-        }, 3, TimeUnit.SECONDS)\n+    override suspend fun lazyHello(request: HelloRequest): HelloReply {\n+        delay(3000L)\n+        return buildReply(toMessage(request.name))\n     }\n \n     /**\n      * Sends a [HelloReply] using `blockingTaskExecutor`.\n      *\n      * @see [Blocking service implementation](https://line.github.io/armeria/server-grpc.html#blocking-service-implementation)\n      */\n-    override fun blockingHello(request: HelloRequest, responseObserver: StreamObserver<HelloReply>) {\n-        // Unlike upstream gRPC-Java, Armeria does not run service logic in a separate thread pool by default.\n-        // Therefore, this method will run in the event loop, which means that you can suffer the performance\n-        // degradation if you call a blocking API in this method. In this case, you have the following options:\n-        //\n-        // 1. Call a blocking API in the blockingTaskExecutor provided by Armeria.\n-        // 2. Set `GrpcServiceBuilder.useBlockingTaskExecutor(true)` when building your GrpcService.\n-        // 3. Call a blocking API in the separate thread pool you manage.\n-        //\n-        // In this example, we chose the option 1:\n-        ServiceRequestContext.current().blockingTaskExecutor().submit {\n+    override suspend fun blockingHello(request: HelloRequest): HelloReply {\n+        return withContext(Dispatchers.IO) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d627ad280b1af3b336bb4185ab00431d444f9b62"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2MDk1Ng==", "bodyText": "Can you check context between delay / emit?", "url": "https://github.com/line/armeria/pull/2669#discussion_r409460956", "createdAt": "2020-04-16T10:46:21Z", "author": {"login": "anuraaga"}, "path": "examples/grpc-kotlin/src/main/kotlin/example/armeria/grpc/kotlin/HelloServiceImpl.kt", "diffHunk": "@@ -57,69 +55,34 @@ class HelloServiceImpl : HelloServiceGrpc.HelloServiceImplBase() {\n      *\n      * @see lazyHello(HelloRequest, StreamObserver)\n      */\n-    override fun lotsOfReplies(request: HelloRequest, responseObserver: StreamObserver<HelloReply>) {\n+    override fun lotsOfReplies(request: HelloRequest): Flow<HelloReply> {\n         // You can also write this code without Reactor like 'lazyHello' example.\n-        Flux.interval(Duration.ofSeconds(1))\n-                .take(5)\n-                .map { \"Hello, ${request.name}! (sequence: ${it + 1})\" }\n-                // You can make your Flux/Mono publish the signals in the RequestContext-aware executor.\n-                .publishOn(Schedulers.fromExecutor(ServiceRequestContext.current().contextAwareExecutor()))\n-                .subscribe({\n-                    // Confirm this callback is being executed on the RequestContext-aware executor.\n-                    ServiceRequestContext.current()\n-                    responseObserver.onNext(buildReply(it))\n-                },\n-                {\n-                    // Confirm this callback is being executed on the RequestContext-aware executor.\n-                    ServiceRequestContext.current()\n-                    responseObserver.onError(it)\n-                },\n-                {\n-                    // Confirm this callback is being executed on the RequestContext-aware executor.\n-                    ServiceRequestContext.current()\n-                    responseObserver.onCompleted()\n-                })\n+        return flow {\n+            for (i in 1..5) {\n+                delay(1000)\n+                emit(buildReply(\"Hello, ${request.name}! (sequence: $i)\")) // emit next value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d627ad280b1af3b336bb4185ab00431d444f9b62"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MTA1ODk0", "url": "https://github.com/line/armeria/pull/2669#pullrequestreview-395105894", "createdAt": "2020-04-17T01:34:49Z", "commit": {"oid": "eafaa69721d22606c78c830b967a1fdad9de2650"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMTozNDo1MFrOGG85ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMTozNTo0NFrOGG86Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0MjM3Mw==", "bodyText": "Let's move these down.", "url": "https://github.com/line/armeria/pull/2669#discussion_r409942373", "createdAt": "2020-04-17T01:34:50Z", "author": {"login": "minwoox"}, "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcClientFactory.java", "diffHunk": "@@ -84,18 +87,25 @@ public Object newClient(ClientBuilderParams params) {\n         final ClientOptions options = params.options();\n \n         final SerializationFormat serializationFormat = scheme.serializationFormat();\n-        final Class<?> stubClass = clientType.getEnclosingClass();\n-        if (stubClass == null) {\n+        final Class<?> enclosingClass = clientType.getEnclosingClass();\n+        if (enclosingClass == null) {\n             throw newUnknownClientTypeException(clientType);\n         }\n \n         final HttpClient httpClient = newHttpClient(params);\n-        final Method stubFactoryMethod = findStubFactoryMethod(clientType, stubClass);\n+        final Method stubFactoryMethod = findStubFactoryMethod(clientType, enclosingClass);\n+        Constructor<?> stubConstructor = null;\n+        if (stubFactoryMethod == null) {\n+            stubConstructor = findStubConstructor(clientType);\n+            if (stubConstructor == null) {\n+                throw newUnknownClientTypeException(clientType);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eafaa69721d22606c78c830b967a1fdad9de2650"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0MjYzMA==", "bodyText": "final Method stubFactoryMethod = findStubFactoryMethod(clientType, enclosingClass);\ntry {\n    // Verified stubFactoryMethod.getReturnType() == clientType in findStubFactoryMethod().\n    if (stubFactoryMethod != null) {\n        return stubFactoryMethod.invoke(null, channel);\n    } else {\n        final Constructor<?> stubConstructor = findStubConstructor(clientType);\n        if (stubConstructor == null) {\n            throw newUnknownClientTypeException(clientType);\n        }\n        return stubConstructor.newInstance(channel);\n    }\n} catch (IllegalAccessException | InvocationTargetException | InstantiationException e) {\n    throw new IllegalStateException(\"Could not create a gRPC stub through reflection.\", e);\n}", "url": "https://github.com/line/armeria/pull/2669#discussion_r409942630", "createdAt": "2020-04-17T01:35:44Z", "author": {"login": "minwoox"}, "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcClientFactory.java", "diffHunk": "@@ -108,15 +118,20 @@ public Object newClient(ClientBuilderParams params) {\n \n         try {\n             // Verified stubFactoryMethod.getReturnType() == clientType in findStubFactoryMethod().\n-            return stubFactoryMethod.invoke(null, channel);\n-        } catch (IllegalAccessException | InvocationTargetException e) {\n+            if (stubFactoryMethod != null) {\n+                return stubFactoryMethod.invoke(null, channel);\n+            } else {\n+                return stubConstructor.newInstance(channel);\n+            }\n+        } catch (IllegalAccessException | InvocationTargetException | InstantiationException e) {\n             throw new IllegalStateException(\"Could not create a gRPC stub through reflection.\", e);\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eafaa69721d22606c78c830b967a1fdad9de2650"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MTU1MTE5", "url": "https://github.com/line/armeria/pull/2669#pullrequestreview-395155119", "createdAt": "2020-04-17T04:34:15Z", "commit": {"oid": "1bbf8d740618c0a9e87c038caf7668ada82a7f94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNDozNDoxNVrOGG_qKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNDozNDoxNVrOGG_qKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4NzYyNQ==", "bodyText": "Check context here too, I think similar to the flow below it's not correct - and it'd be quite annoying to have to propagate it here too despite being a coroutine", "url": "https://github.com/line/armeria/pull/2669#discussion_r409987625", "createdAt": "2020-04-17T04:34:15Z", "author": {"login": "anuraaga"}, "path": "examples/grpc-kotlin/src/main/kotlin/example/armeria/grpc/kotlin/HelloServiceImpl.kt", "diffHunk": "@@ -3,52 +3,56 @@ package example.armeria.grpc.kotlin\n import com.linecorp.armeria.server.ServiceRequestContext\n import example.armeria.grpc.kotlin.Hello.HelloReply\n import example.armeria.grpc.kotlin.Hello.HelloRequest\n-import io.grpc.stub.StreamObserver\n-import java.time.Duration\n-import java.util.concurrent.TimeUnit\n-import reactor.core.publisher.Flux\n-import reactor.core.scheduler.Schedulers\n-\n-class HelloServiceImpl : HelloServiceGrpc.HelloServiceImplBase() {\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.asCoroutineDispatcher\n+import kotlinx.coroutines.delay\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.collect\n+import kotlinx.coroutines.flow.flow\n+import kotlinx.coroutines.flow.flowOn\n+import kotlinx.coroutines.flow.map\n+import kotlinx.coroutines.flow.toList\n+import kotlinx.coroutines.withContext\n+\n+\n+/**\n+ * Note that if you want to run [HelloServiceImpl] in an event loop and\n+ * get a current [ServiceRequestContext],\n+ * you should initialize [HelloServiceImpl] with [Dispatchers.Unconfined].\n+ * See https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-unconfined.html\n+ * Unless [Dispatchers.Default] executor will handle this service.\n+ */\n+class HelloServiceImpl : HelloServiceGrpcKt.HelloServiceCoroutineImplBase(Dispatchers.Unconfined) {\n \n     /**\n      * Sends a [HelloReply] immediately when receiving a request.\n      */\n-    override fun hello(request: HelloRequest, responseObserver: StreamObserver<HelloReply>) {\n-        responseObserver.onNext(buildReply(toMessage(request.name)))\n-        responseObserver.onCompleted()\n+    override suspend fun hello(request: HelloRequest): HelloReply {\n+        // Make sure that current thread is request context aware\n+        ServiceRequestContext.current()\n+        return buildReply(toMessage(request.name))\n     }\n \n-    override fun lazyHello(request: HelloRequest, responseObserver: StreamObserver<HelloReply>) {\n-        // You can use the event loop for scheduling a task.\n-        ServiceRequestContext.current().contextAwareEventLoop().schedule({\n-            responseObserver.onNext(buildReply(toMessage(request.name)))\n-            responseObserver.onCompleted()\n-        }, 3, TimeUnit.SECONDS)\n+    override suspend fun lazyHello(request: HelloRequest): HelloReply {\n+        delay(3000L)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bbf8d740618c0a9e87c038caf7668ada82a7f94"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NDE1NDgx", "url": "https://github.com/line/armeria/pull/2669#pullrequestreview-395415481", "createdAt": "2020-04-17T12:37:43Z", "commit": {"oid": "5b724b021b6fd9ca1b86d95d9f1250368dec9476"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1OTMyNTIy", "url": "https://github.com/line/armeria/pull/2669#pullrequestreview-395932522", "createdAt": "2020-04-18T17:12:29Z", "commit": {"oid": "ea6e0fd65b63b1f1b4571515600c2beafa8608a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNzoxMjoyOVrOGHsoLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNzoxMjoyOVrOGHsoLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcyNDM5Ng==", "bodyText": "There are intermittent test failures in gjson-web with coroutine.\nThe response was hanging and waiting infinitely. I cannot reproduce it with the original gRPC-Java BlockingStub or Stub with StreamObserver. \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2669#discussion_r410724396", "createdAt": "2020-04-18T17:12:29Z", "author": {"login": "ikhoon"}, "path": "examples/grpc-kotlin/src/test/kotlin/example/armeria/grpc/kotlin/HelloServiceTest.kt", "diffHunk": "@@ -25,156 +19,104 @@ class HelloServiceTest {\n \n     @Test\n     fun reply() {\n-        val helloService = Clients.newClient(uri(), HelloServiceBlockingStub::class.java)\n-        assertThat(helloService.hello(HelloRequest.newBuilder().setName(\"Armeria\").build()).message)\n-                .isEqualTo(\"Hello, Armeria!\")\n+        runBlocking {\n+            val helloService = Clients.newClient(uri(), HelloServiceCoroutineStub::class.java)\n+            assertThat(helloService.hello(HelloRequest.newBuilder().setName(\"Armeria\").build()).message)\n+                    .isEqualTo(\"Hello, Armeria!\")\n+        }\n     }\n \n-    // Should never reach here.\n     @Test\n-    fun replyWithDelay() {\n-        val helloService = Clients.newClient(uri(), HelloServiceFutureStub::class.java)\n-        val future = helloService.lazyHello(HelloRequest.newBuilder().setName(\"Armeria\").build())\n-        val completed = AtomicBoolean()\n-        Futures.addCallback(future, object : FutureCallback<HelloReply> {\n-            override fun onSuccess(result: HelloReply?) {\n-                assertThat(result?.message).isEqualTo(\"Hello, Armeria!\")\n-                completed.set(true)\n-            }\n-\n-            override fun onFailure(t: Throwable) { // Should never reach here.\n-                throw Error(t)\n-            }\n-        }, MoreExecutors.directExecutor())\n+    fun replyWithGJson() {\n+        runBlocking {\n+            val uri = \"gjson-web+http://127.0.0.1:\" + server.activeLocalPort() + '/'\n+            val helloService = Clients.newClient(uri, HelloServiceCoroutineStub::class.java)\n+            assertThat(helloService.hello(HelloRequest.newBuilder().setName(\"Armeria\").build()).message)\n+                    .isEqualTo(\"Hello, Armeria!\")\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea6e0fd65b63b1f1b4571515600c2beafa8608a9"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MzcyNTQ5", "url": "https://github.com/line/armeria/pull/2669#pullrequestreview-396372549", "createdAt": "2020-04-20T11:36:17Z", "commit": {"oid": "0311513dccebf8f8bd283c8fc0dc26d2e6549e8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMTozNjoxN1rOGIQKRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMTozNjoxN1rOGIQKRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMwNjU2NA==", "bodyText": "This doesn't seem right, why would HttpResponse.whenComplete have been called if there are still messages with the trailers left?", "url": "https://github.com/line/armeria/pull/2669#discussion_r411306564", "createdAt": "2020-04-20T11:36:17Z", "author": {"login": "anuraaga"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageDeframer.java", "diffHunk": "@@ -263,12 +263,24 @@ public boolean isStalled() {\n      * @param endOfStream if {@code true}, indicates that {@code data} is the end of the stream from\n      *        the remote endpoint.  End of stream should not be used in the event of a transport\n      *        error, such as a stream reset.\n-     * @throws IllegalStateException if {@link #close()} has been called previously or if\n+     * @throws IllegalStateException if the specified {@code endOfStream} is {@code false} and\n      *         this method has previously been called with {@code endOfStream=true}.\n      */\n     public void deframe(HttpData data, boolean endOfStream) {\n         requireNonNull(data, \"data\");\n         checkNotClosed();\n+\n+        // 'deframe()' could be called twice with endOfStream due to a race condition like the following:\n+        //\n+        // 1) HttpStreamReader.apply(), which invokes closeDeframer(), is called when\n+        //    HttpResponse.whenComplete().\n+        // 2) While ArmeriaClientCall requests next messages, GrpcStatus.reportStatus() is invoked if the next", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0311513dccebf8f8bd283c8fc0dc26d2e6549e8a"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "947661d3bf9ade1b0f44b6edf86e960d6f2f29ad", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/947661d3bf9ade1b0f44b6edf86e960d6f2f29ad", "committedDate": "2020-04-23T15:18:13Z", "message": "Address comments by @anuraaga\n\nLet deframer close when complete when\n- HttpStreamReader received all data from publisher\n- deframer has unprocessedBytes and is not stalled"}, "afterCommit": {"oid": "9c5e797749c620b42a4b1249f227d05e6224770a", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/9c5e797749c620b42a4b1249f227d05e6224770a", "committedDate": "2020-04-23T15:24:31Z", "message": "Address comments by @anuraaga\n\nLet deframer close when complete when\n- HttpStreamReader received all data from publisher\n- deframer has unprocessedBytes and is not stalled"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NjEyOTc4", "url": "https://github.com/line/armeria/pull/2669#pullrequestreview-399612978", "createdAt": "2020-04-24T03:17:27Z", "commit": {"oid": "9c5e797749c620b42a4b1249f227d05e6224770a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzoxNzoyOFrOGLEiLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzoxNzo1MlrOGLEikA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2MTgwNQ==", "bodyText": "Ah I see - instead of this how about adding a isClosing method that checks closeWhenComplete and check it inside closeDeframer instead of doing this check. There shouldn't be any need to call closeWhenComplete twice.", "url": "https://github.com/line/armeria/pull/2669#discussion_r414261805", "createdAt": "2020-04-24T03:17:28Z", "author": {"login": "anuraaga"}, "path": "grpc/src/main/java/com/linecorp/armeria/internal/common/grpc/HttpStreamReader.java", "diffHunk": "@@ -181,7 +181,15 @@ public Void apply(@Nullable Void unused, @Nullable Throwable cause) {\n         }\n \n         if (cause == null) {\n-            closeDeframer();\n+            if (!deframer.isStalled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c5e797749c620b42a4b1249f227d05e6224770a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2MTkwNA==", "bodyText": "And probably a good idea to move this bug fix to a separate PR.", "url": "https://github.com/line/armeria/pull/2669#discussion_r414261904", "createdAt": "2020-04-24T03:17:52Z", "author": {"login": "anuraaga"}, "path": "grpc/src/main/java/com/linecorp/armeria/internal/common/grpc/HttpStreamReader.java", "diffHunk": "@@ -181,7 +181,15 @@ public Void apply(@Nullable Void unused, @Nullable Throwable cause) {\n         }\n \n         if (cause == null) {\n-            closeDeframer();\n+            if (!deframer.isStalled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2MTgwNQ=="}, "originalCommit": {"oid": "9c5e797749c620b42a4b1249f227d05e6224770a"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9c5e797749c620b42a4b1249f227d05e6224770a", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/9c5e797749c620b42a4b1249f227d05e6224770a", "committedDate": "2020-04-23T15:24:31Z", "message": "Address comments by @anuraaga\n\nLet deframer close when complete when\n- HttpStreamReader received all data from publisher\n- deframer has unprocessedBytes and is not stalled"}, "afterCommit": {"oid": "a704ef8d8db676c0f6cc22cc73585632f96c25ac", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/a704ef8d8db676c0f6cc22cc73585632f96c25ac", "committedDate": "2020-04-24T05:43:19Z", "message": "Support Kotlin-gRPC client CoroutineStub\n\nMotivation:\n\ngRPC for Kotlin is actively developed and\n[0.1.1](https://github.com/grpc/grpc-kotlin/releases/tag/v0.1.1) has been released last week.\n\nModifications:\n\n- Allow GrpcClientFactory creating client from CoroutineStub\n- Migrate Kotlin example to gRPC-Kotlin\n\nResult:\n\n- (Partially) Fixes #2662\n- You can now run Armeria gRPC client with `gproto` protocol and gRPC-Kotline CoroutinStub"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d0a33c0fe5e0f0c7daf3bd4739d04ca7b6ab457", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/2d0a33c0fe5e0f0c7daf3bd4739d04ca7b6ab457", "committedDate": "2020-04-24T05:47:34Z", "message": "Support Kotlin-gRPC client CoroutineStub\n\nMotivation:\n\ngRPC for Kotlin is actively developed and\n[0.1.1](https://github.com/grpc/grpc-kotlin/releases/tag/v0.1.1) has been released last week.\n\nModifications:\n\n- Allow GrpcClientFactory creating client from CoroutineStub\n- Migrate Kotlin example to gRPC-Kotlin\n\nResult:\n\n- (Partially) Fixes #2662\n- You can now run Armeria gRPC client with `gproto` protocol and gRPC-Kotline CoroutinStub\n\nCo-authored-by: Gary Lo <gary.lo@airtasker.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a704ef8d8db676c0f6cc22cc73585632f96c25ac", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/a704ef8d8db676c0f6cc22cc73585632f96c25ac", "committedDate": "2020-04-24T05:43:19Z", "message": "Support Kotlin-gRPC client CoroutineStub\n\nMotivation:\n\ngRPC for Kotlin is actively developed and\n[0.1.1](https://github.com/grpc/grpc-kotlin/releases/tag/v0.1.1) has been released last week.\n\nModifications:\n\n- Allow GrpcClientFactory creating client from CoroutineStub\n- Migrate Kotlin example to gRPC-Kotlin\n\nResult:\n\n- (Partially) Fixes #2662\n- You can now run Armeria gRPC client with `gproto` protocol and gRPC-Kotline CoroutinStub"}, "afterCommit": {"oid": "2d0a33c0fe5e0f0c7daf3bd4739d04ca7b6ab457", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/2d0a33c0fe5e0f0c7daf3bd4739d04ca7b6ab457", "committedDate": "2020-04-24T05:47:34Z", "message": "Support Kotlin-gRPC client CoroutineStub\n\nMotivation:\n\ngRPC for Kotlin is actively developed and\n[0.1.1](https://github.com/grpc/grpc-kotlin/releases/tag/v0.1.1) has been released last week.\n\nModifications:\n\n- Allow GrpcClientFactory creating client from CoroutineStub\n- Migrate Kotlin example to gRPC-Kotlin\n\nResult:\n\n- (Partially) Fixes #2662\n- You can now run Armeria gRPC client with `gproto` protocol and gRPC-Kotline CoroutinStub\n\nCo-authored-by: Gary Lo <gary.lo@airtasker.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9ad40ff8d7e2e67860be14a71044c7f8c88d72c", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/f9ad40ff8d7e2e67860be14a71044c7f8c88d72c", "committedDate": "2020-04-24T05:50:42Z", "message": "Revert gjson to gproto"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c6927fa3bbea84648522d65cd88f0e50c658eeb", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/4c6927fa3bbea84648522d65cd88f0e50c658eeb", "committedDate": "2020-04-24T06:01:59Z", "message": "Fix wrong dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20bc5bfff26a2853de9c82ebd3a2583f96a3adec", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/20bc5bfff26a2853de9c82ebd3a2583f96a3adec", "committedDate": "2020-04-24T09:58:08Z", "message": "Kotlin lint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5ODEyMzEx", "url": "https://github.com/line/armeria/pull/2669#pullrequestreview-399812311", "createdAt": "2020-04-24T10:05:40Z", "commit": {"oid": "20bc5bfff26a2853de9c82ebd3a2583f96a3adec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMDowNTo0MFrOGLQXTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMDowNTo0MFrOGLQXTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ1NTYyOQ==", "bodyText": "Could you send a pull request for this to line/gradle-scripts?", "url": "https://github.com/line/armeria/pull/2669#discussion_r414455629", "createdAt": "2020-04-24T10:05:40Z", "author": {"login": "trustin"}, "path": "gradle/scripts/lib/java-rpc-proto.gradle", "diffHunk": "@@ -36,6 +36,11 @@ configure(projectsWithFlags('java')) {\n                             artifact = \"com.salesforce.servicelibs:rxgrpc:${managedVersions['com.salesforce.servicelibs:reactor-grpc']}\"\n                         }\n                     }\n+                    if (project.ext.hasFlag('kotlin-grpc')) {\n+                        kotlinGrpc {\n+                            artifact = \"io.grpc:protoc-gen-grpc-kotlin:${managedVersions['io.grpc:protoc-gen-grpc-kotlin']}\"\n+                        }\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20bc5bfff26a2853de9c82ebd3a2583f96a3adec"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1a8787c8cb2061a0bf120cdc426bbfa0f8186b3", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/f1a8787c8cb2061a0bf120cdc426bbfa0f8186b3", "committedDate": "2020-04-27T04:29:35Z", "message": "Check in gRPC-Kotlin stub and exclude it from delete task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f3dfdb97a4b995a619f9f5454178f6ebe70f565", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/7f3dfdb97a4b995a619f9f5454178f6ebe70f565", "committedDate": "2020-04-27T04:36:05Z", "message": "Remove kotlin-grpc flag"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ca9fc6909becd58adceb2ca1a644386fbb7685c", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/9ca9fc6909becd58adceb2ca1a644386fbb7685c", "committedDate": "2020-04-27T04:31:10Z", "message": "Remove kotlin-grpc flag"}, "afterCommit": {"oid": "7f3dfdb97a4b995a619f9f5454178f6ebe70f565", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/7f3dfdb97a4b995a619f9f5454178f6ebe70f565", "committedDate": "2020-04-27T04:36:05Z", "message": "Remove kotlin-grpc flag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e147c3a2ae951b27da20067b414f11b41f6eb170", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/e147c3a2ae951b27da20067b414f11b41f6eb170", "committedDate": "2020-04-27T06:12:32Z", "message": "Fix compile error / Add 'kotlinGrpc' path as source set"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNjg3NDAy", "url": "https://github.com/line/armeria/pull/2669#pullrequestreview-400687402", "createdAt": "2020-04-27T07:23:17Z", "commit": {"oid": "f1a8787c8cb2061a0bf120cdc426bbfa0f8186b3"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzoyMzoxN1rOGMUguw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzoyNDowMlrOGMUiZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3MjE1NQ==", "bodyText": "\"${path}\".endsWith('gen-src') (File separator can be \\ or /)", "url": "https://github.com/line/armeria/pull/2669#discussion_r415572155", "createdAt": "2020-04-27T07:23:17Z", "author": {"login": "trustin"}, "path": "examples/grpc-kotlin/build.gradle.kts", "diffHunk": "@@ -46,3 +46,13 @@ tasks.withType<KotlinCompile> {\n         freeCompilerArgs = listOf(\"-Xjsr305=strict\", \"-java-parameters\")\n     }\n }\n+\n+tasks.clean {\n+    // TODO(ikhoon): gRPC-Kotlin compiler does not run well in Window. The generated stub files is added\n+    //               intentionally. Remove this once gRPC-Kotlin compiler supports Window as well.\n+    for (path in delete) {\n+        if (path.toString() == \"$projectDir/gen-src\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1a8787c8cb2061a0bf120cdc426bbfa0f8186b3"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3MjU4Mw==", "bodyText": "Window -> Windows", "url": "https://github.com/line/armeria/pull/2669#discussion_r415572583", "createdAt": "2020-04-27T07:24:02Z", "author": {"login": "trustin"}, "path": "examples/grpc-kotlin/build.gradle.kts", "diffHunk": "@@ -44,3 +46,19 @@ tasks.withType<KotlinCompile> {\n         freeCompilerArgs = listOf(\"-Xjsr305=strict\", \"-java-parameters\")\n     }\n }\n+\n+// TODO(ikhoon): gRPC-Kotlin compiler does not run well in Window. The generated stub files are added\n+//               intentionally. Remove this once gRPC-Kotlin compiler supports Window as well.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e147c3a2ae951b27da20067b414f11b41f6eb170"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47bc5ea18d6783b83a69cb59abce69b46cffa6de", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/47bc5ea18d6783b83a69cb59abce69b46cffa6de", "committedDate": "2020-04-27T08:35:50Z", "message": "Exclude generated source from ktlint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNTIzOTQ4", "url": "https://github.com/line/armeria/pull/2669#pullrequestreview-402523948", "createdAt": "2020-04-29T10:00:19Z", "commit": {"oid": "47bc5ea18d6783b83a69cb59abce69b46cffa6de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNTI4Mjg2", "url": "https://github.com/line/armeria/pull/2669#pullrequestreview-402528286", "createdAt": "2020-04-29T10:06:40Z", "commit": {"oid": "47bc5ea18d6783b83a69cb59abce69b46cffa6de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDowNjo0MFrOGN4GBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDowNjo0MFrOGN4GBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwMzcxOQ==", "bodyText": "I don't have high hopes for grpc/grpc-kotlin#66 being solved for a long time.\nHow about instead of hacking relying on implementation detail like this, go ahead and use the wrapper function pattern so users implement stubs something like\nclass HelloServiceImpl {\n  override suspend function hello = withArmeriaContext {\n  }\n}", "url": "https://github.com/line/armeria/pull/2669#discussion_r417203719", "createdAt": "2020-04-29T10:06:40Z", "author": {"login": "anuraaga"}, "path": "examples/grpc-kotlin/src/main/kotlin/example/armeria/grpc/kotlin/ArmeriaContext.kt", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package example.armeria.grpc.kotlin\n+\n+import com.linecorp.armeria.common.RequestContext\n+import com.linecorp.armeria.server.ServiceRequestContext\n+import kotlin.coroutines.CoroutineContext\n+import kotlin.coroutines.EmptyCoroutineContext\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.asCoroutineDispatcher\n+\n+/**\n+ * A [CoroutineContext] that propagates an [ServiceRequestContext] to coroutines run using\n+ * an Armeria context aware executor.\n+ */\n+internal object ArmeriaContext : CoroutineContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47bc5ea18d6783b83a69cb59abce69b46cffa6de"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f7633a5845c4836e51f34c0d6c8688ae4adafb1", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/2f7633a5845c4836e51f34c0d6c8688ae4adafb1", "committedDate": "2020-04-29T11:36:25Z", "message": "Address comments by @anuraaga / decorate rpc method with armeria context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0a578cd7815c0c9578809c889f4d41d5fe75d49", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/c0a578cd7815c0c9578809c889f4d41d5fe75d49", "committedDate": "2020-04-29T11:40:46Z", "message": "Add missed one"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNjkxODIz", "url": "https://github.com/line/armeria/pull/2669#pullrequestreview-402691823", "createdAt": "2020-04-29T13:56:45Z", "commit": {"oid": "c0a578cd7815c0c9578809c889f4d41d5fe75d49"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNzA0MjMw", "url": "https://github.com/line/armeria/pull/2669#pullrequestreview-402704230", "createdAt": "2020-04-29T14:09:11Z", "commit": {"oid": "c0a578cd7815c0c9578809c889f4d41d5fe75d49"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDowOToxMVrOGOAqqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDowOToxMVrOGOAqqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM0NDE3MQ==", "bodyText": "Does this need to be flow? I wouldn't expect a for loop in a coroutine to cause any differences compared to our normal withArmeriaContext methods", "url": "https://github.com/line/armeria/pull/2669#discussion_r417344171", "createdAt": "2020-04-29T14:09:11Z", "author": {"login": "anuraaga"}, "path": "examples/grpc-kotlin/src/main/kotlin/example/armeria/grpc/kotlin/HelloServiceImpl.kt", "diffHunk": "@@ -3,129 +3,112 @@ package example.armeria.grpc.kotlin\n import com.linecorp.armeria.server.ServiceRequestContext\n import example.armeria.grpc.kotlin.Hello.HelloReply\n import example.armeria.grpc.kotlin.Hello.HelloRequest\n-import io.grpc.stub.StreamObserver\n-import java.time.Duration\n-import java.util.concurrent.TimeUnit\n-import reactor.core.publisher.Flux\n-import reactor.core.scheduler.Schedulers\n-\n-class HelloServiceImpl : HelloServiceGrpc.HelloServiceImplBase() {\n+import example.armeria.grpc.kotlin.HelloServiceImpl.Companion.withArmeriaBlockingContext\n+import example.armeria.grpc.kotlin.HelloServiceImpl.Companion.withArmeriaContext\n+import kotlinx.coroutines.CoroutineDispatcher\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.asCoroutineDispatcher\n+import kotlinx.coroutines.delay\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.collect\n+import kotlinx.coroutines.flow.flow\n+import kotlinx.coroutines.flow.flowOn\n+import kotlinx.coroutines.flow.map\n+import kotlinx.coroutines.flow.toList\n+import kotlinx.coroutines.withContext\n+\n+/**\n+ * Note that if you want to access a current [ServiceRequestContext] in [HelloServiceImpl],\n+ * you should initialize [HelloServiceImpl] with [Dispatchers.Unconfined] and wrap your rpc methods with\n+ * [withArmeriaContext] or [withArmeriaBlockingContext].\n+ */\n+class HelloServiceImpl : HelloServiceGrpcKt.HelloServiceCoroutineImplBase(Dispatchers.Unconfined) {\n \n     /**\n      * Sends a [HelloReply] immediately when receiving a request.\n      */\n-    override fun hello(request: HelloRequest, responseObserver: StreamObserver<HelloReply>) {\n-        responseObserver.onNext(buildReply(toMessage(request.name)))\n-        responseObserver.onCompleted()\n+    override suspend fun hello(request: HelloRequest): HelloReply = withArmeriaContext {\n+        // Make sure that current thread is request context aware\n+        ServiceRequestContext.current()\n+        buildReply(toMessage(request.name))\n     }\n \n-    override fun lazyHello(request: HelloRequest, responseObserver: StreamObserver<HelloReply>) {\n-        // You can use the event loop for scheduling a task.\n-        ServiceRequestContext.current().contextAwareEventLoop().schedule({\n-            responseObserver.onNext(buildReply(toMessage(request.name)))\n-            responseObserver.onCompleted()\n-        }, 3, TimeUnit.SECONDS)\n+    override suspend fun lazyHello(request: HelloRequest): HelloReply = withArmeriaContext {\n+        delay(3000L)\n+        ServiceRequestContext.current()\n+        buildReply(toMessage(request.name))\n     }\n \n     /**\n      * Sends a [HelloReply] using `blockingTaskExecutor`.\n      *\n      * @see [Blocking service implementation](https://line.github.io/armeria/server-grpc.html#blocking-service-implementation)\n      */\n-    override fun blockingHello(request: HelloRequest, responseObserver: StreamObserver<HelloReply>) {\n-        // Unlike upstream gRPC-Java, Armeria does not run service logic in a separate thread pool by default.\n-        // Therefore, this method will run in the event loop, which means that you can suffer the performance\n-        // degradation if you call a blocking API in this method. In this case, you have the following options:\n-        //\n-        // 1. Call a blocking API in the blockingTaskExecutor provided by Armeria.\n-        // 2. Set `GrpcServiceBuilder.useBlockingTaskExecutor(true)` when building your GrpcService.\n-        // 3. Call a blocking API in the separate thread pool you manage.\n-        //\n-        // In this example, we chose the option 1:\n-        ServiceRequestContext.current().blockingTaskExecutor().submit {\n-            try { // Simulate a blocking API call.\n-                Thread.sleep(3000)\n-            } catch (ignored: Exception) { // Do nothing.\n-            }\n-            responseObserver.onNext(buildReply(toMessage(request.name)))\n-            responseObserver.onCompleted()\n+    override suspend fun blockingHello(request: HelloRequest): HelloReply = withArmeriaBlockingContext {\n+        try { // Simulate a blocking API call.\n+            Thread.sleep(3000)\n+        } catch (ignored: Exception) { // Do nothing.\n         }\n+        // Make sure that current thread is request context aware\n+        ServiceRequestContext.current()\n+        buildReply(toMessage(request.name))\n     }\n \n     /**\n      * Sends 5 [HelloReply] responses when receiving a request.\n      *\n      * @see lazyHello(HelloRequest, StreamObserver)\n      */\n-    override fun lotsOfReplies(request: HelloRequest, responseObserver: StreamObserver<HelloReply>) {\n+    override fun lotsOfReplies(request: HelloRequest): Flow<HelloReply> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0a578cd7815c0c9578809c889f4d41d5fe75d49"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NzcxNzk4", "url": "https://github.com/line/armeria/pull/2669#pullrequestreview-404771798", "createdAt": "2020-05-04T07:53:54Z", "commit": {"oid": "c0a578cd7815c0c9578809c889f4d41d5fe75d49"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2Mjc5Njcw", "url": "https://github.com/line/armeria/pull/2669#pullrequestreview-406279670", "createdAt": "2020-05-06T03:09:20Z", "commit": {"oid": "c0a578cd7815c0c9578809c889f4d41d5fe75d49"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 394, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}