{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MDgxNzQx", "number": 2591, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODo1ODoxN1rODoPSzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDowMTozNVrODoQorQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTIwMjA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODo1ODoxN1rOF2qqVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTo0NzoxOVrOF2sSiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NjM5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // so we do not have any chance of nesting the use of TemporaryThreadLocals.\n          \n          \n            \n                    // to follow our convention of not calling other methods while appending to TemporaryThreadLocals.\n          \n      \n    \n    \n  \n\nWasn't sure what the comment means, this might be clearer.", "url": "https://github.com/line/armeria/pull/2591#discussion_r392866390", "createdAt": "2020-03-16T08:58:17Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java", "diffHunk": "@@ -548,42 +556,46 @@ public RequestLogBuilder logBuilder() {\n \n     @Override\n     public String toString() {\n-        String strVal = this.strVal;\n         if (strVal != null) {\n             return strVal;\n         }\n+        return toStringSlow();\n \n-        final StringBuilder buf = new StringBuilder(107);\n-        buf.append(\"[C]\");\n+    }\n \n-        // Prepend the current channel information if available.\n+    private String toStringSlow() {\n+        // Prepare all properties required for building a string representation,\n+        // so we do not have any chance of nesting the use of TemporaryThreadLocals.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75bb2f5d2c0c0f1ea32e34002fa597ba265dd0a4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5MzA2NQ==", "bodyText": "Hmm, I meant not using TemporaryThreadLocals while using it in nested toString()s.", "url": "https://github.com/line/armeria/pull/2591#discussion_r392893065", "createdAt": "2020-03-16T09:47:19Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java", "diffHunk": "@@ -548,42 +556,46 @@ public RequestLogBuilder logBuilder() {\n \n     @Override\n     public String toString() {\n-        String strVal = this.strVal;\n         if (strVal != null) {\n             return strVal;\n         }\n+        return toStringSlow();\n \n-        final StringBuilder buf = new StringBuilder(107);\n-        buf.append(\"[C]\");\n+    }\n \n-        // Prepend the current channel information if available.\n+    private String toStringSlow() {\n+        // Prepare all properties required for building a string representation,\n+        // so we do not have any chance of nesting the use of TemporaryThreadLocals.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NjM5MA=="}, "originalCommit": {"oid": "75bb2f5d2c0c0f1ea32e34002fa597ba265dd0a4"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTIzMDQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTowNzozNlrOF2q8Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTowNzozNlrOF2q8Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3MDkzMQ==", "bodyText": "Use JDK Objects.equals()", "url": "https://github.com/line/armeria/pull/2591#discussion_r392870931", "createdAt": "2020-03-16T09:07:36Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java", "diffHunk": "@@ -485,48 +488,45 @@ void setRequestTimeoutController(TimeoutController requestTimeoutController) {\n \n     @Override\n     public String toString() {\n-        String strVal = this.strVal;\n         if (strVal != null) {\n             return strVal;\n+        } else {\n+            return toStringSlow();\n         }\n \n-        final StringBuilder buf = new StringBuilder(108);\n-        buf.append(\"[S]\");\n-\n-        // Prepend the current channel information if available.\n-        final Channel ch = channel();\n-        final boolean hasChannel = ch != null;\n-        if (hasChannel) {\n-            buf.append(ch);\n-\n-            final InetAddress remote = ((InetSocketAddress) remoteAddress()).getAddress();\n-            final InetAddress client = clientAddress();\n-            if (remote != null && !remote.equals(client)) {\n-                buf.append(\"[C:\").append(client.getHostAddress()).append(']');\n-            }\n-        }\n-\n-        buf.append('[')\n-           .append(sessionProtocol().uriText())\n-           .append(\"://\")\n-           .append(virtualHost().defaultHostname());\n+    }\n \n+    private String toStringSlow() {\n+        // Prepare all properties required for building a string representation,\n+        // so we do not have any chance of nesting the use of TemporaryThreadLocals.\n+        final String sreqId = id().shortText();\n+        final String chanId = ch.id().asShortText();\n+        final InetSocketAddress raddr = remoteAddress();\n         final InetSocketAddress laddr = localAddress();\n-        if (laddr != null) {\n-            buf.append(':').append(laddr.getPort());\n-        } else {\n-            buf.append(\":-1\"); // Port unknown.\n+        final InetAddress caddr = clientAddress();\n+        final String proto = sessionProtocol().uriText();\n+        final String authority = virtualHost().defaultHostname();\n+        final String path = path();\n+        final String method = method().name();\n+\n+        // Build the string representation.\n+        final StringBuilder buf = TemporaryThreadLocals.get().stringBuilder();\n+        buf.append(\"[sreqId=\").append(sreqId)\n+           .append(\", chanId=\").append(chanId);\n+\n+        if (!Objects.equal(caddr, raddr.getAddress())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75bb2f5d2c0c0f1ea32e34002fa597ba265dd0a4"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTQyMTg5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDowMTozNVrOF2sxdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDoyNjo1N1rOF2tlsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkwMDk4Mw==", "bodyText": "This is less clear again. I think we have a convention of not calling any methods during thread local building because it's not clear whether that method may reinitialize the buffer or not. toString is of course a common culprit but not necessarily the only one.\nActually the javadoc rule of thumb doesn't seem strong enough, it's not really an issue of recursion and just about whether other methods may initialize a buffer so the general rule of thumb is to call no other methods unless they accept a StringBuilder as a parameter.\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/internal/common/util/TemporaryThreadLocals.java\n    \n    \n         Line 47\n      in\n      9061e24\n    \n    \n    \n    \n\n        \n          \n            * <p>A rule of thumb is to use the thread-local variables provided by this class in a narrow scope", "url": "https://github.com/line/armeria/pull/2591#discussion_r392900983", "createdAt": "2020-03-16T10:01:35Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java", "diffHunk": "@@ -548,42 +556,47 @@ public RequestLogBuilder logBuilder() {\n \n     @Override\n     public String toString() {\n-        String strVal = this.strVal;\n         if (strVal != null) {\n             return strVal;\n         }\n+        return toStringSlow();\n \n-        final StringBuilder buf = new StringBuilder(107);\n-        buf.append(\"[C]\");\n+    }\n \n-        // Prepend the current channel information if available.\n+    private String toStringSlow() {\n+        // Prepare all properties required for building a string representation,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73ada8635d676a40452052a970bafaac79b6d4bd"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkxNDM1NA==", "bodyText": "Updated again, this time TemporaryThreadLocals as well.", "url": "https://github.com/line/armeria/pull/2591#discussion_r392914354", "createdAt": "2020-03-16T10:26:57Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java", "diffHunk": "@@ -548,42 +556,47 @@ public RequestLogBuilder logBuilder() {\n \n     @Override\n     public String toString() {\n-        String strVal = this.strVal;\n         if (strVal != null) {\n             return strVal;\n         }\n+        return toStringSlow();\n \n-        final StringBuilder buf = new StringBuilder(107);\n-        buf.append(\"[C]\");\n+    }\n \n-        // Prepend the current channel information if available.\n+    private String toStringSlow() {\n+        // Prepare all properties required for building a string representation,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkwMDk4Mw=="}, "originalCommit": {"oid": "73ada8635d676a40452052a970bafaac79b6d4bd"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2772, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}