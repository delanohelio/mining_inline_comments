{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNDgzMDAw", "number": 2861, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODozNjoxOVrOEKaxXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoyMDowNFrOEKs7Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzU5ODM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/file/AggregatedHttpFile.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODozNjoyMFrOGrcabg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODozNjoyMFrOGrcabg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIwNzQ3MA==", "bodyText": "HttpFile.of -> AggregatedHttpFile.of?", "url": "https://github.com/line/armeria/pull/2861#discussion_r448207470", "createdAt": "2020-07-01T08:36:20Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/file/AggregatedHttpFile.java", "diffHunk": "@@ -15,51 +15,76 @@\n  */\n package com.linecorp.armeria.server.file;\n \n-import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.Executor;\n+import static java.util.Objects.requireNonNull;\n \n import javax.annotation.Nullable;\n \n import com.linecorp.armeria.common.AggregatedHttpResponse;\n import com.linecorp.armeria.common.HttpData;\n-import com.linecorp.armeria.common.HttpResponse;\n import com.linecorp.armeria.common.ResponseHeaders;\n-import com.linecorp.armeria.common.util.UnmodifiableFuture;\n-\n-import io.netty.buffer.ByteBufAllocator;\n \n /**\n- * An immutable variant of {@link HttpFile} which has its attributes and content readily available.\n- * Unlike {@link HttpFile}, the following operations in {@link AggregatedHttpFile} neither blocks nor raises\n- * an exception:\n- * <ul>\n- *   <li>{@link #readAttributes(Executor)}</li>\n- *   <li>{@link #readHeaders(Executor)}</li>\n- *   <li>{@link #read(Executor, ByteBufAllocator)}</li>\n- *   <li>{@link #aggregate(Executor)}</li>\n- *   <li>{@link #aggregateWithPooledObjects(Executor, ByteBufAllocator)}</li>\n- * </ul>\n- * It also has the following additional methods that give you an immediate access to the file:\n- * <ul>\n- *   <li>{@link #readAttributes()}</li>\n- *   <li>{@link #readHeaders()}</li>\n- *   <li>{@link #read()}</li>\n- * </ul>\n+ * A complete HTTP file whose attributes and content are readily available.\n  */\n-public interface AggregatedHttpFile extends HttpFile {\n+public interface AggregatedHttpFile {\n+\n+    /**\n+     * Creates a new {@link AggregatedHttpFile} which streams the specified {@link HttpData}. This method is\n+     * a shortcut for {@code HttpFile.of(data, System.currentTimeMillis()}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fce09a2d45dae1073f1d909787e017480dc1dc82"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzY2MTQxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/file/AggregatedHttpFile.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1NDoyN1rOGrdCsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1NDoyN1rOGrdCsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzc3OQ==", "bodyText": "nit: request -> file", "url": "https://github.com/line/armeria/pull/2861#discussion_r448217779", "createdAt": "2020-07-01T08:54:27Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/file/AggregatedHttpFile.java", "diffHunk": "@@ -110,14 +120,10 @@ default AggregatedHttpResponse read() {\n     @Nullable\n     HttpData content();\n \n-    @Override\n-    default CompletableFuture<AggregatedHttpFile> aggregate(Executor fileReadExecutor) {\n-        return CompletableFuture.completedFuture(this);\n-    }\n-\n-    @Override\n-    default CompletableFuture<AggregatedHttpFile> aggregateWithPooledObjects(Executor fileReadExecutor,\n-                                                                             ByteBufAllocator alloc) {\n-        return CompletableFuture.completedFuture(this);\n-    }\n+    /**\n+     * Converts this request into a new {@link HttpFile}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fce09a2d45dae1073f1d909787e017480dc1dc82"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzY2MTk4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/file/AggregatedHttpFileBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1NDozN1rOGrdDBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTozNzozMVrOGreiMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzg2Mg==", "bodyText": "2020 \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2861#discussion_r448217862", "createdAt": "2020-07-01T08:54:37Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/file/AggregatedHttpFileBuilder.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2019 LINE Corporation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fce09a2d45dae1073f1d909787e017480dc1dc82"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0MjIyNw==", "bodyText": "\ud83d\ude05 Fixed'em all.", "url": "https://github.com/line/armeria/pull/2861#discussion_r448242227", "createdAt": "2020-07-01T09:37:31Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/file/AggregatedHttpFileBuilder.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2019 LINE Corporation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzg2Mg=="}, "originalCommit": {"oid": "fce09a2d45dae1073f1d909787e017480dc1dc82"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjU3MzE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/file/HttpDataFile.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoyMDowNFrOGr5U3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNDozNzowMFrOGr9JSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4MTE4Mg==", "bodyText": "Is there any reason that you didn't use CompletableFuture.completeValue(attrs)?", "url": "https://github.com/line/armeria/pull/2861#discussion_r448681182", "createdAt": "2020-07-02T00:20:04Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/file/HttpDataFile.java", "diffHunk": "@@ -73,23 +76,23 @@ protected String pathOrUri() {\n     }\n \n     @Override\n-    public HttpFileAttributes readAttributes() {\n+    public HttpFileAttributes attributes() {\n         return attrs;\n     }\n \n     @Override\n     public CompletableFuture<HttpFileAttributes> readAttributes(Executor fileReadExecutor) {\n-        return AggregatedHttpFile.super.readAttributes(fileReadExecutor);\n+        return UnmodifiableFuture.completedFuture(attrs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "765c29772224c19078e1cbf1f1d6044f5da3b1f9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcwOTY2OA==", "bodyText": "No, there isn't any reason. Should we?", "url": "https://github.com/line/armeria/pull/2861#discussion_r448709668", "createdAt": "2020-07-02T02:12:41Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/file/HttpDataFile.java", "diffHunk": "@@ -73,23 +76,23 @@ protected String pathOrUri() {\n     }\n \n     @Override\n-    public HttpFileAttributes readAttributes() {\n+    public HttpFileAttributes attributes() {\n         return attrs;\n     }\n \n     @Override\n     public CompletableFuture<HttpFileAttributes> readAttributes(Executor fileReadExecutor) {\n-        return AggregatedHttpFile.super.readAttributes(fileReadExecutor);\n+        return UnmodifiableFuture.completedFuture(attrs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4MTE4Mg=="}, "originalCommit": {"oid": "765c29772224c19078e1cbf1f1d6044f5da3b1f9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcxMjEzNQ==", "bodyText": "I prefer to use UnmodifiableFuture only when the future can be complete by the caller by mistake, but no big deal. :)", "url": "https://github.com/line/armeria/pull/2861#discussion_r448712135", "createdAt": "2020-07-02T02:23:15Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/file/HttpDataFile.java", "diffHunk": "@@ -73,23 +76,23 @@ protected String pathOrUri() {\n     }\n \n     @Override\n-    public HttpFileAttributes readAttributes() {\n+    public HttpFileAttributes attributes() {\n         return attrs;\n     }\n \n     @Override\n     public CompletableFuture<HttpFileAttributes> readAttributes(Executor fileReadExecutor) {\n-        return AggregatedHttpFile.super.readAttributes(fileReadExecutor);\n+        return UnmodifiableFuture.completedFuture(attrs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4MTE4Mg=="}, "originalCommit": {"oid": "765c29772224c19078e1cbf1f1d6044f5da3b1f9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc0Mzc1Mg==", "bodyText": "A user can also override the result by using obtrude*() methods, so I wanted to avoid such situation. Let me leave this as it is and reconsider once we find an issue about it.", "url": "https://github.com/line/armeria/pull/2861#discussion_r448743752", "createdAt": "2020-07-02T04:37:00Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/file/HttpDataFile.java", "diffHunk": "@@ -73,23 +76,23 @@ protected String pathOrUri() {\n     }\n \n     @Override\n-    public HttpFileAttributes readAttributes() {\n+    public HttpFileAttributes attributes() {\n         return attrs;\n     }\n \n     @Override\n     public CompletableFuture<HttpFileAttributes> readAttributes(Executor fileReadExecutor) {\n-        return AggregatedHttpFile.super.readAttributes(fileReadExecutor);\n+        return UnmodifiableFuture.completedFuture(attrs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4MTE4Mg=="}, "originalCommit": {"oid": "765c29772224c19078e1cbf1f1d6044f5da3b1f9"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2464, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}