{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NjE0NjM1", "number": 2772, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjoyMDozM1rOECa4Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOTowOToyMVrOECeRCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTcyOTQ3OnYy", "diffSide": "LEFT", "path": "core/src/main/java/com/linecorp/armeria/common/stream/StreamWriter.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjoyMDozM1rOGe3TsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODo1MTo1M1rOGe8Hag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxNjYyNQ==", "bodyText": "I think we can remove this annotation rather than suppressing where it's used. \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2772#discussion_r435016625", "createdAt": "2020-06-04T06:20:33Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/StreamWriter.java", "diffHunk": "@@ -96,7 +94,6 @@ default void write(Supplier<? extends T> o) {\n      * @throws IllegalArgumentException if the publication of the specified object has been rejected\n      * @see <a href=\"#reference-counted\">Life cycle of reference-counted objects</a>\n      */\n-    @CheckReturnValue", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61a426538e6fbc6b8a99683e35d5bc7bed72e54"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAyNTU1OA==", "bodyText": "/cc @anuraaga who suggested this annotation first. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2772#discussion_r435025558", "createdAt": "2020-06-04T06:43:18Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/StreamWriter.java", "diffHunk": "@@ -96,7 +94,6 @@ default void write(Supplier<? extends T> o) {\n      * @throws IllegalArgumentException if the publication of the specified object has been rejected\n      * @see <a href=\"#reference-counted\">Life cycle of reference-counted objects</a>\n      */\n-    @CheckReturnValue", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxNjYyNQ=="}, "originalCommit": {"oid": "b61a426538e6fbc6b8a99683e35d5bc7bed72e54"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0MjM0MA==", "bodyText": "I think it's much easier to have a bug because of not checking this return value, in almost all cases the user should specially handle a closed stream right?\nFor example, here it looks like we should actually be skipping the rest of the callback if the stream is already closed\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckService.java\n    \n    \n         Line 332\n      in\n      4f62fc0\n    \n    \n    \n    \n\n        \n          \n           res.tryWrite(ping);", "url": "https://github.com/line/armeria/pull/2772#discussion_r435042340", "createdAt": "2020-06-04T07:19:14Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/StreamWriter.java", "diffHunk": "@@ -96,7 +94,6 @@ default void write(Supplier<? extends T> o) {\n      * @throws IllegalArgumentException if the publication of the specified object has been rejected\n      * @see <a href=\"#reference-counted\">Life cycle of reference-counted objects</a>\n      */\n-    @CheckReturnValue", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxNjYyNQ=="}, "originalCommit": {"oid": "b61a426538e6fbc6b8a99683e35d5bc7bed72e54"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA1NTU4OQ==", "bodyText": "Ah, that makes sense. Let me fix that. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2772#discussion_r435055589", "createdAt": "2020-06-04T07:44:11Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/StreamWriter.java", "diffHunk": "@@ -96,7 +94,6 @@ default void write(Supplier<? extends T> o) {\n      * @throws IllegalArgumentException if the publication of the specified object has been rejected\n      * @see <a href=\"#reference-counted\">Life cycle of reference-counted objects</a>\n      */\n-    @CheckReturnValue", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxNjYyNQ=="}, "originalCommit": {"oid": "b61a426538e6fbc6b8a99683e35d5bc7bed72e54"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5NTQwMg==", "bodyText": "Found out that we can just call res.write(ping); there. \ud83d\ude06", "url": "https://github.com/line/armeria/pull/2772#discussion_r435095402", "createdAt": "2020-06-04T08:51:53Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/StreamWriter.java", "diffHunk": "@@ -96,7 +94,6 @@ default void write(Supplier<? extends T> o) {\n      * @throws IllegalArgumentException if the publication of the specified object has been rejected\n      * @see <a href=\"#reference-counted\">Life cycle of reference-counted objects</a>\n      */\n-    @CheckReturnValue", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxNjYyNQ=="}, "originalCommit": {"oid": "b61a426538e6fbc6b8a99683e35d5bc7bed72e54"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTc5MDU1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjo0NDo0N1rOGe348Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODo1Njo1MlrOGe8TSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAyNjE2MQ==", "bodyText": "/cc @jrhee17 \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2772#discussion_r435026161", "createdAt": "2020-06-04T06:44:47Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java", "diffHunk": "@@ -369,7 +369,7 @@ void testProxyWithUserName() throws Exception {\n         final String username = \"username\";\n         DYNAMIC_HANDLER.setChannelReadCustomizer((ctx, msg) -> {\n             if (msg instanceof DefaultSocks4CommandRequest) {\n-                assertThat(username.equals(((DefaultSocks4CommandRequest) msg).userId()));\n+                assertThat(username).isEqualTo(((DefaultSocks4CommandRequest) msg).userId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61a426538e6fbc6b8a99683e35d5bc7bed72e54"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5ODQ0Mw==", "bodyText": "\ud83d\ude48 \ud83d\ude49", "url": "https://github.com/line/armeria/pull/2772#discussion_r435098443", "createdAt": "2020-06-04T08:56:52Z", "author": {"login": "jrhee17"}, "path": "core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java", "diffHunk": "@@ -369,7 +369,7 @@ void testProxyWithUserName() throws Exception {\n         final String username = \"username\";\n         DYNAMIC_HANDLER.setChannelReadCustomizer((ctx, msg) -> {\n             if (msg instanceof DefaultSocks4CommandRequest) {\n-                assertThat(username.equals(((DefaultSocks4CommandRequest) msg).userId()));\n+                assertThat(username).isEqualTo(((DefaultSocks4CommandRequest) msg).userId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAyNjE2MQ=="}, "originalCommit": {"oid": "b61a426538e6fbc6b8a99683e35d5bc7bed72e54"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTc5MjgyOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/server/TestConverters.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjo0NTozMlrOGe36Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzoyMTo0N1rOGe49Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAyNjUwMw==", "bodyText": "Isn't this cast redundant?", "url": "https://github.com/line/armeria/pull/2772#discussion_r435026503", "createdAt": "2020-06-04T06:45:32Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/TestConverters.java", "diffHunk": "@@ -38,7 +38,7 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,\n                                             @Nullable Object result,\n                                             HttpHeaders trailers) throws Exception {\n             if (result instanceof Integer) {\n-                return httpResponse(HttpData.ofUtf8(String.format(\"Integer: %d\", result)));\n+                return httpResponse(HttpData.ofUtf8(String.format(\"Integer: %d\", (Integer) result)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61a426538e6fbc6b8a99683e35d5bc7bed72e54"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAyNzUyNA==", "bodyText": "Yeah, it's redundant but it seems that the Errorprone couldn't recognize and indicates this is an error. \ud83d\ude31", "url": "https://github.com/line/armeria/pull/2772#discussion_r435027524", "createdAt": "2020-06-04T06:47:53Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/server/TestConverters.java", "diffHunk": "@@ -38,7 +38,7 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,\n                                             @Nullable Object result,\n                                             HttpHeaders trailers) throws Exception {\n             if (result instanceof Integer) {\n-                return httpResponse(HttpData.ofUtf8(String.format(\"Integer: %d\", result)));\n+                return httpResponse(HttpData.ofUtf8(String.format(\"Integer: %d\", (Integer) result)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAyNjUwMw=="}, "originalCommit": {"oid": "b61a426538e6fbc6b8a99683e35d5bc7bed72e54"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAyNzk1Mg==", "bodyText": "It thinks it's a String. \ud83d\ude31", "url": "https://github.com/line/armeria/pull/2772#discussion_r435027952", "createdAt": "2020-06-04T06:48:55Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/server/TestConverters.java", "diffHunk": "@@ -38,7 +38,7 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,\n                                             @Nullable Object result,\n                                             HttpHeaders trailers) throws Exception {\n             if (result instanceof Integer) {\n-                return httpResponse(HttpData.ofUtf8(String.format(\"Integer: %d\", result)));\n+                return httpResponse(HttpData.ofUtf8(String.format(\"Integer: %d\", (Integer) result)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAyNjUwMw=="}, "originalCommit": {"oid": "b61a426538e6fbc6b8a99683e35d5bc7bed72e54"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0MzY4Mg==", "bodyText": "In Java 14 maybe it doesn't complain? :) But yeah seems like a false positive but harmless workaround", "url": "https://github.com/line/armeria/pull/2772#discussion_r435043682", "createdAt": "2020-06-04T07:21:47Z", "author": {"login": "anuraaga"}, "path": "core/src/test/java/com/linecorp/armeria/server/TestConverters.java", "diffHunk": "@@ -38,7 +38,7 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,\n                                             @Nullable Object result,\n                                             HttpHeaders trailers) throws Exception {\n             if (result instanceof Integer) {\n-                return httpResponse(HttpData.ofUtf8(String.format(\"Integer: %d\", result)));\n+                return httpResponse(HttpData.ofUtf8(String.format(\"Integer: %d\", (Integer) result)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAyNjUwMw=="}, "originalCommit": {"oid": "b61a426538e6fbc6b8a99683e35d5bc7bed72e54"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTg5Njk5OnYy", "diffSide": "RIGHT", "path": "examples/server-sent-events/src/test/java/example/armeria/server/sse/MainTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzoyMDozMFrOGe46tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzoyMDozMFrOGe46tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0Mjk5OQ==", "bodyText": "These fluent assertion checks are awesome", "url": "https://github.com/line/armeria/pull/2772#discussion_r435042999", "createdAt": "2020-06-04T07:20:30Z", "author": {"login": "anuraaga"}, "path": "examples/server-sent-events/src/test/java/example/armeria/server/sse/MainTest.java", "diffHunk": "@@ -56,7 +56,7 @@ void testServerSentEvents() {\n                     .expectNext(HttpData.ofUtf8(\"data:2\\n\\n\"))\n                     .expectNext(HttpData.ofUtf8(\"data:3\\n\\n\"))\n                     .expectNext(HttpData.ofUtf8(\"data:4\\n\\n\"))\n-                    .assertNext(o -> assertThat(o.isEndOfStream()))\n+                    .assertNext(o -> assertThat(o.isEndOfStream()).isTrue())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61a426538e6fbc6b8a99683e35d5bc7bed72e54"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDI0OTg4OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOTowMDowN1rOGe8bKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOTozNzo0MlrOGe90XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwMDQ1Nw==", "bodyText": "Don't we need apply false?", "url": "https://github.com/line/armeria/pull/2772#discussion_r435100457", "createdAt": "2020-06-04T09:00:07Z", "author": {"login": "ikhoon"}, "path": "build.gradle", "diffHunk": "@@ -5,6 +5,8 @@ plugins {\n     // If you want to change `org.jetbrains.kotlin.jvm` version, \n     // you also need to change `org.jetbrains.kotlin:kotlin-allopen` version in `dependencies.yml`.\n     id 'org.jetbrains.kotlin.jvm' version '1.3.72' apply false\n+\n+    id 'net.ltgt.errorprone' version '1.2.1'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6506e13be6279b7ceec152fdf97e44a8def7e6a1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEyMzI5Mw==", "bodyText": "Fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2772#discussion_r435123293", "createdAt": "2020-06-04T09:37:42Z", "author": {"login": "minwoox"}, "path": "build.gradle", "diffHunk": "@@ -5,6 +5,8 @@ plugins {\n     // If you want to change `org.jetbrains.kotlin.jvm` version, \n     // you also need to change `org.jetbrains.kotlin:kotlin-allopen` version in `dependencies.yml`.\n     id 'org.jetbrains.kotlin.jvm' version '1.3.72' apply false\n+\n+    id 'net.ltgt.errorprone' version '1.2.1'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwMDQ1Nw=="}, "originalCommit": {"oid": "6506e13be6279b7ceec152fdf97e44a8def7e6a1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDI4NDg5OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOTowOToyMVrOGe8xlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOTozNToxM1rOGe9uow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwNjE5Ng==", "bodyText": "The default value of disableWarningsInGeneratedCode is false.\nHow about making it true for fewer noisy.", "url": "https://github.com/line/armeria/pull/2772#discussion_r435106196", "createdAt": "2020-06-04T09:09:21Z", "author": {"login": "ikhoon"}, "path": "build.gradle", "diffHunk": "@@ -69,13 +71,18 @@ task checkJavaVersion {\n \n // Configure all Java projects\n configure(projectsWithFlags('java')) {\n+    apply plugin: 'net.ltgt.errorprone'\n+\n     // Common dependencies\n     dependencies {\n         // All projects currently require ':core' (except itself)\n         if (project != project(':core')) {\n             api project(':core')\n         }\n \n+        // Error Prone compiler\n+        errorprone 'com.google.errorprone:error_prone_core'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6506e13be6279b7ceec152fdf97e44a8def7e6a1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExNDY2Mg==", "bodyText": "I couldn't feel any differences with and without warning (It doesn't produce a lot). So I think we can just leave it as it is.", "url": "https://github.com/line/armeria/pull/2772#discussion_r435114662", "createdAt": "2020-06-04T09:23:26Z", "author": {"login": "minwoox"}, "path": "build.gradle", "diffHunk": "@@ -69,13 +71,18 @@ task checkJavaVersion {\n \n // Configure all Java projects\n configure(projectsWithFlags('java')) {\n+    apply plugin: 'net.ltgt.errorprone'\n+\n     // Common dependencies\n     dependencies {\n         // All projects currently require ':core' (except itself)\n         if (project != project(':core')) {\n             api project(':core')\n         }\n \n+        // Error Prone compiler\n+        errorprone 'com.google.errorprone:error_prone_core'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwNjE5Ng=="}, "originalCommit": {"oid": "6506e13be6279b7ceec152fdf97e44a8def7e6a1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEyMTgyNw==", "bodyText": "OK, SGTM", "url": "https://github.com/line/armeria/pull/2772#discussion_r435121827", "createdAt": "2020-06-04T09:35:13Z", "author": {"login": "ikhoon"}, "path": "build.gradle", "diffHunk": "@@ -69,13 +71,18 @@ task checkJavaVersion {\n \n // Configure all Java projects\n configure(projectsWithFlags('java')) {\n+    apply plugin: 'net.ltgt.errorprone'\n+\n     // Common dependencies\n     dependencies {\n         // All projects currently require ':core' (except itself)\n         if (project != project(':core')) {\n             api project(':core')\n         }\n \n+        // Error Prone compiler\n+        errorprone 'com.google.errorprone:error_prone_core'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwNjE5Ng=="}, "originalCommit": {"oid": "6506e13be6279b7ceec152fdf97e44a8def7e6a1"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2308, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}