{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMTc1ODE5", "number": 3081, "title": "Do not collect metrics of the requests to `TransientService` by default", "bodyText": "Motivation:\nRelated #3061\nIt will be nice if the request and response to/from TransientService are not logged in the server-side by default.\nModifications:\n\nDo not collect metrics of the requests and responses to/from a TransientService.\n\nDo not leave access logs and service logs as well.\n\n\nAdded TransientServiceOption enum:\n\nWITH_MECTIC_COLLECTION, WITH_SERVICE_LOGGING and WITH_ACCESS_LOGGING.\n\n\nAdded TransientServiceBuilder.transientServiceOptions(...) to enable the options.\nPrometheusExpositionService now implements TransientService.\n\nPrometheusExpositionService.builder() is also added.\n\n\n\nResult:\n\nThe metrics of requests to a TransientService are not collected by default.\n\nYou should call TransientServiceBuilder.transientServiceOptions(WITH_METRIC_COLLECTION) to collect.\nAccess logs and service logs are not recorded as well.\n\n\nClose #3061\n(Deprecated) new PrometheusExpositionService(CollectorRegistry) is now deprecated.\n\nUse PrometheusExpositionService.of(CollectorRegistry).", "createdAt": "2020-09-24T04:32:08Z", "url": "https://github.com/line/armeria/pull/3081", "merged": true, "mergeCommit": {"oid": "198c247f2e9092601e920f900412f3cd1c70d7e0"}, "closed": true, "closedAt": "2020-11-25T08:45:38Z", "author": {"login": "minwoox"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdL5IyDgH2gAyNDkyMTc1ODE5OmI1MGQyZGMyOGRkNWEyY2Y1NzAwMTBlYzU0ZjBiZTY4Mjk1YTc2NjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdeLAVWgFqTUzNDkyOTc1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b50d2dc28dd5a2cf570010ec54f0be68295a7663", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/b50d2dc28dd5a2cf570010ec54f0be68295a7663", "committedDate": "2020-09-24T04:04:35Z", "message": "Do not log the request and response to/from `TransientService`\nMotivation:\nRelated #3061\nIt will be nice if the request and response to/from `TransientService` are not logged by server side.\n\nModifications:\n- Add defualt `shouldLogRequest` method to `Service`\n  - `TransientService` returns `false` by default\n- `PrometheusExpositionService` now implments `TransientService`\n- Requests and responses to/from `TransientService` are not logged and recored by `LoggingService`, `AccessLogWriter` and `MetricCollectingService` anymore.\n  - You should set `shouldLogRequest` to `true` to log them.\n\nResult:\n- Healtch check requests are not logged and recorded by `LoggingService`, `AccessLogWriter` and `MetricCollectingService` anymore .\n- Close #3061\n- (Deprecated) `new PrometheusExpositionService(CollectorRegistry)` is now deprecated.\n  - Use `PrometheusExpositionService.of(CollectorRegistry)` instead."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MjU5OTE2", "url": "https://github.com/line/armeria/pull/3081#pullrequestreview-495259916", "createdAt": "2020-09-24T06:39:52Z", "commit": {"oid": "b50d2dc28dd5a2cf570010ec54f0be68295a7663"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjozOTo1MlrOHXLwhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjo0NzoxNFrOHXL99w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA3MTk0MA==", "bodyText": "How about:\n... whether the request and response handled by this {@link PrometheusExpositionService} are logged ...?", "url": "https://github.com/line/armeria/pull/3081#discussion_r494071940", "createdAt": "2020-09-24T06:39:52Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionService.java", "diffHunk": "@@ -35,20 +38,50 @@\n  * Exposes Prometheus metrics in <a href=\"https://prometheus.io/docs/instrumenting/exposition_formats/\">text\n  * format 0.0.4</a>.\n  */\n-public final class PrometheusExpositionService extends AbstractHttpService {\n+public final class PrometheusExpositionService extends AbstractHttpService implements TransientHttpService {\n \n     private static final MediaType CONTENT_TYPE_004 = MediaType.parse(TextFormat.CONTENT_TYPE_004);\n \n+    /**\n+     * Returns a new {@link PrometheusExpositionService} that exposes Prometheus metrics from the specified\n+     * {@link CollectorRegistry}.\n+     */\n+    public static PrometheusExpositionService of(CollectorRegistry collectorRegistry) {\n+        return new PrometheusExpositionService(collectorRegistry, false);\n+    }\n+\n+    /**\n+     * Returns a new {@link PrometheusExpositionService} that exposes Prometheus metrics from the specified\n+     * {@link CollectorRegistry}.\n+     *\n+     * @param shouldLogRequest tells whether the request and response are logged or recorded by", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b50d2dc28dd5a2cf570010ec54f0be68295a7663"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA3NTM4Mw==", "bodyText": "How about removing this method and checking by?:\nif (service instanceof TransientService && ((TransientService) service).shouldLogRequest()) {\n   ...\n  \n}", "url": "https://github.com/line/armeria/pull/3081#discussion_r494075383", "createdAt": "2020-09-24T06:47:14Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/Service.java", "diffHunk": "@@ -103,4 +106,12 @@ default void serviceAdded(ServiceConfig cfg) throws Exception {}\n     default boolean shouldCachePath(String path, @Nullable String query, Route route) {\n         return route.pathType() == RoutePathType.EXACT && query == null;\n     }\n+\n+    /**\n+     * Returns whether the request and response are logged or recorded by\n+     * {@link LoggingService}, {@link MetricCollectingService} and {@link AccessLogWriter}.\n+     */\n+    default boolean shouldLogRequest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b50d2dc28dd5a2cf570010ec54f0be68295a7663"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91f69a93bf01defc8065ce1fe0142c2243eae322", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/91f69a93bf01defc8065ce1fe0142c2243eae322", "committedDate": "2020-09-25T03:49:27Z", "message": "Address the comments by @trustin and @ikhoon"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MTM5Nzky", "url": "https://github.com/line/armeria/pull/3081#pullrequestreview-496139792", "createdAt": "2020-09-25T06:24:58Z", "commit": {"oid": "91f69a93bf01defc8065ce1fe0142c2243eae322"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNjoyNDo1OFrOHX2hAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNjoyNDo1OFrOHX2hAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc3MjQ4Mg==", "bodyText": "We should only check ServiceConfig.transientService() and set true to it when service.as(TransientService.class) != null and a user did not override it with transientService(false).", "url": "https://github.com/line/armeria/pull/3081#discussion_r494772482", "createdAt": "2020-09-25T06:24:58Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java", "diffHunk": "@@ -405,7 +405,8 @@ private void handleRequest(ChannelHandlerContext ctx, DecodedHttpRequest req) th\n \n             // Keep track of the number of unfinished requests and\n             // clean up the request stream when response stream ends.\n-            final boolean isTransient = service.as(TransientService.class) != null;\n+            final boolean isTransient = service.as(TransientService.class) != null ||\n+                                        serviceCfg.transientService();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f69a93bf01defc8065ce1fe0142c2243eae322"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2c778131fc1b04f971450830df7a85dfd40e985", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/a2c778131fc1b04f971450830df7a85dfd40e985", "committedDate": "2020-11-02T08:27:22Z", "message": "Merge branch 'master' into doNoLog_transient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3c09fd87b92083ffdf7fe913af129cee45f14a2", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/f3c09fd87b92083ffdf7fe913af129cee45f14a2", "committedDate": "2020-11-02T09:01:00Z", "message": "Add TransientService.countFor(ActionType)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d8de53e8ca059770872e0c631a874b50b9a518c", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/8d8de53e8ca059770872e0c631a874b50b9a518c", "committedDate": "2020-11-02T09:07:07Z", "message": "Use static factory method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e949d768098cd72a52257aebb24f4774a23af04", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/2e949d768098cd72a52257aebb24f4774a23af04", "committedDate": "2020-11-03T01:49:52Z", "message": "Add comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMTI2NjAy", "url": "https://github.com/line/armeria/pull/3081#pullrequestreview-523126602", "createdAt": "2020-11-04T08:18:30Z", "commit": {"oid": "2e949d768098cd72a52257aebb24f4774a23af04"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODoxODozMFrOHtNNZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODoyMjo0M1rOHtNWAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2NDM4OQ==", "bodyText": "Can use varags by removing enable from parameters?\nenableTransientServiceAction(ActionType... actionTypes);", "url": "https://github.com/line/armeria/pull/3081#discussion_r517164389", "createdAt": "2020-11-04T08:18:30Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceBuilder.java", "diffHunk": "@@ -250,13 +259,23 @@ public HealthCheckServiceBuilder updatable(HealthCheckUpdateHandler updateHandle\n         return this;\n     }\n \n+    /**\n+     * Sets whether the specified {@link ActionType} is enabled or not for the\n+     * {@link #build() HealthCheckService}. All {@link ActionType}s are disabled by default.\n+     */\n+    public HealthCheckServiceBuilder transientServiceAction(ActionType actionType, boolean enable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e949d768098cd72a52257aebb24f4774a23af04"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2NTMxMw==", "bodyText": "nit: Merge two if conditions?", "url": "https://github.com/line/armeria/pull/3081#discussion_r517165313", "createdAt": "2020-11-04T08:20:14Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/logging/LoggingService.java", "diffHunk": "@@ -121,8 +123,10 @@ public static LoggingServiceBuilder builder() {\n \n     @Override\n     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {\n-        if (sampler.isSampled(ctx)) {\n-            logWhenComplete(logger, ctx, requestLogger, responseLogger);\n+        if (TransientServiceUtil.countFor(ctx, ActionType.LOGGING)) {\n+            if (sampler.isSampled(ctx)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e949d768098cd72a52257aebb24f4774a23af04"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2NjU5Mw==", "bodyText": "Ditto.", "url": "https://github.com/line/armeria/pull/3081#discussion_r517166593", "createdAt": "2020-11-04T08:22:43Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionServiceBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.metric;\n+\n+import static com.linecorp.armeria.internal.server.TransientServiceUtil.defaultTransientServiceActions;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.EnumMap;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+\n+import com.linecorp.armeria.server.TransientService.ActionType;\n+\n+import io.prometheus.client.CollectorRegistry;\n+\n+/**\n+ * Builds a {@link PrometheusExpositionService}.\n+ */\n+public final class PrometheusExpositionServiceBuilder {\n+\n+    private final CollectorRegistry collectorRegistry;\n+\n+    private final EnumMap<ActionType, Boolean> transientServiceActions;\n+\n+    PrometheusExpositionServiceBuilder(CollectorRegistry collectorRegistry) {\n+        this.collectorRegistry = requireNonNull(collectorRegistry, \"collectorRegistry\");\n+        transientServiceActions = new EnumMap<>(ActionType.class);\n+        transientServiceActions.putAll(defaultTransientServiceActions());\n+    }\n+\n+    /**\n+     * Sets whether the specified {@link ActionType} is enabled or not for the\n+     * {@link #build() PrometheusExpositionService}. All {@link ActionType}s are disabled by default.\n+     */\n+    public PrometheusExpositionServiceBuilder transientServiceAction(ActionType actionType, boolean enable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e949d768098cd72a52257aebb24f4774a23af04"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b114177aee0677d7a49acfae4a9822271c94f18b", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/b114177aee0677d7a49acfae4a9822271c94f18b", "committedDate": "2020-11-05T05:37:49Z", "message": "Address the comment by @ikhoon"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzOTU3Nzcx", "url": "https://github.com/line/armeria/pull/3081#pullrequestreview-523957771", "createdAt": "2020-11-05T06:31:37Z", "commit": {"oid": "b114177aee0677d7a49acfae4a9822271c94f18b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNjozMTozN1rOHt1KUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNjozNDo1NlrOHt1OXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgxODk2MQ==", "bodyText": "Could use Maps.immutableEnumMap(...)?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                  Maps.newEnumMap(ImmutableMap.copyOf(transientServiceActions)));\n          \n          \n            \n                                                  Maps.immutableEnumMap(transientServiceActions));", "url": "https://github.com/line/armeria/pull/3081#discussion_r517818961", "createdAt": "2020-11-05T06:31:37Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceBuilder.java", "diffHunk": "@@ -250,13 +259,23 @@ public HealthCheckServiceBuilder updatable(HealthCheckUpdateHandler updateHandle\n         return this;\n     }\n \n+    /**\n+     * Sets whether the specified {@link ActionType} is enabled or not for the\n+     * {@link #build() HealthCheckService}. All {@link ActionType}s are disabled by default.\n+     */\n+    public HealthCheckServiceBuilder transientServiceAction(ActionType actionType, boolean enable) {\n+        transientServiceActions.put(requireNonNull(actionType, \"actionType\"), enable);\n+        return this;\n+    }\n+\n     /**\n      * Returns a newly created {@link HealthCheckService} built from the properties specified so far.\n      */\n     public HealthCheckService build() {\n         return new HealthCheckService(healthCheckers.build(),\n                                       healthyResponse, unhealthyResponse,\n                                       maxLongPollingTimeoutMillis, longPollingTimeoutJitterRate,\n-                                      pingIntervalMillis, updateHandler);\n+                                      pingIntervalMillis, updateHandler,\n+                                      Maps.newEnumMap(ImmutableMap.copyOf(transientServiceActions)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b114177aee0677d7a49acfae4a9822271c94f18b"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgxOTg5NQ==", "bodyText": "Could use Maps.immutableEnumMap() to avoid addtional copies?\nhttps://github.com/google/guava/blob/7ef9f97cad23efee4cc18c63b5f3c90ca320f131/guava/src/com/google/common/collect/Maps.java#L148-L152", "url": "https://github.com/line/armeria/pull/3081#discussion_r517819895", "createdAt": "2020-11-05T06:34:38Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionService.java", "diffHunk": "@@ -35,20 +41,45 @@\n  * Exposes Prometheus metrics in <a href=\"https://prometheus.io/docs/instrumenting/exposition_formats/\">text\n  * format 0.0.4</a>.\n  */\n-public final class PrometheusExpositionService extends AbstractHttpService {\n+public final class PrometheusExpositionService extends AbstractHttpService implements TransientHttpService {\n \n     private static final MediaType CONTENT_TYPE_004 = MediaType.parse(TextFormat.CONTENT_TYPE_004);\n \n+    /**\n+     * Returns a new {@link PrometheusExpositionService} that exposes Prometheus metrics from the specified\n+     * {@link CollectorRegistry}.\n+     */\n+    public static PrometheusExpositionService of(CollectorRegistry collectorRegistry) {\n+        return new PrometheusExpositionService(collectorRegistry, defaultTransientServiceActions());\n+    }\n+\n+    /**\n+     * Returns a new {@link PrometheusExpositionServiceBuilder} created with the specified\n+     * {@link CollectorRegistry}.\n+     */\n+    public static PrometheusExpositionServiceBuilder builder(CollectorRegistry collectorRegistry) {\n+        return new PrometheusExpositionServiceBuilder(collectorRegistry);\n+    }\n+\n     private final CollectorRegistry collectorRegistry;\n+    private final Map<ActionType, Boolean> transientServiceActions;\n \n     /**\n      * Creates a new instance.\n      *\n      * @param collectorRegistry Prometheus registry\n+     *\n+     * @deprecated Use {@link #of(CollectorRegistry)}.\n      */\n+    @Deprecated\n     public PrometheusExpositionService(CollectorRegistry collectorRegistry) {\n-        requireNonNull(collectorRegistry, \"collectorRegistry\");\n-        this.collectorRegistry = collectorRegistry;\n+        this(collectorRegistry, defaultTransientServiceActions());\n+    }\n+\n+    PrometheusExpositionService(CollectorRegistry collectorRegistry,\n+                                EnumMap<ActionType, Boolean> transientServiceActions) {\n+        this.collectorRegistry = requireNonNull(collectorRegistry, \"collectorRegistry\");\n+        this.transientServiceActions = ImmutableMap.copyOf(transientServiceActions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b114177aee0677d7a49acfae4a9822271c94f18b"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgxOTk5Nw==", "bodyText": "Ditto", "url": "https://github.com/line/armeria/pull/3081#discussion_r517819997", "createdAt": "2020-11-05T06:34:56Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionServiceBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.metric;\n+\n+import static com.linecorp.armeria.internal.server.TransientServiceUtil.defaultTransientServiceActions;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.EnumMap;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+\n+import com.linecorp.armeria.server.TransientService.ActionType;\n+\n+import io.prometheus.client.CollectorRegistry;\n+\n+/**\n+ * Builds a {@link PrometheusExpositionService}.\n+ */\n+public final class PrometheusExpositionServiceBuilder {\n+\n+    private final CollectorRegistry collectorRegistry;\n+\n+    private final EnumMap<ActionType, Boolean> transientServiceActions;\n+\n+    PrometheusExpositionServiceBuilder(CollectorRegistry collectorRegistry) {\n+        this.collectorRegistry = requireNonNull(collectorRegistry, \"collectorRegistry\");\n+        transientServiceActions = new EnumMap<>(ActionType.class);\n+        transientServiceActions.putAll(defaultTransientServiceActions());\n+    }\n+\n+    /**\n+     * Sets whether the specified {@link ActionType} is enabled or not for the\n+     * {@link #build() PrometheusExpositionService}. All {@link ActionType}s are disabled by default.\n+     */\n+    public PrometheusExpositionServiceBuilder transientServiceAction(ActionType actionType, boolean enable) {\n+        transientServiceActions.put(requireNonNull(actionType, \"actionType\"), enable);\n+        return this;\n+    }\n+\n+    /**\n+     * Returns a newly-created {@link PrometheusExpositionService} based on the properties of this builder.\n+     */\n+    public PrometheusExpositionService build() {\n+        return new PrometheusExpositionService(collectorRegistry,\n+                                               Maps.newEnumMap(ImmutableMap.copyOf(transientServiceActions)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b114177aee0677d7a49acfae4a9822271c94f18b"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MDA0NzA0", "url": "https://github.com/line/armeria/pull/3081#pullrequestreview-526004704", "createdAt": "2020-11-09T08:06:22Z", "commit": {"oid": "b114177aee0677d7a49acfae4a9822271c94f18b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MDM2OTY1", "url": "https://github.com/line/armeria/pull/3081#pullrequestreview-526036965", "createdAt": "2020-11-09T08:52:54Z", "commit": {"oid": "b114177aee0677d7a49acfae4a9822271c94f18b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1Mjo1NVrOHvkcvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1Mjo1NVrOHvkcvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0MjMwMA==", "bodyText": "G -> g", "url": "https://github.com/line/armeria/pull/3081#discussion_r519642300", "createdAt": "2020-11-09T08:52:55Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/TransientService.java", "diffHunk": "@@ -27,4 +30,41 @@\n  */\n @FunctionalInterface\n public interface TransientService<I extends Request, O extends Response> extends Service<I, O> {\n+\n+    /**\n+     * Tells whether the specified {@link ActionType} is enabled for this {@link TransientService}.\n+     */\n+    default boolean countFor(ActionType type) {\n+        return false;\n+    }\n+\n+    /**\n+     * The type of actions that is used in {@link TransientService#countFor(ActionType)}.\n+     */\n+    enum ActionType {\n+\n+        /**\n+         * Whether Graceful shutdown counts the requests to the {@link TransientService} as processing requests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b114177aee0677d7a49acfae4a9822271c94f18b"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MDM4NDYx", "url": "https://github.com/line/armeria/pull/3081#pullrequestreview-526038461", "createdAt": "2020-11-09T08:54:43Z", "commit": {"oid": "b114177aee0677d7a49acfae4a9822271c94f18b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1NDo0M1rOHvkg6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1NTo1OVrOHvkjsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0MzM3MA==", "bodyText": "Should this be dynamic or static? If static, I guess we can just have this:\ndefault Set<ActionType> countedActionTypes() {\n    return ALL_ACTION_TYPES;\n}\n.. and expose it in ServiceConfig for faster retrieval, because it will be queried very often.", "url": "https://github.com/line/armeria/pull/3081#discussion_r519643370", "createdAt": "2020-11-09T08:54:43Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/TransientService.java", "diffHunk": "@@ -27,4 +30,41 @@\n  */\n @FunctionalInterface\n public interface TransientService<I extends Request, O extends Response> extends Service<I, O> {\n+\n+    /**\n+     * Tells whether the specified {@link ActionType} is enabled for this {@link TransientService}.\n+     */\n+    default boolean countFor(ActionType type) {\n+        return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b114177aee0677d7a49acfae4a9822271c94f18b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NDA4Mw==", "bodyText": "Could use an immutable EnumSet and EnumSet.contains()? It's O(1) anyways.\nFlags?", "url": "https://github.com/line/armeria/pull/3081#discussion_r519644083", "createdAt": "2020-11-09T08:55:59Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/TransientServiceUtil.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.server;\n+\n+import static com.linecorp.armeria.server.TransientService.ActionType.ACCESS_LOGGING;\n+import static com.linecorp.armeria.server.TransientService.ActionType.GRACEFUL_SHUTDOWN;\n+import static com.linecorp.armeria.server.TransientService.ActionType.LOGGING;\n+import static com.linecorp.armeria.server.TransientService.ActionType.METRIC_COLLECTION;\n+\n+import java.util.EnumMap;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+\n+import com.linecorp.armeria.server.Service;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.TransientService;\n+import com.linecorp.armeria.server.TransientService.ActionType;\n+\n+public final class TransientServiceUtil {\n+\n+    private static final EnumMap<ActionType, Boolean> defaultTransientServiceActions =\n+            Maps.newEnumMap(ImmutableMap.of(GRACEFUL_SHUTDOWN, false,\n+                                            METRIC_COLLECTION, false,\n+                                            LOGGING, false,\n+                                            ACCESS_LOGGING, false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b114177aee0677d7a49acfae4a9822271c94f18b"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MDQyNTc2", "url": "https://github.com/line/armeria/pull/3081#pullrequestreview-526042576", "createdAt": "2020-11-09T09:00:07Z", "commit": {"oid": "b114177aee0677d7a49acfae4a9822271c94f18b"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "919f120c74599c5bba1ae998393f0185b0bd5f3b", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/919f120c74599c5bba1ae998393f0185b0bd5f3b", "committedDate": "2020-11-10T10:44:13Z", "message": "Add OptOutFeature"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a7ecabb30fb4465ea270416c05a9996a8ae3476", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/1a7ecabb30fb4465ea270416c05a9996a8ae3476", "committedDate": "2020-11-10T10:51:37Z", "message": "Fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "219df81c5fbde35d2980b05c9a6319c989f8fd90", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/219df81c5fbde35d2980b05c9a6319c989f8fd90", "committedDate": "2020-11-10T11:50:46Z", "message": "Add default to flags"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d997c83db5d17a3eb8c05964304182188a8f3fd", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/6d997c83db5d17a3eb8c05964304182188a8f3fd", "committedDate": "2020-11-10T12:21:24Z", "message": "Merge branch 'master' into doNoLog_transient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c76e1f39a49df5fc9fa0acdd1eedc8e4577994be", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/c76e1f39a49df5fc9fa0acdd1eedc8e4577994be", "committedDate": "2020-11-10T12:23:18Z", "message": "Add private"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4ODQ3OTky", "url": "https://github.com/line/armeria/pull/3081#pullrequestreview-528847992", "createdAt": "2020-11-12T08:25:46Z", "commit": {"oid": "c76e1f39a49df5fc9fa0acdd1eedc8e4577994be"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwODoyNTo0NlrOHxvhJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwODozMToxMFrOHxvuYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyMDgwNg==", "bodyText": "requireNonNull?", "url": "https://github.com/line/armeria/pull/3081#discussion_r521920806", "createdAt": "2020-11-12T08:25:46Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceBuilder.java", "diffHunk": "@@ -250,13 +258,34 @@ public HealthCheckServiceBuilder updatable(HealthCheckUpdateHandler updateHandle\n         return this;\n     }\n \n+    @Override\n+    public HealthCheckServiceBuilder optOutFeatures(OptOutFeature... optOutFeatures) {\n+        return optOutFeatures(ImmutableSet.copyOf(requireNonNull(optOutFeatures, \"optOutFeatures\")));\n+    }\n+\n+    @Override\n+    public HealthCheckServiceBuilder optOutFeatures(Iterable<OptOutFeature> optOutFeatures) {\n+        if (this.optOutFeatures == null) {\n+            this.optOutFeatures = EnumSet.noneOf(OptOutFeature.class);\n+        }\n+        this.optOutFeatures.addAll(ImmutableSet.copyOf(optOutFeatures));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c76e1f39a49df5fc9fa0acdd1eedc8e4577994be"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNDE5Mg==", "bodyText": "requireNonNull?", "url": "https://github.com/line/armeria/pull/3081#discussion_r521924192", "createdAt": "2020-11-12T08:31:10Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionServiceBuilder.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.metric;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.server.OptOutFeature;\n+import com.linecorp.armeria.server.TransientServiceBuilder;\n+\n+import io.prometheus.client.CollectorRegistry;\n+\n+/**\n+ * Builds a {@link PrometheusExpositionService}.\n+ */\n+public final class PrometheusExpositionServiceBuilder implements TransientServiceBuilder {\n+\n+    private final CollectorRegistry collectorRegistry;\n+\n+    @Nullable\n+    private Set<OptOutFeature> optOutFeatures;\n+\n+    PrometheusExpositionServiceBuilder(CollectorRegistry collectorRegistry) {\n+        this.collectorRegistry = requireNonNull(collectorRegistry, \"collectorRegistry\");\n+    }\n+\n+    @Override\n+    public PrometheusExpositionServiceBuilder optOutFeatures(OptOutFeature... optOutFeatures) {\n+        return optOutFeatures(ImmutableSet.copyOf(requireNonNull(optOutFeatures, \"optOutFeatures\")));\n+    }\n+\n+    @Override\n+    public PrometheusExpositionServiceBuilder optOutFeatures(Iterable<OptOutFeature> optOutFeatures) {\n+        requireNonNull(optOutFeatures, \"optOutFeatures\");\n+        if (this.optOutFeatures == null) {\n+            this.optOutFeatures = EnumSet.noneOf(OptOutFeature.class);\n+        }\n+        this.optOutFeatures.addAll(ImmutableSet.copyOf(optOutFeatures));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c76e1f39a49df5fc9fa0acdd1eedc8e4577994be"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ba15981d85c4ac4f6daf290c04e580fd433b25e", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/1ba15981d85c4ac4f6daf290c04e580fd433b25e", "committedDate": "2020-11-13T03:09:57Z", "message": "Address comments by @ikhoon"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMTIxNjc2", "url": "https://github.com/line/armeria/pull/3081#pullrequestreview-531121676", "createdAt": "2020-11-16T08:56:56Z", "commit": {"oid": "1ba15981d85c4ac4f6daf290c04e580fd433b25e"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODo1Njo1N1rOHztmEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTowNzowN1rOHzuRPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk4NjQ1MA==", "bodyText": "Ascii.toUpperCase()?", "url": "https://github.com/line/armeria/pull/3081#discussion_r523986450", "createdAt": "2020-11-16T08:56:57Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -372,6 +377,19 @@\n \n     private static final boolean VALIDATE_HEADERS = getBoolean(\"validateHeaders\", true);\n \n+    private static final String DEFAULT_OPT_OUT_FEATURES =\n+            \"GRACEFUL_SHUTDOWN,METRIC_COLLECTION,LOGGING,ACCESS_LOGGING\";\n+    private static final Set<OptOutFeature> OPT_OUT_FEATURES =\n+            Streams.stream(CSV_SPLITTER.split(getNormalized(\"optOutFeatures\", DEFAULT_OPT_OUT_FEATURES, val -> {\n+                try {\n+                    Streams.stream(CSV_SPLITTER.split(val))\n+                           .forEach(feature -> OptOutFeature.valueOf(feature.toUpperCase()));\n+                    return true;\n+                } catch (Exception e) {\n+                    return false;\n+                }\n+            }))).map(feature -> OptOutFeature.valueOf(feature.toUpperCase())).collect(toImmutableSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba15981d85c4ac4f6daf290c04e580fd433b25e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk4ODM2NQ==", "bodyText": "Global nit: Extract reqCtx.config() into a local variable?", "url": "https://github.com/line/armeria/pull/3081#discussion_r523988365", "createdAt": "2020-11-16T08:58:45Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -328,7 +328,9 @@ private void fail(Throwable cause) {\n         if (tryComplete()) {\n             setDone(true);\n             logBuilder().endResponse(cause);\n-            reqCtx.log().whenComplete().thenAccept(reqCtx.config().accessLogWriter()::log);\n+            if (!reqCtx.config().optOutFeatures().contains(OptOutFeature.ACCESS_LOGGING)) {\n+                reqCtx.log().whenComplete().thenAccept(reqCtx.config().accessLogWriter()::log);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba15981d85c4ac4f6daf290c04e580fd433b25e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk5MDE4Nw==", "bodyText": "How about:\nSpecifies which feature should be disabled for a {@link TransientService}.\n\n..?\nCould we also add a simple example that involves a builder?", "url": "https://github.com/line/armeria/pull/3081#discussion_r523990187", "createdAt": "2020-11-16T09:00:20Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/OptOutFeature.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server;\n+\n+import com.linecorp.armeria.server.logging.AccessLogWriter;\n+import com.linecorp.armeria.server.logging.LoggingService;\n+import com.linecorp.armeria.server.metric.MetricCollectingService;\n+\n+/**\n+ * The opt-out features that are disabled for a {@link TransientService}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba15981d85c4ac4f6daf290c04e580fd433b25e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk5MTg5OQ==", "bodyText": "For all enum values: The Javadoc needs an update. For example:\nPrevents a {@link Server} from counting the requests to ...", "url": "https://github.com/line/armeria/pull/3081#discussion_r523991899", "createdAt": "2020-11-16T09:01:58Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/OptOutFeature.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server;\n+\n+import com.linecorp.armeria.server.logging.AccessLogWriter;\n+import com.linecorp.armeria.server.logging.LoggingService;\n+import com.linecorp.armeria.server.metric.MetricCollectingService;\n+\n+/**\n+ * The opt-out features that are disabled for a {@link TransientService}.\n+ */\n+public enum OptOutFeature {\n+\n+    /**\n+     * Whether graceful shutdown counts the requests to the {@link TransientService} as processing requests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba15981d85c4ac4f6daf290c04e580fd433b25e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk5NTc4Mg==", "bodyText": "Could we also add:\nThis method always returns an empty {@link Set} for a non-{@link TransientService},\nbecause only a {@link TransientService} can opt out from {@link OptOutFeature}s.", "url": "https://github.com/line/armeria/pull/3081#discussion_r523995782", "createdAt": "2020-11-16T09:05:28Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServiceConfig.java", "diffHunk": "@@ -230,6 +248,13 @@ public boolean shutdownAccessLogWriterOnStop() {\n         return shutdownAccessLogWriterOnStop;\n     }\n \n+    /**\n+     * Returns the {@link Set} of {@link OptOutFeature}s that are disabled for the {@link #service()}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba15981d85c4ac4f6daf290c04e580fd433b25e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk5NzUwMw==", "bodyText": "Could we deduplicate this, perhaps extracting to an internal utility?\ne.g.\npublic final class MyBuilder implements TransientServiceBuilder {\n    private final OptOutFeaturesBuilder optOutFeaturesBuilder = new OptOutFeaturesBuilder();\n\n    public MyBuilder optOutFeatures(...) {\n        optOutFeaturesBuilder.add(...);\n        return this;\n    }\n\n    public MySomething build() {\n        Set<OptOutFeature> optOutFeatures = optOutFeaturesBuilder.build();\n        ...\n    }\n}", "url": "https://github.com/line/armeria/pull/3081#discussion_r523997503", "createdAt": "2020-11-16T09:07:07Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionServiceBuilder.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.metric;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.server.OptOutFeature;\n+import com.linecorp.armeria.server.TransientServiceBuilder;\n+\n+import io.prometheus.client.CollectorRegistry;\n+\n+/**\n+ * Builds a {@link PrometheusExpositionService}.\n+ */\n+public final class PrometheusExpositionServiceBuilder implements TransientServiceBuilder {\n+\n+    private final CollectorRegistry collectorRegistry;\n+\n+    @Nullable\n+    private Set<OptOutFeature> optOutFeatures;\n+\n+    PrometheusExpositionServiceBuilder(CollectorRegistry collectorRegistry) {\n+        this.collectorRegistry = requireNonNull(collectorRegistry, \"collectorRegistry\");\n+    }\n+\n+    @Override\n+    public PrometheusExpositionServiceBuilder optOutFeatures(OptOutFeature... optOutFeatures) {\n+        return optOutFeatures(ImmutableSet.copyOf(requireNonNull(optOutFeatures, \"optOutFeatures\")));\n+    }\n+\n+    @Override\n+    public PrometheusExpositionServiceBuilder optOutFeatures(Iterable<OptOutFeature> optOutFeatures) {\n+        requireNonNull(optOutFeatures, \"optOutFeatures\");\n+        if (this.optOutFeatures == null) {\n+            this.optOutFeatures = EnumSet.noneOf(OptOutFeature.class);\n+        }\n+        this.optOutFeatures.addAll(ImmutableSet.copyOf(requireNonNull(optOutFeatures, \"optOutFeatures\")));\n+        return this;\n+    }\n+\n+    /**\n+     * Returns a newly-created {@link PrometheusExpositionService} based on the properties of this builder.\n+     */\n+    public PrometheusExpositionService build() {\n+        final Set<OptOutFeature> optOutFeatures;\n+        if (this.optOutFeatures == null) {\n+            optOutFeatures = Flags.optOutFeatures();\n+        } else {\n+            optOutFeatures = ImmutableSet.copyOf(this.optOutFeatures);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba15981d85c4ac4f6daf290c04e580fd433b25e"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cf5828e97ee16a85da816eed9d8f6f256538a4e", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/2cf5828e97ee16a85da816eed9d8f6f256538a4e", "committedDate": "2020-11-17T05:28:10Z", "message": "Merge branch 'master' into doNoLog_transient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12643b692be2062a63fa73be7779ce2e9f235516", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/12643b692be2062a63fa73be7779ce2e9f235516", "committedDate": "2020-11-17T06:17:00Z", "message": "Address comments by @trustin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMDUyMzQ5", "url": "https://github.com/line/armeria/pull/3081#pullrequestreview-532052349", "createdAt": "2020-11-17T06:26:43Z", "commit": {"oid": "12643b692be2062a63fa73be7779ce2e9f235516"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNjoyNjo0M1rOH0l_YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNjoyNzozM1rOH0mAlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkxMDQzMw==", "bodyText": "HealthCheckService or LoggingService? \ud83d\ude06", "url": "https://github.com/line/armeria/pull/3081#discussion_r524910433", "createdAt": "2020-11-17T06:26:43Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/OptOutFeature.java", "diffHunk": "@@ -20,30 +20,41 @@\n import com.linecorp.armeria.server.metric.MetricCollectingService;\n \n /**\n- * The opt-out features that are disabled for a {@link TransientService}.\n+ * Specifies which features should be disabled for a {@link TransientService}.\n+ * For example, if you do:\n+ * <pre>{@code\n+ * ServerBuilder sb = Server.builder();\n+ * sb.service(\"/health\", HealthCheckService.builder() // A TransientService\n+ *                                         .optOutFeatures(OptOutFeature.GRACEFUL_SHUTDOWN,\n+ *                                                         OptOutFeature.ACCESS_LOGGING,\n+ *                                                         OptOutFeature.METRIC_COLLECTION)\n+ *                                         .build());\n+ * }</pre>\n+ * then, every feature is opted out except logging from {@link LoggingService}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12643b692be2062a63fa73be7779ce2e9f235516"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkxMDc0MA==", "bodyText": "Maybe just build()?", "url": "https://github.com/line/armeria/pull/3081#discussion_r524910740", "createdAt": "2020-11-17T06:27:33Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/OptOutFeaturesBuilder.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.server.OptOutFeature;\n+import com.linecorp.armeria.server.TransientServiceBuilder;\n+\n+/**\n+ * A Builder for {@link OptOutFeature}.\n+ */\n+public final class OptOutFeaturesBuilder implements TransientServiceBuilder {\n+\n+    @Nullable\n+    private Set<OptOutFeature> optOutFeatures;\n+\n+    @Override\n+    public OptOutFeaturesBuilder optOutFeatures(OptOutFeature... optOutFeatures) {\n+        return optOutFeatures(ImmutableSet.copyOf(requireNonNull(optOutFeatures, \"optOutFeatures\")));\n+    }\n+\n+    @Override\n+    public OptOutFeaturesBuilder optOutFeatures(Iterable<OptOutFeature> optOutFeatures) {\n+        if (this.optOutFeatures == null) {\n+            this.optOutFeatures = EnumSet.noneOf(OptOutFeature.class);\n+        }\n+        this.optOutFeatures.addAll(ImmutableSet.copyOf(requireNonNull(optOutFeatures, \"optOutFeatures\")));\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the {@link Set} of {@link OptOutFeature}s set so far. {@link Flags#optOutFeatures()} if not set.\n+     */\n+    public Set<OptOutFeature> optOutFeatures() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12643b692be2062a63fa73be7779ce2e9f235516"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b66f6b979875b1c58eaa5bd9f03d8905f773e2b", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/2b66f6b979875b1c58eaa5bd9f03d8905f773e2b", "committedDate": "2020-11-17T06:35:05Z", "message": "Address comments by @trustin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a2de6400088f3e8f8f2c307171fcd9da0f13cda", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/6a2de6400088f3e8f8f2c307171fcd9da0f13cda", "committedDate": "2020-11-17T09:31:41Z", "message": "Use TransientServiceOption"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MTI0MTMy", "url": "https://github.com/line/armeria/pull/3081#pullrequestreview-534124132", "createdAt": "2020-11-19T06:51:42Z", "commit": {"oid": "6a2de6400088f3e8f8f2c307171fcd9da0f13cda"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNjo1MTo0MlrOH2O_AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNjo1NjoyNFrOH2PFVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYzMDY1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (this.transientServiceOptions == null) {\n          \n          \n            \n                        this.transientServiceOptions = EnumSet.noneOf(TransientServiceOption.class);\n          \n          \n            \n                    }\n          \n          \n            \n                    this.transientServiceOptions.addAll(\n          \n          \n            \n                            ImmutableSet.copyOf(requireNonNull(transientServiceOptions, \"transientServiceOptions\")));\n          \n          \n            \n                    requireNonNull(transientServiceOptions, \"transientServiceOptions\");\n          \n          \n            \n                    if (this.transientServiceOptions == null) {\n          \n          \n            \n                        this.transientServiceOptions = EnumSet.noneOf(TransientServiceOption.class);\n          \n          \n            \n                    }\n          \n          \n            \n                    transientServiceOptions.forEach(this.transientServiceOptions::add);", "url": "https://github.com/line/armeria/pull/3081#discussion_r526630657", "createdAt": "2020-11-19T06:51:42Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/TransientServiceOptionsBuilder.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.server.TransientServiceBuilder;\n+import com.linecorp.armeria.server.TransientServiceOption;\n+\n+/**\n+ * A Builder for {@link TransientServiceOption}.\n+ */\n+public final class TransientServiceOptionsBuilder implements TransientServiceBuilder {\n+\n+    @Nullable\n+    private Set<TransientServiceOption> transientServiceOptions;\n+\n+    @Override\n+    public TransientServiceOptionsBuilder transientServiceOptions(\n+            TransientServiceOption... transientServiceOptions) {\n+        return transientServiceOptions(\n+                ImmutableSet.copyOf(requireNonNull(transientServiceOptions, \"transientServiceOptions\")));\n+    }\n+\n+    @Override\n+    public TransientServiceOptionsBuilder transientServiceOptions(\n+            Iterable<TransientServiceOption> transientServiceOptions) {\n+        if (this.transientServiceOptions == null) {\n+            this.transientServiceOptions = EnumSet.noneOf(TransientServiceOption.class);\n+        }\n+        this.transientServiceOptions.addAll(\n+                ImmutableSet.copyOf(requireNonNull(transientServiceOptions, \"transientServiceOptions\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a2de6400088f3e8f8f2c307171fcd9da0f13cda"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYzMDk3Ng==", "bodyText": "Could we make this an immutable enum set? Otherwise, TransientServiceOptionsBuilder.build() will sometimes return an immutable enum set and sometimes not.", "url": "https://github.com/line/armeria/pull/3081#discussion_r526630976", "createdAt": "2020-11-19T06:52:35Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -372,6 +377,18 @@\n \n     private static final boolean VALIDATE_HEADERS = getBoolean(\"validateHeaders\", true);\n \n+    private static final Set<TransientServiceOption> TRANSIENT_SERVICE_OPTIONS =\n+            Streams.stream(CSV_SPLITTER.split(getNormalized(\"transientServiceOptions\", \"\", val -> {\n+                try {\n+                    Streams.stream(CSV_SPLITTER.split(val))\n+                           .forEach(feature -> TransientServiceOption.valueOf(Ascii.toUpperCase(feature)));\n+                    return true;\n+                } catch (Exception e) {\n+                    return false;\n+                }\n+            }))).map(feature -> TransientServiceOption.valueOf(Ascii.toUpperCase(feature)))\n+                   .collect(toImmutableSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a2de6400088f3e8f8f2c307171fcd9da0f13cda"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYzMjI3OA==", "bodyText": "Ditto - use an immutable enum set.", "url": "https://github.com/line/armeria/pull/3081#discussion_r526632278", "createdAt": "2020-11-19T06:56:24Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/TransientServiceOption.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server;\n+\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.server.healthcheck.HealthCheckService;\n+import com.linecorp.armeria.server.logging.AccessLogWriter;\n+import com.linecorp.armeria.server.logging.LoggingService;\n+import com.linecorp.armeria.server.metric.MetricCollectingService;\n+\n+/**\n+ * Specifies which features should be enabled for a {@link TransientService}.\n+ * For example, if you do:\n+ * <pre>{@code\n+ * ServerBuilder sb = Server.builder();\n+ * sb.service(\"/health\", HealthCheckService.builder() // A TransientService\n+ *                                         .transientServiceOptions(\n+ *                                                 TransientServiceOption.WITH_METRIC_COLLECTION,\n+ *                                                 TransientServiceOption.WITH_ACCESS_LOGGING)\n+ *                                         .build());\n+ * }</pre>\n+ * then, the metric is collected by {@link MetricCollectingService} and access logs are produced by\n+ * {@link AccessLogWriter} for the {@link HealthCheckService}.\n+ */\n+public enum TransientServiceOption {\n+\n+    /**\n+     * Enables {@link MetricCollectingService} to collect the metrics of the requests to the\n+     * {@link TransientService}.\n+     */\n+    WITH_METRIC_COLLECTION,\n+\n+    /**\n+     * Enables {@link LoggingService} to log the requests to the {@link TransientService}.\n+     */\n+    WITH_LOGGING,\n+\n+    /**\n+     * Enables {@link AccessLogWriter} to produce the access logs of the requests to the\n+     * {@link TransientService}.\n+     */\n+    WITH_ACCESS_LOGGING;\n+\n+    private static final Set<TransientServiceOption> allOf = ImmutableSet.of(WITH_METRIC_COLLECTION,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a2de6400088f3e8f8f2c307171fcd9da0f13cda"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b5bfe9b7ca3b96ad92b6b3cd94c969bb87ad09f", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/4b5bfe9b7ca3b96ad92b6b3cd94c969bb87ad09f", "committedDate": "2020-11-19T09:50:15Z", "message": "Merge branch 'master' into doNoLog_transient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4e5e5f7e32c759a6e56db943c6b490f6077a084", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/b4e5e5f7e32c759a6e56db943c6b490f6077a084", "committedDate": "2020-11-19T10:58:12Z", "message": "Address comments by @trustin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MzQ3NTM4", "url": "https://github.com/line/armeria/pull/3081#pullrequestreview-534347538", "createdAt": "2020-11-19T11:50:34Z", "commit": {"oid": "b4e5e5f7e32c759a6e56db943c6b490f6077a084"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTo1MDozNVrOH2Zwjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTo1MDozNVrOH2Zwjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwNzE4Mg==", "bodyText": "Should we rename this to transientServiceOptions(), just in case a user wants to use the method name option, since it's fairly generic?", "url": "https://github.com/line/armeria/pull/3081#discussion_r526807182", "createdAt": "2020-11-19T11:50:35Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/TransientService.java", "diffHunk": "@@ -27,4 +30,15 @@\n  */\n @FunctionalInterface\n public interface TransientService<I extends Request, O extends Response> extends Service<I, O> {\n+\n+    /**\n+     * Returns the {@link Set} of {@link TransientServiceOption}s that are enabled for this\n+     * {@link TransientService}. This returns {@link Flags#transientServiceOptions()} if you didn't\n+     * specify any {@link TransientServiceOption}s using\n+     * {@link TransientServiceBuilder#transientServiceOptions(TransientServiceOption...)} when you create\n+     * this {@link TransientService}.\n+     */\n+    default Set<TransientServiceOption> options() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4e5e5f7e32c759a6e56db943c6b490f6077a084"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MzQ4MTcw", "url": "https://github.com/line/armeria/pull/3081#pullrequestreview-534348170", "createdAt": "2020-11-19T11:51:27Z", "commit": {"oid": "b4e5e5f7e32c759a6e56db943c6b490f6077a084"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTo1MToyN1rOH2ZycQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTo1MToyN1rOH2ZycQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwNzY2NQ==", "bodyText": "Would WITH_SERVICE_LOGGING be better? \ud83e\udd14", "url": "https://github.com/line/armeria/pull/3081#discussion_r526807665", "createdAt": "2020-11-19T11:51:27Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/TransientServiceOption.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server;\n+\n+import java.util.Set;\n+\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.server.healthcheck.HealthCheckService;\n+import com.linecorp.armeria.server.logging.AccessLogWriter;\n+import com.linecorp.armeria.server.logging.LoggingService;\n+import com.linecorp.armeria.server.metric.MetricCollectingService;\n+\n+/**\n+ * Specifies which features should be enabled for a {@link TransientService}.\n+ * For example, if you do:\n+ * <pre>{@code\n+ * ServerBuilder sb = Server.builder();\n+ * sb.service(\"/health\", HealthCheckService.builder() // A TransientService\n+ *                                         .transientServiceOptions(\n+ *                                                 TransientServiceOption.WITH_METRIC_COLLECTION,\n+ *                                                 TransientServiceOption.WITH_ACCESS_LOGGING)\n+ *                                         .build());\n+ * }</pre>\n+ * then, the metric is collected by {@link MetricCollectingService} and access logs are produced by\n+ * {@link AccessLogWriter} for the {@link HealthCheckService}.\n+ */\n+public enum TransientServiceOption {\n+\n+    /**\n+     * Enables {@link MetricCollectingService} to collect the metrics of the requests to the\n+     * {@link TransientService}.\n+     */\n+    WITH_METRIC_COLLECTION,\n+\n+    /**\n+     * Enables {@link LoggingService} to log the requests to the {@link TransientService}.\n+     */\n+    WITH_LOGGING,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4e5e5f7e32c759a6e56db943c6b490f6077a084"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ac403b411e5a15862f09aad1569864808b7515a", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/3ac403b411e5a15862f09aad1569864808b7515a", "committedDate": "2020-11-19T13:35:59Z", "message": "Use WITH_SERVICE_LOGGING"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0OTI5NzU5", "url": "https://github.com/line/armeria/pull/3081#pullrequestreview-534929759", "createdAt": "2020-11-19T23:04:17Z", "commit": {"oid": "3ac403b411e5a15862f09aad1569864808b7515a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4695, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}