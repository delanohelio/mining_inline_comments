{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1NjY3OTYw", "number": 3244, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwNzo0OTozN1rOFJOgow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNzo1ODo1N1rOFJdhVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MjE5MjM1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/common/FlagsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwNzo0OTozN1rOILhoKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwNzo0OTozN1rOILhoKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk1NjIwMw==", "bodyText": "Updated this because the previous assumptions didn't make sense.", "url": "https://github.com/line/armeria/pull/3244#discussion_r548956203", "createdAt": "2020-12-26T07:49:37Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/FlagsTest.java", "diffHunk": "@@ -48,8 +48,8 @@\n     @Test\n     void epollAvailableOnLinux() {\n         assumeThat(osName).startsWith(\"linux\");\n-        assumeThat(System.getenv(\"WSLENV\")).isNull();\n-        assumeThat(System.getProperty(\"com.linecorp.armeria.useEpoll\")).isEqualTo(\"false\");\n+        assumeThat(System.getProperty(\"com.linecorp.armeria.useEpoll\")).isNull();\n+        assumeThat(System.getProperty(\"com.linecorp.armeria.transportType\")).isNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1a386e3a7da2d4badb83a3ba4c4b3fbf76d9459"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MjE5MjM2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/common/FlagsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwNzo0OTo0MlrOILhoLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwNzo0OTo0MlrOILhoLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk1NjIwNA==", "bodyText": "Updated this because the previous assumptions didn't make sense.", "url": "https://github.com/line/armeria/pull/3244#discussion_r548956204", "createdAt": "2020-12-26T07:49:42Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/FlagsTest.java", "diffHunk": "@@ -63,7 +63,7 @@ void epollAvailableOnLinux() {\n     void openSslAvailable() {\n         assumeThat(osName.startsWith(\"linux\") || osName.startsWith(\"windows\") ||\n                    osName.startsWith(\"macosx\") || osName.startsWith(\"osx\")).isTrue();\n-        assumeThat(System.getProperty(\"com.linecorp.armeria.useOpenSsl\")).isEqualTo(\"false\");\n+        assumeThat(System.getProperty(\"com.linecorp.armeria.useOpenSsl\")).isNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1a386e3a7da2d4badb83a3ba4c4b3fbf76d9459"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MjE5Mjg5OnYy", "diffSide": "RIGHT", "path": "core/build.gradle", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwNzo1MTowNlrOILhoZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDozNzoxM1rOINs1wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk1NjI2Mg==", "bodyText": "Changed to opt-in because this feature is highly experimental.", "url": "https://github.com/line/armeria/pull/3244#discussion_r548956262", "createdAt": "2020-12-26T07:51:06Z", "author": {"login": "trustin"}, "path": "core/build.gradle", "diffHunk": "@@ -115,7 +115,7 @@ dependencies {\n     implementation \"io.netty:netty-transport-native-epoll:${managedVersions['io.netty:netty-transport-native-epoll']}:linux-x86_64\"\n     implementation 'io.netty:netty-tcnative-boringssl-static'\n     implementation 'io.netty:netty-handler-proxy'\n-    implementation \"io.netty.incubator:netty-incubator-transport-native-io_uring:${managedVersions['io.netty.incubator:netty-incubator-transport-native-io_uring']}:linux-x86_64\"\n+    optionalImplementation \"io.netty.incubator:netty-incubator-transport-native-io_uring:${managedVersions['io.netty.incubator:netty-incubator-transport-native-io_uring']}:linux-x86_64\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1a386e3a7da2d4badb83a3ba4c4b3fbf76d9459"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTExNDAzOQ==", "bodyText": "IIUC, no tests will be run with this on the classpath now. Does it make sense to have some small integration tests which include it on the classpath to make sure something doesn't completely break because of it?", "url": "https://github.com/line/armeria/pull/3244#discussion_r551114039", "createdAt": "2021-01-04T04:34:53Z", "author": {"login": "anuraaga"}, "path": "core/build.gradle", "diffHunk": "@@ -115,7 +115,7 @@ dependencies {\n     implementation \"io.netty:netty-transport-native-epoll:${managedVersions['io.netty:netty-transport-native-epoll']}:linux-x86_64\"\n     implementation 'io.netty:netty-tcnative-boringssl-static'\n     implementation 'io.netty:netty-handler-proxy'\n-    implementation \"io.netty.incubator:netty-incubator-transport-native-io_uring:${managedVersions['io.netty.incubator:netty-incubator-transport-native-io_uring']}:linux-x86_64\"\n+    optionalImplementation \"io.netty.incubator:netty-incubator-transport-native-io_uring:${managedVersions['io.netty.incubator:netty-incubator-transport-native-io_uring']}:linux-x86_64\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk1NjI2Mg=="}, "originalCommit": {"oid": "e1a386e3a7da2d4badb83a3ba4c4b3fbf76d9459"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIzMDIxOQ==", "bodyText": "At least :core:test will run with it on the classpath, no?", "url": "https://github.com/line/armeria/pull/3244#discussion_r551230219", "createdAt": "2021-01-04T10:24:39Z", "author": {"login": "trustin"}, "path": "core/build.gradle", "diffHunk": "@@ -115,7 +115,7 @@ dependencies {\n     implementation \"io.netty:netty-transport-native-epoll:${managedVersions['io.netty:netty-transport-native-epoll']}:linux-x86_64\"\n     implementation 'io.netty:netty-tcnative-boringssl-static'\n     implementation 'io.netty:netty-handler-proxy'\n-    implementation \"io.netty.incubator:netty-incubator-transport-native-io_uring:${managedVersions['io.netty.incubator:netty-incubator-transport-native-io_uring']}:linux-x86_64\"\n+    optionalImplementation \"io.netty.incubator:netty-incubator-transport-native-io_uring:${managedVersions['io.netty.incubator:netty-incubator-transport-native-io_uring']}:linux-x86_64\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk1NjI2Mg=="}, "originalCommit": {"oid": "e1a386e3a7da2d4badb83a3ba4c4b3fbf76d9459"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIzNzA1Nw==", "bodyText": "Ah I think so - seems fine", "url": "https://github.com/line/armeria/pull/3244#discussion_r551237057", "createdAt": "2021-01-04T10:37:13Z", "author": {"login": "anuraaga"}, "path": "core/build.gradle", "diffHunk": "@@ -115,7 +115,7 @@ dependencies {\n     implementation \"io.netty:netty-transport-native-epoll:${managedVersions['io.netty:netty-transport-native-epoll']}:linux-x86_64\"\n     implementation 'io.netty:netty-tcnative-boringssl-static'\n     implementation 'io.netty:netty-handler-proxy'\n-    implementation \"io.netty.incubator:netty-incubator-transport-native-io_uring:${managedVersions['io.netty.incubator:netty-incubator-transport-native-io_uring']}:linux-x86_64\"\n+    optionalImplementation \"io.netty.incubator:netty-incubator-transport-native-io_uring:${managedVersions['io.netty.incubator:netty-incubator-transport-native-io_uring']}:linux-x86_64\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk1NjI2Mg=="}, "originalCommit": {"oid": "e1a386e3a7da2d4badb83a3ba4c4b3fbf76d9459"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDY1MTcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/util/TransportTypeProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNzo1ODo1N1rOILzogw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwODoxMTowNFrOILz0Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI1MTIwMw==", "bodyText": "Shouldn't we create TransportTypeProvider with the cause? \ud83e\udd14", "url": "https://github.com/line/armeria/pull/3244#discussion_r549251203", "createdAt": "2020-12-28T07:58:57Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/util/TransportTypeProvider.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.common.util;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.function.BiFunction;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+import com.linecorp.armeria.common.util.TransportType;\n+\n+import io.netty.channel.EventLoop;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoop;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.DatagramChannel;\n+import io.netty.channel.socket.ServerSocketChannel;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.channel.socket.nio.NioDatagramChannel;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+\n+/**\n+ * Provides the properties required by {@link TransportType} by loading /dev/epoll and io_uring transport\n+ * classes dynamically, so that Armeria does not have hard dependencies on them.\n+ * See: https://github.com/line/armeria/issues/3243\n+ */\n+public final class TransportTypeProvider {\n+\n+    public static final TransportTypeProvider NIO = new TransportTypeProvider(\n+            \"NIO\", NioServerSocketChannel.class, NioSocketChannel.class, NioDatagramChannel.class,\n+            NioEventLoopGroup.class, NioEventLoop.class, NioEventLoopGroup::new, null);\n+\n+    public static final TransportTypeProvider EPOLL = of(\n+            \"EPOLL\", \"io.netty.channel.epoll.Epoll\",\n+            \"io.netty.channel.epoll.EpollServerSocketChannel\",\n+            \"io.netty.channel.epoll.EpollSocketChannel\",\n+            \"io.netty.channel.epoll.EpollDatagramChannel\",\n+            \"io.netty.channel.epoll.EpollEventLoopGroup\",\n+            \"io.netty.channel.epoll.EpollEventLoop\");\n+\n+    public static final TransportTypeProvider IO_URING = of(\n+            \"IO_URING\", \"io.netty.incubator.channel.uring.IOUring\",\n+            \"io.netty.incubator.channel.uring.IOUringServerSocketChannel\",\n+            \"io.netty.incubator.channel.uring.IOUringSocketChannel\",\n+            \"io.netty.incubator.channel.uring.IOUringDatagramChannel\",\n+            \"io.netty.incubator.channel.uring.IOUringEventLoopGroup\",\n+            \"io.netty.incubator.channel.uring.IOUringEventLoop\");\n+\n+    private static TransportTypeProvider of(\n+            String name, String entryPointTypeName,\n+            String serverSocketChannelTypeName, String socketChannelTypeName, String datagramChannelTypeName,\n+            String eventLoopGroupTypeName, String eventLoopTypeName) {\n+\n+        try {\n+            final Throwable unavailabilityCause = (Throwable)\n+                    findClass(entryPointTypeName)\n+                            .getMethod(\"unavailabilityCause\")\n+                            .invoke(null);\n+            if (unavailabilityCause != null) {\n+                throw unavailabilityCause;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98523f435d6cd6a6dc9125c93161e1a1e1c33cb"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI1MzI5OQ==", "bodyText": "We catch below \ud83d\ude09", "url": "https://github.com/line/armeria/pull/3244#discussion_r549253299", "createdAt": "2020-12-28T08:07:16Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/util/TransportTypeProvider.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.common.util;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.function.BiFunction;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+import com.linecorp.armeria.common.util.TransportType;\n+\n+import io.netty.channel.EventLoop;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoop;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.DatagramChannel;\n+import io.netty.channel.socket.ServerSocketChannel;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.channel.socket.nio.NioDatagramChannel;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+\n+/**\n+ * Provides the properties required by {@link TransportType} by loading /dev/epoll and io_uring transport\n+ * classes dynamically, so that Armeria does not have hard dependencies on them.\n+ * See: https://github.com/line/armeria/issues/3243\n+ */\n+public final class TransportTypeProvider {\n+\n+    public static final TransportTypeProvider NIO = new TransportTypeProvider(\n+            \"NIO\", NioServerSocketChannel.class, NioSocketChannel.class, NioDatagramChannel.class,\n+            NioEventLoopGroup.class, NioEventLoop.class, NioEventLoopGroup::new, null);\n+\n+    public static final TransportTypeProvider EPOLL = of(\n+            \"EPOLL\", \"io.netty.channel.epoll.Epoll\",\n+            \"io.netty.channel.epoll.EpollServerSocketChannel\",\n+            \"io.netty.channel.epoll.EpollSocketChannel\",\n+            \"io.netty.channel.epoll.EpollDatagramChannel\",\n+            \"io.netty.channel.epoll.EpollEventLoopGroup\",\n+            \"io.netty.channel.epoll.EpollEventLoop\");\n+\n+    public static final TransportTypeProvider IO_URING = of(\n+            \"IO_URING\", \"io.netty.incubator.channel.uring.IOUring\",\n+            \"io.netty.incubator.channel.uring.IOUringServerSocketChannel\",\n+            \"io.netty.incubator.channel.uring.IOUringSocketChannel\",\n+            \"io.netty.incubator.channel.uring.IOUringDatagramChannel\",\n+            \"io.netty.incubator.channel.uring.IOUringEventLoopGroup\",\n+            \"io.netty.incubator.channel.uring.IOUringEventLoop\");\n+\n+    private static TransportTypeProvider of(\n+            String name, String entryPointTypeName,\n+            String serverSocketChannelTypeName, String socketChannelTypeName, String datagramChannelTypeName,\n+            String eventLoopGroupTypeName, String eventLoopTypeName) {\n+\n+        try {\n+            final Throwable unavailabilityCause = (Throwable)\n+                    findClass(entryPointTypeName)\n+                            .getMethod(\"unavailabilityCause\")\n+                            .invoke(null);\n+            if (unavailabilityCause != null) {\n+                throw unavailabilityCause;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI1MTIwMw=="}, "originalCommit": {"oid": "e98523f435d6cd6a6dc9125c93161e1a1e1c33cb"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI1NDE4Mw==", "bodyText": "Oops. \ud83d\ude05", "url": "https://github.com/line/armeria/pull/3244#discussion_r549254183", "createdAt": "2020-12-28T08:11:04Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/util/TransportTypeProvider.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.common.util;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.function.BiFunction;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+import com.linecorp.armeria.common.util.TransportType;\n+\n+import io.netty.channel.EventLoop;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoop;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.DatagramChannel;\n+import io.netty.channel.socket.ServerSocketChannel;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.channel.socket.nio.NioDatagramChannel;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+\n+/**\n+ * Provides the properties required by {@link TransportType} by loading /dev/epoll and io_uring transport\n+ * classes dynamically, so that Armeria does not have hard dependencies on them.\n+ * See: https://github.com/line/armeria/issues/3243\n+ */\n+public final class TransportTypeProvider {\n+\n+    public static final TransportTypeProvider NIO = new TransportTypeProvider(\n+            \"NIO\", NioServerSocketChannel.class, NioSocketChannel.class, NioDatagramChannel.class,\n+            NioEventLoopGroup.class, NioEventLoop.class, NioEventLoopGroup::new, null);\n+\n+    public static final TransportTypeProvider EPOLL = of(\n+            \"EPOLL\", \"io.netty.channel.epoll.Epoll\",\n+            \"io.netty.channel.epoll.EpollServerSocketChannel\",\n+            \"io.netty.channel.epoll.EpollSocketChannel\",\n+            \"io.netty.channel.epoll.EpollDatagramChannel\",\n+            \"io.netty.channel.epoll.EpollEventLoopGroup\",\n+            \"io.netty.channel.epoll.EpollEventLoop\");\n+\n+    public static final TransportTypeProvider IO_URING = of(\n+            \"IO_URING\", \"io.netty.incubator.channel.uring.IOUring\",\n+            \"io.netty.incubator.channel.uring.IOUringServerSocketChannel\",\n+            \"io.netty.incubator.channel.uring.IOUringSocketChannel\",\n+            \"io.netty.incubator.channel.uring.IOUringDatagramChannel\",\n+            \"io.netty.incubator.channel.uring.IOUringEventLoopGroup\",\n+            \"io.netty.incubator.channel.uring.IOUringEventLoop\");\n+\n+    private static TransportTypeProvider of(\n+            String name, String entryPointTypeName,\n+            String serverSocketChannelTypeName, String socketChannelTypeName, String datagramChannelTypeName,\n+            String eventLoopGroupTypeName, String eventLoopTypeName) {\n+\n+        try {\n+            final Throwable unavailabilityCause = (Throwable)\n+                    findClass(entryPointTypeName)\n+                            .getMethod(\"unavailabilityCause\")\n+                            .invoke(null);\n+            if (unavailabilityCause != null) {\n+                throw unavailabilityCause;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI1MTIwMw=="}, "originalCommit": {"oid": "e98523f435d6cd6a6dc9125c93161e1a1e1c33cb"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1826, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}