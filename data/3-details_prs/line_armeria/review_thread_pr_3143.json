{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNDU0NjI0", "number": 3143, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMToxNjoxMlrOEyw0bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDozODozM1rOEzvDNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjY0MTExOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMToxNjoxMlrOHplJnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMToxNjozM1rOHplKTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2MjMzNQ==", "bodyText": "How about changing this line, rather than special casing in stringToType()?", "url": "https://github.com/line/armeria/pull/3143#discussion_r513362335", "createdAt": "2020-10-28T11:16:12Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -74,6 +81,12 @@\n                     .put(Object.class, Function.identity())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5303eea767feb84631e03870a76ffdfeb0e1b7c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2MjUxMA==", "bodyText": "Never mind. It will not work.", "url": "https://github.com/line/armeria/pull/3143#discussion_r513362510", "createdAt": "2020-10-28T11:16:33Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -74,6 +81,12 @@\n                     .put(Object.class, Function.identity())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2MjMzNQ=="}, "originalCommit": {"oid": "f5303eea767feb84631e03870a76ffdfeb0e1b7c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjY0NzI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMToxODowMFrOHplNdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODo1NTowNlrOHqR8kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2MzMxNg==", "bodyText": "Could we skip the method that returns the type that's not compatible with clazz?\nHow about using MethodHandle, which is faster than reflection? https://www.baeldung.com/java-method-handles", "url": "https://github.com/line/armeria/pull/3143#discussion_r513363316", "createdAt": "2020-10-28T11:18:00Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +95,69 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method with a single {@link String} argument in clazz.\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @param <T> the expected result. It is *not* checked\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Nullable\n+    private static <T> Function<String, T> getPublicStaticMethod(final Class<T> clazz,\n+                                                                 final String methodName) {\n+        try {\n+            final Method method = clazz.getMethod(methodName, String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5303eea767feb84631e03870a76ffdfeb0e1b7c"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM3MDAyMg==", "bodyText": "uhm.. yes.\nNever heard of MethodHandle before. Looking into it", "url": "https://github.com/line/armeria/pull/3143#discussion_r513370022", "createdAt": "2020-10-28T11:29:57Z", "author": {"login": "tobias-"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +95,69 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method with a single {@link String} argument in clazz.\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @param <T> the expected result. It is *not* checked\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Nullable\n+    private static <T> Function<String, T> getPublicStaticMethod(final Class<T> clazz,\n+                                                                 final String methodName) {\n+        try {\n+            final Method method = clazz.getMethod(methodName, String.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2MzMxNg=="}, "originalCommit": {"oid": "f5303eea767feb84631e03870a76ffdfeb0e1b7c"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5NjI3NQ==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/3143#discussion_r514096275", "createdAt": "2020-10-29T08:55:06Z", "author": {"login": "tobias-"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +95,69 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method with a single {@link String} argument in clazz.\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @param <T> the expected result. It is *not* checked\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Nullable\n+    private static <T> Function<String, T> getPublicStaticMethod(final Class<T> clazz,\n+                                                                 final String methodName) {\n+        try {\n+            final Method method = clazz.getMethod(methodName, String.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2MzMxNg=="}, "originalCommit": {"oid": "f5303eea767feb84631e03870a76ffdfeb0e1b7c"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjY1NDE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMToxOTo0N1rOHplRaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODo1NToxMlrOHqR8xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2NDMyOQ==", "bodyText": "Ditto - could use method handles?", "url": "https://github.com/line/armeria/pull/3143#discussion_r513364329", "createdAt": "2020-10-28T11:19:47Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +95,69 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method with a single {@link String} argument in clazz.\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @param <T> the expected result. It is *not* checked\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Nullable\n+    private static <T> Function<String, T> getPublicStaticMethod(final Class<T> clazz,\n+                                                                 final String methodName) {\n+        try {\n+            final Method method = clazz.getMethod(methodName, String.class);\n+            return (str) -> {\n+                try {\n+                    return (T) method.invoke(null, str);\n+                } catch (RuntimeException e) {\n+                    throw e;\n+                } catch (Exception e) {\n+                    throw new IllegalArgumentException(e);\n+                }\n+            };\n+        } catch (Throwable t) {\n+            // No valid public static method found\n+        }\n+        return null;\n+    }\n+\n+    @Nullable\n+    private static <T> Function<String, T> getStringConstructor(final Class<T> clazz) {\n+        try {\n+            final Constructor<T> constructor = clazz.getConstructor(String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5303eea767feb84631e03870a76ffdfeb0e1b7c"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM3MDM0Ng==", "bodyText": "Will do", "url": "https://github.com/line/armeria/pull/3143#discussion_r513370346", "createdAt": "2020-10-28T11:30:30Z", "author": {"login": "tobias-"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +95,69 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method with a single {@link String} argument in clazz.\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @param <T> the expected result. It is *not* checked\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Nullable\n+    private static <T> Function<String, T> getPublicStaticMethod(final Class<T> clazz,\n+                                                                 final String methodName) {\n+        try {\n+            final Method method = clazz.getMethod(methodName, String.class);\n+            return (str) -> {\n+                try {\n+                    return (T) method.invoke(null, str);\n+                } catch (RuntimeException e) {\n+                    throw e;\n+                } catch (Exception e) {\n+                    throw new IllegalArgumentException(e);\n+                }\n+            };\n+        } catch (Throwable t) {\n+            // No valid public static method found\n+        }\n+        return null;\n+    }\n+\n+    @Nullable\n+    private static <T> Function<String, T> getStringConstructor(final Class<T> clazz) {\n+        try {\n+            final Constructor<T> constructor = clazz.getConstructor(String.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2NDMyOQ=="}, "originalCommit": {"oid": "f5303eea767feb84631e03870a76ffdfeb0e1b7c"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5NjMyNQ==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/3143#discussion_r514096325", "createdAt": "2020-10-29T08:55:12Z", "author": {"login": "tobias-"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +95,69 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method with a single {@link String} argument in clazz.\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @param <T> the expected result. It is *not* checked\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Nullable\n+    private static <T> Function<String, T> getPublicStaticMethod(final Class<T> clazz,\n+                                                                 final String methodName) {\n+        try {\n+            final Method method = clazz.getMethod(methodName, String.class);\n+            return (str) -> {\n+                try {\n+                    return (T) method.invoke(null, str);\n+                } catch (RuntimeException e) {\n+                    throw e;\n+                } catch (Exception e) {\n+                    throw new IllegalArgumentException(e);\n+                }\n+            };\n+        } catch (Throwable t) {\n+            // No valid public static method found\n+        }\n+        return null;\n+    }\n+\n+    @Nullable\n+    private static <T> Function<String, T> getStringConstructor(final Class<T> clazz) {\n+        try {\n+            final Constructor<T> constructor = clazz.getConstructor(String.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2NDMyOQ=="}, "originalCommit": {"oid": "f5303eea767feb84631e03870a76ffdfeb0e1b7c"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjY2MjU5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMToyMjoxMFrOHplWig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODo1NToxN1rOHqR8_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2NTY0Mg==", "bodyText": "Could use Exceptions.throwUnsafely() instead of wrapping with IAE?\nCould catch an InvocationTargetException and unwrap before throwing", "url": "https://github.com/line/armeria/pull/3143#discussion_r513365642", "createdAt": "2020-10-28T11:22:10Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +95,69 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method with a single {@link String} argument in clazz.\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @param <T> the expected result. It is *not* checked\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Nullable\n+    private static <T> Function<String, T> getPublicStaticMethod(final Class<T> clazz,\n+                                                                 final String methodName) {\n+        try {\n+            final Method method = clazz.getMethod(methodName, String.class);\n+            return (str) -> {\n+                try {\n+                    return (T) method.invoke(null, str);\n+                } catch (RuntimeException e) {\n+                    throw e;\n+                } catch (Exception e) {\n+                    throw new IllegalArgumentException(e);\n+                }\n+            };\n+        } catch (Throwable t) {\n+            // No valid public static method found\n+        }\n+        return null;\n+    }\n+\n+    @Nullable\n+    private static <T> Function<String, T> getStringConstructor(final Class<T> clazz) {\n+        try {\n+            final Constructor<T> constructor = clazz.getConstructor(String.class);\n+            return (str) -> {\n+                try {\n+                    return constructor.newInstance(str);\n+                } catch (RuntimeException e) {\n+                    throw e;\n+                } catch (Exception e) {\n+                    throw new IllegalArgumentException(e);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5303eea767feb84631e03870a76ffdfeb0e1b7c"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM3MDQxMw==", "bodyText": "Will do", "url": "https://github.com/line/armeria/pull/3143#discussion_r513370413", "createdAt": "2020-10-28T11:30:36Z", "author": {"login": "tobias-"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +95,69 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method with a single {@link String} argument in clazz.\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @param <T> the expected result. It is *not* checked\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Nullable\n+    private static <T> Function<String, T> getPublicStaticMethod(final Class<T> clazz,\n+                                                                 final String methodName) {\n+        try {\n+            final Method method = clazz.getMethod(methodName, String.class);\n+            return (str) -> {\n+                try {\n+                    return (T) method.invoke(null, str);\n+                } catch (RuntimeException e) {\n+                    throw e;\n+                } catch (Exception e) {\n+                    throw new IllegalArgumentException(e);\n+                }\n+            };\n+        } catch (Throwable t) {\n+            // No valid public static method found\n+        }\n+        return null;\n+    }\n+\n+    @Nullable\n+    private static <T> Function<String, T> getStringConstructor(final Class<T> clazz) {\n+        try {\n+            final Constructor<T> constructor = clazz.getConstructor(String.class);\n+            return (str) -> {\n+                try {\n+                    return constructor.newInstance(str);\n+                } catch (RuntimeException e) {\n+                    throw e;\n+                } catch (Exception e) {\n+                    throw new IllegalArgumentException(e);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2NTY0Mg=="}, "originalCommit": {"oid": "f5303eea767feb84631e03870a76ffdfeb0e1b7c"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5NjM4Mg==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/3143#discussion_r514096382", "createdAt": "2020-10-29T08:55:17Z", "author": {"login": "tobias-"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +95,69 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method with a single {@link String} argument in clazz.\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @param <T> the expected result. It is *not* checked\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Nullable\n+    private static <T> Function<String, T> getPublicStaticMethod(final Class<T> clazz,\n+                                                                 final String methodName) {\n+        try {\n+            final Method method = clazz.getMethod(methodName, String.class);\n+            return (str) -> {\n+                try {\n+                    return (T) method.invoke(null, str);\n+                } catch (RuntimeException e) {\n+                    throw e;\n+                } catch (Exception e) {\n+                    throw new IllegalArgumentException(e);\n+                }\n+            };\n+        } catch (Throwable t) {\n+            // No valid public static method found\n+        }\n+        return null;\n+    }\n+\n+    @Nullable\n+    private static <T> Function<String, T> getStringConstructor(final Class<T> clazz) {\n+        try {\n+            final Constructor<T> constructor = clazz.getConstructor(String.class);\n+            return (str) -> {\n+                try {\n+                    return constructor.newInstance(str);\n+                } catch (RuntimeException e) {\n+                    throw e;\n+                } catch (Exception e) {\n+                    throw new IllegalArgumentException(e);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2NTY0Mg=="}, "originalCommit": {"oid": "f5303eea767feb84631e03870a76ffdfeb0e1b7c"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjY2MzAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMToyMjoxN1rOHplWxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODo1NToyNFrOHqR9Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2NTcwMg==", "bodyText": "Could use Exceptions.throwUnsafely() instead of wrapping with IAE?\nCould catch an InvocationTargetException and unwrap before throwing", "url": "https://github.com/line/armeria/pull/3143#discussion_r513365702", "createdAt": "2020-10-28T11:22:17Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +95,69 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method with a single {@link String} argument in clazz.\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @param <T> the expected result. It is *not* checked\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Nullable\n+    private static <T> Function<String, T> getPublicStaticMethod(final Class<T> clazz,\n+                                                                 final String methodName) {\n+        try {\n+            final Method method = clazz.getMethod(methodName, String.class);\n+            return (str) -> {\n+                try {\n+                    return (T) method.invoke(null, str);\n+                } catch (RuntimeException e) {\n+                    throw e;\n+                } catch (Exception e) {\n+                    throw new IllegalArgumentException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5303eea767feb84631e03870a76ffdfeb0e1b7c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM3MDI2NQ==", "bodyText": "Thanks, missed those.", "url": "https://github.com/line/armeria/pull/3143#discussion_r513370265", "createdAt": "2020-10-28T11:30:21Z", "author": {"login": "tobias-"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +95,69 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method with a single {@link String} argument in clazz.\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @param <T> the expected result. It is *not* checked\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Nullable\n+    private static <T> Function<String, T> getPublicStaticMethod(final Class<T> clazz,\n+                                                                 final String methodName) {\n+        try {\n+            final Method method = clazz.getMethod(methodName, String.class);\n+            return (str) -> {\n+                try {\n+                    return (T) method.invoke(null, str);\n+                } catch (RuntimeException e) {\n+                    throw e;\n+                } catch (Exception e) {\n+                    throw new IllegalArgumentException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2NTcwMg=="}, "originalCommit": {"oid": "f5303eea767feb84631e03870a76ffdfeb0e1b7c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5NjQ1NQ==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/3143#discussion_r514096455", "createdAt": "2020-10-29T08:55:24Z", "author": {"login": "tobias-"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +95,69 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method with a single {@link String} argument in clazz.\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @param <T> the expected result. It is *not* checked\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Nullable\n+    private static <T> Function<String, T> getPublicStaticMethod(final Class<T> clazz,\n+                                                                 final String methodName) {\n+        try {\n+            final Method method = clazz.getMethod(methodName, String.class);\n+            return (str) -> {\n+                try {\n+                    return (T) method.invoke(null, str);\n+                } catch (RuntimeException e) {\n+                    throw e;\n+                } catch (Exception e) {\n+                    throw new IllegalArgumentException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2NTcwMg=="}, "originalCommit": {"oid": "f5303eea767feb84631e03870a76ffdfeb0e1b7c"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjY2ODkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMToyNDowOVrOHplagQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODo1NTozMVrOHqR9fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2NjY1Nw==", "bodyText": "I guess the value doesn't need to be weak. The value will be automatically deferenced when the key is collected.", "url": "https://github.com/line/armeria/pull/3143#discussion_r513366657", "createdAt": "2020-10-28T11:24:09Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -74,6 +81,12 @@\n                     .put(Object.class, Function.identity())\n                     .build();\n \n+    /**\n+     * \"Cache\" of converters from string to the Class in the key.\n+     */\n+    private static final Map<Class<?>, Function<String, ?>> convertExternalTypes =\n+            new MapMaker().weakKeys().weakValues().makeMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57be31b2608c080096a3cc40e031fb93d342eb99"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2OTA3OQ==", "bodyText": "But is the key entry really collected, or just the value of the WeakRef? That question is something I was unsure enough of to just go with weakValues().", "url": "https://github.com/line/armeria/pull/3143#discussion_r513369079", "createdAt": "2020-10-28T11:28:20Z", "author": {"login": "tobias-"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -74,6 +81,12 @@\n                     .put(Object.class, Function.identity())\n                     .build();\n \n+    /**\n+     * \"Cache\" of converters from string to the Class in the key.\n+     */\n+    private static final Map<Class<?>, Function<String, ?>> convertExternalTypes =\n+            new MapMaker().weakKeys().weakValues().makeMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2NjY1Nw=="}, "originalCommit": {"oid": "57be31b2608c080096a3cc40e031fb93d342eb99"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM3MTg5Ng==", "bodyText": "The value of the WeakReference will be collected. If the map implementation finds out that the WeakReference is empty, the map entry will be cleaned up. I think that's how all weak key maps work in Java. weakValues() basically does the same thing; the only difference is that it does that on an entry value, i.e. if an entry value's WeakReference is empty, it will clean up the entry.", "url": "https://github.com/line/armeria/pull/3143#discussion_r513371896", "createdAt": "2020-10-28T11:33:17Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -74,6 +81,12 @@\n                     .put(Object.class, Function.identity())\n                     .build();\n \n+    /**\n+     * \"Cache\" of converters from string to the Class in the key.\n+     */\n+    private static final Map<Class<?>, Function<String, ?>> convertExternalTypes =\n+            new MapMaker().weakKeys().weakValues().makeMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2NjY1Nw=="}, "originalCommit": {"oid": "57be31b2608c080096a3cc40e031fb93d342eb99"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM3MjYxOA==", "bodyText": "So, in this case, we do not want the entry to be cleaned up when the value is GC'd, because it's very likely that the value (Function) is only referred via this map (convertExternalTypes).", "url": "https://github.com/line/armeria/pull/3143#discussion_r513372618", "createdAt": "2020-10-28T11:34:39Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -74,6 +81,12 @@\n                     .put(Object.class, Function.identity())\n                     .build();\n \n+    /**\n+     * \"Cache\" of converters from string to the Class in the key.\n+     */\n+    private static final Map<Class<?>, Function<String, ?>> convertExternalTypes =\n+            new MapMaker().weakKeys().weakValues().makeMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2NjY1Nw=="}, "originalCommit": {"oid": "57be31b2608c080096a3cc40e031fb93d342eb99"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM5ODMxMw==", "bodyText": "Very true, didn't think about that case. Will remove weakValues()", "url": "https://github.com/line/armeria/pull/3143#discussion_r513398313", "createdAt": "2020-10-28T12:20:46Z", "author": {"login": "tobias-"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -74,6 +81,12 @@\n                     .put(Object.class, Function.identity())\n                     .build();\n \n+    /**\n+     * \"Cache\" of converters from string to the Class in the key.\n+     */\n+    private static final Map<Class<?>, Function<String, ?>> convertExternalTypes =\n+            new MapMaker().weakKeys().weakValues().makeMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2NjY1Nw=="}, "originalCommit": {"oid": "57be31b2608c080096a3cc40e031fb93d342eb99"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5NjUxMA==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/3143#discussion_r514096510", "createdAt": "2020-10-29T08:55:31Z", "author": {"login": "tobias-"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -74,6 +81,12 @@\n                     .put(Object.class, Function.identity())\n                     .build();\n \n+    /**\n+     * \"Cache\" of converters from string to the Class in the key.\n+     */\n+    private static final Map<Class<?>, Function<String, ?>> convertExternalTypes =\n+            new MapMaker().weakKeys().weakValues().makeMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2NjY1Nw=="}, "originalCommit": {"oid": "57be31b2608c080096a3cc40e031fb93d342eb99"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNTExNTI1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtilTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMjoyMzo1NlrOHq34CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTozMjoxMFrOHrHSlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDcxNzcwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2018 LINE Corporation\n          \n          \n            \n             * Copyright 2020 LINE Corporation", "url": "https://github.com/line/armeria/pull/3143#discussion_r514717705", "createdAt": "2020-10-30T02:23:56Z", "author": {"login": "heowc"}, "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtilTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2018 LINE Corporation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9fa299cf789ad94eaf49b39c475dfe268d6b0f"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwNjM3OQ==", "bodyText": "Thanks. Fixed for this file.\nThis file is obviously created 2020, but how about the other file? Should I replace the line in\n.../src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java with\nCopyright 2018-2020 LINE Coporation", "url": "https://github.com/line/armeria/pull/3143#discussion_r514906379", "createdAt": "2020-10-30T07:08:28Z", "author": {"login": "tobias-"}, "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtilTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2018 LINE Corporation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDcxNzcwNQ=="}, "originalCommit": {"oid": "9a9fa299cf789ad94eaf49b39c475dfe268d6b0f"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3MDI2Mg==", "bodyText": "Other files don't seem to need to be changed. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3143#discussion_r514970262", "createdAt": "2020-10-30T09:32:10Z", "author": {"login": "heowc"}, "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtilTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2018 LINE Corporation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDcxNzcwNQ=="}, "originalCommit": {"oid": "9a9fa299cf789ad94eaf49b39c475dfe268d6b0f"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNTEyMTgwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtilTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMjoyNTowN1rOHq38fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMTowNTo0NlrOHrKTfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDcxODg0Nw==", "bodyText": "I think you can remove all public keywords from that class.", "url": "https://github.com/line/armeria/pull/3143#discussion_r514718847", "createdAt": "2020-10-30T02:25:07Z", "author": {"login": "heowc"}, "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtilTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.server.annotation;\n+\n+import static com.linecorp.armeria.internal.server.annotation.AnnotatedServiceTypeUtil.stringToType;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class AnnotatedServiceTypeUtilTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9fa299cf789ad94eaf49b39c475dfe268d6b0f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwNDIwMQ==", "bodyText": "Unfortunately, no, as then every inner class will be \"kind of\" implicit package private (ie, unless you use reflections), which will make the constructors also package private, which will make checkstyle complain. So either:\n\nTest class is public\nThe classes only used for these tests are moved into separate files.\n\nI figured adding the public keyword was the easier and cleaner", "url": "https://github.com/line/armeria/pull/3143#discussion_r514904201", "createdAt": "2020-10-30T07:01:19Z", "author": {"login": "tobias-"}, "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtilTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.server.annotation;\n+\n+import static com.linecorp.armeria.internal.server.annotation.AnnotatedServiceTypeUtil.stringToType;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class AnnotatedServiceTypeUtilTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDcxODg0Nw=="}, "originalCommit": {"oid": "9a9fa299cf789ad94eaf49b39c475dfe268d6b0f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3MDYwNw==", "bodyText": "Oops... sorry for the confusion. Please ignore my comment.", "url": "https://github.com/line/armeria/pull/3143#discussion_r514970607", "createdAt": "2020-10-30T09:32:49Z", "author": {"login": "heowc"}, "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtilTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.server.annotation;\n+\n+import static com.linecorp.armeria.internal.server.annotation.AnnotatedServiceTypeUtil.stringToType;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class AnnotatedServiceTypeUtilTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDcxODg0Nw=="}, "originalCommit": {"oid": "9a9fa299cf789ad94eaf49b39c475dfe268d6b0f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAxNzExOA==", "bodyText": "No worries. I fought checkstyle for a long time until I understood why it was complaining. (initially I wrote it without the public keyword)", "url": "https://github.com/line/armeria/pull/3143#discussion_r515017118", "createdAt": "2020-10-30T11:00:41Z", "author": {"login": "tobias-"}, "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtilTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.server.annotation;\n+\n+import static com.linecorp.armeria.internal.server.annotation.AnnotatedServiceTypeUtil.stringToType;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class AnnotatedServiceTypeUtilTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDcxODg0Nw=="}, "originalCommit": {"oid": "9a9fa299cf789ad94eaf49b39c475dfe268d6b0f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAxOTY0NQ==", "bodyText": "You might want to use @SuppressWarnings(\"CheckStyleRuleName\") to suppress that error, but I guess either ways are fine.", "url": "https://github.com/line/armeria/pull/3143#discussion_r515019645", "createdAt": "2020-10-30T11:05:46Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtilTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.server.annotation;\n+\n+import static com.linecorp.armeria.internal.server.annotation.AnnotatedServiceTypeUtil.stringToType;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class AnnotatedServiceTypeUtilTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDcxODg0Nw=="}, "originalCommit": {"oid": "9a9fa299cf789ad94eaf49b39c475dfe268d6b0f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjUzMTI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOToxMDowMVrOHrGktw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDo1ODoxOVrOHrKFJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1ODUxOQ==", "bodyText": "nit: {@code clazz}", "url": "https://github.com/line/armeria/pull/3143#discussion_r514958519", "createdAt": "2020-10-30T09:10:01Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +99,73 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method {@link MethodHandle} with a single {@link String} argument\n+     * in clazz.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565febc6a1736f27cb4bba119e32679b398988e6"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAxNTk3NA==", "bodyText": "Maybe nitpicking, but valid.", "url": "https://github.com/line/armeria/pull/3143#discussion_r515015974", "createdAt": "2020-10-30T10:58:19Z", "author": {"login": "tobias-"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +99,73 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method {@link MethodHandle} with a single {@link String} argument\n+     * in clazz.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1ODUxOQ=="}, "originalCommit": {"oid": "565febc6a1736f27cb4bba119e32679b398988e6"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjUzMzQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOToxMDo0NlrOHrGmGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDo1ODoxN1rOHrKFEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1ODg3NA==", "bodyText": "nit: {@code clazz}", "url": "https://github.com/line/armeria/pull/3143#discussion_r514958874", "createdAt": "2020-10-30T09:10:46Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +99,73 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method {@link MethodHandle} with a single {@link String} argument\n+     * in clazz.\n+     * @param <T> the expected result\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @Nullable\n+    private static <T> MethodHandle getPublicStaticMethodHandle(final Class<T> clazz,\n+                                                                final String methodName) {\n+        try {\n+            final MethodType methodType = MethodType.methodType(clazz, String.class);\n+            return MethodHandles.publicLookup().findStatic(clazz, methodName, methodType);\n+        } catch (Throwable t) {\n+            // No valid public static method found\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Try to get a constructor {@link MethodHandle} with a single {@link String} argument in clazz.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565febc6a1736f27cb4bba119e32679b398988e6"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAxNTk1NA==", "bodyText": "Maybe nitpicking, but valid.", "url": "https://github.com/line/armeria/pull/3143#discussion_r515015954", "createdAt": "2020-10-30T10:58:17Z", "author": {"login": "tobias-"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +99,73 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method {@link MethodHandle} with a single {@link String} argument\n+     * in clazz.\n+     * @param <T> the expected result\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @Nullable\n+    private static <T> MethodHandle getPublicStaticMethodHandle(final Class<T> clazz,\n+                                                                final String methodName) {\n+        try {\n+            final MethodType methodType = MethodType.methodType(clazz, String.class);\n+            return MethodHandles.publicLookup().findStatic(clazz, methodName, methodType);\n+        } catch (Throwable t) {\n+            // No valid public static method found\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Try to get a constructor {@link MethodHandle} with a single {@link String} argument in clazz.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1ODg3NA=="}, "originalCommit": {"oid": "565febc6a1736f27cb4bba119e32679b398988e6"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjgzMzQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDozNzoyM1rOHrJcMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMTowNDoyMVrOHrKQuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwNTQ4OA==", "bodyText": "Could we also double check the static method returns the object that's compatible with clazz? i.e.\nif (!clazz.isAssignableFrom(methodType.returnType())) {\n    return;\n}\n\n\n\nCould you also add the test case for the static method that returns an incompatible type? e.g.\npublic class Foo {\n    public static Bar of(String value) { new Bar(value); }\n}\npublic class Bar { ... }", "url": "https://github.com/line/armeria/pull/3143#discussion_r515005488", "createdAt": "2020-10-30T10:37:23Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +99,73 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method {@link MethodHandle} with a single {@link String} argument\n+     * in clazz.\n+     * @param <T> the expected result\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @Nullable\n+    private static <T> MethodHandle getPublicStaticMethodHandle(final Class<T> clazz,\n+                                                                final String methodName) {\n+        try {\n+            final MethodType methodType = MethodType.methodType(clazz, String.class);\n+            return MethodHandles.publicLookup().findStatic(clazz, methodName, methodType);\n+        } catch (Throwable t) {\n+            // No valid public static method found\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565febc6a1736f27cb4bba119e32679b398988e6"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAxODkzNw==", "bodyText": "Could you also add the test case for the static method that returns an incompatible type? e.g.\npublic class Foo {\n    public static Bar of(String value) { new Bar(value); }\n}\npublic class Bar { ... }\n\n\n\n\nExcellent point. Done!", "url": "https://github.com/line/armeria/pull/3143#discussion_r515018937", "createdAt": "2020-10-30T11:04:21Z", "author": {"login": "tobias-"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +99,73 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method {@link MethodHandle} with a single {@link String} argument\n+     * in clazz.\n+     * @param <T> the expected result\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @Nullable\n+    private static <T> MethodHandle getPublicStaticMethodHandle(final Class<T> clazz,\n+                                                                final String methodName) {\n+        try {\n+            final MethodType methodType = MethodType.methodType(clazz, String.class);\n+            return MethodHandles.publicLookup().findStatic(clazz, methodName, methodType);\n+        } catch (Throwable t) {\n+            // No valid public static method found\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwNTQ4OA=="}, "originalCommit": {"oid": "565febc6a1736f27cb4bba119e32679b398988e6"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjgzNzAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDozODozM1rOHrJebw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMTowMTo1N1rOHrKMCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwNjA2Mw==", "bodyText": "How about returning early when methodHandle == null so we reduce the cognitive load of the reader?", "url": "https://github.com/line/armeria/pull/3143#discussion_r515006063", "createdAt": "2020-10-30T10:38:33Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +99,73 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method {@link MethodHandle} with a single {@link String} argument\n+     * in clazz.\n+     * @param <T> the expected result\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @Nullable\n+    private static <T> MethodHandle getPublicStaticMethodHandle(final Class<T> clazz,\n+                                                                final String methodName) {\n+        try {\n+            final MethodType methodType = MethodType.methodType(clazz, String.class);\n+            return MethodHandles.publicLookup().findStatic(clazz, methodName, methodType);\n+        } catch (Throwable t) {\n+            // No valid public static method found\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Try to get a constructor {@link MethodHandle} with a single {@link String} argument in clazz.\n+     * @param <T> the expected result\n+     * @param clazz the class being introspected\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @Nullable\n+    private static <T> MethodHandle getStringConstructorMethodHandle(final Class<T> clazz) {\n+        try {\n+            final MethodType methodType = MethodType.methodType(void.class, String.class);\n+            return MethodHandles.publicLookup().findConstructor(clazz, methodType);\n+        } catch (Throwable t) {\n+            // No valid constructor found\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Try to get a function that can create an instance of type {@code clazz} with a single\n+     * {@link String} argument.\n+     * @param <T> the expected resulting type\n+     * @param clazz the class being introspected\n+     * @return a function that takes a {@link String} and produces a {@code T}\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Nullable\n+    static <T> Function<String, T> getCreatorMethod(Class<T> clazz) {\n+        final MethodHandle methodHandle = Stream.of(\"of\", \"valueOf\", \"fromString\")\n+                     .map((methodName) -> getPublicStaticMethodHandle(clazz, methodName))\n+                     .filter(Objects::nonNull)\n+                     .findFirst()\n+                     .orElseGet(() -> getStringConstructorMethodHandle(clazz));\n+        if (methodHandle != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565febc6a1736f27cb4bba119e32679b398988e6"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAxNzczOQ==", "bodyText": "Done!\nI've gotten too used to Kotlin and if-is-expression, where this makes sense (single return or even no explicit return statement in the method).", "url": "https://github.com/line/armeria/pull/3143#discussion_r515017739", "createdAt": "2020-10-30T11:01:57Z", "author": {"login": "tobias-"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +99,73 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method {@link MethodHandle} with a single {@link String} argument\n+     * in clazz.\n+     * @param <T> the expected result\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @Nullable\n+    private static <T> MethodHandle getPublicStaticMethodHandle(final Class<T> clazz,\n+                                                                final String methodName) {\n+        try {\n+            final MethodType methodType = MethodType.methodType(clazz, String.class);\n+            return MethodHandles.publicLookup().findStatic(clazz, methodName, methodType);\n+        } catch (Throwable t) {\n+            // No valid public static method found\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Try to get a constructor {@link MethodHandle} with a single {@link String} argument in clazz.\n+     * @param <T> the expected result\n+     * @param clazz the class being introspected\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @Nullable\n+    private static <T> MethodHandle getStringConstructorMethodHandle(final Class<T> clazz) {\n+        try {\n+            final MethodType methodType = MethodType.methodType(void.class, String.class);\n+            return MethodHandles.publicLookup().findConstructor(clazz, methodType);\n+        } catch (Throwable t) {\n+            // No valid constructor found\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Try to get a function that can create an instance of type {@code clazz} with a single\n+     * {@link String} argument.\n+     * @param <T> the expected resulting type\n+     * @param clazz the class being introspected\n+     * @return a function that takes a {@link String} and produces a {@code T}\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Nullable\n+    static <T> Function<String, T> getCreatorMethod(Class<T> clazz) {\n+        final MethodHandle methodHandle = Stream.of(\"of\", \"valueOf\", \"fromString\")\n+                     .map((methodName) -> getPublicStaticMethodHandle(clazz, methodName))\n+                     .filter(Objects::nonNull)\n+                     .findFirst()\n+                     .orElseGet(() -> getStringConstructorMethodHandle(clazz));\n+        if (methodHandle != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwNjA2Mw=="}, "originalCommit": {"oid": "565febc6a1736f27cb4bba119e32679b398988e6"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1990, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}