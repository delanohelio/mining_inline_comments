{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4OTI5OTcx", "number": 2366, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwOTo1Mjo0N1rODVn4Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwODoxMToyM1rODV6NNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDAwMDU4OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/internal/ContextFutureCallbackArgumentsProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwOTo1Mjo0N1rOFZ8t1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMDoyMTo1NVrOFZ9NzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1MzQ5NA==", "bodyText": "This is not called because in exceptionally, pushing with a wrong context happens as well.\nI'm wondering we should mitigate this by not pushing the context in exceptionally. \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2366#discussion_r362753494", "createdAt": "2020-01-03T09:52:47Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/internal/ContextFutureCallbackArgumentsProvider.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.BiConsumer;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.ArgumentsProvider;\n+\n+import com.google.common.util.concurrent.MoreExecutors;\n+\n+public class ContextFutureCallbackArgumentsProvider implements ArgumentsProvider {\n+\n+    @Override\n+    public Stream<? extends Arguments> provideArguments(ExtensionContext context) throws Exception {\n+        final Arguments thenApply = Arguments.of(\n+                (BiConsumer<CompletableFuture<?>, AtomicBoolean>) (future, called) -> {\n+                    future.thenApply(res -> {\n+                        called.set(true);\n+                        return null;\n+                    }).exceptionally(cause -> {\n+                        called.set(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c938d304f6db92b2d85712ecd61682ef3876e1a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1ODA5MA==", "bodyText": "That's a good question. \ud83e\udd14\nIt is also possible that a user tries to handle an exception using handle or whenComplete, so I think it's not a good idea to handle exceptionally exceptionally. (pun intended \ud83d\ude06) i.e. I can't think of a good solution other than just logging.", "url": "https://github.com/line/armeria/pull/2366#discussion_r362758090", "createdAt": "2020-01-03T10:09:23Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/internal/ContextFutureCallbackArgumentsProvider.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.BiConsumer;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.ArgumentsProvider;\n+\n+import com.google.common.util.concurrent.MoreExecutors;\n+\n+public class ContextFutureCallbackArgumentsProvider implements ArgumentsProvider {\n+\n+    @Override\n+    public Stream<? extends Arguments> provideArguments(ExtensionContext context) throws Exception {\n+        final Arguments thenApply = Arguments.of(\n+                (BiConsumer<CompletableFuture<?>, AtomicBoolean>) (future, called) -> {\n+                    future.thenApply(res -> {\n+                        called.set(true);\n+                        return null;\n+                    }).exceptionally(cause -> {\n+                        called.set(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1MzQ5NA=="}, "originalCommit": {"oid": "6c938d304f6db92b2d85712ecd61682ef3876e1a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc2MTY3Ng==", "bodyText": "\ud83d\ude06", "url": "https://github.com/line/armeria/pull/2366#discussion_r362761676", "createdAt": "2020-01-03T10:21:55Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/internal/ContextFutureCallbackArgumentsProvider.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.BiConsumer;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.ArgumentsProvider;\n+\n+import com.google.common.util.concurrent.MoreExecutors;\n+\n+public class ContextFutureCallbackArgumentsProvider implements ArgumentsProvider {\n+\n+    @Override\n+    public Stream<? extends Arguments> provideArguments(ExtensionContext context) throws Exception {\n+        final Arguments thenApply = Arguments.of(\n+                (BiConsumer<CompletableFuture<?>, AtomicBoolean>) (future, called) -> {\n+                    future.thenApply(res -> {\n+                        called.set(true);\n+                        return null;\n+                    }).exceptionally(cause -> {\n+                        called.set(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1MzQ5NA=="}, "originalCommit": {"oid": "6c938d304f6db92b2d85712ecd61682ef3876e1a"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDAxODY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMDowMjozOFrOFZ84ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwMzoyMDowMlrOFaUr2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1NjI1NA==", "bodyText": "Could we make it much shorter? It will increase the amount of our logs by large margin.", "url": "https://github.com/line/armeria/pull/2366#discussion_r362756254", "createdAt": "2020-01-03T10:02:38Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java", "diffHunk": "@@ -545,7 +545,10 @@ public String toString() {\n             return strVal;\n         }\n \n-        final StringBuilder buf = new StringBuilder(96);\n+        final StringBuilder buf = new StringBuilder(117);\n+        buf.append('[')\n+           .append(ClientRequestContext.class.getSimpleName())\n+           .append(']');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c938d304f6db92b2d85712ecd61682ef3876e1a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1NzY1Nw==", "bodyText": "Then how about [ClientCtx]? or [Client]? I really wish to know whether the context is ClientRequestContext or ServiceRequestContext from the logs. \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2366#discussion_r362757657", "createdAt": "2020-01-03T10:07:43Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java", "diffHunk": "@@ -545,7 +545,10 @@ public String toString() {\n             return strVal;\n         }\n \n-        final StringBuilder buf = new StringBuilder(96);\n+        final StringBuilder buf = new StringBuilder(117);\n+        buf.append('[')\n+           .append(ClientRequestContext.class.getSimpleName())\n+           .append(']');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1NjI1NA=="}, "originalCommit": {"oid": "6c938d304f6db92b2d85712ecd61682ef3876e1a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyNjMwMQ==", "bodyText": "Changed to [ClientCtx] and [ServiceCtx]", "url": "https://github.com/line/armeria/pull/2366#discussion_r363026301", "createdAt": "2020-01-04T09:49:40Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java", "diffHunk": "@@ -545,7 +545,10 @@ public String toString() {\n             return strVal;\n         }\n \n-        final StringBuilder buf = new StringBuilder(96);\n+        final StringBuilder buf = new StringBuilder(117);\n+        buf.append('[')\n+           .append(ClientRequestContext.class.getSimpleName())\n+           .append(']');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1NjI1NA=="}, "originalCommit": {"oid": "6c938d304f6db92b2d85712ecd61682ef3876e1a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE0Mzk4Mg==", "bodyText": "How about shortening even more, like [C] and [S]?", "url": "https://github.com/line/armeria/pull/2366#discussion_r363143982", "createdAt": "2020-01-06T03:03:29Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java", "diffHunk": "@@ -545,7 +545,10 @@ public String toString() {\n             return strVal;\n         }\n \n-        final StringBuilder buf = new StringBuilder(96);\n+        final StringBuilder buf = new StringBuilder(117);\n+        buf.append('[')\n+           .append(ClientRequestContext.class.getSimpleName())\n+           .append(']');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1NjI1NA=="}, "originalCommit": {"oid": "6c938d304f6db92b2d85712ecd61682ef3876e1a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE0NjIwMg==", "bodyText": "It's fine for me. Let me change that. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2366#discussion_r363146202", "createdAt": "2020-01-06T03:20:02Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java", "diffHunk": "@@ -545,7 +545,10 @@ public String toString() {\n             return strVal;\n         }\n \n-        final StringBuilder buf = new StringBuilder(96);\n+        final StringBuilder buf = new StringBuilder(117);\n+        buf.append('[')\n+           .append(ClientRequestContext.class.getSimpleName())\n+           .append(']');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1NjI1NA=="}, "originalCommit": {"oid": "6c938d304f6db92b2d85712ecd61682ef3876e1a"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDAyMDIyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/AbstractRequestContextAwareCompletableFuture.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMDowMzoyN1rOFZ85eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQwOTo0OToxMlrOFaNXdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1NjQ3Mg==", "bodyText": "Could extract into a new method and deduplicate", "url": "https://github.com/line/armeria/pull/2366#discussion_r362756472", "createdAt": "2020-01-03T10:03:27Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/AbstractRequestContextAwareCompletableFuture.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+/**\n+ * A base class for {@link CompletableFuture} which pushing {@link RequestContext} into the thread-local\n+ * when executes callbacks.\n+ */\n+public abstract class AbstractRequestContextAwareCompletableFuture<T> extends CompletableFuture<T> {\n+\n+    private static final Logger logger =\n+            LoggerFactory.getLogger(AbstractRequestContextAwareCompletableFuture.class);\n+\n+    private final RequestContext ctx;\n+\n+    protected AbstractRequestContextAwareCompletableFuture(RequestContext ctx) {\n+        this.ctx = ctx;\n+    }\n+\n+    protected RequestContext ctx() {\n+        return ctx;\n+    }\n+\n+    protected Runnable makeContextAwareLoggingException(Runnable runnable) {\n+        requireNonNull(runnable, \"runnable\");\n+        return () -> {\n+            try (SafeCloseable ignored = ctx.push()) {\n+                runnable.run();\n+            } catch (Throwable th) {\n+                logger.warn(\"An error occurred when pushing a context\", th);\n+                throw th;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c938d304f6db92b2d85712ecd61682ef3876e1a"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyNjI5Mw==", "bodyText": "Fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2366#discussion_r363026293", "createdAt": "2020-01-04T09:49:12Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/AbstractRequestContextAwareCompletableFuture.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+/**\n+ * A base class for {@link CompletableFuture} which pushing {@link RequestContext} into the thread-local\n+ * when executes callbacks.\n+ */\n+public abstract class AbstractRequestContextAwareCompletableFuture<T> extends CompletableFuture<T> {\n+\n+    private static final Logger logger =\n+            LoggerFactory.getLogger(AbstractRequestContextAwareCompletableFuture.class);\n+\n+    private final RequestContext ctx;\n+\n+    protected AbstractRequestContextAwareCompletableFuture(RequestContext ctx) {\n+        this.ctx = ctx;\n+    }\n+\n+    protected RequestContext ctx() {\n+        return ctx;\n+    }\n+\n+    protected Runnable makeContextAwareLoggingException(Runnable runnable) {\n+        requireNonNull(runnable, \"runnable\");\n+        return () -> {\n+            try (SafeCloseable ignored = ctx.push()) {\n+                runnable.run();\n+            } catch (Throwable th) {\n+                logger.warn(\"An error occurred when pushing a context\", th);\n+                throw th;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1NjQ3Mg=="}, "originalCommit": {"oid": "6c938d304f6db92b2d85712ecd61682ef3876e1a"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDAyMTUyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMDowNDoxMFrOFZ86RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMDowNDoxMFrOFZ86RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1NjY3Nw==", "bodyText": "Ditto", "url": "https://github.com/line/armeria/pull/2366#discussion_r362756677", "createdAt": "2020-01-03T10:04:10Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java", "diffHunk": "@@ -584,7 +584,10 @@ public String toString() {\n             return strVal;\n         }\n \n-        final StringBuilder buf = new StringBuilder(96);\n+        final StringBuilder buf = new StringBuilder(119);\n+        buf.append('[')\n+           .append(ServiceRequestContext.class.getSimpleName())\n+           .append(']');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c938d304f6db92b2d85712ecd61682ef3876e1a"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjE0MDY4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwNTozNzozNlrOFaQFUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwMTo0OToxNlrOFaUAAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3MDgwMA==", "bodyText": "Ah here's where I first saw the pattern - see my comment here #2371 (comment)\nUsing return instead of throw doesn't seem to improve verbosity but makes the code much less readable.", "url": "https://github.com/line/armeria/pull/2366#discussion_r363070800", "createdAt": "2020-01-05T05:37:36Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java", "diffHunk": "@@ -351,10 +352,7 @@ default SafeCloseable push(boolean runCallbacks) {\n \n         // Put the oldCtx back before throwing an exception.\n         RequestContextThreadLocal.set(oldCtx);\n-        throw new IllegalStateException(\n-                \"Trying to call object wrapped with context \" + this + \", but context is currently \" +\n-                \"set to \" + oldCtx + \". This means the callback was called from \" +\n-                \"unexpected thread or forgetting to close previous context.\");\n+        return throwIllegalContextPushing(this, oldCtx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3780cf8cca46aa8bec4df98ed17ec5efe05e6332"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEzNDk3OQ==", "bodyText": "Yes, it's now much readable. Thanks!", "url": "https://github.com/line/armeria/pull/2366#discussion_r363134979", "createdAt": "2020-01-06T01:49:16Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java", "diffHunk": "@@ -351,10 +352,7 @@ default SafeCloseable push(boolean runCallbacks) {\n \n         // Put the oldCtx back before throwing an exception.\n         RequestContextThreadLocal.set(oldCtx);\n-        throw new IllegalStateException(\n-                \"Trying to call object wrapped with context \" + this + \", but context is currently \" +\n-                \"set to \" + oldCtx + \". This means the callback was called from \" +\n-                \"unexpected thread or forgetting to close previous context.\");\n+        return throwIllegalContextPushing(this, oldCtx);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3MDgwMA=="}, "originalCommit": {"oid": "3780cf8cca46aa8bec4df98ed17ec5efe05e6332"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjYwNDc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/AbstractRequestContextAwareCompletableFuture.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwMTozNzozOFrOFaT7mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwMjozMDo1NVrOFaUSpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEzMzg0OA==", "bodyText": "I'm not an expert here. So...\nQuestion: Is there any chance the runnable throws an exception?\nIf throws, I think we need to update the message like:\nAn error occurred when pushing a context and executing the 'Runnable'\nOr should we catch only the throwIllegalContextPushing?", "url": "https://github.com/line/armeria/pull/2366#discussion_r363133848", "createdAt": "2020-01-06T01:37:38Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/AbstractRequestContextAwareCompletableFuture.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+/**\n+ * A base class for {@link CompletableFuture} which pushing {@link RequestContext} into the thread-local\n+ * when executes callbacks.\n+ */\n+public abstract class AbstractRequestContextAwareCompletableFuture<T> extends CompletableFuture<T> {\n+\n+    private static final Logger logger =\n+            LoggerFactory.getLogger(AbstractRequestContextAwareCompletableFuture.class);\n+\n+    private final RequestContext ctx;\n+\n+    protected AbstractRequestContextAwareCompletableFuture(RequestContext ctx) {\n+        this.ctx = ctx;\n+    }\n+\n+    protected RequestContext ctx() {\n+        return ctx;\n+    }\n+\n+    protected Runnable makeContextAwareLoggingException(Runnable runnable) {\n+        requireNonNull(runnable, \"runnable\");\n+        return () -> {\n+            makeContextAwareLoggingException0(runnable);\n+        };\n+    }\n+\n+    protected <I> Consumer<I> makeContextAwareLoggingException(Consumer<I> action) {\n+        requireNonNull(action, \"action\");\n+        return t -> makeContextAwareLoggingException0(() -> action.accept(t));\n+    }\n+\n+    protected <I, U> BiConsumer<I, U> makeContextAwareLoggingException(BiConsumer<I, U> action) {\n+        requireNonNull(action, \"action\");\n+        return (t, u) -> makeContextAwareLoggingException0(() -> action.accept(t, u));\n+    }\n+\n+    protected <V> Supplier<V> makeContextAwareLoggingException(Supplier<? extends V> action) {\n+        requireNonNull(action, \"action\");\n+        return () -> makeContextAwareLoggingException0(action);\n+    }\n+\n+    protected <I, R> Function<I, R> makeContextAwareLoggingException(Function<I, R> function) {\n+        requireNonNull(function, \"function\");\n+        return t -> makeContextAwareLoggingException0(() -> function.apply(t));\n+    }\n+\n+    protected <I, U, V> BiFunction<I, U, V> makeContextAwareLoggingException(BiFunction<I, U, V> function) {\n+        requireNonNull(function, \"function\");\n+        return (t, u) -> makeContextAwareLoggingException0(() -> function.apply(t, u));\n+    }\n+\n+    private void makeContextAwareLoggingException0(Runnable runnable) {\n+        try (SafeCloseable ignored = ctx.push()) {\n+            runnable.run();\n+        } catch (Throwable th) {\n+            logger.warn(\"An error occurred when pushing a context\", th);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3780cf8cca46aa8bec4df98ed17ec5efe05e6332"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEzOTc1MQ==", "bodyText": "That's a good point. Let me update the message. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2366#discussion_r363139751", "createdAt": "2020-01-06T02:30:55Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/AbstractRequestContextAwareCompletableFuture.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+/**\n+ * A base class for {@link CompletableFuture} which pushing {@link RequestContext} into the thread-local\n+ * when executes callbacks.\n+ */\n+public abstract class AbstractRequestContextAwareCompletableFuture<T> extends CompletableFuture<T> {\n+\n+    private static final Logger logger =\n+            LoggerFactory.getLogger(AbstractRequestContextAwareCompletableFuture.class);\n+\n+    private final RequestContext ctx;\n+\n+    protected AbstractRequestContextAwareCompletableFuture(RequestContext ctx) {\n+        this.ctx = ctx;\n+    }\n+\n+    protected RequestContext ctx() {\n+        return ctx;\n+    }\n+\n+    protected Runnable makeContextAwareLoggingException(Runnable runnable) {\n+        requireNonNull(runnable, \"runnable\");\n+        return () -> {\n+            makeContextAwareLoggingException0(runnable);\n+        };\n+    }\n+\n+    protected <I> Consumer<I> makeContextAwareLoggingException(Consumer<I> action) {\n+        requireNonNull(action, \"action\");\n+        return t -> makeContextAwareLoggingException0(() -> action.accept(t));\n+    }\n+\n+    protected <I, U> BiConsumer<I, U> makeContextAwareLoggingException(BiConsumer<I, U> action) {\n+        requireNonNull(action, \"action\");\n+        return (t, u) -> makeContextAwareLoggingException0(() -> action.accept(t, u));\n+    }\n+\n+    protected <V> Supplier<V> makeContextAwareLoggingException(Supplier<? extends V> action) {\n+        requireNonNull(action, \"action\");\n+        return () -> makeContextAwareLoggingException0(action);\n+    }\n+\n+    protected <I, R> Function<I, R> makeContextAwareLoggingException(Function<I, R> function) {\n+        requireNonNull(function, \"function\");\n+        return t -> makeContextAwareLoggingException0(() -> function.apply(t));\n+    }\n+\n+    protected <I, U, V> BiFunction<I, U, V> makeContextAwareLoggingException(BiFunction<I, U, V> function) {\n+        requireNonNull(function, \"function\");\n+        return (t, u) -> makeContextAwareLoggingException0(() -> function.apply(t, u));\n+    }\n+\n+    private void makeContextAwareLoggingException0(Runnable runnable) {\n+        try (SafeCloseable ignored = ctx.push()) {\n+            runnable.run();\n+        } catch (Throwable th) {\n+            logger.warn(\"An error occurred when pushing a context\", th);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEzMzg0OA=="}, "originalCommit": {"oid": "3780cf8cca46aa8bec4df98ed17ec5efe05e6332"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Mjc0NDIzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/AbstractRequestContextAwareCompletableFuture.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNDoyMjowMlrOFaVLFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNDoyMjowMlrOFaVLFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE1NDE5Nw==", "bodyText": "We should not log exceptions raised by .run()\nfinal SafeCloseable handle;\ntry {\n    handle = ctx.push();\n} catch (Throwable t) {\n    logger.warn(...);\n    Exceptions.throwUnsafely(t);\n    return;\n}\n\ntry {\n    action.run();\n} finally {\n    handle.close();\n}", "url": "https://github.com/line/armeria/pull/2366#discussion_r363154197", "createdAt": "2020-01-06T04:22:02Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/AbstractRequestContextAwareCompletableFuture.java", "diffHunk": "@@ -67,35 +67,35 @@ protected Runnable makeContextAwareLoggingException(Runnable runnable) {\n         return (t, u) -> makeContextAwareLoggingException0(() -> action.accept(t, u));\n     }\n \n-    protected <V> Supplier<V> makeContextAwareLoggingException(Supplier<? extends V> action) {\n-        requireNonNull(action, \"action\");\n-        return () -> makeContextAwareLoggingException0(action);\n+    protected <V> Supplier<V> makeContextAwareLoggingException(Supplier<? extends V> supplier) {\n+        requireNonNull(supplier, \"supplier\");\n+        return () -> makeContextAwareLoggingException0(supplier);\n     }\n \n-    protected <I, R> Function<I, R> makeContextAwareLoggingException(Function<I, R> function) {\n-        requireNonNull(function, \"function\");\n-        return t -> makeContextAwareLoggingException0(() -> function.apply(t));\n+    protected <I, R> Function<I, R> makeContextAwareLoggingException(Function<I, R> fn) {\n+        requireNonNull(fn, \"fn\");\n+        return t -> makeContextAwareLoggingException0(() -> fn.apply(t));\n     }\n \n-    protected <I, U, V> BiFunction<I, U, V> makeContextAwareLoggingException(BiFunction<I, U, V> function) {\n-        requireNonNull(function, \"function\");\n-        return (t, u) -> makeContextAwareLoggingException0(() -> function.apply(t, u));\n+    protected <I, U, V> BiFunction<I, U, V> makeContextAwareLoggingException(BiFunction<I, U, V> fn) {\n+        requireNonNull(fn, \"fn\");\n+        return (t, u) -> makeContextAwareLoggingException0(() -> fn.apply(t, u));\n     }\n \n-    private void makeContextAwareLoggingException0(Runnable runnable) {\n+    private void makeContextAwareLoggingException0(Runnable action) {\n         try (SafeCloseable ignored = ctx.push()) {\n-            runnable.run();\n+            action.run();\n         } catch (Throwable th) {\n-            logger.warn(\"An error occurred when pushing a context\", th);\n+            logger.warn(\"An error occurred when pushing a context and executing the action\", th);\n             throw th;\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35bbeb553d5156519b9b2c0db0fc284b0295668c"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Mjc0NDQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/AbstractRequestContextAwareCompletableFuture.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNDoyMjoyMFrOFaVLNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNDoyMjoyMFrOFaVLNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE1NDIzMA==", "bodyText": "Ditto", "url": "https://github.com/line/armeria/pull/2366#discussion_r363154230", "createdAt": "2020-01-06T04:22:20Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/AbstractRequestContextAwareCompletableFuture.java", "diffHunk": "@@ -67,35 +67,35 @@ protected Runnable makeContextAwareLoggingException(Runnable runnable) {\n         return (t, u) -> makeContextAwareLoggingException0(() -> action.accept(t, u));\n     }\n \n-    protected <V> Supplier<V> makeContextAwareLoggingException(Supplier<? extends V> action) {\n-        requireNonNull(action, \"action\");\n-        return () -> makeContextAwareLoggingException0(action);\n+    protected <V> Supplier<V> makeContextAwareLoggingException(Supplier<? extends V> supplier) {\n+        requireNonNull(supplier, \"supplier\");\n+        return () -> makeContextAwareLoggingException0(supplier);\n     }\n \n-    protected <I, R> Function<I, R> makeContextAwareLoggingException(Function<I, R> function) {\n-        requireNonNull(function, \"function\");\n-        return t -> makeContextAwareLoggingException0(() -> function.apply(t));\n+    protected <I, R> Function<I, R> makeContextAwareLoggingException(Function<I, R> fn) {\n+        requireNonNull(fn, \"fn\");\n+        return t -> makeContextAwareLoggingException0(() -> fn.apply(t));\n     }\n \n-    protected <I, U, V> BiFunction<I, U, V> makeContextAwareLoggingException(BiFunction<I, U, V> function) {\n-        requireNonNull(function, \"function\");\n-        return (t, u) -> makeContextAwareLoggingException0(() -> function.apply(t, u));\n+    protected <I, U, V> BiFunction<I, U, V> makeContextAwareLoggingException(BiFunction<I, U, V> fn) {\n+        requireNonNull(fn, \"fn\");\n+        return (t, u) -> makeContextAwareLoggingException0(() -> fn.apply(t, u));\n     }\n \n-    private void makeContextAwareLoggingException0(Runnable runnable) {\n+    private void makeContextAwareLoggingException0(Runnable action) {\n         try (SafeCloseable ignored = ctx.push()) {\n-            runnable.run();\n+            action.run();\n         } catch (Throwable th) {\n-            logger.warn(\"An error occurred when pushing a context\", th);\n+            logger.warn(\"An error occurred when pushing a context and executing the action\", th);\n             throw th;\n         }\n     }\n \n-    private <V> V makeContextAwareLoggingException0(Supplier<? extends V> action) {\n+    private <V> V makeContextAwareLoggingException0(Supplier<? extends V> fn) {\n         try (SafeCloseable ignored = ctx.push()) {\n-            return action.get();\n+            return fn.get();\n         } catch (Throwable th) {\n-            logger.warn(\"An error occurred when pushing a context\", th);\n+            logger.warn(\"An error occurred when pushing a context and executing the fn\", th);\n             throw th;\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35bbeb553d5156519b9b2c0db0fc284b0295668c"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Mjc0NTQxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNDoyMzozNFrOFaVLxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxMzoyNzoyOVrOFadlDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE1NDM3Mw==", "bodyText": "Could you make it a top-level class and make it part of common package?", "url": "https://github.com/line/armeria/pull/2366#discussion_r363154373", "createdAt": "2020-01-06T04:23:34Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java", "diffHunk": "@@ -87,5 +87,20 @@ public static SafeCloseable pushWithRootAndOldCtx(ClientRequestContext currentCt\n         }\n     }\n \n+    /**\n+     * An {@link IllegalStateException} which is raised when pushing a context from the unexpected thread\n+     * or forgetting to close the previous context.\n+     */\n+    public static final class IllegalContextPushingException extends IllegalStateException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35bbeb553d5156519b9b2c0db0fc284b0295668c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE4MzI4Mg==", "bodyText": "So If I change just to return the IllegalStateException from the previous method, I don't have to declare this new exception type. And I think we don't have to have this another exception, especially for this case. (Sorry I made this class because I misunderstood the comment. \ud83d\ude4f) Do you think we still need this?", "url": "https://github.com/line/armeria/pull/2366#discussion_r363183282", "createdAt": "2020-01-06T07:28:03Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java", "diffHunk": "@@ -87,5 +87,20 @@ public static SafeCloseable pushWithRootAndOldCtx(ClientRequestContext currentCt\n         }\n     }\n \n+    /**\n+     * An {@link IllegalStateException} which is raised when pushing a context from the unexpected thread\n+     * or forgetting to close the previous context.\n+     */\n+    public static final class IllegalContextPushingException extends IllegalStateException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE1NDM3Mw=="}, "originalCommit": {"oid": "35bbeb553d5156519b9b2c0db0fc284b0295668c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI5MTkxOQ==", "bodyText": "Nope. Let's continue using IllegalStateException.", "url": "https://github.com/line/armeria/pull/2366#discussion_r363291919", "createdAt": "2020-01-06T13:27:29Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java", "diffHunk": "@@ -87,5 +87,20 @@ public static SafeCloseable pushWithRootAndOldCtx(ClientRequestContext currentCt\n         }\n     }\n \n+    /**\n+     * An {@link IllegalStateException} which is raised when pushing a context from the unexpected thread\n+     * or forgetting to close the previous context.\n+     */\n+    public static final class IllegalContextPushingException extends IllegalStateException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE1NDM3Mw=="}, "originalCommit": {"oid": "35bbeb553d5156519b9b2c0db0fc284b0295668c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Mjc0NzEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNDoyNTo1OVrOFaVM0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNDoyNTo1OVrOFaVM0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE1NDY0MA==", "bodyText": "Now that we have a dedicated exception type, we could add getters for the two contexts? We could also simplify the exception message and add more details to the class Javadoc.", "url": "https://github.com/line/armeria/pull/2366#discussion_r363154640", "createdAt": "2020-01-06T04:25:59Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java", "diffHunk": "@@ -87,5 +87,20 @@ public static SafeCloseable pushWithRootAndOldCtx(ClientRequestContext currentCt\n         }\n     }\n \n+    /**\n+     * An {@link IllegalStateException} which is raised when pushing a context from the unexpected thread\n+     * or forgetting to close the previous context.\n+     */\n+    public static final class IllegalContextPushingException extends IllegalStateException {\n+\n+        private static final long serialVersionUID = 5431942355463120798L;\n+\n+        public IllegalContextPushingException(RequestContext newCtx, RequestContext oldCtx) {\n+            super(\"Trying to call object wrapped with context \" + newCtx + \", but context is currently \" +\n+                  \"set to \" + oldCtx + \". This means the callback was called from \" +\n+                  \"unexpected thread or forgetting to close previous context.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35bbeb553d5156519b9b2c0db0fc284b0295668c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Mjc3MzQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNDo1ODoxM1rOFaVcDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNzoyNTo0OFrOFaW62g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE1ODU0MQ==", "bodyText": "This type looks good but just to clarify, I was just expecting the old factory method to return IllegalStateException instead of throwing it ;)", "url": "https://github.com/line/armeria/pull/2366#discussion_r363158541", "createdAt": "2020-01-06T04:58:13Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java", "diffHunk": "@@ -87,5 +87,20 @@ public static SafeCloseable pushWithRootAndOldCtx(ClientRequestContext currentCt\n         }\n     }\n \n+    /**\n+     * An {@link IllegalStateException} which is raised when pushing a context from the unexpected thread\n+     * or forgetting to close the previous context.\n+     */\n+    public static final class IllegalContextPushingException extends IllegalStateException {\n+\n+        private static final long serialVersionUID = 5431942355463120798L;\n+\n+        public IllegalContextPushingException(RequestContext newCtx, RequestContext oldCtx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35bbeb553d5156519b9b2c0db0fc284b0295668c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE4MjgxMA==", "bodyText": "Ah, I misunderstood. \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2366#discussion_r363182810", "createdAt": "2020-01-06T07:25:48Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java", "diffHunk": "@@ -87,5 +87,20 @@ public static SafeCloseable pushWithRootAndOldCtx(ClientRequestContext currentCt\n         }\n     }\n \n+    /**\n+     * An {@link IllegalStateException} which is raised when pushing a context from the unexpected thread\n+     * or forgetting to close the previous context.\n+     */\n+    public static final class IllegalContextPushingException extends IllegalStateException {\n+\n+        private static final long serialVersionUID = 5431942355463120798L;\n+\n+        public IllegalContextPushingException(RequestContext newCtx, RequestContext oldCtx) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE1ODU0MQ=="}, "originalCommit": {"oid": "35bbeb553d5156519b9b2c0db0fc284b0295668c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MzAwMzQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwODoxMToyM1rOFaXhPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwODoxMzoyMVrOFaXi7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE5MjYzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    throw new IllegalStateException(\n          \n          \n            \n                    return new IllegalStateException(", "url": "https://github.com/line/armeria/pull/2366#discussion_r363192638", "createdAt": "2020-01-06T08:11:23Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java", "diffHunk": "@@ -87,5 +87,19 @@ public static SafeCloseable pushWithRootAndOldCtx(ClientRequestContext currentCt\n         }\n     }\n \n+    /**\n+     * Returns an {@link IllegalStateException} which is raised when pushing a context from\n+     * the unexpected thread or forgetting to close the previous context.\n+     */\n+    public static IllegalStateException newIllegalContextPushingException(\n+            RequestContext newCtx, RequestContext oldCtx) {\n+        requireNonNull(newCtx, \"newCtx\");\n+        requireNonNull(oldCtx, \"oldCtx\");\n+        throw new IllegalStateException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a07aead0331a839ada3a569770f9c535b3f9f0"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE5MzA2OQ==", "bodyText": "Oops forgot to change that.", "url": "https://github.com/line/armeria/pull/2366#discussion_r363193069", "createdAt": "2020-01-06T08:13:21Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java", "diffHunk": "@@ -87,5 +87,19 @@ public static SafeCloseable pushWithRootAndOldCtx(ClientRequestContext currentCt\n         }\n     }\n \n+    /**\n+     * Returns an {@link IllegalStateException} which is raised when pushing a context from\n+     * the unexpected thread or forgetting to close the previous context.\n+     */\n+    public static IllegalStateException newIllegalContextPushingException(\n+            RequestContext newCtx, RequestContext oldCtx) {\n+        requireNonNull(newCtx, \"newCtx\");\n+        requireNonNull(oldCtx, \"oldCtx\");\n+        throw new IllegalStateException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE5MjYzOA=="}, "originalCommit": {"oid": "20a07aead0331a839ada3a569770f9c535b3f9f0"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2841, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}