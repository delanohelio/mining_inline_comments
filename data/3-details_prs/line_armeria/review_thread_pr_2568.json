{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1OTk4MzAx", "number": 2568, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTo0NDo0N1rODmpRrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzozMjo0N1rODm7ZiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODQ4NzQ5OnYy", "diffSide": "RIGHT", "path": "site/src/sphinx/client-decorator.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTo0NDo0N1rOF0LbzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTo1NzoyOVrOF0LyvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1NzYxMw==", "bodyText": "Why don't we show the right example over the wrong one? Because many users might want to copy and paste.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Don't do this. ContentPreviewingClient should be inserted after DecodingClient.\n          \n          \n            \n                cb.decorator(ContentPreviewingClient.newDecorator(1000));\n          \n          \n            \n                cb.decorator(DecodingClient.newDecorator());\n          \n          \n            \n                cb.decorator(DecodingClient.newDecorator());\n          \n          \n            \n                // ContentPreviewingClient should be inserted after DecodingClient.\n          \n          \n            \n                cb.decorator(ContentPreviewingClient.newDecorator(1000));", "url": "https://github.com/line/armeria/pull/2568#discussion_r390257613", "createdAt": "2020-03-10T11:44:47Z", "author": {"login": "ikhoon"}, "path": "site/src/sphinx/client-decorator.rst", "diffHunk": "@@ -67,6 +67,113 @@ If your decorator is expected to be reusable, it is recommended to define a new\n     // Using a lambda expression:\n     cb.decorator(delegate -> new AuditClient(delegate));\n \n+The order of decoration\n+-----------------------\n+\n+The decorators are executed in reverse order of the insertion. The following example shows which order\n+the decorators are executed by printing the messages.\n+\n+.. code-block:: java\n+\n+    import com.linecorp.armeria.client.WebClient;\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 decorator\n+    cb.decorator((delegate, ctx, req) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 decorator.\n+    // No matter decorator() or option() is used, decorators are executed in reverse order of the insertion.\n+    cb.option(ClientOption.DECORATION, ClientDecoration.of((delegate, ctx, req) -> {\n+        System.err.println(\"Firstly, executed\");\n+        ...\n+    });\n+\n+    WebClient myClient = cb.build(WebClient.class);\n+\n+The following diagram describes how an HTTP request and HTTP response are gone through decorators:\n+\n+.. uml::\n+\n+    @startditaa\n+    +-----------+  req  +-----------+  req  +-----------+  req  +------------------+    req    +--------------+\n+    |           |------>|           |------>|           |------>|                  |---------->|              |\n+    | WebClient |       | #1        |       | #2        |       | Armeria          |           |    Server    |\n+    |           |  res  | decorator |  res  | decorator |  res  | Netwokring Layer |    res    |              |\n+    |           |<------|           |<------|           |<------|                  |<----------|              |\n+    +-----------+       +-----------+       +-----------+       +------------------+           +--------------+\n+    @endditaa\n+\n+If the client is a Thrift client and RPC decorators are inserted, HTTP decorators and RPC decorators are\n+separately grouped and executed in reverse order of the insertion:\n+\n+.. code-block:: java\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 HTTP decorator.\n+    cb.decorator((delegate, ctx, httpReq) -> {\n+        System.err.println(\"Fourthly, executed.\");\n+        ...\n+    });\n+\n+    // #2 RPC decorator.\n+    cb.rpcDecorator((delegate, ctx, rpcReq) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 HTTP decorator.\n+    cb.decorator((delegate, ctx, httpReq) -> {\n+        System.err.println(\"Thirdly, executed.\");\n+        ...\n+    });\n+\n+    // #1 RPC decorator.\n+    cb.rpcDecorator((delegate, ctx, rpcReq) -> {\n+        System.err.println(\"Firstly, executed.\");\n+        ...\n+    });\n+\n+An RPC request is converted into an HTTP request before it's sent to a server.\n+So RPC decorators are inserted before the RPC request is converted and HTTP decorators are inserted after the\n+request is converted into the HTTP request. The following diagram describes it:\n+\n+.. uml::\n+\n+    @startditaa\n+    +--------+ req +-----------+ req +-----------+                     +-----------+ req +-----------+\n+    |        |---->|           |---->|           |---> RPC to HTTP --->|           |---->|           |----=->\n+    | Thrift |     | #1 RPC    |     | #2 RPC    |                     | #1 HTTP   |     | #2 HTTP   |\n+    | Client | res | decorator | res | decorator |                     | decorator | res | decorator |\n+    |        |<----|           |<----|           |<--- HTTP to RPC <---|           |<----|           |<-=----\n+    +--------+     +-----------+     +-----------+                     +-----------+     +-----------+\n+    @endditaa\n+\n+If the decorator modifies the response (e.g. :api:`DecodingClient`) or spawns more requests\n+(e.g. :api:`RetryingClient`), the consequence is different depending on the order of the decorators.\n+Let's look at the following example that :api:`DecodingClient` and :api:`ContentPreviewingClient`\n+are used together:\n+\n+.. code-block:: java\n+\n+    import com.linecorp.armeria.client.encoding.DecodingClient;\n+    import com.linecorp.armeria.client.logging.ContentPreviewingClient;\n+\n+    ClientBuilder cb = Clients.builder(...);\n+    // Don't do this. ContentPreviewingClient should be inserted after DecodingClient.\n+    cb.decorator(ContentPreviewingClient.newDecorator(1000));\n+    cb.decorator(DecodingClient.newDecorator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42311d2d3f1129033dd4fedf1c4aef0c68e1d2cf"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2MzQ4NQ==", "bodyText": "Fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2568#discussion_r390263485", "createdAt": "2020-03-10T11:57:29Z", "author": {"login": "minwoox"}, "path": "site/src/sphinx/client-decorator.rst", "diffHunk": "@@ -67,6 +67,113 @@ If your decorator is expected to be reusable, it is recommended to define a new\n     // Using a lambda expression:\n     cb.decorator(delegate -> new AuditClient(delegate));\n \n+The order of decoration\n+-----------------------\n+\n+The decorators are executed in reverse order of the insertion. The following example shows which order\n+the decorators are executed by printing the messages.\n+\n+.. code-block:: java\n+\n+    import com.linecorp.armeria.client.WebClient;\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 decorator\n+    cb.decorator((delegate, ctx, req) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 decorator.\n+    // No matter decorator() or option() is used, decorators are executed in reverse order of the insertion.\n+    cb.option(ClientOption.DECORATION, ClientDecoration.of((delegate, ctx, req) -> {\n+        System.err.println(\"Firstly, executed\");\n+        ...\n+    });\n+\n+    WebClient myClient = cb.build(WebClient.class);\n+\n+The following diagram describes how an HTTP request and HTTP response are gone through decorators:\n+\n+.. uml::\n+\n+    @startditaa\n+    +-----------+  req  +-----------+  req  +-----------+  req  +------------------+    req    +--------------+\n+    |           |------>|           |------>|           |------>|                  |---------->|              |\n+    | WebClient |       | #1        |       | #2        |       | Armeria          |           |    Server    |\n+    |           |  res  | decorator |  res  | decorator |  res  | Netwokring Layer |    res    |              |\n+    |           |<------|           |<------|           |<------|                  |<----------|              |\n+    +-----------+       +-----------+       +-----------+       +------------------+           +--------------+\n+    @endditaa\n+\n+If the client is a Thrift client and RPC decorators are inserted, HTTP decorators and RPC decorators are\n+separately grouped and executed in reverse order of the insertion:\n+\n+.. code-block:: java\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 HTTP decorator.\n+    cb.decorator((delegate, ctx, httpReq) -> {\n+        System.err.println(\"Fourthly, executed.\");\n+        ...\n+    });\n+\n+    // #2 RPC decorator.\n+    cb.rpcDecorator((delegate, ctx, rpcReq) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 HTTP decorator.\n+    cb.decorator((delegate, ctx, httpReq) -> {\n+        System.err.println(\"Thirdly, executed.\");\n+        ...\n+    });\n+\n+    // #1 RPC decorator.\n+    cb.rpcDecorator((delegate, ctx, rpcReq) -> {\n+        System.err.println(\"Firstly, executed.\");\n+        ...\n+    });\n+\n+An RPC request is converted into an HTTP request before it's sent to a server.\n+So RPC decorators are inserted before the RPC request is converted and HTTP decorators are inserted after the\n+request is converted into the HTTP request. The following diagram describes it:\n+\n+.. uml::\n+\n+    @startditaa\n+    +--------+ req +-----------+ req +-----------+                     +-----------+ req +-----------+\n+    |        |---->|           |---->|           |---> RPC to HTTP --->|           |---->|           |----=->\n+    | Thrift |     | #1 RPC    |     | #2 RPC    |                     | #1 HTTP   |     | #2 HTTP   |\n+    | Client | res | decorator | res | decorator |                     | decorator | res | decorator |\n+    |        |<----|           |<----|           |<--- HTTP to RPC <---|           |<----|           |<-=----\n+    +--------+     +-----------+     +-----------+                     +-----------+     +-----------+\n+    @endditaa\n+\n+If the decorator modifies the response (e.g. :api:`DecodingClient`) or spawns more requests\n+(e.g. :api:`RetryingClient`), the consequence is different depending on the order of the decorators.\n+Let's look at the following example that :api:`DecodingClient` and :api:`ContentPreviewingClient`\n+are used together:\n+\n+.. code-block:: java\n+\n+    import com.linecorp.armeria.client.encoding.DecodingClient;\n+    import com.linecorp.armeria.client.logging.ContentPreviewingClient;\n+\n+    ClientBuilder cb = Clients.builder(...);\n+    // Don't do this. ContentPreviewingClient should be inserted after DecodingClient.\n+    cb.decorator(ContentPreviewingClient.newDecorator(1000));\n+    cb.decorator(DecodingClient.newDecorator());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1NzYxMw=="}, "originalCommit": {"oid": "42311d2d3f1129033dd4fedf1c4aef0c68e1d2cf"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODY3ODkyOnYy", "diffSide": "RIGHT", "path": "site/src/sphinx/client-decorator.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMjo0NzoxNlrOF0NQow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMjo0ODozMVrOF0NTJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI4NzUyMw==", "bodyText": "Networking", "url": "https://github.com/line/armeria/pull/2568#discussion_r390287523", "createdAt": "2020-03-10T12:47:16Z", "author": {"login": "jrhee17"}, "path": "site/src/sphinx/client-decorator.rst", "diffHunk": "@@ -67,6 +67,113 @@ If your decorator is expected to be reusable, it is recommended to define a new\n     // Using a lambda expression:\n     cb.decorator(delegate -> new AuditClient(delegate));\n \n+The order of decoration\n+-----------------------\n+\n+The decorators are executed in reverse order of the insertion. The following example shows which order\n+the decorators are executed by printing the messages.\n+\n+.. code-block:: java\n+\n+    import com.linecorp.armeria.client.WebClient;\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 decorator\n+    cb.decorator((delegate, ctx, req) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 decorator.\n+    // No matter decorator() or option() is used, decorators are executed in reverse order of the insertion.\n+    cb.option(ClientOption.DECORATION, ClientDecoration.of((delegate, ctx, req) -> {\n+        System.err.println(\"Firstly, executed\");\n+        ...\n+    });\n+\n+    WebClient myClient = cb.build(WebClient.class);\n+\n+The following diagram describes how an HTTP request and HTTP response are gone through decorators:\n+\n+.. uml::\n+\n+    @startditaa\n+    +-----------+  req  +-----------+  req  +-----------+  req  +------------------+    req    +--------------+\n+    |           |------>|           |------>|           |------>|                  |---------->|              |\n+    | WebClient |       | #1        |       | #2        |       | Armeria          |           |    Server    |\n+    |           |  res  | decorator |  res  | decorator |  res  | Netwokring Layer |    res    |              |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdb8754a6ae92b6048f1ff584a5a69426b57bd7c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI4ODE2NQ==", "bodyText": "\ud83d\ude31 \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2568#discussion_r390288165", "createdAt": "2020-03-10T12:48:31Z", "author": {"login": "minwoox"}, "path": "site/src/sphinx/client-decorator.rst", "diffHunk": "@@ -67,6 +67,113 @@ If your decorator is expected to be reusable, it is recommended to define a new\n     // Using a lambda expression:\n     cb.decorator(delegate -> new AuditClient(delegate));\n \n+The order of decoration\n+-----------------------\n+\n+The decorators are executed in reverse order of the insertion. The following example shows which order\n+the decorators are executed by printing the messages.\n+\n+.. code-block:: java\n+\n+    import com.linecorp.armeria.client.WebClient;\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 decorator\n+    cb.decorator((delegate, ctx, req) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 decorator.\n+    // No matter decorator() or option() is used, decorators are executed in reverse order of the insertion.\n+    cb.option(ClientOption.DECORATION, ClientDecoration.of((delegate, ctx, req) -> {\n+        System.err.println(\"Firstly, executed\");\n+        ...\n+    });\n+\n+    WebClient myClient = cb.build(WebClient.class);\n+\n+The following diagram describes how an HTTP request and HTTP response are gone through decorators:\n+\n+.. uml::\n+\n+    @startditaa\n+    +-----------+  req  +-----------+  req  +-----------+  req  +------------------+    req    +--------------+\n+    |           |------>|           |------>|           |------>|                  |---------->|              |\n+    | WebClient |       | #1        |       | #2        |       | Armeria          |           |    Server    |\n+    |           |  res  | decorator |  res  | decorator |  res  | Netwokring Layer |    res    |              |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI4NzUyMw=="}, "originalCommit": {"oid": "bdb8754a6ae92b6048f1ff584a5a69426b57bd7c"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODgxOTYyOnYy", "diffSide": "RIGHT", "path": "site/src/sphinx/client-decorator.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzoyNTo0NFrOF0OnKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzo0MDoyOFrOF0PMQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwOTY3NQ==", "bodyText": "So -> Therefore,", "url": "https://github.com/line/armeria/pull/2568#discussion_r390309675", "createdAt": "2020-03-10T13:25:44Z", "author": {"login": "trustin"}, "path": "site/src/sphinx/client-decorator.rst", "diffHunk": "@@ -67,6 +67,113 @@ If your decorator is expected to be reusable, it is recommended to define a new\n     // Using a lambda expression:\n     cb.decorator(delegate -> new AuditClient(delegate));\n \n+The order of decoration\n+-----------------------\n+\n+The decorators are executed in reverse order of the insertion. The following example shows which order\n+the decorators are executed by printing the messages.\n+\n+.. code-block:: java\n+\n+    import com.linecorp.armeria.client.WebClient;\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 decorator\n+    cb.decorator((delegate, ctx, req) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 decorator.\n+    // No matter decorator() or option() is used, decorators are executed in reverse order of the insertion.\n+    cb.option(ClientOption.DECORATION, ClientDecoration.of((delegate, ctx, req) -> {\n+        System.err.println(\"Firstly, executed\");\n+        ...\n+    });\n+\n+    WebClient myClient = cb.build(WebClient.class);\n+\n+The following diagram describes how an HTTP request and HTTP response are gone through decorators:\n+\n+.. uml::\n+\n+    @startditaa\n+    +-----------+  req  +-----------+  req  +-----------+  req  +------------------+    req    +--------------+\n+    |           |------>|           |------>|           |------>|                  |---------->|              |\n+    | WebClient |       | #1        |       | #2        |       | Armeria          |           |    Server    |\n+    |           |  res  | decorator |  res  | decorator |  res  | Networking Layer |    res    |              |\n+    |           |<------|           |<------|           |<------|                  |<----------|              |\n+    +-----------+       +-----------+       +-----------+       +------------------+           +--------------+\n+    @endditaa\n+\n+If the client is a Thrift client and RPC decorators are inserted, HTTP decorators and RPC decorators are\n+separately grouped and executed in reverse order of the insertion:\n+\n+.. code-block:: java\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 HTTP decorator.\n+    cb.decorator((delegate, ctx, httpReq) -> {\n+        System.err.println(\"Fourthly, executed.\");\n+        ...\n+    });\n+\n+    // #2 RPC decorator.\n+    cb.rpcDecorator((delegate, ctx, rpcReq) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 HTTP decorator.\n+    cb.decorator((delegate, ctx, httpReq) -> {\n+        System.err.println(\"Thirdly, executed.\");\n+        ...\n+    });\n+\n+    // #1 RPC decorator.\n+    cb.rpcDecorator((delegate, ctx, rpcReq) -> {\n+        System.err.println(\"Firstly, executed.\");\n+        ...\n+    });\n+\n+An RPC request is converted into an HTTP request before it's sent to a server.\n+So RPC decorators are inserted before the RPC request is converted and HTTP decorators are inserted after the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2246b76fa87c307c66c04d8e6b0096a4a1824dc1"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxOTE3MA==", "bodyText": "Fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2568#discussion_r390319170", "createdAt": "2020-03-10T13:40:28Z", "author": {"login": "minwoox"}, "path": "site/src/sphinx/client-decorator.rst", "diffHunk": "@@ -67,6 +67,113 @@ If your decorator is expected to be reusable, it is recommended to define a new\n     // Using a lambda expression:\n     cb.decorator(delegate -> new AuditClient(delegate));\n \n+The order of decoration\n+-----------------------\n+\n+The decorators are executed in reverse order of the insertion. The following example shows which order\n+the decorators are executed by printing the messages.\n+\n+.. code-block:: java\n+\n+    import com.linecorp.armeria.client.WebClient;\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 decorator\n+    cb.decorator((delegate, ctx, req) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 decorator.\n+    // No matter decorator() or option() is used, decorators are executed in reverse order of the insertion.\n+    cb.option(ClientOption.DECORATION, ClientDecoration.of((delegate, ctx, req) -> {\n+        System.err.println(\"Firstly, executed\");\n+        ...\n+    });\n+\n+    WebClient myClient = cb.build(WebClient.class);\n+\n+The following diagram describes how an HTTP request and HTTP response are gone through decorators:\n+\n+.. uml::\n+\n+    @startditaa\n+    +-----------+  req  +-----------+  req  +-----------+  req  +------------------+    req    +--------------+\n+    |           |------>|           |------>|           |------>|                  |---------->|              |\n+    | WebClient |       | #1        |       | #2        |       | Armeria          |           |    Server    |\n+    |           |  res  | decorator |  res  | decorator |  res  | Networking Layer |    res    |              |\n+    |           |<------|           |<------|           |<------|                  |<----------|              |\n+    +-----------+       +-----------+       +-----------+       +------------------+           +--------------+\n+    @endditaa\n+\n+If the client is a Thrift client and RPC decorators are inserted, HTTP decorators and RPC decorators are\n+separately grouped and executed in reverse order of the insertion:\n+\n+.. code-block:: java\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 HTTP decorator.\n+    cb.decorator((delegate, ctx, httpReq) -> {\n+        System.err.println(\"Fourthly, executed.\");\n+        ...\n+    });\n+\n+    // #2 RPC decorator.\n+    cb.rpcDecorator((delegate, ctx, rpcReq) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 HTTP decorator.\n+    cb.decorator((delegate, ctx, httpReq) -> {\n+        System.err.println(\"Thirdly, executed.\");\n+        ...\n+    });\n+\n+    // #1 RPC decorator.\n+    cb.rpcDecorator((delegate, ctx, rpcReq) -> {\n+        System.err.println(\"Firstly, executed.\");\n+        ...\n+    });\n+\n+An RPC request is converted into an HTTP request before it's sent to a server.\n+So RPC decorators are inserted before the RPC request is converted and HTTP decorators are inserted after the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwOTY3NQ=="}, "originalCommit": {"oid": "2246b76fa87c307c66c04d8e6b0096a4a1824dc1"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODgyMTE3OnYy", "diffSide": "RIGHT", "path": "site/src/sphinx/client-decorator.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzoyNjowNVrOF0OoDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzo0MDo0MFrOF0PMwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwOTkwMw==", "bodyText": "..., as described in the following diagram:", "url": "https://github.com/line/armeria/pull/2568#discussion_r390309903", "createdAt": "2020-03-10T13:26:05Z", "author": {"login": "trustin"}, "path": "site/src/sphinx/client-decorator.rst", "diffHunk": "@@ -67,6 +67,113 @@ If your decorator is expected to be reusable, it is recommended to define a new\n     // Using a lambda expression:\n     cb.decorator(delegate -> new AuditClient(delegate));\n \n+The order of decoration\n+-----------------------\n+\n+The decorators are executed in reverse order of the insertion. The following example shows which order\n+the decorators are executed by printing the messages.\n+\n+.. code-block:: java\n+\n+    import com.linecorp.armeria.client.WebClient;\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 decorator\n+    cb.decorator((delegate, ctx, req) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 decorator.\n+    // No matter decorator() or option() is used, decorators are executed in reverse order of the insertion.\n+    cb.option(ClientOption.DECORATION, ClientDecoration.of((delegate, ctx, req) -> {\n+        System.err.println(\"Firstly, executed\");\n+        ...\n+    });\n+\n+    WebClient myClient = cb.build(WebClient.class);\n+\n+The following diagram describes how an HTTP request and HTTP response are gone through decorators:\n+\n+.. uml::\n+\n+    @startditaa\n+    +-----------+  req  +-----------+  req  +-----------+  req  +------------------+    req    +--------------+\n+    |           |------>|           |------>|           |------>|                  |---------->|              |\n+    | WebClient |       | #1        |       | #2        |       | Armeria          |           |    Server    |\n+    |           |  res  | decorator |  res  | decorator |  res  | Networking Layer |    res    |              |\n+    |           |<------|           |<------|           |<------|                  |<----------|              |\n+    +-----------+       +-----------+       +-----------+       +------------------+           +--------------+\n+    @endditaa\n+\n+If the client is a Thrift client and RPC decorators are inserted, HTTP decorators and RPC decorators are\n+separately grouped and executed in reverse order of the insertion:\n+\n+.. code-block:: java\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 HTTP decorator.\n+    cb.decorator((delegate, ctx, httpReq) -> {\n+        System.err.println(\"Fourthly, executed.\");\n+        ...\n+    });\n+\n+    // #2 RPC decorator.\n+    cb.rpcDecorator((delegate, ctx, rpcReq) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 HTTP decorator.\n+    cb.decorator((delegate, ctx, httpReq) -> {\n+        System.err.println(\"Thirdly, executed.\");\n+        ...\n+    });\n+\n+    // #1 RPC decorator.\n+    cb.rpcDecorator((delegate, ctx, rpcReq) -> {\n+        System.err.println(\"Firstly, executed.\");\n+        ...\n+    });\n+\n+An RPC request is converted into an HTTP request before it's sent to a server.\n+So RPC decorators are inserted before the RPC request is converted and HTTP decorators are inserted after the\n+request is converted into the HTTP request. The following diagram describes it:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2246b76fa87c307c66c04d8e6b0096a4a1824dc1"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxOTI5OA==", "bodyText": "Fixed.", "url": "https://github.com/line/armeria/pull/2568#discussion_r390319298", "createdAt": "2020-03-10T13:40:40Z", "author": {"login": "minwoox"}, "path": "site/src/sphinx/client-decorator.rst", "diffHunk": "@@ -67,6 +67,113 @@ If your decorator is expected to be reusable, it is recommended to define a new\n     // Using a lambda expression:\n     cb.decorator(delegate -> new AuditClient(delegate));\n \n+The order of decoration\n+-----------------------\n+\n+The decorators are executed in reverse order of the insertion. The following example shows which order\n+the decorators are executed by printing the messages.\n+\n+.. code-block:: java\n+\n+    import com.linecorp.armeria.client.WebClient;\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 decorator\n+    cb.decorator((delegate, ctx, req) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 decorator.\n+    // No matter decorator() or option() is used, decorators are executed in reverse order of the insertion.\n+    cb.option(ClientOption.DECORATION, ClientDecoration.of((delegate, ctx, req) -> {\n+        System.err.println(\"Firstly, executed\");\n+        ...\n+    });\n+\n+    WebClient myClient = cb.build(WebClient.class);\n+\n+The following diagram describes how an HTTP request and HTTP response are gone through decorators:\n+\n+.. uml::\n+\n+    @startditaa\n+    +-----------+  req  +-----------+  req  +-----------+  req  +------------------+    req    +--------------+\n+    |           |------>|           |------>|           |------>|                  |---------->|              |\n+    | WebClient |       | #1        |       | #2        |       | Armeria          |           |    Server    |\n+    |           |  res  | decorator |  res  | decorator |  res  | Networking Layer |    res    |              |\n+    |           |<------|           |<------|           |<------|                  |<----------|              |\n+    +-----------+       +-----------+       +-----------+       +------------------+           +--------------+\n+    @endditaa\n+\n+If the client is a Thrift client and RPC decorators are inserted, HTTP decorators and RPC decorators are\n+separately grouped and executed in reverse order of the insertion:\n+\n+.. code-block:: java\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 HTTP decorator.\n+    cb.decorator((delegate, ctx, httpReq) -> {\n+        System.err.println(\"Fourthly, executed.\");\n+        ...\n+    });\n+\n+    // #2 RPC decorator.\n+    cb.rpcDecorator((delegate, ctx, rpcReq) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 HTTP decorator.\n+    cb.decorator((delegate, ctx, httpReq) -> {\n+        System.err.println(\"Thirdly, executed.\");\n+        ...\n+    });\n+\n+    // #1 RPC decorator.\n+    cb.rpcDecorator((delegate, ctx, rpcReq) -> {\n+        System.err.println(\"Firstly, executed.\");\n+        ...\n+    });\n+\n+An RPC request is converted into an HTTP request before it's sent to a server.\n+So RPC decorators are inserted before the RPC request is converted and HTTP decorators are inserted after the\n+request is converted into the HTTP request. The following diagram describes it:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwOTkwMw=="}, "originalCommit": {"oid": "2246b76fa87c307c66c04d8e6b0096a4a1824dc1"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODgyNDMyOnYy", "diffSide": "RIGHT", "path": "site/src/sphinx/client-decorator.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzoyNjo1NFrOF0Op9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzo0MDo0MlrOF0PM5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxMDM4OA==", "bodyText": "the consequence is ... -> the outcome may be ?", "url": "https://github.com/line/armeria/pull/2568#discussion_r390310388", "createdAt": "2020-03-10T13:26:54Z", "author": {"login": "trustin"}, "path": "site/src/sphinx/client-decorator.rst", "diffHunk": "@@ -67,6 +67,113 @@ If your decorator is expected to be reusable, it is recommended to define a new\n     // Using a lambda expression:\n     cb.decorator(delegate -> new AuditClient(delegate));\n \n+The order of decoration\n+-----------------------\n+\n+The decorators are executed in reverse order of the insertion. The following example shows which order\n+the decorators are executed by printing the messages.\n+\n+.. code-block:: java\n+\n+    import com.linecorp.armeria.client.WebClient;\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 decorator\n+    cb.decorator((delegate, ctx, req) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 decorator.\n+    // No matter decorator() or option() is used, decorators are executed in reverse order of the insertion.\n+    cb.option(ClientOption.DECORATION, ClientDecoration.of((delegate, ctx, req) -> {\n+        System.err.println(\"Firstly, executed\");\n+        ...\n+    });\n+\n+    WebClient myClient = cb.build(WebClient.class);\n+\n+The following diagram describes how an HTTP request and HTTP response are gone through decorators:\n+\n+.. uml::\n+\n+    @startditaa\n+    +-----------+  req  +-----------+  req  +-----------+  req  +------------------+    req    +--------------+\n+    |           |------>|           |------>|           |------>|                  |---------->|              |\n+    | WebClient |       | #1        |       | #2        |       | Armeria          |           |    Server    |\n+    |           |  res  | decorator |  res  | decorator |  res  | Networking Layer |    res    |              |\n+    |           |<------|           |<------|           |<------|                  |<----------|              |\n+    +-----------+       +-----------+       +-----------+       +------------------+           +--------------+\n+    @endditaa\n+\n+If the client is a Thrift client and RPC decorators are inserted, HTTP decorators and RPC decorators are\n+separately grouped and executed in reverse order of the insertion:\n+\n+.. code-block:: java\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 HTTP decorator.\n+    cb.decorator((delegate, ctx, httpReq) -> {\n+        System.err.println(\"Fourthly, executed.\");\n+        ...\n+    });\n+\n+    // #2 RPC decorator.\n+    cb.rpcDecorator((delegate, ctx, rpcReq) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 HTTP decorator.\n+    cb.decorator((delegate, ctx, httpReq) -> {\n+        System.err.println(\"Thirdly, executed.\");\n+        ...\n+    });\n+\n+    // #1 RPC decorator.\n+    cb.rpcDecorator((delegate, ctx, rpcReq) -> {\n+        System.err.println(\"Firstly, executed.\");\n+        ...\n+    });\n+\n+An RPC request is converted into an HTTP request before it's sent to a server.\n+So RPC decorators are inserted before the RPC request is converted and HTTP decorators are inserted after the\n+request is converted into the HTTP request. The following diagram describes it:\n+\n+.. uml::\n+\n+    @startditaa\n+    +--------+ req +-----------+ req +-----------+                     +-----------+ req +-----------+\n+    |        |---->|           |---->|           |---> RPC to HTTP --->|           |---->|           |----=->\n+    | Thrift |     | #1 RPC    |     | #2 RPC    |                     | #1 HTTP   |     | #2 HTTP   |\n+    | Client | res | decorator | res | decorator |                     | decorator | res | decorator |\n+    |        |<----|           |<----|           |<--- HTTP to RPC <---|           |<----|           |<-=----\n+    +--------+     +-----------+     +-----------+                     +-----------+     +-----------+\n+    @endditaa\n+\n+If the decorator modifies the response (e.g. :api:`DecodingClient`) or spawns more requests\n+(e.g. :api:`RetryingClient`), the consequence is different depending on the order of the decorators.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2246b76fa87c307c66c04d8e6b0096a4a1824dc1"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxOTMzMw==", "bodyText": "Fixed.", "url": "https://github.com/line/armeria/pull/2568#discussion_r390319333", "createdAt": "2020-03-10T13:40:42Z", "author": {"login": "minwoox"}, "path": "site/src/sphinx/client-decorator.rst", "diffHunk": "@@ -67,6 +67,113 @@ If your decorator is expected to be reusable, it is recommended to define a new\n     // Using a lambda expression:\n     cb.decorator(delegate -> new AuditClient(delegate));\n \n+The order of decoration\n+-----------------------\n+\n+The decorators are executed in reverse order of the insertion. The following example shows which order\n+the decorators are executed by printing the messages.\n+\n+.. code-block:: java\n+\n+    import com.linecorp.armeria.client.WebClient;\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 decorator\n+    cb.decorator((delegate, ctx, req) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 decorator.\n+    // No matter decorator() or option() is used, decorators are executed in reverse order of the insertion.\n+    cb.option(ClientOption.DECORATION, ClientDecoration.of((delegate, ctx, req) -> {\n+        System.err.println(\"Firstly, executed\");\n+        ...\n+    });\n+\n+    WebClient myClient = cb.build(WebClient.class);\n+\n+The following diagram describes how an HTTP request and HTTP response are gone through decorators:\n+\n+.. uml::\n+\n+    @startditaa\n+    +-----------+  req  +-----------+  req  +-----------+  req  +------------------+    req    +--------------+\n+    |           |------>|           |------>|           |------>|                  |---------->|              |\n+    | WebClient |       | #1        |       | #2        |       | Armeria          |           |    Server    |\n+    |           |  res  | decorator |  res  | decorator |  res  | Networking Layer |    res    |              |\n+    |           |<------|           |<------|           |<------|                  |<----------|              |\n+    +-----------+       +-----------+       +-----------+       +------------------+           +--------------+\n+    @endditaa\n+\n+If the client is a Thrift client and RPC decorators are inserted, HTTP decorators and RPC decorators are\n+separately grouped and executed in reverse order of the insertion:\n+\n+.. code-block:: java\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 HTTP decorator.\n+    cb.decorator((delegate, ctx, httpReq) -> {\n+        System.err.println(\"Fourthly, executed.\");\n+        ...\n+    });\n+\n+    // #2 RPC decorator.\n+    cb.rpcDecorator((delegate, ctx, rpcReq) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 HTTP decorator.\n+    cb.decorator((delegate, ctx, httpReq) -> {\n+        System.err.println(\"Thirdly, executed.\");\n+        ...\n+    });\n+\n+    // #1 RPC decorator.\n+    cb.rpcDecorator((delegate, ctx, rpcReq) -> {\n+        System.err.println(\"Firstly, executed.\");\n+        ...\n+    });\n+\n+An RPC request is converted into an HTTP request before it's sent to a server.\n+So RPC decorators are inserted before the RPC request is converted and HTTP decorators are inserted after the\n+request is converted into the HTTP request. The following diagram describes it:\n+\n+.. uml::\n+\n+    @startditaa\n+    +--------+ req +-----------+ req +-----------+                     +-----------+ req +-----------+\n+    |        |---->|           |---->|           |---> RPC to HTTP --->|           |---->|           |----=->\n+    | Thrift |     | #1 RPC    |     | #2 RPC    |                     | #1 HTTP   |     | #2 HTTP   |\n+    | Client | res | decorator | res | decorator |                     | decorator | res | decorator |\n+    |        |<----|           |<----|           |<--- HTTP to RPC <---|           |<----|           |<-=----\n+    +--------+     +-----------+     +-----------+                     +-----------+     +-----------+\n+    @endditaa\n+\n+If the decorator modifies the response (e.g. :api:`DecodingClient`) or spawns more requests\n+(e.g. :api:`RetryingClient`), the consequence is different depending on the order of the decorators.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxMDM4OA=="}, "originalCommit": {"oid": "2246b76fa87c307c66c04d8e6b0096a4a1824dc1"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODgzMzQ5OnYy", "diffSide": "RIGHT", "path": "site/src/sphinx/client-decorator.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzoyOToxN1rOF0OvlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzo0MTowOVrOF0POMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxMTgyOA==", "bodyText": "How about adding the opposite case?\nIf the two decorators are added in the opposite order, you will get the decoded preview because :api:`DecodingClient` is evaluated first.", "url": "https://github.com/line/armeria/pull/2568#discussion_r390311828", "createdAt": "2020-03-10T13:29:17Z", "author": {"login": "trustin"}, "path": "site/src/sphinx/client-decorator.rst", "diffHunk": "@@ -67,6 +67,113 @@ If your decorator is expected to be reusable, it is recommended to define a new\n     // Using a lambda expression:\n     cb.decorator(delegate -> new AuditClient(delegate));\n \n+The order of decoration\n+-----------------------\n+\n+The decorators are executed in reverse order of the insertion. The following example shows which order\n+the decorators are executed by printing the messages.\n+\n+.. code-block:: java\n+\n+    import com.linecorp.armeria.client.WebClient;\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 decorator\n+    cb.decorator((delegate, ctx, req) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 decorator.\n+    // No matter decorator() or option() is used, decorators are executed in reverse order of the insertion.\n+    cb.option(ClientOption.DECORATION, ClientDecoration.of((delegate, ctx, req) -> {\n+        System.err.println(\"Firstly, executed\");\n+        ...\n+    });\n+\n+    WebClient myClient = cb.build(WebClient.class);\n+\n+The following diagram describes how an HTTP request and HTTP response are gone through decorators:\n+\n+.. uml::\n+\n+    @startditaa\n+    +-----------+  req  +-----------+  req  +-----------+  req  +------------------+    req    +--------------+\n+    |           |------>|           |------>|           |------>|                  |---------->|              |\n+    | WebClient |       | #1        |       | #2        |       | Armeria          |           |    Server    |\n+    |           |  res  | decorator |  res  | decorator |  res  | Networking Layer |    res    |              |\n+    |           |<------|           |<------|           |<------|                  |<----------|              |\n+    +-----------+       +-----------+       +-----------+       +------------------+           +--------------+\n+    @endditaa\n+\n+If the client is a Thrift client and RPC decorators are inserted, HTTP decorators and RPC decorators are\n+separately grouped and executed in reverse order of the insertion:\n+\n+.. code-block:: java\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 HTTP decorator.\n+    cb.decorator((delegate, ctx, httpReq) -> {\n+        System.err.println(\"Fourthly, executed.\");\n+        ...\n+    });\n+\n+    // #2 RPC decorator.\n+    cb.rpcDecorator((delegate, ctx, rpcReq) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 HTTP decorator.\n+    cb.decorator((delegate, ctx, httpReq) -> {\n+        System.err.println(\"Thirdly, executed.\");\n+        ...\n+    });\n+\n+    // #1 RPC decorator.\n+    cb.rpcDecorator((delegate, ctx, rpcReq) -> {\n+        System.err.println(\"Firstly, executed.\");\n+        ...\n+    });\n+\n+An RPC request is converted into an HTTP request before it's sent to a server.\n+So RPC decorators are inserted before the RPC request is converted and HTTP decorators are inserted after the\n+request is converted into the HTTP request. The following diagram describes it:\n+\n+.. uml::\n+\n+    @startditaa\n+    +--------+ req +-----------+ req +-----------+                     +-----------+ req +-----------+\n+    |        |---->|           |---->|           |---> RPC to HTTP --->|           |---->|           |----=->\n+    | Thrift |     | #1 RPC    |     | #2 RPC    |                     | #1 HTTP   |     | #2 HTTP   |\n+    | Client | res | decorator | res | decorator |                     | decorator | res | decorator |\n+    |        |<----|           |<----|           |<--- HTTP to RPC <---|           |<----|           |<-=----\n+    +--------+     +-----------+     +-----------+                     +-----------+     +-----------+\n+    @endditaa\n+\n+If the decorator modifies the response (e.g. :api:`DecodingClient`) or spawns more requests\n+(e.g. :api:`RetryingClient`), the consequence is different depending on the order of the decorators.\n+Let's look at the following example that :api:`DecodingClient` and :api:`ContentPreviewingClient`\n+are used together:\n+\n+.. code-block:: java\n+\n+    import com.linecorp.armeria.client.encoding.DecodingClient;\n+    import com.linecorp.armeria.client.logging.ContentPreviewingClient;\n+\n+    ClientBuilder cb = Clients.builder(...);\n+    cb.decorator(ContentPreviewingClient.newDecorator(1000));\n+    // ContentPreviewingClient should be inserted after DecodingClient.\n+    cb.decorator(DecodingClient.newDecorator());\n+\n+:api:`DecodingClient` decodes the content of HTTP responses.\n+:api:`ContentPreviewingClient` is :ref:`content-previewing` of the HTTP response by setting it to the\n+:api:`RequestLog`. Because it's inserted after :api:`DecodingClient`, which means that the response content\n+is set before it's decoded, you will see the encoded response content preview.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2246b76fa87c307c66c04d8e6b0096a4a1824dc1"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxOTY2Ng==", "bodyText": "Fixed. I rephrased a little bit because I changed the order of decoration. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2568#discussion_r390319666", "createdAt": "2020-03-10T13:41:09Z", "author": {"login": "minwoox"}, "path": "site/src/sphinx/client-decorator.rst", "diffHunk": "@@ -67,6 +67,113 @@ If your decorator is expected to be reusable, it is recommended to define a new\n     // Using a lambda expression:\n     cb.decorator(delegate -> new AuditClient(delegate));\n \n+The order of decoration\n+-----------------------\n+\n+The decorators are executed in reverse order of the insertion. The following example shows which order\n+the decorators are executed by printing the messages.\n+\n+.. code-block:: java\n+\n+    import com.linecorp.armeria.client.WebClient;\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 decorator\n+    cb.decorator((delegate, ctx, req) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 decorator.\n+    // No matter decorator() or option() is used, decorators are executed in reverse order of the insertion.\n+    cb.option(ClientOption.DECORATION, ClientDecoration.of((delegate, ctx, req) -> {\n+        System.err.println(\"Firstly, executed\");\n+        ...\n+    });\n+\n+    WebClient myClient = cb.build(WebClient.class);\n+\n+The following diagram describes how an HTTP request and HTTP response are gone through decorators:\n+\n+.. uml::\n+\n+    @startditaa\n+    +-----------+  req  +-----------+  req  +-----------+  req  +------------------+    req    +--------------+\n+    |           |------>|           |------>|           |------>|                  |---------->|              |\n+    | WebClient |       | #1        |       | #2        |       | Armeria          |           |    Server    |\n+    |           |  res  | decorator |  res  | decorator |  res  | Networking Layer |    res    |              |\n+    |           |<------|           |<------|           |<------|                  |<----------|              |\n+    +-----------+       +-----------+       +-----------+       +------------------+           +--------------+\n+    @endditaa\n+\n+If the client is a Thrift client and RPC decorators are inserted, HTTP decorators and RPC decorators are\n+separately grouped and executed in reverse order of the insertion:\n+\n+.. code-block:: java\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 HTTP decorator.\n+    cb.decorator((delegate, ctx, httpReq) -> {\n+        System.err.println(\"Fourthly, executed.\");\n+        ...\n+    });\n+\n+    // #2 RPC decorator.\n+    cb.rpcDecorator((delegate, ctx, rpcReq) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 HTTP decorator.\n+    cb.decorator((delegate, ctx, httpReq) -> {\n+        System.err.println(\"Thirdly, executed.\");\n+        ...\n+    });\n+\n+    // #1 RPC decorator.\n+    cb.rpcDecorator((delegate, ctx, rpcReq) -> {\n+        System.err.println(\"Firstly, executed.\");\n+        ...\n+    });\n+\n+An RPC request is converted into an HTTP request before it's sent to a server.\n+So RPC decorators are inserted before the RPC request is converted and HTTP decorators are inserted after the\n+request is converted into the HTTP request. The following diagram describes it:\n+\n+.. uml::\n+\n+    @startditaa\n+    +--------+ req +-----------+ req +-----------+                     +-----------+ req +-----------+\n+    |        |---->|           |---->|           |---> RPC to HTTP --->|           |---->|           |----=->\n+    | Thrift |     | #1 RPC    |     | #2 RPC    |                     | #1 HTTP   |     | #2 HTTP   |\n+    | Client | res | decorator | res | decorator |                     | decorator | res | decorator |\n+    |        |<----|           |<----|           |<--- HTTP to RPC <---|           |<----|           |<-=----\n+    +--------+     +-----------+     +-----------+                     +-----------+     +-----------+\n+    @endditaa\n+\n+If the decorator modifies the response (e.g. :api:`DecodingClient`) or spawns more requests\n+(e.g. :api:`RetryingClient`), the consequence is different depending on the order of the decorators.\n+Let's look at the following example that :api:`DecodingClient` and :api:`ContentPreviewingClient`\n+are used together:\n+\n+.. code-block:: java\n+\n+    import com.linecorp.armeria.client.encoding.DecodingClient;\n+    import com.linecorp.armeria.client.logging.ContentPreviewingClient;\n+\n+    ClientBuilder cb = Clients.builder(...);\n+    cb.decorator(ContentPreviewingClient.newDecorator(1000));\n+    // ContentPreviewingClient should be inserted after DecodingClient.\n+    cb.decorator(DecodingClient.newDecorator());\n+\n+:api:`DecodingClient` decodes the content of HTTP responses.\n+:api:`ContentPreviewingClient` is :ref:`content-previewing` of the HTTP response by setting it to the\n+:api:`RequestLog`. Because it's inserted after :api:`DecodingClient`, which means that the response content\n+is set before it's decoded, you will see the encoded response content preview.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxMTgyOA=="}, "originalCommit": {"oid": "2246b76fa87c307c66c04d8e6b0096a4a1824dc1"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTM2NTQ4OnYy", "diffSide": "RIGHT", "path": "site/src/sphinx/client-decorator.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNToyMTo0OFrOF0T4qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMTo0MDoyOFrOF0mmBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5NjA3Mg==", "bodyText": "I haven't really used RPC decorators before since don't use thrift. I'm surprised by this behavior, and understand it but it's not very intuitive to have implicit grouping.\nWould it be worth changing the API a little to make the grouping explicit?\ncb.decorators().add()...\n\ncb.rpcDecorators().add()...", "url": "https://github.com/line/armeria/pull/2568#discussion_r390396072", "createdAt": "2020-03-10T15:21:48Z", "author": {"login": "anuraaga"}, "path": "site/src/sphinx/client-decorator.rst", "diffHunk": "@@ -67,6 +67,116 @@ If your decorator is expected to be reusable, it is recommended to define a new\n     // Using a lambda expression:\n     cb.decorator(delegate -> new AuditClient(delegate));\n \n+The order of decoration\n+-----------------------\n+\n+The decorators are executed in reverse order of the insertion. The following example shows which order\n+the decorators are executed by printing the messages.\n+\n+.. code-block:: java\n+\n+    import com.linecorp.armeria.client.WebClient;\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 decorator\n+    cb.decorator((delegate, ctx, req) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 decorator.\n+    // No matter decorator() or option() is used, decorators are executed in reverse order of the insertion.\n+    cb.option(ClientOption.DECORATION, ClientDecoration.of((delegate, ctx, req) -> {\n+        System.err.println(\"Firstly, executed\");\n+        ...\n+    });\n+\n+    WebClient myClient = cb.build(WebClient.class);\n+\n+The following diagram describes how an HTTP request and HTTP response are gone through decorators:\n+\n+.. uml::\n+\n+    @startditaa\n+    +-----------+  req  +-----------+  req  +-----------+  req  +------------------+    req    +--------------+\n+    |           |------>|           |------>|           |------>|                  |---------->|              |\n+    | WebClient |       | #1        |       | #2        |       | Armeria          |           |    Server    |\n+    |           |  res  | decorator |  res  | decorator |  res  | Networking Layer |    res    |              |\n+    |           |<------|           |<------|           |<------|                  |<----------|              |\n+    +-----------+       +-----------+       +-----------+       +------------------+           +--------------+\n+    @endditaa\n+\n+If the client is a Thrift client and RPC decorators are inserted, HTTP decorators and RPC decorators are", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d5a3c26bce6b6394f78d4c399eafc852b4adbc"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcwMjU5OQ==", "bodyText": "That's a good suggestion.\nThe example code that I picked up was really ugly and I think there's a still chance that a user does it in the same way:\ncb.decorators().add(d1);\ncb.rpcDecorators().add(d2);\ncb.decorators().add(d3);\nAnd mostly, a user would have separate methods to set decorators if it gets complicated, so I'm not sure it's worth changing. \ud83e\udd14 (But it looks good to me.)", "url": "https://github.com/line/armeria/pull/2568#discussion_r390702599", "createdAt": "2020-03-11T01:40:28Z", "author": {"login": "minwoox"}, "path": "site/src/sphinx/client-decorator.rst", "diffHunk": "@@ -67,6 +67,116 @@ If your decorator is expected to be reusable, it is recommended to define a new\n     // Using a lambda expression:\n     cb.decorator(delegate -> new AuditClient(delegate));\n \n+The order of decoration\n+-----------------------\n+\n+The decorators are executed in reverse order of the insertion. The following example shows which order\n+the decorators are executed by printing the messages.\n+\n+.. code-block:: java\n+\n+    import com.linecorp.armeria.client.WebClient;\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 decorator\n+    cb.decorator((delegate, ctx, req) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 decorator.\n+    // No matter decorator() or option() is used, decorators are executed in reverse order of the insertion.\n+    cb.option(ClientOption.DECORATION, ClientDecoration.of((delegate, ctx, req) -> {\n+        System.err.println(\"Firstly, executed\");\n+        ...\n+    });\n+\n+    WebClient myClient = cb.build(WebClient.class);\n+\n+The following diagram describes how an HTTP request and HTTP response are gone through decorators:\n+\n+.. uml::\n+\n+    @startditaa\n+    +-----------+  req  +-----------+  req  +-----------+  req  +------------------+    req    +--------------+\n+    |           |------>|           |------>|           |------>|                  |---------->|              |\n+    | WebClient |       | #1        |       | #2        |       | Armeria          |           |    Server    |\n+    |           |  res  | decorator |  res  | decorator |  res  | Networking Layer |    res    |              |\n+    |           |<------|           |<------|           |<------|                  |<----------|              |\n+    +-----------+       +-----------+       +-----------+       +------------------+           +--------------+\n+    @endditaa\n+\n+If the client is a Thrift client and RPC decorators are inserted, HTTP decorators and RPC decorators are", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5NjA3Mg=="}, "originalCommit": {"oid": "31d5a3c26bce6b6394f78d4c399eafc852b4adbc"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTM5MTQzOnYy", "diffSide": "RIGHT", "path": "site/src/sphinx/client-decorator.rst", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMjo0Njo0NVrOF0njyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzoyNTo0OVrOF0oF4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxODQwOA==", "bodyText": "I found ClientDecoration.of(...) does not accept DecoratingHttpClientFunction.\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/client/ClientDecoration.java\n    \n    \n         Line 43\n      in\n      6f21290\n    \n    \n    \n    \n\n        \n          \n           public static ClientDecoration of(Function<? super HttpClient, ? extends HttpClient> decorator) {", "url": "https://github.com/line/armeria/pull/2568#discussion_r390718408", "createdAt": "2020-03-11T02:46:45Z", "author": {"login": "ikhoon"}, "path": "site/src/sphinx/client-decorator.rst", "diffHunk": "@@ -67,6 +67,116 @@ If your decorator is expected to be reusable, it is recommended to define a new\n     // Using a lambda expression:\n     cb.decorator(delegate -> new AuditClient(delegate));\n \n+The order of decoration\n+-----------------------\n+\n+The decorators are executed in reverse order of the insertion. The following example shows which order\n+the decorators are executed by printing the messages.\n+\n+.. code-block:: java\n+\n+    import com.linecorp.armeria.client.WebClient;\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 decorator\n+    cb.decorator((delegate, ctx, req) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 decorator.\n+    // No matter decorator() or option() is used, decorators are executed in reverse order of the insertion.\n+    cb.option(ClientOption.DECORATION, ClientDecoration.of((delegate, ctx, req) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4815713e5dfac14e467552636f77f7fcda22bd1c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxOTczNQ==", "bodyText": "And how about making the method body complete for the detail example?\n// #2 decorator\ncb.decorator((delegate, ctx, req) -> {\n    System.err.println(\"Secondly, executed.\");\n    final HttpResponse res = delegate.execute(ctx, req);\n    System.err.println(\"Thirdly, executed.\");\n    return res;\n});\n\n// #2 decorator\ncb.option(ClientOption.DECORATION, ClientDecoration.of(delegate -> (ctx, req) -> {\n    System.err.println(\"Firstly, executed\");\n    final HttpResponse res = delegate.execute(ctx, req);\n    System.err.println(\"Fourthly, executed.\");\n    return res;\n}));", "url": "https://github.com/line/armeria/pull/2568#discussion_r390719735", "createdAt": "2020-03-11T02:52:40Z", "author": {"login": "ikhoon"}, "path": "site/src/sphinx/client-decorator.rst", "diffHunk": "@@ -67,6 +67,116 @@ If your decorator is expected to be reusable, it is recommended to define a new\n     // Using a lambda expression:\n     cb.decorator(delegate -> new AuditClient(delegate));\n \n+The order of decoration\n+-----------------------\n+\n+The decorators are executed in reverse order of the insertion. The following example shows which order\n+the decorators are executed by printing the messages.\n+\n+.. code-block:: java\n+\n+    import com.linecorp.armeria.client.WebClient;\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 decorator\n+    cb.decorator((delegate, ctx, req) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 decorator.\n+    // No matter decorator() or option() is used, decorators are executed in reverse order of the insertion.\n+    cb.option(ClientOption.DECORATION, ClientDecoration.of((delegate, ctx, req) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxODQwOA=="}, "originalCommit": {"oid": "4815713e5dfac14e467552636f77f7fcda22bd1c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNTIxNQ==", "bodyText": "I found ClientDecoration.of(...) does not accept DecoratingHttpClientFunction.\n\nOops, you've already added it to this PR \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2568#discussion_r390725215", "createdAt": "2020-03-11T03:17:11Z", "author": {"login": "ikhoon"}, "path": "site/src/sphinx/client-decorator.rst", "diffHunk": "@@ -67,6 +67,116 @@ If your decorator is expected to be reusable, it is recommended to define a new\n     // Using a lambda expression:\n     cb.decorator(delegate -> new AuditClient(delegate));\n \n+The order of decoration\n+-----------------------\n+\n+The decorators are executed in reverse order of the insertion. The following example shows which order\n+the decorators are executed by printing the messages.\n+\n+.. code-block:: java\n+\n+    import com.linecorp.armeria.client.WebClient;\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 decorator\n+    cb.decorator((delegate, ctx, req) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 decorator.\n+    // No matter decorator() or option() is used, decorators are executed in reverse order of the insertion.\n+    cb.option(ClientOption.DECORATION, ClientDecoration.of((delegate, ctx, req) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxODQwOA=="}, "originalCommit": {"oid": "4815713e5dfac14e467552636f77f7fcda22bd1c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNzEzOQ==", "bodyText": "Had chat with @minwoox, we are going to focus on the exeution orders.\nIf any questions or requests on this feature, we will improve our documentation. :-)", "url": "https://github.com/line/armeria/pull/2568#discussion_r390727139", "createdAt": "2020-03-11T03:25:49Z", "author": {"login": "ikhoon"}, "path": "site/src/sphinx/client-decorator.rst", "diffHunk": "@@ -67,6 +67,116 @@ If your decorator is expected to be reusable, it is recommended to define a new\n     // Using a lambda expression:\n     cb.decorator(delegate -> new AuditClient(delegate));\n \n+The order of decoration\n+-----------------------\n+\n+The decorators are executed in reverse order of the insertion. The following example shows which order\n+the decorators are executed by printing the messages.\n+\n+.. code-block:: java\n+\n+    import com.linecorp.armeria.client.WebClient;\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 decorator\n+    cb.decorator((delegate, ctx, req) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 decorator.\n+    // No matter decorator() or option() is used, decorators are executed in reverse order of the insertion.\n+    cb.option(ClientOption.DECORATION, ClientDecoration.of((delegate, ctx, req) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxODQwOA=="}, "originalCommit": {"oid": "4815713e5dfac14e467552636f77f7fcda22bd1c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTQ1NjcyOnYy", "diffSide": "RIGHT", "path": "site/src/sphinx/client-decorator.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzozMjo0N1rOF0oLdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMzozODo1MlrOF0oQhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyODU2NA==", "bodyText": "How about using apply instead of insert\nFor example:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Therefore, RPC decorators are inserted before the RPC request is converted and HTTP decorators are inserted\n          \n          \n            \n            Therefore, RPC decorators are applied before the RPC request is converted and HTTP decorators are applied", "url": "https://github.com/line/armeria/pull/2568#discussion_r390728564", "createdAt": "2020-03-11T03:32:47Z", "author": {"login": "ikhoon"}, "path": "site/src/sphinx/client-decorator.rst", "diffHunk": "@@ -67,6 +67,116 @@ If your decorator is expected to be reusable, it is recommended to define a new\n     // Using a lambda expression:\n     cb.decorator(delegate -> new AuditClient(delegate));\n \n+The order of decoration\n+-----------------------\n+\n+The decorators are executed in reverse order of the insertion. The following example shows which order\n+the decorators are executed by printing the messages.\n+\n+.. code-block:: java\n+\n+    import com.linecorp.armeria.client.WebClient;\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 decorator\n+    cb.decorator((delegate, ctx, req) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 decorator.\n+    // No matter decorator() or option() is used, decorators are executed in reverse order of the insertion.\n+    cb.option(ClientOption.DECORATION, ClientDecoration.of((delegate, ctx, req) -> {\n+        System.err.println(\"Firstly, executed\");\n+        ...\n+    });\n+\n+    WebClient myClient = cb.build(WebClient.class);\n+\n+The following diagram describes how an HTTP request and HTTP response are gone through decorators:\n+\n+.. uml::\n+\n+    @startditaa\n+    +-----------+  req  +-----------+  req  +-----------+  req  +------------------+    req    +--------------+\n+    |           |------>|           |------>|           |------>|                  |---------->|              |\n+    | WebClient |       | #1        |       | #2        |       | Armeria          |           |    Server    |\n+    |           |  res  | decorator |  res  | decorator |  res  | Networking Layer |    res    |              |\n+    |           |<------|           |<------|           |<------|                  |<----------|              |\n+    +-----------+       +-----------+       +-----------+       +------------------+           +--------------+\n+    @endditaa\n+\n+If the client is a Thrift client and RPC decorators are inserted, HTTP decorators and RPC decorators are\n+separately grouped and executed in reverse order of the insertion:\n+\n+.. code-block:: java\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 HTTP decorator.\n+    cb.decorator((delegate, ctx, httpReq) -> {\n+        System.err.println(\"Fourthly, executed.\");\n+        ...\n+    });\n+\n+    // #2 RPC decorator.\n+    cb.rpcDecorator((delegate, ctx, rpcReq) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 HTTP decorator.\n+    cb.decorator((delegate, ctx, httpReq) -> {\n+        System.err.println(\"Thirdly, executed.\");\n+        ...\n+    });\n+\n+    // #1 RPC decorator.\n+    cb.rpcDecorator((delegate, ctx, rpcReq) -> {\n+        System.err.println(\"Firstly, executed.\");\n+        ...\n+    });\n+\n+An RPC request is converted into an HTTP request before it's sent to a server.\n+Therefore, RPC decorators are inserted before the RPC request is converted and HTTP decorators are inserted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4815713e5dfac14e467552636f77f7fcda22bd1c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyOTg2Mg==", "bodyText": "That's a good suggestion. Fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2568#discussion_r390729862", "createdAt": "2020-03-11T03:38:52Z", "author": {"login": "minwoox"}, "path": "site/src/sphinx/client-decorator.rst", "diffHunk": "@@ -67,6 +67,116 @@ If your decorator is expected to be reusable, it is recommended to define a new\n     // Using a lambda expression:\n     cb.decorator(delegate -> new AuditClient(delegate));\n \n+The order of decoration\n+-----------------------\n+\n+The decorators are executed in reverse order of the insertion. The following example shows which order\n+the decorators are executed by printing the messages.\n+\n+.. code-block:: java\n+\n+    import com.linecorp.armeria.client.WebClient;\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 decorator\n+    cb.decorator((delegate, ctx, req) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 decorator.\n+    // No matter decorator() or option() is used, decorators are executed in reverse order of the insertion.\n+    cb.option(ClientOption.DECORATION, ClientDecoration.of((delegate, ctx, req) -> {\n+        System.err.println(\"Firstly, executed\");\n+        ...\n+    });\n+\n+    WebClient myClient = cb.build(WebClient.class);\n+\n+The following diagram describes how an HTTP request and HTTP response are gone through decorators:\n+\n+.. uml::\n+\n+    @startditaa\n+    +-----------+  req  +-----------+  req  +-----------+  req  +------------------+    req    +--------------+\n+    |           |------>|           |------>|           |------>|                  |---------->|              |\n+    | WebClient |       | #1        |       | #2        |       | Armeria          |           |    Server    |\n+    |           |  res  | decorator |  res  | decorator |  res  | Networking Layer |    res    |              |\n+    |           |<------|           |<------|           |<------|                  |<----------|              |\n+    +-----------+       +-----------+       +-----------+       +------------------+           +--------------+\n+    @endditaa\n+\n+If the client is a Thrift client and RPC decorators are inserted, HTTP decorators and RPC decorators are\n+separately grouped and executed in reverse order of the insertion:\n+\n+.. code-block:: java\n+\n+    ClientBuilder cb = Clients.builder(...);\n+\n+    // #2 HTTP decorator.\n+    cb.decorator((delegate, ctx, httpReq) -> {\n+        System.err.println(\"Fourthly, executed.\");\n+        ...\n+    });\n+\n+    // #2 RPC decorator.\n+    cb.rpcDecorator((delegate, ctx, rpcReq) -> {\n+        System.err.println(\"Secondly, executed.\");\n+        ...\n+    });\n+\n+    // #1 HTTP decorator.\n+    cb.decorator((delegate, ctx, httpReq) -> {\n+        System.err.println(\"Thirdly, executed.\");\n+        ...\n+    });\n+\n+    // #1 RPC decorator.\n+    cb.rpcDecorator((delegate, ctx, rpcReq) -> {\n+        System.err.println(\"Firstly, executed.\");\n+        ...\n+    });\n+\n+An RPC request is converted into an HTTP request before it's sent to a server.\n+Therefore, RPC decorators are inserted before the RPC request is converted and HTTP decorators are inserted", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyODU2NA=="}, "originalCommit": {"oid": "4815713e5dfac14e467552636f77f7fcda22bd1c"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2758, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}