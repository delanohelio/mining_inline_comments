{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4NTU3Nzgw", "number": 2780, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwNToyMzo0NVrOEDNccg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDoxMzowM1rOEGSXqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODAxNDU4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwNToyMzo0NVrOGgHPYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzoyNjowNlrOGgR-xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyNjI0Mw==", "bodyText": "Shouldn't this only check name? serviceName shouldn't be required.", "url": "https://github.com/line/armeria/pull/2780#discussion_r436326243", "createdAt": "2020-06-07T05:23:45Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -455,9 +460,10 @@ private void propagateRequestSideLog(RequestLogAccess child) {\n              .thenAccept(log -> serializationFormat(log.scheme().serializationFormat()));\n         child.whenAvailable(RequestLogProperty.NAME)\n              .thenAccept(log -> {\n+                 final String serviceName = log.serviceName();\n                  final String name = log.name();\n-                 if (name != null) {\n-                     name(name);\n+                 if (serviceName != null && name != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0668b77643de5057a2faaa3baf28a181c8481970"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUwMjIxNA==", "bodyText": "Oops... Yes!", "url": "https://github.com/line/armeria/pull/2780#discussion_r436502214", "createdAt": "2020-06-08T07:26:06Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -455,9 +460,10 @@ private void propagateRequestSideLog(RequestLogAccess child) {\n              .thenAccept(log -> serializationFormat(log.scheme().serializationFormat()));\n         child.whenAvailable(RequestLogProperty.NAME)\n              .thenAccept(log -> {\n+                 final String serviceName = log.serviceName();\n                  final String name = log.name();\n-                 if (name != null) {\n-                     name(name);\n+                 if (serviceName != null && name != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyNjI0Mw=="}, "originalCommit": {"oid": "0668b77643de5057a2faaa3baf28a181c8481970"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODAxNzA1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RequestLogBuilder.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwNToyOToxNlrOGgHQmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzo0MToxOVrOGgSZ-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyNjU1NQ==", "bodyText": "I notice serviceName is nullable in some places but not here which I guess is the most important. I think serviceName should not be required since not all requests model to having a service name, or users may not be interested (especially for a client, less so for server).", "url": "https://github.com/line/armeria/pull/2780#discussion_r436326555", "createdAt": "2020-06-07T05:29:16Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RequestLogBuilder.java", "diffHunk": "@@ -100,10 +101,15 @@ void session(@Nullable Channel channel, SessionProtocol sessionProtocol, @Nullab\n     void serializationFormat(SerializationFormat serializationFormat);\n \n     /**\n-     * Sets the human-readable name of the {@link Request}, such as RPC method name, annotated service method\n-     * name or HTTP method name. This property is often used as a meter tag or distributed trace's span name.\n+     * Sets the human-readable service name and method name of the {@link Request} such as:\n+     * <ul>\n+     *    <li>A service and method name for gRPC and Thrift</li>\n+     *    <li>An innermost class and method name for annotated service</li>\n+     *    <li>A path pattern and HTTP method name for {@link HttpService}</li>\n+     * </ul>\n+     * This property is often used as a meter tag or distributed trace's span name.\n      */\n-    void name(String name);\n+    void name(String serviceName, String name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0668b77643de5057a2faaa3baf28a181c8481970"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4MTk4Mw==", "bodyText": "Agreed. Could they be separate properties with different availability flag? If no serviceName() is set, defaultServiceName could be set as a fallback.", "url": "https://github.com/line/armeria/pull/2780#discussion_r436481983", "createdAt": "2020-06-08T06:34:37Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RequestLogBuilder.java", "diffHunk": "@@ -100,10 +101,15 @@ void session(@Nullable Channel channel, SessionProtocol sessionProtocol, @Nullab\n     void serializationFormat(SerializationFormat serializationFormat);\n \n     /**\n-     * Sets the human-readable name of the {@link Request}, such as RPC method name, annotated service method\n-     * name or HTTP method name. This property is often used as a meter tag or distributed trace's span name.\n+     * Sets the human-readable service name and method name of the {@link Request} such as:\n+     * <ul>\n+     *    <li>A service and method name for gRPC and Thrift</li>\n+     *    <li>An innermost class and method name for annotated service</li>\n+     *    <li>A path pattern and HTTP method name for {@link HttpService}</li>\n+     * </ul>\n+     * This property is often used as a meter tag or distributed trace's span name.\n      */\n-    void name(String name);\n+    void name(String serviceName, String name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyNjU1NQ=="}, "originalCommit": {"oid": "0668b77643de5057a2faaa3baf28a181c8481970"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5ODU4Mw==", "bodyText": "That was my considering point. Actually, I tried to avoid putting another tag like RequestLogProperty.SERVICE_NAME.\nI think adding serviceName() is also a good idea.\ud83d\udc4d", "url": "https://github.com/line/armeria/pull/2780#discussion_r436498583", "createdAt": "2020-06-08T07:17:35Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RequestLogBuilder.java", "diffHunk": "@@ -100,10 +101,15 @@ void session(@Nullable Channel channel, SessionProtocol sessionProtocol, @Nullab\n     void serializationFormat(SerializationFormat serializationFormat);\n \n     /**\n-     * Sets the human-readable name of the {@link Request}, such as RPC method name, annotated service method\n-     * name or HTTP method name. This property is often used as a meter tag or distributed trace's span name.\n+     * Sets the human-readable service name and method name of the {@link Request} such as:\n+     * <ul>\n+     *    <li>A service and method name for gRPC and Thrift</li>\n+     *    <li>An innermost class and method name for annotated service</li>\n+     *    <li>A path pattern and HTTP method name for {@link HttpService}</li>\n+     * </ul>\n+     * This property is often used as a meter tag or distributed trace's span name.\n      */\n-    void name(String name);\n+    void name(String serviceName, String name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyNjU1NQ=="}, "originalCommit": {"oid": "0668b77643de5057a2faaa3baf28a181c8481970"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUwOTE3OA==", "bodyText": "Let me revive the original name(String name) and overload name(serviceName, name) for  a nullable serviceName.", "url": "https://github.com/line/armeria/pull/2780#discussion_r436509178", "createdAt": "2020-06-08T07:41:19Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RequestLogBuilder.java", "diffHunk": "@@ -100,10 +101,15 @@ void session(@Nullable Channel channel, SessionProtocol sessionProtocol, @Nullab\n     void serializationFormat(SerializationFormat serializationFormat);\n \n     /**\n-     * Sets the human-readable name of the {@link Request}, such as RPC method name, annotated service method\n-     * name or HTTP method name. This property is often used as a meter tag or distributed trace's span name.\n+     * Sets the human-readable service name and method name of the {@link Request} such as:\n+     * <ul>\n+     *    <li>A service and method name for gRPC and Thrift</li>\n+     *    <li>An innermost class and method name for annotated service</li>\n+     *    <li>A path pattern and HTTP method name for {@link HttpService}</li>\n+     * </ul>\n+     * This property is often used as a meter tag or distributed trace's span name.\n      */\n-    void name(String name);\n+    void name(String serviceName, String name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyNjU1NQ=="}, "originalCommit": {"oid": "0668b77643de5057a2faaa3baf28a181c8481970"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzM4NTYyOnYy", "diffSide": "RIGHT", "path": "benchmarks/src/jmh/java/com/linecorp/armeria/server/RoutersBenchmark.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjowMzoyNlrOGg57IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjowMzoyNlrOGg57IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1NjY0MA==", "bodyText": "Could these two lines be merged for aesthetics?", "url": "https://github.com/line/armeria/pull/2780#discussion_r437156640", "createdAt": "2020-06-09T06:03:26Z", "author": {"login": "trustin"}, "path": "benchmarks/src/jmh/java/com/linecorp/armeria/server/RoutersBenchmark.java", "diffHunk": "@@ -43,13 +43,18 @@\n             RequestHeaders.of(HttpMethod.POST, \"/grpc.package.Service/Method1\");\n \n     static {\n+        final String defaultServiceName = null;\n+        final String defaultLogName = null;\n         SERVICES = ImmutableList.of(\n                 new ServiceConfig(Route.builder().exact(\"/grpc.package.Service/Method1\").build(),\n-                                  SERVICE, null, 0, 0, false, AccessLogWriter.disabled(), false),\n+                                  SERVICE, defaultServiceName, defaultLogName, 0, 0,\n+                                  false, AccessLogWriter.disabled(), false),\n                 new ServiceConfig(Route.builder().exact(\"/grpc.package.Service/Method2\").build(),\n-                                  SERVICE, null, 0, 0, false, AccessLogWriter.disabled(), false)\n+                                  SERVICE, defaultServiceName, defaultLogName, 0, 0,\n+                                  false, AccessLogWriter.disabled(), false)\n         );\n-        FALLBACK_SERVICE = new ServiceConfig(Route.ofCatchAll(), SERVICE, null, 0, 0, false,\n+        FALLBACK_SERVICE = new ServiceConfig(Route.ofCatchAll(), SERVICE, defaultServiceName, defaultLogName, 0,\n+                                             0, false,\n                                              AccessLogWriter.disabled(), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a48e9aa0a5d1b5b82ffe9755b9d2e1d3b96b137"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzM4NzU5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjowNDoyMlrOGg58PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjowNDoyMlrOGg58PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1NjkyNQ==", "bodyText": "if (name != null) {\n    if (serviceName != null) {\n        logBuilder.name(serviceName, name);\n    } else {\n        logBuilder.name(name);\n    }\n}", "url": "https://github.com/line/armeria/pull/2780#discussion_r437156925", "createdAt": "2020-06-09T06:04:22Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "diffHunk": "@@ -304,8 +304,11 @@ protected static ClientRequestContext newDerivedContext(ClientRequestContext ctx\n         // serializationFormat is always not null, so this is fine.\n         logBuilder.serializationFormat(partial.serializationFormat());\n         if (parentLog.isAvailable(RequestLogProperty.NAME)) {\n+            final String serviceName = partial.serviceName();\n             final String name = partial.name();\n-            if (name != null) {\n+            if (serviceName != null && name != null) {\n+                logBuilder.name(serviceName, name);\n+            } else if (name != null) {\n                 logBuilder.name(name);\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a48e9aa0a5d1b5b82ffe9755b9d2e1d3b96b137"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzM5MDIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjowNToyMlrOGg59wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjowNToyMlrOGg59wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1NzMxMw==", "bodyText": "Ditto", "url": "https://github.com/line/armeria/pull/2780#discussion_r437157313", "createdAt": "2020-06-09T06:05:22Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -455,8 +460,11 @@ private void propagateRequestSideLog(RequestLogAccess child) {\n              .thenAccept(log -> serializationFormat(log.scheme().serializationFormat()));\n         child.whenAvailable(RequestLogProperty.NAME)\n              .thenAccept(log -> {\n+                 final String serviceName = log.serviceName();\n                  final String name = log.name();\n-                 if (name != null) {\n+                 if (serviceName != null && name != null) {\n+                     name(serviceName, name);\n+                 } else if (name != null) {\n                      name(name);\n                  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a48e9aa0a5d1b5b82ffe9755b9d2e1d3b96b137"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzM5ODc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjowOToyNFrOGg6DSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjowOToyNFrOGg6DSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1ODczMA==", "bodyText": "Shouldn't this be out of if (name == null) block?\nWe need to distinguish between 'name-only' and 'serviceName-only' cases.", "url": "https://github.com/line/armeria/pull/2780#discussion_r437158730", "createdAt": "2020-06-09T06:09:24Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -918,19 +959,40 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa\n         }\n \n         if (name == null) {\n+            String newServiceName = null;\n             String newName = null;\n-            final RpcRequest rpcReq = ctx.rpcRequest();\n+            RpcRequest rpcReq = ctx.rpcRequest();\n+            if (rpcReq == null && requestContent instanceof RpcRequest) {\n+               rpcReq = (RpcRequest) requestContent;\n+            }\n+\n             if (rpcReq != null) {\n+                newServiceName = rpcReq.serviceType().getName();\n                 newName = rpcReq.method();\n-            } else if (requestContent instanceof RpcRequest) {\n-                newName = ((RpcRequest) requestContent).method();\n-            }\n+            } else if (ctx instanceof ServiceRequestContext) {\n+                final ServiceConfig config = ((ServiceRequestContext) ctx).config();\n+                newServiceName = config.defaultServiceName();\n+                if (newServiceName == null) {\n+                    newServiceName = config.route().meterTag();\n+                }\n \n-            if (newName == null && ctx instanceof ServiceRequestContext) {\n-                newName = ((ServiceRequestContext) ctx).config().defaultLogName();\n+                newName = config.defaultLogName();\n+                if (newName == null) {\n+                    newName = ctx.method().name();\n+                }\n             }\n \n+            serviceName = newServiceName;\n             name = newName;\n+            if (serviceName != null) {\n+                if (name != null) {\n+                    fullName = serviceName + '/' + name;\n+                } else {\n+                    fullName = serviceName;\n+                }\n+            } else {\n+                fullName = name;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a48e9aa0a5d1b5b82ffe9755b9d2e1d3b96b137"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzQwNjYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjoxMjo1NFrOGg6IPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjowNDo1MVrOGhmBTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1OTk5Nw==", "bodyText": "Should we set the fallback serviceName and name for the client side as well? Then we could make the two properties non-null.", "url": "https://github.com/line/armeria/pull/2780#discussion_r437159997", "createdAt": "2020-06-09T06:12:54Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -918,19 +959,40 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa\n         }\n \n         if (name == null) {\n+            String newServiceName = null;\n             String newName = null;\n-            final RpcRequest rpcReq = ctx.rpcRequest();\n+            RpcRequest rpcReq = ctx.rpcRequest();\n+            if (rpcReq == null && requestContent instanceof RpcRequest) {\n+               rpcReq = (RpcRequest) requestContent;\n+            }\n+\n             if (rpcReq != null) {\n+                newServiceName = rpcReq.serviceType().getName();\n                 newName = rpcReq.method();\n-            } else if (requestContent instanceof RpcRequest) {\n-                newName = ((RpcRequest) requestContent).method();\n-            }\n+            } else if (ctx instanceof ServiceRequestContext) {\n+                final ServiceConfig config = ((ServiceRequestContext) ctx).config();\n+                newServiceName = config.defaultServiceName();\n+                if (newServiceName == null) {\n+                    newServiceName = config.route().meterTag();\n+                }\n \n-            if (newName == null && ctx instanceof ServiceRequestContext) {\n-                newName = ((ServiceRequestContext) ctx).config().defaultLogName();\n+                newName = config.defaultLogName();\n+                if (newName == null) {\n+                    newName = ctx.method().name();\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a48e9aa0a5d1b5b82ffe9755b9d2e1d3b96b137"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2NDM4MA==", "bodyText": "Should we set the fallback serviceName and name for the client side as well?\n\nYes. That was one of the considering points. Let me apply the names to client-side.", "url": "https://github.com/line/armeria/pull/2780#discussion_r437164380", "createdAt": "2020-06-09T06:24:56Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -918,19 +959,40 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa\n         }\n \n         if (name == null) {\n+            String newServiceName = null;\n             String newName = null;\n-            final RpcRequest rpcReq = ctx.rpcRequest();\n+            RpcRequest rpcReq = ctx.rpcRequest();\n+            if (rpcReq == null && requestContent instanceof RpcRequest) {\n+               rpcReq = (RpcRequest) requestContent;\n+            }\n+\n             if (rpcReq != null) {\n+                newServiceName = rpcReq.serviceType().getName();\n                 newName = rpcReq.method();\n-            } else if (requestContent instanceof RpcRequest) {\n-                newName = ((RpcRequest) requestContent).method();\n-            }\n+            } else if (ctx instanceof ServiceRequestContext) {\n+                final ServiceConfig config = ((ServiceRequestContext) ctx).config();\n+                newServiceName = config.defaultServiceName();\n+                if (newServiceName == null) {\n+                    newServiceName = config.route().meterTag();\n+                }\n \n-            if (newName == null && ctx instanceof ServiceRequestContext) {\n-                newName = ((ServiceRequestContext) ctx).config().defaultLogName();\n+                newName = config.defaultLogName();\n+                if (newName == null) {\n+                    newName = ctx.method().name();\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1OTk5Nw=="}, "originalCommit": {"oid": "2a48e9aa0a5d1b5b82ffe9755b9d2e1d3b96b137"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3NTM1Ng==", "bodyText": "On second thought, there is inconsistency in serviceName:\n\nThe server-side requests use a path pattern for fallback serviceName. (eg. /users/:id)\nThe client-side could not get a path pattern except for Retrofit. Is it good to use a path as a fallback serviceName? (eg. /users/123) \ud83e\uddd0", "url": "https://github.com/line/armeria/pull/2780#discussion_r437175356", "createdAt": "2020-06-09T06:51:57Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -918,19 +959,40 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa\n         }\n \n         if (name == null) {\n+            String newServiceName = null;\n             String newName = null;\n-            final RpcRequest rpcReq = ctx.rpcRequest();\n+            RpcRequest rpcReq = ctx.rpcRequest();\n+            if (rpcReq == null && requestContent instanceof RpcRequest) {\n+               rpcReq = (RpcRequest) requestContent;\n+            }\n+\n             if (rpcReq != null) {\n+                newServiceName = rpcReq.serviceType().getName();\n                 newName = rpcReq.method();\n-            } else if (requestContent instanceof RpcRequest) {\n-                newName = ((RpcRequest) requestContent).method();\n-            }\n+            } else if (ctx instanceof ServiceRequestContext) {\n+                final ServiceConfig config = ((ServiceRequestContext) ctx).config();\n+                newServiceName = config.defaultServiceName();\n+                if (newServiceName == null) {\n+                    newServiceName = config.route().meterTag();\n+                }\n \n-            if (newName == null && ctx instanceof ServiceRequestContext) {\n-                newName = ((ServiceRequestContext) ctx).config().defaultLogName();\n+                newName = config.defaultLogName();\n+                if (newName == null) {\n+                    newName = ctx.method().name();\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1OTk5Nw=="}, "originalCommit": {"oid": "2a48e9aa0a5d1b5b82ffe9755b9d2e1d3b96b137"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE5ODM0Mw==", "bodyText": "How about this:\n\nAdd Service.unwrap() that always unwraps at least once, so that we can get the innermost service instance,\nand then use its class name as the fallback service name\nFor the client-side, how about falling back to authority? \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2780#discussion_r437198343", "createdAt": "2020-06-09T07:37:58Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -918,19 +959,40 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa\n         }\n \n         if (name == null) {\n+            String newServiceName = null;\n             String newName = null;\n-            final RpcRequest rpcReq = ctx.rpcRequest();\n+            RpcRequest rpcReq = ctx.rpcRequest();\n+            if (rpcReq == null && requestContent instanceof RpcRequest) {\n+               rpcReq = (RpcRequest) requestContent;\n+            }\n+\n             if (rpcReq != null) {\n+                newServiceName = rpcReq.serviceType().getName();\n                 newName = rpcReq.method();\n-            } else if (requestContent instanceof RpcRequest) {\n-                newName = ((RpcRequest) requestContent).method();\n-            }\n+            } else if (ctx instanceof ServiceRequestContext) {\n+                final ServiceConfig config = ((ServiceRequestContext) ctx).config();\n+                newServiceName = config.defaultServiceName();\n+                if (newServiceName == null) {\n+                    newServiceName = config.route().meterTag();\n+                }\n \n-            if (newName == null && ctx instanceof ServiceRequestContext) {\n-                newName = ((ServiceRequestContext) ctx).config().defaultLogName();\n+                newName = config.defaultLogName();\n+                if (newName == null) {\n+                    newName = ctx.method().name();\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1OTk5Nw=="}, "originalCommit": {"oid": "2a48e9aa0a5d1b5b82ffe9755b9d2e1d3b96b137"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE5OTUwNA==", "bodyText": "On second thought, I guess it doesn't make much sense to provide the default service name on the client side except for Retrofit.", "url": "https://github.com/line/armeria/pull/2780#discussion_r437199504", "createdAt": "2020-06-09T07:40:09Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -918,19 +959,40 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa\n         }\n \n         if (name == null) {\n+            String newServiceName = null;\n             String newName = null;\n-            final RpcRequest rpcReq = ctx.rpcRequest();\n+            RpcRequest rpcReq = ctx.rpcRequest();\n+            if (rpcReq == null && requestContent instanceof RpcRequest) {\n+               rpcReq = (RpcRequest) requestContent;\n+            }\n+\n             if (rpcReq != null) {\n+                newServiceName = rpcReq.serviceType().getName();\n                 newName = rpcReq.method();\n-            } else if (requestContent instanceof RpcRequest) {\n-                newName = ((RpcRequest) requestContent).method();\n-            }\n+            } else if (ctx instanceof ServiceRequestContext) {\n+                final ServiceConfig config = ((ServiceRequestContext) ctx).config();\n+                newServiceName = config.defaultServiceName();\n+                if (newServiceName == null) {\n+                    newServiceName = config.route().meterTag();\n+                }\n \n-            if (newName == null && ctx instanceof ServiceRequestContext) {\n-                newName = ((ServiceRequestContext) ctx).config().defaultLogName();\n+                newName = config.defaultLogName();\n+                if (newName == null) {\n+                    newName = ctx.method().name();\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1OTk5Nw=="}, "originalCommit": {"oid": "2a48e9aa0a5d1b5b82ffe9755b9d2e1d3b96b137"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIwMDczOQ==", "bodyText": "The client-side could not get a path pattern except for Retrofit. Is it good to use a path as a fallback serviceName? (eg. /users/123) \ud83e\uddd0\n\nI don't think so. It will increase the number of tags too much. Sounds like serviceName() should stay nullable, while name() could become non-null. WDYT?", "url": "https://github.com/line/armeria/pull/2780#discussion_r437200739", "createdAt": "2020-06-09T07:42:25Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -918,19 +959,40 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa\n         }\n \n         if (name == null) {\n+            String newServiceName = null;\n             String newName = null;\n-            final RpcRequest rpcReq = ctx.rpcRequest();\n+            RpcRequest rpcReq = ctx.rpcRequest();\n+            if (rpcReq == null && requestContent instanceof RpcRequest) {\n+               rpcReq = (RpcRequest) requestContent;\n+            }\n+\n             if (rpcReq != null) {\n+                newServiceName = rpcReq.serviceType().getName();\n                 newName = rpcReq.method();\n-            } else if (requestContent instanceof RpcRequest) {\n-                newName = ((RpcRequest) requestContent).method();\n-            }\n+            } else if (ctx instanceof ServiceRequestContext) {\n+                final ServiceConfig config = ((ServiceRequestContext) ctx).config();\n+                newServiceName = config.defaultServiceName();\n+                if (newServiceName == null) {\n+                    newServiceName = config.route().meterTag();\n+                }\n \n-            if (newName == null && ctx instanceof ServiceRequestContext) {\n-                newName = ((ServiceRequestContext) ctx).config().defaultLogName();\n+                newName = config.defaultLogName();\n+                if (newName == null) {\n+                    newName = ctx.method().name();\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1OTk5Nw=="}, "originalCommit": {"oid": "2a48e9aa0a5d1b5b82ffe9755b9d2e1d3b96b137"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3OTExOQ==", "bodyText": "Sounds like serviceName() should stay nullable, while name() could become non-null. WDYT?\n\nAgreed. It sounds good that serviceName() is nullable in clien-side.\n\nAdd Service.unwrap() that always unwraps at least once, so that we can get the innermost service instance.\n\nThat's a good idea. Let me try it.", "url": "https://github.com/line/armeria/pull/2780#discussion_r437879119", "createdAt": "2020-06-10T06:04:51Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -918,19 +959,40 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa\n         }\n \n         if (name == null) {\n+            String newServiceName = null;\n             String newName = null;\n-            final RpcRequest rpcReq = ctx.rpcRequest();\n+            RpcRequest rpcReq = ctx.rpcRequest();\n+            if (rpcReq == null && requestContent instanceof RpcRequest) {\n+               rpcReq = (RpcRequest) requestContent;\n+            }\n+\n             if (rpcReq != null) {\n+                newServiceName = rpcReq.serviceType().getName();\n                 newName = rpcReq.method();\n-            } else if (requestContent instanceof RpcRequest) {\n-                newName = ((RpcRequest) requestContent).method();\n-            }\n+            } else if (ctx instanceof ServiceRequestContext) {\n+                final ServiceConfig config = ((ServiceRequestContext) ctx).config();\n+                newServiceName = config.defaultServiceName();\n+                if (newServiceName == null) {\n+                    newServiceName = config.route().meterTag();\n+                }\n \n-            if (newName == null && ctx instanceof ServiceRequestContext) {\n-                newName = ((ServiceRequestContext) ctx).config().defaultLogName();\n+                newName = config.defaultLogName();\n+                if (newName == null) {\n+                    newName = ctx.method().name();\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1OTk5Nw=="}, "originalCommit": {"oid": "2a48e9aa0a5d1b5b82ffe9755b9d2e1d3b96b137"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzQyNjA0OnYy", "diffSide": "RIGHT", "path": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/RetrofitMeterIdPrefixFunction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjoyMTowOFrOGg6T9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNzozNDozMFrOGg8WtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2Mjk5OA==", "bodyText": "Should we now default serviceTagName to \"service\"? Or do we already?", "url": "https://github.com/line/armeria/pull/2780#discussion_r437162998", "createdAt": "2020-06-09T06:21:08Z", "author": {"login": "trustin"}, "path": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/RetrofitMeterIdPrefixFunction.java", "diffHunk": "@@ -107,7 +107,7 @@ private void buildTags(ImmutableList.Builder<Tag> tagListBuilder, RequestOnlyLog\n         if (invocation != null) {\n             if (serviceTagName != null) {\n                 final String service = firstNonNull(serviceName,\n-                                                    invocation.method().getDeclaringClass().getSimpleName());\n+                                                    invocation.method().getDeclaringClass().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a48e9aa0a5d1b5b82ffe9755b9d2e1d3b96b137"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2OTc0MQ==", "bodyText": "We set serviceTagName to \"service\" conditionally.\n\nIf serviceName is null, serviceTagName could be nullable. (Users might not be interested in the service tag)\nIf serviceName is not null, the default name of serviceTagName is \"service\"\n\n\n  \n    \n      armeria/retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/RetrofitMeterIdPrefixFunction.java\n    \n    \n        Lines 80 to 84\n      in\n      2a48e9a\n    \n    \n    \n    \n\n        \n          \n                                     @Nullable String serviceName) { \n        \n\n        \n          \n           this.name = name; \n        \n\n        \n          \n           this.serviceName = serviceName; \n        \n\n        \n          \n           if (serviceName != null) { \n        \n\n        \n          \n               this.serviceTagName = firstNonNull(serviceTagName, \"service\");", "url": "https://github.com/line/armeria/pull/2780#discussion_r437169741", "createdAt": "2020-06-09T06:38:31Z", "author": {"login": "ikhoon"}, "path": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/RetrofitMeterIdPrefixFunction.java", "diffHunk": "@@ -107,7 +107,7 @@ private void buildTags(ImmutableList.Builder<Tag> tagListBuilder, RequestOnlyLog\n         if (invocation != null) {\n             if (serviceTagName != null) {\n                 final String service = firstNonNull(serviceName,\n-                                                    invocation.method().getDeclaringClass().getSimpleName());\n+                                                    invocation.method().getDeclaringClass().getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2Mjk5OA=="}, "originalCommit": {"oid": "2a48e9aa0a5d1b5b82ffe9755b9d2e1d3b96b137"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE5NjQ2OQ==", "bodyText": "IIRC it was due to backward compatibility. Perhaps it's time to always add service by default? /cc @kojilin @arhont375", "url": "https://github.com/line/armeria/pull/2780#discussion_r437196469", "createdAt": "2020-06-09T07:34:30Z", "author": {"login": "trustin"}, "path": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/RetrofitMeterIdPrefixFunction.java", "diffHunk": "@@ -107,7 +107,7 @@ private void buildTags(ImmutableList.Builder<Tag> tagListBuilder, RequestOnlyLog\n         if (invocation != null) {\n             if (serviceTagName != null) {\n                 final String service = firstNonNull(serviceName,\n-                                                    invocation.method().getDeclaringClass().getSimpleName());\n+                                                    invocation.method().getDeclaringClass().getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2Mjk5OA=="}, "originalCommit": {"oid": "2a48e9aa0a5d1b5b82ffe9755b9d2e1d3b96b137"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzkwNDg5OnYy", "diffSide": "LEFT", "path": "core/src/main/java/com/linecorp/armeria/common/metric/MeterIdPrefixFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjoxMjoxNlrOGhmLAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjozNToxMVrOGk3hjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MTYwMA==", "bodyText": "In retrospect, I thought the service tag could replace the route tag. However, a service can be bound to multiple paths. Do I need to revive the route tag?", "url": "https://github.com/line/armeria/pull/2780#discussion_r437881600", "createdAt": "2020-06-10T06:12:16Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/metric/MeterIdPrefixFunction.java", "diffHunk": "@@ -92,24 +92,22 @@ public MeterIdPrefix completeRequestPrefix(MeterRegistry registry, RequestLog lo\n             private void buildTags(ImmutableList.Builder<Tag> tagListBuilder, RequestOnlyLog log) {\n                 final RequestContext ctx = log.context();\n \n-                String methodName = log.name();\n-                if (methodName == null) {\n-                    final RequestHeaders requestHeaders = log.requestHeaders();\n-                    methodName = requestHeaders.method().name();\n-                }\n-\n                 if (ctx instanceof ServiceRequestContext) {\n                     final ServiceRequestContext sCtx = (ServiceRequestContext) ctx;\n                     tagListBuilder.add(Tag.of(Flags.useLegacyMeterNames() ? \"hostnamePattern\"\n                                                                           : \"hostname.pattern\",\n                                               sCtx.config().virtualHost().hostnamePattern()));\n                 }\n \n+                String methodName = log.name();\n+                if (methodName == null) {\n+                    final RequestHeaders requestHeaders = log.requestHeaders();\n+                    methodName = requestHeaders.method().name();\n+                }\n                 tagListBuilder.add(Tag.of(\"method\", methodName));\n-\n-                if (ctx instanceof ServiceRequestContext) {\n-                    final ServiceRequestContext sCtx = (ServiceRequestContext) ctx;\n-                    tagListBuilder.add(Tag.of(\"route\", sCtx.config().route().meterTag()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dce2678b64e2b5a088152be7101256058cdaa3b4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxMTYyOA==", "bodyText": "In that case, a user could specify an alternative defaultServiceName?", "url": "https://github.com/line/armeria/pull/2780#discussion_r441311628", "createdAt": "2020-06-17T06:35:11Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/metric/MeterIdPrefixFunction.java", "diffHunk": "@@ -92,24 +92,22 @@ public MeterIdPrefix completeRequestPrefix(MeterRegistry registry, RequestLog lo\n             private void buildTags(ImmutableList.Builder<Tag> tagListBuilder, RequestOnlyLog log) {\n                 final RequestContext ctx = log.context();\n \n-                String methodName = log.name();\n-                if (methodName == null) {\n-                    final RequestHeaders requestHeaders = log.requestHeaders();\n-                    methodName = requestHeaders.method().name();\n-                }\n-\n                 if (ctx instanceof ServiceRequestContext) {\n                     final ServiceRequestContext sCtx = (ServiceRequestContext) ctx;\n                     tagListBuilder.add(Tag.of(Flags.useLegacyMeterNames() ? \"hostnamePattern\"\n                                                                           : \"hostname.pattern\",\n                                               sCtx.config().virtualHost().hostnamePattern()));\n                 }\n \n+                String methodName = log.name();\n+                if (methodName == null) {\n+                    final RequestHeaders requestHeaders = log.requestHeaders();\n+                    methodName = requestHeaders.method().name();\n+                }\n                 tagListBuilder.add(Tag.of(\"method\", methodName));\n-\n-                if (ctx instanceof ServiceRequestContext) {\n-                    final ServiceRequestContext sCtx = (ServiceRequestContext) ctx;\n-                    tagListBuilder.add(Tag.of(\"route\", sCtx.config().route().meterTag()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MTYwMA=="}, "originalCommit": {"oid": "dce2678b64e2b5a088152be7101256058cdaa3b4"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjExMDA0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNToyNTowOVrOGi3cIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNToyNzozOFrOGjIOiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIxMzA5MQ==", "bodyText": "Could just append to the previous conditions?\nif (rpcReq != null) {\n    newName = ...\n} else if (ctx instanceof ServiceRequestContext) {\n    newName = ...\n} else {\n    newName = ctx.method().name();\n}", "url": "https://github.com/line/armeria/pull/2780#discussion_r439213091", "createdAt": "2020-06-12T05:25:09Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -918,19 +961,36 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa\n         }\n \n         if (name == null) {\n+            String newServiceName = null;\n             String newName = null;\n-            final RpcRequest rpcReq = ctx.rpcRequest();\n+            RpcRequest rpcReq = ctx.rpcRequest();\n+            if (rpcReq == null && requestContent instanceof RpcRequest) {\n+               rpcReq = (RpcRequest) requestContent;\n+            }\n+\n             if (rpcReq != null) {\n+                newServiceName = rpcReq.serviceType().getName();\n                 newName = rpcReq.method();\n-            } else if (requestContent instanceof RpcRequest) {\n-                newName = ((RpcRequest) requestContent).method();\n+            } else if (ctx instanceof ServiceRequestContext) {\n+                final ServiceConfig config = ((ServiceRequestContext) ctx).config();\n+                newServiceName = config.defaultServiceName();\n+                if (newServiceName == null) {\n+                    newServiceName = config.service().unwrap().getClass().getName();\n+                }\n+                newName = config.defaultLogName();\n             }\n \n-            if (newName == null && ctx instanceof ServiceRequestContext) {\n-                newName = ((ServiceRequestContext) ctx).config().defaultLogName();\n+            if (newName == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24b4ba795365f97282aef7b8d062ac25f08f89f7"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4ODEzOQ==", "bodyText": "I don't think so. Because this condition should apply to both service and client context.", "url": "https://github.com/line/armeria/pull/2780#discussion_r439488139", "createdAt": "2020-06-12T15:27:38Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -918,19 +961,36 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa\n         }\n \n         if (name == null) {\n+            String newServiceName = null;\n             String newName = null;\n-            final RpcRequest rpcReq = ctx.rpcRequest();\n+            RpcRequest rpcReq = ctx.rpcRequest();\n+            if (rpcReq == null && requestContent instanceof RpcRequest) {\n+               rpcReq = (RpcRequest) requestContent;\n+            }\n+\n             if (rpcReq != null) {\n+                newServiceName = rpcReq.serviceType().getName();\n                 newName = rpcReq.method();\n-            } else if (requestContent instanceof RpcRequest) {\n-                newName = ((RpcRequest) requestContent).method();\n+            } else if (ctx instanceof ServiceRequestContext) {\n+                final ServiceConfig config = ((ServiceRequestContext) ctx).config();\n+                newServiceName = config.defaultServiceName();\n+                if (newServiceName == null) {\n+                    newServiceName = config.service().unwrap().getClass().getName();\n+                }\n+                newName = config.defaultLogName();\n             }\n \n-            if (newName == null && ctx instanceof ServiceRequestContext) {\n-                newName = ((ServiceRequestContext) ctx).config().defaultLogName();\n+            if (newName == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIxMzA5MQ=="}, "originalCommit": {"oid": "24b4ba795365f97282aef7b8d062ac25f08f89f7"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjExODE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNToyOTo1NFrOGi3g_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNTozMDo0NlrOGjIVMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIxNDMzMw==", "bodyText": "Is there any chance that the requestContent is set after endRequest is called?", "url": "https://github.com/line/armeria/pull/2780#discussion_r439214333", "createdAt": "2020-06-12T05:29:54Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -918,19 +961,36 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa\n         }\n \n         if (name == null) {\n+            String newServiceName = null;\n             String newName = null;\n-            final RpcRequest rpcReq = ctx.rpcRequest();\n+            RpcRequest rpcReq = ctx.rpcRequest();\n+            if (rpcReq == null && requestContent instanceof RpcRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24b4ba795365f97282aef7b8d062ac25f08f89f7"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4OTg0Mg==", "bodyText": "That's a good point! Let me check.", "url": "https://github.com/line/armeria/pull/2780#discussion_r439489842", "createdAt": "2020-06-12T15:30:46Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -918,19 +961,36 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa\n         }\n \n         if (name == null) {\n+            String newServiceName = null;\n             String newName = null;\n-            final RpcRequest rpcReq = ctx.rpcRequest();\n+            RpcRequest rpcReq = ctx.rpcRequest();\n+            if (rpcReq == null && requestContent instanceof RpcRequest) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIxNDMzMw=="}, "originalCommit": {"oid": "24b4ba795365f97282aef7b8d062ac25f08f89f7"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTY0MzMyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOTozNzo0OFrOGjqpvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzo0ODo1N1rOGkcOoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1MjE1Nw==", "bodyText": "Can't we just call setNamesIfAbsent() if name == null?", "url": "https://github.com/line/armeria/pull/2780#discussion_r440052157", "createdAt": "2020-06-15T09:37:48Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -783,13 +826,22 @@ public void requestContent(@Nullable Object requestContent, @Nullable Object raw\n             return;\n         }\n \n+        int requestCompletionFlags = RequestLogProperty.FLAGS_REQUEST_COMPLETE & ~deferredFlags;\n+        if (needToDeferName() && name == null) {\n+            requestCompletionFlags &= ~RequestLogProperty.NAME.flag();\n+        }\n+\n         this.requestContent = requestContent;\n         this.rawRequestContent = rawRequestContent;\n         updateFlags(RequestLogProperty.REQUEST_CONTENT);\n \n         if (requestContent instanceof RpcRequest && ctx.rpcRequest() == null) {\n             ctx.updateRpcRequest((RpcRequest) requestContent);\n         }\n+\n+        if (isAvailable(requestCompletionFlags)) {\n+            setNamesIfAbsent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg2NDQxNw==", "bodyText": "setNamesIfAbsent() make NAME available. You cannot set names with logBuilder.name(...) even before REQUEST_COMPLETE.\nI intended to give a constant chance of setting names to users before REQUEST_COMPLETE.", "url": "https://github.com/line/armeria/pull/2780#discussion_r440864417", "createdAt": "2020-06-16T13:48:57Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -783,13 +826,22 @@ public void requestContent(@Nullable Object requestContent, @Nullable Object raw\n             return;\n         }\n \n+        int requestCompletionFlags = RequestLogProperty.FLAGS_REQUEST_COMPLETE & ~deferredFlags;\n+        if (needToDeferName() && name == null) {\n+            requestCompletionFlags &= ~RequestLogProperty.NAME.flag();\n+        }\n+\n         this.requestContent = requestContent;\n         this.rawRequestContent = rawRequestContent;\n         updateFlags(RequestLogProperty.REQUEST_CONTENT);\n \n         if (requestContent instanceof RpcRequest && ctx.rpcRequest() == null) {\n             ctx.updateRpcRequest((RpcRequest) requestContent);\n         }\n+\n+        if (isAvailable(requestCompletionFlags)) {\n+            setNamesIfAbsent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1MjE1Nw=="}, "originalCommit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTY0NTk3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOTozODozMFrOGjqrag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOTozODozMFrOGjqrag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1MjU4Ng==", "bodyText": "How about checking name == null first because it's cheaper?", "url": "https://github.com/line/armeria/pull/2780#discussion_r440052586", "createdAt": "2020-06-15T09:38:30Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -890,6 +942,10 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa\n         if (requestCause != null) {\n             flags = RequestLogProperty.FLAGS_REQUEST_COMPLETE;\n         } else {\n+            int deferredFlags = this.deferredFlags;\n+            if (needToDeferName() && name == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTc5NTQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTozMzozNVrOGkTQkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzo1MzoxNlrOGkcbwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxNzQ1OQ==", "bodyText": "Should we build the full name lazily?", "url": "https://github.com/line/armeria/pull/2780#discussion_r440717459", "createdAt": "2020-06-16T09:33:35Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -685,14 +702,40 @@ public String name() {\n     public void name(String name) {\n         requireNonNull(name, \"name\");\n         checkArgument(!name.isEmpty(), \"name is empty.\");\n+\n+        if (isAvailable(RequestLogProperty.NAME)) {\n+            return;\n+        }\n+\n+        this.name = name;\n+        fullName = name;\n+        updateFlags(RequestLogProperty.NAME);\n+    }\n+\n+    @Override\n+    public void name(String serviceName, String name) {\n+        requireNonNull(serviceName, \"serviceName\");\n+        checkArgument(!serviceName.isEmpty(), \"serviceName is empty.\");\n+        requireNonNull(name, \"name\");\n+        checkArgument(!name.isEmpty(), \"name is empty.\");\n+\n         if (isAvailable(RequestLogProperty.NAME)) {\n             return;\n         }\n \n+        this.serviceName = serviceName;\n         this.name = name;\n+        fullName = serviceName + '/' + name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg2Nzc3Nw==", "bodyText": "Good suggestion! We don't use fullName internally and it is cheap. Don't need to be eager.", "url": "https://github.com/line/armeria/pull/2780#discussion_r440867777", "createdAt": "2020-06-16T13:53:16Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -685,14 +702,40 @@ public String name() {\n     public void name(String name) {\n         requireNonNull(name, \"name\");\n         checkArgument(!name.isEmpty(), \"name is empty.\");\n+\n+        if (isAvailable(RequestLogProperty.NAME)) {\n+            return;\n+        }\n+\n+        this.name = name;\n+        fullName = name;\n+        updateFlags(RequestLogProperty.NAME);\n+    }\n+\n+    @Override\n+    public void name(String serviceName, String name) {\n+        requireNonNull(serviceName, \"serviceName\");\n+        checkArgument(!serviceName.isEmpty(), \"serviceName is empty.\");\n+        requireNonNull(name, \"name\");\n+        checkArgument(!name.isEmpty(), \"name is empty.\");\n+\n         if (isAvailable(RequestLogProperty.NAME)) {\n             return;\n         }\n \n+        this.serviceName = serviceName;\n         this.name = name;\n+        fullName = serviceName + '/' + name;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxNzQ1OQ=="}, "originalCommit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTgwOTc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RequestOnlyLog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTozNzoyOVrOGkTZoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTozNzoyOVrOGkTZoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxOTc3Ng==", "bodyText": ", which is the concatenation of ... and ... using /", "url": "https://github.com/line/armeria/pull/2780#discussion_r440719776", "createdAt": "2020-06-16T09:37:29Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RequestOnlyLog.java", "diffHunk": "@@ -174,13 +174,29 @@ default long requestDurationNanos() {\n      */\n     Scheme scheme();\n \n+    /**\n+     * Returns the human-readable service name of the {@link Request}, such as RPC service name or\n+     * innermost class name of annotated service. This property is often used as a meter tag or distributed\n+     * trace's span name.\n+     */\n+    @Nullable\n+    String serviceName();\n+\n     /**\n      * Returns the human-readable simple name of the {@link Request}, such as RPC method name or annotated\n      * service method name. This property is often used as a meter tag or distributed trace's span name.\n      */\n     @Nullable\n     String name();\n \n+    /**\n+     * Returns the human-readable full name, which is the combination of {@link #serviceName()} and\n+     * {@link #name()} concatenated with {@code '/'}, of the {@link Request}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTgxMzEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/util/AbstractUnwrappable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTozODoxM1rOGkTbiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNToyMzo0MFrOGk2Cjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMDI2NQ==", "bodyText": "How about just unwrapping once, so that the caller has more control?\nCould we describe what will be returned when this is the innermost?", "url": "https://github.com/line/armeria/pull/2780#discussion_r440720265", "createdAt": "2020-06-16T09:38:13Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/util/AbstractUnwrappable.java", "diffHunk": "@@ -47,6 +47,22 @@ protected AbstractUnwrappable(T delegate) {\n         return result != null ? result : delegate.as(type);\n     }\n \n+    /**\n+     * Unwraps this {@link AbstractUnwrappable} recursively and returns the innermost object being\n+     * decorated.\n+     */\n+    public Unwrappable unwrap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI4NzMxMQ==", "bodyText": "Pulled up this method to Unwrappable and delegate() method is deprecated.", "url": "https://github.com/line/armeria/pull/2780#discussion_r441287311", "createdAt": "2020-06-17T05:23:40Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/util/AbstractUnwrappable.java", "diffHunk": "@@ -47,6 +47,22 @@ protected AbstractUnwrappable(T delegate) {\n         return result != null ? result : delegate.as(type);\n     }\n \n+    /**\n+     * Unwraps this {@link AbstractUnwrappable} recursively and returns the innermost object being\n+     * decorated.\n+     */\n+    public Unwrappable unwrap() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMDI2NQ=="}, "originalCommit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTgyNDQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/Service.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0MTowNlrOGkTiPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0MTowNlrOGkTiPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMTk4MQ==", "bodyText": "Ditto", "url": "https://github.com/line/armeria/pull/2780#discussion_r440721981", "createdAt": "2020-06-16T09:41:06Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/Service.java", "diffHunk": "@@ -76,6 +76,20 @@ default void serviceAdded(ServiceConfig cfg) throws Exception {}\n         return Unwrappable.super.as(type);\n     }\n \n+    /**\n+     * Unwraps this {@link Service} recursively and returns the innermost object being\n+     * decorated. For example:\n+     * <pre>{@code\n+     * HttpService service1 = new MyService();\n+     * HttpService service2 = service1.decorate(LoggingService.newDecorator())\n+     *                                .decorate(AuthService.newDecorator());\n+     * assert service2.unwrap() == service1;\n+     * }</pre>\n+     */\n+    default Service<? extends Request, ? extends Response> unwrap() {\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTgzNjg0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/ServiceConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0NDozMVrOGkTqMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0NDozMVrOGkTqMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNDAxOA==", "bodyText": "Question: Should we mention that some service types such as annotated services and RPC services will set the serviceName/name property automatically even if a user doesn't set them?", "url": "https://github.com/line/armeria/pull/2780#discussion_r440724018", "createdAt": "2020-06-16T09:44:31Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServiceConfig.java", "diffHunk": "@@ -145,9 +150,20 @@ public HttpService service() {\n         return service;\n     }\n \n+    /**\n+     * Returns the default value of the {@link RequestLog#serviceName()} property which is used when\n+     * no service name was set via {@link RequestLogBuilder#name(String, String)}.\n+     * If {@code null}, the path pattern of the {@link #route()} will be used instead.\n+     */\n+    @Nullable\n+    public String defaultServiceName() {\n+        return defaultServiceName;\n+    }\n+\n     /**\n      * Returns the default value of the {@link RequestLog#name()} property which is used when no name was set\n-     * via {@link RequestLogBuilder#name(String)}. If {@code null}, HTTP method name will be used instead.\n+     * via {@link RequestLogBuilder#name(String, String)}. If {@code null}, HTTP method name will be used\n+     * instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTg0NjIwOnYy", "diffSide": "RIGHT", "path": "logback/src/test/java/com/linecorp/armeria/common/logback/RequestContextExportingAppenderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0NzowM1rOGkTwDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNTo0ODowNVrOGk2e9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNTUxOA==", "bodyText": "Should we also add req.serviceName?", "url": "https://github.com/line/armeria/pull/2780#discussion_r440725518", "createdAt": "2020-06-16T09:47:03Z", "author": {"login": "trustin"}, "path": "logback/src/test/java/com/linecorp/armeria/common/logback/RequestContextExportingAppenderTest.java", "diffHunk": "@@ -291,6 +291,7 @@ void testServiceContextWithMinimalLogs() throws Exception {\n                            .containsEntry(\"client.ip\", \"9.10.11.12\")\n                            .containsEntry(\"req.direction\", \"INBOUND\")\n                            .containsEntry(\"req.authority\", \"server.com:8080\")\n+                           .containsEntry(\"req.name\", \"GET\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5NDU4MQ==", "bodyText": "Oops... definitely.", "url": "https://github.com/line/armeria/pull/2780#discussion_r441294581", "createdAt": "2020-06-17T05:48:05Z", "author": {"login": "ikhoon"}, "path": "logback/src/test/java/com/linecorp/armeria/common/logback/RequestContextExportingAppenderTest.java", "diffHunk": "@@ -291,6 +291,7 @@ void testServiceContextWithMinimalLogs() throws Exception {\n                            .containsEntry(\"client.ip\", \"9.10.11.12\")\n                            .containsEntry(\"req.direction\", \"INBOUND\")\n                            .containsEntry(\"req.authority\", \"server.com:8080\")\n+                           .containsEntry(\"req.name\", \"GET\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNTUxOA=="}, "originalCommit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTg1NTcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0OTo0MlrOGkT2Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjoyMzoyOFrOGk3O_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNzA2Ng==", "bodyText": "So, we're not using a simple name, right?", "url": "https://github.com/line/armeria/pull/2780#discussion_r440727066", "createdAt": "2020-06-16T09:49:42Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -917,24 +973,53 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa\n             }\n         }\n \n+        if (!needToDeferName()) {\n+            setNamesIfAbsent();\n+        }\n+        this.requestEndTimeNanos = requestEndTimeNanos;\n+        this.requestCause = requestCause;\n+        updateFlags(flags);\n+    }\n+\n+    private void setNamesIfAbsent() {\n         if (name == null) {\n+            String newServiceName = null;\n             String newName = null;\n-            final RpcRequest rpcReq = ctx.rpcRequest();\n+            RpcRequest rpcReq = ctx.rpcRequest();\n+            if (rpcReq == null && requestContent instanceof RpcRequest) {\n+                rpcReq = (RpcRequest) requestContent;\n+            }\n+\n             if (rpcReq != null) {\n+                newServiceName = rpcReq.serviceType().getName();\n                 newName = rpcReq.method();\n-            } else if (requestContent instanceof RpcRequest) {\n-                newName = ((RpcRequest) requestContent).method();\n+            } else if (ctx instanceof ServiceRequestContext) {\n+                final ServiceConfig config = ((ServiceRequestContext) ctx).config();\n+                newServiceName = config.defaultServiceName();\n+                if (newServiceName == null) {\n+                    newServiceName = config.service().unwrap().getClass().getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI4ODc2OQ==", "bodyText": "Yes, because the serviceName of gRPC is FQCN. Therefore I think we are using FQCN for serviceName except for access logs.", "url": "https://github.com/line/armeria/pull/2780#discussion_r441288769", "createdAt": "2020-06-17T05:28:49Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -917,24 +973,53 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa\n             }\n         }\n \n+        if (!needToDeferName()) {\n+            setNamesIfAbsent();\n+        }\n+        this.requestEndTimeNanos = requestEndTimeNanos;\n+        this.requestCause = requestCause;\n+        updateFlags(flags);\n+    }\n+\n+    private void setNamesIfAbsent() {\n         if (name == null) {\n+            String newServiceName = null;\n             String newName = null;\n-            final RpcRequest rpcReq = ctx.rpcRequest();\n+            RpcRequest rpcReq = ctx.rpcRequest();\n+            if (rpcReq == null && requestContent instanceof RpcRequest) {\n+                rpcReq = (RpcRequest) requestContent;\n+            }\n+\n             if (rpcReq != null) {\n+                newServiceName = rpcReq.serviceType().getName();\n                 newName = rpcReq.method();\n-            } else if (requestContent instanceof RpcRequest) {\n-                newName = ((RpcRequest) requestContent).method();\n+            } else if (ctx instanceof ServiceRequestContext) {\n+                final ServiceConfig config = ((ServiceRequestContext) ctx).config();\n+                newServiceName = config.defaultServiceName();\n+                if (newServiceName == null) {\n+                    newServiceName = config.service().unwrap().getClass().getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNzA2Ng=="}, "originalCommit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwNjg3OQ==", "bodyText": "Cool. Thanks.", "url": "https://github.com/line/armeria/pull/2780#discussion_r441306879", "createdAt": "2020-06-17T06:23:28Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -917,24 +973,53 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa\n             }\n         }\n \n+        if (!needToDeferName()) {\n+            setNamesIfAbsent();\n+        }\n+        this.requestEndTimeNanos = requestEndTimeNanos;\n+        this.requestCause = requestCause;\n+        updateFlags(flags);\n+    }\n+\n+    private void setNamesIfAbsent() {\n         if (name == null) {\n+            String newServiceName = null;\n             String newName = null;\n-            final RpcRequest rpcReq = ctx.rpcRequest();\n+            RpcRequest rpcReq = ctx.rpcRequest();\n+            if (rpcReq == null && requestContent instanceof RpcRequest) {\n+                rpcReq = (RpcRequest) requestContent;\n+            }\n+\n             if (rpcReq != null) {\n+                newServiceName = rpcReq.serviceType().getName();\n                 newName = rpcReq.method();\n-            } else if (requestContent instanceof RpcRequest) {\n-                newName = ((RpcRequest) requestContent).method();\n+            } else if (ctx instanceof ServiceRequestContext) {\n+                final ServiceConfig config = ((ServiceRequestContext) ctx).config();\n+                newServiceName = config.defaultServiceName();\n+                if (newServiceName == null) {\n+                    newServiceName = config.service().unwrap().getClass().getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNzA2Ng=="}, "originalCommit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDI1NDMwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/BuiltInProperty.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDowNjoxMlrOGk--vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjoyMDowOVrOGlDHzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQzMzc5MQ==", "bodyText": "nit: service name?", "url": "https://github.com/line/armeria/pull/2780#discussion_r441433791", "createdAt": "2020-06-17T10:06:12Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/BuiltInProperty.java", "diffHunk": "@@ -167,10 +168,28 @@\n      */\n     REQ_METHOD(\"req.method\", log -> log.context().method().name()),\n     /**\n-     * {@code \"req.name\"} - the human-readable name of the request, such as RPC method name or annotated\n-     * service method name. This property is often used as a meter tag or distributed trace's span name.\n+     * {@code \"req.name\"} - the human-readable name of the request, such as:\n+     * <ul>\n+     *   <li>gRPC - A capitalized method name defined in {@code io.grpc.MethodDescriptor}\n+     *       (e.g, {@code GetItems})</li>\n+     *   <li>Thrift and annotated service - a method name (e.g, {@code getItems})</li>\n+     *   <li>{@link HttpService} - an HTTP method name</li>\n+     * </ul>\n+     * This property is often used as a meter tag or distributed trace's span name.\n      */\n     REQ_NAME(\"req.name\", log -> log.isAvailable(RequestLogProperty.NAME) ? log.name() : null),\n+    /**\n+     * {@code \"req.serviceName\"} - the human-readable name of the request, such as:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a2bc8608b1e360c2192446c9fc2cb0feb0a2ff"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwMTY0NQ==", "bodyText": "... name of the service that served the request, ...", "url": "https://github.com/line/armeria/pull/2780#discussion_r441501645", "createdAt": "2020-06-17T12:20:09Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/BuiltInProperty.java", "diffHunk": "@@ -167,10 +168,28 @@\n      */\n     REQ_METHOD(\"req.method\", log -> log.context().method().name()),\n     /**\n-     * {@code \"req.name\"} - the human-readable name of the request, such as RPC method name or annotated\n-     * service method name. This property is often used as a meter tag or distributed trace's span name.\n+     * {@code \"req.name\"} - the human-readable name of the request, such as:\n+     * <ul>\n+     *   <li>gRPC - A capitalized method name defined in {@code io.grpc.MethodDescriptor}\n+     *       (e.g, {@code GetItems})</li>\n+     *   <li>Thrift and annotated service - a method name (e.g, {@code getItems})</li>\n+     *   <li>{@link HttpService} - an HTTP method name</li>\n+     * </ul>\n+     * This property is often used as a meter tag or distributed trace's span name.\n      */\n     REQ_NAME(\"req.name\", log -> log.isAvailable(RequestLogProperty.NAME) ? log.name() : null),\n+    /**\n+     * {@code \"req.serviceName\"} - the human-readable name of the request, such as:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQzMzc5MQ=="}, "originalCommit": {"oid": "a4a2bc8608b1e360c2192446c9fc2cb0feb0a2ff"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDI3ODgwOnYy", "diffSide": "RIGHT", "path": "retrofit2/src/test/java/com/linecorp/armeria/client/retrofit2/RetrofitMeterIdPrefixFunctionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDoxMzowM1rOGk_OCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDoxMzowM1rOGk_OCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQzNzcwNw==", "bodyText": "revert?", "url": "https://github.com/line/armeria/pull/2780#discussion_r441437707", "createdAt": "2020-06-17T10:13:03Z", "author": {"login": "minwoox"}, "path": "retrofit2/src/test/java/com/linecorp/armeria/client/retrofit2/RetrofitMeterIdPrefixFunctionTest.java", "diffHunk": "@@ -1,7 +1,7 @@\n /*\n  * Copyright 2019 LINE Corporation\n  *\n- * LINE Corporation licenses this file to you under the Apache License,\n+ * LINE Corporation licenses this file to you under the Apache License)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a2bc8608b1e360c2192446c9fc2cb0feb0a2ff"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2328, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}