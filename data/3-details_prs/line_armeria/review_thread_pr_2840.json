{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMTgxMzc4", "number": 2840, "reviewThreads": {"totalCount": 158, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODoyNjozOVrOFLlviQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wOVQwNjo0ODoyMVrOFjLzLg==", "hasNextPage": false, "hasPreviousPage": true}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Njk3MDMzOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODoyNjozOVrOIO1z9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDozMjowN1rOIQUCmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMjYzMA==", "bodyText": "Could you rename to asHeaderValue() for consistency with other classes?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552432630", "createdAt": "2021-01-06T08:26:39Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.CaseUtil;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+@UnstableApi\n+public final class ClientAuthorization {\n+\n+    private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+    private static final char AUTHORIZATION_SEPARATOR = ' ';\n+    private static final char CREDENTIALS_SEPARATOR = ':';\n+\n+    private static final String CLIENT_ID = \"client_id\";\n+    private static final String CLIENT_SECRET = \"client_secret\";\n+\n+    private final String authorizationType;\n+    @Nullable\n+    private final Supplier<String> authorizationSupplier;\n+    @Nullable\n+    private final Supplier<? extends Map.Entry<String, String>> credentialsSupplier;\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    public static ClientAuthorization ofBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, null);\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"),\n+                                       requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"), null);\n+    }\n+\n+    private ClientAuthorization(@Nullable Supplier<String> authorizationSupplier,\n+                                @Nullable Supplier<? extends Map.Entry<String, String>> credentialsSupplier,\n+                                @Nullable String authorizationType) {\n+        if (authorizationSupplier == null && credentialsSupplier == null) {\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        this.authorizationSupplier = authorizationSupplier;\n+        this.credentialsSupplier = credentialsSupplier;\n+        this.authorizationType =\n+                authorizationType == null ? DEFAULT_AUTHORIZATION_TYPE : authorizationType;\n+    }\n+\n+    private String composeAuthorizationString() {\n+        final String clientAuthorization;\n+        if (authorizationSupplier != null) {\n+            clientAuthorization = authorizationSupplier.get();\n+        } else if (credentialsSupplier != null) {\n+            final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+            clientAuthorization = encodeClientCredentials(clientCredentials.getKey(),\n+                                                          clientCredentials.getValue());\n+        } else {\n+            // we should not get here\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Fetches client authorization token or client credentials from the supplier and composes client\n+     * {@code Authorization} header value,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+     * }</pre>.\n+     *\n+     * @return encoded client {@code Authorization} header value.\n+     */\n+    public String authorizationHeaderValue() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk3NjQ3NQ==", "bodyText": "agree. done", "url": "https://github.com/line/armeria/pull/2840#discussion_r553976475", "createdAt": "2021-01-08T14:32:07Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.CaseUtil;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+@UnstableApi\n+public final class ClientAuthorization {\n+\n+    private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+    private static final char AUTHORIZATION_SEPARATOR = ' ';\n+    private static final char CREDENTIALS_SEPARATOR = ':';\n+\n+    private static final String CLIENT_ID = \"client_id\";\n+    private static final String CLIENT_SECRET = \"client_secret\";\n+\n+    private final String authorizationType;\n+    @Nullable\n+    private final Supplier<String> authorizationSupplier;\n+    @Nullable\n+    private final Supplier<? extends Map.Entry<String, String>> credentialsSupplier;\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    public static ClientAuthorization ofBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, null);\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"),\n+                                       requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"), null);\n+    }\n+\n+    private ClientAuthorization(@Nullable Supplier<String> authorizationSupplier,\n+                                @Nullable Supplier<? extends Map.Entry<String, String>> credentialsSupplier,\n+                                @Nullable String authorizationType) {\n+        if (authorizationSupplier == null && credentialsSupplier == null) {\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        this.authorizationSupplier = authorizationSupplier;\n+        this.credentialsSupplier = credentialsSupplier;\n+        this.authorizationType =\n+                authorizationType == null ? DEFAULT_AUTHORIZATION_TYPE : authorizationType;\n+    }\n+\n+    private String composeAuthorizationString() {\n+        final String clientAuthorization;\n+        if (authorizationSupplier != null) {\n+            clientAuthorization = authorizationSupplier.get();\n+        } else if (credentialsSupplier != null) {\n+            final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+            clientAuthorization = encodeClientCredentials(clientCredentials.getKey(),\n+                                                          clientCredentials.getValue());\n+        } else {\n+            // we should not get here\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Fetches client authorization token or client credentials from the supplier and composes client\n+     * {@code Authorization} header value,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+     * }</pre>.\n+     *\n+     * @return encoded client {@code Authorization} header value.\n+     */\n+    public String authorizationHeaderValue() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMjYzMA=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Njk3OTc4OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODozMDowN1rOIO15kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDozMjoxN1rOIQUC7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNDA2Ng==", "bodyText": "How about returning QueryParams, so that a user can choose whether to convert to a String or not?\nHow about renaming to asBodyParameters()? Shorter and 'as' gives a hint of conversion.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552434066", "createdAt": "2021-01-06T08:30:07Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.CaseUtil;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+@UnstableApi\n+public final class ClientAuthorization {\n+\n+    private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+    private static final char AUTHORIZATION_SEPARATOR = ' ';\n+    private static final char CREDENTIALS_SEPARATOR = ':';\n+\n+    private static final String CLIENT_ID = \"client_id\";\n+    private static final String CLIENT_SECRET = \"client_secret\";\n+\n+    private final String authorizationType;\n+    @Nullable\n+    private final Supplier<String> authorizationSupplier;\n+    @Nullable\n+    private final Supplier<? extends Map.Entry<String, String>> credentialsSupplier;\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    public static ClientAuthorization ofBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, null);\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"),\n+                                       requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"), null);\n+    }\n+\n+    private ClientAuthorization(@Nullable Supplier<String> authorizationSupplier,\n+                                @Nullable Supplier<? extends Map.Entry<String, String>> credentialsSupplier,\n+                                @Nullable String authorizationType) {\n+        if (authorizationSupplier == null && credentialsSupplier == null) {\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        this.authorizationSupplier = authorizationSupplier;\n+        this.credentialsSupplier = credentialsSupplier;\n+        this.authorizationType =\n+                authorizationType == null ? DEFAULT_AUTHORIZATION_TYPE : authorizationType;\n+    }\n+\n+    private String composeAuthorizationString() {\n+        final String clientAuthorization;\n+        if (authorizationSupplier != null) {\n+            clientAuthorization = authorizationSupplier.get();\n+        } else if (credentialsSupplier != null) {\n+            final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+            clientAuthorization = encodeClientCredentials(clientCredentials.getKey(),\n+                                                          clientCredentials.getValue());\n+        } else {\n+            // we should not get here\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Fetches client authorization token or client credentials from the supplier and composes client\n+     * {@code Authorization} header value,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+     * }</pre>.\n+     *\n+     * @return encoded client {@code Authorization} header value.\n+     */\n+    public String authorizationHeaderValue() {\n+        return CaseUtil.firstUpperAllLowerCase(authorizationType) +\n+               AUTHORIZATION_SEPARATOR + composeAuthorizationString();\n+    }\n+\n+    /**\n+     * Fetches client credentials from the supplier and composes required body parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+     * }</pre>.\n+     * The client MAY omit the {@code client_secret} parameter if the client secret is an empty string.\n+     */\n+    public void setCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {\n+        requireNonNull(credentialsSupplier, \"credentialsSupplier\");\n+        final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+        formBuilder.add(CLIENT_ID, requireNonNull(clientCredentials.getKey(), CLIENT_ID));\n+        final String clientSecret = clientCredentials.getValue();\n+        if (clientSecret != null && !clientSecret.isEmpty()) {\n+            formBuilder.add(CLIENT_SECRET, clientSecret);\n+        }\n+    }\n+\n+    /**\n+     * Fetches client credentials from the supplier and composes required body parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+     * }</pre>.\n+     * The client MAY omit the {@code client_secret} parameter if the client secret is an empty string.\n+     *\n+     * @return encoded client credentials request body parameters as a {@link String}.\n+     */\n+    public String credentialsBodyParameters() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk3NjU1OQ==", "bodyText": "agree. done", "url": "https://github.com/line/armeria/pull/2840#discussion_r553976559", "createdAt": "2021-01-08T14:32:17Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.CaseUtil;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+@UnstableApi\n+public final class ClientAuthorization {\n+\n+    private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+    private static final char AUTHORIZATION_SEPARATOR = ' ';\n+    private static final char CREDENTIALS_SEPARATOR = ':';\n+\n+    private static final String CLIENT_ID = \"client_id\";\n+    private static final String CLIENT_SECRET = \"client_secret\";\n+\n+    private final String authorizationType;\n+    @Nullable\n+    private final Supplier<String> authorizationSupplier;\n+    @Nullable\n+    private final Supplier<? extends Map.Entry<String, String>> credentialsSupplier;\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    public static ClientAuthorization ofBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, null);\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"),\n+                                       requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"), null);\n+    }\n+\n+    private ClientAuthorization(@Nullable Supplier<String> authorizationSupplier,\n+                                @Nullable Supplier<? extends Map.Entry<String, String>> credentialsSupplier,\n+                                @Nullable String authorizationType) {\n+        if (authorizationSupplier == null && credentialsSupplier == null) {\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        this.authorizationSupplier = authorizationSupplier;\n+        this.credentialsSupplier = credentialsSupplier;\n+        this.authorizationType =\n+                authorizationType == null ? DEFAULT_AUTHORIZATION_TYPE : authorizationType;\n+    }\n+\n+    private String composeAuthorizationString() {\n+        final String clientAuthorization;\n+        if (authorizationSupplier != null) {\n+            clientAuthorization = authorizationSupplier.get();\n+        } else if (credentialsSupplier != null) {\n+            final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+            clientAuthorization = encodeClientCredentials(clientCredentials.getKey(),\n+                                                          clientCredentials.getValue());\n+        } else {\n+            // we should not get here\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Fetches client authorization token or client credentials from the supplier and composes client\n+     * {@code Authorization} header value,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+     * }</pre>.\n+     *\n+     * @return encoded client {@code Authorization} header value.\n+     */\n+    public String authorizationHeaderValue() {\n+        return CaseUtil.firstUpperAllLowerCase(authorizationType) +\n+               AUTHORIZATION_SEPARATOR + composeAuthorizationString();\n+    }\n+\n+    /**\n+     * Fetches client credentials from the supplier and composes required body parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+     * }</pre>.\n+     * The client MAY omit the {@code client_secret} parameter if the client secret is an empty string.\n+     */\n+    public void setCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {\n+        requireNonNull(credentialsSupplier, \"credentialsSupplier\");\n+        final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+        formBuilder.add(CLIENT_ID, requireNonNull(clientCredentials.getKey(), CLIENT_ID));\n+        final String clientSecret = clientCredentials.getValue();\n+        if (clientSecret != null && !clientSecret.isEmpty()) {\n+            formBuilder.add(CLIENT_SECRET, clientSecret);\n+        }\n+    }\n+\n+    /**\n+     * Fetches client credentials from the supplier and composes required body parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+     * }</pre>.\n+     * The client MAY omit the {@code client_secret} parameter if the client secret is an empty string.\n+     *\n+     * @return encoded client credentials request body parameters as a {@link String}.\n+     */\n+    public String credentialsBodyParameters() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNDA2Ng=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Njk4MjgzOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODozMTozMlrOIO17gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDozMjoyN1rOIQUDUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNDU2MQ==", "bodyText": "Maybe add instead of set, because we're actually adding? We could simplify even further by removing Credentials, i.e. addAsBodyParameters.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552434561", "createdAt": "2021-01-06T08:31:32Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.CaseUtil;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+@UnstableApi\n+public final class ClientAuthorization {\n+\n+    private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+    private static final char AUTHORIZATION_SEPARATOR = ' ';\n+    private static final char CREDENTIALS_SEPARATOR = ':';\n+\n+    private static final String CLIENT_ID = \"client_id\";\n+    private static final String CLIENT_SECRET = \"client_secret\";\n+\n+    private final String authorizationType;\n+    @Nullable\n+    private final Supplier<String> authorizationSupplier;\n+    @Nullable\n+    private final Supplier<? extends Map.Entry<String, String>> credentialsSupplier;\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    public static ClientAuthorization ofBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, null);\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"),\n+                                       requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"), null);\n+    }\n+\n+    private ClientAuthorization(@Nullable Supplier<String> authorizationSupplier,\n+                                @Nullable Supplier<? extends Map.Entry<String, String>> credentialsSupplier,\n+                                @Nullable String authorizationType) {\n+        if (authorizationSupplier == null && credentialsSupplier == null) {\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        this.authorizationSupplier = authorizationSupplier;\n+        this.credentialsSupplier = credentialsSupplier;\n+        this.authorizationType =\n+                authorizationType == null ? DEFAULT_AUTHORIZATION_TYPE : authorizationType;\n+    }\n+\n+    private String composeAuthorizationString() {\n+        final String clientAuthorization;\n+        if (authorizationSupplier != null) {\n+            clientAuthorization = authorizationSupplier.get();\n+        } else if (credentialsSupplier != null) {\n+            final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+            clientAuthorization = encodeClientCredentials(clientCredentials.getKey(),\n+                                                          clientCredentials.getValue());\n+        } else {\n+            // we should not get here\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Fetches client authorization token or client credentials from the supplier and composes client\n+     * {@code Authorization} header value,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+     * }</pre>.\n+     *\n+     * @return encoded client {@code Authorization} header value.\n+     */\n+    public String authorizationHeaderValue() {\n+        return CaseUtil.firstUpperAllLowerCase(authorizationType) +\n+               AUTHORIZATION_SEPARATOR + composeAuthorizationString();\n+    }\n+\n+    /**\n+     * Fetches client credentials from the supplier and composes required body parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+     * }</pre>.\n+     * The client MAY omit the {@code client_secret} parameter if the client secret is an empty string.\n+     */\n+    public void setCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk3NjY1OQ==", "bodyText": "agree. done", "url": "https://github.com/line/armeria/pull/2840#discussion_r553976659", "createdAt": "2021-01-08T14:32:27Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.CaseUtil;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+@UnstableApi\n+public final class ClientAuthorization {\n+\n+    private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+    private static final char AUTHORIZATION_SEPARATOR = ' ';\n+    private static final char CREDENTIALS_SEPARATOR = ':';\n+\n+    private static final String CLIENT_ID = \"client_id\";\n+    private static final String CLIENT_SECRET = \"client_secret\";\n+\n+    private final String authorizationType;\n+    @Nullable\n+    private final Supplier<String> authorizationSupplier;\n+    @Nullable\n+    private final Supplier<? extends Map.Entry<String, String>> credentialsSupplier;\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    public static ClientAuthorization ofBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, null);\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"),\n+                                       requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"), null);\n+    }\n+\n+    private ClientAuthorization(@Nullable Supplier<String> authorizationSupplier,\n+                                @Nullable Supplier<? extends Map.Entry<String, String>> credentialsSupplier,\n+                                @Nullable String authorizationType) {\n+        if (authorizationSupplier == null && credentialsSupplier == null) {\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        this.authorizationSupplier = authorizationSupplier;\n+        this.credentialsSupplier = credentialsSupplier;\n+        this.authorizationType =\n+                authorizationType == null ? DEFAULT_AUTHORIZATION_TYPE : authorizationType;\n+    }\n+\n+    private String composeAuthorizationString() {\n+        final String clientAuthorization;\n+        if (authorizationSupplier != null) {\n+            clientAuthorization = authorizationSupplier.get();\n+        } else if (credentialsSupplier != null) {\n+            final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+            clientAuthorization = encodeClientCredentials(clientCredentials.getKey(),\n+                                                          clientCredentials.getValue());\n+        } else {\n+            // we should not get here\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Fetches client authorization token or client credentials from the supplier and composes client\n+     * {@code Authorization} header value,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+     * }</pre>.\n+     *\n+     * @return encoded client {@code Authorization} header value.\n+     */\n+    public String authorizationHeaderValue() {\n+        return CaseUtil.firstUpperAllLowerCase(authorizationType) +\n+               AUTHORIZATION_SEPARATOR + composeAuthorizationString();\n+    }\n+\n+    /**\n+     * Fetches client credentials from the supplier and composes required body parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+     * }</pre>.\n+     * The client MAY omit the {@code client_secret} parameter if the client secret is an empty string.\n+     */\n+    public void setCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNDU2MQ=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Njk5NTQ2OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODozNjoxMlrOIO2DEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxMDowNjo1M1rOIXubqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNjQ5Ng==", "bodyText": "Do you think it makes sense to have toString method, with redacted credentials?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552436496", "createdAt": "2021-01-06T08:36:12Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.CaseUtil;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+@UnstableApi\n+public final class ClientAuthorization {\n+\n+    private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+    private static final char AUTHORIZATION_SEPARATOR = ' ';\n+    private static final char CREDENTIALS_SEPARATOR = ':';\n+\n+    private static final String CLIENT_ID = \"client_id\";\n+    private static final String CLIENT_SECRET = \"client_secret\";\n+\n+    private final String authorizationType;\n+    @Nullable\n+    private final Supplier<String> authorizationSupplier;\n+    @Nullable\n+    private final Supplier<? extends Map.Entry<String, String>> credentialsSupplier;\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    public static ClientAuthorization ofBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, null);\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"),\n+                                       requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"), null);\n+    }\n+\n+    private ClientAuthorization(@Nullable Supplier<String> authorizationSupplier,\n+                                @Nullable Supplier<? extends Map.Entry<String, String>> credentialsSupplier,\n+                                @Nullable String authorizationType) {\n+        if (authorizationSupplier == null && credentialsSupplier == null) {\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        this.authorizationSupplier = authorizationSupplier;\n+        this.credentialsSupplier = credentialsSupplier;\n+        this.authorizationType =\n+                authorizationType == null ? DEFAULT_AUTHORIZATION_TYPE : authorizationType;\n+    }\n+\n+    private String composeAuthorizationString() {\n+        final String clientAuthorization;\n+        if (authorizationSupplier != null) {\n+            clientAuthorization = authorizationSupplier.get();\n+        } else if (credentialsSupplier != null) {\n+            final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+            clientAuthorization = encodeClientCredentials(clientCredentials.getKey(),\n+                                                          clientCredentials.getValue());\n+        } else {\n+            // we should not get here\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Fetches client authorization token or client credentials from the supplier and composes client\n+     * {@code Authorization} header value,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+     * }</pre>.\n+     *\n+     * @return encoded client {@code Authorization} header value.\n+     */\n+    public String authorizationHeaderValue() {\n+        return CaseUtil.firstUpperAllLowerCase(authorizationType) +\n+               AUTHORIZATION_SEPARATOR + composeAuthorizationString();\n+    }\n+\n+    /**\n+     * Fetches client credentials from the supplier and composes required body parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+     * }</pre>.\n+     * The client MAY omit the {@code client_secret} parameter if the client secret is an empty string.\n+     */\n+    public void setCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {\n+        requireNonNull(credentialsSupplier, \"credentialsSupplier\");\n+        final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+        formBuilder.add(CLIENT_ID, requireNonNull(clientCredentials.getKey(), CLIENT_ID));\n+        final String clientSecret = clientCredentials.getValue();\n+        if (clientSecret != null && !clientSecret.isEmpty()) {\n+            formBuilder.add(CLIENT_SECRET, clientSecret);\n+        }\n+    }\n+\n+    /**\n+     * Fetches client credentials from the supplier and composes required body parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+     * }</pre>.\n+     * The client MAY omit the {@code client_secret} parameter if the client secret is an empty string.\n+     *\n+     * @return encoded client credentials request body parameters as a {@link String}.\n+     */\n+    public String credentialsBodyParameters() {\n+        final QueryParamsBuilder formBuilder = QueryParams.builder();\n+        setCredentialsAsBodyParameters(formBuilder);\n+        return formBuilder.toQueryString();\n+    }\n+\n+    private static String encodeClientCredentials(String clientId, String clientSecret) {\n+        return Base64.getEncoder()\n+                     .encodeToString(\n+                             (clientId + CREDENTIALS_SEPARATOR + clientSecret)\n+                                     .getBytes(StandardCharsets.UTF_8));\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4MTQwOQ==", "bodyText": "As you can see, this class ClientAuthorization does not possess any actual credentials. It only holds a reference to the the entire authorization string Supplier or to credentials Supplier. This is done intentionally, so this class does not cache and maintain the lifecycle of the credentials/authorization. Credentials may change over time, credentials (or authorization string) should not be exposed. Therefore, there is nothing to print in the 'toString()' method besides the authorization type (Basic, Bearer, etc). Do you think it still makes sense to print just the type?\nWe should not invoke toString() on either of the suppliers, as it's opaque to our framework and we don't know whether it will expose the credentials or not.", "url": "https://github.com/line/armeria/pull/2840#discussion_r553981409", "createdAt": "2021-01-08T14:40:31Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.CaseUtil;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+@UnstableApi\n+public final class ClientAuthorization {\n+\n+    private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+    private static final char AUTHORIZATION_SEPARATOR = ' ';\n+    private static final char CREDENTIALS_SEPARATOR = ':';\n+\n+    private static final String CLIENT_ID = \"client_id\";\n+    private static final String CLIENT_SECRET = \"client_secret\";\n+\n+    private final String authorizationType;\n+    @Nullable\n+    private final Supplier<String> authorizationSupplier;\n+    @Nullable\n+    private final Supplier<? extends Map.Entry<String, String>> credentialsSupplier;\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    public static ClientAuthorization ofBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, null);\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"),\n+                                       requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"), null);\n+    }\n+\n+    private ClientAuthorization(@Nullable Supplier<String> authorizationSupplier,\n+                                @Nullable Supplier<? extends Map.Entry<String, String>> credentialsSupplier,\n+                                @Nullable String authorizationType) {\n+        if (authorizationSupplier == null && credentialsSupplier == null) {\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        this.authorizationSupplier = authorizationSupplier;\n+        this.credentialsSupplier = credentialsSupplier;\n+        this.authorizationType =\n+                authorizationType == null ? DEFAULT_AUTHORIZATION_TYPE : authorizationType;\n+    }\n+\n+    private String composeAuthorizationString() {\n+        final String clientAuthorization;\n+        if (authorizationSupplier != null) {\n+            clientAuthorization = authorizationSupplier.get();\n+        } else if (credentialsSupplier != null) {\n+            final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+            clientAuthorization = encodeClientCredentials(clientCredentials.getKey(),\n+                                                          clientCredentials.getValue());\n+        } else {\n+            // we should not get here\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Fetches client authorization token or client credentials from the supplier and composes client\n+     * {@code Authorization} header value,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+     * }</pre>.\n+     *\n+     * @return encoded client {@code Authorization} header value.\n+     */\n+    public String authorizationHeaderValue() {\n+        return CaseUtil.firstUpperAllLowerCase(authorizationType) +\n+               AUTHORIZATION_SEPARATOR + composeAuthorizationString();\n+    }\n+\n+    /**\n+     * Fetches client credentials from the supplier and composes required body parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+     * }</pre>.\n+     * The client MAY omit the {@code client_secret} parameter if the client secret is an empty string.\n+     */\n+    public void setCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {\n+        requireNonNull(credentialsSupplier, \"credentialsSupplier\");\n+        final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+        formBuilder.add(CLIENT_ID, requireNonNull(clientCredentials.getKey(), CLIENT_ID));\n+        final String clientSecret = clientCredentials.getValue();\n+        if (clientSecret != null && !clientSecret.isEmpty()) {\n+            formBuilder.add(CLIENT_SECRET, clientSecret);\n+        }\n+    }\n+\n+    /**\n+     * Fetches client credentials from the supplier and composes required body parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+     * }</pre>.\n+     * The client MAY omit the {@code client_secret} parameter if the client secret is an empty string.\n+     *\n+     * @return encoded client credentials request body parameters as a {@link String}.\n+     */\n+    public String credentialsBodyParameters() {\n+        final QueryParamsBuilder formBuilder = QueryParams.builder();\n+        setCredentialsAsBodyParameters(formBuilder);\n+        return formBuilder.toQueryString();\n+    }\n+\n+    private static String encodeClientCredentials(String clientId, String clientSecret) {\n+        return Base64.getEncoder()\n+                     .encodeToString(\n+                             (clientId + CREDENTIALS_SEPARATOR + clientSecret)\n+                                     .getBytes(StandardCharsets.UTF_8));\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNjQ5Ng=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4NTIzMQ==", "bodyText": "printing only the type of the authorization and the type of the source, like:\n{\"type\": \"Basic\", \"source\": \"credentials\"}", "url": "https://github.com/line/armeria/pull/2840#discussion_r553985231", "createdAt": "2021-01-08T14:46:54Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.CaseUtil;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+@UnstableApi\n+public final class ClientAuthorization {\n+\n+    private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+    private static final char AUTHORIZATION_SEPARATOR = ' ';\n+    private static final char CREDENTIALS_SEPARATOR = ':';\n+\n+    private static final String CLIENT_ID = \"client_id\";\n+    private static final String CLIENT_SECRET = \"client_secret\";\n+\n+    private final String authorizationType;\n+    @Nullable\n+    private final Supplier<String> authorizationSupplier;\n+    @Nullable\n+    private final Supplier<? extends Map.Entry<String, String>> credentialsSupplier;\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    public static ClientAuthorization ofBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, null);\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"),\n+                                       requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"), null);\n+    }\n+\n+    private ClientAuthorization(@Nullable Supplier<String> authorizationSupplier,\n+                                @Nullable Supplier<? extends Map.Entry<String, String>> credentialsSupplier,\n+                                @Nullable String authorizationType) {\n+        if (authorizationSupplier == null && credentialsSupplier == null) {\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        this.authorizationSupplier = authorizationSupplier;\n+        this.credentialsSupplier = credentialsSupplier;\n+        this.authorizationType =\n+                authorizationType == null ? DEFAULT_AUTHORIZATION_TYPE : authorizationType;\n+    }\n+\n+    private String composeAuthorizationString() {\n+        final String clientAuthorization;\n+        if (authorizationSupplier != null) {\n+            clientAuthorization = authorizationSupplier.get();\n+        } else if (credentialsSupplier != null) {\n+            final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+            clientAuthorization = encodeClientCredentials(clientCredentials.getKey(),\n+                                                          clientCredentials.getValue());\n+        } else {\n+            // we should not get here\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Fetches client authorization token or client credentials from the supplier and composes client\n+     * {@code Authorization} header value,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+     * }</pre>.\n+     *\n+     * @return encoded client {@code Authorization} header value.\n+     */\n+    public String authorizationHeaderValue() {\n+        return CaseUtil.firstUpperAllLowerCase(authorizationType) +\n+               AUTHORIZATION_SEPARATOR + composeAuthorizationString();\n+    }\n+\n+    /**\n+     * Fetches client credentials from the supplier and composes required body parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+     * }</pre>.\n+     * The client MAY omit the {@code client_secret} parameter if the client secret is an empty string.\n+     */\n+    public void setCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {\n+        requireNonNull(credentialsSupplier, \"credentialsSupplier\");\n+        final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+        formBuilder.add(CLIENT_ID, requireNonNull(clientCredentials.getKey(), CLIENT_ID));\n+        final String clientSecret = clientCredentials.getValue();\n+        if (clientSecret != null && !clientSecret.isEmpty()) {\n+            formBuilder.add(CLIENT_SECRET, clientSecret);\n+        }\n+    }\n+\n+    /**\n+     * Fetches client credentials from the supplier and composes required body parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+     * }</pre>.\n+     * The client MAY omit the {@code client_secret} parameter if the client secret is an empty string.\n+     *\n+     * @return encoded client credentials request body parameters as a {@link String}.\n+     */\n+    public String credentialsBodyParameters() {\n+        final QueryParamsBuilder formBuilder = QueryParams.builder();\n+        setCredentialsAsBodyParameters(formBuilder);\n+        return formBuilder.toQueryString();\n+    }\n+\n+    private static String encodeClientCredentials(String clientId, String clientSecret) {\n+        return Base64.getEncoder()\n+                     .encodeToString(\n+                             (clientId + CREDENTIALS_SEPARATOR + clientSecret)\n+                                     .getBytes(StandardCharsets.UTF_8));\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNjQ5Ng=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTc0ODkwNw==", "bodyText": "Sounds good to me. Thanks for elaboration, @max904-github", "url": "https://github.com/line/armeria/pull/2840#discussion_r561748907", "createdAt": "2021-01-21T10:06:53Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.CaseUtil;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+@UnstableApi\n+public final class ClientAuthorization {\n+\n+    private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+    private static final char AUTHORIZATION_SEPARATOR = ' ';\n+    private static final char CREDENTIALS_SEPARATOR = ':';\n+\n+    private static final String CLIENT_ID = \"client_id\";\n+    private static final String CLIENT_SECRET = \"client_secret\";\n+\n+    private final String authorizationType;\n+    @Nullable\n+    private final Supplier<String> authorizationSupplier;\n+    @Nullable\n+    private final Supplier<? extends Map.Entry<String, String>> credentialsSupplier;\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    public static ClientAuthorization ofBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+                                       null, null);\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"),\n+                                       requireNonNull(authorizationType, \"authorizationType\"));\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    public static ClientAuthorization ofCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        return new ClientAuthorization(null,\n+                                       requireNonNull(credentialsSupplier, \"credentialsSupplier\"), null);\n+    }\n+\n+    private ClientAuthorization(@Nullable Supplier<String> authorizationSupplier,\n+                                @Nullable Supplier<? extends Map.Entry<String, String>> credentialsSupplier,\n+                                @Nullable String authorizationType) {\n+        if (authorizationSupplier == null && credentialsSupplier == null) {\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        this.authorizationSupplier = authorizationSupplier;\n+        this.credentialsSupplier = credentialsSupplier;\n+        this.authorizationType =\n+                authorizationType == null ? DEFAULT_AUTHORIZATION_TYPE : authorizationType;\n+    }\n+\n+    private String composeAuthorizationString() {\n+        final String clientAuthorization;\n+        if (authorizationSupplier != null) {\n+            clientAuthorization = authorizationSupplier.get();\n+        } else if (credentialsSupplier != null) {\n+            final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+            clientAuthorization = encodeClientCredentials(clientCredentials.getKey(),\n+                                                          clientCredentials.getValue());\n+        } else {\n+            // we should not get here\n+            throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+        }\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Fetches client authorization token or client credentials from the supplier and composes client\n+     * {@code Authorization} header value,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+     * }</pre>.\n+     *\n+     * @return encoded client {@code Authorization} header value.\n+     */\n+    public String authorizationHeaderValue() {\n+        return CaseUtil.firstUpperAllLowerCase(authorizationType) +\n+               AUTHORIZATION_SEPARATOR + composeAuthorizationString();\n+    }\n+\n+    /**\n+     * Fetches client credentials from the supplier and composes required body parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+     * }</pre>.\n+     * The client MAY omit the {@code client_secret} parameter if the client secret is an empty string.\n+     */\n+    public void setCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {\n+        requireNonNull(credentialsSupplier, \"credentialsSupplier\");\n+        final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+        formBuilder.add(CLIENT_ID, requireNonNull(clientCredentials.getKey(), CLIENT_ID));\n+        final String clientSecret = clientCredentials.getValue();\n+        if (clientSecret != null && !clientSecret.isEmpty()) {\n+            formBuilder.add(CLIENT_SECRET, clientSecret);\n+        }\n+    }\n+\n+    /**\n+     * Fetches client credentials from the supplier and composes required body parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+     * <pre>{@code\n+     * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+     * }</pre>.\n+     * The client MAY omit the {@code client_secret} parameter if the client secret is an empty string.\n+     *\n+     * @return encoded client credentials request body parameters as a {@link String}.\n+     */\n+    public String credentialsBodyParameters() {\n+        final QueryParamsBuilder formBuilder = QueryParams.builder();\n+        setCredentialsAsBodyParameters(formBuilder);\n+        return formBuilder.toQueryString();\n+    }\n+\n+    private static String encodeClientCredentials(String clientId, String clientSecret) {\n+        return Base64.getEncoder()\n+                     .encodeToString(\n+                             (clientId + CREDENTIALS_SEPARATOR + clientSecret)\n+                                     .getBytes(StandardCharsets.UTF_8));\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNjQ5Ng=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Njk5NzM4OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessToken.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODozNjo1MFrOIO2ELw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDo0ODo0OFrOIQUpqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNjc4Mw==", "bodyText": "Could be final?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552436783", "createdAt": "2021-01-06T08:36:50Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.DEFAULT_TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_IN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.REFRESH_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.CaseUtil;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+@UnstableApi\n+public class GrantedOAuth2AccessToken implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4NjQ3Mw==", "bodyText": "prefer to keep it not final, as it's likely to be extended in future once we get to deal with some more specific token vendors.", "url": "https://github.com/line/armeria/pull/2840#discussion_r553986473", "createdAt": "2021-01-08T14:48:48Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.DEFAULT_TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_IN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.REFRESH_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.CaseUtil;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+@UnstableApi\n+public class GrantedOAuth2AccessToken implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNjc4Mw=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzAwMjI2OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidClientException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODozODoxNlrOIO2G0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDo0OTowMFrOIQUqHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNzQ1OA==", "bodyText": "Could be final", "url": "https://github.com/line/armeria/pull/2840#discussion_r552437458", "createdAt": "2021-01-06T08:38:16Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidClientException.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Client authentication failed (e.g., unknown client, no client authentication included, or\n+ * unsupported authentication method). The authorization server MAY return an HTTP 401\n+ * (Unauthorized) status code to indicate which HTTP authentication schemes are supported. If the\n+ * client attempted to authenticate via the \"Authorization\" request header field, the authorization\n+ * server MUST respond with an HTTP 401 (Unauthorized) status code and include the\n+ * \"WWW-Authenticate\" response header field matching the authentication scheme used by the client.\n+ */\n+@UnstableApi\n+public class InvalidClientException extends TokenRequestException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4NjU4OA==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r553986588", "createdAt": "2021-01-08T14:49:00Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidClientException.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Client authentication failed (e.g., unknown client, no client authentication included, or\n+ * unsupported authentication method). The authorization server MAY return an HTTP 401\n+ * (Unauthorized) status code to indicate which HTTP authentication schemes are supported. If the\n+ * client attempted to authenticate via the \"Authorization\" request header field, the authorization\n+ * server MUST respond with an HTTP 401 (Unauthorized) status code and include the\n+ * \"WWW-Authenticate\" response header field matching the authentication scheme used by the client.\n+ */\n+@UnstableApi\n+public class InvalidClientException extends TokenRequestException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNzQ1OA=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzAwMjc3OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidGrantException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODozODoyN1rOIO2HKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDo0OTowOFrOIQUqbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNzU0NQ==", "bodyText": "Could be final", "url": "https://github.com/line/armeria/pull/2840#discussion_r552437545", "createdAt": "2021-01-06T08:38:27Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidGrantException.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * The provided authorization grant (e.g., authorization code, resource owner credentials) or\n+ * refresh token is invalid, expired, revoked, does not match the redirection URI used in the\n+ * authorization request, or was issued to another client.\n+ */\n+@UnstableApi\n+public class InvalidGrantException extends TokenRequestException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4NjY3MA==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r553986670", "createdAt": "2021-01-08T14:49:08Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidGrantException.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * The provided authorization grant (e.g., authorization code, resource owner credentials) or\n+ * refresh token is invalid, expired, revoked, does not match the redirection URI used in the\n+ * authorization request, or was issued to another client.\n+ */\n+@UnstableApi\n+public class InvalidGrantException extends TokenRequestException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNzU0NQ=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzAwMzM4OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidRequestException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODozODo0MVrOIO2HkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDo0OToxNFrOIQUqtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNzY0OQ==", "bodyText": "Could be final", "url": "https://github.com/line/armeria/pull/2840#discussion_r552437649", "createdAt": "2021-01-06T08:38:41Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidRequestException.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * The request is missing a required parameter, includes an unsupported parameter value (other than\n+ * grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism\n+ * for authenticating the client, or is otherwise malformed.\n+ */\n+@UnstableApi\n+public class InvalidRequestException extends TokenRequestException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4Njc0Mg==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r553986742", "createdAt": "2021-01-08T14:49:14Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidRequestException.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * The request is missing a required parameter, includes an unsupported parameter value (other than\n+ * grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism\n+ * for authenticating the client, or is otherwise malformed.\n+ */\n+@UnstableApi\n+public class InvalidRequestException extends TokenRequestException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNzY0OQ=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzAwNDA2OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidScopeException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODozODo1MlrOIO2H6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDo0OToyMVrOIQUrBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNzczNg==", "bodyText": "Could be final.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552437736", "createdAt": "2021-01-06T08:38:52Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidScopeException.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * The requested scope is invalid, unknown, malformed, or exceeds the scope granted by the resource\n+ * owner.\n+ */\n+@UnstableApi\n+public class InvalidScopeException extends TokenRequestException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4NjgyMQ==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r553986821", "createdAt": "2021-01-08T14:49:21Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidScopeException.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * The requested scope is invalid, unknown, malformed, or exceeds the scope granted by the resource\n+ * owner.\n+ */\n+@UnstableApi\n+public class InvalidScopeException extends TokenRequestException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNzczNg=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzAxNDcxOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRequestException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo0MzowM1rOIO2OiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDo0OTozMlrOIQUrcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzOTQzMw==", "bodyText": "How about merging TokenRequestExceptionBuilder into this class? It doesn't seem to do anything but parsing.\nHow about renaming this method to parse(rawResponse)?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552439433", "createdAt": "2021-01-06T08:43:03Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRequestException.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * A common token request exception type.\n+ */\n+@UnstableApi\n+public class TokenRequestException extends RuntimeException {\n+\n+    private static final long serialVersionUID = 3324433572773111913L;\n+\n+    /**\n+     * Returns a {@link TokenRequestExceptionBuilder} to build error-specific types\n+     * of {@link TokenRequestException}.\n+     */\n+    public static TokenRequestException of(String rawResponse) {\n+        return TokenRequestExceptionBuilder.parse(rawResponse);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4NjkyOA==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r553986928", "createdAt": "2021-01-08T14:49:32Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRequestException.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * A common token request exception type.\n+ */\n+@UnstableApi\n+public class TokenRequestException extends RuntimeException {\n+\n+    private static final long serialVersionUID = 3324433572773111913L;\n+\n+    /**\n+     * Returns a {@link TokenRequestExceptionBuilder} to build error-specific types\n+     * of {@link TokenRequestException}.\n+     */\n+    public static TokenRequestException of(String rawResponse) {\n+        return TokenRequestExceptionBuilder.parse(rawResponse);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzOTQzMw=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzAyMjQ0OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnauthorizedClientException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo0NToyOFrOIO2S2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDo0OTo0MVrOIQUrwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MDUzNg==", "bodyText": "Could be final?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552440536", "createdAt": "2021-01-06T08:45:28Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnauthorizedClientException.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * The authenticated client is not authorized to use this authorization grant type.\n+ */\n+@UnstableApi\n+public class UnauthorizedClientException extends TokenRequestException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4NzAxMA==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r553987010", "createdAt": "2021-01-08T14:49:41Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnauthorizedClientException.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * The authenticated client is not authorized to use this authorization grant type.\n+ */\n+@UnstableApi\n+public class UnauthorizedClientException extends TokenRequestException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MDUzNg=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzAyMzA0OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedGrantTypeException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo0NTo0MVrOIO2TNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDo0OTo1MFrOIQUsGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MDYyOQ==", "bodyText": "Could be final?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552440629", "createdAt": "2021-01-06T08:45:41Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedGrantTypeException.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * The authorization grant type is not supported by the authorization server.\n+ */\n+@UnstableApi\n+public class UnsupportedGrantTypeException extends TokenRequestException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4NzA5OA==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r553987098", "createdAt": "2021-01-08T14:49:50Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedGrantTypeException.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * The authorization grant type is not supported by the authorization server.\n+ */\n+@UnstableApi\n+public class UnsupportedGrantTypeException extends TokenRequestException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MDYyOQ=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzAyNTA0OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedTokenTypeException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo0NjoxNFrOIO2UTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDo0OTo1N1rOIQUscg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MDkxMA==", "bodyText": "Could be final.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552440910", "createdAt": "2021-01-06T08:46:14Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedTokenTypeException.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * The authorization server does not support the revocation of the presented token type. That is,\n+ * the client tried to revoke an access token on a server not supporting this feature.\n+ */\n+@UnstableApi\n+public class UnsupportedTokenTypeException extends TokenRequestException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4NzE4Ng==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r553987186", "createdAt": "2021-01-08T14:49:57Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedTokenTypeException.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * The authorization server does not support the revocation of the presented token type. That is,\n+ * the client tried to revoke an access token on a server not supporting this feature.\n+ */\n+@UnstableApi\n+public class UnsupportedTokenTypeException extends TokenRequestException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MDkxMA=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzAyODg2OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo0NzozOFrOIO2WqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDo1NDoyM1rOIQU2sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MTUxMg==", "bodyText": "Could all protected methods in this class be final?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552441512", "createdAt": "2021-01-06T08:47:38Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedResponseException;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected WebClient endpoint() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4OTgxMQ==", "bodyText": "added to those methods that make sense", "url": "https://github.com/line/armeria/pull/2840#discussion_r553989811", "createdAt": "2021-01-08T14:54:23Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedResponseException;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected WebClient endpoint() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MTUxMg=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzAzMTgxOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo0ODo0NVrOIO2Ydw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDo1NTozMlrOIQU5iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MTk3NQ==", "bodyText": "Could be final?\naddAsBodyParameters?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552441975", "createdAt": "2021-01-06T08:48:45Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedResponseException;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected WebClient endpoint() {\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Returns the authorization endpoint path.\n+     */\n+    protected String endpointPath() {\n+        return endpointPath;\n+    }\n+\n+    /**\n+     * Returns the client authorization object.\n+     */\n+    @Nullable\n+    protected ClientAuthorization clientAuthorization() {\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Extracts data from OK response and converts it to the target type {@code T}.\n+     */\n+    protected abstract T extractOkResults(AggregatedHttpResponse response, QueryParams requestFormData);\n+\n+    /**\n+     * Returns the value for the {@link HttpHeaderNames#AUTHORIZATION}.\n+     */\n+    @Nullable\n+    protected String authorizationHeaderValue() {\n+        return clientAuthorization == null ? null : clientAuthorization.authorizationHeaderValue();\n+    }\n+\n+    /**\n+     * Sets client credentials as form data parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected void setCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk5MDUzNw==", "bodyText": "Added final. Renamed to addCredentialsAsBodyParameters since this class in not just about credentials.", "url": "https://github.com/line/armeria/pull/2840#discussion_r553990537", "createdAt": "2021-01-08T14:55:32Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedResponseException;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected WebClient endpoint() {\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Returns the authorization endpoint path.\n+     */\n+    protected String endpointPath() {\n+        return endpointPath;\n+    }\n+\n+    /**\n+     * Returns the client authorization object.\n+     */\n+    @Nullable\n+    protected ClientAuthorization clientAuthorization() {\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Extracts data from OK response and converts it to the target type {@code T}.\n+     */\n+    protected abstract T extractOkResults(AggregatedHttpResponse response, QueryParams requestFormData);\n+\n+    /**\n+     * Returns the value for the {@link HttpHeaderNames#AUTHORIZATION}.\n+     */\n+    @Nullable\n+    protected String authorizationHeaderValue() {\n+        return clientAuthorization == null ? null : clientAuthorization.authorizationHeaderValue();\n+    }\n+\n+    /**\n+     * Sets client credentials as form data parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected void setCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MTk3NQ=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzA0MDI4OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractTokenOperationRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo1MTo0NFrOIO2dqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDo1Njo0NVrOIQU8Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MzMwNg==", "bodyText": "Could these two make() methods become final (unless they are overridden)?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552443306", "createdAt": "2021-01-06T08:51:44Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractTokenOperationRequest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE_HINT;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+\n+/**\n+ * A common abstraction for the requests implementing various Token operations request/response flows,\n+ * such as Token Introspection flow\n+ * (<a href=\"https://tools.ietf.org/html/rfc7662#section-2\">[RFC7662], Section 2</a>),\n+ * and Token Revocation flow (<a href=\"https://tools.ietf.org/html/rfc7009\">[RFC7009]</a>).\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractTokenOperationRequest<T> extends AbstractOAuth2Request<T> {\n+\n+    /**\n+     * A common abstraction for the requests implementing various Token operations request/response flows,\n+     * such as Token Introspection flow\n+     * (<a href=\"https://tools.ietf.org/html/rfc7662#section-2\">[RFC7662], Section 2</a>),\n+     * and Token Revocation flow (<a href=\"https://tools.ietf.org/html/rfc7009\">[RFC7009]</a>).\n+     *\n+     * @param operationsEndpoint A {@link WebClient} to facilitate the Token Operations requests. Must\n+     *                           correspond to the required Token Operations endpoint of the OAuth 2 system.\n+     * @param operationsEndpointPath A URI path that corresponds to the token Operations endpoint of the\n+     *                               OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractTokenOperationRequest(WebClient operationsEndpoint, String operationsEndpointPath,\n+                                            @Nullable ClientAuthorization clientAuthorization) {\n+        super(operationsEndpoint, operationsEndpointPath, clientAuthorization);\n+    }\n+\n+    /**\n+     * Makes a token operations (Introspection/Revocation) request using given {@code token} and\n+     * optional {@code tokenType}.\n+     * @param token A token this operation request applies to.\n+     * @param tokenType A hint about the type of the token submitted for (Introspection/Revocation) operation.\n+     *                  Either {@code access_token} or {@code refresh_token} as per\n+     *                  <a href=\"https://tools.ietf.org/html/rfc7009#section-2.1\">[RFC7009], Section 2.1</a>.\n+     * @return A {@link CompletableFuture} carrying the target result.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    public CompletableFuture<T> make(String token, @Nullable String tokenType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk5MTI1OQ==", "bodyText": "No, make() is supposed to be overridden.", "url": "https://github.com/line/armeria/pull/2840#discussion_r553991259", "createdAt": "2021-01-08T14:56:45Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractTokenOperationRequest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE_HINT;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+\n+/**\n+ * A common abstraction for the requests implementing various Token operations request/response flows,\n+ * such as Token Introspection flow\n+ * (<a href=\"https://tools.ietf.org/html/rfc7662#section-2\">[RFC7662], Section 2</a>),\n+ * and Token Revocation flow (<a href=\"https://tools.ietf.org/html/rfc7009\">[RFC7009]</a>).\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractTokenOperationRequest<T> extends AbstractOAuth2Request<T> {\n+\n+    /**\n+     * A common abstraction for the requests implementing various Token operations request/response flows,\n+     * such as Token Introspection flow\n+     * (<a href=\"https://tools.ietf.org/html/rfc7662#section-2\">[RFC7662], Section 2</a>),\n+     * and Token Revocation flow (<a href=\"https://tools.ietf.org/html/rfc7009\">[RFC7009]</a>).\n+     *\n+     * @param operationsEndpoint A {@link WebClient} to facilitate the Token Operations requests. Must\n+     *                           correspond to the required Token Operations endpoint of the OAuth 2 system.\n+     * @param operationsEndpointPath A URI path that corresponds to the token Operations endpoint of the\n+     *                               OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractTokenOperationRequest(WebClient operationsEndpoint, String operationsEndpointPath,\n+                                            @Nullable ClientAuthorization clientAuthorization) {\n+        super(operationsEndpoint, operationsEndpointPath, clientAuthorization);\n+    }\n+\n+    /**\n+     * Makes a token operations (Introspection/Revocation) request using given {@code token} and\n+     * optional {@code tokenType}.\n+     * @param token A token this operation request applies to.\n+     * @param tokenType A hint about the type of the token submitted for (Introspection/Revocation) operation.\n+     *                  Either {@code access_token} or {@code refresh_token} as per\n+     *                  <a href=\"https://tools.ietf.org/html/rfc7009#section-2.1\">[RFC7009], Section 2.1</a>.\n+     * @return A {@link CompletableFuture} carrying the target result.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    public CompletableFuture<T> make(String token, @Nullable String tokenType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MzMwNg=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzA0MTk0OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/SerialFuture.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo1MjoyNVrOIO2eyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDo1NzowNlrOIQU9Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MzU5NA==", "bodyText": "Could be final?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552443594", "createdAt": "2021-01-06T08:52:25Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+@UnstableApi\n+public class SerialFuture {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk5MTQ3OQ==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r553991479", "createdAt": "2021-01-08T14:57:06Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+@UnstableApi\n+public class SerialFuture {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MzU5NA=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzA0NDY5OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo1MzozMVrOIO2gkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDo1NzozOVrOIQU-dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NDA0OQ==", "bodyText": "Could be final?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552444049", "createdAt": "2021-01-06T08:53:31Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.UNSUPPORTED_TOKEN_TYPE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.cache.Cache;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.OAuth2Token;\n+import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;\n+import com.linecorp.armeria.internal.server.auth.oauth2.TokenIntrospectionRequest;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.AuthFailureHandler;\n+import com.linecorp.armeria.server.auth.Authorizer;\n+\n+import io.netty.util.AttributeKey;\n+\n+/**\n+ * Determines whether a given {@link OAuth2Token} is authorized for the service registered in using OAuth 2.0\n+ * Token Introspection. {@code ctx} can be used for storing authorization information about the request for use\n+ * in business logic.\n+ */\n+@UnstableApi\n+public class OAuth2TokenIntrospectionAuthorizer implements Authorizer<OAuth2Token> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk5MTc5Ng==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r553991796", "createdAt": "2021-01-08T14:57:39Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.UNSUPPORTED_TOKEN_TYPE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.cache.Cache;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.OAuth2Token;\n+import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;\n+import com.linecorp.armeria.internal.server.auth.oauth2.TokenIntrospectionRequest;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.AuthFailureHandler;\n+import com.linecorp.armeria.server.auth.Authorizer;\n+\n+import io.netty.util.AttributeKey;\n+\n+/**\n+ * Determines whether a given {@link OAuth2Token} is authorized for the service registered in using OAuth 2.0\n+ * Token Introspection. {@code ctx} can be used for storing authorization information about the request for use\n+ * in business logic.\n+ */\n+@UnstableApi\n+public class OAuth2TokenIntrospectionAuthorizer implements Authorizer<OAuth2Token> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NDA0OQ=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzA0NTk4OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo1Mzo1NFrOIO2hSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDo1OToyMVrOIQVCpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NDIzNA==", "bodyText": "permittedScopes?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552444234", "createdAt": "2021-01-06T08:53:54Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.UNSUPPORTED_TOKEN_TYPE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.cache.Cache;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.OAuth2Token;\n+import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;\n+import com.linecorp.armeria.internal.server.auth.oauth2.TokenIntrospectionRequest;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.AuthFailureHandler;\n+import com.linecorp.armeria.server.auth.Authorizer;\n+\n+import io.netty.util.AttributeKey;\n+\n+/**\n+ * Determines whether a given {@link OAuth2Token} is authorized for the service registered in using OAuth 2.0\n+ * Token Introspection. {@code ctx} can be used for storing authorization information about the request for use\n+ * in business logic.\n+ */\n+@UnstableApi\n+public class OAuth2TokenIntrospectionAuthorizer implements Authorizer<OAuth2Token> {\n+\n+    /**\n+     * Returns a newly created {@link OAuth2TokenIntrospectionAuthorizerBuilder}.\n+     *\n+     * @param introspectionEndpoint A {@link WebClient} to facilitate the Token Introspection request. Must\n+     *                              correspond to the Token Introspection endpoint of the OAuth 2.0 system.\n+     * @param introspectionEndpointPath A URI path that corresponds to the Token Introspection endpoint of the\n+     *                                  OAuth 2.0 system.\n+     */\n+    public static OAuth2TokenIntrospectionAuthorizerBuilder builder(WebClient introspectionEndpoint,\n+                                                                    String introspectionEndpointPath) {\n+        return new OAuth2TokenIntrospectionAuthorizerBuilder(introspectionEndpoint, introspectionEndpointPath);\n+    }\n+\n+    static final AttributeKey<Integer> ERROR_CODE = AttributeKey.valueOf(\"x-oauth2-error\");\n+    static final AttributeKey<String> ERROR_TYPE = AttributeKey.valueOf(\"x-oauth2-error-type\");\n+    static final String INVALID_TOKEN = \"invalid_token\";\n+    static final String INSUFFICIENT_SCOPE = \"insufficient_scope\";\n+\n+    private final Cache<String, OAuth2TokenDescriptor> tokenCache;\n+    private final Set<String> permittedScope;\n+    @Nullable\n+    private final String accessTokenType;\n+    @Nullable\n+    private final String realm;\n+    private final TokenIntrospectionRequest tokenIntrospectionRequest;\n+    private final AuthFailureHandler authFailureHandler;\n+\n+    OAuth2TokenIntrospectionAuthorizer(Cache<String, OAuth2TokenDescriptor> tokenCache,\n+                                       @Nullable String accessTokenType, @Nullable String realm,\n+                                       Set<String> permittedScope,\n+                                       TokenIntrospectionRequest tokenIntrospectionRequest) {\n+        this.tokenCache = requireNonNull(tokenCache, \"tokenCache\");\n+        this.accessTokenType = accessTokenType;\n+        this.realm = realm;\n+        this.permittedScope = requireNonNull(permittedScope, \"permittedScope\");\n+        this.tokenIntrospectionRequest =\n+                requireNonNull(tokenIntrospectionRequest, \"tokenIntrospectionRequest\");\n+        authFailureHandler =\n+                new OAuth2AuthorizationFailureHandler(accessTokenType, realm, String.join(\" \", permittedScope));\n+    }\n+\n+    /**\n+     * Scopes permitted by this authorizer. The authorizer will accept any scope if empty.\n+     */\n+    public Set<String> permittedScope() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk5Mjg3MQ==", "bodyText": "scope is a set of roles/tokens, as per the spec. I wanted to be close to the spec and named it scope in multiple places.", "url": "https://github.com/line/armeria/pull/2840#discussion_r553992871", "createdAt": "2021-01-08T14:59:21Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.UNSUPPORTED_TOKEN_TYPE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.cache.Cache;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.OAuth2Token;\n+import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;\n+import com.linecorp.armeria.internal.server.auth.oauth2.TokenIntrospectionRequest;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.AuthFailureHandler;\n+import com.linecorp.armeria.server.auth.Authorizer;\n+\n+import io.netty.util.AttributeKey;\n+\n+/**\n+ * Determines whether a given {@link OAuth2Token} is authorized for the service registered in using OAuth 2.0\n+ * Token Introspection. {@code ctx} can be used for storing authorization information about the request for use\n+ * in business logic.\n+ */\n+@UnstableApi\n+public class OAuth2TokenIntrospectionAuthorizer implements Authorizer<OAuth2Token> {\n+\n+    /**\n+     * Returns a newly created {@link OAuth2TokenIntrospectionAuthorizerBuilder}.\n+     *\n+     * @param introspectionEndpoint A {@link WebClient} to facilitate the Token Introspection request. Must\n+     *                              correspond to the Token Introspection endpoint of the OAuth 2.0 system.\n+     * @param introspectionEndpointPath A URI path that corresponds to the Token Introspection endpoint of the\n+     *                                  OAuth 2.0 system.\n+     */\n+    public static OAuth2TokenIntrospectionAuthorizerBuilder builder(WebClient introspectionEndpoint,\n+                                                                    String introspectionEndpointPath) {\n+        return new OAuth2TokenIntrospectionAuthorizerBuilder(introspectionEndpoint, introspectionEndpointPath);\n+    }\n+\n+    static final AttributeKey<Integer> ERROR_CODE = AttributeKey.valueOf(\"x-oauth2-error\");\n+    static final AttributeKey<String> ERROR_TYPE = AttributeKey.valueOf(\"x-oauth2-error-type\");\n+    static final String INVALID_TOKEN = \"invalid_token\";\n+    static final String INSUFFICIENT_SCOPE = \"insufficient_scope\";\n+\n+    private final Cache<String, OAuth2TokenDescriptor> tokenCache;\n+    private final Set<String> permittedScope;\n+    @Nullable\n+    private final String accessTokenType;\n+    @Nullable\n+    private final String realm;\n+    private final TokenIntrospectionRequest tokenIntrospectionRequest;\n+    private final AuthFailureHandler authFailureHandler;\n+\n+    OAuth2TokenIntrospectionAuthorizer(Cache<String, OAuth2TokenDescriptor> tokenCache,\n+                                       @Nullable String accessTokenType, @Nullable String realm,\n+                                       Set<String> permittedScope,\n+                                       TokenIntrospectionRequest tokenIntrospectionRequest) {\n+        this.tokenCache = requireNonNull(tokenCache, \"tokenCache\");\n+        this.accessTokenType = accessTokenType;\n+        this.realm = realm;\n+        this.permittedScope = requireNonNull(permittedScope, \"permittedScope\");\n+        this.tokenIntrospectionRequest =\n+                requireNonNull(tokenIntrospectionRequest, \"tokenIntrospectionRequest\");\n+        authFailureHandler =\n+                new OAuth2AuthorizationFailureHandler(accessTokenType, realm, String.join(\" \", permittedScope));\n+    }\n+\n+    /**\n+     * Scopes permitted by this authorizer. The authorizer will accept any scope if empty.\n+     */\n+    public Set<String> permittedScope() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NDIzNA=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzA0NjYwOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo1NDowOVrOIO2hpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDo1OTozOVrOIQVDUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NDMyNw==", "bodyText": "permittedScopes?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552444327", "createdAt": "2021-01-06T08:54:09Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.UNSUPPORTED_TOKEN_TYPE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.cache.Cache;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.OAuth2Token;\n+import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;\n+import com.linecorp.armeria.internal.server.auth.oauth2.TokenIntrospectionRequest;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.AuthFailureHandler;\n+import com.linecorp.armeria.server.auth.Authorizer;\n+\n+import io.netty.util.AttributeKey;\n+\n+/**\n+ * Determines whether a given {@link OAuth2Token} is authorized for the service registered in using OAuth 2.0\n+ * Token Introspection. {@code ctx} can be used for storing authorization information about the request for use\n+ * in business logic.\n+ */\n+@UnstableApi\n+public class OAuth2TokenIntrospectionAuthorizer implements Authorizer<OAuth2Token> {\n+\n+    /**\n+     * Returns a newly created {@link OAuth2TokenIntrospectionAuthorizerBuilder}.\n+     *\n+     * @param introspectionEndpoint A {@link WebClient} to facilitate the Token Introspection request. Must\n+     *                              correspond to the Token Introspection endpoint of the OAuth 2.0 system.\n+     * @param introspectionEndpointPath A URI path that corresponds to the Token Introspection endpoint of the\n+     *                                  OAuth 2.0 system.\n+     */\n+    public static OAuth2TokenIntrospectionAuthorizerBuilder builder(WebClient introspectionEndpoint,\n+                                                                    String introspectionEndpointPath) {\n+        return new OAuth2TokenIntrospectionAuthorizerBuilder(introspectionEndpoint, introspectionEndpointPath);\n+    }\n+\n+    static final AttributeKey<Integer> ERROR_CODE = AttributeKey.valueOf(\"x-oauth2-error\");\n+    static final AttributeKey<String> ERROR_TYPE = AttributeKey.valueOf(\"x-oauth2-error-type\");\n+    static final String INVALID_TOKEN = \"invalid_token\";\n+    static final String INSUFFICIENT_SCOPE = \"insufficient_scope\";\n+\n+    private final Cache<String, OAuth2TokenDescriptor> tokenCache;\n+    private final Set<String> permittedScope;\n+    @Nullable\n+    private final String accessTokenType;\n+    @Nullable\n+    private final String realm;\n+    private final TokenIntrospectionRequest tokenIntrospectionRequest;\n+    private final AuthFailureHandler authFailureHandler;\n+\n+    OAuth2TokenIntrospectionAuthorizer(Cache<String, OAuth2TokenDescriptor> tokenCache,\n+                                       @Nullable String accessTokenType, @Nullable String realm,\n+                                       Set<String> permittedScope,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk5MzA0MQ==", "bodyText": "same as previous comment", "url": "https://github.com/line/armeria/pull/2840#discussion_r553993041", "createdAt": "2021-01-08T14:59:39Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.UNSUPPORTED_TOKEN_TYPE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.cache.Cache;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.OAuth2Token;\n+import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;\n+import com.linecorp.armeria.internal.server.auth.oauth2.TokenIntrospectionRequest;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.AuthFailureHandler;\n+import com.linecorp.armeria.server.auth.Authorizer;\n+\n+import io.netty.util.AttributeKey;\n+\n+/**\n+ * Determines whether a given {@link OAuth2Token} is authorized for the service registered in using OAuth 2.0\n+ * Token Introspection. {@code ctx} can be used for storing authorization information about the request for use\n+ * in business logic.\n+ */\n+@UnstableApi\n+public class OAuth2TokenIntrospectionAuthorizer implements Authorizer<OAuth2Token> {\n+\n+    /**\n+     * Returns a newly created {@link OAuth2TokenIntrospectionAuthorizerBuilder}.\n+     *\n+     * @param introspectionEndpoint A {@link WebClient} to facilitate the Token Introspection request. Must\n+     *                              correspond to the Token Introspection endpoint of the OAuth 2.0 system.\n+     * @param introspectionEndpointPath A URI path that corresponds to the Token Introspection endpoint of the\n+     *                                  OAuth 2.0 system.\n+     */\n+    public static OAuth2TokenIntrospectionAuthorizerBuilder builder(WebClient introspectionEndpoint,\n+                                                                    String introspectionEndpointPath) {\n+        return new OAuth2TokenIntrospectionAuthorizerBuilder(introspectionEndpoint, introspectionEndpointPath);\n+    }\n+\n+    static final AttributeKey<Integer> ERROR_CODE = AttributeKey.valueOf(\"x-oauth2-error\");\n+    static final AttributeKey<String> ERROR_TYPE = AttributeKey.valueOf(\"x-oauth2-error-type\");\n+    static final String INVALID_TOKEN = \"invalid_token\";\n+    static final String INSUFFICIENT_SCOPE = \"insufficient_scope\";\n+\n+    private final Cache<String, OAuth2TokenDescriptor> tokenCache;\n+    private final Set<String> permittedScope;\n+    @Nullable\n+    private final String accessTokenType;\n+    @Nullable\n+    private final String realm;\n+    private final TokenIntrospectionRequest tokenIntrospectionRequest;\n+    private final AuthFailureHandler authFailureHandler;\n+\n+    OAuth2TokenIntrospectionAuthorizer(Cache<String, OAuth2TokenDescriptor> tokenCache,\n+                                       @Nullable String accessTokenType, @Nullable String realm,\n+                                       Set<String> permittedScope,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NDMyNw=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzA1NTI1OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo1Njo1MFrOIO2mpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNTowMjo1MlrOIQVK4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NTYwNw==", "bodyText": "final?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552445607", "createdAt": "2021-01-06T08:56:50Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptor.java", "diffHunk": "@@ -0,0 +1,512 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACTIVE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.AUDIENCE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.CLIENT_ID;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_AT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ISSUED_AT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ISSUER;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.JWT_ID;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.NOT_BEFORE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SUBJECT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.USER_NAME;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Defines a structure of the Token Introspection Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc7662#section-2.2\">[RFC7662], Section 2.2</a>.\n+ */\n+@UnstableApi\n+public class OAuth2TokenDescriptor implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk5NDk3OA==", "bodyText": "prefer to keep it not final, as it's likely to be extended in future once we get to deal with some more specific token vendors.", "url": "https://github.com/line/armeria/pull/2840#discussion_r553994978", "createdAt": "2021-01-08T15:02:52Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptor.java", "diffHunk": "@@ -0,0 +1,512 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACTIVE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.AUDIENCE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.CLIENT_ID;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_AT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ISSUED_AT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ISSUER;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.JWT_ID;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.NOT_BEFORE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SUBJECT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.USER_NAME;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Defines a structure of the Token Introspection Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc7662#section-2.2\">[RFC7662], Section 2.2</a>.\n+ */\n+@UnstableApi\n+public class OAuth2TokenDescriptor implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NTYwNw=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzA1NjgzOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo1NzoxN1rOIO2nkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNTowNjoyNFrOIQVTOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NTg0MA==", "bodyText": "Maybe parse is a better name?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552445840", "createdAt": "2021-01-06T08:57:17Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptor.java", "diffHunk": "@@ -0,0 +1,512 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACTIVE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.AUDIENCE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.CLIENT_ID;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_AT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ISSUED_AT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ISSUER;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.JWT_ID;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.NOT_BEFORE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SUBJECT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.USER_NAME;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Defines a structure of the Token Introspection Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc7662#section-2.2\">[RFC7662], Section 2.2</a>.\n+ */\n+@UnstableApi\n+public class OAuth2TokenDescriptor implements Serializable {\n+\n+    private static final long serialVersionUID = -3976877781134216467L;\n+\n+    /**\n+     * Creates a new {@link OAuth2TokenDescriptor} based on the {@code JSON}-formatted raw response body.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @return A new instance of {@link OAuth2TokenDescriptor}.\n+     */\n+    public static OAuth2TokenDescriptor of(String rawResponse) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk5NzExNQ==", "bodyText": "agree. changed", "url": "https://github.com/line/armeria/pull/2840#discussion_r553997115", "createdAt": "2021-01-08T15:06:24Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptor.java", "diffHunk": "@@ -0,0 +1,512 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACTIVE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.AUDIENCE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.CLIENT_ID;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_AT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ISSUED_AT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ISSUER;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.JWT_ID;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.NOT_BEFORE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SUBJECT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.USER_NAME;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Defines a structure of the Token Introspection Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc7662#section-2.2\">[RFC7662], Section 2.2</a>.\n+ */\n+@UnstableApi\n+public class OAuth2TokenDescriptor implements Serializable {\n+\n+    private static final long serialVersionUID = -3976877781134216467L;\n+\n+    /**\n+     * Creates a new {@link OAuth2TokenDescriptor} based on the {@code JSON}-formatted raw response body.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @return A new instance of {@link OAuth2TokenDescriptor}.\n+     */\n+    public static OAuth2TokenDescriptor of(String rawResponse) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NTg0MA=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzA2MDMxOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/internal/client/auth/oauth2/AbstractAccessTokenRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo1ODozNFrOIO2ppw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNTowODo0OFrOIQVZFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NjM3NQ==", "bodyText": "Could be final?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552446375", "createdAt": "2021-01-06T08:58:34Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/client/auth/oauth2/AbstractAccessTokenRequest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.internal.common.auth.oauth2.AbstractOAuth2Request;\n+\n+/**\n+ * A common abstraction for the requests implementing various Access Token request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+ */\n+@UnstableApi\n+public abstract class AbstractAccessTokenRequest extends AbstractOAuth2Request<GrantedOAuth2AccessToken> {\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractAccessTokenRequest(WebClient accessTokenEndpoint, String accessTokenEndpointPath,\n+                                         @Nullable ClientAuthorization clientAuthorization) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath, clientAuthorization);\n+    }\n+\n+    /**\n+     * Extracts data from Access Token OK response and converts it to the target\n+     * type {@link GrantedOAuth2AccessToken}.\n+     */\n+    @Override\n+    protected GrantedOAuth2AccessToken extractOkResults(AggregatedHttpResponse response,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk5ODYxMg==", "bodyText": "prefer to keep it open", "url": "https://github.com/line/armeria/pull/2840#discussion_r553998612", "createdAt": "2021-01-08T15:08:48Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/client/auth/oauth2/AbstractAccessTokenRequest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.internal.common.auth.oauth2.AbstractOAuth2Request;\n+\n+/**\n+ * A common abstraction for the requests implementing various Access Token request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+ */\n+@UnstableApi\n+public abstract class AbstractAccessTokenRequest extends AbstractOAuth2Request<GrantedOAuth2AccessToken> {\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractAccessTokenRequest(WebClient accessTokenEndpoint, String accessTokenEndpointPath,\n+                                         @Nullable ClientAuthorization clientAuthorization) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath, clientAuthorization);\n+    }\n+\n+    /**\n+     * Extracts data from Access Token OK response and converts it to the target\n+     * type {@link GrantedOAuth2AccessToken}.\n+     */\n+    @Override\n+    protected GrantedOAuth2AccessToken extractOkResults(AggregatedHttpResponse response,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NjM3NQ=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzA2MTY4OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/SerialFuture.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo1OTowMVrOIO2qdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo1OTowMVrOIO2qdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NjU4Mw==", "bodyText": "call()?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552446583", "createdAt": "2021-01-06T08:59:01Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+@UnstableApi\n+public class SerialFuture {\n+\n+    private final Queue<Runnable> actions = new LinkedList<>();\n+\n+    @Nullable\n+    private Runnable active;\n+\n+    @Nullable\n+    Executor executor;\n+\n+    /**\n+     * Constructs {@link SerialFuture} with a supplied {@link Executor}.\n+     * @param executor An {@link Executor} to execute asynchronous actions.\n+     */\n+    public SerialFuture(@Nullable Executor executor) {\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Constructs {@link SerialFuture}.\n+     */\n+    public SerialFuture() {\n+        this(null);\n+    }\n+\n+    /**\n+     * Executes submitted {@link Callable} action asynchronously in sequence.\n+     * @param action An asynchronous {@link Callable} action to be executed in sequence.\n+     *               It returns {@link CompletionStage} that produces the final result when the action\n+     *               completes.\n+     * @return Returns a new {@link CompletionStage} with the same result or exception as the {@code action},\n+     *         that executes the given action when this stage completes.\n+     */\n+    public synchronized <V> CompletionStage<V> executeAsync(Callable<CompletionStage<V>> action) {\n+        final CompletableFuture<V> result = new CompletableFuture<>();\n+        actions.add(() -> {\n+            final CompletionStage<V> future;\n+            try {\n+                future = action.call();\n+            } catch (Throwable e) {\n+                result.completeExceptionally(Exceptions.peel(e));\n+                executeNext();\n+                return;\n+            }\n+            // replaced CompletableFuture.whenComplete() with CompletableFuture.handle()\n+            // due to performance issue described at\n+            // <a href=\"https://github.com/line/armeria/pull/1440\">#1440</a>.\n+            future.handle((v, ex) -> {\n+                if (ex == null) {\n+                    result.complete(v);\n+                } else {\n+                    result.completeExceptionally(ex);\n+                }\n+                executeNext();\n+                //noinspection ReturnOfNull\n+                return null;\n+            });\n+        });\n+\n+        if (active == null) {\n+            executeNext();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Calls submitted {@link Callable} action asynchronously in sequence.\n+     * @param action A {@link Callable} action to be called asynchronously in sequence.\n+     *               It returns that produces the final result of computation.\n+     * @return Returns a new {@link CompletionStage} with the same result or exception as the {@code action},\n+     *         that executes the given action when this stage completes.\n+     */\n+    public synchronized <V> CompletionStage<V> callAsync(Callable<V> action) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzA2MjIxOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/SerialFuture.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo1OToxM1rOIO2qzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxMDowNTo0NFrOIXuY5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NjY2OQ==", "bodyText": "execute()?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552446669", "createdAt": "2021-01-06T08:59:13Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+@UnstableApi\n+public class SerialFuture {\n+\n+    private final Queue<Runnable> actions = new LinkedList<>();\n+\n+    @Nullable\n+    private Runnable active;\n+\n+    @Nullable\n+    Executor executor;\n+\n+    /**\n+     * Constructs {@link SerialFuture} with a supplied {@link Executor}.\n+     * @param executor An {@link Executor} to execute asynchronous actions.\n+     */\n+    public SerialFuture(@Nullable Executor executor) {\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Constructs {@link SerialFuture}.\n+     */\n+    public SerialFuture() {\n+        this(null);\n+    }\n+\n+    /**\n+     * Executes submitted {@link Callable} action asynchronously in sequence.\n+     * @param action An asynchronous {@link Callable} action to be executed in sequence.\n+     *               It returns {@link CompletionStage} that produces the final result when the action\n+     *               completes.\n+     * @return Returns a new {@link CompletionStage} with the same result or exception as the {@code action},\n+     *         that executes the given action when this stage completes.\n+     */\n+    public synchronized <V> CompletionStage<V> executeAsync(Callable<CompletionStage<V>> action) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk5OTk1Mw==", "bodyText": "prefer to keep it the way it is. semantics reflect the nature of the execution (similar to CompletableFuture). this is just an internal utility class.", "url": "https://github.com/line/armeria/pull/2840#discussion_r553999953", "createdAt": "2021-01-08T15:11:08Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+@UnstableApi\n+public class SerialFuture {\n+\n+    private final Queue<Runnable> actions = new LinkedList<>();\n+\n+    @Nullable\n+    private Runnable active;\n+\n+    @Nullable\n+    Executor executor;\n+\n+    /**\n+     * Constructs {@link SerialFuture} with a supplied {@link Executor}.\n+     * @param executor An {@link Executor} to execute asynchronous actions.\n+     */\n+    public SerialFuture(@Nullable Executor executor) {\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Constructs {@link SerialFuture}.\n+     */\n+    public SerialFuture() {\n+        this(null);\n+    }\n+\n+    /**\n+     * Executes submitted {@link Callable} action asynchronously in sequence.\n+     * @param action An asynchronous {@link Callable} action to be executed in sequence.\n+     *               It returns {@link CompletionStage} that produces the final result when the action\n+     *               completes.\n+     * @return Returns a new {@link CompletionStage} with the same result or exception as the {@code action},\n+     *         that executes the given action when this stage completes.\n+     */\n+    public synchronized <V> CompletionStage<V> executeAsync(Callable<CompletionStage<V>> action) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NjY2OQ=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTc0ODE5Nw==", "bodyText": "No problem with that.", "url": "https://github.com/line/armeria/pull/2840#discussion_r561748197", "createdAt": "2021-01-21T10:05:44Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+@UnstableApi\n+public class SerialFuture {\n+\n+    private final Queue<Runnable> actions = new LinkedList<>();\n+\n+    @Nullable\n+    private Runnable active;\n+\n+    @Nullable\n+    Executor executor;\n+\n+    /**\n+     * Constructs {@link SerialFuture} with a supplied {@link Executor}.\n+     * @param executor An {@link Executor} to execute asynchronous actions.\n+     */\n+    public SerialFuture(@Nullable Executor executor) {\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Constructs {@link SerialFuture}.\n+     */\n+    public SerialFuture() {\n+        this(null);\n+    }\n+\n+    /**\n+     * Executes submitted {@link Callable} action asynchronously in sequence.\n+     * @param action An asynchronous {@link Callable} action to be executed in sequence.\n+     *               It returns {@link CompletionStage} that produces the final result when the action\n+     *               completes.\n+     * @return Returns a new {@link CompletionStage} with the same result or exception as the {@code action},\n+     *         that executes the given action when this stage completes.\n+     */\n+    public synchronized <V> CompletionStage<V> executeAsync(Callable<CompletionStage<V>> action) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NjY2OQ=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzA2NjE5OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessToken.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOTowMDozOFrOIO2tJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNToxMTozNVrOIQVfOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NzI3MA==", "bodyText": "Would it be better renaming to parse(..)?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552447270", "createdAt": "2021-01-06T09:00:38Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.DEFAULT_TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_IN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.REFRESH_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.CaseUtil;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+@UnstableApi\n+public class GrantedOAuth2AccessToken implements Serializable {\n+\n+    private static final long serialVersionUID = 8698118404098897958L;\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessToken} based on the {@code JSON}-formatted raw response body and\n+     * optional raw formatted {@code scope} used to request the token.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @param requestScope OPTIONAL. A list of space-delimited, case-sensitive strings.\n+     *                     The strings are defined by the authorization server.\n+     *                     The authorization server MAY fully or partially ignore the scope requested by the\n+     *                     client, based on the authorization server policy or the resource owner's\n+     *                     instructions. If the issued access token scope is different from the one requested\n+     *                     by the client, the authorization server MUST include the \"scope\" response\n+     *                     parameter to inform the client of the actual scope granted.\n+     *                     If the client omits the scope parameter when requesting authorization, the\n+     *                     authorization server MUST either process the request using a pre-defined default\n+     *                     value or fail the request indicating an invalid scope.\n+     * @return A new instance of {@link GrantedOAuth2AccessToken}.\n+     */\n+    public static GrantedOAuth2AccessToken of(String rawResponse, @Nullable String requestScope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDAwMDE4NA==", "bodyText": "agree. changed", "url": "https://github.com/line/armeria/pull/2840#discussion_r554000184", "createdAt": "2021-01-08T15:11:35Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.DEFAULT_TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_IN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.REFRESH_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.CaseUtil;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+@UnstableApi\n+public class GrantedOAuth2AccessToken implements Serializable {\n+\n+    private static final long serialVersionUID = 8698118404098897958L;\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessToken} based on the {@code JSON}-formatted raw response body and\n+     * optional raw formatted {@code scope} used to request the token.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @param requestScope OPTIONAL. A list of space-delimited, case-sensitive strings.\n+     *                     The strings are defined by the authorization server.\n+     *                     The authorization server MAY fully or partially ignore the scope requested by the\n+     *                     client, based on the authorization server policy or the resource owner's\n+     *                     instructions. If the issued access token scope is different from the one requested\n+     *                     by the client, the authorization server MUST include the \"scope\" response\n+     *                     parameter to inform the client of the actual scope granted.\n+     *                     If the client omits the scope parameter when requesting authorization, the\n+     *                     authorization server MUST either process the request using a pre-defined default\n+     *                     value or fail the request indicating an invalid scope.\n+     * @return A new instance of {@link GrantedOAuth2AccessToken}.\n+     */\n+    public static GrantedOAuth2AccessToken of(String rawResponse, @Nullable String requestScope) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NzI3MA=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzA2Njk3OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessTokenBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOTowMDo1NlrOIO2trA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNToxMTo0OVrOIQVf1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NzQwNA==", "bodyText": "parse(...)?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552447404", "createdAt": "2021-01-06T09:00:56Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessTokenBuilder.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.ISSUED_AT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SCOPE_SEPARATOR;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_IN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.REFRESH_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Builds an instance of {@link GrantedOAuth2AccessToken}.\n+ */\n+@UnstableApi\n+public final class GrantedOAuth2AccessTokenBuilder {\n+\n+    private static final TypeReference<LinkedHashMap<String, String>> MAP_TYPE =\n+            new TypeReference<LinkedHashMap<String, String>>() {};\n+\n+    static GrantedOAuth2AccessToken of(String rawResponse, @Nullable String requestScope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDAwMDM0MQ==", "bodyText": "agree. changed", "url": "https://github.com/line/armeria/pull/2840#discussion_r554000341", "createdAt": "2021-01-08T15:11:49Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessTokenBuilder.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.ISSUED_AT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SCOPE_SEPARATOR;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_IN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.REFRESH_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Builds an instance of {@link GrantedOAuth2AccessToken}.\n+ */\n+@UnstableApi\n+public final class GrantedOAuth2AccessTokenBuilder {\n+\n+    private static final TypeReference<LinkedHashMap<String, String>> MAP_TYPE =\n+            new TypeReference<LinkedHashMap<String, String>>() {};\n+\n+    static GrantedOAuth2AccessToken of(String rawResponse, @Nullable String requestScope) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NzQwNA=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzA5MzgyOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRevocation.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOTowOTowMVrOIO29NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxMDowNToyMlrOIXuX0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ1MTM4MQ==", "bodyText": "This class doesn't seem to be used anywhere. Is this something you're gonna use in your follow-up PR?\nIs this class meant to be used by a user? If not, we could move it to internal.common.auth.oauth2 package.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552451381", "createdAt": "2021-01-06T09:09:01Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRevocation.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.REFRESH_TOKEN;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.TokenRevocationRequest;\n+\n+/**\n+ * Implements Token Revocation request/response flow,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc7009\">[RFC7009]</a>.\n+ */\n+@UnstableApi\n+public final class TokenRevocation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDAwMzYyNg==", "bodyText": "Yes, this class is meant to be used directly by the user, either on the server or on the client side. Token revocation capability is an important part of OAuth 2.", "url": "https://github.com/line/armeria/pull/2840#discussion_r554003626", "createdAt": "2021-01-08T15:16:51Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRevocation.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.REFRESH_TOKEN;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.TokenRevocationRequest;\n+\n+/**\n+ * Implements Token Revocation request/response flow,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc7009\">[RFC7009]</a>.\n+ */\n+@UnstableApi\n+public final class TokenRevocation {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ1MTM4MQ=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTc0NzkyMA==", "bodyText": "Excellent. Sounds good to me.", "url": "https://github.com/line/armeria/pull/2840#discussion_r561747920", "createdAt": "2021-01-21T10:05:22Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRevocation.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.REFRESH_TOKEN;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.TokenRevocationRequest;\n+\n+/**\n+ * Implements Token Revocation request/response flow,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc7009\">[RFC7009]</a>.\n+ */\n+@UnstableApi\n+public final class TokenRevocation {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ1MTM4MQ=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzExMDAxOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessTokenBuilder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOToxMzo1OVrOIO3Glg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxMDowNDo1N1rOIXuW3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ1Mzc4Mg==", "bodyText": "Should we rename to scopes()?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552453782", "createdAt": "2021-01-06T09:13:59Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessTokenBuilder.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.ISSUED_AT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SCOPE_SEPARATOR;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_IN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.REFRESH_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Builds an instance of {@link GrantedOAuth2AccessToken}.\n+ */\n+@UnstableApi\n+public final class GrantedOAuth2AccessTokenBuilder {\n+\n+    private static final TypeReference<LinkedHashMap<String, String>> MAP_TYPE =\n+            new TypeReference<LinkedHashMap<String, String>>() {};\n+\n+    static GrantedOAuth2AccessToken of(String rawResponse, @Nullable String requestScope) {\n+\n+        final LinkedHashMap<String, String> map;\n+        try {\n+            map = JSON.readValue(requireNonNull(rawResponse, \"rawResponse\"), MAP_TYPE);\n+        } catch (JsonProcessingException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        final GrantedOAuth2AccessTokenBuilder builder =\n+                new GrantedOAuth2AccessTokenBuilder(requireNonNull(map.remove(ACCESS_TOKEN), ACCESS_TOKEN));\n+\n+        final String tokenType = map.remove(TOKEN_TYPE);\n+        if (tokenType != null) {\n+            builder.tokenType(tokenType);\n+        }\n+        final String issuedAt = map.remove(ISSUED_AT);\n+        if (issuedAt != null) {\n+            builder.issuedAt(ISO_INSTANT.parse(issuedAt, Instant::from));\n+        }\n+        final String expiresIn = map.remove(EXPIRES_IN);\n+        if (expiresIn != null) {\n+            builder.expiresIn(Duration.ofSeconds(Long.parseLong(expiresIn)));\n+        }\n+        final String refreshToken = map.remove(REFRESH_TOKEN);\n+        if (refreshToken != null) {\n+            builder.refreshToken(refreshToken);\n+        }\n+        String scope = map.remove(SCOPE);\n+        if (scope == null) {\n+            scope = requestScope;\n+        }\n+        if (scope != null) {\n+            builder.scope(scope.split(SCOPE_SEPARATOR));\n+        }\n+        builder.extras(map);\n+\n+        builder.rawResponse(rawResponse);\n+\n+        return builder.build();\n+    }\n+\n+    private final String accessToken;\n+\n+    @Nullable\n+    private String tokenType;\n+\n+    @Nullable\n+    private Duration expiresIn;\n+\n+    @Nullable\n+    private String refreshToken;\n+\n+    private final ImmutableList.Builder<String> scope = ImmutableList.builder();\n+\n+    private final ImmutableMap.Builder<String, String> extras = ImmutableMap.builder();\n+\n+    @Nullable\n+    private Instant issuedAt;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    /**\n+     * Constructs a new instance of {@link GrantedOAuth2AccessTokenBuilder} given the mandatory value\n+     * {@value OAuth2Constants#ACCESS_TOKEN} of the access token issued by the authorization server.\n+     * @param accessToken {@value OAuth2Constants#ACCESS_TOKEN} Access Token response field,\n+     *                    REQUIRED. The access token issued by the authorization server.\n+     */\n+    GrantedOAuth2AccessTokenBuilder(String accessToken) {\n+        this.accessToken = requireNonNull(accessToken, \"accessToken\");\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#TOKEN_TYPE} Access Token response field,\n+     * REQUIRED. The type of the token issued as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     * Value is case insensitive.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder tokenType(String tokenType) {\n+        this.tokenType = requireNonNull(tokenType, \"tokenType\");\n+        return this;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#EXPIRES_IN} Access Token response field,\n+     * RECOMMENDED. {@link Duration} indicating the lifetime of the access token. For example,\n+     * the value 3600 seconds denotes that the access token will expire in one hour from the time\n+     * the response was generated. If omitted, the authorization server SHOULD provide the expiration\n+     * time via other means or document the default value.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder expiresIn(Duration expiresIn) {\n+        this.expiresIn = requireNonNull(expiresIn, \"expiresIn\");\n+        return this;\n+    }\n+\n+    /**\n+     * An {@link Instant} indicating when the Access Token was issued,\n+     * OPTIONAL. The value is NOT supplied with the Access Token response and calculated approximately using\n+     * {@value OAuth2Constants#EXPIRES_IN} field.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder issuedAt(Instant issuedAt) {\n+        this.issuedAt = requireNonNull(issuedAt, \"issuedAt\");\n+        return this;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#REFRESH_TOKEN} Access Token response field,\n+     * OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same\n+     * authorization grant as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder refreshToken(String refreshToken) {\n+        this.refreshToken = requireNonNull(refreshToken, \"refreshToken\");\n+        return this;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#SCOPE} Access Token Response field,\n+     * OPTIONAL. An {@link Iterable} of individual scope values.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder scope(Iterable<String> scope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDAwNDA1NA==", "bodyText": "scope is a set of roles/tokens, as per the spec. I wanted to be close to the spec and named it scope in multiple places.", "url": "https://github.com/line/armeria/pull/2840#discussion_r554004054", "createdAt": "2021-01-08T15:17:38Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessTokenBuilder.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.ISSUED_AT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SCOPE_SEPARATOR;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_IN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.REFRESH_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Builds an instance of {@link GrantedOAuth2AccessToken}.\n+ */\n+@UnstableApi\n+public final class GrantedOAuth2AccessTokenBuilder {\n+\n+    private static final TypeReference<LinkedHashMap<String, String>> MAP_TYPE =\n+            new TypeReference<LinkedHashMap<String, String>>() {};\n+\n+    static GrantedOAuth2AccessToken of(String rawResponse, @Nullable String requestScope) {\n+\n+        final LinkedHashMap<String, String> map;\n+        try {\n+            map = JSON.readValue(requireNonNull(rawResponse, \"rawResponse\"), MAP_TYPE);\n+        } catch (JsonProcessingException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        final GrantedOAuth2AccessTokenBuilder builder =\n+                new GrantedOAuth2AccessTokenBuilder(requireNonNull(map.remove(ACCESS_TOKEN), ACCESS_TOKEN));\n+\n+        final String tokenType = map.remove(TOKEN_TYPE);\n+        if (tokenType != null) {\n+            builder.tokenType(tokenType);\n+        }\n+        final String issuedAt = map.remove(ISSUED_AT);\n+        if (issuedAt != null) {\n+            builder.issuedAt(ISO_INSTANT.parse(issuedAt, Instant::from));\n+        }\n+        final String expiresIn = map.remove(EXPIRES_IN);\n+        if (expiresIn != null) {\n+            builder.expiresIn(Duration.ofSeconds(Long.parseLong(expiresIn)));\n+        }\n+        final String refreshToken = map.remove(REFRESH_TOKEN);\n+        if (refreshToken != null) {\n+            builder.refreshToken(refreshToken);\n+        }\n+        String scope = map.remove(SCOPE);\n+        if (scope == null) {\n+            scope = requestScope;\n+        }\n+        if (scope != null) {\n+            builder.scope(scope.split(SCOPE_SEPARATOR));\n+        }\n+        builder.extras(map);\n+\n+        builder.rawResponse(rawResponse);\n+\n+        return builder.build();\n+    }\n+\n+    private final String accessToken;\n+\n+    @Nullable\n+    private String tokenType;\n+\n+    @Nullable\n+    private Duration expiresIn;\n+\n+    @Nullable\n+    private String refreshToken;\n+\n+    private final ImmutableList.Builder<String> scope = ImmutableList.builder();\n+\n+    private final ImmutableMap.Builder<String, String> extras = ImmutableMap.builder();\n+\n+    @Nullable\n+    private Instant issuedAt;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    /**\n+     * Constructs a new instance of {@link GrantedOAuth2AccessTokenBuilder} given the mandatory value\n+     * {@value OAuth2Constants#ACCESS_TOKEN} of the access token issued by the authorization server.\n+     * @param accessToken {@value OAuth2Constants#ACCESS_TOKEN} Access Token response field,\n+     *                    REQUIRED. The access token issued by the authorization server.\n+     */\n+    GrantedOAuth2AccessTokenBuilder(String accessToken) {\n+        this.accessToken = requireNonNull(accessToken, \"accessToken\");\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#TOKEN_TYPE} Access Token response field,\n+     * REQUIRED. The type of the token issued as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     * Value is case insensitive.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder tokenType(String tokenType) {\n+        this.tokenType = requireNonNull(tokenType, \"tokenType\");\n+        return this;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#EXPIRES_IN} Access Token response field,\n+     * RECOMMENDED. {@link Duration} indicating the lifetime of the access token. For example,\n+     * the value 3600 seconds denotes that the access token will expire in one hour from the time\n+     * the response was generated. If omitted, the authorization server SHOULD provide the expiration\n+     * time via other means or document the default value.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder expiresIn(Duration expiresIn) {\n+        this.expiresIn = requireNonNull(expiresIn, \"expiresIn\");\n+        return this;\n+    }\n+\n+    /**\n+     * An {@link Instant} indicating when the Access Token was issued,\n+     * OPTIONAL. The value is NOT supplied with the Access Token response and calculated approximately using\n+     * {@value OAuth2Constants#EXPIRES_IN} field.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder issuedAt(Instant issuedAt) {\n+        this.issuedAt = requireNonNull(issuedAt, \"issuedAt\");\n+        return this;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#REFRESH_TOKEN} Access Token response field,\n+     * OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same\n+     * authorization grant as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder refreshToken(String refreshToken) {\n+        this.refreshToken = requireNonNull(refreshToken, \"refreshToken\");\n+        return this;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#SCOPE} Access Token Response field,\n+     * OPTIONAL. An {@link Iterable} of individual scope values.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder scope(Iterable<String> scope) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ1Mzc4Mg=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTc0NzY3OA==", "bodyText": "I see. Thanks a lot for education.", "url": "https://github.com/line/armeria/pull/2840#discussion_r561747678", "createdAt": "2021-01-21T10:04:57Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessTokenBuilder.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.ISSUED_AT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SCOPE_SEPARATOR;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_IN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.REFRESH_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Builds an instance of {@link GrantedOAuth2AccessToken}.\n+ */\n+@UnstableApi\n+public final class GrantedOAuth2AccessTokenBuilder {\n+\n+    private static final TypeReference<LinkedHashMap<String, String>> MAP_TYPE =\n+            new TypeReference<LinkedHashMap<String, String>>() {};\n+\n+    static GrantedOAuth2AccessToken of(String rawResponse, @Nullable String requestScope) {\n+\n+        final LinkedHashMap<String, String> map;\n+        try {\n+            map = JSON.readValue(requireNonNull(rawResponse, \"rawResponse\"), MAP_TYPE);\n+        } catch (JsonProcessingException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        final GrantedOAuth2AccessTokenBuilder builder =\n+                new GrantedOAuth2AccessTokenBuilder(requireNonNull(map.remove(ACCESS_TOKEN), ACCESS_TOKEN));\n+\n+        final String tokenType = map.remove(TOKEN_TYPE);\n+        if (tokenType != null) {\n+            builder.tokenType(tokenType);\n+        }\n+        final String issuedAt = map.remove(ISSUED_AT);\n+        if (issuedAt != null) {\n+            builder.issuedAt(ISO_INSTANT.parse(issuedAt, Instant::from));\n+        }\n+        final String expiresIn = map.remove(EXPIRES_IN);\n+        if (expiresIn != null) {\n+            builder.expiresIn(Duration.ofSeconds(Long.parseLong(expiresIn)));\n+        }\n+        final String refreshToken = map.remove(REFRESH_TOKEN);\n+        if (refreshToken != null) {\n+            builder.refreshToken(refreshToken);\n+        }\n+        String scope = map.remove(SCOPE);\n+        if (scope == null) {\n+            scope = requestScope;\n+        }\n+        if (scope != null) {\n+            builder.scope(scope.split(SCOPE_SEPARATOR));\n+        }\n+        builder.extras(map);\n+\n+        builder.rawResponse(rawResponse);\n+\n+        return builder.build();\n+    }\n+\n+    private final String accessToken;\n+\n+    @Nullable\n+    private String tokenType;\n+\n+    @Nullable\n+    private Duration expiresIn;\n+\n+    @Nullable\n+    private String refreshToken;\n+\n+    private final ImmutableList.Builder<String> scope = ImmutableList.builder();\n+\n+    private final ImmutableMap.Builder<String, String> extras = ImmutableMap.builder();\n+\n+    @Nullable\n+    private Instant issuedAt;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    /**\n+     * Constructs a new instance of {@link GrantedOAuth2AccessTokenBuilder} given the mandatory value\n+     * {@value OAuth2Constants#ACCESS_TOKEN} of the access token issued by the authorization server.\n+     * @param accessToken {@value OAuth2Constants#ACCESS_TOKEN} Access Token response field,\n+     *                    REQUIRED. The access token issued by the authorization server.\n+     */\n+    GrantedOAuth2AccessTokenBuilder(String accessToken) {\n+        this.accessToken = requireNonNull(accessToken, \"accessToken\");\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#TOKEN_TYPE} Access Token response field,\n+     * REQUIRED. The type of the token issued as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     * Value is case insensitive.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder tokenType(String tokenType) {\n+        this.tokenType = requireNonNull(tokenType, \"tokenType\");\n+        return this;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#EXPIRES_IN} Access Token response field,\n+     * RECOMMENDED. {@link Duration} indicating the lifetime of the access token. For example,\n+     * the value 3600 seconds denotes that the access token will expire in one hour from the time\n+     * the response was generated. If omitted, the authorization server SHOULD provide the expiration\n+     * time via other means or document the default value.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder expiresIn(Duration expiresIn) {\n+        this.expiresIn = requireNonNull(expiresIn, \"expiresIn\");\n+        return this;\n+    }\n+\n+    /**\n+     * An {@link Instant} indicating when the Access Token was issued,\n+     * OPTIONAL. The value is NOT supplied with the Access Token response and calculated approximately using\n+     * {@value OAuth2Constants#EXPIRES_IN} field.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder issuedAt(Instant issuedAt) {\n+        this.issuedAt = requireNonNull(issuedAt, \"issuedAt\");\n+        return this;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#REFRESH_TOKEN} Access Token response field,\n+     * OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same\n+     * authorization grant as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder refreshToken(String refreshToken) {\n+        this.refreshToken = requireNonNull(refreshToken, \"refreshToken\");\n+        return this;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#SCOPE} Access Token Response field,\n+     * OPTIONAL. An {@link Iterable} of individual scope values.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder scope(Iterable<String> scope) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ1Mzc4Mg=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NjE1MTk4OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidResponseException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMToxNDoyMlrOIZBbIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxNzo1Mzo1MFrOIZzPjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEwODY0MA==", "bodyText": "Incorrect class name?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563108640", "createdAt": "2021-01-23T11:14:22Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidResponseException.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * An HTTP response that is not valid for the given request/response flow.\n+ */\n+@UnstableApi\n+public class InvalidResponseException extends RuntimeException {\n+\n+    private static final long serialVersionUID = -6985569386139579552L;\n+\n+    private final String status;\n+\n+    /**\n+     * Constructs new {@link UnsupportedMediaTypeException}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5581c70d971f62eb34c2226861e6edadabd386d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkyNDg3Ng==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r563924876", "createdAt": "2021-01-25T17:53:50Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidResponseException.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * An HTTP response that is not valid for the given request/response flow.\n+ */\n+@UnstableApi\n+public class InvalidResponseException extends RuntimeException {\n+\n+    private static final long serialVersionUID = -6985569386139579552L;\n+\n+    private final String status;\n+\n+    /**\n+     * Constructs new {@link UnsupportedMediaTypeException}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEwODY0MA=="}, "originalCommit": {"oid": "e5581c70d971f62eb34c2226861e6edadabd386d"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NjE3MDI2OnYy", "diffSide": "RIGHT", "path": "oauth2/src/test/java/com/linecorp/armeria/internal/common/auth/oauth2/SerialFutureTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMToxODoyMlrOIZBnfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxODoxMzoyMFrOIfP67w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzExMTgwNA==", "bodyText": "Could just use AtomicInteger?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563111804", "createdAt": "2021-01-23T11:18:22Z", "author": {"login": "trustin"}, "path": "oauth2/src/test/java/com/linecorp/armeria/internal/common/auth/oauth2/SerialFutureTest.java", "diffHunk": "@@ -18,427 +18,263 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n import java.util.concurrent.Callable;\n import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Executor;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ForkJoinPool;\n+import java.util.function.IntFunction;\n+import java.util.stream.Collectors;\n \n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n \n public class SerialFutureTest {\n \n-    volatile int counter;\n-\n-    @Test\n-    void testExecuteAsyncWithExecutorInParallel1() throws Exception {\n-        final Executor executor = Executors.newWorkStealingPool();\n-        final SerialFuture serialFuture = new SerialFuture();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testExecuteAsync1(boolean withExecutor) throws Exception {\n+        final Executor executor = withExecutor ? Executors.newWorkStealingPool() : null;\n+        final SerialFuture serialFuture = new SerialFuture(executor);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n-\n-        // test action that allows invoking serialFuture#executeAsync(Callable) in parallel\n-        // use Executor to implement asynchronous Callable action\n-        final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.executeAsync(() ->\n-                CompletableFuture.supplyAsync(() -> {\n-                    int c = counter;\n-                    try {\n-                        Thread.sleep(timeout);\n-                    } catch (InterruptedException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                    c += 1;\n-                    counter = c;\n-                    return c;\n-                }, executor)\n-            ).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n-        }\n-\n-        // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n-        final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n-            try {\n-                return f.get();\n-            } catch (InterruptedException | ExecutionException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }).toArray(CompletableFuture[]::new);\n-\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n+\n+        final VolatileCounter counter = new VolatileCounter();\n+        final IntFunction<CompletableFuture<Integer>> testAction = i ->\n+                serialFuture.executeAsync(() -> timeoutAction(counter, inc, timeout)).toCompletableFuture();\n+        final CompletableFuture<?>[] futures = Arrays.stream(seq)\n+                                                     .mapToObj(testAction)\n+                                                     .toArray(CompletableFuture[]::new);\n         // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        assertThat(array).containsExactly(seq);\n     }\n \n-    @Test\n-    void testExecuteAsyncWithExecutorInParallel2() throws Exception {\n-        // execute all actions using dedicated Executor\n-        final Executor executor = Executors.newWorkStealingPool();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testExecuteAsyncInParallel1(boolean withExecutor) throws Exception {\n+        final Executor executor = withExecutor ? Executors.newWorkStealingPool() : null;\n         final SerialFuture serialFuture = new SerialFuture(executor);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n \n-        // test action that allows invoking serialFuture#executeAsync(Callable) in parallel\n+        final VolatileCounter counter = new VolatileCounter();\n+        // test action that allows invoking serialFuture#callAsync(Callable) in parallel\n         // use Executor as part of SerialFuture instance\n         final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.executeAsync(() ->\n-                CompletableFuture.supplyAsync(() -> {\n-                    int c = counter;\n-                    try {\n-                        Thread.sleep(timeout);\n-                    } catch (InterruptedException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                    c += 1;\n-                    counter = c;\n-                    return c;\n-                })\n-            ).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n-        }\n-\n+                serialFuture.executeAsync(() -> timeoutAction(counter, inc, timeout)).toCompletableFuture();\n+        final List<Callable<CompletableFuture<Integer>>> testActions = Arrays.stream(seq)\n+                                                                             .mapToObj(i -> testAction)\n+                                                                             .collect(Collectors.toList());\n         // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n+        final ForkJoinPool pool = new ForkJoinPool(count);\n         final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n             try {\n                 return f.get();\n             } catch (InterruptedException | ExecutionException e) {\n                 throw new RuntimeException(e);\n             }\n         }).toArray(CompletableFuture[]::new);\n+        // wait for all futures to complete\n+        CompletableFuture.allOf(futures).join();\n \n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures)\n+                                  .mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        System.out.println(Arrays.toString(array));\n+        assertThat(array).containsExactlyInAnyOrder(seq);\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testExecuteAsync2(boolean withExecutor) throws Exception {\n+        final Executor executor = Executors.newWorkStealingPool();\n+        final SerialFuture serialFuture = new SerialFuture(withExecutor ? executor : null);\n+\n+        final int inc = 1;\n+        final int count = 20;\n+        final long timeout = 10L;\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n+\n+        final VolatileCounter counter = new VolatileCounter();\n+        final IntFunction<CompletableFuture<Integer>> testAction = i ->\n+                serialFuture.executeAsync(() ->\n+                                                  CompletableFuture.supplyAsync(() ->\n+                                                                                        simpleTimeoutAction(\n+                                                                                                counter, inc,\n+                                                                                                timeout),\n+                                                                                executor))\n+                            .toCompletableFuture();\n+        final CompletableFuture<?>[] futures = Arrays.stream(seq)\n+                                                     .mapToObj(testAction)\n+                                                     .toArray(CompletableFuture[]::new);\n         // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        assertThat(array).containsExactly(seq);\n     }\n \n-    @Test\n-    void testExecuteAsyncWithoutExecutorInParallel() throws Exception {\n-        // do not use Executor, execute all actions from the invoker thread\n-        final SerialFuture serialFuture = new SerialFuture();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testExecuteAsyncInParallel2(boolean withExecutor) throws Exception {\n+        final Executor executor = Executors.newWorkStealingPool();\n+        final SerialFuture serialFuture = new SerialFuture(withExecutor ? executor : null);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n \n-        // test action that allows invoking serialFuture#executeAsync(Callable) in parallel\n+        final VolatileCounter counter = new VolatileCounter();\n+        // test action that allows invoking serialFuture#callAsync(Callable) in parallel\n+        // use Executor as part of SerialFuture instance\n         final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.executeAsync(() ->\n-                CompletableFuture.supplyAsync(() -> {\n-                    int c = counter;\n-                    try {\n-                        Thread.sleep(timeout);\n-                    } catch (InterruptedException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                    c += 1;\n-                    counter = c;\n-                    return c;\n-                })\n-            ).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n-        }\n-\n+                serialFuture.executeAsync(() ->\n+                                                  CompletableFuture.supplyAsync(() ->\n+                                                                                        simpleTimeoutAction(\n+                                                                                                counter, inc,\n+                                                                                                timeout),\n+                                                                                executor))\n+                            .toCompletableFuture();\n+        final List<Callable<CompletableFuture<Integer>>> testActions = Arrays.stream(seq)\n+                                                                             .mapToObj(i -> testAction)\n+                                                                             .collect(Collectors.toList());\n         // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n+        final ForkJoinPool pool = new ForkJoinPool(count);\n         final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n             try {\n                 return f.get();\n             } catch (InterruptedException | ExecutionException e) {\n                 throw new RuntimeException(e);\n             }\n         }).toArray(CompletableFuture[]::new);\n-\n         // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        System.out.println(Arrays.toString(array));\n+        assertThat(array).containsExactlyInAnyOrder(seq);\n     }\n \n-    @Test\n-    void testExecuteAsyncWithExecutor1() throws Exception {\n-        final Executor executor = Executors.newWorkStealingPool();\n-        final SerialFuture serialFuture = new SerialFuture();\n-\n-        final int n = 10;\n-        final long timeout = 10L;\n-        counter = 0;\n-\n-        final CompletableFuture<?>[] futures = new CompletableFuture<?>[n];\n-        // invoke serialFuture#executeAsync(Callable) one by one from the test thread\n-        // use Executor to implement asynchronous Callable action\n-        for (int i = 0; i < n; i++) {\n-            futures[i] = serialFuture.executeAsync(() ->\n-                CompletableFuture.supplyAsync(() -> {\n-                    int c = counter;\n-                    try {\n-                        Thread.sleep(timeout);\n-                    } catch (InterruptedException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                    c += 1;\n-                    counter = c;\n-                    return c;\n-                }, executor)\n-            ).toCompletableFuture();\n-        }\n-        CompletableFuture.allOf(futures).join();\n-\n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n-    }\n-\n-    @Test\n-    void testExecuteAsyncWithExecutor2() throws Exception {\n-        // execute all actions using dedicated Executor\n-        final Executor executor = Executors.newWorkStealingPool();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testCallAsync(boolean withExecutor) throws Exception {\n+        final Executor executor = withExecutor ? Executors.newWorkStealingPool() : null;\n         final SerialFuture serialFuture = new SerialFuture(executor);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n-\n-        final CompletableFuture<?>[] futures = new CompletableFuture<?>[n];\n-        // invoke serialFuture#executeAsync(Callable) one by one from the test thread\n-        // use Executor as part of SerialFuture instance\n-        for (int i = 0; i < n; i++) {\n-            futures[i] = serialFuture.executeAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return CompletableFuture.completedFuture(c);\n-            }).toCompletableFuture();\n-        }\n-        CompletableFuture.allOf(futures).join();\n-\n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n-    }\n-\n-    @Test\n-    void testExecuteAsyncWithoutExecutor() throws Exception {\n-        final SerialFuture serialFuture = new SerialFuture();\n-\n-        final int n = 10;\n-        final long timeout = 10L;\n-        counter = 0;\n-\n-        final CompletableFuture<?>[] futures = new CompletableFuture<?>[n];\n-        // invoke serialFuture#executeAsync(Callable) one by one from the test thread\n-        // do not use Executor, execute all actions from the invoker thread\n-        for (int i = 0; i < n; i++) {\n-            futures[i] = serialFuture.executeAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return CompletableFuture.completedFuture(c);\n-            }).toCompletableFuture();\n-        }\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n+\n+        final VolatileCounter counter = new VolatileCounter();\n+        final IntFunction<CompletableFuture<Integer>> testAction = i ->\n+                serialFuture.callAsync(() -> simpleTimeoutAction(counter, inc, timeout)).toCompletableFuture();\n+        final CompletableFuture<?>[] futures = Arrays.stream(seq)\n+                                                     .mapToObj(testAction)\n+                                                     .toArray(CompletableFuture[]::new);\n+        // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        assertThat(array).containsExactly(seq);\n     }\n \n-    @Test\n-    void testCallAsyncWithExecutorInParallel() throws Exception {\n-        // execute all actions using dedicated Executor\n-        final Executor executor = Executors.newWorkStealingPool();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testCallAsyncInParallel(boolean withExecutor) throws Exception {\n+        final Executor executor = withExecutor ? Executors.newWorkStealingPool() : null;\n         final SerialFuture serialFuture = new SerialFuture(executor);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n \n+        final VolatileCounter counter = new VolatileCounter();\n         // test action that allows invoking serialFuture#callAsync(Callable) in parallel\n         // use Executor as part of SerialFuture instance\n         final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.callAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return c;\n-            }).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n-        }\n-\n+                serialFuture.callAsync(() -> simpleTimeoutAction(counter, inc, timeout)).toCompletableFuture();\n+        final List<Callable<CompletableFuture<Integer>>> testActions = Arrays.stream(seq)\n+                                                                             .mapToObj(i -> testAction)\n+                                                                             .collect(Collectors.toList());\n         // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n+        final ForkJoinPool pool = new ForkJoinPool(count);\n         final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n             try {\n                 return f.get();\n             } catch (InterruptedException | ExecutionException e) {\n                 throw new RuntimeException(e);\n             }\n         }).toArray(CompletableFuture[]::new);\n-\n         // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        System.out.println(Arrays.toString(array));\n+        assertThat(array).containsExactlyInAnyOrder(seq);\n     }\n \n-    @Test\n-    void testCallAsyncWithoutExecutorInParallel() throws Exception {\n-        // do not use Executor, execute all actions from the invoker thread\n-        final SerialFuture serialFuture = new SerialFuture();\n-\n-        final int n = 10;\n-        final long timeout = 10L;\n-        counter = 0;\n-\n-        // test action that allows invoking serialFuture#callAsync(Callable) in parallel\n-        final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.callAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return c;\n-            }).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n+    private static int simpleTimeoutAction(VolatileCounter counter, int inc, long timeout) {\n+        int c = counter.get();\n+        try {\n+            Thread.sleep(timeout);\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(e);\n         }\n-\n-        // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n-        final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n-            try {\n-                return f.get();\n-            } catch (InterruptedException | ExecutionException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }).toArray(CompletableFuture[]::new);\n-\n-        // wait for all futures to complete\n-        CompletableFuture.allOf(futures).join();\n-\n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        c += inc;\n+        counter.set(c);\n+        return c;\n     }\n \n-    @Test\n-    void testCallAsyncWithExecutor() throws Exception {\n-        // execute all actions using dedicated Executor\n-        final Executor executor = Executors.newWorkStealingPool();\n-        final SerialFuture serialFuture = new SerialFuture(executor);\n-\n-        final int n = 10;\n-        final long timeout = 10L;\n-        counter = 0;\n+    private static CompletionStage<Integer> timeoutAction(VolatileCounter counter, int inc, long timeout) {\n+        return CompletableFuture.completedFuture(simpleTimeoutAction(counter, inc, timeout));\n+    }\n \n-        final CompletableFuture<?>[] futures = new CompletableFuture<?>[n];\n-        // invoke serialFuture#callAsync(Callable) one by one from the test thread\n-        // use Executor as part of SerialFuture instance\n-        for (int i = 0; i < n; i++) {\n-            futures[i] = serialFuture.callAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return c;\n-            }).toCompletableFuture();\n+    private static int[] createArithmeticSequence(int start, int inc, int count) {\n+        final int[] seq = new int[count];\n+        int current = start;\n+        for (int i = 0; i < count; i++) {\n+            seq[i] = current;\n+            current += inc;\n         }\n-        CompletableFuture.allOf(futures).join();\n-\n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        return seq;\n     }\n \n-    @Test\n-    void testCallAsyncWithoutExecutor() throws Exception {\n-        final SerialFuture serialFuture = new SerialFuture();\n+    private static final class VolatileCounter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 548}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkyNzAwMA==", "bodyText": "It could, but I did not want to add any synchronization to impact the test. Do you have any particular concern?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563927000", "createdAt": "2021-01-25T17:56:20Z", "author": {"login": "max904-github"}, "path": "oauth2/src/test/java/com/linecorp/armeria/internal/common/auth/oauth2/SerialFutureTest.java", "diffHunk": "@@ -18,427 +18,263 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n import java.util.concurrent.Callable;\n import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Executor;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ForkJoinPool;\n+import java.util.function.IntFunction;\n+import java.util.stream.Collectors;\n \n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n \n public class SerialFutureTest {\n \n-    volatile int counter;\n-\n-    @Test\n-    void testExecuteAsyncWithExecutorInParallel1() throws Exception {\n-        final Executor executor = Executors.newWorkStealingPool();\n-        final SerialFuture serialFuture = new SerialFuture();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testExecuteAsync1(boolean withExecutor) throws Exception {\n+        final Executor executor = withExecutor ? Executors.newWorkStealingPool() : null;\n+        final SerialFuture serialFuture = new SerialFuture(executor);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n-\n-        // test action that allows invoking serialFuture#executeAsync(Callable) in parallel\n-        // use Executor to implement asynchronous Callable action\n-        final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.executeAsync(() ->\n-                CompletableFuture.supplyAsync(() -> {\n-                    int c = counter;\n-                    try {\n-                        Thread.sleep(timeout);\n-                    } catch (InterruptedException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                    c += 1;\n-                    counter = c;\n-                    return c;\n-                }, executor)\n-            ).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n-        }\n-\n-        // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n-        final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n-            try {\n-                return f.get();\n-            } catch (InterruptedException | ExecutionException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }).toArray(CompletableFuture[]::new);\n-\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n+\n+        final VolatileCounter counter = new VolatileCounter();\n+        final IntFunction<CompletableFuture<Integer>> testAction = i ->\n+                serialFuture.executeAsync(() -> timeoutAction(counter, inc, timeout)).toCompletableFuture();\n+        final CompletableFuture<?>[] futures = Arrays.stream(seq)\n+                                                     .mapToObj(testAction)\n+                                                     .toArray(CompletableFuture[]::new);\n         // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        assertThat(array).containsExactly(seq);\n     }\n \n-    @Test\n-    void testExecuteAsyncWithExecutorInParallel2() throws Exception {\n-        // execute all actions using dedicated Executor\n-        final Executor executor = Executors.newWorkStealingPool();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testExecuteAsyncInParallel1(boolean withExecutor) throws Exception {\n+        final Executor executor = withExecutor ? Executors.newWorkStealingPool() : null;\n         final SerialFuture serialFuture = new SerialFuture(executor);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n \n-        // test action that allows invoking serialFuture#executeAsync(Callable) in parallel\n+        final VolatileCounter counter = new VolatileCounter();\n+        // test action that allows invoking serialFuture#callAsync(Callable) in parallel\n         // use Executor as part of SerialFuture instance\n         final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.executeAsync(() ->\n-                CompletableFuture.supplyAsync(() -> {\n-                    int c = counter;\n-                    try {\n-                        Thread.sleep(timeout);\n-                    } catch (InterruptedException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                    c += 1;\n-                    counter = c;\n-                    return c;\n-                })\n-            ).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n-        }\n-\n+                serialFuture.executeAsync(() -> timeoutAction(counter, inc, timeout)).toCompletableFuture();\n+        final List<Callable<CompletableFuture<Integer>>> testActions = Arrays.stream(seq)\n+                                                                             .mapToObj(i -> testAction)\n+                                                                             .collect(Collectors.toList());\n         // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n+        final ForkJoinPool pool = new ForkJoinPool(count);\n         final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n             try {\n                 return f.get();\n             } catch (InterruptedException | ExecutionException e) {\n                 throw new RuntimeException(e);\n             }\n         }).toArray(CompletableFuture[]::new);\n+        // wait for all futures to complete\n+        CompletableFuture.allOf(futures).join();\n \n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures)\n+                                  .mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        System.out.println(Arrays.toString(array));\n+        assertThat(array).containsExactlyInAnyOrder(seq);\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testExecuteAsync2(boolean withExecutor) throws Exception {\n+        final Executor executor = Executors.newWorkStealingPool();\n+        final SerialFuture serialFuture = new SerialFuture(withExecutor ? executor : null);\n+\n+        final int inc = 1;\n+        final int count = 20;\n+        final long timeout = 10L;\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n+\n+        final VolatileCounter counter = new VolatileCounter();\n+        final IntFunction<CompletableFuture<Integer>> testAction = i ->\n+                serialFuture.executeAsync(() ->\n+                                                  CompletableFuture.supplyAsync(() ->\n+                                                                                        simpleTimeoutAction(\n+                                                                                                counter, inc,\n+                                                                                                timeout),\n+                                                                                executor))\n+                            .toCompletableFuture();\n+        final CompletableFuture<?>[] futures = Arrays.stream(seq)\n+                                                     .mapToObj(testAction)\n+                                                     .toArray(CompletableFuture[]::new);\n         // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        assertThat(array).containsExactly(seq);\n     }\n \n-    @Test\n-    void testExecuteAsyncWithoutExecutorInParallel() throws Exception {\n-        // do not use Executor, execute all actions from the invoker thread\n-        final SerialFuture serialFuture = new SerialFuture();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testExecuteAsyncInParallel2(boolean withExecutor) throws Exception {\n+        final Executor executor = Executors.newWorkStealingPool();\n+        final SerialFuture serialFuture = new SerialFuture(withExecutor ? executor : null);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n \n-        // test action that allows invoking serialFuture#executeAsync(Callable) in parallel\n+        final VolatileCounter counter = new VolatileCounter();\n+        // test action that allows invoking serialFuture#callAsync(Callable) in parallel\n+        // use Executor as part of SerialFuture instance\n         final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.executeAsync(() ->\n-                CompletableFuture.supplyAsync(() -> {\n-                    int c = counter;\n-                    try {\n-                        Thread.sleep(timeout);\n-                    } catch (InterruptedException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                    c += 1;\n-                    counter = c;\n-                    return c;\n-                })\n-            ).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n-        }\n-\n+                serialFuture.executeAsync(() ->\n+                                                  CompletableFuture.supplyAsync(() ->\n+                                                                                        simpleTimeoutAction(\n+                                                                                                counter, inc,\n+                                                                                                timeout),\n+                                                                                executor))\n+                            .toCompletableFuture();\n+        final List<Callable<CompletableFuture<Integer>>> testActions = Arrays.stream(seq)\n+                                                                             .mapToObj(i -> testAction)\n+                                                                             .collect(Collectors.toList());\n         // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n+        final ForkJoinPool pool = new ForkJoinPool(count);\n         final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n             try {\n                 return f.get();\n             } catch (InterruptedException | ExecutionException e) {\n                 throw new RuntimeException(e);\n             }\n         }).toArray(CompletableFuture[]::new);\n-\n         // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        System.out.println(Arrays.toString(array));\n+        assertThat(array).containsExactlyInAnyOrder(seq);\n     }\n \n-    @Test\n-    void testExecuteAsyncWithExecutor1() throws Exception {\n-        final Executor executor = Executors.newWorkStealingPool();\n-        final SerialFuture serialFuture = new SerialFuture();\n-\n-        final int n = 10;\n-        final long timeout = 10L;\n-        counter = 0;\n-\n-        final CompletableFuture<?>[] futures = new CompletableFuture<?>[n];\n-        // invoke serialFuture#executeAsync(Callable) one by one from the test thread\n-        // use Executor to implement asynchronous Callable action\n-        for (int i = 0; i < n; i++) {\n-            futures[i] = serialFuture.executeAsync(() ->\n-                CompletableFuture.supplyAsync(() -> {\n-                    int c = counter;\n-                    try {\n-                        Thread.sleep(timeout);\n-                    } catch (InterruptedException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                    c += 1;\n-                    counter = c;\n-                    return c;\n-                }, executor)\n-            ).toCompletableFuture();\n-        }\n-        CompletableFuture.allOf(futures).join();\n-\n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n-    }\n-\n-    @Test\n-    void testExecuteAsyncWithExecutor2() throws Exception {\n-        // execute all actions using dedicated Executor\n-        final Executor executor = Executors.newWorkStealingPool();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testCallAsync(boolean withExecutor) throws Exception {\n+        final Executor executor = withExecutor ? Executors.newWorkStealingPool() : null;\n         final SerialFuture serialFuture = new SerialFuture(executor);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n-\n-        final CompletableFuture<?>[] futures = new CompletableFuture<?>[n];\n-        // invoke serialFuture#executeAsync(Callable) one by one from the test thread\n-        // use Executor as part of SerialFuture instance\n-        for (int i = 0; i < n; i++) {\n-            futures[i] = serialFuture.executeAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return CompletableFuture.completedFuture(c);\n-            }).toCompletableFuture();\n-        }\n-        CompletableFuture.allOf(futures).join();\n-\n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n-    }\n-\n-    @Test\n-    void testExecuteAsyncWithoutExecutor() throws Exception {\n-        final SerialFuture serialFuture = new SerialFuture();\n-\n-        final int n = 10;\n-        final long timeout = 10L;\n-        counter = 0;\n-\n-        final CompletableFuture<?>[] futures = new CompletableFuture<?>[n];\n-        // invoke serialFuture#executeAsync(Callable) one by one from the test thread\n-        // do not use Executor, execute all actions from the invoker thread\n-        for (int i = 0; i < n; i++) {\n-            futures[i] = serialFuture.executeAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return CompletableFuture.completedFuture(c);\n-            }).toCompletableFuture();\n-        }\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n+\n+        final VolatileCounter counter = new VolatileCounter();\n+        final IntFunction<CompletableFuture<Integer>> testAction = i ->\n+                serialFuture.callAsync(() -> simpleTimeoutAction(counter, inc, timeout)).toCompletableFuture();\n+        final CompletableFuture<?>[] futures = Arrays.stream(seq)\n+                                                     .mapToObj(testAction)\n+                                                     .toArray(CompletableFuture[]::new);\n+        // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        assertThat(array).containsExactly(seq);\n     }\n \n-    @Test\n-    void testCallAsyncWithExecutorInParallel() throws Exception {\n-        // execute all actions using dedicated Executor\n-        final Executor executor = Executors.newWorkStealingPool();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testCallAsyncInParallel(boolean withExecutor) throws Exception {\n+        final Executor executor = withExecutor ? Executors.newWorkStealingPool() : null;\n         final SerialFuture serialFuture = new SerialFuture(executor);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n \n+        final VolatileCounter counter = new VolatileCounter();\n         // test action that allows invoking serialFuture#callAsync(Callable) in parallel\n         // use Executor as part of SerialFuture instance\n         final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.callAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return c;\n-            }).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n-        }\n-\n+                serialFuture.callAsync(() -> simpleTimeoutAction(counter, inc, timeout)).toCompletableFuture();\n+        final List<Callable<CompletableFuture<Integer>>> testActions = Arrays.stream(seq)\n+                                                                             .mapToObj(i -> testAction)\n+                                                                             .collect(Collectors.toList());\n         // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n+        final ForkJoinPool pool = new ForkJoinPool(count);\n         final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n             try {\n                 return f.get();\n             } catch (InterruptedException | ExecutionException e) {\n                 throw new RuntimeException(e);\n             }\n         }).toArray(CompletableFuture[]::new);\n-\n         // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        System.out.println(Arrays.toString(array));\n+        assertThat(array).containsExactlyInAnyOrder(seq);\n     }\n \n-    @Test\n-    void testCallAsyncWithoutExecutorInParallel() throws Exception {\n-        // do not use Executor, execute all actions from the invoker thread\n-        final SerialFuture serialFuture = new SerialFuture();\n-\n-        final int n = 10;\n-        final long timeout = 10L;\n-        counter = 0;\n-\n-        // test action that allows invoking serialFuture#callAsync(Callable) in parallel\n-        final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.callAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return c;\n-            }).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n+    private static int simpleTimeoutAction(VolatileCounter counter, int inc, long timeout) {\n+        int c = counter.get();\n+        try {\n+            Thread.sleep(timeout);\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(e);\n         }\n-\n-        // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n-        final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n-            try {\n-                return f.get();\n-            } catch (InterruptedException | ExecutionException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }).toArray(CompletableFuture[]::new);\n-\n-        // wait for all futures to complete\n-        CompletableFuture.allOf(futures).join();\n-\n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        c += inc;\n+        counter.set(c);\n+        return c;\n     }\n \n-    @Test\n-    void testCallAsyncWithExecutor() throws Exception {\n-        // execute all actions using dedicated Executor\n-        final Executor executor = Executors.newWorkStealingPool();\n-        final SerialFuture serialFuture = new SerialFuture(executor);\n-\n-        final int n = 10;\n-        final long timeout = 10L;\n-        counter = 0;\n+    private static CompletionStage<Integer> timeoutAction(VolatileCounter counter, int inc, long timeout) {\n+        return CompletableFuture.completedFuture(simpleTimeoutAction(counter, inc, timeout));\n+    }\n \n-        final CompletableFuture<?>[] futures = new CompletableFuture<?>[n];\n-        // invoke serialFuture#callAsync(Callable) one by one from the test thread\n-        // use Executor as part of SerialFuture instance\n-        for (int i = 0; i < n; i++) {\n-            futures[i] = serialFuture.callAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return c;\n-            }).toCompletableFuture();\n+    private static int[] createArithmeticSequence(int start, int inc, int count) {\n+        final int[] seq = new int[count];\n+        int current = start;\n+        for (int i = 0; i < count; i++) {\n+            seq[i] = current;\n+            current += inc;\n         }\n-        CompletableFuture.allOf(futures).join();\n-\n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        return seq;\n     }\n \n-    @Test\n-    void testCallAsyncWithoutExecutor() throws Exception {\n-        final SerialFuture serialFuture = new SerialFuture();\n+    private static final class VolatileCounter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzExMTgwNA=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 548}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTI0ODY0MA==", "bodyText": "AtomicInteger is just a container of a volatile integer, which basically is identical to VolatileCounter, i.e. no need to write a new class for this.", "url": "https://github.com/line/armeria/pull/2840#discussion_r565248640", "createdAt": "2021-01-27T11:53:09Z", "author": {"login": "trustin"}, "path": "oauth2/src/test/java/com/linecorp/armeria/internal/common/auth/oauth2/SerialFutureTest.java", "diffHunk": "@@ -18,427 +18,263 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n import java.util.concurrent.Callable;\n import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Executor;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ForkJoinPool;\n+import java.util.function.IntFunction;\n+import java.util.stream.Collectors;\n \n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n \n public class SerialFutureTest {\n \n-    volatile int counter;\n-\n-    @Test\n-    void testExecuteAsyncWithExecutorInParallel1() throws Exception {\n-        final Executor executor = Executors.newWorkStealingPool();\n-        final SerialFuture serialFuture = new SerialFuture();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testExecuteAsync1(boolean withExecutor) throws Exception {\n+        final Executor executor = withExecutor ? Executors.newWorkStealingPool() : null;\n+        final SerialFuture serialFuture = new SerialFuture(executor);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n-\n-        // test action that allows invoking serialFuture#executeAsync(Callable) in parallel\n-        // use Executor to implement asynchronous Callable action\n-        final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.executeAsync(() ->\n-                CompletableFuture.supplyAsync(() -> {\n-                    int c = counter;\n-                    try {\n-                        Thread.sleep(timeout);\n-                    } catch (InterruptedException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                    c += 1;\n-                    counter = c;\n-                    return c;\n-                }, executor)\n-            ).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n-        }\n-\n-        // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n-        final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n-            try {\n-                return f.get();\n-            } catch (InterruptedException | ExecutionException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }).toArray(CompletableFuture[]::new);\n-\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n+\n+        final VolatileCounter counter = new VolatileCounter();\n+        final IntFunction<CompletableFuture<Integer>> testAction = i ->\n+                serialFuture.executeAsync(() -> timeoutAction(counter, inc, timeout)).toCompletableFuture();\n+        final CompletableFuture<?>[] futures = Arrays.stream(seq)\n+                                                     .mapToObj(testAction)\n+                                                     .toArray(CompletableFuture[]::new);\n         // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        assertThat(array).containsExactly(seq);\n     }\n \n-    @Test\n-    void testExecuteAsyncWithExecutorInParallel2() throws Exception {\n-        // execute all actions using dedicated Executor\n-        final Executor executor = Executors.newWorkStealingPool();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testExecuteAsyncInParallel1(boolean withExecutor) throws Exception {\n+        final Executor executor = withExecutor ? Executors.newWorkStealingPool() : null;\n         final SerialFuture serialFuture = new SerialFuture(executor);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n \n-        // test action that allows invoking serialFuture#executeAsync(Callable) in parallel\n+        final VolatileCounter counter = new VolatileCounter();\n+        // test action that allows invoking serialFuture#callAsync(Callable) in parallel\n         // use Executor as part of SerialFuture instance\n         final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.executeAsync(() ->\n-                CompletableFuture.supplyAsync(() -> {\n-                    int c = counter;\n-                    try {\n-                        Thread.sleep(timeout);\n-                    } catch (InterruptedException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                    c += 1;\n-                    counter = c;\n-                    return c;\n-                })\n-            ).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n-        }\n-\n+                serialFuture.executeAsync(() -> timeoutAction(counter, inc, timeout)).toCompletableFuture();\n+        final List<Callable<CompletableFuture<Integer>>> testActions = Arrays.stream(seq)\n+                                                                             .mapToObj(i -> testAction)\n+                                                                             .collect(Collectors.toList());\n         // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n+        final ForkJoinPool pool = new ForkJoinPool(count);\n         final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n             try {\n                 return f.get();\n             } catch (InterruptedException | ExecutionException e) {\n                 throw new RuntimeException(e);\n             }\n         }).toArray(CompletableFuture[]::new);\n+        // wait for all futures to complete\n+        CompletableFuture.allOf(futures).join();\n \n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures)\n+                                  .mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        System.out.println(Arrays.toString(array));\n+        assertThat(array).containsExactlyInAnyOrder(seq);\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testExecuteAsync2(boolean withExecutor) throws Exception {\n+        final Executor executor = Executors.newWorkStealingPool();\n+        final SerialFuture serialFuture = new SerialFuture(withExecutor ? executor : null);\n+\n+        final int inc = 1;\n+        final int count = 20;\n+        final long timeout = 10L;\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n+\n+        final VolatileCounter counter = new VolatileCounter();\n+        final IntFunction<CompletableFuture<Integer>> testAction = i ->\n+                serialFuture.executeAsync(() ->\n+                                                  CompletableFuture.supplyAsync(() ->\n+                                                                                        simpleTimeoutAction(\n+                                                                                                counter, inc,\n+                                                                                                timeout),\n+                                                                                executor))\n+                            .toCompletableFuture();\n+        final CompletableFuture<?>[] futures = Arrays.stream(seq)\n+                                                     .mapToObj(testAction)\n+                                                     .toArray(CompletableFuture[]::new);\n         // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        assertThat(array).containsExactly(seq);\n     }\n \n-    @Test\n-    void testExecuteAsyncWithoutExecutorInParallel() throws Exception {\n-        // do not use Executor, execute all actions from the invoker thread\n-        final SerialFuture serialFuture = new SerialFuture();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testExecuteAsyncInParallel2(boolean withExecutor) throws Exception {\n+        final Executor executor = Executors.newWorkStealingPool();\n+        final SerialFuture serialFuture = new SerialFuture(withExecutor ? executor : null);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n \n-        // test action that allows invoking serialFuture#executeAsync(Callable) in parallel\n+        final VolatileCounter counter = new VolatileCounter();\n+        // test action that allows invoking serialFuture#callAsync(Callable) in parallel\n+        // use Executor as part of SerialFuture instance\n         final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.executeAsync(() ->\n-                CompletableFuture.supplyAsync(() -> {\n-                    int c = counter;\n-                    try {\n-                        Thread.sleep(timeout);\n-                    } catch (InterruptedException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                    c += 1;\n-                    counter = c;\n-                    return c;\n-                })\n-            ).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n-        }\n-\n+                serialFuture.executeAsync(() ->\n+                                                  CompletableFuture.supplyAsync(() ->\n+                                                                                        simpleTimeoutAction(\n+                                                                                                counter, inc,\n+                                                                                                timeout),\n+                                                                                executor))\n+                            .toCompletableFuture();\n+        final List<Callable<CompletableFuture<Integer>>> testActions = Arrays.stream(seq)\n+                                                                             .mapToObj(i -> testAction)\n+                                                                             .collect(Collectors.toList());\n         // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n+        final ForkJoinPool pool = new ForkJoinPool(count);\n         final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n             try {\n                 return f.get();\n             } catch (InterruptedException | ExecutionException e) {\n                 throw new RuntimeException(e);\n             }\n         }).toArray(CompletableFuture[]::new);\n-\n         // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        System.out.println(Arrays.toString(array));\n+        assertThat(array).containsExactlyInAnyOrder(seq);\n     }\n \n-    @Test\n-    void testExecuteAsyncWithExecutor1() throws Exception {\n-        final Executor executor = Executors.newWorkStealingPool();\n-        final SerialFuture serialFuture = new SerialFuture();\n-\n-        final int n = 10;\n-        final long timeout = 10L;\n-        counter = 0;\n-\n-        final CompletableFuture<?>[] futures = new CompletableFuture<?>[n];\n-        // invoke serialFuture#executeAsync(Callable) one by one from the test thread\n-        // use Executor to implement asynchronous Callable action\n-        for (int i = 0; i < n; i++) {\n-            futures[i] = serialFuture.executeAsync(() ->\n-                CompletableFuture.supplyAsync(() -> {\n-                    int c = counter;\n-                    try {\n-                        Thread.sleep(timeout);\n-                    } catch (InterruptedException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                    c += 1;\n-                    counter = c;\n-                    return c;\n-                }, executor)\n-            ).toCompletableFuture();\n-        }\n-        CompletableFuture.allOf(futures).join();\n-\n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n-    }\n-\n-    @Test\n-    void testExecuteAsyncWithExecutor2() throws Exception {\n-        // execute all actions using dedicated Executor\n-        final Executor executor = Executors.newWorkStealingPool();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testCallAsync(boolean withExecutor) throws Exception {\n+        final Executor executor = withExecutor ? Executors.newWorkStealingPool() : null;\n         final SerialFuture serialFuture = new SerialFuture(executor);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n-\n-        final CompletableFuture<?>[] futures = new CompletableFuture<?>[n];\n-        // invoke serialFuture#executeAsync(Callable) one by one from the test thread\n-        // use Executor as part of SerialFuture instance\n-        for (int i = 0; i < n; i++) {\n-            futures[i] = serialFuture.executeAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return CompletableFuture.completedFuture(c);\n-            }).toCompletableFuture();\n-        }\n-        CompletableFuture.allOf(futures).join();\n-\n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n-    }\n-\n-    @Test\n-    void testExecuteAsyncWithoutExecutor() throws Exception {\n-        final SerialFuture serialFuture = new SerialFuture();\n-\n-        final int n = 10;\n-        final long timeout = 10L;\n-        counter = 0;\n-\n-        final CompletableFuture<?>[] futures = new CompletableFuture<?>[n];\n-        // invoke serialFuture#executeAsync(Callable) one by one from the test thread\n-        // do not use Executor, execute all actions from the invoker thread\n-        for (int i = 0; i < n; i++) {\n-            futures[i] = serialFuture.executeAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return CompletableFuture.completedFuture(c);\n-            }).toCompletableFuture();\n-        }\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n+\n+        final VolatileCounter counter = new VolatileCounter();\n+        final IntFunction<CompletableFuture<Integer>> testAction = i ->\n+                serialFuture.callAsync(() -> simpleTimeoutAction(counter, inc, timeout)).toCompletableFuture();\n+        final CompletableFuture<?>[] futures = Arrays.stream(seq)\n+                                                     .mapToObj(testAction)\n+                                                     .toArray(CompletableFuture[]::new);\n+        // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        assertThat(array).containsExactly(seq);\n     }\n \n-    @Test\n-    void testCallAsyncWithExecutorInParallel() throws Exception {\n-        // execute all actions using dedicated Executor\n-        final Executor executor = Executors.newWorkStealingPool();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testCallAsyncInParallel(boolean withExecutor) throws Exception {\n+        final Executor executor = withExecutor ? Executors.newWorkStealingPool() : null;\n         final SerialFuture serialFuture = new SerialFuture(executor);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n \n+        final VolatileCounter counter = new VolatileCounter();\n         // test action that allows invoking serialFuture#callAsync(Callable) in parallel\n         // use Executor as part of SerialFuture instance\n         final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.callAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return c;\n-            }).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n-        }\n-\n+                serialFuture.callAsync(() -> simpleTimeoutAction(counter, inc, timeout)).toCompletableFuture();\n+        final List<Callable<CompletableFuture<Integer>>> testActions = Arrays.stream(seq)\n+                                                                             .mapToObj(i -> testAction)\n+                                                                             .collect(Collectors.toList());\n         // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n+        final ForkJoinPool pool = new ForkJoinPool(count);\n         final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n             try {\n                 return f.get();\n             } catch (InterruptedException | ExecutionException e) {\n                 throw new RuntimeException(e);\n             }\n         }).toArray(CompletableFuture[]::new);\n-\n         // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        System.out.println(Arrays.toString(array));\n+        assertThat(array).containsExactlyInAnyOrder(seq);\n     }\n \n-    @Test\n-    void testCallAsyncWithoutExecutorInParallel() throws Exception {\n-        // do not use Executor, execute all actions from the invoker thread\n-        final SerialFuture serialFuture = new SerialFuture();\n-\n-        final int n = 10;\n-        final long timeout = 10L;\n-        counter = 0;\n-\n-        // test action that allows invoking serialFuture#callAsync(Callable) in parallel\n-        final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.callAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return c;\n-            }).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n+    private static int simpleTimeoutAction(VolatileCounter counter, int inc, long timeout) {\n+        int c = counter.get();\n+        try {\n+            Thread.sleep(timeout);\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(e);\n         }\n-\n-        // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n-        final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n-            try {\n-                return f.get();\n-            } catch (InterruptedException | ExecutionException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }).toArray(CompletableFuture[]::new);\n-\n-        // wait for all futures to complete\n-        CompletableFuture.allOf(futures).join();\n-\n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        c += inc;\n+        counter.set(c);\n+        return c;\n     }\n \n-    @Test\n-    void testCallAsyncWithExecutor() throws Exception {\n-        // execute all actions using dedicated Executor\n-        final Executor executor = Executors.newWorkStealingPool();\n-        final SerialFuture serialFuture = new SerialFuture(executor);\n-\n-        final int n = 10;\n-        final long timeout = 10L;\n-        counter = 0;\n+    private static CompletionStage<Integer> timeoutAction(VolatileCounter counter, int inc, long timeout) {\n+        return CompletableFuture.completedFuture(simpleTimeoutAction(counter, inc, timeout));\n+    }\n \n-        final CompletableFuture<?>[] futures = new CompletableFuture<?>[n];\n-        // invoke serialFuture#callAsync(Callable) one by one from the test thread\n-        // use Executor as part of SerialFuture instance\n-        for (int i = 0; i < n; i++) {\n-            futures[i] = serialFuture.callAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return c;\n-            }).toCompletableFuture();\n+    private static int[] createArithmeticSequence(int start, int inc, int count) {\n+        final int[] seq = new int[count];\n+        int current = start;\n+        for (int i = 0; i < count; i++) {\n+            seq[i] = current;\n+            current += inc;\n         }\n-        CompletableFuture.allOf(futures).join();\n-\n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        return seq;\n     }\n \n-    @Test\n-    void testCallAsyncWithoutExecutor() throws Exception {\n-        final SerialFuture serialFuture = new SerialFuture();\n+    private static final class VolatileCounter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzExMTgwNA=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 548}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTYzNzYxNQ==", "bodyText": "Replaced with AtomicInteger", "url": "https://github.com/line/armeria/pull/2840#discussion_r569637615", "createdAt": "2021-02-03T18:13:20Z", "author": {"login": "max904-github"}, "path": "oauth2/src/test/java/com/linecorp/armeria/internal/common/auth/oauth2/SerialFutureTest.java", "diffHunk": "@@ -18,427 +18,263 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n import java.util.concurrent.Callable;\n import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Executor;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ForkJoinPool;\n+import java.util.function.IntFunction;\n+import java.util.stream.Collectors;\n \n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n \n public class SerialFutureTest {\n \n-    volatile int counter;\n-\n-    @Test\n-    void testExecuteAsyncWithExecutorInParallel1() throws Exception {\n-        final Executor executor = Executors.newWorkStealingPool();\n-        final SerialFuture serialFuture = new SerialFuture();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testExecuteAsync1(boolean withExecutor) throws Exception {\n+        final Executor executor = withExecutor ? Executors.newWorkStealingPool() : null;\n+        final SerialFuture serialFuture = new SerialFuture(executor);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n-\n-        // test action that allows invoking serialFuture#executeAsync(Callable) in parallel\n-        // use Executor to implement asynchronous Callable action\n-        final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.executeAsync(() ->\n-                CompletableFuture.supplyAsync(() -> {\n-                    int c = counter;\n-                    try {\n-                        Thread.sleep(timeout);\n-                    } catch (InterruptedException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                    c += 1;\n-                    counter = c;\n-                    return c;\n-                }, executor)\n-            ).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n-        }\n-\n-        // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n-        final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n-            try {\n-                return f.get();\n-            } catch (InterruptedException | ExecutionException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }).toArray(CompletableFuture[]::new);\n-\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n+\n+        final VolatileCounter counter = new VolatileCounter();\n+        final IntFunction<CompletableFuture<Integer>> testAction = i ->\n+                serialFuture.executeAsync(() -> timeoutAction(counter, inc, timeout)).toCompletableFuture();\n+        final CompletableFuture<?>[] futures = Arrays.stream(seq)\n+                                                     .mapToObj(testAction)\n+                                                     .toArray(CompletableFuture[]::new);\n         // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        assertThat(array).containsExactly(seq);\n     }\n \n-    @Test\n-    void testExecuteAsyncWithExecutorInParallel2() throws Exception {\n-        // execute all actions using dedicated Executor\n-        final Executor executor = Executors.newWorkStealingPool();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testExecuteAsyncInParallel1(boolean withExecutor) throws Exception {\n+        final Executor executor = withExecutor ? Executors.newWorkStealingPool() : null;\n         final SerialFuture serialFuture = new SerialFuture(executor);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n \n-        // test action that allows invoking serialFuture#executeAsync(Callable) in parallel\n+        final VolatileCounter counter = new VolatileCounter();\n+        // test action that allows invoking serialFuture#callAsync(Callable) in parallel\n         // use Executor as part of SerialFuture instance\n         final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.executeAsync(() ->\n-                CompletableFuture.supplyAsync(() -> {\n-                    int c = counter;\n-                    try {\n-                        Thread.sleep(timeout);\n-                    } catch (InterruptedException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                    c += 1;\n-                    counter = c;\n-                    return c;\n-                })\n-            ).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n-        }\n-\n+                serialFuture.executeAsync(() -> timeoutAction(counter, inc, timeout)).toCompletableFuture();\n+        final List<Callable<CompletableFuture<Integer>>> testActions = Arrays.stream(seq)\n+                                                                             .mapToObj(i -> testAction)\n+                                                                             .collect(Collectors.toList());\n         // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n+        final ForkJoinPool pool = new ForkJoinPool(count);\n         final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n             try {\n                 return f.get();\n             } catch (InterruptedException | ExecutionException e) {\n                 throw new RuntimeException(e);\n             }\n         }).toArray(CompletableFuture[]::new);\n+        // wait for all futures to complete\n+        CompletableFuture.allOf(futures).join();\n \n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures)\n+                                  .mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        System.out.println(Arrays.toString(array));\n+        assertThat(array).containsExactlyInAnyOrder(seq);\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testExecuteAsync2(boolean withExecutor) throws Exception {\n+        final Executor executor = Executors.newWorkStealingPool();\n+        final SerialFuture serialFuture = new SerialFuture(withExecutor ? executor : null);\n+\n+        final int inc = 1;\n+        final int count = 20;\n+        final long timeout = 10L;\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n+\n+        final VolatileCounter counter = new VolatileCounter();\n+        final IntFunction<CompletableFuture<Integer>> testAction = i ->\n+                serialFuture.executeAsync(() ->\n+                                                  CompletableFuture.supplyAsync(() ->\n+                                                                                        simpleTimeoutAction(\n+                                                                                                counter, inc,\n+                                                                                                timeout),\n+                                                                                executor))\n+                            .toCompletableFuture();\n+        final CompletableFuture<?>[] futures = Arrays.stream(seq)\n+                                                     .mapToObj(testAction)\n+                                                     .toArray(CompletableFuture[]::new);\n         // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        assertThat(array).containsExactly(seq);\n     }\n \n-    @Test\n-    void testExecuteAsyncWithoutExecutorInParallel() throws Exception {\n-        // do not use Executor, execute all actions from the invoker thread\n-        final SerialFuture serialFuture = new SerialFuture();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testExecuteAsyncInParallel2(boolean withExecutor) throws Exception {\n+        final Executor executor = Executors.newWorkStealingPool();\n+        final SerialFuture serialFuture = new SerialFuture(withExecutor ? executor : null);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n \n-        // test action that allows invoking serialFuture#executeAsync(Callable) in parallel\n+        final VolatileCounter counter = new VolatileCounter();\n+        // test action that allows invoking serialFuture#callAsync(Callable) in parallel\n+        // use Executor as part of SerialFuture instance\n         final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.executeAsync(() ->\n-                CompletableFuture.supplyAsync(() -> {\n-                    int c = counter;\n-                    try {\n-                        Thread.sleep(timeout);\n-                    } catch (InterruptedException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                    c += 1;\n-                    counter = c;\n-                    return c;\n-                })\n-            ).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n-        }\n-\n+                serialFuture.executeAsync(() ->\n+                                                  CompletableFuture.supplyAsync(() ->\n+                                                                                        simpleTimeoutAction(\n+                                                                                                counter, inc,\n+                                                                                                timeout),\n+                                                                                executor))\n+                            .toCompletableFuture();\n+        final List<Callable<CompletableFuture<Integer>>> testActions = Arrays.stream(seq)\n+                                                                             .mapToObj(i -> testAction)\n+                                                                             .collect(Collectors.toList());\n         // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n+        final ForkJoinPool pool = new ForkJoinPool(count);\n         final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n             try {\n                 return f.get();\n             } catch (InterruptedException | ExecutionException e) {\n                 throw new RuntimeException(e);\n             }\n         }).toArray(CompletableFuture[]::new);\n-\n         // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        System.out.println(Arrays.toString(array));\n+        assertThat(array).containsExactlyInAnyOrder(seq);\n     }\n \n-    @Test\n-    void testExecuteAsyncWithExecutor1() throws Exception {\n-        final Executor executor = Executors.newWorkStealingPool();\n-        final SerialFuture serialFuture = new SerialFuture();\n-\n-        final int n = 10;\n-        final long timeout = 10L;\n-        counter = 0;\n-\n-        final CompletableFuture<?>[] futures = new CompletableFuture<?>[n];\n-        // invoke serialFuture#executeAsync(Callable) one by one from the test thread\n-        // use Executor to implement asynchronous Callable action\n-        for (int i = 0; i < n; i++) {\n-            futures[i] = serialFuture.executeAsync(() ->\n-                CompletableFuture.supplyAsync(() -> {\n-                    int c = counter;\n-                    try {\n-                        Thread.sleep(timeout);\n-                    } catch (InterruptedException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                    c += 1;\n-                    counter = c;\n-                    return c;\n-                }, executor)\n-            ).toCompletableFuture();\n-        }\n-        CompletableFuture.allOf(futures).join();\n-\n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n-    }\n-\n-    @Test\n-    void testExecuteAsyncWithExecutor2() throws Exception {\n-        // execute all actions using dedicated Executor\n-        final Executor executor = Executors.newWorkStealingPool();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testCallAsync(boolean withExecutor) throws Exception {\n+        final Executor executor = withExecutor ? Executors.newWorkStealingPool() : null;\n         final SerialFuture serialFuture = new SerialFuture(executor);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n-\n-        final CompletableFuture<?>[] futures = new CompletableFuture<?>[n];\n-        // invoke serialFuture#executeAsync(Callable) one by one from the test thread\n-        // use Executor as part of SerialFuture instance\n-        for (int i = 0; i < n; i++) {\n-            futures[i] = serialFuture.executeAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return CompletableFuture.completedFuture(c);\n-            }).toCompletableFuture();\n-        }\n-        CompletableFuture.allOf(futures).join();\n-\n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n-    }\n-\n-    @Test\n-    void testExecuteAsyncWithoutExecutor() throws Exception {\n-        final SerialFuture serialFuture = new SerialFuture();\n-\n-        final int n = 10;\n-        final long timeout = 10L;\n-        counter = 0;\n-\n-        final CompletableFuture<?>[] futures = new CompletableFuture<?>[n];\n-        // invoke serialFuture#executeAsync(Callable) one by one from the test thread\n-        // do not use Executor, execute all actions from the invoker thread\n-        for (int i = 0; i < n; i++) {\n-            futures[i] = serialFuture.executeAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return CompletableFuture.completedFuture(c);\n-            }).toCompletableFuture();\n-        }\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n+\n+        final VolatileCounter counter = new VolatileCounter();\n+        final IntFunction<CompletableFuture<Integer>> testAction = i ->\n+                serialFuture.callAsync(() -> simpleTimeoutAction(counter, inc, timeout)).toCompletableFuture();\n+        final CompletableFuture<?>[] futures = Arrays.stream(seq)\n+                                                     .mapToObj(testAction)\n+                                                     .toArray(CompletableFuture[]::new);\n+        // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        assertThat(array).containsExactly(seq);\n     }\n \n-    @Test\n-    void testCallAsyncWithExecutorInParallel() throws Exception {\n-        // execute all actions using dedicated Executor\n-        final Executor executor = Executors.newWorkStealingPool();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testCallAsyncInParallel(boolean withExecutor) throws Exception {\n+        final Executor executor = withExecutor ? Executors.newWorkStealingPool() : null;\n         final SerialFuture serialFuture = new SerialFuture(executor);\n \n-        final int n = 10;\n+        final int inc = 1;\n+        final int count = 20;\n         final long timeout = 10L;\n-        counter = 0;\n+        final int[] seq = createArithmeticSequence(inc, inc, count);\n \n+        final VolatileCounter counter = new VolatileCounter();\n         // test action that allows invoking serialFuture#callAsync(Callable) in parallel\n         // use Executor as part of SerialFuture instance\n         final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.callAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return c;\n-            }).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n-        }\n-\n+                serialFuture.callAsync(() -> simpleTimeoutAction(counter, inc, timeout)).toCompletableFuture();\n+        final List<Callable<CompletableFuture<Integer>>> testActions = Arrays.stream(seq)\n+                                                                             .mapToObj(i -> testAction)\n+                                                                             .collect(Collectors.toList());\n         // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n+        final ForkJoinPool pool = new ForkJoinPool(count);\n         final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n             try {\n                 return f.get();\n             } catch (InterruptedException | ExecutionException e) {\n                 throw new RuntimeException(e);\n             }\n         }).toArray(CompletableFuture[]::new);\n-\n         // wait for all futures to complete\n         CompletableFuture.allOf(futures).join();\n \n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        assertThat(counter.get()).isEqualTo(count);\n+        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join())\n+                                  .toArray();\n+        System.out.println(Arrays.toString(array));\n+        assertThat(array).containsExactlyInAnyOrder(seq);\n     }\n \n-    @Test\n-    void testCallAsyncWithoutExecutorInParallel() throws Exception {\n-        // do not use Executor, execute all actions from the invoker thread\n-        final SerialFuture serialFuture = new SerialFuture();\n-\n-        final int n = 10;\n-        final long timeout = 10L;\n-        counter = 0;\n-\n-        // test action that allows invoking serialFuture#callAsync(Callable) in parallel\n-        final Callable<CompletableFuture<Integer>> testAction = () ->\n-            serialFuture.callAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return c;\n-            }).toCompletableFuture();\n-        final List<Callable<CompletableFuture<Integer>>> testActions = new ArrayList<>(n);\n-        for (int i = 0; i < n; i++) {\n-            testActions.add(testAction);\n+    private static int simpleTimeoutAction(VolatileCounter counter, int inc, long timeout) {\n+        int c = counter.get();\n+        try {\n+            Thread.sleep(timeout);\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(e);\n         }\n-\n-        // invoke test actions in parallel\n-        final ForkJoinPool pool = new ForkJoinPool(n);\n-        final CompletableFuture<?>[] futures = pool.invokeAll(testActions).parallelStream().map(f -> {\n-            try {\n-                return f.get();\n-            } catch (InterruptedException | ExecutionException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }).toArray(CompletableFuture[]::new);\n-\n-        // wait for all futures to complete\n-        CompletableFuture.allOf(futures).join();\n-\n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        c += inc;\n+        counter.set(c);\n+        return c;\n     }\n \n-    @Test\n-    void testCallAsyncWithExecutor() throws Exception {\n-        // execute all actions using dedicated Executor\n-        final Executor executor = Executors.newWorkStealingPool();\n-        final SerialFuture serialFuture = new SerialFuture(executor);\n-\n-        final int n = 10;\n-        final long timeout = 10L;\n-        counter = 0;\n+    private static CompletionStage<Integer> timeoutAction(VolatileCounter counter, int inc, long timeout) {\n+        return CompletableFuture.completedFuture(simpleTimeoutAction(counter, inc, timeout));\n+    }\n \n-        final CompletableFuture<?>[] futures = new CompletableFuture<?>[n];\n-        // invoke serialFuture#callAsync(Callable) one by one from the test thread\n-        // use Executor as part of SerialFuture instance\n-        for (int i = 0; i < n; i++) {\n-            futures[i] = serialFuture.callAsync(() -> {\n-                int c = counter;\n-                try {\n-                    Thread.sleep(timeout);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                c += 1;\n-                counter = c;\n-                return c;\n-            }).toCompletableFuture();\n+    private static int[] createArithmeticSequence(int start, int inc, int count) {\n+        final int[] seq = new int[count];\n+        int current = start;\n+        for (int i = 0; i < count; i++) {\n+            seq[i] = current;\n+            current += inc;\n         }\n-        CompletableFuture.allOf(futures).join();\n-\n-        assertThat(counter).isEqualTo(n);\n-        final int[] array = Arrays.stream(futures).mapToInt(future -> (Integer) future.join()).toArray();\n-        checkSequentialRange(array, n);\n+        return seq;\n     }\n \n-    @Test\n-    void testCallAsyncWithoutExecutor() throws Exception {\n-        final SerialFuture serialFuture = new SerialFuture();\n+    private static final class VolatileCounter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzExMTgwNA=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 548}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NjIxMzcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/auth/AbstractAuthorizerWithHandlers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMToyNzo0N1rOIZCFkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxNzo1ODowMFrOIZzehg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzExOTUwNA==", "bodyText": "final?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563119504", "createdAt": "2021-01-23T11:27:47Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AbstractAuthorizerWithHandlers.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Provides base implementation for an {@link Authorizer} that defines custom\n+ * {@link AuthSuccessHandler}/{@link AuthFailureHandler}s.\n+ * @param <T> a type of authorization data. This typically is {@link HttpRequest}.\n+ */\n+@UnstableApi\n+public abstract class AbstractAuthorizerWithHandlers<T> implements Authorizer<T> {\n+\n+    @Override\n+    public CompletionStage<Boolean> authorize(ServiceRequestContext ctx, T data) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkyODcxMA==", "bodyText": "sure. fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r563928710", "createdAt": "2021-01-25T17:58:00Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AbstractAuthorizerWithHandlers.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Provides base implementation for an {@link Authorizer} that defines custom\n+ * {@link AuthSuccessHandler}/{@link AuthFailureHandler}s.\n+ * @param <T> a type of authorization data. This typically is {@link HttpRequest}.\n+ */\n+@UnstableApi\n+public abstract class AbstractAuthorizerWithHandlers<T> implements Authorizer<T> {\n+\n+    @Override\n+    public CompletionStage<Boolean> authorize(ServiceRequestContext ctx, T data) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzExOTUwNA=="}, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NjIzNzc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMTozMzoxOVrOIZCWyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxOToyOTo0MlrOIfTGIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEyMzkxNQ==", "bodyText": "Does AuthorizationResult sound better?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563123915", "createdAt": "2021-01-23T11:33:19Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Provides a status of the request authorization operation, optionally combined with {@link AuthSuccessHandler}\n+ * and {@link AuthFailureHandler} to facilitate custom status handling.\n+ */\n+@UnstableApi\n+public interface AuthorizationStatus {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkzMzg3Mg==", "bodyText": "As you wish. Maybe you should validate the design approach first and then perform some low-level brushing up of the API. Otherwise, I may be doing bunch of refactorings for something that could still be a through-ways code.\nDo you agree with the API change in general, introducing AuthorizationStatus instead of the binary status?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563933872", "createdAt": "2021-01-25T18:06:22Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Provides a status of the request authorization operation, optionally combined with {@link AuthSuccessHandler}\n+ * and {@link AuthFailureHandler} to facilitate custom status handling.\n+ */\n+@UnstableApi\n+public interface AuthorizationStatus {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEyMzkxNQ=="}, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTI1NDQ4NA==", "bodyText": "Your new API makes sense, so I just left the comments for minor stuff. Yeah, I agree with the idea.\nI thought it may be better introducing a new interface that supercedes Authorizer, but perhaps we can live with the default method for now.\nCould you just add some Javadoc in Authorizer that a user is expected to implement the new method and leave the old method empty, with an example?", "url": "https://github.com/line/armeria/pull/2840#discussion_r565254484", "createdAt": "2021-01-27T12:03:28Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Provides a status of the request authorization operation, optionally combined with {@link AuthSuccessHandler}\n+ * and {@link AuthFailureHandler} to facilitate custom status handling.\n+ */\n+@UnstableApi\n+public interface AuthorizationStatus {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEyMzkxNQ=="}, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTI1OTM0Nw==", "bodyText": "At second thought, what do you think about declaring a new interface? e.g.\n\nAdd interface AuthorizationFunction { CompletionStage<AuthorizationStatue> authorize(...) ... }\nDeprecate Authorizer and add Authorizer.toAuthorizationFunction()\nAdd various AuthServiceBuilder.add*() methods that accept AuthorizationFunction.\n\nNote we can't add add(Iterable<? extends AuthorizationFunction>) though.\n\n\nDeprecate the AuthServiceBuilder.add*() methods that accept Authorizer.\nModify AuthServiceBuilder and AuthService so they use AuthorizationFunction internally.", "url": "https://github.com/line/armeria/pull/2840#discussion_r565259347", "createdAt": "2021-01-27T12:11:48Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Provides a status of the request authorization operation, optionally combined with {@link AuthSuccessHandler}\n+ * and {@link AuthFailureHandler} to facilitate custom status handling.\n+ */\n+@UnstableApi\n+public interface AuthorizationStatus {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEyMzkxNQ=="}, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTI2NzE4Nw==", "bodyText": "Another question: What do you think about having three statuses?\n\nAuthorized\nUnauthorized\nUnauthorized (Unrecognized or unsupported auth scheme, e.g. no 'Authorization' header)\n\nWould the third status be useful for supporting multiple authorization mechanisms? We could add an option that tells AuthService to ignore the AuthorizationFunctions that returned the third status to support multiple authentication schemes. For example:\n// This will reject a request when:\n// - Any of the three functions return 'Unauthorized' (2nd status).\n// - All of the three functions return 'Unauthorized (unsupported)' (3rd status).\n// and accept a request when:\n// - None of the three functions return 'Unauthorized' (2nd status).\nAuthService\n  .builder()\n  .add(oauth1func)\n  .add(oauth2func)\n  .add(basicFunc)\n  .ignoreThirdStatus() // We need a better name.\n  .build();\n\n// If `ignoreThirdStatus()` is not called, the third status will be treated same as the second status.", "url": "https://github.com/line/armeria/pull/2840#discussion_r565267187", "createdAt": "2021-01-27T12:25:47Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Provides a status of the request authorization operation, optionally combined with {@link AuthSuccessHandler}\n+ * and {@link AuthFailureHandler} to facilitate custom status handling.\n+ */\n+@UnstableApi\n+public interface AuthorizationStatus {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEyMzkxNQ=="}, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTY0NzIzNw==", "bodyText": "At second thought, what do you think about declaring a new interface? e.g.\n* Add interface AuthorizationFunction { CompletionStage<AuthorizationStatue> authorize(...) ... }\n* Deprecate Authorizer and add Authorizer.toAuthorizationFunction()\n...\n\nLooks like a massive refactoring! I don't see the end of this PR. Do you see specific reason to deprecate Authorizer as part of this?\nI do feel that current authorization interfaces are somewhat limiting but we should think of the missing capabilities and design new interfaces around it.\nCould you please check my question at the bottom regarding fine-grained access control.", "url": "https://github.com/line/armeria/pull/2840#discussion_r569647237", "createdAt": "2021-02-03T18:28:26Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Provides a status of the request authorization operation, optionally combined with {@link AuthSuccessHandler}\n+ * and {@link AuthFailureHandler} to facilitate custom status handling.\n+ */\n+@UnstableApi\n+public interface AuthorizationStatus {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEyMzkxNQ=="}, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTY4OTYzMw==", "bodyText": "Another question: What do you think about having three statuses?\n* Authorized\n* Unauthorized\n* Unauthorized (Unrecognized or unsupported auth scheme, e.g. no 'Authorization' header)\n\nSince the introduction of the AuthorizationStatus it's certainly possible to move away from the binary status. New statuses should even be backward compatible with binary status, just like I did with the handlers. However, it would be very difficult to keep backward compatibility semantically as it will contradict the presence of the third status. I thought you were against making such changes currently.\nOn the other hand, yes, it would be useful to have a special status to indicate that the Authorizer wants to ignore given authorization request. But how common this use case would be? I would question the need of Authorizer chaining in general. I think it's at least confusing but it might be dangerous in some cases. I don't see the need to have a chain of the authorizers to handle the same authorization scheme.\nIn order to support multiple authorization schemes, we should define clear and unambiguous map of Authorizers associated with different authorization schemes:\nAuthServiceBuilder.add(type, authorizer) - maps an authorizer to a type (Basic, OAuth1a, OAuth2, ...); this should allow mapping to custom authorization schemes unknown to us.\nAuthServiceBuilder.setTypeDetector(typeDetector) - to customize predefined type detection mechanism or to support custom authorization types.\nAnother authorization interfaces evolution I could think of related to fine-grained access control, where the standard authorization logic could be mapped to a particular Route.\nAuthServiceBuilder.addAccessRules(Route route, Iterable<String> roles)\nAdditionally, we should define common policy for the routes no associated rules:\nAuthServiceBuilder.permitIfNoRulesDefined(boolean permit)\nHaving this on the AuthService has much more sense than defining it for each authorization scheme based on Authorizer. All the context mapping would take place inside the AuthService and it would work across multiple schemes. Wile the Authorizer implements and extended method like below:\nCompletionStage<AuthorizationStatus> authorizeAndSupplyHandlers(ServiceRequestContext ctx,\n        @Nullable T data, Iterable<String> requiredRoles, boolean permitIfNoRulesDefined)\n\nAs I pointed, in future, we could add support @javax.annotation.security.RolesAllowed annotation directly on the method signature (like most of JEE and JAX-RS frameworks do) like the following:\n    @Put(\"/hello/{name}\")\n    @RolesAllowed ({\"read\", \"write\"})\n    public HttpResponse putHello(@Param(\"name\") String name) {\n\nHaving AuthServiceBuilder.addAccessRules allows us or the user translating the roles annotations to an access control policy - we could load it from a file, for instance.", "url": "https://github.com/line/armeria/pull/2840#discussion_r569689633", "createdAt": "2021-02-03T19:29:42Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Provides a status of the request authorization operation, optionally combined with {@link AuthSuccessHandler}\n+ * and {@link AuthFailureHandler} to facilitate custom status handling.\n+ */\n+@UnstableApi\n+public interface AuthorizationStatus {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEyMzkxNQ=="}, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NjIzOTAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMTozMzozOFrOIZCXuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxODo0NDoxMFrOIZ1WBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEyNDE1Mg==", "bodyText": "status -> authorized?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563124152", "createdAt": "2021-01-23T11:33:38Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Provides a status of the request authorization operation, optionally combined with {@link AuthSuccessHandler}\n+ * and {@link AuthFailureHandler} to facilitate custom status handling.\n+ */\n+@UnstableApi\n+public interface AuthorizationStatus {\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} based on boolean status.\n+     */\n+    static AuthorizationStatus of(boolean status) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk1OTMwMQ==", "bodyText": "Same comment as the above. No problem to make this change, but I would like to get the design approach validated first.", "url": "https://github.com/line/armeria/pull/2840#discussion_r563959301", "createdAt": "2021-01-25T18:44:10Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Provides a status of the request authorization operation, optionally combined with {@link AuthSuccessHandler}\n+ * and {@link AuthFailureHandler} to facilitate custom status handling.\n+ */\n+@UnstableApi\n+public interface AuthorizationStatus {\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} based on boolean status.\n+     */\n+    static AuthorizationStatus of(boolean status) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEyNDE1Mg=="}, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NjI0NTc5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMTozNToxN1rOIZCcXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxODo0NDoxN1rOIZ1WUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEyNTM0MQ==", "bodyText": "isAuthorized()?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563125341", "createdAt": "2021-01-23T11:35:17Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Provides a status of the request authorization operation, optionally combined with {@link AuthSuccessHandler}\n+ * and {@link AuthFailureHandler} to facilitate custom status handling.\n+ */\n+@UnstableApi\n+public interface AuthorizationStatus {\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} based on boolean status.\n+     */\n+    static AuthorizationStatus of(boolean status) {\n+        return new AuthorizationStatusImpl(status);\n+    }\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} based on boolean status.\n+     */\n+    @Nullable\n+    static AuthorizationStatus of(@Nullable Boolean status) {\n+        if (status == null) {\n+            return null;\n+        }\n+        return new AuthorizationStatusImpl(status);\n+    }\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} success status with optional {@link AuthSuccessHandler}.\n+     */\n+    static AuthorizationStatus ofSuccess(@Nullable AuthSuccessHandler successHandler) {\n+        return new AuthorizationStatusImpl(successHandler);\n+    }\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} success status with optional {@link AuthFailureHandler}.\n+     */\n+    static AuthorizationStatus ofFailure(@Nullable AuthFailureHandler failureHandler) {\n+        return new AuthorizationStatusImpl(failureHandler);\n+    }\n+\n+    /**\n+     * A status of the request authorization operation.\n+     * @return {@code true} if the request is authorized, or {@code false} otherwise.\n+     */\n+    boolean status();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk1OTM3Ng==", "bodyText": "Same comment as the above. No problem to make this change, but I would like to get the design approach validated first.", "url": "https://github.com/line/armeria/pull/2840#discussion_r563959376", "createdAt": "2021-01-25T18:44:17Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Provides a status of the request authorization operation, optionally combined with {@link AuthSuccessHandler}\n+ * and {@link AuthFailureHandler} to facilitate custom status handling.\n+ */\n+@UnstableApi\n+public interface AuthorizationStatus {\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} based on boolean status.\n+     */\n+    static AuthorizationStatus of(boolean status) {\n+        return new AuthorizationStatusImpl(status);\n+    }\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} based on boolean status.\n+     */\n+    @Nullable\n+    static AuthorizationStatus of(@Nullable Boolean status) {\n+        if (status == null) {\n+            return null;\n+        }\n+        return new AuthorizationStatusImpl(status);\n+    }\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} success status with optional {@link AuthSuccessHandler}.\n+     */\n+    static AuthorizationStatus ofSuccess(@Nullable AuthSuccessHandler successHandler) {\n+        return new AuthorizationStatusImpl(successHandler);\n+    }\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} success status with optional {@link AuthFailureHandler}.\n+     */\n+    static AuthorizationStatus ofFailure(@Nullable AuthFailureHandler failureHandler) {\n+        return new AuthorizationStatusImpl(failureHandler);\n+    }\n+\n+    /**\n+     * A status of the request authorization operation.\n+     * @return {@code true} if the request is authorized, or {@code false} otherwise.\n+     */\n+    boolean status();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEyNTM0MQ=="}, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NjI0ODg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMTozNTo1MlrOIZCeTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QyMDowODowNFrOIfUjhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEyNTgzOA==", "bodyText": "Could you explain what null means and when null is returned in Javadoc?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563125838", "createdAt": "2021-01-23T11:35:52Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Provides a status of the request authorization operation, optionally combined with {@link AuthSuccessHandler}\n+ * and {@link AuthFailureHandler} to facilitate custom status handling.\n+ */\n+@UnstableApi\n+public interface AuthorizationStatus {\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} based on boolean status.\n+     */\n+    static AuthorizationStatus of(boolean status) {\n+        return new AuthorizationStatusImpl(status);\n+    }\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} based on boolean status.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk1ODYxOQ==", "bodyText": "I've used the Nullable signature\n@Nullable static AuthorizationStatus of(@Nullable Boolean status)\nto deal with conversion of binary status and AuthorizationStatus. Since the old-style authorization returned  CompletableFuture<Boolean> which could could be effectively NULL, this conversion allows to keep the processing of the result inside the AuthService as below:\n                if (cause == null) {\n                    if (result != null) {\n                        return result.status() ? ...", "url": "https://github.com/line/armeria/pull/2840#discussion_r563958619", "createdAt": "2021-01-25T18:43:00Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Provides a status of the request authorization operation, optionally combined with {@link AuthSuccessHandler}\n+ * and {@link AuthFailureHandler} to facilitate custom status handling.\n+ */\n+@UnstableApi\n+public interface AuthorizationStatus {\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} based on boolean status.\n+     */\n+    static AuthorizationStatus of(boolean status) {\n+        return new AuthorizationStatusImpl(status);\n+    }\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} based on boolean status.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEyNTgzOA=="}, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTI1NzE5MA==", "bodyText": "I see. If this is not meant to be used by a user, how about hiding it somewhere, such as AuthService?", "url": "https://github.com/line/armeria/pull/2840#discussion_r565257190", "createdAt": "2021-01-27T12:08:05Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Provides a status of the request authorization operation, optionally combined with {@link AuthSuccessHandler}\n+ * and {@link AuthFailureHandler} to facilitate custom status handling.\n+ */\n+@UnstableApi\n+public interface AuthorizationStatus {\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} based on boolean status.\n+     */\n+    static AuthorizationStatus of(boolean status) {\n+        return new AuthorizationStatusImpl(status);\n+    }\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} based on boolean status.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEyNTgzOA=="}, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTcxMzU0MA==", "bodyText": "Removed this method from AuthorizationStatus and moved the NULL check to the Authorizer", "url": "https://github.com/line/armeria/pull/2840#discussion_r569713540", "createdAt": "2021-02-03T20:08:04Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Provides a status of the request authorization operation, optionally combined with {@link AuthSuccessHandler}\n+ * and {@link AuthFailureHandler} to facilitate custom status handling.\n+ */\n+@UnstableApi\n+public interface AuthorizationStatus {\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} based on boolean status.\n+     */\n+    static AuthorizationStatus of(boolean status) {\n+        return new AuthorizationStatusImpl(status);\n+    }\n+\n+    /**\n+     * Creates {@link AuthorizationStatus} based on boolean status.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEyNTgzOA=="}, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NjI1ODcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/auth/Authorizer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMTozNzo1NlrOIZCk_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxMTo1MTozNFrOIbD_Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEyNzU0OQ==", "bodyText": "Could you explain what null data means and what the expected behavior of the method in Javadoc?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563127549", "createdAt": "2021-01-23T11:37:56Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/Authorizer.java", "diffHunk": "@@ -43,38 +43,28 @@\n      */\n     CompletionStage<Boolean> authorize(ServiceRequestContext ctx, T data);\n \n+    /**\n+     * Authorizes the given {@code data}.\n+     *\n+     * @return a {@link CompletionStage} that will resolve to {@link AuthorizationStatus}. If the future\n+     *     resolves exceptionally, the request will not be authorized.\n+     */\n+    default CompletionStage<AuthorizationStatus> authorizeAndSupplyHandlers(ServiceRequestContext ctx,\n+                                                                            @Nullable T data) {\n+        if (data == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk1MTI0Ng==", "bodyText": "NULL data means that the authorization material might be absent on the request (token missing or something).\nThe original code looked like the following:\n        final Authorizer<HttpRequest> requestAuthorizer = (ctx, req) -> {\n            final T token = tokenExtractor.apply(req.headers());\n            if (token == null) {\n                return CompletableFuture.completedFuture(false);\n            }\n            return authorizer.authorize(ctx, token);\n        };\n\nNow, it's been extracted into a separate class DelegatingHttpRequestAuthorizer and the authorization decision consolidated in the actual Authorizer, instead of some inline code somewhere inside the builder.\nThe Authorizer signature should have allowed NULL, but unfortunately it did not. So I fully preserve previous contract:\nCompletionStage<Boolean> authorize(ServiceRequestContext ctx, T data);\n\nAdded following comment:\n     * @param data an actual authorization data, like {@link HttpRequest}, token extracted from it or\n     *     {@code null} if such authorization data is missing.", "url": "https://github.com/line/armeria/pull/2840#discussion_r563951246", "createdAt": "2021-01-25T18:32:21Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/Authorizer.java", "diffHunk": "@@ -43,38 +43,28 @@\n      */\n     CompletionStage<Boolean> authorize(ServiceRequestContext ctx, T data);\n \n+    /**\n+     * Authorizes the given {@code data}.\n+     *\n+     * @return a {@link CompletionStage} that will resolve to {@link AuthorizationStatus}. If the future\n+     *     resolves exceptionally, the request will not be authorized.\n+     */\n+    default CompletionStage<AuthorizationStatus> authorizeAndSupplyHandlers(ServiceRequestContext ctx,\n+                                                                            @Nullable T data) {\n+        if (data == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEyNzU0OQ=="}, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTI0NzgwMw==", "bodyText": "Thanks a lot. Makes sense.", "url": "https://github.com/line/armeria/pull/2840#discussion_r565247803", "createdAt": "2021-01-27T11:51:34Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/Authorizer.java", "diffHunk": "@@ -43,38 +43,28 @@\n      */\n     CompletionStage<Boolean> authorize(ServiceRequestContext ctx, T data);\n \n+    /**\n+     * Authorizes the given {@code data}.\n+     *\n+     * @return a {@link CompletionStage} that will resolve to {@link AuthorizationStatus}. If the future\n+     *     resolves exceptionally, the request will not be authorized.\n+     */\n+    default CompletionStage<AuthorizationStatus> authorizeAndSupplyHandlers(ServiceRequestContext ctx,\n+                                                                            @Nullable T data) {\n+        if (data == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzEyNzU0OQ=="}, "originalCommit": {"oid": "ebb4822c919067ba8c42888f55f70fae5a7e418b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NjQwNTA2OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMzowMDo0NlrOIZD9tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxODo0NTo0MFrOIZ1Zjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MDI2MQ==", "bodyText": "nit style:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n          \n          \n            \n                    this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");\n          \n          \n            \n                    this.endpoint = requireNonNull(endpoint, \"endpoint\");\n          \n          \n            \n                    this.endpointPath = requireNonNull(endpointPath, \"endpointPath\");", "url": "https://github.com/line/armeria/pull/2840#discussion_r563150261", "createdAt": "2021-01-23T13:00:46Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedResponseException;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk2MDIwNw==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r563960207", "createdAt": "2021-01-25T18:45:40Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedResponseException;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MDI2MQ=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NjQwNjAyOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMzowMjoxM1rOIZD-IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxMTo1MTowNlrOIbD-LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MDM2OQ==", "bodyText": "A MediaType will be converted to a String in StringValueConverter.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    headersBuilder.add(HttpHeaderNames.CONTENT_TYPE, MediaType.FORM_DATA.toString());\n          \n          \n            \n                    headersBuilder.addObject(HttpHeaderNames.CONTENT_TYPE, MediaType.FORM_DATA);", "url": "https://github.com/line/armeria/pull/2840#discussion_r563150369", "createdAt": "2021-01-23T13:02:13Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedResponseException;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected final WebClient endpoint() {\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Returns the authorization endpoint path.\n+     */\n+    protected final String endpointPath() {\n+        return endpointPath;\n+    }\n+\n+    /**\n+     * Returns the client authorization object.\n+     */\n+    @Nullable\n+    protected final ClientAuthorization clientAuthorization() {\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Extracts data from OK response and converts it to the target type {@code T}.\n+     */\n+    protected abstract T extractOkResults(AggregatedHttpResponse response, QueryParams requestFormData);\n+\n+    /**\n+     * Returns the value for the {@link HttpHeaderNames#AUTHORIZATION}.\n+     */\n+    @Nullable\n+    protected final String authorizationHeaderValue() {\n+        return clientAuthorization == null ? null : clientAuthorization.asHeaderValue();\n+    }\n+\n+    /**\n+     * Sets client credentials as form data parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected final void addCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {\n+        if (clientAuthorization != null) {\n+            clientAuthorization.addAsBodyParameters(formBuilder);\n+        }\n+    }\n+\n+    /**\n+     * Makes a request to the authorization endpoint using supplied {@code requestForm} parameters and converts\n+     * the result to the given type {@code T}.\n+     */\n+    protected CompletableFuture<T> executeWithParameters(QueryParams requestFormData) {\n+        final HttpResponse response = endpoint().execute(createHttpRequest(endpointPath, requestFormData));\n+        // when response aggregated, then extract the results...\n+        return response.aggregate().thenApply(r -> extractResults(r, requestFormData));\n+    }\n+\n+    /**\n+     * Produces {@link HttpRequest} based on this object.\n+     */\n+    private HttpRequest createHttpRequest(String endpointPath, QueryParams requestFormData) {\n+        final RequestHeadersBuilder headersBuilder =\n+                RequestHeaders.of(HttpMethod.POST, endpointPath).toBuilder();\n+        final String authorizationHeaderValue = authorizationHeaderValue();\n+        if (authorizationHeaderValue != null) {\n+            headersBuilder.add(HttpHeaderNames.AUTHORIZATION, authorizationHeaderValue);\n+        } else {\n+            requestFormData = requestFormData.withMutations(this::addCredentialsAsBodyParameters);\n+        }\n+        headersBuilder.add(HttpHeaderNames.CONTENT_TYPE, MediaType.FORM_DATA.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk2MjA5OQ==", "bodyText": "Thought this could handle only a fine set of the specific classes like Date or Instant.\nModified it as per your suggesting, assuming it works with generic objects.", "url": "https://github.com/line/armeria/pull/2840#discussion_r563962099", "createdAt": "2021-01-25T18:48:36Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedResponseException;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected final WebClient endpoint() {\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Returns the authorization endpoint path.\n+     */\n+    protected final String endpointPath() {\n+        return endpointPath;\n+    }\n+\n+    /**\n+     * Returns the client authorization object.\n+     */\n+    @Nullable\n+    protected final ClientAuthorization clientAuthorization() {\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Extracts data from OK response and converts it to the target type {@code T}.\n+     */\n+    protected abstract T extractOkResults(AggregatedHttpResponse response, QueryParams requestFormData);\n+\n+    /**\n+     * Returns the value for the {@link HttpHeaderNames#AUTHORIZATION}.\n+     */\n+    @Nullable\n+    protected final String authorizationHeaderValue() {\n+        return clientAuthorization == null ? null : clientAuthorization.asHeaderValue();\n+    }\n+\n+    /**\n+     * Sets client credentials as form data parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected final void addCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {\n+        if (clientAuthorization != null) {\n+            clientAuthorization.addAsBodyParameters(formBuilder);\n+        }\n+    }\n+\n+    /**\n+     * Makes a request to the authorization endpoint using supplied {@code requestForm} parameters and converts\n+     * the result to the given type {@code T}.\n+     */\n+    protected CompletableFuture<T> executeWithParameters(QueryParams requestFormData) {\n+        final HttpResponse response = endpoint().execute(createHttpRequest(endpointPath, requestFormData));\n+        // when response aggregated, then extract the results...\n+        return response.aggregate().thenApply(r -> extractResults(r, requestFormData));\n+    }\n+\n+    /**\n+     * Produces {@link HttpRequest} based on this object.\n+     */\n+    private HttpRequest createHttpRequest(String endpointPath, QueryParams requestFormData) {\n+        final RequestHeadersBuilder headersBuilder =\n+                RequestHeaders.of(HttpMethod.POST, endpointPath).toBuilder();\n+        final String authorizationHeaderValue = authorizationHeaderValue();\n+        if (authorizationHeaderValue != null) {\n+            headersBuilder.add(HttpHeaderNames.AUTHORIZATION, authorizationHeaderValue);\n+        } else {\n+            requestFormData = requestFormData.withMutations(this::addCredentialsAsBodyParameters);\n+        }\n+        headersBuilder.add(HttpHeaderNames.CONTENT_TYPE, MediaType.FORM_DATA.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MDM2OQ=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTI0NzUzMw==", "bodyText": "MediaType is one of the supported types, so no worries :-)", "url": "https://github.com/line/armeria/pull/2840#discussion_r565247533", "createdAt": "2021-01-27T11:51:06Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedResponseException;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected final WebClient endpoint() {\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Returns the authorization endpoint path.\n+     */\n+    protected final String endpointPath() {\n+        return endpointPath;\n+    }\n+\n+    /**\n+     * Returns the client authorization object.\n+     */\n+    @Nullable\n+    protected final ClientAuthorization clientAuthorization() {\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Extracts data from OK response and converts it to the target type {@code T}.\n+     */\n+    protected abstract T extractOkResults(AggregatedHttpResponse response, QueryParams requestFormData);\n+\n+    /**\n+     * Returns the value for the {@link HttpHeaderNames#AUTHORIZATION}.\n+     */\n+    @Nullable\n+    protected final String authorizationHeaderValue() {\n+        return clientAuthorization == null ? null : clientAuthorization.asHeaderValue();\n+    }\n+\n+    /**\n+     * Sets client credentials as form data parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected final void addCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {\n+        if (clientAuthorization != null) {\n+            clientAuthorization.addAsBodyParameters(formBuilder);\n+        }\n+    }\n+\n+    /**\n+     * Makes a request to the authorization endpoint using supplied {@code requestForm} parameters and converts\n+     * the result to the given type {@code T}.\n+     */\n+    protected CompletableFuture<T> executeWithParameters(QueryParams requestFormData) {\n+        final HttpResponse response = endpoint().execute(createHttpRequest(endpointPath, requestFormData));\n+        // when response aggregated, then extract the results...\n+        return response.aggregate().thenApply(r -> extractResults(r, requestFormData));\n+    }\n+\n+    /**\n+     * Produces {@link HttpRequest} based on this object.\n+     */\n+    private HttpRequest createHttpRequest(String endpointPath, QueryParams requestFormData) {\n+        final RequestHeadersBuilder headersBuilder =\n+                RequestHeaders.of(HttpMethod.POST, endpointPath).toBuilder();\n+        final String authorizationHeaderValue = authorizationHeaderValue();\n+        if (authorizationHeaderValue != null) {\n+            headersBuilder.add(HttpHeaderNames.AUTHORIZATION, authorizationHeaderValue);\n+        } else {\n+            requestFormData = requestFormData.withMutations(this::addCredentialsAsBodyParameters);\n+        }\n+        headersBuilder.add(HttpHeaderNames.CONTENT_TYPE, MediaType.FORM_DATA.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MDM2OQ=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NjQwNjc3OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMzowMzoyM1rOIZD-eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxODo1MDoyNFrOIZ1lYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MDQ1Nw==", "bodyText": "We can directly create a RequestHeadersBuilder\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final RequestHeadersBuilder headersBuilder =\n          \n          \n            \n                            RequestHeaders.of(HttpMethod.POST, endpointPath).toBuilder();\n          \n          \n            \n                    final RequestHeadersBuilder headersBuilder =\n          \n          \n            \n                            RequestHeaders.builder(HttpMethod.POST, endpointPath);", "url": "https://github.com/line/armeria/pull/2840#discussion_r563150457", "createdAt": "2021-01-23T13:03:23Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedResponseException;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected final WebClient endpoint() {\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Returns the authorization endpoint path.\n+     */\n+    protected final String endpointPath() {\n+        return endpointPath;\n+    }\n+\n+    /**\n+     * Returns the client authorization object.\n+     */\n+    @Nullable\n+    protected final ClientAuthorization clientAuthorization() {\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Extracts data from OK response and converts it to the target type {@code T}.\n+     */\n+    protected abstract T extractOkResults(AggregatedHttpResponse response, QueryParams requestFormData);\n+\n+    /**\n+     * Returns the value for the {@link HttpHeaderNames#AUTHORIZATION}.\n+     */\n+    @Nullable\n+    protected final String authorizationHeaderValue() {\n+        return clientAuthorization == null ? null : clientAuthorization.asHeaderValue();\n+    }\n+\n+    /**\n+     * Sets client credentials as form data parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected final void addCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {\n+        if (clientAuthorization != null) {\n+            clientAuthorization.addAsBodyParameters(formBuilder);\n+        }\n+    }\n+\n+    /**\n+     * Makes a request to the authorization endpoint using supplied {@code requestForm} parameters and converts\n+     * the result to the given type {@code T}.\n+     */\n+    protected CompletableFuture<T> executeWithParameters(QueryParams requestFormData) {\n+        final HttpResponse response = endpoint().execute(createHttpRequest(endpointPath, requestFormData));\n+        // when response aggregated, then extract the results...\n+        return response.aggregate().thenApply(r -> extractResults(r, requestFormData));\n+    }\n+\n+    /**\n+     * Produces {@link HttpRequest} based on this object.\n+     */\n+    private HttpRequest createHttpRequest(String endpointPath, QueryParams requestFormData) {\n+        final RequestHeadersBuilder headersBuilder =\n+                RequestHeaders.of(HttpMethod.POST, endpointPath).toBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk2MzIzNA==", "bodyText": "Right. Fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r563963234", "createdAt": "2021-01-25T18:50:24Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedResponseException;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected final WebClient endpoint() {\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Returns the authorization endpoint path.\n+     */\n+    protected final String endpointPath() {\n+        return endpointPath;\n+    }\n+\n+    /**\n+     * Returns the client authorization object.\n+     */\n+    @Nullable\n+    protected final ClientAuthorization clientAuthorization() {\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Extracts data from OK response and converts it to the target type {@code T}.\n+     */\n+    protected abstract T extractOkResults(AggregatedHttpResponse response, QueryParams requestFormData);\n+\n+    /**\n+     * Returns the value for the {@link HttpHeaderNames#AUTHORIZATION}.\n+     */\n+    @Nullable\n+    protected final String authorizationHeaderValue() {\n+        return clientAuthorization == null ? null : clientAuthorization.asHeaderValue();\n+    }\n+\n+    /**\n+     * Sets client credentials as form data parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected final void addCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {\n+        if (clientAuthorization != null) {\n+            clientAuthorization.addAsBodyParameters(formBuilder);\n+        }\n+    }\n+\n+    /**\n+     * Makes a request to the authorization endpoint using supplied {@code requestForm} parameters and converts\n+     * the result to the given type {@code T}.\n+     */\n+    protected CompletableFuture<T> executeWithParameters(QueryParams requestFormData) {\n+        final HttpResponse response = endpoint().execute(createHttpRequest(endpointPath, requestFormData));\n+        // when response aggregated, then extract the results...\n+        return response.aggregate().thenApply(r -> extractResults(r, requestFormData));\n+    }\n+\n+    /**\n+     * Produces {@link HttpRequest} based on this object.\n+     */\n+    private HttpRequest createHttpRequest(String endpointPath, QueryParams requestFormData) {\n+        final RequestHeadersBuilder headersBuilder =\n+                RequestHeaders.of(HttpMethod.POST, endpointPath).toBuilder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MDQ1Nw=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NjQxNDAxOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMzoxMjoyOFrOIZEBxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxODo1MjowMFrOIZ1pGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MTMwMw==", "bodyText": "Use the local variable?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!errorResponse.content().isEmpty()) {\n          \n          \n            \n                    if (!errorResponseContents.isEmpty()) {", "url": "https://github.com/line/armeria/pull/2840#discussion_r563151303", "createdAt": "2021-01-23T13:12:28Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedResponseException;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected final WebClient endpoint() {\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Returns the authorization endpoint path.\n+     */\n+    protected final String endpointPath() {\n+        return endpointPath;\n+    }\n+\n+    /**\n+     * Returns the client authorization object.\n+     */\n+    @Nullable\n+    protected final ClientAuthorization clientAuthorization() {\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Extracts data from OK response and converts it to the target type {@code T}.\n+     */\n+    protected abstract T extractOkResults(AggregatedHttpResponse response, QueryParams requestFormData);\n+\n+    /**\n+     * Returns the value for the {@link HttpHeaderNames#AUTHORIZATION}.\n+     */\n+    @Nullable\n+    protected final String authorizationHeaderValue() {\n+        return clientAuthorization == null ? null : clientAuthorization.asHeaderValue();\n+    }\n+\n+    /**\n+     * Sets client credentials as form data parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected final void addCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {\n+        if (clientAuthorization != null) {\n+            clientAuthorization.addAsBodyParameters(formBuilder);\n+        }\n+    }\n+\n+    /**\n+     * Makes a request to the authorization endpoint using supplied {@code requestForm} parameters and converts\n+     * the result to the given type {@code T}.\n+     */\n+    protected CompletableFuture<T> executeWithParameters(QueryParams requestFormData) {\n+        final HttpResponse response = endpoint().execute(createHttpRequest(endpointPath, requestFormData));\n+        // when response aggregated, then extract the results...\n+        return response.aggregate().thenApply(r -> extractResults(r, requestFormData));\n+    }\n+\n+    /**\n+     * Produces {@link HttpRequest} based on this object.\n+     */\n+    private HttpRequest createHttpRequest(String endpointPath, QueryParams requestFormData) {\n+        final RequestHeadersBuilder headersBuilder =\n+                RequestHeaders.of(HttpMethod.POST, endpointPath).toBuilder();\n+        final String authorizationHeaderValue = authorizationHeaderValue();\n+        if (authorizationHeaderValue != null) {\n+            headersBuilder.add(HttpHeaderNames.AUTHORIZATION, authorizationHeaderValue);\n+        } else {\n+            requestFormData = requestFormData.withMutations(this::addCredentialsAsBodyParameters);\n+        }\n+        headersBuilder.add(HttpHeaderNames.CONTENT_TYPE, MediaType.FORM_DATA.toString());\n+\n+        return HttpRequest.of(headersBuilder.build(), HttpData.ofUtf8(requestFormData.toQueryString()));\n+    }\n+\n+    /**\n+     * Extracts the result and convert it to the target type {@code T} or throw an error in case of an error\n+     * result.\n+     * @param response An {@link AggregatedHttpResponse} returned by the authorization endpoint.\n+     * @param requestFormData A {@link QueryParams} that contains all the elements of the request form sent with\n+     *                        the request.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    @Nullable\n+    protected T extractResults(AggregatedHttpResponse response, QueryParams requestFormData) {\n+        final HttpStatus status = response.status();\n+        switch (status.code()) {\n+            case 200: // OK\n+                // expected Content-Type: application/json;charset=UTF-8\n+                validateContentType(response, MediaType.JSON);\n+                return extractOkResults(response, requestFormData);\n+            case 400: // Bad Request\n+                // expected Content-Type: application/json;charset=UTF-8\n+                validateContentType(response, MediaType.JSON);\n+                throw onBadRequestError(response);\n+            case 401: // Unauthorized\n+                throw onUnauthorizedError(response);\n+        }\n+        throw new UnsupportedResponseException(status, response.contentUtf8());\n+    }\n+\n+    /**\n+     * Composes {@link TokenRequestException} upon 400 Bad Request response\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-5.2\">[RFC6749], Section 5.2</a>.\n+     * @param errorResponse response received from the server\n+     * @return an instance of {@link TokenRequestException}\n+     */\n+    protected TokenRequestException onBadRequestError(AggregatedHttpResponse errorResponse) {\n+        return TokenRequestException.parse(errorResponse.contentUtf8());\n+    }\n+\n+    /**\n+     * Composes {@link InvalidClientException} upon 401 Unauthorized response\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-5.2\">[RFC6749], Section 5.2</a> (invalid_client).\n+     * @param errorResponse response received from the server\n+     * @return an instance of {@link InvalidClientException}\n+     */\n+    protected TokenRequestException onUnauthorizedError(AggregatedHttpResponse errorResponse) {\n+        final StringBuilder messageBuilder = new StringBuilder().append(errorResponse.status());\n+        final String wwwAuthenticate = errorResponse.headers().get(HttpHeaderNames.WWW_AUTHENTICATE);\n+        if (wwwAuthenticate != null) {\n+            messageBuilder.append(\": \").append(wwwAuthenticate);\n+        }\n+        final HttpData errorResponseContents = errorResponse.content();\n+        if (!errorResponse.content().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk2NDE4Nw==", "bodyText": "Yes, this is how it's supposed to be. Fixed.", "url": "https://github.com/line/armeria/pull/2840#discussion_r563964187", "createdAt": "2021-01-25T18:52:00Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedResponseException;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected final WebClient endpoint() {\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Returns the authorization endpoint path.\n+     */\n+    protected final String endpointPath() {\n+        return endpointPath;\n+    }\n+\n+    /**\n+     * Returns the client authorization object.\n+     */\n+    @Nullable\n+    protected final ClientAuthorization clientAuthorization() {\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Extracts data from OK response and converts it to the target type {@code T}.\n+     */\n+    protected abstract T extractOkResults(AggregatedHttpResponse response, QueryParams requestFormData);\n+\n+    /**\n+     * Returns the value for the {@link HttpHeaderNames#AUTHORIZATION}.\n+     */\n+    @Nullable\n+    protected final String authorizationHeaderValue() {\n+        return clientAuthorization == null ? null : clientAuthorization.asHeaderValue();\n+    }\n+\n+    /**\n+     * Sets client credentials as form data parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected final void addCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {\n+        if (clientAuthorization != null) {\n+            clientAuthorization.addAsBodyParameters(formBuilder);\n+        }\n+    }\n+\n+    /**\n+     * Makes a request to the authorization endpoint using supplied {@code requestForm} parameters and converts\n+     * the result to the given type {@code T}.\n+     */\n+    protected CompletableFuture<T> executeWithParameters(QueryParams requestFormData) {\n+        final HttpResponse response = endpoint().execute(createHttpRequest(endpointPath, requestFormData));\n+        // when response aggregated, then extract the results...\n+        return response.aggregate().thenApply(r -> extractResults(r, requestFormData));\n+    }\n+\n+    /**\n+     * Produces {@link HttpRequest} based on this object.\n+     */\n+    private HttpRequest createHttpRequest(String endpointPath, QueryParams requestFormData) {\n+        final RequestHeadersBuilder headersBuilder =\n+                RequestHeaders.of(HttpMethod.POST, endpointPath).toBuilder();\n+        final String authorizationHeaderValue = authorizationHeaderValue();\n+        if (authorizationHeaderValue != null) {\n+            headersBuilder.add(HttpHeaderNames.AUTHORIZATION, authorizationHeaderValue);\n+        } else {\n+            requestFormData = requestFormData.withMutations(this::addCredentialsAsBodyParameters);\n+        }\n+        headersBuilder.add(HttpHeaderNames.CONTENT_TYPE, MediaType.FORM_DATA.toString());\n+\n+        return HttpRequest.of(headersBuilder.build(), HttpData.ofUtf8(requestFormData.toQueryString()));\n+    }\n+\n+    /**\n+     * Extracts the result and convert it to the target type {@code T} or throw an error in case of an error\n+     * result.\n+     * @param response An {@link AggregatedHttpResponse} returned by the authorization endpoint.\n+     * @param requestFormData A {@link QueryParams} that contains all the elements of the request form sent with\n+     *                        the request.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    @Nullable\n+    protected T extractResults(AggregatedHttpResponse response, QueryParams requestFormData) {\n+        final HttpStatus status = response.status();\n+        switch (status.code()) {\n+            case 200: // OK\n+                // expected Content-Type: application/json;charset=UTF-8\n+                validateContentType(response, MediaType.JSON);\n+                return extractOkResults(response, requestFormData);\n+            case 400: // Bad Request\n+                // expected Content-Type: application/json;charset=UTF-8\n+                validateContentType(response, MediaType.JSON);\n+                throw onBadRequestError(response);\n+            case 401: // Unauthorized\n+                throw onUnauthorizedError(response);\n+        }\n+        throw new UnsupportedResponseException(status, response.contentUtf8());\n+    }\n+\n+    /**\n+     * Composes {@link TokenRequestException} upon 400 Bad Request response\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-5.2\">[RFC6749], Section 5.2</a>.\n+     * @param errorResponse response received from the server\n+     * @return an instance of {@link TokenRequestException}\n+     */\n+    protected TokenRequestException onBadRequestError(AggregatedHttpResponse errorResponse) {\n+        return TokenRequestException.parse(errorResponse.contentUtf8());\n+    }\n+\n+    /**\n+     * Composes {@link InvalidClientException} upon 401 Unauthorized response\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-5.2\">[RFC6749], Section 5.2</a> (invalid_client).\n+     * @param errorResponse response received from the server\n+     * @return an instance of {@link InvalidClientException}\n+     */\n+    protected TokenRequestException onUnauthorizedError(AggregatedHttpResponse errorResponse) {\n+        final StringBuilder messageBuilder = new StringBuilder().append(errorResponse.status());\n+        final String wwwAuthenticate = errorResponse.headers().get(HttpHeaderNames.WWW_AUTHENTICATE);\n+        if (wwwAuthenticate != null) {\n+            messageBuilder.append(\": \").append(wwwAuthenticate);\n+        }\n+        final HttpData errorResponseContents = errorResponse.content();\n+        if (!errorResponse.content().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MTMwMw=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NjQxOTk4OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractTokenOperationRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMzoxOTo0M1rOIZEEjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxODo1NTozNFrOIZ1yEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MjAxMw==", "bodyText": "nit: How about checking for null of token before creating QueryParamsBuilder?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563152013", "createdAt": "2021-01-23T13:19:43Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractTokenOperationRequest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE_HINT;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+\n+/**\n+ * A common abstraction for the requests implementing various Token operations request/response flows,\n+ * such as Token Introspection flow\n+ * (<a href=\"https://tools.ietf.org/html/rfc7662#section-2\">[RFC7662], Section 2</a>),\n+ * and Token Revocation flow (<a href=\"https://tools.ietf.org/html/rfc7009\">[RFC7009]</a>).\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractTokenOperationRequest<T> extends AbstractOAuth2Request<T> {\n+\n+    /**\n+     * A common abstraction for the requests implementing various Token operations request/response flows,\n+     * such as Token Introspection flow\n+     * (<a href=\"https://tools.ietf.org/html/rfc7662#section-2\">[RFC7662], Section 2</a>),\n+     * and Token Revocation flow (<a href=\"https://tools.ietf.org/html/rfc7009\">[RFC7009]</a>).\n+     *\n+     * @param operationsEndpoint A {@link WebClient} to facilitate the Token Operations requests. Must\n+     *                           correspond to the required Token Operations endpoint of the OAuth 2 system.\n+     * @param operationsEndpointPath A URI path that corresponds to the token Operations endpoint of the\n+     *                               OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractTokenOperationRequest(WebClient operationsEndpoint, String operationsEndpointPath,\n+                                            @Nullable ClientAuthorization clientAuthorization) {\n+        super(operationsEndpoint, operationsEndpointPath, clientAuthorization);\n+    }\n+\n+    /**\n+     * Makes a token operations (Introspection/Revocation) request using given {@code token} and\n+     * optional {@code tokenType}.\n+     * @param token A token this operation request applies to.\n+     * @param tokenType A hint about the type of the token submitted for (Introspection/Revocation) operation.\n+     *                  Either {@code access_token} or {@code refresh_token} as per\n+     *                  <a href=\"https://tools.ietf.org/html/rfc7009#section-2.1\">[RFC7009], Section 2.1</a>.\n+     * @return A {@link CompletableFuture} carrying the target result.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    public CompletableFuture<T> make(String token, @Nullable String tokenType) {\n+        final QueryParamsBuilder requestFormBuilder = QueryParams.builder();\n+\n+        // populate request form data\n+        // MANDATORY token\n+        requestFormBuilder.add(TOKEN, Objects.requireNonNull(token, TOKEN));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk2NjQ4Mg==", "bodyText": "changed", "url": "https://github.com/line/armeria/pull/2840#discussion_r563966482", "createdAt": "2021-01-25T18:55:34Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractTokenOperationRequest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE_HINT;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+\n+/**\n+ * A common abstraction for the requests implementing various Token operations request/response flows,\n+ * such as Token Introspection flow\n+ * (<a href=\"https://tools.ietf.org/html/rfc7662#section-2\">[RFC7662], Section 2</a>),\n+ * and Token Revocation flow (<a href=\"https://tools.ietf.org/html/rfc7009\">[RFC7009]</a>).\n+ * @param <T> the type of the authorization result.\n+ */\n+@UnstableApi\n+public abstract class AbstractTokenOperationRequest<T> extends AbstractOAuth2Request<T> {\n+\n+    /**\n+     * A common abstraction for the requests implementing various Token operations request/response flows,\n+     * such as Token Introspection flow\n+     * (<a href=\"https://tools.ietf.org/html/rfc7662#section-2\">[RFC7662], Section 2</a>),\n+     * and Token Revocation flow (<a href=\"https://tools.ietf.org/html/rfc7009\">[RFC7009]</a>).\n+     *\n+     * @param operationsEndpoint A {@link WebClient} to facilitate the Token Operations requests. Must\n+     *                           correspond to the required Token Operations endpoint of the OAuth 2 system.\n+     * @param operationsEndpointPath A URI path that corresponds to the token Operations endpoint of the\n+     *                               OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractTokenOperationRequest(WebClient operationsEndpoint, String operationsEndpointPath,\n+                                            @Nullable ClientAuthorization clientAuthorization) {\n+        super(operationsEndpoint, operationsEndpointPath, clientAuthorization);\n+    }\n+\n+    /**\n+     * Makes a token operations (Introspection/Revocation) request using given {@code token} and\n+     * optional {@code tokenType}.\n+     * @param token A token this operation request applies to.\n+     * @param tokenType A hint about the type of the token submitted for (Introspection/Revocation) operation.\n+     *                  Either {@code access_token} or {@code refresh_token} as per\n+     *                  <a href=\"https://tools.ietf.org/html/rfc7009#section-2.1\">[RFC7009], Section 2.1</a>.\n+     * @return A {@link CompletableFuture} carrying the target result.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    public CompletableFuture<T> make(String token, @Nullable String tokenType) {\n+        final QueryParamsBuilder requestFormBuilder = QueryParams.builder();\n+\n+        // populate request form data\n+        // MANDATORY token\n+        requestFormBuilder.add(TOKEN, Objects.requireNonNull(token, TOKEN));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MjAxMw=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NjQyMTA0OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/CaseUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMzoyMTowNFrOIZEFDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxMTo0OToxMlrOIbD5vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MjE0MA==", "bodyText": "@UnstableApi could be removed for internal package.", "url": "https://github.com/line/armeria/pull/2840#discussion_r563152140", "createdAt": "2021-01-23T13:21:04Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/CaseUtil.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Ascii;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+@UnstableApi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk2NzMwMw==", "bodyText": "removed", "url": "https://github.com/line/armeria/pull/2840#discussion_r563967303", "createdAt": "2021-01-25T18:56:50Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/CaseUtil.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Ascii;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+@UnstableApi", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MjE0MA=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTI0NjM5Nw==", "bodyText": "Sorry about this, @max904-github.", "url": "https://github.com/line/armeria/pull/2840#discussion_r565246397", "createdAt": "2021-01-27T11:49:12Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/CaseUtil.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Ascii;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+@UnstableApi", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MjE0MA=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NjQyMTg5OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/CaseUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMzoyMjoyNFrOIZEFdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxODo1NzowMVrOIZ11og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MjI0Nw==", "bodyText": "global comment in this file: Please use 4 spaces for indentation.", "url": "https://github.com/line/armeria/pull/2840#discussion_r563152247", "createdAt": "2021-01-23T13:22:24Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/CaseUtil.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Ascii;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+@UnstableApi\n+public final class CaseUtil {\n+\n+  @Nullable\n+  public static String firstUpperCase(@Nullable String word) {\n+    if (word == null || word.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk2NzM5NA==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r563967394", "createdAt": "2021-01-25T18:57:01Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/CaseUtil.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Ascii;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+@UnstableApi\n+public final class CaseUtil {\n+\n+  @Nullable\n+  public static String firstUpperCase(@Nullable String word) {\n+    if (word == null || word.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MjI0Nw=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NjQyOTU4OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/OAuth2Constants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxMzozMTozM1rOIZEJCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxOTowMjo0N1rOIZ2D1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MzE2Mw==", "bodyText": "Remove @UnstableApi\npublic final class for consistency?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563153163", "createdAt": "2021-01-23T13:31:33Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/OAuth2Constants.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Common OAuth 2.0 constants.\n+ */\n+@UnstableApi\n+public interface OAuth2Constants {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk3MTAyOQ==", "bodyText": "changed as requested", "url": "https://github.com/line/armeria/pull/2840#discussion_r563971029", "createdAt": "2021-01-25T19:02:47Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/OAuth2Constants.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.auth.oauth2;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Common OAuth 2.0 constants.\n+ */\n+@UnstableApi\n+public interface OAuth2Constants {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MzE2Mw=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NzYyMTQ5OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessToken.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQxMzo0NTo1NlrOIZMzvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxOTowNDozMFrOIZ2Hkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI5NTE2Ng==", "bodyText": "nit: Add @VisibleForTesting?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563295166", "createdAt": "2021-01-24T13:45:56Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.DEFAULT_TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_IN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.REFRESH_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.CaseUtil;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+@UnstableApi\n+public class GrantedOAuth2AccessToken implements Serializable {\n+\n+    private static final long serialVersionUID = 8698118404098897958L;\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessToken} based on the {@code JSON}-formatted raw response body and\n+     * optional raw formatted {@code scope} used to request the token.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @param requestScope OPTIONAL. A list of space-delimited, case-sensitive strings.\n+     *                     The strings are defined by the authorization server.\n+     *                     The authorization server MAY fully or partially ignore the scope requested by the\n+     *                     client, based on the authorization server policy or the resource owner's\n+     *                     instructions. If the issued access token scope is different from the one requested\n+     *                     by the client, the authorization server MUST include the \"scope\" response\n+     *                     parameter to inform the client of the actual scope granted.\n+     *                     If the client omits the scope parameter when requesting authorization, the\n+     *                     authorization server MUST either process the request using a pre-defined default\n+     *                     value or fail the request indicating an invalid scope.\n+     * @return A new instance of {@link GrantedOAuth2AccessToken}.\n+     */\n+    public static GrantedOAuth2AccessToken parse(String rawResponse, @Nullable String requestScope) {\n+        return GrantedOAuth2AccessTokenBuilder.parse(rawResponse, requestScope);\n+    }\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessTokenBuilder} to build a new {@link GrantedOAuth2AccessToken} and\n+     * supplied it with a value of {@code access_token} Access Token response field.\n+     * @return A new instance of {@link GrantedOAuth2AccessTokenBuilder}.\n+     */\n+    public static GrantedOAuth2AccessTokenBuilder builder(String accessToken) {\n+        return new GrantedOAuth2AccessTokenBuilder(accessToken);\n+    }\n+\n+    static final String ISSUED_AT = \"issued_at\";\n+\n+    static final String SCOPE_SEPARATOR = \" \";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk3MTk4Nw==", "bodyText": "added", "url": "https://github.com/line/armeria/pull/2840#discussion_r563971987", "createdAt": "2021-01-25T19:04:30Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.DEFAULT_TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_IN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.REFRESH_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.CaseUtil;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+@UnstableApi\n+public class GrantedOAuth2AccessToken implements Serializable {\n+\n+    private static final long serialVersionUID = 8698118404098897958L;\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessToken} based on the {@code JSON}-formatted raw response body and\n+     * optional raw formatted {@code scope} used to request the token.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @param requestScope OPTIONAL. A list of space-delimited, case-sensitive strings.\n+     *                     The strings are defined by the authorization server.\n+     *                     The authorization server MAY fully or partially ignore the scope requested by the\n+     *                     client, based on the authorization server policy or the resource owner's\n+     *                     instructions. If the issued access token scope is different from the one requested\n+     *                     by the client, the authorization server MUST include the \"scope\" response\n+     *                     parameter to inform the client of the actual scope granted.\n+     *                     If the client omits the scope parameter when requesting authorization, the\n+     *                     authorization server MUST either process the request using a pre-defined default\n+     *                     value or fail the request indicating an invalid scope.\n+     * @return A new instance of {@link GrantedOAuth2AccessToken}.\n+     */\n+    public static GrantedOAuth2AccessToken parse(String rawResponse, @Nullable String requestScope) {\n+        return GrantedOAuth2AccessTokenBuilder.parse(rawResponse, requestScope);\n+    }\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessTokenBuilder} to build a new {@link GrantedOAuth2AccessToken} and\n+     * supplied it with a value of {@code access_token} Access Token response field.\n+     * @return A new instance of {@link GrantedOAuth2AccessTokenBuilder}.\n+     */\n+    public static GrantedOAuth2AccessTokenBuilder builder(String accessToken) {\n+        return new GrantedOAuth2AccessTokenBuilder(accessToken);\n+    }\n+\n+    static final String ISSUED_AT = \"issued_at\";\n+\n+    static final String SCOPE_SEPARATOR = \" \";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI5NTE2Ng=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NzYyNTE2OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessTokenBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQxMzo0ODo1MFrOIZM1dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxOTowNToyM1rOIZ2JhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI5NTYwNA==", "bodyText": "indent?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new GrantedOAuth2AccessToken(accessToken, tokenType,\n          \n          \n            \n                                                  (issuedAt == null) ? Instant.now() : issuedAt, expiresIn,\n          \n          \n            \n                                                        refreshToken, scope.build(), extras.build(), rawResponse);\n          \n          \n            \n                    return new GrantedOAuth2AccessToken(accessToken, tokenType,\n          \n          \n            \n                                                        (issuedAt == null) ? Instant.now() : issuedAt, expiresIn,\n          \n          \n            \n                                                        refreshToken, scope.build(), extras.build(), rawResponse);", "url": "https://github.com/line/armeria/pull/2840#discussion_r563295604", "createdAt": "2021-01-24T13:48:50Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessTokenBuilder.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.ISSUED_AT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SCOPE_SEPARATOR;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_IN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.REFRESH_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Builds an instance of {@link GrantedOAuth2AccessToken}.\n+ */\n+@UnstableApi\n+public final class GrantedOAuth2AccessTokenBuilder {\n+\n+    private static final TypeReference<LinkedHashMap<String, String>> MAP_TYPE =\n+            new TypeReference<LinkedHashMap<String, String>>() {};\n+\n+    static GrantedOAuth2AccessToken parse(String rawResponse, @Nullable String requestScope) {\n+\n+        final LinkedHashMap<String, String> map;\n+        try {\n+            map = JSON.readValue(requireNonNull(rawResponse, \"rawResponse\"), MAP_TYPE);\n+        } catch (JsonProcessingException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        final GrantedOAuth2AccessTokenBuilder builder =\n+                new GrantedOAuth2AccessTokenBuilder(requireNonNull(map.remove(ACCESS_TOKEN), ACCESS_TOKEN));\n+\n+        final String tokenType = map.remove(TOKEN_TYPE);\n+        if (tokenType != null) {\n+            builder.tokenType(tokenType);\n+        }\n+        final String issuedAt = map.remove(ISSUED_AT);\n+        if (issuedAt != null) {\n+            builder.issuedAt(ISO_INSTANT.parse(issuedAt, Instant::from));\n+        }\n+        final String expiresIn = map.remove(EXPIRES_IN);\n+        if (expiresIn != null) {\n+            builder.expiresIn(Duration.ofSeconds(Long.parseLong(expiresIn)));\n+        }\n+        final String refreshToken = map.remove(REFRESH_TOKEN);\n+        if (refreshToken != null) {\n+            builder.refreshToken(refreshToken);\n+        }\n+        String scope = map.remove(SCOPE);\n+        if (scope == null) {\n+            scope = requestScope;\n+        }\n+        if (scope != null) {\n+            builder.scope(scope.split(SCOPE_SEPARATOR));\n+        }\n+        builder.extras(map);\n+\n+        builder.rawResponse(rawResponse);\n+\n+        return builder.build();\n+    }\n+\n+    private final String accessToken;\n+\n+    @Nullable\n+    private String tokenType;\n+\n+    @Nullable\n+    private Duration expiresIn;\n+\n+    @Nullable\n+    private String refreshToken;\n+\n+    private final ImmutableList.Builder<String> scope = ImmutableList.builder();\n+\n+    private final ImmutableMap.Builder<String, String> extras = ImmutableMap.builder();\n+\n+    @Nullable\n+    private Instant issuedAt;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    /**\n+     * Constructs a new instance of {@link GrantedOAuth2AccessTokenBuilder} given the mandatory value\n+     * {@value OAuth2Constants#ACCESS_TOKEN} of the access token issued by the authorization server.\n+     * @param accessToken {@value OAuth2Constants#ACCESS_TOKEN} Access Token response field,\n+     *                    REQUIRED. The access token issued by the authorization server.\n+     */\n+    GrantedOAuth2AccessTokenBuilder(String accessToken) {\n+        this.accessToken = requireNonNull(accessToken, \"accessToken\");\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#TOKEN_TYPE} Access Token response field,\n+     * REQUIRED. The type of the token issued as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     * Value is case insensitive.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder tokenType(String tokenType) {\n+        this.tokenType = requireNonNull(tokenType, \"tokenType\");\n+        return this;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#EXPIRES_IN} Access Token response field,\n+     * RECOMMENDED. {@link Duration} indicating the lifetime of the access token. For example,\n+     * the value 3600 seconds denotes that the access token will expire in one hour from the time\n+     * the response was generated. If omitted, the authorization server SHOULD provide the expiration\n+     * time via other means or document the default value.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder expiresIn(Duration expiresIn) {\n+        this.expiresIn = requireNonNull(expiresIn, \"expiresIn\");\n+        return this;\n+    }\n+\n+    /**\n+     * An {@link Instant} indicating when the Access Token was issued,\n+     * OPTIONAL. The value is NOT supplied with the Access Token response and calculated approximately using\n+     * {@value OAuth2Constants#EXPIRES_IN} field.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder issuedAt(Instant issuedAt) {\n+        this.issuedAt = requireNonNull(issuedAt, \"issuedAt\");\n+        return this;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#REFRESH_TOKEN} Access Token response field,\n+     * OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same\n+     * authorization grant as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder refreshToken(String refreshToken) {\n+        this.refreshToken = requireNonNull(refreshToken, \"refreshToken\");\n+        return this;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#SCOPE} Access Token Response field,\n+     * OPTIONAL. An {@link Iterable} of individual scope values.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder scope(Iterable<String> scope) {\n+        this.scope.addAll(requireNonNull(scope, \"scope\"));\n+        return this;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#SCOPE} Access Token Response field,\n+     * OPTIONAL. An array of individual scope values.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder scope(String... scope) {\n+        this.scope.add(requireNonNull(scope, \"scope\"));\n+        return this;\n+    }\n+\n+    /**\n+     * A pair of extra system-specific token parameters included with Access Token Response,\n+     * OPTIONAL.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder extras(String key, String value) {\n+        extras.put(key, value);\n+        return this;\n+    }\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Access Token Response,\n+     * OPTIONAL.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder extras(Map<String, String> extras) {\n+        this.extras.putAll(extras);\n+        return this;\n+    }\n+\n+    /**\n+     * An {@link Iterable} of extra system-specific token parameters included with Access Token Response,\n+     * OPTIONAL.\n+     */\n+    @SuppressWarnings(\"UnstableApiUsage\")\n+    public GrantedOAuth2AccessTokenBuilder extras(\n+            Iterable<? extends Map.Entry<String, String>> extras) {\n+        this.extras.putAll(extras);\n+        return this;\n+    }\n+\n+    private GrantedOAuth2AccessTokenBuilder rawResponse(String rawResponse) {\n+        this.rawResponse = requireNonNull(rawResponse, \"rawResponse\");\n+        return this;\n+    }\n+\n+    /**\n+     * Builds a new instance of {@link GrantedOAuth2AccessToken} based on the configured parameters.\n+     */\n+    public GrantedOAuth2AccessToken build() {\n+        return new GrantedOAuth2AccessToken(accessToken, tokenType,\n+                                      (issuedAt == null) ? Instant.now() : issuedAt, expiresIn,\n+                                            refreshToken, scope.build(), extras.build(), rawResponse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk3MjQ4NA==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r563972484", "createdAt": "2021-01-25T19:05:23Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessTokenBuilder.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.ISSUED_AT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SCOPE_SEPARATOR;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACCESS_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_IN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.REFRESH_TOKEN;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Builds an instance of {@link GrantedOAuth2AccessToken}.\n+ */\n+@UnstableApi\n+public final class GrantedOAuth2AccessTokenBuilder {\n+\n+    private static final TypeReference<LinkedHashMap<String, String>> MAP_TYPE =\n+            new TypeReference<LinkedHashMap<String, String>>() {};\n+\n+    static GrantedOAuth2AccessToken parse(String rawResponse, @Nullable String requestScope) {\n+\n+        final LinkedHashMap<String, String> map;\n+        try {\n+            map = JSON.readValue(requireNonNull(rawResponse, \"rawResponse\"), MAP_TYPE);\n+        } catch (JsonProcessingException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        final GrantedOAuth2AccessTokenBuilder builder =\n+                new GrantedOAuth2AccessTokenBuilder(requireNonNull(map.remove(ACCESS_TOKEN), ACCESS_TOKEN));\n+\n+        final String tokenType = map.remove(TOKEN_TYPE);\n+        if (tokenType != null) {\n+            builder.tokenType(tokenType);\n+        }\n+        final String issuedAt = map.remove(ISSUED_AT);\n+        if (issuedAt != null) {\n+            builder.issuedAt(ISO_INSTANT.parse(issuedAt, Instant::from));\n+        }\n+        final String expiresIn = map.remove(EXPIRES_IN);\n+        if (expiresIn != null) {\n+            builder.expiresIn(Duration.ofSeconds(Long.parseLong(expiresIn)));\n+        }\n+        final String refreshToken = map.remove(REFRESH_TOKEN);\n+        if (refreshToken != null) {\n+            builder.refreshToken(refreshToken);\n+        }\n+        String scope = map.remove(SCOPE);\n+        if (scope == null) {\n+            scope = requestScope;\n+        }\n+        if (scope != null) {\n+            builder.scope(scope.split(SCOPE_SEPARATOR));\n+        }\n+        builder.extras(map);\n+\n+        builder.rawResponse(rawResponse);\n+\n+        return builder.build();\n+    }\n+\n+    private final String accessToken;\n+\n+    @Nullable\n+    private String tokenType;\n+\n+    @Nullable\n+    private Duration expiresIn;\n+\n+    @Nullable\n+    private String refreshToken;\n+\n+    private final ImmutableList.Builder<String> scope = ImmutableList.builder();\n+\n+    private final ImmutableMap.Builder<String, String> extras = ImmutableMap.builder();\n+\n+    @Nullable\n+    private Instant issuedAt;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    /**\n+     * Constructs a new instance of {@link GrantedOAuth2AccessTokenBuilder} given the mandatory value\n+     * {@value OAuth2Constants#ACCESS_TOKEN} of the access token issued by the authorization server.\n+     * @param accessToken {@value OAuth2Constants#ACCESS_TOKEN} Access Token response field,\n+     *                    REQUIRED. The access token issued by the authorization server.\n+     */\n+    GrantedOAuth2AccessTokenBuilder(String accessToken) {\n+        this.accessToken = requireNonNull(accessToken, \"accessToken\");\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#TOKEN_TYPE} Access Token response field,\n+     * REQUIRED. The type of the token issued as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     * Value is case insensitive.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder tokenType(String tokenType) {\n+        this.tokenType = requireNonNull(tokenType, \"tokenType\");\n+        return this;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#EXPIRES_IN} Access Token response field,\n+     * RECOMMENDED. {@link Duration} indicating the lifetime of the access token. For example,\n+     * the value 3600 seconds denotes that the access token will expire in one hour from the time\n+     * the response was generated. If omitted, the authorization server SHOULD provide the expiration\n+     * time via other means or document the default value.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder expiresIn(Duration expiresIn) {\n+        this.expiresIn = requireNonNull(expiresIn, \"expiresIn\");\n+        return this;\n+    }\n+\n+    /**\n+     * An {@link Instant} indicating when the Access Token was issued,\n+     * OPTIONAL. The value is NOT supplied with the Access Token response and calculated approximately using\n+     * {@value OAuth2Constants#EXPIRES_IN} field.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder issuedAt(Instant issuedAt) {\n+        this.issuedAt = requireNonNull(issuedAt, \"issuedAt\");\n+        return this;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#REFRESH_TOKEN} Access Token response field,\n+     * OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same\n+     * authorization grant as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder refreshToken(String refreshToken) {\n+        this.refreshToken = requireNonNull(refreshToken, \"refreshToken\");\n+        return this;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#SCOPE} Access Token Response field,\n+     * OPTIONAL. An {@link Iterable} of individual scope values.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder scope(Iterable<String> scope) {\n+        this.scope.addAll(requireNonNull(scope, \"scope\"));\n+        return this;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#SCOPE} Access Token Response field,\n+     * OPTIONAL. An array of individual scope values.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder scope(String... scope) {\n+        this.scope.add(requireNonNull(scope, \"scope\"));\n+        return this;\n+    }\n+\n+    /**\n+     * A pair of extra system-specific token parameters included with Access Token Response,\n+     * OPTIONAL.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder extras(String key, String value) {\n+        extras.put(key, value);\n+        return this;\n+    }\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Access Token Response,\n+     * OPTIONAL.\n+     */\n+    public GrantedOAuth2AccessTokenBuilder extras(Map<String, String> extras) {\n+        this.extras.putAll(extras);\n+        return this;\n+    }\n+\n+    /**\n+     * An {@link Iterable} of extra system-specific token parameters included with Access Token Response,\n+     * OPTIONAL.\n+     */\n+    @SuppressWarnings(\"UnstableApiUsage\")\n+    public GrantedOAuth2AccessTokenBuilder extras(\n+            Iterable<? extends Map.Entry<String, String>> extras) {\n+        this.extras.putAll(extras);\n+        return this;\n+    }\n+\n+    private GrantedOAuth2AccessTokenBuilder rawResponse(String rawResponse) {\n+        this.rawResponse = requireNonNull(rawResponse, \"rawResponse\");\n+        return this;\n+    }\n+\n+    /**\n+     * Builds a new instance of {@link GrantedOAuth2AccessToken} based on the configured parameters.\n+     */\n+    public GrantedOAuth2AccessToken build() {\n+        return new GrantedOAuth2AccessToken(accessToken, tokenType,\n+                                      (issuedAt == null) ? Instant.now() : issuedAt, expiresIn,\n+                                            refreshToken, scope.build(), extras.build(), rawResponse);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI5NTYwNA=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NzY5NDE0OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizerBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQxNDo1Njo0N1rOIZNXpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxNzo0OTozNFrOIajK1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzMwNDM1Ng==", "bodyText": "Armeria does not expose Guava as a public API. It is only used for internal implementation which is relocated and shaded.\nHow about taking cacheSpec and using Caffeine cache instead of Guava cache as we did in \n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java\n    \n    \n         Line 304\n      in\n      bbc877f\n    \n    \n    \n    \n\n        \n          \n           public DnsResolverGroupBuilder cacheSpec(String cacheSpec) {", "url": "https://github.com/line/armeria/pull/2840#discussion_r563304356", "createdAt": "2021-01-24T14:56:47Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizerBuilder.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;\n+import com.linecorp.armeria.internal.server.auth.oauth2.TokenIntrospectionRequest;\n+import com.linecorp.armeria.server.auth.Authorizer;\n+\n+/**\n+ * Builds a {@link OAuth2TokenIntrospectionAuthorizer} instance.\n+ */\n+@UnstableApi\n+public final class OAuth2TokenIntrospectionAuthorizerBuilder {\n+\n+    private static final long DEFAULT_CACHE_MAX_SIZE = 1000;\n+    private static final Duration DEFAULT_CACHE_MAX_AGE = Duration.ofHours(1L);\n+\n+    private static Cache<String, OAuth2TokenDescriptor> createDefaultCache() {\n+        final CacheBuilder<Object, Object> cacheBuilder =\n+                CacheBuilder.newBuilder().maximumSize(DEFAULT_CACHE_MAX_SIZE)\n+                            .concurrencyLevel(Runtime.getRuntime().availableProcessors());\n+        cacheBuilder.expireAfterWrite(DEFAULT_CACHE_MAX_AGE);\n+        return cacheBuilder.build();\n+    }\n+\n+    private final WebClient introspectionEndpoint;\n+    private final String introspectionEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    @Nullable\n+    private String accessTokenType;\n+\n+    @Nullable\n+    private String realm;\n+\n+    private final ImmutableSet.Builder<String> permittedScope = ImmutableSet.builder();\n+\n+    @Nullable\n+    private Cache<String, OAuth2TokenDescriptor> tokenCache;\n+\n+    /**\n+     * Constructs new new builder for OAuth 2.0 Token Introspection {@link Authorizer},\n+     * as per<a href=\"https://tools.ietf.org/html/rfc7662#section-2\">[RFC7662], Section 2</a>.\n+     *\n+     * @param introspectionEndpoint A {@link WebClient} to facilitate the Token Introspection request. Must\n+     *                              correspond to the Token Introspection endpoint of the OAuth 2.0 system.\n+     * @param introspectionEndpointPath A URI path that corresponds to the Token Introspection endpoint of the\n+     *                                  OAuth 2.0 system.\n+     */\n+    OAuth2TokenIntrospectionAuthorizerBuilder(WebClient introspectionEndpoint,\n+                                              String introspectionEndpointPath) {\n+        this.introspectionEndpoint = requireNonNull(introspectionEndpoint, \"introspectionEndpoint\");\n+        this.introspectionEndpointPath =\n+                requireNonNull(introspectionEndpointPath, \"introspectionEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 Introspection requests based on encoded authorization\n+     * token and authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 Introspection requests based on encoded authorization\n+     * token and {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 Introspection requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 Introspection requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * Access Token type permitted by this authorizer,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     * The authorizer will accept any type if empty. OPTIONAL.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder accessTokenType(String accessTokenType) {\n+        this.accessTokenType = requireNonNull(accessTokenType, \"accessTokenType\");\n+        return this;\n+    }\n+\n+    /**\n+     * An HTTP Realm - a name designating of the protected area. OPTIONAL.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder realm(String realm) {\n+        this.realm = requireNonNull(realm, \"realm\");\n+        return this;\n+    }\n+\n+    /**\n+     * An {@link Iterable} of case-sensitive scope strings permitted by this authorizer.\n+     * The authorizer will accept any scope if empty.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder permittedScope(Iterable<String> scope) {\n+        permittedScope.addAll(requireNonNull(scope, \"scope\"));\n+        return this;\n+    }\n+\n+    /**\n+     * An array of of case-sensitive scope strings permitted by this authorizer.\n+     * The authorizer will accept any scope if empty.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder permittedScope(String... scope) {\n+        permittedScope.add(requireNonNull(scope, \"scope\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Provides caching facility for OAuth 2.0 {@link OAuth2TokenDescriptor} in order to avoid continuous Token\n+     * Introspection as per <a href=\"https://tools.ietf.org/html/rfc7662#section-2.2\">[RFC7662], Section 2.2</a>.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder tokenCache(\n+            Cache<String, OAuth2TokenDescriptor> tokenCache) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDcxMDEwMA==", "bodyText": "Replaced Guava Cache with Caffeine in the latest commit as you requested using the cache spec.", "url": "https://github.com/line/armeria/pull/2840#discussion_r564710100", "createdAt": "2021-01-26T17:49:34Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizerBuilder.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;\n+import com.linecorp.armeria.internal.server.auth.oauth2.TokenIntrospectionRequest;\n+import com.linecorp.armeria.server.auth.Authorizer;\n+\n+/**\n+ * Builds a {@link OAuth2TokenIntrospectionAuthorizer} instance.\n+ */\n+@UnstableApi\n+public final class OAuth2TokenIntrospectionAuthorizerBuilder {\n+\n+    private static final long DEFAULT_CACHE_MAX_SIZE = 1000;\n+    private static final Duration DEFAULT_CACHE_MAX_AGE = Duration.ofHours(1L);\n+\n+    private static Cache<String, OAuth2TokenDescriptor> createDefaultCache() {\n+        final CacheBuilder<Object, Object> cacheBuilder =\n+                CacheBuilder.newBuilder().maximumSize(DEFAULT_CACHE_MAX_SIZE)\n+                            .concurrencyLevel(Runtime.getRuntime().availableProcessors());\n+        cacheBuilder.expireAfterWrite(DEFAULT_CACHE_MAX_AGE);\n+        return cacheBuilder.build();\n+    }\n+\n+    private final WebClient introspectionEndpoint;\n+    private final String introspectionEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    @Nullable\n+    private String accessTokenType;\n+\n+    @Nullable\n+    private String realm;\n+\n+    private final ImmutableSet.Builder<String> permittedScope = ImmutableSet.builder();\n+\n+    @Nullable\n+    private Cache<String, OAuth2TokenDescriptor> tokenCache;\n+\n+    /**\n+     * Constructs new new builder for OAuth 2.0 Token Introspection {@link Authorizer},\n+     * as per<a href=\"https://tools.ietf.org/html/rfc7662#section-2\">[RFC7662], Section 2</a>.\n+     *\n+     * @param introspectionEndpoint A {@link WebClient} to facilitate the Token Introspection request. Must\n+     *                              correspond to the Token Introspection endpoint of the OAuth 2.0 system.\n+     * @param introspectionEndpointPath A URI path that corresponds to the Token Introspection endpoint of the\n+     *                                  OAuth 2.0 system.\n+     */\n+    OAuth2TokenIntrospectionAuthorizerBuilder(WebClient introspectionEndpoint,\n+                                              String introspectionEndpointPath) {\n+        this.introspectionEndpoint = requireNonNull(introspectionEndpoint, \"introspectionEndpoint\");\n+        this.introspectionEndpointPath =\n+                requireNonNull(introspectionEndpointPath, \"introspectionEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 Introspection requests based on encoded authorization\n+     * token and authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 Introspection requests based on encoded authorization\n+     * token and {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 Introspection requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 Introspection requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * Access Token type permitted by this authorizer,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     * The authorizer will accept any type if empty. OPTIONAL.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder accessTokenType(String accessTokenType) {\n+        this.accessTokenType = requireNonNull(accessTokenType, \"accessTokenType\");\n+        return this;\n+    }\n+\n+    /**\n+     * An HTTP Realm - a name designating of the protected area. OPTIONAL.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder realm(String realm) {\n+        this.realm = requireNonNull(realm, \"realm\");\n+        return this;\n+    }\n+\n+    /**\n+     * An {@link Iterable} of case-sensitive scope strings permitted by this authorizer.\n+     * The authorizer will accept any scope if empty.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder permittedScope(Iterable<String> scope) {\n+        permittedScope.addAll(requireNonNull(scope, \"scope\"));\n+        return this;\n+    }\n+\n+    /**\n+     * An array of of case-sensitive scope strings permitted by this authorizer.\n+     * The authorizer will accept any scope if empty.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder permittedScope(String... scope) {\n+        permittedScope.add(requireNonNull(scope, \"scope\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Provides caching facility for OAuth 2.0 {@link OAuth2TokenDescriptor} in order to avoid continuous Token\n+     * Introspection as per <a href=\"https://tools.ietf.org/html/rfc7662#section-2.2\">[RFC7662], Section 2.2</a>.\n+     */\n+    public OAuth2TokenIntrospectionAuthorizerBuilder tokenCache(\n+            Cache<String, OAuth2TokenDescriptor> tokenCache) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzMwNDM1Ng=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NzcwNjgzOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQxNTowODowOVrOIZNd2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxOToxOTo0NVrOIZ2sPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzMwNTk0NA==", "bodyText": "Could we make AuthorizationStatus.ofSuccess(null) and CompletableFuture a singleton?\nprivate static final CompletionStage<AuthorizationStatus> SUCCESS_STATUS = \n        CompletableFuture.completedFuture(AuthorizationStatus.ofSuccess(null));", "url": "https://github.com/line/armeria/pull/2840#discussion_r563305944", "createdAt": "2021-01-24T15:08:09Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.UNSUPPORTED_TOKEN_TYPE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.cache.Cache;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.OAuth2Token;\n+import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;\n+import com.linecorp.armeria.internal.server.auth.oauth2.TokenIntrospectionRequest;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.AbstractAuthorizerWithHandlers;\n+import com.linecorp.armeria.server.auth.AuthFailureHandler;\n+import com.linecorp.armeria.server.auth.AuthorizationStatus;\n+\n+import io.netty.util.AttributeKey;\n+\n+/**\n+ * Determines whether a given {@link OAuth2Token} is authorized for the service registered in using OAuth 2.0\n+ * Token Introspection. {@code ctx} can be used for storing authorization information about the request for use\n+ * in business logic.\n+ */\n+@UnstableApi\n+public final class OAuth2TokenIntrospectionAuthorizer extends AbstractAuthorizerWithHandlers<OAuth2Token> {\n+\n+    /**\n+     * Returns a newly created {@link OAuth2TokenIntrospectionAuthorizerBuilder}.\n+     *\n+     * @param introspectionEndpoint A {@link WebClient} to facilitate the Token Introspection request. Must\n+     *                              correspond to the Token Introspection endpoint of the OAuth 2.0 system.\n+     * @param introspectionEndpointPath A URI path that corresponds to the Token Introspection endpoint of the\n+     *                                  OAuth 2.0 system.\n+     */\n+    public static OAuth2TokenIntrospectionAuthorizerBuilder builder(WebClient introspectionEndpoint,\n+                                                                    String introspectionEndpointPath) {\n+        return new OAuth2TokenIntrospectionAuthorizerBuilder(introspectionEndpoint, introspectionEndpointPath);\n+    }\n+\n+    static final AttributeKey<Integer> ERROR_CODE = AttributeKey.valueOf(\"x-oauth2-error\");\n+    static final AttributeKey<String> ERROR_TYPE = AttributeKey.valueOf(\"x-oauth2-error-type\");\n+    static final String INVALID_TOKEN = \"invalid_token\";\n+    static final String INSUFFICIENT_SCOPE = \"insufficient_scope\";\n+\n+    private final Cache<String, OAuth2TokenDescriptor> tokenCache;\n+    private final Set<String> permittedScope;\n+    @Nullable\n+    private final String accessTokenType;\n+    @Nullable\n+    private final String realm;\n+    private final TokenIntrospectionRequest tokenIntrospectionRequest;\n+    private final AuthFailureHandler authFailureHandler;\n+\n+    OAuth2TokenIntrospectionAuthorizer(Cache<String, OAuth2TokenDescriptor> tokenCache,\n+                                       @Nullable String accessTokenType, @Nullable String realm,\n+                                       Set<String> permittedScope,\n+                                       TokenIntrospectionRequest tokenIntrospectionRequest) {\n+        this.tokenCache = requireNonNull(tokenCache, \"tokenCache\");\n+        this.accessTokenType = accessTokenType;\n+        this.realm = realm;\n+        this.permittedScope = requireNonNull(permittedScope, \"permittedScope\");\n+        this.tokenIntrospectionRequest =\n+                requireNonNull(tokenIntrospectionRequest, \"tokenIntrospectionRequest\");\n+        authFailureHandler =\n+                new OAuth2AuthorizationFailureHandler(accessTokenType, realm, String.join(\" \", permittedScope));\n+    }\n+\n+    /**\n+     * Scopes permitted by this authorizer. The authorizer will accept any scope if empty.\n+     */\n+    public Set<String> permittedScope() {\n+        return permittedScope;\n+    }\n+\n+    /**\n+     * Authorization type permitted by this authorizer. The authorizer will accept any type if empty.\n+     * One of the registered HTTP authentication schemes as per\n+     * <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     * HTTP Authentication Scheme Registry</a>.\n+     */\n+    @Nullable\n+    public String accessTokenType() {\n+        return accessTokenType;\n+    }\n+\n+    /**\n+     * An HTTP Realm - a name designating the protected area. OPTIONAL.\n+     */\n+    @Nullable\n+    public String realm() {\n+        return realm;\n+    }\n+\n+    /**\n+     * An instance of {@link OAuth2AuthorizationFailureHandler}.\n+     */\n+    public AuthFailureHandler failureHandler() {\n+        return authFailureHandler;\n+    }\n+\n+    @Override\n+    public CompletionStage<AuthorizationStatus> authorizeAndSupplyHandlers(ServiceRequestContext ctx,\n+                                                                           @Nullable OAuth2Token data) {\n+\n+        if (data == null) {\n+            // no access token present\n+            return CompletableFuture.completedFuture(AuthorizationStatus.ofFailure(authFailureHandler));\n+        }\n+        final String accessToken = data.accessToken();\n+        final OAuth2TokenDescriptor tokenDescriptor = tokenCache.getIfPresent(accessToken);\n+        if (tokenDescriptor != null) {\n+            // just re-validate existing token\n+            final AuthorizationStatus status =\n+                    validateDescriptor(ctx, tokenDescriptor) ? AuthorizationStatus.ofSuccess(null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk4MTM3NQ==", "bodyText": "Added SUCCESS constant to AuthorizationStatus and added the optimization you've suggested.", "url": "https://github.com/line/armeria/pull/2840#discussion_r563981375", "createdAt": "2021-01-25T19:19:45Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.UNSUPPORTED_TOKEN_TYPE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.cache.Cache;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.OAuth2Token;\n+import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;\n+import com.linecorp.armeria.internal.server.auth.oauth2.TokenIntrospectionRequest;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.AbstractAuthorizerWithHandlers;\n+import com.linecorp.armeria.server.auth.AuthFailureHandler;\n+import com.linecorp.armeria.server.auth.AuthorizationStatus;\n+\n+import io.netty.util.AttributeKey;\n+\n+/**\n+ * Determines whether a given {@link OAuth2Token} is authorized for the service registered in using OAuth 2.0\n+ * Token Introspection. {@code ctx} can be used for storing authorization information about the request for use\n+ * in business logic.\n+ */\n+@UnstableApi\n+public final class OAuth2TokenIntrospectionAuthorizer extends AbstractAuthorizerWithHandlers<OAuth2Token> {\n+\n+    /**\n+     * Returns a newly created {@link OAuth2TokenIntrospectionAuthorizerBuilder}.\n+     *\n+     * @param introspectionEndpoint A {@link WebClient} to facilitate the Token Introspection request. Must\n+     *                              correspond to the Token Introspection endpoint of the OAuth 2.0 system.\n+     * @param introspectionEndpointPath A URI path that corresponds to the Token Introspection endpoint of the\n+     *                                  OAuth 2.0 system.\n+     */\n+    public static OAuth2TokenIntrospectionAuthorizerBuilder builder(WebClient introspectionEndpoint,\n+                                                                    String introspectionEndpointPath) {\n+        return new OAuth2TokenIntrospectionAuthorizerBuilder(introspectionEndpoint, introspectionEndpointPath);\n+    }\n+\n+    static final AttributeKey<Integer> ERROR_CODE = AttributeKey.valueOf(\"x-oauth2-error\");\n+    static final AttributeKey<String> ERROR_TYPE = AttributeKey.valueOf(\"x-oauth2-error-type\");\n+    static final String INVALID_TOKEN = \"invalid_token\";\n+    static final String INSUFFICIENT_SCOPE = \"insufficient_scope\";\n+\n+    private final Cache<String, OAuth2TokenDescriptor> tokenCache;\n+    private final Set<String> permittedScope;\n+    @Nullable\n+    private final String accessTokenType;\n+    @Nullable\n+    private final String realm;\n+    private final TokenIntrospectionRequest tokenIntrospectionRequest;\n+    private final AuthFailureHandler authFailureHandler;\n+\n+    OAuth2TokenIntrospectionAuthorizer(Cache<String, OAuth2TokenDescriptor> tokenCache,\n+                                       @Nullable String accessTokenType, @Nullable String realm,\n+                                       Set<String> permittedScope,\n+                                       TokenIntrospectionRequest tokenIntrospectionRequest) {\n+        this.tokenCache = requireNonNull(tokenCache, \"tokenCache\");\n+        this.accessTokenType = accessTokenType;\n+        this.realm = realm;\n+        this.permittedScope = requireNonNull(permittedScope, \"permittedScope\");\n+        this.tokenIntrospectionRequest =\n+                requireNonNull(tokenIntrospectionRequest, \"tokenIntrospectionRequest\");\n+        authFailureHandler =\n+                new OAuth2AuthorizationFailureHandler(accessTokenType, realm, String.join(\" \", permittedScope));\n+    }\n+\n+    /**\n+     * Scopes permitted by this authorizer. The authorizer will accept any scope if empty.\n+     */\n+    public Set<String> permittedScope() {\n+        return permittedScope;\n+    }\n+\n+    /**\n+     * Authorization type permitted by this authorizer. The authorizer will accept any type if empty.\n+     * One of the registered HTTP authentication schemes as per\n+     * <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     * HTTP Authentication Scheme Registry</a>.\n+     */\n+    @Nullable\n+    public String accessTokenType() {\n+        return accessTokenType;\n+    }\n+\n+    /**\n+     * An HTTP Realm - a name designating the protected area. OPTIONAL.\n+     */\n+    @Nullable\n+    public String realm() {\n+        return realm;\n+    }\n+\n+    /**\n+     * An instance of {@link OAuth2AuthorizationFailureHandler}.\n+     */\n+    public AuthFailureHandler failureHandler() {\n+        return authFailureHandler;\n+    }\n+\n+    @Override\n+    public CompletionStage<AuthorizationStatus> authorizeAndSupplyHandlers(ServiceRequestContext ctx,\n+                                                                           @Nullable OAuth2Token data) {\n+\n+        if (data == null) {\n+            // no access token present\n+            return CompletableFuture.completedFuture(AuthorizationStatus.ofFailure(authFailureHandler));\n+        }\n+        final String accessToken = data.accessToken();\n+        final OAuth2TokenDescriptor tokenDescriptor = tokenCache.getIfPresent(accessToken);\n+        if (tokenDescriptor != null) {\n+            // just re-validate existing token\n+            final AuthorizationStatus status =\n+                    validateDescriptor(ctx, tokenDescriptor) ? AuthorizationStatus.ofSuccess(null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzMwNTk0NA=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0OTA3NDc1OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQwNzowNzoxM1rOIZZSsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxOToyMTozNFrOIZ2weQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzQ5OTY5Nw==", "bodyText": "Add static?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563499697", "createdAt": "2021-01-25T07:07:13Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant {\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    /**\n+     * Holds a token object and facilitates its lifecycle.\n+     */\n+    private final TokenLifecycleManager<GrantedOAuth2AccessToken> tokenManager;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier,\n+                                     @Nullable Consumer<? super GrantedOAuth2AccessToken> tokenConsumer,\n+                                     @Nullable Executor executor) {\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        tokenManager = new TokenLifecycleManager<>(this::isValid, this::canRefresh,\n+                                                   this::shallObtainInsteadOfUpdate,\n+                                                   this::obtainAccessToken, this::refreshAccessToken,\n+                                                   tokenSupplier, tokenConsumer, executor);\n+    }\n+\n+    /**\n+     * Tests the token for validity at the given {@link Instant} time.\n+     */\n+    private boolean isValid(GrantedOAuth2AccessToken token, Instant now) {\n+        return token.isValid(now.plus(refreshBefore));\n+    }\n+\n+    /**\n+     * Tests whether the token object can be refreshed or re-obtained.\n+     */\n+    private boolean canRefresh(GrantedOAuth2AccessToken token) {\n+        return token.refreshToken() != null;\n+    }\n+\n+    /**\n+     * Tests whether given {@link Throwable} indicates that the token shall be re-obtained\n+     * after the refresh operation failure.\n+     */\n+    private boolean shallObtainInsteadOfUpdate(Throwable throwable) {\n+        return throwable instanceof TokenRequestException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk4MjQ1Nw==", "bodyText": "changed", "url": "https://github.com/line/armeria/pull/2840#discussion_r563982457", "createdAt": "2021-01-25T19:21:34Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant {\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    /**\n+     * Holds a token object and facilitates its lifecycle.\n+     */\n+    private final TokenLifecycleManager<GrantedOAuth2AccessToken> tokenManager;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier,\n+                                     @Nullable Consumer<? super GrantedOAuth2AccessToken> tokenConsumer,\n+                                     @Nullable Executor executor) {\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        tokenManager = new TokenLifecycleManager<>(this::isValid, this::canRefresh,\n+                                                   this::shallObtainInsteadOfUpdate,\n+                                                   this::obtainAccessToken, this::refreshAccessToken,\n+                                                   tokenSupplier, tokenConsumer, executor);\n+    }\n+\n+    /**\n+     * Tests the token for validity at the given {@link Instant} time.\n+     */\n+    private boolean isValid(GrantedOAuth2AccessToken token, Instant now) {\n+        return token.isValid(now.plus(refreshBefore));\n+    }\n+\n+    /**\n+     * Tests whether the token object can be refreshed or re-obtained.\n+     */\n+    private boolean canRefresh(GrantedOAuth2AccessToken token) {\n+        return token.refreshToken() != null;\n+    }\n+\n+    /**\n+     * Tests whether given {@link Throwable} indicates that the token shall be re-obtained\n+     * after the refresh operation failure.\n+     */\n+    private boolean shallObtainInsteadOfUpdate(Throwable throwable) {\n+        return throwable instanceof TokenRequestException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzQ5OTY5Nw=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0OTA3ODYzOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQwNzowODozNFrOIZZU0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxOToyMjozNFrOIZ2ywA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUwMDI0Mg==", "bodyText": "Add @FunctionalInterface?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563500242", "createdAt": "2021-01-25T07:08:34Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+@UnstableApi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk4MzA0MA==", "bodyText": "added", "url": "https://github.com/line/armeria/pull/2840#discussion_r563983040", "createdAt": "2021-01-25T19:22:34Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+@UnstableApi", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUwMDI0Mg=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0OTA4MDY5OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQwNzowOToyMFrOIZZV_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNDo1MzoyNlrOIbLiaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUwMDU0Mw==", "bodyText": "Drop get prefix and just accessToken()?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563500543", "createdAt": "2021-01-25T07:09:20Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+@UnstableApi\n+public interface OAuth2AuthorizationGrant {\n+\n+    /**\n+     * Produces OAuth 2.0 Access Token\n+     */\n+    CompletionStage<GrantedOAuth2AccessToken> getAccessToken();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk4NDQ4NQ==", "bodyText": "this method assumes some action to be executed in order to get the token. to me accessToken() looks like reading a field value. do you think this won't be confusing?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563984485", "createdAt": "2021-01-25T19:24:51Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+@UnstableApi\n+public interface OAuth2AuthorizationGrant {\n+\n+    /**\n+     * Produces OAuth 2.0 Access Token\n+     */\n+    CompletionStage<GrantedOAuth2AccessToken> getAccessToken();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUwMDU0Mw=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTI0NTM4MA==", "bodyText": "+1 for retaining the get prefix.", "url": "https://github.com/line/armeria/pull/2840#discussion_r565245380", "createdAt": "2021-01-27T11:47:33Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+@UnstableApi\n+public interface OAuth2AuthorizationGrant {\n+\n+    /**\n+     * Produces OAuth 2.0 Access Token\n+     */\n+    CompletionStage<GrantedOAuth2AccessToken> getAccessToken();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUwMDU0Mw=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTM3MTQ5Nw==", "bodyText": "That makes sense. Let's keep it as it is.", "url": "https://github.com/line/armeria/pull/2840#discussion_r565371497", "createdAt": "2021-01-27T14:53:26Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+@UnstableApi\n+public interface OAuth2AuthorizationGrant {\n+\n+    /**\n+     * Produces OAuth 2.0 Access Token\n+     */\n+    CompletionStage<GrantedOAuth2AccessToken> getAccessToken();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUwMDU0Mw=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0OTA5NTk3OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQwNzoxNToxOVrOIZZepA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxODowNDozMVrOIajyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUwMjc1Ng==", "bodyText": "How about raising an IllegalStateException if clientAuthorization was already set before.", "url": "https://github.com/line/armeria/pull/2840#discussion_r563502756", "createdAt": "2021-01-25T07:15:19Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.internal.client.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<? super GrantedOAuth2AccessToken> tokenConsumer;\n+\n+    @Nullable\n+    private Executor executor;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDcyMDE4MQ==", "bodyText": "added the check", "url": "https://github.com/line/armeria/pull/2840#discussion_r564720181", "createdAt": "2021-01-26T18:04:31Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.internal.client.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<? super GrantedOAuth2AccessToken> tokenConsumer;\n+\n+    @Nullable\n+    private Executor executor;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUwMjc1Ng=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0OTEyNjkyOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQwNzoyNzowM1rOIZZwcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQyMDoyNzowMlrOIZ5GQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUwNzMxNA==", "bodyText": "How about narrowing the executor down to EventExecutor to guarantee serial execution.", "url": "https://github.com/line/armeria/pull/2840#discussion_r563507314", "createdAt": "2021-01-25T07:27:03Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.internal.client.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<? super GrantedOAuth2AccessToken> tokenConsumer;\n+\n+    @Nullable\n+    private Executor executor;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientBasicAuthorization(Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T refreshBefore(Duration refreshBefore) {\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        return (T) this;\n+    }\n+\n+    final Duration refreshBefore() {\n+        return refreshBefore;\n+    }\n+\n+    /**\n+     * A {@link Supplier} to load Access Token from, to be able to restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenSupplier(Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier) {\n+        this.tokenSupplier = requireNonNull(tokenSupplier, \"tokenSupplier\");\n+        return (T) this;\n+    }\n+\n+    @Nullable\n+    final Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier() {\n+        return tokenSupplier;\n+    }\n+\n+    /**\n+     * A {@link Consumer} to store Access Token to, to be able restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenConsumer(Consumer<? super GrantedOAuth2AccessToken> tokenConsumer) {\n+        this.tokenConsumer = requireNonNull(tokenConsumer, \"tokenConsumer\");\n+        return (T) this;\n+    }\n+\n+    @Nullable\n+    final Consumer<? super GrantedOAuth2AccessToken> tokenConsumer() {\n+        return tokenConsumer;\n+    }\n+\n+    /**\n+     * An optional {@link Executor} that facilitates asynchronous access token obtain and refresh operations.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T executor(Executor executor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDAyMDgwMg==", "bodyText": "Not sure I understood your suggestion. Executor in this context is part of public API. I don't think most of the API users are aware of EventExecutor. What's a purpose of narrowing it down and how EventExecutor will guarantee serial execution? Asynchronous execution is made sure by SerialFuture which uses Executor.", "url": "https://github.com/line/armeria/pull/2840#discussion_r564020802", "createdAt": "2021-01-25T20:27:02Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.internal.client.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<? super GrantedOAuth2AccessToken> tokenConsumer;\n+\n+    @Nullable\n+    private Executor executor;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientBasicAuthorization(Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T refreshBefore(Duration refreshBefore) {\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        return (T) this;\n+    }\n+\n+    final Duration refreshBefore() {\n+        return refreshBefore;\n+    }\n+\n+    /**\n+     * A {@link Supplier} to load Access Token from, to be able to restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenSupplier(Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier) {\n+        this.tokenSupplier = requireNonNull(tokenSupplier, \"tokenSupplier\");\n+        return (T) this;\n+    }\n+\n+    @Nullable\n+    final Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier() {\n+        return tokenSupplier;\n+    }\n+\n+    /**\n+     * A {@link Consumer} to store Access Token to, to be able restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenConsumer(Consumer<? super GrantedOAuth2AccessToken> tokenConsumer) {\n+        this.tokenConsumer = requireNonNull(tokenConsumer, \"tokenConsumer\");\n+        return (T) this;\n+    }\n+\n+    @Nullable\n+    final Consumer<? super GrantedOAuth2AccessToken> tokenConsumer() {\n+        return tokenConsumer;\n+    }\n+\n+    /**\n+     * An optional {@link Executor} that facilitates asynchronous access token obtain and refresh operations.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T executor(Executor executor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUwNzMxNA=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0OTE0ODgxOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQwNzozNToyM1rOIZZ9jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQyMDoyODoxNVrOIZ5I-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUxMDY2OA==", "bodyText": "Add requireNonNull before creating a lambda?", "url": "https://github.com/line/armeria/pull/2840#discussion_r563510668", "createdAt": "2021-01-25T07:35:23Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Decorates a {@link HttpClient} with an OAuth 2.0 Authorization Grant flow.\n+ */\n+@UnstableApi\n+public final class OAuth2Client extends SimpleDecoratingHttpClient {\n+\n+    /**\n+     * Creates a new {@link HttpClient} decorator that handles OAuth 2.0 Authorization Grant flow.\n+     * @param authorizationGrant An {@link OAuth2AuthorizationGrant} implementing specific\n+     *                           OAuth 2.0 Authorization Grant flow.\n+     */\n+    public static Function<? super HttpClient, OAuth2Client> newDecorator(\n+            OAuth2AuthorizationGrant authorizationGrant) {\n+        return delegate -> new OAuth2Client(delegate, authorizationGrant);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDAyMTQ5Nw==", "bodyText": "done", "url": "https://github.com/line/armeria/pull/2840#discussion_r564021497", "createdAt": "2021-01-25T20:28:15Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Decorates a {@link HttpClient} with an OAuth 2.0 Authorization Grant flow.\n+ */\n+@UnstableApi\n+public final class OAuth2Client extends SimpleDecoratingHttpClient {\n+\n+    /**\n+     * Creates a new {@link HttpClient} decorator that handles OAuth 2.0 Authorization Grant flow.\n+     * @param authorizationGrant An {@link OAuth2AuthorizationGrant} implementing specific\n+     *                           OAuth 2.0 Authorization Grant flow.\n+     */\n+    public static Function<? super HttpClient, OAuth2Client> newDecorator(\n+            OAuth2AuthorizationGrant authorizationGrant) {\n+        return delegate -> new OAuth2Client(delegate, authorizationGrant);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUxMDY2OA=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0OTE5MTgzOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ResourceOwnerPasswordCredentialsGrantBuilder.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQwNzo0OToyNlrOIZaWBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxOToxMToxMVrOIcxGqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUxNjkzMw==", "bodyText": "I think some users may want to use a non-supplier version for building this class and others.\nHow about globally applying this pattern to other builder methods?\n// Remove `Supplier` postfix from method name\npublic OAuth2ResourceOwnerPasswordCredentialsGrantBuilder userCredentials(\n        Supplier<Entry<String, String>> userCredentialsSupplier) {\n    this.userCredentialsSupplier = requireNonNull(userCredentialsSupplier, \"userCredentialsSupplier\");\n    return this;\n}\n\npublic OAuth2ResourceOwnerPasswordCredentialsGrantBuilder userCredentials(\n        String username, String password) {\n    requireNonNull(username, \"username\");\n    requireNonNull(password, \"password\");\n    userCredentials(() -> new SimpleEntry<>(username, password));\n    return this;\n}", "url": "https://github.com/line/armeria/pull/2840#discussion_r563516933", "createdAt": "2021-01-25T07:49:26Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ResourceOwnerPasswordCredentialsGrantBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.internal.client.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.internal.client.auth.oauth2.ResourceOwnerPasswordCredentialsTokenRequest;\n+\n+/**\n+ * Builds {@link OAuth2ClientCredentialsGrant}.\n+ */\n+@UnstableApi\n+public final class OAuth2ResourceOwnerPasswordCredentialsGrantBuilder\n+        extends AbstractOAuth2AuthorizationGrantBuilder<OAuth2ResourceOwnerPasswordCredentialsGrantBuilder> {\n+\n+    @Nullable\n+    private Supplier<? extends Map.Entry<String, String>> userCredentialsSupplier;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     */\n+    OAuth2ResourceOwnerPasswordCredentialsGrantBuilder(\n+            WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath);\n+    }\n+\n+    /**\n+     * A supplier of user credentials: \"username\" and \"password\" used to grant the Access Token. REQUIRED.\n+     */\n+    public OAuth2ResourceOwnerPasswordCredentialsGrantBuilder userCredentialsSupplier(\n+            Supplier<Entry<String, String>> userCredentialsSupplier) {\n+        this.userCredentialsSupplier = requireNonNull(userCredentialsSupplier, \"userCredentialsSupplier\");\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDAyNjUyNg==", "bodyText": "No, don't want to put ownership over any credentials or credentials lifecycle to this infrastructure, especially considering that credentials change over time (sometimes quite often - when those get compromised, when some policy kicks in or when the user simply wishes to change its password). The user can easily do () -> new SimpleEntry<>(username, password) as well, but I would strongly advise against it as it's an anti-pattern.\nIn my typical implementation credentials managed by 3rd-party services like Vault and those could get changed or updated and any moment.", "url": "https://github.com/line/armeria/pull/2840#discussion_r564026526", "createdAt": "2021-01-25T20:37:20Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ResourceOwnerPasswordCredentialsGrantBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.internal.client.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.internal.client.auth.oauth2.ResourceOwnerPasswordCredentialsTokenRequest;\n+\n+/**\n+ * Builds {@link OAuth2ClientCredentialsGrant}.\n+ */\n+@UnstableApi\n+public final class OAuth2ResourceOwnerPasswordCredentialsGrantBuilder\n+        extends AbstractOAuth2AuthorizationGrantBuilder<OAuth2ResourceOwnerPasswordCredentialsGrantBuilder> {\n+\n+    @Nullable\n+    private Supplier<? extends Map.Entry<String, String>> userCredentialsSupplier;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     */\n+    OAuth2ResourceOwnerPasswordCredentialsGrantBuilder(\n+            WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath);\n+    }\n+\n+    /**\n+     * A supplier of user credentials: \"username\" and \"password\" used to grant the Access Token. REQUIRED.\n+     */\n+    public OAuth2ResourceOwnerPasswordCredentialsGrantBuilder userCredentialsSupplier(\n+            Supplier<Entry<String, String>> userCredentialsSupplier) {\n+        this.userCredentialsSupplier = requireNonNull(userCredentialsSupplier, \"userCredentialsSupplier\");\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUxNjkzMw=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTI0NDgyMA==", "bodyText": "Then how about just renaming userCredentialsSupplier() method to userCredentials() for brevity?", "url": "https://github.com/line/armeria/pull/2840#discussion_r565244820", "createdAt": "2021-01-27T11:46:38Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ResourceOwnerPasswordCredentialsGrantBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.internal.client.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.internal.client.auth.oauth2.ResourceOwnerPasswordCredentialsTokenRequest;\n+\n+/**\n+ * Builds {@link OAuth2ClientCredentialsGrant}.\n+ */\n+@UnstableApi\n+public final class OAuth2ResourceOwnerPasswordCredentialsGrantBuilder\n+        extends AbstractOAuth2AuthorizationGrantBuilder<OAuth2ResourceOwnerPasswordCredentialsGrantBuilder> {\n+\n+    @Nullable\n+    private Supplier<? extends Map.Entry<String, String>> userCredentialsSupplier;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     */\n+    OAuth2ResourceOwnerPasswordCredentialsGrantBuilder(\n+            WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath);\n+    }\n+\n+    /**\n+     * A supplier of user credentials: \"username\" and \"password\" used to grant the Access Token. REQUIRED.\n+     */\n+    public OAuth2ResourceOwnerPasswordCredentialsGrantBuilder userCredentialsSupplier(\n+            Supplier<Entry<String, String>> userCredentialsSupplier) {\n+        this.userCredentialsSupplier = requireNonNull(userCredentialsSupplier, \"userCredentialsSupplier\");\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUxNjkzMw=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njc0MDU2MQ==", "bodyText": "sure, np", "url": "https://github.com/line/armeria/pull/2840#discussion_r566740561", "createdAt": "2021-01-29T10:57:39Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ResourceOwnerPasswordCredentialsGrantBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.internal.client.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.internal.client.auth.oauth2.ResourceOwnerPasswordCredentialsTokenRequest;\n+\n+/**\n+ * Builds {@link OAuth2ClientCredentialsGrant}.\n+ */\n+@UnstableApi\n+public final class OAuth2ResourceOwnerPasswordCredentialsGrantBuilder\n+        extends AbstractOAuth2AuthorizationGrantBuilder<OAuth2ResourceOwnerPasswordCredentialsGrantBuilder> {\n+\n+    @Nullable\n+    private Supplier<? extends Map.Entry<String, String>> userCredentialsSupplier;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     */\n+    OAuth2ResourceOwnerPasswordCredentialsGrantBuilder(\n+            WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath);\n+    }\n+\n+    /**\n+     * A supplier of user credentials: \"username\" and \"password\" used to grant the Access Token. REQUIRED.\n+     */\n+    public OAuth2ResourceOwnerPasswordCredentialsGrantBuilder userCredentialsSupplier(\n+            Supplier<Entry<String, String>> userCredentialsSupplier) {\n+        this.userCredentialsSupplier = requireNonNull(userCredentialsSupplier, \"userCredentialsSupplier\");\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUxNjkzMw=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzAzNTU2Mg==", "bodyText": "done", "url": "https://github.com/line/armeria/pull/2840#discussion_r567035562", "createdAt": "2021-01-29T19:11:11Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ResourceOwnerPasswordCredentialsGrantBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.internal.client.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.internal.client.auth.oauth2.ResourceOwnerPasswordCredentialsTokenRequest;\n+\n+/**\n+ * Builds {@link OAuth2ClientCredentialsGrant}.\n+ */\n+@UnstableApi\n+public final class OAuth2ResourceOwnerPasswordCredentialsGrantBuilder\n+        extends AbstractOAuth2AuthorizationGrantBuilder<OAuth2ResourceOwnerPasswordCredentialsGrantBuilder> {\n+\n+    @Nullable\n+    private Supplier<? extends Map.Entry<String, String>> userCredentialsSupplier;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     */\n+    OAuth2ResourceOwnerPasswordCredentialsGrantBuilder(\n+            WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath);\n+    }\n+\n+    /**\n+     * A supplier of user credentials: \"username\" and \"password\" used to grant the Access Token. REQUIRED.\n+     */\n+    public OAuth2ResourceOwnerPasswordCredentialsGrantBuilder userCredentialsSupplier(\n+            Supplier<Entry<String, String>> userCredentialsSupplier) {\n+        this.userCredentialsSupplier = requireNonNull(userCredentialsSupplier, \"userCredentialsSupplier\");\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUxNjkzMw=="}, "originalCommit": {"oid": "3dda250ada08c00be95ddb63f284a3e74f35fa25"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcyMzc3NjU4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wOVQwMjozNjoyM1rOIykaCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQxODowNDoxMlrOI0VkyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTg5NjIwMw==", "bodyText": "Could we change this static member to a static method such as static AuthorizationStatus ofSuccess();?", "url": "https://github.com/line/armeria/pull/2840#discussion_r589896203", "createdAt": "2021-03-09T02:36:23Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Provides a status of the request authorization operation, optionally combined with {@link AuthSuccessHandler}\n+ * and {@link AuthFailureHandler} to facilitate custom status handling.\n+ */\n+@UnstableApi\n+public interface AuthorizationStatus {\n+\n+    /**\n+     * Default Authorization Success status with no {@link AuthSuccessHandler} defined.\n+     */\n+    AuthorizationStatus SUCCESS = ofSuccess(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "304dadbb37ad454ea90d46e703d5594ead5889ea"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTc1MDM0NA==", "bodyText": "done", "url": "https://github.com/line/armeria/pull/2840#discussion_r591750344", "createdAt": "2021-03-10T18:04:12Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizationStatus.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * Provides a status of the request authorization operation, optionally combined with {@link AuthSuccessHandler}\n+ * and {@link AuthFailureHandler} to facilitate custom status handling.\n+ */\n+@UnstableApi\n+public interface AuthorizationStatus {\n+\n+    /**\n+     * Default Authorization Success status with no {@link AuthSuccessHandler} defined.\n+     */\n+    AuthorizationStatus SUCCESS = ofSuccess(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTg5NjIwMw=="}, "originalCommit": {"oid": "304dadbb37ad454ea90d46e703d5594ead5889ea"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcyNDM3ODA2OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ResourceOwnerPasswordCredentialsGrantBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wOVQwNjo0ODoyMVrOIypwSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQxODowNDozMVrOI0VloA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTk4MzgxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Supplier<Entry<String, String>> userCredentials) {\n          \n          \n            \n                        Supplier<? extends Entry<String, String>> userCredentials) {", "url": "https://github.com/line/armeria/pull/2840#discussion_r589983819", "createdAt": "2021-03-09T06:48:21Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ResourceOwnerPasswordCredentialsGrantBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.internal.client.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.internal.client.auth.oauth2.ResourceOwnerPasswordCredentialsTokenRequest;\n+\n+/**\n+ * Builds {@link OAuth2ClientCredentialsGrant}.\n+ */\n+@UnstableApi\n+public final class OAuth2ResourceOwnerPasswordCredentialsGrantBuilder\n+        extends AbstractOAuth2AuthorizationGrantBuilder<OAuth2ResourceOwnerPasswordCredentialsGrantBuilder> {\n+\n+    @Nullable\n+    private Supplier<? extends Map.Entry<String, String>> userCredentialsSupplier;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     */\n+    OAuth2ResourceOwnerPasswordCredentialsGrantBuilder(\n+            WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath);\n+    }\n+\n+    /**\n+     * A supplier of user credentials: \"username\" and \"password\" used to grant the Access Token. REQUIRED.\n+     */\n+    public OAuth2ResourceOwnerPasswordCredentialsGrantBuilder userCredentials(\n+            Supplier<Entry<String, String>> userCredentials) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "304dadbb37ad454ea90d46e703d5594ead5889ea"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTc1MDU2MA==", "bodyText": "missed that. done", "url": "https://github.com/line/armeria/pull/2840#discussion_r591750560", "createdAt": "2021-03-10T18:04:31Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ResourceOwnerPasswordCredentialsGrantBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.internal.client.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.internal.client.auth.oauth2.ResourceOwnerPasswordCredentialsTokenRequest;\n+\n+/**\n+ * Builds {@link OAuth2ClientCredentialsGrant}.\n+ */\n+@UnstableApi\n+public final class OAuth2ResourceOwnerPasswordCredentialsGrantBuilder\n+        extends AbstractOAuth2AuthorizationGrantBuilder<OAuth2ResourceOwnerPasswordCredentialsGrantBuilder> {\n+\n+    @Nullable\n+    private Supplier<? extends Map.Entry<String, String>> userCredentialsSupplier;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     */\n+    OAuth2ResourceOwnerPasswordCredentialsGrantBuilder(\n+            WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath);\n+    }\n+\n+    /**\n+     * A supplier of user credentials: \"username\" and \"password\" used to grant the Access Token. REQUIRED.\n+     */\n+    public OAuth2ResourceOwnerPasswordCredentialsGrantBuilder userCredentials(\n+            Supplier<Entry<String, String>> userCredentials) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTk4MzgxOQ=="}, "originalCommit": {"oid": "304dadbb37ad454ea90d46e703d5594ead5889ea"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTExNTQ5OnYy", "diffSide": "RIGHT", "path": "oauth2/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMTo0ODozNVrOGtGqRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjoxODowM1rOGwHKYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk0ODIyOA==", "bodyText": "If there are no dependencies, you can just delete build.gradle - it will just build fine without build.gradle.", "url": "https://github.com/line/armeria/pull/2840#discussion_r449948228", "createdAt": "2020-07-06T01:48:35Z", "author": {"login": "trustin"}, "path": "oauth2/build.gradle", "diffHunk": "@@ -0,0 +1,2 @@\n+dependencies {\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwMjE3OA==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r453102178", "createdAt": "2020-07-10T22:18:03Z", "author": {"login": "max904-github"}, "path": "oauth2/build.gradle", "diffHunk": "@@ -0,0 +1,2 @@\n+dependencies {\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk0ODIyOA=="}, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTEyOTI2OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjowMDowN1rOGtGyWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjoxNzowNFrOGwHJUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MDI5Nw==", "bodyText": "obtainAccessToken() is an asynchronous operation, so I guess just using synchronized will not prevent a subclass from obtaining tokens simultaneously. Am I missing something? Also, it'd be nice if we can reduce the potential lock contention which may block the event loop.", "url": "https://github.com/line/armeria/pull/2840#discussion_r449950297", "createdAt": "2020-07-06T02:00:07Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, @Nullable Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = refreshBefore == null ? DEFAULT_REFRESH_BEFORE : refreshBefore;\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessToken(\n+            @Nullable AccessTokenCapsule token);\n+\n+    private CompletableFuture<AccessTokenCapsule> obtainAccessTokenExclusively(\n+            @Nullable AccessTokenCapsule token) {\n+        return obtainAccessToken(token).thenApply(t -> {\n+            tokenRef.set(t); // reset the token reference\n+            if (tokenConsumer != null) {\n+                tokenConsumer.accept(t); // store token to an optional storage (e.g. secret store)\n+            }\n+            return t;\n+        });\n+    }\n+\n+    private CompletableFuture<AccessTokenCapsule> refreshAccessToken(AccessTokenCapsule token) {\n+        if (token.refreshToken() != null) {\n+            // try refreshing token if refresh token was previously provided\n+            try {\n+                return refreshRequest.make(token);\n+            } catch (TokenRequestException e) {\n+                // token refresh request failed\n+                // try to re-obtain access token\n+                return obtainAccessToken(token);\n+            }\n+        }\n+        // try to re-obtain access token\n+        return obtainAccessToken(token);\n+    }\n+\n+    private CompletableFuture<AccessTokenCapsule> getOrRefreshAccessToken(AccessTokenCapsule token,\n+                                                                          boolean reset,\n+                                                                          boolean lock) {\n+        // check if it's still valid\n+        final Instant instant = Instant.now().plus(refreshBefore);\n+        if (token.isValid(instant)) {\n+            // simply return a valid token\n+            if (reset) {\n+                return CompletableFuture.completedFuture(token).thenApply(t -> {\n+                    tokenRef.set(t); // reset the token reference\n+                    return t;\n+                });\n+            } else {\n+                return CompletableFuture.completedFuture(token);\n+            }\n+        } else {\n+            if (lock) {\n+                synchronized (tokenRef) {\n+                    // refresh token exclusively\n+                    return refreshAccessTokenExclusively(instant);\n+                }\n+            } else {\n+                // refresh token exclusively\n+                return refreshAccessTokenExclusively(instant);\n+            }\n+        }\n+    }\n+\n+    private CompletableFuture<AccessTokenCapsule> refreshAccessTokenExclusively(Instant instant) {\n+        // after acquiring the lock, re-check if it's a valid token\n+        final AccessTokenCapsule token = tokenRef.get();\n+        if (token.isValid(instant)) {\n+            // simply return a valid token\n+            return CompletableFuture.completedFuture(token);\n+        }\n+        // otherwise, refresh it\n+        return refreshAccessToken(token).thenApply(t -> {\n+            tokenRef.set(t); // reset the token reference\n+            if (tokenConsumer != null) {\n+                tokenConsumer.accept(t); // store token to an optional storage (e.g. secret store)\n+            }\n+            return t;\n+        });\n+    }\n+\n+    @Override\n+    public CompletionStage<AccessTokenCapsule> getAccessToken() {\n+        AccessTokenCapsule token = tokenRef.get();\n+        if (token != null) {\n+            // token already present\n+            return getOrRefreshAccessToken(token, false, true);\n+        }\n+        // token is not yet present\n+        // lock and obtain token exclusively\n+        synchronized (tokenRef) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwMTkwNw==", "bodyText": "You are right! This was wrong. Changed the implementation to use a single-thread executor to obtain new or refresh existing token.", "url": "https://github.com/line/armeria/pull/2840#discussion_r453101907", "createdAt": "2020-07-10T22:17:04Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, @Nullable Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = refreshBefore == null ? DEFAULT_REFRESH_BEFORE : refreshBefore;\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessToken(\n+            @Nullable AccessTokenCapsule token);\n+\n+    private CompletableFuture<AccessTokenCapsule> obtainAccessTokenExclusively(\n+            @Nullable AccessTokenCapsule token) {\n+        return obtainAccessToken(token).thenApply(t -> {\n+            tokenRef.set(t); // reset the token reference\n+            if (tokenConsumer != null) {\n+                tokenConsumer.accept(t); // store token to an optional storage (e.g. secret store)\n+            }\n+            return t;\n+        });\n+    }\n+\n+    private CompletableFuture<AccessTokenCapsule> refreshAccessToken(AccessTokenCapsule token) {\n+        if (token.refreshToken() != null) {\n+            // try refreshing token if refresh token was previously provided\n+            try {\n+                return refreshRequest.make(token);\n+            } catch (TokenRequestException e) {\n+                // token refresh request failed\n+                // try to re-obtain access token\n+                return obtainAccessToken(token);\n+            }\n+        }\n+        // try to re-obtain access token\n+        return obtainAccessToken(token);\n+    }\n+\n+    private CompletableFuture<AccessTokenCapsule> getOrRefreshAccessToken(AccessTokenCapsule token,\n+                                                                          boolean reset,\n+                                                                          boolean lock) {\n+        // check if it's still valid\n+        final Instant instant = Instant.now().plus(refreshBefore);\n+        if (token.isValid(instant)) {\n+            // simply return a valid token\n+            if (reset) {\n+                return CompletableFuture.completedFuture(token).thenApply(t -> {\n+                    tokenRef.set(t); // reset the token reference\n+                    return t;\n+                });\n+            } else {\n+                return CompletableFuture.completedFuture(token);\n+            }\n+        } else {\n+            if (lock) {\n+                synchronized (tokenRef) {\n+                    // refresh token exclusively\n+                    return refreshAccessTokenExclusively(instant);\n+                }\n+            } else {\n+                // refresh token exclusively\n+                return refreshAccessTokenExclusively(instant);\n+            }\n+        }\n+    }\n+\n+    private CompletableFuture<AccessTokenCapsule> refreshAccessTokenExclusively(Instant instant) {\n+        // after acquiring the lock, re-check if it's a valid token\n+        final AccessTokenCapsule token = tokenRef.get();\n+        if (token.isValid(instant)) {\n+            // simply return a valid token\n+            return CompletableFuture.completedFuture(token);\n+        }\n+        // otherwise, refresh it\n+        return refreshAccessToken(token).thenApply(t -> {\n+            tokenRef.set(t); // reset the token reference\n+            if (tokenConsumer != null) {\n+                tokenConsumer.accept(t); // store token to an optional storage (e.g. secret store)\n+            }\n+            return t;\n+        });\n+    }\n+\n+    @Override\n+    public CompletionStage<AccessTokenCapsule> getAccessToken() {\n+        AccessTokenCapsule token = tokenRef.get();\n+        if (token != null) {\n+            // token already present\n+            return getOrRefreshAccessToken(token, false, true);\n+        }\n+        // token is not yet present\n+        // lock and obtain token exclusively\n+        synchronized (tokenRef) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MDI5Nw=="}, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTEzMzE0OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjowMzozM1rOGtG0rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMToxNTo0NFrOGvzlWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MDg5NQ==", "bodyText": "Supplier<? extends Map.Entry<String, String>>", "url": "https://github.com/line/armeria/pull/2840#discussion_r449950895", "createdAt": "2020-07-06T02:03:33Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+\n+abstract class AbstractOAuth2AuthorizationGrantBuilder {\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    @Nullable\n+    private Duration refreshBefore;\n+\n+    @Nullable\n+    private Supplier<AccessTokenCapsule> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientCredentials(\n+            Supplier<Map.Entry<String, String>> credentialsSupplier, String authorizationType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4MTQwMg==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r452781402", "createdAt": "2020-07-10T11:15:44Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+\n+abstract class AbstractOAuth2AuthorizationGrantBuilder {\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    @Nullable\n+    private Duration refreshBefore;\n+\n+    @Nullable\n+    private Supplier<AccessTokenCapsule> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientCredentials(\n+            Supplier<Map.Entry<String, String>> credentialsSupplier, String authorizationType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MDg5NQ=="}, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTEzMzMxOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjowMzo1MVrOGtG00Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMToxNTo1MlrOGvzlkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MDkyOQ==", "bodyText": "Supplier<? extends Map.Entry<String, String>>", "url": "https://github.com/line/armeria/pull/2840#discussion_r449950929", "createdAt": "2020-07-06T02:03:51Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+\n+abstract class AbstractOAuth2AuthorizationGrantBuilder {\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    @Nullable\n+    private Duration refreshBefore;\n+\n+    @Nullable\n+    private Supplier<AccessTokenCapsule> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientCredentials(\n+            Supplier<Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientCredentials(\n+            Supplier<Map.Entry<String, String>> credentialsSupplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4MTQ1Nw==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r452781457", "createdAt": "2020-07-10T11:15:52Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+\n+abstract class AbstractOAuth2AuthorizationGrantBuilder {\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    @Nullable\n+    private Duration refreshBefore;\n+\n+    @Nullable\n+    private Supplier<AccessTokenCapsule> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientCredentials(\n+            Supplier<Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientCredentials(\n+            Supplier<Map.Entry<String, String>> credentialsSupplier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MDkyOQ=="}, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTEzNDQ0OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjowNDo1M1rOGtG1gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMToyMTo1M1rOGvzu9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MTEwNQ==", "bodyText": "How about making refreshBefore non-null here and moving the default to the builder?", "url": "https://github.com/line/armeria/pull/2840#discussion_r449951105", "createdAt": "2020-07-06T02:04:53Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, @Nullable Duration refreshBefore,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4Mzg2MA==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r452783860", "createdAt": "2020-07-10T11:21:53Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, @Nullable Duration refreshBefore,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MTEwNQ=="}, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTEzNjE2OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjowNjoxNVrOGtG2eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMToyMjo0MFrOGvzwCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MTM1NA==", "bodyText": "Could return non-null once we move the default value into this class.", "url": "https://github.com/line/armeria/pull/2840#discussion_r449951354", "createdAt": "2020-07-06T02:06:15Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+\n+abstract class AbstractOAuth2AuthorizationGrantBuilder {\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    @Nullable\n+    private Duration refreshBefore;\n+\n+    @Nullable\n+    private Supplier<AccessTokenCapsule> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientCredentials(\n+            Supplier<Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientCredentials(\n+            Supplier<Map.Entry<String, String>> credentialsSupplier) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder refreshBefore(Duration refreshBefore) {\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        return this;\n+    }\n+\n+    @Nullable\n+    protected Duration refreshBefore() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4NDEzNw==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r452784137", "createdAt": "2020-07-10T11:22:40Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+\n+abstract class AbstractOAuth2AuthorizationGrantBuilder {\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    @Nullable\n+    private Duration refreshBefore;\n+\n+    @Nullable\n+    private Supplier<AccessTokenCapsule> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientCredentials(\n+            Supplier<Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientCredentials(\n+            Supplier<Map.Entry<String, String>> credentialsSupplier) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder refreshBefore(Duration refreshBefore) {\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        return this;\n+    }\n+\n+    @Nullable\n+    protected Duration refreshBefore() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MTM1NA=="}, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTEzNzQ2OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjowNzoyN1rOGtG3OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMTo0ODowOFrOGv0YAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MTU0NQ==", "bodyText": "Could we make all protected methods in this class final? (except the abstract ones of course)", "url": "https://github.com/line/armeria/pull/2840#discussion_r449951545", "createdAt": "2020-07-06T02:07:27Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+\n+abstract class AbstractOAuth2AuthorizationGrantBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5NDM2OA==", "bodyText": "fixed by using different builder inheritance technique", "url": "https://github.com/line/armeria/pull/2840#discussion_r452794368", "createdAt": "2020-07-10T11:48:08Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+\n+abstract class AbstractOAuth2AuthorizationGrantBuilder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MTU0NQ=="}, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTEzODg4OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjowODo0MlrOGtG4Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjowODo0MlrOGtG4Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MTc0Nw==", "bodyText": "Global comment: Please add final to all public/protected members that users are not expected to extend/override.", "url": "https://github.com/line/armeria/pull/2840#discussion_r449951747", "createdAt": "2020-07-06T02:08:42Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Decorates a {@link HttpClient} with an OAuth 2.0 Authorization Grant flow.\n+ */\n+public class OAuth2Client extends SimpleDecoratingHttpClient {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTE0MDk3OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjoxMDoxNFrOGtG5LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMTo1MzowMFrOGv0fYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MjA0NA==", "bodyText": "Is the comment an example value? If so, could you add e.g.?\nIndentation - should be aligned at .", "url": "https://github.com/line/armeria/pull/2840#discussion_r449952044", "createdAt": "2020-07-06T02:10:14Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Decorates a {@link HttpClient} with an OAuth 2.0 Authorization Grant flow.\n+ */\n+public class OAuth2Client extends SimpleDecoratingHttpClient {\n+\n+    /**\n+     * Creates a new {@link HttpClient} decorator that handles OAuth 2.0 Authorization Grant flow.\n+     * @param authorizationGrant An {@link OAuth2AuthorizationGrant} implementing specific\n+     *                           OAuth 2.0 Authorization Grant flow.\n+     */\n+    public static Function<? super HttpClient, OAuth2Client> newDecorator(\n+            OAuth2AuthorizationGrant authorizationGrant) {\n+        return delegate -> new OAuth2Client(delegate, authorizationGrant);\n+    }\n+\n+    private final OAuth2AuthorizationGrant authorizationGrant;\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpClient} with\n+     * an OAuth 2.0 Authorization Grant flow.\n+     */\n+    OAuth2Client(HttpClient delegate, OAuth2AuthorizationGrant authorizationGrant) {\n+        super(delegate);\n+        this.authorizationGrant = requireNonNull(authorizationGrant, \"authorizationGrant\");\n+    }\n+\n+    @Override\n+    public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n+        return HttpResponse.from(authorizationGrant.getAccessToken().thenApply(accessToken -> {\n+            // Create a new request with an additional 'Authorization' header\n+            final HttpRequest newReq =\n+                req.withHeaders(req.headers().toBuilder()\n+                    .set(HttpHeaderNames.AUTHORIZATION, accessToken.authorization()) // Bearer mF_9.B5f-4.1JqM", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5NjI1Nw==", "bodyText": "removed the comment and fixed the indentation", "url": "https://github.com/line/armeria/pull/2840#discussion_r452796257", "createdAt": "2020-07-10T11:53:00Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Decorates a {@link HttpClient} with an OAuth 2.0 Authorization Grant flow.\n+ */\n+public class OAuth2Client extends SimpleDecoratingHttpClient {\n+\n+    /**\n+     * Creates a new {@link HttpClient} decorator that handles OAuth 2.0 Authorization Grant flow.\n+     * @param authorizationGrant An {@link OAuth2AuthorizationGrant} implementing specific\n+     *                           OAuth 2.0 Authorization Grant flow.\n+     */\n+    public static Function<? super HttpClient, OAuth2Client> newDecorator(\n+            OAuth2AuthorizationGrant authorizationGrant) {\n+        return delegate -> new OAuth2Client(delegate, authorizationGrant);\n+    }\n+\n+    private final OAuth2AuthorizationGrant authorizationGrant;\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpClient} with\n+     * an OAuth 2.0 Authorization Grant flow.\n+     */\n+    OAuth2Client(HttpClient delegate, OAuth2AuthorizationGrant authorizationGrant) {\n+        super(delegate);\n+        this.authorizationGrant = requireNonNull(authorizationGrant, \"authorizationGrant\");\n+    }\n+\n+    @Override\n+    public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n+        return HttpResponse.from(authorizationGrant.getAccessToken().thenApply(accessToken -> {\n+            // Create a new request with an additional 'Authorization' header\n+            final HttpRequest newReq =\n+                req.withHeaders(req.headers().toBuilder()\n+                    .set(HttpHeaderNames.AUTHORIZATION, accessToken.authorization()) // Bearer mF_9.B5f-4.1JqM", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MjA0NA=="}, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTE0MTYyOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjoxMDo0M1rOGtG5jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMTo1Mzo1NVrOGv0gpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MjE0Mg==", "bodyText": "You can do return Exceptions.throwUnsafely(...).", "url": "https://github.com/line/armeria/pull/2840#discussion_r449952142", "createdAt": "2020-07-06T02:10:43Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Decorates a {@link HttpClient} with an OAuth 2.0 Authorization Grant flow.\n+ */\n+public class OAuth2Client extends SimpleDecoratingHttpClient {\n+\n+    /**\n+     * Creates a new {@link HttpClient} decorator that handles OAuth 2.0 Authorization Grant flow.\n+     * @param authorizationGrant An {@link OAuth2AuthorizationGrant} implementing specific\n+     *                           OAuth 2.0 Authorization Grant flow.\n+     */\n+    public static Function<? super HttpClient, OAuth2Client> newDecorator(\n+            OAuth2AuthorizationGrant authorizationGrant) {\n+        return delegate -> new OAuth2Client(delegate, authorizationGrant);\n+    }\n+\n+    private final OAuth2AuthorizationGrant authorizationGrant;\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpClient} with\n+     * an OAuth 2.0 Authorization Grant flow.\n+     */\n+    OAuth2Client(HttpClient delegate, OAuth2AuthorizationGrant authorizationGrant) {\n+        super(delegate);\n+        this.authorizationGrant = requireNonNull(authorizationGrant, \"authorizationGrant\");\n+    }\n+\n+    @Override\n+    public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n+        return HttpResponse.from(authorizationGrant.getAccessToken().thenApply(accessToken -> {\n+            // Create a new request with an additional 'Authorization' header\n+            final HttpRequest newReq =\n+                req.withHeaders(req.headers().toBuilder()\n+                    .set(HttpHeaderNames.AUTHORIZATION, accessToken.authorization()) // Bearer mF_9.B5f-4.1JqM\n+                    .build());\n+            // Update the ctx.request\n+            ctx.updateRequest(newReq);\n+            try {\n+                return unwrap().execute(ctx, newReq);\n+            } catch (Exception e) {\n+                Exceptions.throwUnsafely(Exceptions.peel(e));\n+                //noinspection ReturnOfNull\n+                return null; // will never get here", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5NjU4Mg==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r452796582", "createdAt": "2020-07-10T11:53:55Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Decorates a {@link HttpClient} with an OAuth 2.0 Authorization Grant flow.\n+ */\n+public class OAuth2Client extends SimpleDecoratingHttpClient {\n+\n+    /**\n+     * Creates a new {@link HttpClient} decorator that handles OAuth 2.0 Authorization Grant flow.\n+     * @param authorizationGrant An {@link OAuth2AuthorizationGrant} implementing specific\n+     *                           OAuth 2.0 Authorization Grant flow.\n+     */\n+    public static Function<? super HttpClient, OAuth2Client> newDecorator(\n+            OAuth2AuthorizationGrant authorizationGrant) {\n+        return delegate -> new OAuth2Client(delegate, authorizationGrant);\n+    }\n+\n+    private final OAuth2AuthorizationGrant authorizationGrant;\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpClient} with\n+     * an OAuth 2.0 Authorization Grant flow.\n+     */\n+    OAuth2Client(HttpClient delegate, OAuth2AuthorizationGrant authorizationGrant) {\n+        super(delegate);\n+        this.authorizationGrant = requireNonNull(authorizationGrant, \"authorizationGrant\");\n+    }\n+\n+    @Override\n+    public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n+        return HttpResponse.from(authorizationGrant.getAccessToken().thenApply(accessToken -> {\n+            // Create a new request with an additional 'Authorization' header\n+            final HttpRequest newReq =\n+                req.withHeaders(req.headers().toBuilder()\n+                    .set(HttpHeaderNames.AUTHORIZATION, accessToken.authorization()) // Bearer mF_9.B5f-4.1JqM\n+                    .build());\n+            // Update the ctx.request\n+            ctx.updateRequest(newReq);\n+            try {\n+                return unwrap().execute(ctx, newReq);\n+            } catch (Exception e) {\n+                Exceptions.throwUnsafely(Exceptions.peel(e));\n+                //noinspection ReturnOfNull\n+                return null; // will never get here", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MjE0Mg=="}, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTE1MDAwOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjoxNzozNVrOGtG-cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMTo1NjozMFrOGv0k-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MzM5Mw==", "bodyText": "How about making all these protected setters package-local? Looks like all subclasses are in the same package.", "url": "https://github.com/line/armeria/pull/2840#discussion_r449953393", "createdAt": "2020-07-06T02:17:35Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+\n+abstract class AbstractOAuth2AuthorizationGrantBuilder {\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    @Nullable\n+    private Duration refreshBefore;\n+\n+    @Nullable\n+    private Supplier<AccessTokenCapsule> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5NzY5MQ==", "bodyText": "made those methods public and used different builder inheritance technique.\nbtw, it's expected to have more grants and grant builders in future.", "url": "https://github.com/line/armeria/pull/2840#discussion_r452797691", "createdAt": "2020-07-10T11:56:30Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+\n+abstract class AbstractOAuth2AuthorizationGrantBuilder {\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    @Nullable\n+    private Duration refreshBefore;\n+\n+    @Nullable\n+    private Supplier<AccessTokenCapsule> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    protected AbstractOAuth2AuthorizationGrantBuilder clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MzM5Mw=="}, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTE1NjAyOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ClientCredentialsGrantBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjoyMjo1NFrOGtHB8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMTo1ODozNFrOGv0ogw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1NDI4OQ==", "bodyText": "Global comment: You don't need to copy the Javadoc from the superclass if you did not change anything. Javadoc tool will do that for you.", "url": "https://github.com/line/armeria/pull/2840#discussion_r449954289", "createdAt": "2020-07-06T02:22:54Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ClientCredentialsGrantBuilder.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.ClientCredentialsTokenRequest;\n+\n+/**\n+ * Builds {@link OAuth2ClientCredentialsGrant}.\n+ */\n+public class OAuth2ClientCredentialsGrantBuilder extends AbstractOAuth2AuthorizationGrantBuilder {\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     */\n+    OAuth2ClientCredentialsGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath);\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        super.clientAuthorization(authorizationSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        super.clientBasicAuthorization(authorizationSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5ODU5NQ==", "bodyText": "removed those methods altogether", "url": "https://github.com/line/armeria/pull/2840#discussion_r452798595", "createdAt": "2020-07-10T11:58:34Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ClientCredentialsGrantBuilder.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.ClientCredentialsTokenRequest;\n+\n+/**\n+ * Builds {@link OAuth2ClientCredentialsGrant}.\n+ */\n+public class OAuth2ClientCredentialsGrantBuilder extends AbstractOAuth2AuthorizationGrantBuilder {\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     */\n+    OAuth2ClientCredentialsGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath);\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        super.clientAuthorization(authorizationSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        super.clientBasicAuthorization(authorizationSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1NDI4OQ=="}, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTE1NzgzOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ClientCredentialsGrantBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjoyNDo1MVrOGtHDFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjowNzo1MFrOGv04GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1NDU4Mg==", "bodyText": "Global comment: How about accepting the required properties at the construction time of the builder? e.g. OAuth2ClientCredentialsGrant.builder(...., ClientAuthorization)? This prevents a user from forgetting to set a required property ever.", "url": "https://github.com/line/armeria/pull/2840#discussion_r449954582", "createdAt": "2020-07-06T02:24:51Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ClientCredentialsGrantBuilder.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.ClientCredentialsTokenRequest;\n+\n+/**\n+ * Builds {@link OAuth2ClientCredentialsGrant}.\n+ */\n+public class OAuth2ClientCredentialsGrantBuilder extends AbstractOAuth2AuthorizationGrantBuilder {\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     */\n+    OAuth2ClientCredentialsGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath);\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        super.clientAuthorization(authorizationSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        super.clientBasicAuthorization(authorizationSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder clientCredentials(\n+            Supplier<Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        super.clientCredentials(credentialsSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder clientCredentials(\n+            Supplier<Map.Entry<String, String>> credentialsSupplier) {\n+        super.clientCredentials(credentialsSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder refreshBefore(Duration refreshBefore) {\n+        super.refreshBefore(refreshBefore);\n+        return this;\n+    }\n+\n+    /**\n+     * A {@link Supplier} to load Access Token from, to be able to restore the previous session. OPTIONAL.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder tokenSupplier(Supplier<AccessTokenCapsule> tokenSupplier) {\n+        super.tokenSupplier(tokenSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * A {@link Consumer} to store Access Token to, to be able restore the previous session. OPTIONAL.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder tokenConsumer(Consumer<AccessTokenCapsule> tokenConsumer) {\n+        super.tokenConsumer(tokenConsumer);\n+        return this;\n+    }\n+\n+    @Override\n+    protected AbstractAccessTokenRequest buildObtainRequest(WebClient accessTokenEndpoint,\n+                                                            String accessTokenEndpointPath,\n+                                                            @Nullable ClientAuthorization clientAuthorization) {\n+        return new ClientCredentialsTokenRequest(accessTokenEndpoint, accessTokenEndpointPath,\n+                                                 // clientAuthorization require for this Grant flow\n+                                                 requireNonNull(clientAuthorization, \"clientAuthorization\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwMjU4NA==", "bodyText": "It's a bit tricky. For instance, clientAuthorization is required for OAuth2ClientCredentialsGrant but there are several different ways to build it (using authorizationSupplier or credentialsSupplier).", "url": "https://github.com/line/armeria/pull/2840#discussion_r452802584", "createdAt": "2020-07-10T12:07:50Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ClientCredentialsGrantBuilder.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.ClientCredentialsTokenRequest;\n+\n+/**\n+ * Builds {@link OAuth2ClientCredentialsGrant}.\n+ */\n+public class OAuth2ClientCredentialsGrantBuilder extends AbstractOAuth2AuthorizationGrantBuilder {\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     */\n+    OAuth2ClientCredentialsGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath);\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        super.clientAuthorization(authorizationSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        super.clientBasicAuthorization(authorizationSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder clientCredentials(\n+            Supplier<Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        super.clientCredentials(credentialsSupplier, authorizationType);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder clientCredentials(\n+            Supplier<Map.Entry<String, String>> credentialsSupplier) {\n+        super.clientCredentials(credentialsSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder refreshBefore(Duration refreshBefore) {\n+        super.refreshBefore(refreshBefore);\n+        return this;\n+    }\n+\n+    /**\n+     * A {@link Supplier} to load Access Token from, to be able to restore the previous session. OPTIONAL.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder tokenSupplier(Supplier<AccessTokenCapsule> tokenSupplier) {\n+        super.tokenSupplier(tokenSupplier);\n+        return this;\n+    }\n+\n+    /**\n+     * A {@link Consumer} to store Access Token to, to be able restore the previous session. OPTIONAL.\n+     */\n+    @Override\n+    protected OAuth2ClientCredentialsGrantBuilder tokenConsumer(Consumer<AccessTokenCapsule> tokenConsumer) {\n+        super.tokenConsumer(tokenConsumer);\n+        return this;\n+    }\n+\n+    @Override\n+    protected AbstractAccessTokenRequest buildObtainRequest(WebClient accessTokenEndpoint,\n+                                                            String accessTokenEndpointPath,\n+                                                            @Nullable ClientAuthorization clientAuthorization) {\n+        return new ClientCredentialsTokenRequest(accessTokenEndpoint, accessTokenEndpointPath,\n+                                                 // clientAuthorization require for this Grant flow\n+                                                 requireNonNull(clientAuthorization, \"clientAuthorization\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1NDU4Mg=="}, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTE2MDcwOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/UnsupportedMediaTypeException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjoyNzowNFrOGtHEtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjoxMDo0N1rOGv086g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1NDk5OA==", "bodyText": "com.linecorp.armeria.common.auth.oauth2 or com.linecorp.armeria.client.auth.oauth2?", "url": "https://github.com/line/armeria/pull/2840#discussion_r449954998", "createdAt": "2020-07-06T02:27:04Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/UnsupportedMediaTypeException.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwMzgxOA==", "bodyText": "moved to com.linecorp.armeria.common.auth.oauth2", "url": "https://github.com/line/armeria/pull/2840#discussion_r452803818", "createdAt": "2020-07-10T12:10:47Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/UnsupportedMediaTypeException.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1NDk5OA=="}, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTE2MjM5OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/UnsupportedResponseException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjoyODoyNlrOGtHFuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjoxMTowM1rOGv09YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1NTI1Ng==", "bodyText": "com.linecorp.armeria.common.auth.oauth2 or com.linecorp.armeria.client.auth.oauth2?", "url": "https://github.com/line/armeria/pull/2840#discussion_r449955256", "createdAt": "2020-07-06T02:28:26Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/UnsupportedResponseException.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwMzkzNg==", "bodyText": "moved to com.linecorp.armeria.common.auth.oauth2", "url": "https://github.com/line/armeria/pull/2840#discussion_r452803936", "createdAt": "2020-07-10T12:11:03Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/UnsupportedResponseException.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1NTI1Ng=="}, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTE3MTM5OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AccessTokenCapsule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjozNToyN1rOGtHK_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjozNDoxNFrOGv1mzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1NjYwNA==", "bodyText": "Could just use + operator?", "url": "https://github.com/line/armeria/pull/2840#discussion_r449956604", "createdAt": "2020-07-06T02:35:27Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AccessTokenCapsule.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+public class AccessTokenCapsule implements Serializable {\n+\n+    private static final long serialVersionUID = 8698118404098897958L;\n+\n+    /**\n+     * Creates a new {@link AccessTokenCapsule} based on the {@code JSON}-formatted raw response body and\n+     * optional raw formatted {@code scope} used to request the token.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @param requestScope OPTIONAL. A list of space-delimited, case-sensitive strings.\n+     *                     The strings are defined by the authorization server.\n+     *                     The authorization server MAY fully or partially ignore the scope requested by the\n+     *                     client, based on the authorization server policy or the resource owner's\n+     *                     instructions. If the issued access token scope is different from the one requested\n+     *                     by the client, the authorization server MUST include the \"scope\" response\n+     *                     parameter to inform the client of the actual scope granted.\n+     *                     If the client omits the scope parameter when requesting authorization, the\n+     *                     authorization server MUST either process the request using a pre-defined default\n+     *                     value or fail the request indicating an invalid scope.\n+     * @return A new instance of {@link AccessTokenCapsule}.\n+     */\n+    public static AccessTokenCapsule of(String rawResponse, @Nullable String requestScope) {\n+        return AccessTokenCapsuleBuilder.of(rawResponse, requestScope);\n+    }\n+\n+    /**\n+     * Creates a new {@link AccessTokenCapsuleBuilder} to build a new {@link AccessTokenCapsule} and\n+     * supplied it with a value of {@code access_token} Access Token response field.\n+     * @return A new instance of {@link AccessTokenCapsuleBuilder}.\n+     */\n+    public static AccessTokenCapsuleBuilder builder(String accessToken) {\n+        return new AccessTokenCapsuleBuilder(accessToken);\n+    }\n+\n+    static final String ACCESS_TOKEN = \"access_token\";\n+    static final String TOKEN_TYPE = \"token_type\";\n+    static final String EXPIRES_IN = \"expires_in\";\n+    static final String REFRESH_TOKEN = \"refresh_token\";\n+    static final String SCOPE = \"scope\";\n+\n+    static final String ISSUED_AT = \"issued_at\";\n+\n+    static final String SCOPE_SEPARATOR = \" \";\n+    static final String AUTHORIZATION_SEPARATOR = \" \";\n+\n+    static final String DEFAULT_TOKEN_TYPE = \"bearer\";\n+\n+    static final ObjectMapper JSON = new ObjectMapper();\n+\n+    /**\n+     * {@code access_token} Access Token response field,\n+     * REQUIRED. The access token issued by the authorization server.\n+     */\n+    private final String accessToken;\n+\n+    /**\n+     * {@code token_type} Access Token response field,\n+     * REQUIRED. The type of the token issued as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>, e.g. \"bearer\".\n+     * Value is case insensitive.\n+     */\n+    @Nullable\n+    private final String tokenType;\n+\n+    /**\n+     * {@code expires_in} Access Token response field,\n+     * RECOMMENDED. The lifetime in seconds of the access token. For example, the value \"3600\" denotes\n+     * that the access token will expire in one hour from the time the response was generated. If\n+     * omitted, the authorization server SHOULD provide the expiration time via other means or\n+     * document the default value.\n+     */\n+    @Nullable\n+    private final Duration expiresIn;\n+\n+    /**\n+     * {@code refresh_token} Access Token response field,\n+     * OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same\n+     * authorization grant as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     */\n+    @Nullable\n+    private final String refreshToken;\n+\n+    /**\n+     * {@code scope} Access Token response field,\n+     * OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of\n+     * the access token as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     * A list of space-delimited, case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     * The authorization server MAY fully or partially ignore the scope requested by the client, based\n+     * on the authorization server policy or the resource owner's instructions.  If the issued access\n+     * token scope is different from the one requested by the client, the authorization server MUST\n+     * include the \"scope\" response parameter to inform the client of the actual scope granted.\n+     * If the client omits the scope parameter when requesting authorization, the authorization server\n+     * MUST either process the request using a pre-defined default value or fail the request\n+     * indicating an invalid scope.\n+     */\n+    @Nullable\n+    private final String scope;\n+\n+    /**\n+     * A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    private final Set<String> scopeSet;\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Access Token response,\n+     * OPTIONAL.\n+     */\n+    private final Map<String, String> extras;\n+\n+    private final Instant issuedAt;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    @Nullable\n+    private transient Instant expiresAt;\n+\n+    @Nullable\n+    private transient String authorization;\n+\n+    @Nullable\n+    private transient String toString;\n+\n+    AccessTokenCapsule(String accessToken, @Nullable String tokenType,\n+                       Instant issuedAt, @Nullable Duration expiresIn,\n+                       @Nullable String refreshToken, @Nullable List<String> scopeList,\n+                       @Nullable ImmutableMap<String, String> extras,\n+                       @Nullable String rawResponse) {\n+        // token fields\n+        this.accessToken = requireNonNull(accessToken, ACCESS_TOKEN);\n+        this.tokenType = tokenType;\n+        this.expiresIn = expiresIn;\n+        this.issuedAt = requireNonNull(issuedAt, ISSUED_AT);\n+        this.refreshToken = refreshToken;\n+        scope = toScopeString(scopeList);\n+        scopeSet = (scopeList == null) ? ImmutableSet.of() : ImmutableSet.copyOf(scopeList);\n+        this.extras = (extras == null) ? ImmutableMap.of() : extras;\n+        // raw response\n+        this.rawResponse = rawResponse;\n+    }\n+\n+    /**\n+     * {@code access_token} Access Token response field,\n+     * REQUIRED. The access token issued by the authorization server.\n+     */\n+    public String accessToken() {\n+        return accessToken;\n+    }\n+\n+    /**\n+     * {@code token_type}  Access Token response field,\n+     * REQUIRED. The type of the token issued as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     * Value is case insensitive.\n+     */\n+    @Nullable\n+    public String tokenType() {\n+        return tokenType;\n+    }\n+\n+    /**\n+     * {@code expires_in} Access Token response field,\n+     * RECOMMENDED. {@link Duration} indicating the lifetime of the access token. For example,\n+     * the value 3600 seconds denotes that the access token will expire in one hour from the time\n+     * the response was generated. If omitted, the authorization server SHOULD provide the expiration\n+     * time via other means or document the default value.\n+     */\n+    @Nullable\n+    public Duration expiresIn() {\n+        return expiresIn;\n+    }\n+\n+    /**\n+     * An {@link Instant} indicating when the Access Token was issued.\n+     * The value is NOT supplied with the Access Token response and calculated approximately using\n+     * {@code expires_in} field.\n+     */\n+    public Instant issuedAt() {\n+        return issuedAt;\n+    }\n+\n+    /**\n+     * An {@link Instant} representing a derived value using {@code issuedAt + expiresIn}.\n+     */\n+    @Nullable\n+    public Instant expiresAt() {\n+        if (expiresIn == null) {\n+            return null;\n+        }\n+        if (expiresAt == null) {\n+            expiresAt = issuedAt.plus(expiresIn);\n+        }\n+        return expiresAt;\n+    }\n+\n+    /**\n+     * Indicates whether or not the Access Token expire at the given {@link Instant} time based on\n+     * {@link #expiresAt()} function.\n+     */\n+    public boolean isValid(Instant instant) {\n+        final Instant expires = expiresAt();\n+        return (expires == null) || requireNonNull(instant, \"instant\").isBefore(expires);\n+    }\n+\n+    /**\n+     * Indicates whether or not the Access Token already expired based on {@link #expiresAt()} function.\n+     */\n+    public boolean isValid() {\n+        return isValid(Instant.now());\n+    }\n+\n+    /**\n+     * {@code refresh_token} Access Token response field,\n+     * OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same\n+     * authorization grant as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     */\n+    @Nullable\n+    public String refreshToken() {\n+        return refreshToken;\n+    }\n+\n+    /**\n+     * {@code scope} Access Token response field,\n+     * OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of\n+     * the access token as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     * A list of space-delimited, case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     * The authorization server MAY fully or partially ignore the scope requested by the client, based\n+     * on the authorization server policy or the resource owner's instructions.  If the issued access\n+     * token scope is different from the one requested by the client, the authorization server MUST\n+     * include the \"scope\" response parameter to inform the client of the actual scope granted.\n+     * If the client omits the scope parameter when requesting authorization, the authorization server\n+     * MUST either process the request using a pre-defined default value or fail the request\n+     * indicating an invalid scope.\n+     */\n+    @Nullable\n+    public String scope() {\n+        return scope;\n+    }\n+\n+    /**\n+     * {@code scope} Access Token response field,\n+     * OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of\n+     * the access token as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     * A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     * The authorization server MAY fully or partially ignore the scope requested by the client, based\n+     * on the authorization server policy or the resource owner's instructions.  If the issued access\n+     * token scope is different from the one requested by the client, the authorization server MUST\n+     * include the \"scope\" response parameter to inform the client of the actual scope granted.\n+     * If the client omits the scope parameter when requesting authorization, the authorization server\n+     * MUST either process the request using a pre-defined default value or fail the request\n+     * indicating an invalid scope.\n+     */\n+    public Set<String> scopeSet() {\n+        return scopeSet;\n+    }\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Access Token response,\n+     * OPTIONAL.\n+     */\n+    public Map<String, String> extras() {\n+        return extras;\n+    }\n+\n+    /**\n+     * A value of the {@link HttpHeaderNames#AUTHORIZATION} header based on this access token.\n+     */\n+    public String authorization() {\n+        if (authorization == null) {\n+            final String type = (tokenType == null) ? DEFAULT_TOKEN_TYPE : tokenType;\n+            authorization = String.join(AUTHORIZATION_SEPARATOR,\n+                                        CaseUtil.firstUpperAllLowerCase(type), accessToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 323}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxNDU0MA==", "bodyText": "changed to concatenation", "url": "https://github.com/line/armeria/pull/2840#discussion_r452814540", "createdAt": "2020-07-10T12:34:14Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AccessTokenCapsule.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+public class AccessTokenCapsule implements Serializable {\n+\n+    private static final long serialVersionUID = 8698118404098897958L;\n+\n+    /**\n+     * Creates a new {@link AccessTokenCapsule} based on the {@code JSON}-formatted raw response body and\n+     * optional raw formatted {@code scope} used to request the token.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @param requestScope OPTIONAL. A list of space-delimited, case-sensitive strings.\n+     *                     The strings are defined by the authorization server.\n+     *                     The authorization server MAY fully or partially ignore the scope requested by the\n+     *                     client, based on the authorization server policy or the resource owner's\n+     *                     instructions. If the issued access token scope is different from the one requested\n+     *                     by the client, the authorization server MUST include the \"scope\" response\n+     *                     parameter to inform the client of the actual scope granted.\n+     *                     If the client omits the scope parameter when requesting authorization, the\n+     *                     authorization server MUST either process the request using a pre-defined default\n+     *                     value or fail the request indicating an invalid scope.\n+     * @return A new instance of {@link AccessTokenCapsule}.\n+     */\n+    public static AccessTokenCapsule of(String rawResponse, @Nullable String requestScope) {\n+        return AccessTokenCapsuleBuilder.of(rawResponse, requestScope);\n+    }\n+\n+    /**\n+     * Creates a new {@link AccessTokenCapsuleBuilder} to build a new {@link AccessTokenCapsule} and\n+     * supplied it with a value of {@code access_token} Access Token response field.\n+     * @return A new instance of {@link AccessTokenCapsuleBuilder}.\n+     */\n+    public static AccessTokenCapsuleBuilder builder(String accessToken) {\n+        return new AccessTokenCapsuleBuilder(accessToken);\n+    }\n+\n+    static final String ACCESS_TOKEN = \"access_token\";\n+    static final String TOKEN_TYPE = \"token_type\";\n+    static final String EXPIRES_IN = \"expires_in\";\n+    static final String REFRESH_TOKEN = \"refresh_token\";\n+    static final String SCOPE = \"scope\";\n+\n+    static final String ISSUED_AT = \"issued_at\";\n+\n+    static final String SCOPE_SEPARATOR = \" \";\n+    static final String AUTHORIZATION_SEPARATOR = \" \";\n+\n+    static final String DEFAULT_TOKEN_TYPE = \"bearer\";\n+\n+    static final ObjectMapper JSON = new ObjectMapper();\n+\n+    /**\n+     * {@code access_token} Access Token response field,\n+     * REQUIRED. The access token issued by the authorization server.\n+     */\n+    private final String accessToken;\n+\n+    /**\n+     * {@code token_type} Access Token response field,\n+     * REQUIRED. The type of the token issued as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>, e.g. \"bearer\".\n+     * Value is case insensitive.\n+     */\n+    @Nullable\n+    private final String tokenType;\n+\n+    /**\n+     * {@code expires_in} Access Token response field,\n+     * RECOMMENDED. The lifetime in seconds of the access token. For example, the value \"3600\" denotes\n+     * that the access token will expire in one hour from the time the response was generated. If\n+     * omitted, the authorization server SHOULD provide the expiration time via other means or\n+     * document the default value.\n+     */\n+    @Nullable\n+    private final Duration expiresIn;\n+\n+    /**\n+     * {@code refresh_token} Access Token response field,\n+     * OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same\n+     * authorization grant as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     */\n+    @Nullable\n+    private final String refreshToken;\n+\n+    /**\n+     * {@code scope} Access Token response field,\n+     * OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of\n+     * the access token as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     * A list of space-delimited, case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     * The authorization server MAY fully or partially ignore the scope requested by the client, based\n+     * on the authorization server policy or the resource owner's instructions.  If the issued access\n+     * token scope is different from the one requested by the client, the authorization server MUST\n+     * include the \"scope\" response parameter to inform the client of the actual scope granted.\n+     * If the client omits the scope parameter when requesting authorization, the authorization server\n+     * MUST either process the request using a pre-defined default value or fail the request\n+     * indicating an invalid scope.\n+     */\n+    @Nullable\n+    private final String scope;\n+\n+    /**\n+     * A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    private final Set<String> scopeSet;\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Access Token response,\n+     * OPTIONAL.\n+     */\n+    private final Map<String, String> extras;\n+\n+    private final Instant issuedAt;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    @Nullable\n+    private transient Instant expiresAt;\n+\n+    @Nullable\n+    private transient String authorization;\n+\n+    @Nullable\n+    private transient String toString;\n+\n+    AccessTokenCapsule(String accessToken, @Nullable String tokenType,\n+                       Instant issuedAt, @Nullable Duration expiresIn,\n+                       @Nullable String refreshToken, @Nullable List<String> scopeList,\n+                       @Nullable ImmutableMap<String, String> extras,\n+                       @Nullable String rawResponse) {\n+        // token fields\n+        this.accessToken = requireNonNull(accessToken, ACCESS_TOKEN);\n+        this.tokenType = tokenType;\n+        this.expiresIn = expiresIn;\n+        this.issuedAt = requireNonNull(issuedAt, ISSUED_AT);\n+        this.refreshToken = refreshToken;\n+        scope = toScopeString(scopeList);\n+        scopeSet = (scopeList == null) ? ImmutableSet.of() : ImmutableSet.copyOf(scopeList);\n+        this.extras = (extras == null) ? ImmutableMap.of() : extras;\n+        // raw response\n+        this.rawResponse = rawResponse;\n+    }\n+\n+    /**\n+     * {@code access_token} Access Token response field,\n+     * REQUIRED. The access token issued by the authorization server.\n+     */\n+    public String accessToken() {\n+        return accessToken;\n+    }\n+\n+    /**\n+     * {@code token_type}  Access Token response field,\n+     * REQUIRED. The type of the token issued as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     * Value is case insensitive.\n+     */\n+    @Nullable\n+    public String tokenType() {\n+        return tokenType;\n+    }\n+\n+    /**\n+     * {@code expires_in} Access Token response field,\n+     * RECOMMENDED. {@link Duration} indicating the lifetime of the access token. For example,\n+     * the value 3600 seconds denotes that the access token will expire in one hour from the time\n+     * the response was generated. If omitted, the authorization server SHOULD provide the expiration\n+     * time via other means or document the default value.\n+     */\n+    @Nullable\n+    public Duration expiresIn() {\n+        return expiresIn;\n+    }\n+\n+    /**\n+     * An {@link Instant} indicating when the Access Token was issued.\n+     * The value is NOT supplied with the Access Token response and calculated approximately using\n+     * {@code expires_in} field.\n+     */\n+    public Instant issuedAt() {\n+        return issuedAt;\n+    }\n+\n+    /**\n+     * An {@link Instant} representing a derived value using {@code issuedAt + expiresIn}.\n+     */\n+    @Nullable\n+    public Instant expiresAt() {\n+        if (expiresIn == null) {\n+            return null;\n+        }\n+        if (expiresAt == null) {\n+            expiresAt = issuedAt.plus(expiresIn);\n+        }\n+        return expiresAt;\n+    }\n+\n+    /**\n+     * Indicates whether or not the Access Token expire at the given {@link Instant} time based on\n+     * {@link #expiresAt()} function.\n+     */\n+    public boolean isValid(Instant instant) {\n+        final Instant expires = expiresAt();\n+        return (expires == null) || requireNonNull(instant, \"instant\").isBefore(expires);\n+    }\n+\n+    /**\n+     * Indicates whether or not the Access Token already expired based on {@link #expiresAt()} function.\n+     */\n+    public boolean isValid() {\n+        return isValid(Instant.now());\n+    }\n+\n+    /**\n+     * {@code refresh_token} Access Token response field,\n+     * OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same\n+     * authorization grant as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     */\n+    @Nullable\n+    public String refreshToken() {\n+        return refreshToken;\n+    }\n+\n+    /**\n+     * {@code scope} Access Token response field,\n+     * OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of\n+     * the access token as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     * A list of space-delimited, case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     * The authorization server MAY fully or partially ignore the scope requested by the client, based\n+     * on the authorization server policy or the resource owner's instructions.  If the issued access\n+     * token scope is different from the one requested by the client, the authorization server MUST\n+     * include the \"scope\" response parameter to inform the client of the actual scope granted.\n+     * If the client omits the scope parameter when requesting authorization, the authorization server\n+     * MUST either process the request using a pre-defined default value or fail the request\n+     * indicating an invalid scope.\n+     */\n+    @Nullable\n+    public String scope() {\n+        return scope;\n+    }\n+\n+    /**\n+     * {@code scope} Access Token response field,\n+     * OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of\n+     * the access token as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     * A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     * The authorization server MAY fully or partially ignore the scope requested by the client, based\n+     * on the authorization server policy or the resource owner's instructions.  If the issued access\n+     * token scope is different from the one requested by the client, the authorization server MUST\n+     * include the \"scope\" response parameter to inform the client of the actual scope granted.\n+     * If the client omits the scope parameter when requesting authorization, the authorization server\n+     * MUST either process the request using a pre-defined default value or fail the request\n+     * indicating an invalid scope.\n+     */\n+    public Set<String> scopeSet() {\n+        return scopeSet;\n+    }\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Access Token response,\n+     * OPTIONAL.\n+     */\n+    public Map<String, String> extras() {\n+        return extras;\n+    }\n+\n+    /**\n+     * A value of the {@link HttpHeaderNames#AUTHORIZATION} header based on this access token.\n+     */\n+    public String authorization() {\n+        if (authorization == null) {\n+            final String type = (tokenType == null) ? DEFAULT_TOKEN_TYPE : tokenType;\n+            authorization = String.join(AUTHORIZATION_SEPARATOR,\n+                                        CaseUtil.firstUpperAllLowerCase(type), accessToken);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1NjYwNA=="}, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 323}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTE3MTk1OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AccessTokenCapsule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjozNjowNlrOGtHLVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjoxMzo1MFrOGv1CEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1NjY5NA==", "bodyText": "How about adding 'why'?", "url": "https://github.com/line/armeria/pull/2840#discussion_r449956694", "createdAt": "2020-07-06T02:36:06Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AccessTokenCapsule.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+public class AccessTokenCapsule implements Serializable {\n+\n+    private static final long serialVersionUID = 8698118404098897958L;\n+\n+    /**\n+     * Creates a new {@link AccessTokenCapsule} based on the {@code JSON}-formatted raw response body and\n+     * optional raw formatted {@code scope} used to request the token.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @param requestScope OPTIONAL. A list of space-delimited, case-sensitive strings.\n+     *                     The strings are defined by the authorization server.\n+     *                     The authorization server MAY fully or partially ignore the scope requested by the\n+     *                     client, based on the authorization server policy or the resource owner's\n+     *                     instructions. If the issued access token scope is different from the one requested\n+     *                     by the client, the authorization server MUST include the \"scope\" response\n+     *                     parameter to inform the client of the actual scope granted.\n+     *                     If the client omits the scope parameter when requesting authorization, the\n+     *                     authorization server MUST either process the request using a pre-defined default\n+     *                     value or fail the request indicating an invalid scope.\n+     * @return A new instance of {@link AccessTokenCapsule}.\n+     */\n+    public static AccessTokenCapsule of(String rawResponse, @Nullable String requestScope) {\n+        return AccessTokenCapsuleBuilder.of(rawResponse, requestScope);\n+    }\n+\n+    /**\n+     * Creates a new {@link AccessTokenCapsuleBuilder} to build a new {@link AccessTokenCapsule} and\n+     * supplied it with a value of {@code access_token} Access Token response field.\n+     * @return A new instance of {@link AccessTokenCapsuleBuilder}.\n+     */\n+    public static AccessTokenCapsuleBuilder builder(String accessToken) {\n+        return new AccessTokenCapsuleBuilder(accessToken);\n+    }\n+\n+    static final String ACCESS_TOKEN = \"access_token\";\n+    static final String TOKEN_TYPE = \"token_type\";\n+    static final String EXPIRES_IN = \"expires_in\";\n+    static final String REFRESH_TOKEN = \"refresh_token\";\n+    static final String SCOPE = \"scope\";\n+\n+    static final String ISSUED_AT = \"issued_at\";\n+\n+    static final String SCOPE_SEPARATOR = \" \";\n+    static final String AUTHORIZATION_SEPARATOR = \" \";\n+\n+    static final String DEFAULT_TOKEN_TYPE = \"bearer\";\n+\n+    static final ObjectMapper JSON = new ObjectMapper();\n+\n+    /**\n+     * {@code access_token} Access Token response field,\n+     * REQUIRED. The access token issued by the authorization server.\n+     */\n+    private final String accessToken;\n+\n+    /**\n+     * {@code token_type} Access Token response field,\n+     * REQUIRED. The type of the token issued as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>, e.g. \"bearer\".\n+     * Value is case insensitive.\n+     */\n+    @Nullable\n+    private final String tokenType;\n+\n+    /**\n+     * {@code expires_in} Access Token response field,\n+     * RECOMMENDED. The lifetime in seconds of the access token. For example, the value \"3600\" denotes\n+     * that the access token will expire in one hour from the time the response was generated. If\n+     * omitted, the authorization server SHOULD provide the expiration time via other means or\n+     * document the default value.\n+     */\n+    @Nullable\n+    private final Duration expiresIn;\n+\n+    /**\n+     * {@code refresh_token} Access Token response field,\n+     * OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same\n+     * authorization grant as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     */\n+    @Nullable\n+    private final String refreshToken;\n+\n+    /**\n+     * {@code scope} Access Token response field,\n+     * OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of\n+     * the access token as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     * A list of space-delimited, case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     * The authorization server MAY fully or partially ignore the scope requested by the client, based\n+     * on the authorization server policy or the resource owner's instructions.  If the issued access\n+     * token scope is different from the one requested by the client, the authorization server MUST\n+     * include the \"scope\" response parameter to inform the client of the actual scope granted.\n+     * If the client omits the scope parameter when requesting authorization, the authorization server\n+     * MUST either process the request using a pre-defined default value or fail the request\n+     * indicating an invalid scope.\n+     */\n+    @Nullable\n+    private final String scope;\n+\n+    /**\n+     * A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    private final Set<String> scopeSet;\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Access Token response,\n+     * OPTIONAL.\n+     */\n+    private final Map<String, String> extras;\n+\n+    private final Instant issuedAt;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    @Nullable\n+    private transient Instant expiresAt;\n+\n+    @Nullable\n+    private transient String authorization;\n+\n+    @Nullable\n+    private transient String toString;\n+\n+    AccessTokenCapsule(String accessToken, @Nullable String tokenType,\n+                       Instant issuedAt, @Nullable Duration expiresIn,\n+                       @Nullable String refreshToken, @Nullable List<String> scopeList,\n+                       @Nullable ImmutableMap<String, String> extras,\n+                       @Nullable String rawResponse) {\n+        // token fields\n+        this.accessToken = requireNonNull(accessToken, ACCESS_TOKEN);\n+        this.tokenType = tokenType;\n+        this.expiresIn = expiresIn;\n+        this.issuedAt = requireNonNull(issuedAt, ISSUED_AT);\n+        this.refreshToken = refreshToken;\n+        scope = toScopeString(scopeList);\n+        scopeSet = (scopeList == null) ? ImmutableSet.of() : ImmutableSet.copyOf(scopeList);\n+        this.extras = (extras == null) ? ImmutableMap.of() : extras;\n+        // raw response\n+        this.rawResponse = rawResponse;\n+    }\n+\n+    /**\n+     * {@code access_token} Access Token response field,\n+     * REQUIRED. The access token issued by the authorization server.\n+     */\n+    public String accessToken() {\n+        return accessToken;\n+    }\n+\n+    /**\n+     * {@code token_type}  Access Token response field,\n+     * REQUIRED. The type of the token issued as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     * Value is case insensitive.\n+     */\n+    @Nullable\n+    public String tokenType() {\n+        return tokenType;\n+    }\n+\n+    /**\n+     * {@code expires_in} Access Token response field,\n+     * RECOMMENDED. {@link Duration} indicating the lifetime of the access token. For example,\n+     * the value 3600 seconds denotes that the access token will expire in one hour from the time\n+     * the response was generated. If omitted, the authorization server SHOULD provide the expiration\n+     * time via other means or document the default value.\n+     */\n+    @Nullable\n+    public Duration expiresIn() {\n+        return expiresIn;\n+    }\n+\n+    /**\n+     * An {@link Instant} indicating when the Access Token was issued.\n+     * The value is NOT supplied with the Access Token response and calculated approximately using\n+     * {@code expires_in} field.\n+     */\n+    public Instant issuedAt() {\n+        return issuedAt;\n+    }\n+\n+    /**\n+     * An {@link Instant} representing a derived value using {@code issuedAt + expiresIn}.\n+     */\n+    @Nullable\n+    public Instant expiresAt() {\n+        if (expiresIn == null) {\n+            return null;\n+        }\n+        if (expiresAt == null) {\n+            expiresAt = issuedAt.plus(expiresIn);\n+        }\n+        return expiresAt;\n+    }\n+\n+    /**\n+     * Indicates whether or not the Access Token expire at the given {@link Instant} time based on\n+     * {@link #expiresAt()} function.\n+     */\n+    public boolean isValid(Instant instant) {\n+        final Instant expires = expiresAt();\n+        return (expires == null) || requireNonNull(instant, \"instant\").isBefore(expires);\n+    }\n+\n+    /**\n+     * Indicates whether or not the Access Token already expired based on {@link #expiresAt()} function.\n+     */\n+    public boolean isValid() {\n+        return isValid(Instant.now());\n+    }\n+\n+    /**\n+     * {@code refresh_token} Access Token response field,\n+     * OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same\n+     * authorization grant as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     */\n+    @Nullable\n+    public String refreshToken() {\n+        return refreshToken;\n+    }\n+\n+    /**\n+     * {@code scope} Access Token response field,\n+     * OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of\n+     * the access token as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     * A list of space-delimited, case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     * The authorization server MAY fully or partially ignore the scope requested by the client, based\n+     * on the authorization server policy or the resource owner's instructions.  If the issued access\n+     * token scope is different from the one requested by the client, the authorization server MUST\n+     * include the \"scope\" response parameter to inform the client of the actual scope granted.\n+     * If the client omits the scope parameter when requesting authorization, the authorization server\n+     * MUST either process the request using a pre-defined default value or fail the request\n+     * indicating an invalid scope.\n+     */\n+    @Nullable\n+    public String scope() {\n+        return scope;\n+    }\n+\n+    /**\n+     * {@code scope} Access Token response field,\n+     * OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of\n+     * the access token as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     * A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     * The authorization server MAY fully or partially ignore the scope requested by the client, based\n+     * on the authorization server policy or the resource owner's instructions.  If the issued access\n+     * token scope is different from the one requested by the client, the authorization server MUST\n+     * include the \"scope\" response parameter to inform the client of the actual scope granted.\n+     * If the client omits the scope parameter when requesting authorization, the authorization server\n+     * MUST either process the request using a pre-defined default value or fail the request\n+     * indicating an invalid scope.\n+     */\n+    public Set<String> scopeSet() {\n+        return scopeSet;\n+    }\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Access Token response,\n+     * OPTIONAL.\n+     */\n+    public Map<String, String> extras() {\n+        return extras;\n+    }\n+\n+    /**\n+     * A value of the {@link HttpHeaderNames#AUTHORIZATION} header based on this access token.\n+     */\n+    public String authorization() {\n+        if (authorization == null) {\n+            final String type = (tokenType == null) ? DEFAULT_TOKEN_TYPE : tokenType;\n+            authorization = String.join(AUTHORIZATION_SEPARATOR,\n+                                        CaseUtil.firstUpperAllLowerCase(type), accessToken);\n+        }\n+        return authorization;\n+    }\n+\n+    /**\n+     * {@code JSON}-formatted raw Token Introspection Response body. If the {@link AccessTokenCapsule} was not\n+     * parsed out of the raw response body, this value calculated based on the other {@link AccessTokenCapsule}\n+     * values.\n+     */\n+    public String rawResponse() {\n+        if (rawResponse == null) {\n+            // WARNING: do not include {@code issuedAt} to the raw response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 335}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwNTEzNg==", "bodyText": "added", "url": "https://github.com/line/armeria/pull/2840#discussion_r452805136", "createdAt": "2020-07-10T12:13:50Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AccessTokenCapsule.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+public class AccessTokenCapsule implements Serializable {\n+\n+    private static final long serialVersionUID = 8698118404098897958L;\n+\n+    /**\n+     * Creates a new {@link AccessTokenCapsule} based on the {@code JSON}-formatted raw response body and\n+     * optional raw formatted {@code scope} used to request the token.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @param requestScope OPTIONAL. A list of space-delimited, case-sensitive strings.\n+     *                     The strings are defined by the authorization server.\n+     *                     The authorization server MAY fully or partially ignore the scope requested by the\n+     *                     client, based on the authorization server policy or the resource owner's\n+     *                     instructions. If the issued access token scope is different from the one requested\n+     *                     by the client, the authorization server MUST include the \"scope\" response\n+     *                     parameter to inform the client of the actual scope granted.\n+     *                     If the client omits the scope parameter when requesting authorization, the\n+     *                     authorization server MUST either process the request using a pre-defined default\n+     *                     value or fail the request indicating an invalid scope.\n+     * @return A new instance of {@link AccessTokenCapsule}.\n+     */\n+    public static AccessTokenCapsule of(String rawResponse, @Nullable String requestScope) {\n+        return AccessTokenCapsuleBuilder.of(rawResponse, requestScope);\n+    }\n+\n+    /**\n+     * Creates a new {@link AccessTokenCapsuleBuilder} to build a new {@link AccessTokenCapsule} and\n+     * supplied it with a value of {@code access_token} Access Token response field.\n+     * @return A new instance of {@link AccessTokenCapsuleBuilder}.\n+     */\n+    public static AccessTokenCapsuleBuilder builder(String accessToken) {\n+        return new AccessTokenCapsuleBuilder(accessToken);\n+    }\n+\n+    static final String ACCESS_TOKEN = \"access_token\";\n+    static final String TOKEN_TYPE = \"token_type\";\n+    static final String EXPIRES_IN = \"expires_in\";\n+    static final String REFRESH_TOKEN = \"refresh_token\";\n+    static final String SCOPE = \"scope\";\n+\n+    static final String ISSUED_AT = \"issued_at\";\n+\n+    static final String SCOPE_SEPARATOR = \" \";\n+    static final String AUTHORIZATION_SEPARATOR = \" \";\n+\n+    static final String DEFAULT_TOKEN_TYPE = \"bearer\";\n+\n+    static final ObjectMapper JSON = new ObjectMapper();\n+\n+    /**\n+     * {@code access_token} Access Token response field,\n+     * REQUIRED. The access token issued by the authorization server.\n+     */\n+    private final String accessToken;\n+\n+    /**\n+     * {@code token_type} Access Token response field,\n+     * REQUIRED. The type of the token issued as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>, e.g. \"bearer\".\n+     * Value is case insensitive.\n+     */\n+    @Nullable\n+    private final String tokenType;\n+\n+    /**\n+     * {@code expires_in} Access Token response field,\n+     * RECOMMENDED. The lifetime in seconds of the access token. For example, the value \"3600\" denotes\n+     * that the access token will expire in one hour from the time the response was generated. If\n+     * omitted, the authorization server SHOULD provide the expiration time via other means or\n+     * document the default value.\n+     */\n+    @Nullable\n+    private final Duration expiresIn;\n+\n+    /**\n+     * {@code refresh_token} Access Token response field,\n+     * OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same\n+     * authorization grant as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     */\n+    @Nullable\n+    private final String refreshToken;\n+\n+    /**\n+     * {@code scope} Access Token response field,\n+     * OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of\n+     * the access token as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     * A list of space-delimited, case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     * The authorization server MAY fully or partially ignore the scope requested by the client, based\n+     * on the authorization server policy or the resource owner's instructions.  If the issued access\n+     * token scope is different from the one requested by the client, the authorization server MUST\n+     * include the \"scope\" response parameter to inform the client of the actual scope granted.\n+     * If the client omits the scope parameter when requesting authorization, the authorization server\n+     * MUST either process the request using a pre-defined default value or fail the request\n+     * indicating an invalid scope.\n+     */\n+    @Nullable\n+    private final String scope;\n+\n+    /**\n+     * A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    private final Set<String> scopeSet;\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Access Token response,\n+     * OPTIONAL.\n+     */\n+    private final Map<String, String> extras;\n+\n+    private final Instant issuedAt;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    @Nullable\n+    private transient Instant expiresAt;\n+\n+    @Nullable\n+    private transient String authorization;\n+\n+    @Nullable\n+    private transient String toString;\n+\n+    AccessTokenCapsule(String accessToken, @Nullable String tokenType,\n+                       Instant issuedAt, @Nullable Duration expiresIn,\n+                       @Nullable String refreshToken, @Nullable List<String> scopeList,\n+                       @Nullable ImmutableMap<String, String> extras,\n+                       @Nullable String rawResponse) {\n+        // token fields\n+        this.accessToken = requireNonNull(accessToken, ACCESS_TOKEN);\n+        this.tokenType = tokenType;\n+        this.expiresIn = expiresIn;\n+        this.issuedAt = requireNonNull(issuedAt, ISSUED_AT);\n+        this.refreshToken = refreshToken;\n+        scope = toScopeString(scopeList);\n+        scopeSet = (scopeList == null) ? ImmutableSet.of() : ImmutableSet.copyOf(scopeList);\n+        this.extras = (extras == null) ? ImmutableMap.of() : extras;\n+        // raw response\n+        this.rawResponse = rawResponse;\n+    }\n+\n+    /**\n+     * {@code access_token} Access Token response field,\n+     * REQUIRED. The access token issued by the authorization server.\n+     */\n+    public String accessToken() {\n+        return accessToken;\n+    }\n+\n+    /**\n+     * {@code token_type}  Access Token response field,\n+     * REQUIRED. The type of the token issued as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     * Value is case insensitive.\n+     */\n+    @Nullable\n+    public String tokenType() {\n+        return tokenType;\n+    }\n+\n+    /**\n+     * {@code expires_in} Access Token response field,\n+     * RECOMMENDED. {@link Duration} indicating the lifetime of the access token. For example,\n+     * the value 3600 seconds denotes that the access token will expire in one hour from the time\n+     * the response was generated. If omitted, the authorization server SHOULD provide the expiration\n+     * time via other means or document the default value.\n+     */\n+    @Nullable\n+    public Duration expiresIn() {\n+        return expiresIn;\n+    }\n+\n+    /**\n+     * An {@link Instant} indicating when the Access Token was issued.\n+     * The value is NOT supplied with the Access Token response and calculated approximately using\n+     * {@code expires_in} field.\n+     */\n+    public Instant issuedAt() {\n+        return issuedAt;\n+    }\n+\n+    /**\n+     * An {@link Instant} representing a derived value using {@code issuedAt + expiresIn}.\n+     */\n+    @Nullable\n+    public Instant expiresAt() {\n+        if (expiresIn == null) {\n+            return null;\n+        }\n+        if (expiresAt == null) {\n+            expiresAt = issuedAt.plus(expiresIn);\n+        }\n+        return expiresAt;\n+    }\n+\n+    /**\n+     * Indicates whether or not the Access Token expire at the given {@link Instant} time based on\n+     * {@link #expiresAt()} function.\n+     */\n+    public boolean isValid(Instant instant) {\n+        final Instant expires = expiresAt();\n+        return (expires == null) || requireNonNull(instant, \"instant\").isBefore(expires);\n+    }\n+\n+    /**\n+     * Indicates whether or not the Access Token already expired based on {@link #expiresAt()} function.\n+     */\n+    public boolean isValid() {\n+        return isValid(Instant.now());\n+    }\n+\n+    /**\n+     * {@code refresh_token} Access Token response field,\n+     * OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same\n+     * authorization grant as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     */\n+    @Nullable\n+    public String refreshToken() {\n+        return refreshToken;\n+    }\n+\n+    /**\n+     * {@code scope} Access Token response field,\n+     * OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of\n+     * the access token as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     * A list of space-delimited, case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     * The authorization server MAY fully or partially ignore the scope requested by the client, based\n+     * on the authorization server policy or the resource owner's instructions.  If the issued access\n+     * token scope is different from the one requested by the client, the authorization server MUST\n+     * include the \"scope\" response parameter to inform the client of the actual scope granted.\n+     * If the client omits the scope parameter when requesting authorization, the authorization server\n+     * MUST either process the request using a pre-defined default value or fail the request\n+     * indicating an invalid scope.\n+     */\n+    @Nullable\n+    public String scope() {\n+        return scope;\n+    }\n+\n+    /**\n+     * {@code scope} Access Token response field,\n+     * OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of\n+     * the access token as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     * A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     * The authorization server MAY fully or partially ignore the scope requested by the client, based\n+     * on the authorization server policy or the resource owner's instructions.  If the issued access\n+     * token scope is different from the one requested by the client, the authorization server MUST\n+     * include the \"scope\" response parameter to inform the client of the actual scope granted.\n+     * If the client omits the scope parameter when requesting authorization, the authorization server\n+     * MUST either process the request using a pre-defined default value or fail the request\n+     * indicating an invalid scope.\n+     */\n+    public Set<String> scopeSet() {\n+        return scopeSet;\n+    }\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Access Token response,\n+     * OPTIONAL.\n+     */\n+    public Map<String, String> extras() {\n+        return extras;\n+    }\n+\n+    /**\n+     * A value of the {@link HttpHeaderNames#AUTHORIZATION} header based on this access token.\n+     */\n+    public String authorization() {\n+        if (authorization == null) {\n+            final String type = (tokenType == null) ? DEFAULT_TOKEN_TYPE : tokenType;\n+            authorization = String.join(AUTHORIZATION_SEPARATOR,\n+                                        CaseUtil.firstUpperAllLowerCase(type), accessToken);\n+        }\n+        return authorization;\n+    }\n+\n+    /**\n+     * {@code JSON}-formatted raw Token Introspection Response body. If the {@link AccessTokenCapsule} was not\n+     * parsed out of the raw response body, this value calculated based on the other {@link AccessTokenCapsule}\n+     * values.\n+     */\n+    public String rawResponse() {\n+        if (rawResponse == null) {\n+            // WARNING: do not include {@code issuedAt} to the raw response", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1NjY5NA=="}, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 335}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTE3ODgxOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/CaseUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjo0MToxMVrOGtHPbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjoyMzo0MVrOGv1TMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1Nzc0Mg==", "bodyText": "Better using Ascii?", "url": "https://github.com/line/armeria/pull/2840#discussion_r449957742", "createdAt": "2020-07-06T02:41:11Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/CaseUtil.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+final class CaseUtil {\n+\n+  @Nullable\n+  static String firstUpperCase(@Nullable String word) {\n+    if (word == null || word.isEmpty()) {\n+      return word;\n+    }\n+    return Character.toUpperCase(word.charAt(0)) + word.substring(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwOTUyMg==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r452809522", "createdAt": "2020-07-10T12:23:41Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/CaseUtil.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+final class CaseUtil {\n+\n+  @Nullable\n+  static String firstUpperCase(@Nullable String word) {\n+    if (word == null || word.isEmpty()) {\n+      return word;\n+    }\n+    return Character.toUpperCase(word.charAt(0)) + word.substring(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1Nzc0Mg=="}, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTE3ODk3OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/CaseUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjo0MToxOVrOGtHPiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjoyMzo1MVrOGv1Tcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1Nzc2OQ==", "bodyText": "Better using Ascii?", "url": "https://github.com/line/armeria/pull/2840#discussion_r449957769", "createdAt": "2020-07-06T02:41:19Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/CaseUtil.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+final class CaseUtil {\n+\n+  @Nullable\n+  static String firstUpperCase(@Nullable String word) {\n+    if (word == null || word.isEmpty()) {\n+      return word;\n+    }\n+    return Character.toUpperCase(word.charAt(0)) + word.substring(1);\n+  }\n+\n+  @Nullable\n+  static String firstUpperAllLowerCase(@Nullable String word) {\n+    if (word == null || word.isEmpty()) {\n+      return word;\n+    }\n+    return Character.toUpperCase(word.charAt(0)) + word.substring(1).toLowerCase();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwOTU4Ng==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r452809586", "createdAt": "2020-07-10T12:23:51Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/CaseUtil.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+final class CaseUtil {\n+\n+  @Nullable\n+  static String firstUpperCase(@Nullable String word) {\n+    if (word == null || word.isEmpty()) {\n+      return word;\n+    }\n+    return Character.toUpperCase(word.charAt(0)) + word.substring(1);\n+  }\n+\n+  @Nullable\n+  static String firstUpperAllLowerCase(@Nullable String word) {\n+    if (word == null || word.isEmpty()) {\n+      return word;\n+    }\n+    return Character.toUpperCase(word.charAt(0)) + word.substring(1).toLowerCase();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1Nzc2OQ=="}, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTE4NjUzOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjo0NzowM1rOGtHTvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjozMDozNVrOGv1fmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1ODg0NQ==", "bodyText": "Could be char?", "url": "https://github.com/line/armeria/pull/2840#discussion_r449958845", "createdAt": "2020-07-06T02:47:03Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+public final class ClientAuthorization {\n+\n+  private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+  private static final String AUTHORIZATION_SEPARATOR = \" \";\n+  private static final String CREDENTIALS_SEPARATOR = \":\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMjY5Nw==", "bodyText": "changed to char", "url": "https://github.com/line/armeria/pull/2840#discussion_r452812697", "createdAt": "2020-07-10T12:30:35Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+public final class ClientAuthorization {\n+\n+  private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+  private static final String AUTHORIZATION_SEPARATOR = \" \";\n+  private static final String CREDENTIALS_SEPARATOR = \":\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1ODg0NQ=="}, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTE4Njg1OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjo0NzoxMlrOGtHT6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjozMDoxOVrOGv1fDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1ODg5MQ==", "bodyText": "Could be char?", "url": "https://github.com/line/armeria/pull/2840#discussion_r449958891", "createdAt": "2020-07-06T02:47:12Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+public final class ClientAuthorization {\n+\n+  private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+  private static final String AUTHORIZATION_SEPARATOR = \" \";\n+  private static final String CREDENTIALS_SEPARATOR = \":\";\n+\n+  private static final String CLIENT_ID = \"client_id\";\n+  private static final String CLIENT_SECRET = \"client_secret\";\n+  private static final char FORM_ENTRY_SEPARATOR = '=';\n+  private static final char FORM_TUPLE_SEPARATOR = '&';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMjU1OA==", "bodyText": "already a char", "url": "https://github.com/line/armeria/pull/2840#discussion_r452812558", "createdAt": "2020-07-10T12:30:19Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+public final class ClientAuthorization {\n+\n+  private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+  private static final String AUTHORIZATION_SEPARATOR = \" \";\n+  private static final String CREDENTIALS_SEPARATOR = \":\";\n+\n+  private static final String CLIENT_ID = \"client_id\";\n+  private static final String CLIENT_SECRET = \"client_secret\";\n+  private static final char FORM_ENTRY_SEPARATOR = '=';\n+  private static final char FORM_TUPLE_SEPARATOR = '&';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1ODg5MQ=="}, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTE4NzQxOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjo0NzozNlrOGtHUQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjozMTowNVrOGv1giw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1ODk3Ng==", "bodyText": "Could just use + operator", "url": "https://github.com/line/armeria/pull/2840#discussion_r449958976", "createdAt": "2020-07-06T02:47:36Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+public final class ClientAuthorization {\n+\n+  private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+  private static final String AUTHORIZATION_SEPARATOR = \" \";\n+  private static final String CREDENTIALS_SEPARATOR = \":\";\n+\n+  private static final String CLIENT_ID = \"client_id\";\n+  private static final String CLIENT_SECRET = \"client_secret\";\n+  private static final char FORM_ENTRY_SEPARATOR = '=';\n+  private static final char FORM_TUPLE_SEPARATOR = '&';\n+\n+  private final String authorizationType;\n+  @Nullable\n+  private final Supplier<String> authorizationSupplier;\n+  @Nullable\n+  private final Supplier<Map.Entry<String, String>> credentialsSupplier;\n+\n+  /**\n+   * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+   * authorization type,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+   *\n+   * @param authorizationSupplier A supplier of encoded client authorization token.\n+   * @param authorizationType One of the registered HTTP authentication schemes as per\n+   *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+   *                          HTTP Authentication Scheme Registry</a>.\n+   */\n+  public static ClientAuthorization ofAuthorization(\n+      Supplier<String> authorizationSupplier, String authorizationType) {\n+    return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+        null, requireNonNull(authorizationType, \"authorizationType\"));\n+  }\n+\n+  /**\n+   * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+   * {@code Basic} authorization type,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+   *\n+   * @param authorizationSupplier A supplier of encoded client authorization token.\n+   */\n+  public static ClientAuthorization ofBasicAuthorization(\n+      Supplier<String> authorizationSupplier) {\n+    return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+        null, null);\n+  }\n+\n+  /**\n+   * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+   * authorization type,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+   *\n+   * @param credentialsSupplier A supplier of client credentials.\n+   * @param authorizationType One of the registered HTTP authentication schemes as per\n+   *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+   *                          HTTP Authentication Scheme Registry</a>.\n+   */\n+  public static ClientAuthorization ofCredentials(\n+      Supplier<Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+    return new ClientAuthorization(null,\n+        requireNonNull(credentialsSupplier, \"credentialsSupplier\"),\n+        requireNonNull(authorizationType, \"authorizationType\"));\n+  }\n+\n+  /**\n+   * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+   * {@code Basic} authorization type,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+   *\n+   * @param credentialsSupplier A supplier of client credentials.\n+   */\n+  public static ClientAuthorization ofCredentials(\n+      Supplier<Map.Entry<String, String>> credentialsSupplier) {\n+    return new ClientAuthorization(null,\n+        requireNonNull(credentialsSupplier, \"credentialsSupplier\"), null);\n+  }\n+\n+  private ClientAuthorization(@Nullable Supplier<String> authorizationSupplier,\n+      @Nullable Supplier<Map.Entry<String, String>> credentialsSupplier,\n+      @Nullable String authorizationType) {\n+    if (authorizationSupplier == null && credentialsSupplier == null) {\n+      throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+    }\n+    this.authorizationSupplier = authorizationSupplier;\n+    this.credentialsSupplier = credentialsSupplier;\n+    this.authorizationType =\n+        authorizationType == null ? DEFAULT_AUTHORIZATION_TYPE : authorizationType;\n+  }\n+\n+  private String composeAuthorizationString() {\n+    final String clientAuthorization;\n+    if (authorizationSupplier != null) {\n+      clientAuthorization = authorizationSupplier.get();\n+    } else if (credentialsSupplier != null) {\n+      final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+      clientAuthorization = encodeClientCredentials(clientCredentials.getKey(), clientCredentials.getValue());\n+    } else {\n+      // we should not get here\n+      throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+    }\n+    return clientAuthorization;\n+  }\n+\n+  /**\n+   * Fetches client authorization token or client credentials from the supplier and composes client\n+   * {@code Authorization} header value,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+   * <pre>{@code\n+   * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+   * }</pre>.\n+   *\n+   * @return encoded client {@code Authorization} header value.\n+   */\n+  public String authorizationHeaderValue() {\n+    return String.join(AUTHORIZATION_SEPARATOR,\n+                       CaseUtil.firstUpperAllLowerCase(authorizationType), composeAuthorizationString());\n+  }\n+\n+  /**\n+   * Fetches client credentials from the supplier and composes required body parameters,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+   * <pre>{@code\n+   * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+   * }</pre>.\n+   *\n+   * @return encoded client credentials request body parameters.\n+   */\n+  public String credentialsBodyParameters() {\n+    requireNonNull(credentialsSupplier, \"credentialsSupplier\");\n+    final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+    final StringBuilder builder = new StringBuilder()\n+        .append(CLIENT_ID).append(FORM_ENTRY_SEPARATOR)\n+        .append(urlEncode(clientCredentials.getKey()))\n+        .append(FORM_TUPLE_SEPARATOR)\n+        .append(CLIENT_SECRET).append(FORM_ENTRY_SEPARATOR)\n+        .append(urlEncode(clientCredentials.getValue()));\n+    return builder.toString();\n+  }\n+\n+  private static String encodeClientCredentials(String clientId, String clientSecret) {\n+      return Base64.getEncoder()\n+                   .encodeToString(\n+                           String.join(CREDENTIALS_SEPARATOR, clientId, clientSecret)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMjkzOQ==", "bodyText": "changed to concatenation", "url": "https://github.com/line/armeria/pull/2840#discussion_r452812939", "createdAt": "2020-07-10T12:31:05Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+public final class ClientAuthorization {\n+\n+  private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+  private static final String AUTHORIZATION_SEPARATOR = \" \";\n+  private static final String CREDENTIALS_SEPARATOR = \":\";\n+\n+  private static final String CLIENT_ID = \"client_id\";\n+  private static final String CLIENT_SECRET = \"client_secret\";\n+  private static final char FORM_ENTRY_SEPARATOR = '=';\n+  private static final char FORM_TUPLE_SEPARATOR = '&';\n+\n+  private final String authorizationType;\n+  @Nullable\n+  private final Supplier<String> authorizationSupplier;\n+  @Nullable\n+  private final Supplier<Map.Entry<String, String>> credentialsSupplier;\n+\n+  /**\n+   * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+   * authorization type,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+   *\n+   * @param authorizationSupplier A supplier of encoded client authorization token.\n+   * @param authorizationType One of the registered HTTP authentication schemes as per\n+   *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+   *                          HTTP Authentication Scheme Registry</a>.\n+   */\n+  public static ClientAuthorization ofAuthorization(\n+      Supplier<String> authorizationSupplier, String authorizationType) {\n+    return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+        null, requireNonNull(authorizationType, \"authorizationType\"));\n+  }\n+\n+  /**\n+   * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+   * {@code Basic} authorization type,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+   *\n+   * @param authorizationSupplier A supplier of encoded client authorization token.\n+   */\n+  public static ClientAuthorization ofBasicAuthorization(\n+      Supplier<String> authorizationSupplier) {\n+    return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+        null, null);\n+  }\n+\n+  /**\n+   * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+   * authorization type,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+   *\n+   * @param credentialsSupplier A supplier of client credentials.\n+   * @param authorizationType One of the registered HTTP authentication schemes as per\n+   *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+   *                          HTTP Authentication Scheme Registry</a>.\n+   */\n+  public static ClientAuthorization ofCredentials(\n+      Supplier<Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+    return new ClientAuthorization(null,\n+        requireNonNull(credentialsSupplier, \"credentialsSupplier\"),\n+        requireNonNull(authorizationType, \"authorizationType\"));\n+  }\n+\n+  /**\n+   * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+   * {@code Basic} authorization type,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+   *\n+   * @param credentialsSupplier A supplier of client credentials.\n+   */\n+  public static ClientAuthorization ofCredentials(\n+      Supplier<Map.Entry<String, String>> credentialsSupplier) {\n+    return new ClientAuthorization(null,\n+        requireNonNull(credentialsSupplier, \"credentialsSupplier\"), null);\n+  }\n+\n+  private ClientAuthorization(@Nullable Supplier<String> authorizationSupplier,\n+      @Nullable Supplier<Map.Entry<String, String>> credentialsSupplier,\n+      @Nullable String authorizationType) {\n+    if (authorizationSupplier == null && credentialsSupplier == null) {\n+      throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+    }\n+    this.authorizationSupplier = authorizationSupplier;\n+    this.credentialsSupplier = credentialsSupplier;\n+    this.authorizationType =\n+        authorizationType == null ? DEFAULT_AUTHORIZATION_TYPE : authorizationType;\n+  }\n+\n+  private String composeAuthorizationString() {\n+    final String clientAuthorization;\n+    if (authorizationSupplier != null) {\n+      clientAuthorization = authorizationSupplier.get();\n+    } else if (credentialsSupplier != null) {\n+      final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+      clientAuthorization = encodeClientCredentials(clientCredentials.getKey(), clientCredentials.getValue());\n+    } else {\n+      // we should not get here\n+      throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+    }\n+    return clientAuthorization;\n+  }\n+\n+  /**\n+   * Fetches client authorization token or client credentials from the supplier and composes client\n+   * {@code Authorization} header value,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+   * <pre>{@code\n+   * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+   * }</pre>.\n+   *\n+   * @return encoded client {@code Authorization} header value.\n+   */\n+  public String authorizationHeaderValue() {\n+    return String.join(AUTHORIZATION_SEPARATOR,\n+                       CaseUtil.firstUpperAllLowerCase(authorizationType), composeAuthorizationString());\n+  }\n+\n+  /**\n+   * Fetches client credentials from the supplier and composes required body parameters,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+   * <pre>{@code\n+   * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+   * }</pre>.\n+   *\n+   * @return encoded client credentials request body parameters.\n+   */\n+  public String credentialsBodyParameters() {\n+    requireNonNull(credentialsSupplier, \"credentialsSupplier\");\n+    final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+    final StringBuilder builder = new StringBuilder()\n+        .append(CLIENT_ID).append(FORM_ENTRY_SEPARATOR)\n+        .append(urlEncode(clientCredentials.getKey()))\n+        .append(FORM_TUPLE_SEPARATOR)\n+        .append(CLIENT_SECRET).append(FORM_ENTRY_SEPARATOR)\n+        .append(urlEncode(clientCredentials.getValue()));\n+    return builder.toString();\n+  }\n+\n+  private static String encodeClientCredentials(String clientId, String clientSecret) {\n+      return Base64.getEncoder()\n+                   .encodeToString(\n+                           String.join(CREDENTIALS_SEPARATOR, clientId, clientSecret)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1ODk3Ng=="}, "originalCommit": {"oid": "4e4b80ee25148be663faa0a929741aa7777a305c"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODgxNDYxOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMToyNzoxN1rOGwke1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwNTo1MzoyNlrOGzmDLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4MjU1MA==", "bodyText": "Question: do you think it is better to abbreviate Authorization into Authz?", "url": "https://github.com/line/armeria/pull/2840#discussion_r453582550", "createdAt": "2020-07-13T11:27:17Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+@FunctionalInterface\n+public interface OAuth2AuthorizationGrant {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQyMDY2Ng==", "bodyText": "You like reducing the number of symbols used in the class name or you are concerned about some ambiguity? The user won't interact with those classes directly.\nOn the client, the user interacts with OAuth2Client and one of the available Grants (OAuth2ClientCredentialsGrant or OAuth2ResourceOwnerPasswordCredentialsGrant).\nOn the server, the user interacts with OAuth2TokenIntrospectionAuthorizer.", "url": "https://github.com/line/armeria/pull/2840#discussion_r454420666", "createdAt": "2020-07-14T14:57:24Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+@FunctionalInterface\n+public interface OAuth2AuthorizationGrant {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4MjU1MA=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1Mzk2NA==", "bodyText": "Thanks for explanation. Sounds good as it is, then. \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/2840#discussion_r456753964", "createdAt": "2020-07-18T05:53:26Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+@FunctionalInterface\n+public interface OAuth2AuthorizationGrant {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4MjU1MA=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODgxOTUzOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMToyODo1N1rOGwkh6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMToxMjo1OVrOG0zO9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4MzMzNw==", "bodyText": "Is the term Capsule something defined in OAuth 2 or an authorization jargon? If not, what would be a better name? GrantedAccessToken? \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2840#discussion_r453583337", "createdAt": "2020-07-13T11:28:57Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+@FunctionalInterface\n+public interface OAuth2AuthorizationGrant {\n+\n+    /**\n+     * Produces OAuth 2.0 Access Token\n+     */\n+    CompletionStage<AccessTokenCapsule> getAccessToken();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NDA5Nw==", "bodyText": "No, Capsule is not part of OAuth 2. It's just a word to describe a shell or a container that contains Access Token, Refresh Token and some other elements. It's not really a descriptor (which is what we get as a result of introspection). You don't like the word Capsule or you think it could be confusing?", "url": "https://github.com/line/armeria/pull/2840#discussion_r454394097", "createdAt": "2020-07-14T14:23:11Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+@FunctionalInterface\n+public interface OAuth2AuthorizationGrant {\n+\n+    /**\n+     * Produces OAuth 2.0 Access Token\n+     */\n+    CompletionStage<AccessTokenCapsule> getAccessToken();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4MzMzNw=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MzE1MQ==", "bodyText": "I prefer OAuth2AccessToken \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2840#discussion_r454783151", "createdAt": "2020-07-15T04:26:22Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+@FunctionalInterface\n+public interface OAuth2AuthorizationGrant {\n+\n+    /**\n+     * Produces OAuth 2.0 Access Token\n+     */\n+    CompletionStage<AccessTokenCapsule> getAccessToken();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4MzMzNw=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAxODU0OA==", "bodyText": "Renamed to OAuth2AccessToken", "url": "https://github.com/line/armeria/pull/2840#discussion_r458018548", "createdAt": "2020-07-21T11:12:59Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+@FunctionalInterface\n+public interface OAuth2AuthorizationGrant {\n+\n+    /**\n+     * Produces OAuth 2.0 Access Token\n+     */\n+    CompletionStage<AccessTokenCapsule> getAccessToken();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4MzMzNw=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjM5OTMwOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMjoyODoyMVrOGxr5fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODoyMzozN1rOG0tbsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc1MjYzNg==", "bodyText": "You can use QueryParams instead of the manual building of parameters string. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2840#discussion_r454752636", "createdAt": "2020-07-15T02:28:21Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+public final class ClientAuthorization {\n+\n+  private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+  private static final char AUTHORIZATION_SEPARATOR = ' ';\n+  private static final char CREDENTIALS_SEPARATOR = ':';\n+\n+  private static final String CLIENT_ID = \"client_id\";\n+  private static final String CLIENT_SECRET = \"client_secret\";\n+  private static final char FORM_ENTRY_SEPARATOR = '=';\n+  private static final char FORM_TUPLE_SEPARATOR = '&';\n+\n+  private final String authorizationType;\n+  @Nullable\n+  private final Supplier<String> authorizationSupplier;\n+  @Nullable\n+  private final Supplier<? extends Map.Entry<String, String>> credentialsSupplier;\n+\n+  /**\n+   * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+   * authorization type,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+   *\n+   * @param authorizationSupplier A supplier of encoded client authorization token.\n+   * @param authorizationType One of the registered HTTP authentication schemes as per\n+   *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+   *                          HTTP Authentication Scheme Registry</a>.\n+   */\n+  public static ClientAuthorization ofAuthorization(\n+      Supplier<String> authorizationSupplier, String authorizationType) {\n+    return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+        null, requireNonNull(authorizationType, \"authorizationType\"));\n+  }\n+\n+  /**\n+   * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+   * {@code Basic} authorization type,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+   *\n+   * @param authorizationSupplier A supplier of encoded client authorization token.\n+   */\n+  public static ClientAuthorization ofBasicAuthorization(\n+      Supplier<String> authorizationSupplier) {\n+    return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+        null, null);\n+  }\n+\n+  /**\n+   * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+   * authorization type,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+   *\n+   * @param credentialsSupplier A supplier of client credentials.\n+   * @param authorizationType One of the registered HTTP authentication schemes as per\n+   *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+   *                          HTTP Authentication Scheme Registry</a>.\n+   */\n+  public static ClientAuthorization ofCredentials(\n+      Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+    return new ClientAuthorization(null,\n+        requireNonNull(credentialsSupplier, \"credentialsSupplier\"),\n+        requireNonNull(authorizationType, \"authorizationType\"));\n+  }\n+\n+  /**\n+   * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+   * {@code Basic} authorization type,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+   *\n+   * @param credentialsSupplier A supplier of client credentials.\n+   */\n+  public static ClientAuthorization ofCredentials(\n+      Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+    return new ClientAuthorization(null,\n+        requireNonNull(credentialsSupplier, \"credentialsSupplier\"), null);\n+  }\n+\n+  private ClientAuthorization(@Nullable Supplier<String> authorizationSupplier,\n+      @Nullable Supplier<? extends Map.Entry<String, String>> credentialsSupplier,\n+      @Nullable String authorizationType) {\n+    if (authorizationSupplier == null && credentialsSupplier == null) {\n+      throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+    }\n+    this.authorizationSupplier = authorizationSupplier;\n+    this.credentialsSupplier = credentialsSupplier;\n+    this.authorizationType =\n+        authorizationType == null ? DEFAULT_AUTHORIZATION_TYPE : authorizationType;\n+  }\n+\n+  private String composeAuthorizationString() {\n+    final String clientAuthorization;\n+    if (authorizationSupplier != null) {\n+      clientAuthorization = authorizationSupplier.get();\n+    } else if (credentialsSupplier != null) {\n+      final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+      clientAuthorization = encodeClientCredentials(clientCredentials.getKey(), clientCredentials.getValue());\n+    } else {\n+      // we should not get here\n+      throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+    }\n+    return clientAuthorization;\n+  }\n+\n+  /**\n+   * Fetches client authorization token or client credentials from the supplier and composes client\n+   * {@code Authorization} header value,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+   * <pre>{@code\n+   * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+   * }</pre>.\n+   *\n+   * @return encoded client {@code Authorization} header value.\n+   */\n+  public String authorizationHeaderValue() {\n+    return CaseUtil.firstUpperAllLowerCase(authorizationType) +\n+           AUTHORIZATION_SEPARATOR + composeAuthorizationString();\n+  }\n+\n+  /**\n+   * Fetches client credentials from the supplier and composes required body parameters,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+   * <pre>{@code\n+   * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+   * }</pre>.\n+   *\n+   * @return encoded client credentials request body parameters.\n+   */\n+  public String credentialsBodyParameters() {\n+    requireNonNull(credentialsSupplier, \"credentialsSupplier\");\n+    final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+    final StringBuilder builder = new StringBuilder()\n+        .append(CLIENT_ID).append(FORM_ENTRY_SEPARATOR)\n+        .append(urlEncode(clientCredentials.getKey()))\n+        .append(FORM_TUPLE_SEPARATOR)\n+        .append(CLIENT_SECRET).append(FORM_ENTRY_SEPARATOR)\n+        .append(urlEncode(clientCredentials.getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkyMzUwNQ==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r457923505", "createdAt": "2020-07-21T08:23:37Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+public final class ClientAuthorization {\n+\n+  private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";\n+  private static final char AUTHORIZATION_SEPARATOR = ' ';\n+  private static final char CREDENTIALS_SEPARATOR = ':';\n+\n+  private static final String CLIENT_ID = \"client_id\";\n+  private static final String CLIENT_SECRET = \"client_secret\";\n+  private static final char FORM_ENTRY_SEPARATOR = '=';\n+  private static final char FORM_TUPLE_SEPARATOR = '&';\n+\n+  private final String authorizationType;\n+  @Nullable\n+  private final Supplier<String> authorizationSupplier;\n+  @Nullable\n+  private final Supplier<? extends Map.Entry<String, String>> credentialsSupplier;\n+\n+  /**\n+   * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+   * authorization type,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+   *\n+   * @param authorizationSupplier A supplier of encoded client authorization token.\n+   * @param authorizationType One of the registered HTTP authentication schemes as per\n+   *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+   *                          HTTP Authentication Scheme Registry</a>.\n+   */\n+  public static ClientAuthorization ofAuthorization(\n+      Supplier<String> authorizationSupplier, String authorizationType) {\n+    return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+        null, requireNonNull(authorizationType, \"authorizationType\"));\n+  }\n+\n+  /**\n+   * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+   * {@code Basic} authorization type,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+   *\n+   * @param authorizationSupplier A supplier of encoded client authorization token.\n+   */\n+  public static ClientAuthorization ofBasicAuthorization(\n+      Supplier<String> authorizationSupplier) {\n+    return new ClientAuthorization(requireNonNull(authorizationSupplier, \"authorizationSupplier\"),\n+        null, null);\n+  }\n+\n+  /**\n+   * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+   * authorization type,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+   *\n+   * @param credentialsSupplier A supplier of client credentials.\n+   * @param authorizationType One of the registered HTTP authentication schemes as per\n+   *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+   *                          HTTP Authentication Scheme Registry</a>.\n+   */\n+  public static ClientAuthorization ofCredentials(\n+      Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+    return new ClientAuthorization(null,\n+        requireNonNull(credentialsSupplier, \"credentialsSupplier\"),\n+        requireNonNull(authorizationType, \"authorizationType\"));\n+  }\n+\n+  /**\n+   * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+   * {@code Basic} authorization type,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+   *\n+   * @param credentialsSupplier A supplier of client credentials.\n+   */\n+  public static ClientAuthorization ofCredentials(\n+      Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+    return new ClientAuthorization(null,\n+        requireNonNull(credentialsSupplier, \"credentialsSupplier\"), null);\n+  }\n+\n+  private ClientAuthorization(@Nullable Supplier<String> authorizationSupplier,\n+      @Nullable Supplier<? extends Map.Entry<String, String>> credentialsSupplier,\n+      @Nullable String authorizationType) {\n+    if (authorizationSupplier == null && credentialsSupplier == null) {\n+      throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+    }\n+    this.authorizationSupplier = authorizationSupplier;\n+    this.credentialsSupplier = credentialsSupplier;\n+    this.authorizationType =\n+        authorizationType == null ? DEFAULT_AUTHORIZATION_TYPE : authorizationType;\n+  }\n+\n+  private String composeAuthorizationString() {\n+    final String clientAuthorization;\n+    if (authorizationSupplier != null) {\n+      clientAuthorization = authorizationSupplier.get();\n+    } else if (credentialsSupplier != null) {\n+      final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+      clientAuthorization = encodeClientCredentials(clientCredentials.getKey(), clientCredentials.getValue());\n+    } else {\n+      // we should not get here\n+      throw new NullPointerException(\"authorizationSupplier && credentialsSupplier\");\n+    }\n+    return clientAuthorization;\n+  }\n+\n+  /**\n+   * Fetches client authorization token or client credentials from the supplier and composes client\n+   * {@code Authorization} header value,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+   * <pre>{@code\n+   * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+   * }</pre>.\n+   *\n+   * @return encoded client {@code Authorization} header value.\n+   */\n+  public String authorizationHeaderValue() {\n+    return CaseUtil.firstUpperAllLowerCase(authorizationType) +\n+           AUTHORIZATION_SEPARATOR + composeAuthorizationString();\n+  }\n+\n+  /**\n+   * Fetches client credentials from the supplier and composes required body parameters,\n+   * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>:\n+   * <pre>{@code\n+   * client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n+   * }</pre>.\n+   *\n+   * @return encoded client credentials request body parameters.\n+   */\n+  public String credentialsBodyParameters() {\n+    requireNonNull(credentialsSupplier, \"credentialsSupplier\");\n+    final Map.Entry<String, String> clientCredentials = credentialsSupplier.get();\n+    final StringBuilder builder = new StringBuilder()\n+        .append(CLIENT_ID).append(FORM_ENTRY_SEPARATOR)\n+        .append(urlEncode(clientCredentials.getKey()))\n+        .append(FORM_TUPLE_SEPARATOR)\n+        .append(CLIENT_SECRET).append(FORM_ENTRY_SEPARATOR)\n+        .append(urlEncode(clientCredentials.getValue()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc1MjYzNg=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjQxMzEyOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AbstractAuthorizationRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMjozNjoxOVrOGxsBlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODoyOTo0MlrOG0tqPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc1NDcxMQ==", "bodyText": "Ditto, You can use QueryParams instead of the manual building of the parameters string.", "url": "https://github.com/line/armeria/pull/2840#discussion_r454754711", "createdAt": "2020-07-15T02:36:19Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AbstractAuthorizationRequest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+\n+/**\n+ * A common abstraction for the requests implementing various Authorization request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+abstract class AbstractAuthorizationRequest<T> {\n+\n+    private static final String FORM_ENTRY_SEPARATOR = \"=\";\n+    private static final String FORM_TUPLE_SEPARATOR = \"&\";\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param authorizationEndpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                              correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param authorizationEndpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                                  OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractAuthorizationRequest(WebClient authorizationEndpoint, String authorizationEndpointPath,\n+                                           @Nullable ClientAuthorization clientAuthorization) {\n+        endpoint = Objects.requireNonNull(authorizationEndpoint, \"authorizationEndpoint\");\n+        endpointPath = Objects.requireNonNull(authorizationEndpointPath, \"authorizationEndpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected WebClient endpoint() {\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Returns the authorization endpoint path.\n+     */\n+    protected String endpointPath() {\n+        return endpointPath;\n+    }\n+\n+    /**\n+     * Returns the value for the {@link HttpHeaderNames#AUTHORIZATION}.\n+     */\n+    @Nullable\n+    protected String authorizationHeaderValue() {\n+        return clientAuthorization == null ? null : clientAuthorization.authorizationHeaderValue();\n+    }\n+\n+    /**\n+     * Composes headers for the authorization request.\n+     */\n+    protected RequestHeaders composeRequestHeaders() {\n+        final RequestHeadersBuilder headersBuilder =\n+                RequestHeaders.of(HttpMethod.POST, endpointPath()).toBuilder();\n+        final String authorizationHeaderValue = authorizationHeaderValue();\n+        if (authorizationHeaderValue != null) {\n+            headersBuilder.add(HttpHeaderNames.AUTHORIZATION, authorizationHeaderValue);\n+        }\n+        headersBuilder.add(HttpHeaderNames.CONTENT_TYPE, MediaType.FORM_DATA.toString());\n+        return headersBuilder.build();\n+    }\n+\n+    /**\n+     * Extracts the result and convert it to the target type {@code T} or throw an error in case of an error\n+     * result.\n+     * @param response An {@link AggregatedHttpResponse} returned by the authorization endpoint.\n+     * @param requestData A {@link Map} that contains all the elements of the request form sent with the\n+     *                    request.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    @Nullable\n+    protected T extractResults(AggregatedHttpResponse response, Map<String, String> requestData) {\n+        final HttpStatus status = response.status();\n+        switch (status.code()) {\n+            case 200: // OK\n+                // expected Content-Type: application/json;charset=UTF-8\n+                validateContentType(response, MediaType.JSON);\n+                return extractOkResults(response, requestData);\n+            case 400: // Bad Request\n+                // expected Content-Type: application/json;charset=UTF-8\n+                validateContentType(response, MediaType.JSON);\n+                throw onBadRequestError(response);\n+            case 401: // Unauthorized\n+                throw onUnauthorizedError(response);\n+        }\n+        throw new UnsupportedResponseException(status.code(), status.toString(), response.contentUtf8());\n+    }\n+\n+    /**\n+     * Validates the content type of the response.\n+     */\n+    private static void validateContentType(AggregatedHttpResponse response, MediaType expectedType) {\n+        final MediaType contentType = response.contentType();\n+        if (contentType == null) {\n+            // if omitted, assume that the type matches the expected\n+            return;\n+        }\n+        final String mediaType = contentType.nameWithoutParameters();\n+        if (!mediaType.equalsIgnoreCase(expectedType.nameWithoutParameters())) {\n+            throw new UnsupportedMediaTypeException(mediaType,\n+                                                    response.status().toString(), response.contentUtf8());\n+        }\n+    }\n+\n+    /**\n+     * Extracts data from OK response and converts it to the target type {@code T}.\n+     */\n+    protected abstract T extractOkResults(AggregatedHttpResponse response, Map<String, String> requestData);\n+\n+    /**\n+     * Composes {@link TokenRequestException} upon 400 Bad Request response\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-5.2\">[RFC6749], Section 5.2</a>.\n+     * @param errorResponse response received from the server\n+     * @return an instance of {@link TokenRequestException}\n+     */\n+    protected TokenRequestException onBadRequestError(AggregatedHttpResponse errorResponse) {\n+        return TokenRequestException.builder().of(errorResponse.contentUtf8());\n+    }\n+\n+    /**\n+     * Composes {@link InvalidClientException} upon 401 Unauthorized response\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-5.2\">[RFC6749], Section 5.2</a> (invalid_client).\n+     * @param errorResponse response received from the server\n+     * @return an instance of {@link InvalidClientException}\n+     */\n+    protected TokenRequestException onUnauthorizedError(AggregatedHttpResponse errorResponse) {\n+        final StringBuilder messageBuilder = new StringBuilder().append(errorResponse.status());\n+        final String wwwAuthenticate = errorResponse.headers().get(HttpHeaderNames.WWW_AUTHENTICATE);\n+        if (wwwAuthenticate != null) {\n+            messageBuilder.append(\": \").append(wwwAuthenticate);\n+        }\n+        final HttpData errorResponseContents = errorResponse.content();\n+        if (!errorResponse.content().isEmpty()) {\n+            messageBuilder.append(\": \").append(errorResponseContents.toStringUtf8());\n+        }\n+        return new InvalidClientException(messageBuilder.toString(), null);\n+    }\n+\n+    /**\n+     * Makes a request to the authorization endpoint using supplied {@code requestForm} parameters and converts\n+     * the result to the given type {@code T}.\n+     */\n+    protected CompletableFuture<T> make(LinkedHashMap<String, String> requestForm) {\n+        final HttpData requestContents = HttpData.ofUtf8(\n+                requestForm.entrySet().stream().map(AbstractAuthorizationRequest::urlEncode)\n+                           .collect(Collectors.joining(FORM_TUPLE_SEPARATOR)));\n+        final RequestHeaders requestHeaders = composeRequestHeaders();\n+        final HttpResponse response = endpoint().execute(requestHeaders, requestContents);\n+        // when response aggregated, then extract the results...\n+        return response.aggregate().thenApply(r -> extractResults(r, Collections.unmodifiableMap(requestForm)));\n+    }\n+\n+    private static String urlEncode(Map.Entry<String, String> entry) {\n+        return entry.getKey() + FORM_ENTRY_SEPARATOR + urlEncode(entry.getValue());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkyNzIzMQ==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r457927231", "createdAt": "2020-07-21T08:29:42Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AbstractAuthorizationRequest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+\n+/**\n+ * A common abstraction for the requests implementing various Authorization request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+abstract class AbstractAuthorizationRequest<T> {\n+\n+    private static final String FORM_ENTRY_SEPARATOR = \"=\";\n+    private static final String FORM_TUPLE_SEPARATOR = \"&\";\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param authorizationEndpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                              correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param authorizationEndpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                                  OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractAuthorizationRequest(WebClient authorizationEndpoint, String authorizationEndpointPath,\n+                                           @Nullable ClientAuthorization clientAuthorization) {\n+        endpoint = Objects.requireNonNull(authorizationEndpoint, \"authorizationEndpoint\");\n+        endpointPath = Objects.requireNonNull(authorizationEndpointPath, \"authorizationEndpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected WebClient endpoint() {\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Returns the authorization endpoint path.\n+     */\n+    protected String endpointPath() {\n+        return endpointPath;\n+    }\n+\n+    /**\n+     * Returns the value for the {@link HttpHeaderNames#AUTHORIZATION}.\n+     */\n+    @Nullable\n+    protected String authorizationHeaderValue() {\n+        return clientAuthorization == null ? null : clientAuthorization.authorizationHeaderValue();\n+    }\n+\n+    /**\n+     * Composes headers for the authorization request.\n+     */\n+    protected RequestHeaders composeRequestHeaders() {\n+        final RequestHeadersBuilder headersBuilder =\n+                RequestHeaders.of(HttpMethod.POST, endpointPath()).toBuilder();\n+        final String authorizationHeaderValue = authorizationHeaderValue();\n+        if (authorizationHeaderValue != null) {\n+            headersBuilder.add(HttpHeaderNames.AUTHORIZATION, authorizationHeaderValue);\n+        }\n+        headersBuilder.add(HttpHeaderNames.CONTENT_TYPE, MediaType.FORM_DATA.toString());\n+        return headersBuilder.build();\n+    }\n+\n+    /**\n+     * Extracts the result and convert it to the target type {@code T} or throw an error in case of an error\n+     * result.\n+     * @param response An {@link AggregatedHttpResponse} returned by the authorization endpoint.\n+     * @param requestData A {@link Map} that contains all the elements of the request form sent with the\n+     *                    request.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    @Nullable\n+    protected T extractResults(AggregatedHttpResponse response, Map<String, String> requestData) {\n+        final HttpStatus status = response.status();\n+        switch (status.code()) {\n+            case 200: // OK\n+                // expected Content-Type: application/json;charset=UTF-8\n+                validateContentType(response, MediaType.JSON);\n+                return extractOkResults(response, requestData);\n+            case 400: // Bad Request\n+                // expected Content-Type: application/json;charset=UTF-8\n+                validateContentType(response, MediaType.JSON);\n+                throw onBadRequestError(response);\n+            case 401: // Unauthorized\n+                throw onUnauthorizedError(response);\n+        }\n+        throw new UnsupportedResponseException(status.code(), status.toString(), response.contentUtf8());\n+    }\n+\n+    /**\n+     * Validates the content type of the response.\n+     */\n+    private static void validateContentType(AggregatedHttpResponse response, MediaType expectedType) {\n+        final MediaType contentType = response.contentType();\n+        if (contentType == null) {\n+            // if omitted, assume that the type matches the expected\n+            return;\n+        }\n+        final String mediaType = contentType.nameWithoutParameters();\n+        if (!mediaType.equalsIgnoreCase(expectedType.nameWithoutParameters())) {\n+            throw new UnsupportedMediaTypeException(mediaType,\n+                                                    response.status().toString(), response.contentUtf8());\n+        }\n+    }\n+\n+    /**\n+     * Extracts data from OK response and converts it to the target type {@code T}.\n+     */\n+    protected abstract T extractOkResults(AggregatedHttpResponse response, Map<String, String> requestData);\n+\n+    /**\n+     * Composes {@link TokenRequestException} upon 400 Bad Request response\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-5.2\">[RFC6749], Section 5.2</a>.\n+     * @param errorResponse response received from the server\n+     * @return an instance of {@link TokenRequestException}\n+     */\n+    protected TokenRequestException onBadRequestError(AggregatedHttpResponse errorResponse) {\n+        return TokenRequestException.builder().of(errorResponse.contentUtf8());\n+    }\n+\n+    /**\n+     * Composes {@link InvalidClientException} upon 401 Unauthorized response\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-5.2\">[RFC6749], Section 5.2</a> (invalid_client).\n+     * @param errorResponse response received from the server\n+     * @return an instance of {@link InvalidClientException}\n+     */\n+    protected TokenRequestException onUnauthorizedError(AggregatedHttpResponse errorResponse) {\n+        final StringBuilder messageBuilder = new StringBuilder().append(errorResponse.status());\n+        final String wwwAuthenticate = errorResponse.headers().get(HttpHeaderNames.WWW_AUTHENTICATE);\n+        if (wwwAuthenticate != null) {\n+            messageBuilder.append(\": \").append(wwwAuthenticate);\n+        }\n+        final HttpData errorResponseContents = errorResponse.content();\n+        if (!errorResponse.content().isEmpty()) {\n+            messageBuilder.append(\": \").append(errorResponseContents.toStringUtf8());\n+        }\n+        return new InvalidClientException(messageBuilder.toString(), null);\n+    }\n+\n+    /**\n+     * Makes a request to the authorization endpoint using supplied {@code requestForm} parameters and converts\n+     * the result to the given type {@code T}.\n+     */\n+    protected CompletableFuture<T> make(LinkedHashMap<String, String> requestForm) {\n+        final HttpData requestContents = HttpData.ofUtf8(\n+                requestForm.entrySet().stream().map(AbstractAuthorizationRequest::urlEncode)\n+                           .collect(Collectors.joining(FORM_TUPLE_SEPARATOR)));\n+        final RequestHeaders requestHeaders = composeRequestHeaders();\n+        final HttpResponse response = endpoint().execute(requestHeaders, requestContents);\n+        // when response aggregated, then extract the results...\n+        return response.aggregate().thenApply(r -> extractResults(r, Collections.unmodifiableMap(requestForm)));\n+    }\n+\n+    private static String urlEncode(Map.Entry<String, String> entry) {\n+        return entry.getKey() + FORM_ENTRY_SEPARATOR + urlEncode(entry.getValue());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc1NDcxMQ=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjQ3MjIwOnYy", "diffSide": "RIGHT", "path": "oauth2/src/test/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ClientCredentialsGrantTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMzowNzo0MVrOGxsi-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDoyMDoyN1rOG0xm0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc2MzI1Ng==", "bodyText": "Could you use JUnit 5 and ServerExtension? We prefer JUnit 5 for the new test code.\nhttps://armeria.dev/community/developer-guide#use-junit-5-instead-of-junit-4-for-testing", "url": "https://github.com/line/armeria/pull/2840#discussion_r454763256", "createdAt": "2020-07-15T03:07:41Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/test/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ClientCredentialsGrantTest.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.MockOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.MockOAuth2ClientCredentialsService;\n+import com.linecorp.armeria.common.auth.oauth2.MockOAuth2IntrospectionService;\n+import com.linecorp.armeria.server.AbstractHttpService;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.oauth2.OAuth2TokenIntrospectionAuthorizer;\n+import com.linecorp.armeria.testing.junit4.server.ServerRule;\n+\n+public class OAuth2ClientCredentialsGrantTest {\n+\n+    static final String CLIENT_CREDENTIALS = \"dGVzdF9jbGllbnQ6Y2xpZW50X3NlY3JldA==\"; //test_client:client_secret\n+    static final String SERVER_CREDENTIALS = \"dGVzdF9zZXJ2ZXI6c2VydmVyX3NlY3JldA==\"; //test_server:server_secret\n+\n+    static final MockOAuth2AccessToken TOKEN =\n+        MockOAuth2AccessToken.generate(\"test_client\", null, Duration.ofHours(3L),\n+                                       ImmutableMap.of(\"extension_field\", \"twenty-seven\"), \"read\", \"write\");\n+\n+    static final HttpService SERVICE = new AbstractHttpService() {\n+        @Override\n+        protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)\n+                throws Exception {\n+            return HttpResponse.of(HttpStatus.OK);\n+        }\n+    };\n+\n+    @Rule\n+    public ServerRule authServerRule = new ServerRule() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MTg5MA==", "bodyText": "Migrated to ServerExtension and JUnit 5.", "url": "https://github.com/line/armeria/pull/2840#discussion_r457991890", "createdAt": "2020-07-21T10:20:27Z", "author": {"login": "max904-github"}, "path": "oauth2/src/test/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ClientCredentialsGrantTest.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.MockOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.MockOAuth2ClientCredentialsService;\n+import com.linecorp.armeria.common.auth.oauth2.MockOAuth2IntrospectionService;\n+import com.linecorp.armeria.server.AbstractHttpService;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.oauth2.OAuth2TokenIntrospectionAuthorizer;\n+import com.linecorp.armeria.testing.junit4.server.ServerRule;\n+\n+public class OAuth2ClientCredentialsGrantTest {\n+\n+    static final String CLIENT_CREDENTIALS = \"dGVzdF9jbGllbnQ6Y2xpZW50X3NlY3JldA==\"; //test_client:client_secret\n+    static final String SERVER_CREDENTIALS = \"dGVzdF9zZXJ2ZXI6c2VydmVyX3NlY3JldA==\"; //test_server:server_secret\n+\n+    static final MockOAuth2AccessToken TOKEN =\n+        MockOAuth2AccessToken.generate(\"test_client\", null, Duration.ofHours(3L),\n+                                       ImmutableMap.of(\"extension_field\", \"twenty-seven\"), \"read\", \"write\");\n+\n+    static final HttpService SERVICE = new AbstractHttpService() {\n+        @Override\n+        protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)\n+                throws Exception {\n+            return HttpResponse.of(HttpStatus.OK);\n+        }\n+    };\n+\n+    @Rule\n+    public ServerRule authServerRule = new ServerRule() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc2MzI1Ng=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjU0MjU1OnYy", "diffSide": "RIGHT", "path": "oauth2/src/test/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ClientCredentialsGrantTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMzo0ODoyMlrOGxtKXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTo0OToyMFrOG0winQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3MzM0MA==", "bodyText": "OAuth2Client looks nice! However, it has to create WebClient every time for different resource owners. \ud83e\udd14\nHow about adding a new method such as signedRequest(HttpRequest) to OAuth2ClientCredentialsGrant? Then users can set an HttpRequest that has AUTHORIZATION header to the existing WebClient without creating a new one.\nclass OAuth2ClientCredentialsGrant {\n    CompletableFuture<HttpRequest> signedRequest(HttpRequest req) {\n        return getAccessToken().thenApply(accessToken -> {\n            return req.withHeaders(/* set AUTHORIZATION header */);\n        });\n    }\n}\n\nHttpRequest request = HttpRequest.of(HttpMethod.GET, \"/resource-read-write/\");\nCompletableFuture<HttpRequest> signedRequest = grant.signRequest(request);\nAggregatedHttpResponse response = \n        signedRequest.thenCompose(signed -> client.execute(signed).aggregate()).join();", "url": "https://github.com/line/armeria/pull/2840#discussion_r454773340", "createdAt": "2020-07-15T03:48:22Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/test/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ClientCredentialsGrantTest.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.MockOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.MockOAuth2ClientCredentialsService;\n+import com.linecorp.armeria.common.auth.oauth2.MockOAuth2IntrospectionService;\n+import com.linecorp.armeria.server.AbstractHttpService;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.oauth2.OAuth2TokenIntrospectionAuthorizer;\n+import com.linecorp.armeria.testing.junit4.server.ServerRule;\n+\n+public class OAuth2ClientCredentialsGrantTest {\n+\n+    static final String CLIENT_CREDENTIALS = \"dGVzdF9jbGllbnQ6Y2xpZW50X3NlY3JldA==\"; //test_client:client_secret\n+    static final String SERVER_CREDENTIALS = \"dGVzdF9zZXJ2ZXI6c2VydmVyX3NlY3JldA==\"; //test_server:server_secret\n+\n+    static final MockOAuth2AccessToken TOKEN =\n+        MockOAuth2AccessToken.generate(\"test_client\", null, Duration.ofHours(3L),\n+                                       ImmutableMap.of(\"extension_field\", \"twenty-seven\"), \"read\", \"write\");\n+\n+    static final HttpService SERVICE = new AbstractHttpService() {\n+        @Override\n+        protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)\n+                throws Exception {\n+            return HttpResponse.of(HttpStatus.OK);\n+        }\n+    };\n+\n+    @Rule\n+    public ServerRule authServerRule = new ServerRule() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.annotatedService(\"/token\", new MockOAuth2ClientCredentialsService()\n+                    .withAuthorizedClient(\"test_client\", \"client_secret\")\n+                    .withAuthorizedClient(\"test_server\", \"server_secret\")\n+                    .withClientToken(\"test_client\", TOKEN));\n+            sb.annotatedService(\"/introspect\", new MockOAuth2IntrospectionService()\n+                    .withAuthorizedClient(\"test_client\", \"client_secret\")\n+                    .withAuthorizedClient(\"test_server\", \"server_secret\")\n+                    .withClientToken(\"test_client\", TOKEN));\n+        }\n+    };\n+\n+    private final ServerRule resourceServerRule = new ServerRule(false) {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            final WebClient introspectClient = WebClient.of(authServerRule.httpUri());\n+            sb.service(\"/resource-read-write/\",\n+                       OAuth2TokenIntrospectionAuthorizer.builder(introspectClient, \"/introspect/token/\")\n+                                                         .realm(\"protected resource read-write\")\n+                                                         .accessTokenType(\"Bearer\")\n+                                                         .clientBasicAuthorization(() -> SERVER_CREDENTIALS)\n+                                                         .permittedScope(\"read\", \"write\")\n+                                                         .build().asAuthService(SERVICE));\n+            sb.service(\"/resource-read/\",\n+                       OAuth2TokenIntrospectionAuthorizer.builder(introspectClient, \"/introspect/token/\")\n+                                                         .realm(\"protected resource read\")\n+                                                         .accessTokenType(\"Bearer\")\n+                                                         .clientBasicAuthorization(() -> SERVER_CREDENTIALS)\n+                                                         .permittedScope(\"read\")\n+                                                         .build().asAuthService(SERVICE));\n+            sb.service(\"/resource-read-write-update/\",\n+                       OAuth2TokenIntrospectionAuthorizer.builder(introspectClient, \"/introspect/token/\")\n+                                                         .realm(\"protected resource read-write-update\")\n+                                                         .accessTokenType(\"Bearer\")\n+                                                         .clientBasicAuthorization(() -> SERVER_CREDENTIALS)\n+                                                         .permittedScope(\"read\", \"write\", \"update\")\n+                                                         .build().asAuthService(SERVICE));\n+        }\n+    };\n+\n+    @Test\n+    public void testOk() throws Exception {\n+        try (Server resourceServer = resourceServerRule.start()) {\n+\n+            final WebClient authClient = WebClient.of(authServerRule.httpUri());\n+            final OAuth2ClientCredentialsGrant grant = OAuth2ClientCredentialsGrant\n+                    .builder(authClient, \"/token/client/\")\n+                    .clientBasicAuthorization(() -> CLIENT_CREDENTIALS).build();\n+\n+            final WebClient client = WebClient.builder(resourceServerRule.httpUri())\n+                                              .decorator(OAuth2Client.newDecorator(grant))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3NDQyOQ==", "bodyText": "Good idea! Added this as withAuthorization to OAuth2AuthorizationGrant interface and supplied with the unit testing.", "url": "https://github.com/line/armeria/pull/2840#discussion_r457974429", "createdAt": "2020-07-21T09:49:20Z", "author": {"login": "max904-github"}, "path": "oauth2/src/test/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ClientCredentialsGrantTest.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.MockOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.MockOAuth2ClientCredentialsService;\n+import com.linecorp.armeria.common.auth.oauth2.MockOAuth2IntrospectionService;\n+import com.linecorp.armeria.server.AbstractHttpService;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.oauth2.OAuth2TokenIntrospectionAuthorizer;\n+import com.linecorp.armeria.testing.junit4.server.ServerRule;\n+\n+public class OAuth2ClientCredentialsGrantTest {\n+\n+    static final String CLIENT_CREDENTIALS = \"dGVzdF9jbGllbnQ6Y2xpZW50X3NlY3JldA==\"; //test_client:client_secret\n+    static final String SERVER_CREDENTIALS = \"dGVzdF9zZXJ2ZXI6c2VydmVyX3NlY3JldA==\"; //test_server:server_secret\n+\n+    static final MockOAuth2AccessToken TOKEN =\n+        MockOAuth2AccessToken.generate(\"test_client\", null, Duration.ofHours(3L),\n+                                       ImmutableMap.of(\"extension_field\", \"twenty-seven\"), \"read\", \"write\");\n+\n+    static final HttpService SERVICE = new AbstractHttpService() {\n+        @Override\n+        protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)\n+                throws Exception {\n+            return HttpResponse.of(HttpStatus.OK);\n+        }\n+    };\n+\n+    @Rule\n+    public ServerRule authServerRule = new ServerRule() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.annotatedService(\"/token\", new MockOAuth2ClientCredentialsService()\n+                    .withAuthorizedClient(\"test_client\", \"client_secret\")\n+                    .withAuthorizedClient(\"test_server\", \"server_secret\")\n+                    .withClientToken(\"test_client\", TOKEN));\n+            sb.annotatedService(\"/introspect\", new MockOAuth2IntrospectionService()\n+                    .withAuthorizedClient(\"test_client\", \"client_secret\")\n+                    .withAuthorizedClient(\"test_server\", \"server_secret\")\n+                    .withClientToken(\"test_client\", TOKEN));\n+        }\n+    };\n+\n+    private final ServerRule resourceServerRule = new ServerRule(false) {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            final WebClient introspectClient = WebClient.of(authServerRule.httpUri());\n+            sb.service(\"/resource-read-write/\",\n+                       OAuth2TokenIntrospectionAuthorizer.builder(introspectClient, \"/introspect/token/\")\n+                                                         .realm(\"protected resource read-write\")\n+                                                         .accessTokenType(\"Bearer\")\n+                                                         .clientBasicAuthorization(() -> SERVER_CREDENTIALS)\n+                                                         .permittedScope(\"read\", \"write\")\n+                                                         .build().asAuthService(SERVICE));\n+            sb.service(\"/resource-read/\",\n+                       OAuth2TokenIntrospectionAuthorizer.builder(introspectClient, \"/introspect/token/\")\n+                                                         .realm(\"protected resource read\")\n+                                                         .accessTokenType(\"Bearer\")\n+                                                         .clientBasicAuthorization(() -> SERVER_CREDENTIALS)\n+                                                         .permittedScope(\"read\")\n+                                                         .build().asAuthService(SERVICE));\n+            sb.service(\"/resource-read-write-update/\",\n+                       OAuth2TokenIntrospectionAuthorizer.builder(introspectClient, \"/introspect/token/\")\n+                                                         .realm(\"protected resource read-write-update\")\n+                                                         .accessTokenType(\"Bearer\")\n+                                                         .clientBasicAuthorization(() -> SERVER_CREDENTIALS)\n+                                                         .permittedScope(\"read\", \"write\", \"update\")\n+                                                         .build().asAuthService(SERVICE));\n+        }\n+    };\n+\n+    @Test\n+    public void testOk() throws Exception {\n+        try (Server resourceServer = resourceServerRule.start()) {\n+\n+            final WebClient authClient = WebClient.of(authServerRule.httpUri());\n+            final OAuth2ClientCredentialsGrant grant = OAuth2ClientCredentialsGrant\n+                    .builder(authClient, \"/token/client/\")\n+                    .clientBasicAuthorization(() -> CLIENT_CREDENTIALS).build();\n+\n+            final WebClient client = WebClient.builder(resourceServerRule.httpUri())\n+                                              .decorator(OAuth2Client.newDecorator(grant))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3MzM0MA=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjU4NTY5OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "isResolved": false, "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDoxMjo0M1rOGxti9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwOTozOTo0MVrOG4E4JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3OTYzNw==", "bodyText": "Question: Is there a special reason that we call join() here? Shouldn't we return CompletableFuture<AccessTokenCapsule>?\nIIUC, tokenRef could be set by refreshAccessTokenAsync(token).whenComplete(...)", "url": "https://github.com/line/armeria/pull/2840#discussion_r454779637", "createdAt": "2020-07-15T04:12:43Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessTokenAsync(\n+            @Nullable AccessTokenCapsule token);\n+\n+    /**\n+     * Obtains a new access token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule obtainAccessToken() {\n+        final AccessTokenCapsule token = obtainAccessTokenAsync(null).join();\n+        tokenRef.set(token); // reset the token reference\n+        if (tokenConsumer != null) {\n+            tokenConsumer.accept(token); // store token to an optional storage (e.g. secret store)\n+        }\n+        return token;\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response\n+     * asynchronously, otherwise, if no refresh token available, re-obtains a new access token from the token\n+     * end-point.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private CompletableFuture<AccessTokenCapsule> refreshAccessTokenAsync(AccessTokenCapsule token) {\n+        if (token.refreshToken() != null) {\n+            // try refreshing token if refresh token was previously provided\n+            return refreshRequest.make(token);\n+        }\n+        // try to re-obtain access token\n+        return obtainAccessTokenAsync(token);\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response, otherwise,\n+     * if no refresh token available, re-obtains a new access token from the token end-point.\n+     * If the refresh token request fails with {@link TokenRequestException}, tries to re-obtains a new access\n+     * token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule refreshAccessToken(Instant instant) {\n+        // after acquiring the lock, re-check if it's a valid token\n+        final AccessTokenCapsule token = tokenRef.get();\n+        if (token.isValid(instant)) {\n+            // simply return a valid token\n+            return token;\n+        }\n+        // otherwise, refresh it\n+        AccessTokenCapsule refreshedToken;\n+        try {\n+            refreshedToken = refreshAccessTokenAsync(token).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5NjM5Ng==", "bodyText": "Yes, there is a special reason for synchronizing the request execution here.\nIn order to deal with concurrency issues, all token obtain and refresh requests have to be executed serially by a dedicated serialExecutor, which was introduced based on the previous @trustin comment. So the obtaining or refreshing of the access token is indeed happens asynchronously by the serialExecutor, but anything that happens during the refresh or obtain have to be serialized.", "url": "https://github.com/line/armeria/pull/2840#discussion_r457996396", "createdAt": "2020-07-21T10:28:31Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessTokenAsync(\n+            @Nullable AccessTokenCapsule token);\n+\n+    /**\n+     * Obtains a new access token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule obtainAccessToken() {\n+        final AccessTokenCapsule token = obtainAccessTokenAsync(null).join();\n+        tokenRef.set(token); // reset the token reference\n+        if (tokenConsumer != null) {\n+            tokenConsumer.accept(token); // store token to an optional storage (e.g. secret store)\n+        }\n+        return token;\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response\n+     * asynchronously, otherwise, if no refresh token available, re-obtains a new access token from the token\n+     * end-point.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private CompletableFuture<AccessTokenCapsule> refreshAccessTokenAsync(AccessTokenCapsule token) {\n+        if (token.refreshToken() != null) {\n+            // try refreshing token if refresh token was previously provided\n+            return refreshRequest.make(token);\n+        }\n+        // try to re-obtain access token\n+        return obtainAccessTokenAsync(token);\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response, otherwise,\n+     * if no refresh token available, re-obtains a new access token from the token end-point.\n+     * If the refresh token request fails with {@link TokenRequestException}, tries to re-obtains a new access\n+     * token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule refreshAccessToken(Instant instant) {\n+        // after acquiring the lock, re-check if it's a valid token\n+        final AccessTokenCapsule token = tokenRef.get();\n+        if (token.isValid(instant)) {\n+            // simply return a valid token\n+            return token;\n+        }\n+        // otherwise, refresh it\n+        AccessTokenCapsule refreshedToken;\n+        try {\n+            refreshedToken = refreshAccessTokenAsync(token).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3OTYzNw=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5NjYzNA==", "bodyText": "I've added a special test that tests the concurrency.", "url": "https://github.com/line/armeria/pull/2840#discussion_r457996634", "createdAt": "2020-07-21T10:29:00Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessTokenAsync(\n+            @Nullable AccessTokenCapsule token);\n+\n+    /**\n+     * Obtains a new access token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule obtainAccessToken() {\n+        final AccessTokenCapsule token = obtainAccessTokenAsync(null).join();\n+        tokenRef.set(token); // reset the token reference\n+        if (tokenConsumer != null) {\n+            tokenConsumer.accept(token); // store token to an optional storage (e.g. secret store)\n+        }\n+        return token;\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response\n+     * asynchronously, otherwise, if no refresh token available, re-obtains a new access token from the token\n+     * end-point.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private CompletableFuture<AccessTokenCapsule> refreshAccessTokenAsync(AccessTokenCapsule token) {\n+        if (token.refreshToken() != null) {\n+            // try refreshing token if refresh token was previously provided\n+            return refreshRequest.make(token);\n+        }\n+        // try to re-obtain access token\n+        return obtainAccessTokenAsync(token);\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response, otherwise,\n+     * if no refresh token available, re-obtains a new access token from the token end-point.\n+     * If the refresh token request fails with {@link TokenRequestException}, tries to re-obtains a new access\n+     * token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule refreshAccessToken(Instant instant) {\n+        // after acquiring the lock, re-check if it's a valid token\n+        final AccessTokenCapsule token = tokenRef.get();\n+        if (token.isValid(instant)) {\n+            // simply return a valid token\n+            return token;\n+        }\n+        // otherwise, refresh it\n+        AccessTokenCapsule refreshedToken;\n+        try {\n+            refreshedToken = refreshAccessTokenAsync(token).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3OTYzNw=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNTUyOA==", "bodyText": "I think we can compose asynchronous functions using CompletableFuture.thenCompose and process it sequentially.\nCompletableFuture<OAuth2AccessToken> oAuth2AccessToken =\n    refreshAccessTokenAsync(token).thenCompose(this::obtainAccessTokenAsync);", "url": "https://github.com/line/armeria/pull/2840#discussion_r459205528", "createdAt": "2020-07-23T04:14:20Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessTokenAsync(\n+            @Nullable AccessTokenCapsule token);\n+\n+    /**\n+     * Obtains a new access token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule obtainAccessToken() {\n+        final AccessTokenCapsule token = obtainAccessTokenAsync(null).join();\n+        tokenRef.set(token); // reset the token reference\n+        if (tokenConsumer != null) {\n+            tokenConsumer.accept(token); // store token to an optional storage (e.g. secret store)\n+        }\n+        return token;\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response\n+     * asynchronously, otherwise, if no refresh token available, re-obtains a new access token from the token\n+     * end-point.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private CompletableFuture<AccessTokenCapsule> refreshAccessTokenAsync(AccessTokenCapsule token) {\n+        if (token.refreshToken() != null) {\n+            // try refreshing token if refresh token was previously provided\n+            return refreshRequest.make(token);\n+        }\n+        // try to re-obtain access token\n+        return obtainAccessTokenAsync(token);\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response, otherwise,\n+     * if no refresh token available, re-obtains a new access token from the token end-point.\n+     * If the refresh token request fails with {@link TokenRequestException}, tries to re-obtains a new access\n+     * token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule refreshAccessToken(Instant instant) {\n+        // after acquiring the lock, re-check if it's a valid token\n+        final AccessTokenCapsule token = tokenRef.get();\n+        if (token.isValid(instant)) {\n+            // simply return a valid token\n+            return token;\n+        }\n+        // otherwise, refresh it\n+        AccessTokenCapsule refreshedToken;\n+        try {\n+            refreshedToken = refreshAccessTokenAsync(token).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3OTYzNw=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI4OTM5OA==", "bodyText": "Sorry, I might have confused you with my explanation. This is roughly how it was implemented earlier, but this may cause concurrency issues obtaining or refreshing access token. The problem is the following: getAccessToken() method should be done asynchronously, but every such call has to be done sequentially in order to avoid concurrency issues accessing the OAuth 2 endpoint (the client may only obtain access token once and refresh the token when the time comes). As a result, I've introduced single-thread executor that can serialize asynchronous access token requests.\nImagine, there are two client requests sent to the protected resource simultaneously. Each will trigger getAccessToken() executed concurrently. Now, since the relevant chunks of getAccessToken() will be executed serially by the executor, the first request will obtain the access token, while the second request will re-use it and will not re-obtain the access token.\nI've created OAuth2ClientCredentialsGrantTest#testConcurrent() to test such concurrent use case.", "url": "https://github.com/line/armeria/pull/2840#discussion_r459289398", "createdAt": "2020-07-23T08:25:15Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessTokenAsync(\n+            @Nullable AccessTokenCapsule token);\n+\n+    /**\n+     * Obtains a new access token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule obtainAccessToken() {\n+        final AccessTokenCapsule token = obtainAccessTokenAsync(null).join();\n+        tokenRef.set(token); // reset the token reference\n+        if (tokenConsumer != null) {\n+            tokenConsumer.accept(token); // store token to an optional storage (e.g. secret store)\n+        }\n+        return token;\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response\n+     * asynchronously, otherwise, if no refresh token available, re-obtains a new access token from the token\n+     * end-point.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private CompletableFuture<AccessTokenCapsule> refreshAccessTokenAsync(AccessTokenCapsule token) {\n+        if (token.refreshToken() != null) {\n+            // try refreshing token if refresh token was previously provided\n+            return refreshRequest.make(token);\n+        }\n+        // try to re-obtain access token\n+        return obtainAccessTokenAsync(token);\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response, otherwise,\n+     * if no refresh token available, re-obtains a new access token from the token end-point.\n+     * If the refresh token request fails with {@link TokenRequestException}, tries to re-obtains a new access\n+     * token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule refreshAccessToken(Instant instant) {\n+        // after acquiring the lock, re-check if it's a valid token\n+        final AccessTokenCapsule token = tokenRef.get();\n+        if (token.isValid(instant)) {\n+            // simply return a valid token\n+            return token;\n+        }\n+        // otherwise, refresh it\n+        AccessTokenCapsule refreshedToken;\n+        try {\n+            refreshedToken = refreshAccessTokenAsync(token).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3OTYzNw=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2NTExNw==", "bodyText": "I see, thanks for the kind explanation. Let me take a look OAuth2ClientCredentialsGrantTest#testConcurrent(). \ud83d\ude00", "url": "https://github.com/line/armeria/pull/2840#discussion_r459365117", "createdAt": "2020-07-23T10:50:35Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessTokenAsync(\n+            @Nullable AccessTokenCapsule token);\n+\n+    /**\n+     * Obtains a new access token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule obtainAccessToken() {\n+        final AccessTokenCapsule token = obtainAccessTokenAsync(null).join();\n+        tokenRef.set(token); // reset the token reference\n+        if (tokenConsumer != null) {\n+            tokenConsumer.accept(token); // store token to an optional storage (e.g. secret store)\n+        }\n+        return token;\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response\n+     * asynchronously, otherwise, if no refresh token available, re-obtains a new access token from the token\n+     * end-point.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private CompletableFuture<AccessTokenCapsule> refreshAccessTokenAsync(AccessTokenCapsule token) {\n+        if (token.refreshToken() != null) {\n+            // try refreshing token if refresh token was previously provided\n+            return refreshRequest.make(token);\n+        }\n+        // try to re-obtain access token\n+        return obtainAccessTokenAsync(token);\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response, otherwise,\n+     * if no refresh token available, re-obtains a new access token from the token end-point.\n+     * If the refresh token request fails with {@link TokenRequestException}, tries to re-obtains a new access\n+     * token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule refreshAccessToken(Instant instant) {\n+        // after acquiring the lock, re-check if it's a valid token\n+        final AccessTokenCapsule token = tokenRef.get();\n+        if (token.isValid(instant)) {\n+            // simply return a valid token\n+            return token;\n+        }\n+        // otherwise, refresh it\n+        AccessTokenCapsule refreshedToken;\n+        try {\n+            refreshedToken = refreshAccessTokenAsync(token).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3OTYzNw=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQzMDY2MQ==", "bodyText": "If you consider that the two clients are sending getAccessToken() concurrently, how about using an async Caffeine cache?\nAsyncCache<GrantedOAuth2AccessToken, CompletableFuture<GrantedOAuth2AccessToken>>\n            accessTokenCache = Caffeine.newBuilder().maximumSize(1000 /* need sensible default */)\n                                       .buildAsync();\n\nCompletableFuture<GrantedOAuth2AccessToken> accessTokenFuture = \n        accessTokenCache\n            .asMap()\n            .computeIfAbsent(accessToken, key -> {\n                 // Only one thread will be executed to obtain access token\n                 // Note that we should not put `RequestContextAwareFuture` to the cache.\n                 // Need to peel `GrantedOAuth2AccessToken` \n                 // and save it with `CompletableFuture.completeValue(...)`\n                 return obtainAccessTokenAsync(key);\n            });\nI hope this workaround will solve the executor problem and concurrent issue.", "url": "https://github.com/line/armeria/pull/2840#discussion_r459430661", "createdAt": "2020-07-23T13:01:53Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessTokenAsync(\n+            @Nullable AccessTokenCapsule token);\n+\n+    /**\n+     * Obtains a new access token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule obtainAccessToken() {\n+        final AccessTokenCapsule token = obtainAccessTokenAsync(null).join();\n+        tokenRef.set(token); // reset the token reference\n+        if (tokenConsumer != null) {\n+            tokenConsumer.accept(token); // store token to an optional storage (e.g. secret store)\n+        }\n+        return token;\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response\n+     * asynchronously, otherwise, if no refresh token available, re-obtains a new access token from the token\n+     * end-point.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private CompletableFuture<AccessTokenCapsule> refreshAccessTokenAsync(AccessTokenCapsule token) {\n+        if (token.refreshToken() != null) {\n+            // try refreshing token if refresh token was previously provided\n+            return refreshRequest.make(token);\n+        }\n+        // try to re-obtain access token\n+        return obtainAccessTokenAsync(token);\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response, otherwise,\n+     * if no refresh token available, re-obtains a new access token from the token end-point.\n+     * If the refresh token request fails with {@link TokenRequestException}, tries to re-obtains a new access\n+     * token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule refreshAccessToken(Instant instant) {\n+        // after acquiring the lock, re-check if it's a valid token\n+        final AccessTokenCapsule token = tokenRef.get();\n+        if (token.isValid(instant)) {\n+            // simply return a valid token\n+            return token;\n+        }\n+        // otherwise, refresh it\n+        AccessTokenCapsule refreshedToken;\n+        try {\n+            refreshedToken = refreshAccessTokenAsync(token).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3OTYzNw=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5Mjg4Nw==", "bodyText": "Looked at ConcurrentMap#computeIfAbsent(). Here is its code:\n    default V computeIfAbsent(K key,\n            Function<? super K, ? extends V> mappingFunction) {\n        Objects.requireNonNull(mappingFunction);\n        V oldValue, newValue;\n        return ((oldValue = get(key)) == null\n                && (newValue = mappingFunction.apply(key)) != null\n                && (oldValue = putIfAbsent(key, newValue)) == null)\n            ? newValue\n            : oldValue;\n    }\n\nIt does not actually guaranty that the mappingFunction (obtainAccessTokenAsync) will be executed only once, which we need in this case. Instead, it guarantees that the new value will be put only once.\nBesides, even for a regular token read a hash lookup will take place, instead of simply reading a value. Therefore, we would add an additional cost to a frequent operation (of reading token) in sake of very rare operation (of obtaining new or refreshing token).\nIn any case, thanks for a suggestion, this was worth looking at.", "url": "https://github.com/line/armeria/pull/2840#discussion_r459492887", "createdAt": "2020-07-23T14:29:24Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessTokenAsync(\n+            @Nullable AccessTokenCapsule token);\n+\n+    /**\n+     * Obtains a new access token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule obtainAccessToken() {\n+        final AccessTokenCapsule token = obtainAccessTokenAsync(null).join();\n+        tokenRef.set(token); // reset the token reference\n+        if (tokenConsumer != null) {\n+            tokenConsumer.accept(token); // store token to an optional storage (e.g. secret store)\n+        }\n+        return token;\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response\n+     * asynchronously, otherwise, if no refresh token available, re-obtains a new access token from the token\n+     * end-point.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private CompletableFuture<AccessTokenCapsule> refreshAccessTokenAsync(AccessTokenCapsule token) {\n+        if (token.refreshToken() != null) {\n+            // try refreshing token if refresh token was previously provided\n+            return refreshRequest.make(token);\n+        }\n+        // try to re-obtain access token\n+        return obtainAccessTokenAsync(token);\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response, otherwise,\n+     * if no refresh token available, re-obtains a new access token from the token end-point.\n+     * If the refresh token request fails with {@link TokenRequestException}, tries to re-obtains a new access\n+     * token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule refreshAccessToken(Instant instant) {\n+        // after acquiring the lock, re-check if it's a valid token\n+        final AccessTokenCapsule token = tokenRef.get();\n+        if (token.isValid(instant)) {\n+            // simply return a valid token\n+            return token;\n+        }\n+        // otherwise, refresh it\n+        AccessTokenCapsule refreshedToken;\n+        try {\n+            refreshedToken = refreshAccessTokenAsync(token).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3OTYzNw=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxNDM3NA==", "bodyText": "It does not actually guaranty that the mappingFunction (obtainAccessTokenAsync) will be executed only once, which we need in this case. Instead, it guarantees that the new value will be put only once.\n\nYes, ConcurrentMap does not guarantee to execute only once but Caffeine cache uses ConcurrentHashMap internally.\nConcurrentHashMap override the implementation of ConcurrentMap.\n    public V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction) {\n               ...\n               Node<K,V> r = new ReservationNode<K,V>();\n                synchronized (r) {\n                    if (casTabAt(tab, i, null, r)) {\n                        binCount = 1;\n                        Node<K,V> node = null;\n                        try {\n                            if ((val = mappingFunction.apply(key)) != null)\n                                node = new Node<K,V>(h, key, val);\n                        } finally {\n                            setTabAt(tab, i, node);\n                        }\n                    }\n                }\n    }\nhttps://github.com/openjdk/jdk/blob/e427697e55c0d7b9089ba1f6ed24d4a313e9315b/src/java.base/share/classes/java/util/concurrent/ConcurrentHashMap.java#L1703-L1713\nAfter looking at Caffeine cache API, I realized that we don't need to call asMap()\nIt could be used like:\nAsyncCache<GrantedOAuth2AccessToken, GrantedOAuth2AccessToken> cache = ...\nCompletableFuture<GrantedOAuth2AccessToken> future = cache.get(token, (key, executor) -> {\n    // internally call ConcurrentHashMap.computeIfAbsent(...)\n    return obtainAccessTokenAsync(key);\n});", "url": "https://github.com/line/armeria/pull/2840#discussion_r459814374", "createdAt": "2020-07-24T01:37:39Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessTokenAsync(\n+            @Nullable AccessTokenCapsule token);\n+\n+    /**\n+     * Obtains a new access token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule obtainAccessToken() {\n+        final AccessTokenCapsule token = obtainAccessTokenAsync(null).join();\n+        tokenRef.set(token); // reset the token reference\n+        if (tokenConsumer != null) {\n+            tokenConsumer.accept(token); // store token to an optional storage (e.g. secret store)\n+        }\n+        return token;\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response\n+     * asynchronously, otherwise, if no refresh token available, re-obtains a new access token from the token\n+     * end-point.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private CompletableFuture<AccessTokenCapsule> refreshAccessTokenAsync(AccessTokenCapsule token) {\n+        if (token.refreshToken() != null) {\n+            // try refreshing token if refresh token was previously provided\n+            return refreshRequest.make(token);\n+        }\n+        // try to re-obtain access token\n+        return obtainAccessTokenAsync(token);\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response, otherwise,\n+     * if no refresh token available, re-obtains a new access token from the token end-point.\n+     * If the refresh token request fails with {@link TokenRequestException}, tries to re-obtains a new access\n+     * token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule refreshAccessToken(Instant instant) {\n+        // after acquiring the lock, re-check if it's a valid token\n+        final AccessTokenCapsule token = tokenRef.get();\n+        if (token.isValid(instant)) {\n+            // simply return a valid token\n+            return token;\n+        }\n+        // otherwise, refresh it\n+        AccessTokenCapsule refreshedToken;\n+        try {\n+            refreshedToken = refreshAccessTokenAsync(token).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3OTYzNw=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc3NTY2Ng==", "bodyText": "Unfortunately, the AsyncCache does not use java.util.concurrent.ConcurrentHashMap#computeIfAbsent directly. Instead, it has its own com.github.benmanes.caffeine.cache.LocalCache#computeIfAbsent API and implementations like com.github.benmanes.caffeine.cache.BoundedLocalCache#computeIfAbsent. I did not perform and deep code analysis or conducted any hands-on testing, but as far as I can see, it only guarantees a consistency of the operation on LocalCache<K, CompletableFuture<V>>. Although the future instances will be obtained serially, it does not prevent two mappingFunctions to execute simultaneously, at least I don't see such mechanism. If you have better insight, please explain me how it's achieved.\nPlease also comment on the why with this Cache approach \"we would add an additional cost to a frequent operation (of reading token) in sake of very rare operation (of obtaining new or refreshing token)\". Cache lookup will have to be executed for each outgoing request vs simple AtomicReference#get(). For thousands of requests it could be significant cost.", "url": "https://github.com/line/armeria/pull/2840#discussion_r460775666", "createdAt": "2020-07-27T09:50:30Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessTokenAsync(\n+            @Nullable AccessTokenCapsule token);\n+\n+    /**\n+     * Obtains a new access token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule obtainAccessToken() {\n+        final AccessTokenCapsule token = obtainAccessTokenAsync(null).join();\n+        tokenRef.set(token); // reset the token reference\n+        if (tokenConsumer != null) {\n+            tokenConsumer.accept(token); // store token to an optional storage (e.g. secret store)\n+        }\n+        return token;\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response\n+     * asynchronously, otherwise, if no refresh token available, re-obtains a new access token from the token\n+     * end-point.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private CompletableFuture<AccessTokenCapsule> refreshAccessTokenAsync(AccessTokenCapsule token) {\n+        if (token.refreshToken() != null) {\n+            // try refreshing token if refresh token was previously provided\n+            return refreshRequest.make(token);\n+        }\n+        // try to re-obtain access token\n+        return obtainAccessTokenAsync(token);\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response, otherwise,\n+     * if no refresh token available, re-obtains a new access token from the token end-point.\n+     * If the refresh token request fails with {@link TokenRequestException}, tries to re-obtains a new access\n+     * token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule refreshAccessToken(Instant instant) {\n+        // after acquiring the lock, re-check if it's a valid token\n+        final AccessTokenCapsule token = tokenRef.get();\n+        if (token.isValid(instant)) {\n+            // simply return a valid token\n+            return token;\n+        }\n+        // otherwise, refresh it\n+        AccessTokenCapsule refreshedToken;\n+        try {\n+            refreshedToken = refreshAccessTokenAsync(token).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3OTYzNw=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzNDU1MQ==", "bodyText": "Unfortunately, the AsyncCache does not use java.util.concurrent.ConcurrentHashMap#computeIfAbsent directly. Instead, it has its own com.github.benmanes.caffeine.cache.LocalCache#computeIfAbsent API and implementations like com.github.benmanes.caffeine.cache.BoundedLocalCache#computeIfAbsent.\n\nBoundedLocalCache keeps its data on ConcurrentHashMap. You can easily check it by breaking point on the mappingFunction.\nhttps://github.com/ben-manes/caffeine/blob/master/caffeine/src/main/java/com/github/benmanes/caffeine/cache/BoundedLocalCache.java#L213\n\nCache approach \"we would add an additional cost to a frequent operation (of reading token) in sake of very rare operation (of obtaining new or refreshing token)\".\n\nThe reason why I suggested to use cache is:\n\nWe can remove the serial executor. It is hard to tune.\n\nIf AbstractOAuth2AuthorizationGrant has a static singleton executor, then it could have trouble with the scalability problem. Because the submitted tasks are blocking IO.\nIf AbstractOAuth2AuthorizationGrant has its own executor, users might not handle many resource owners\n\n\nArmeria is a non-blocking microservice framework. If it is possible, we don't have to block IO.\nThe verification logic on tokenRef is pretty difficult for me. I think we can hide the logic.\n\n\nCache lookup will have to be executed for each outgoing request vs simple AtomicReference#get(). For thousands of requests it could be significant cost.\n\nYes, that's true. Hash lookup operation is expensive that AtomicReference. However, I think the context switching cost is more expensive than them.", "url": "https://github.com/line/armeria/pull/2840#discussion_r460934551", "createdAt": "2020-07-27T14:32:14Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessTokenAsync(\n+            @Nullable AccessTokenCapsule token);\n+\n+    /**\n+     * Obtains a new access token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule obtainAccessToken() {\n+        final AccessTokenCapsule token = obtainAccessTokenAsync(null).join();\n+        tokenRef.set(token); // reset the token reference\n+        if (tokenConsumer != null) {\n+            tokenConsumer.accept(token); // store token to an optional storage (e.g. secret store)\n+        }\n+        return token;\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response\n+     * asynchronously, otherwise, if no refresh token available, re-obtains a new access token from the token\n+     * end-point.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private CompletableFuture<AccessTokenCapsule> refreshAccessTokenAsync(AccessTokenCapsule token) {\n+        if (token.refreshToken() != null) {\n+            // try refreshing token if refresh token was previously provided\n+            return refreshRequest.make(token);\n+        }\n+        // try to re-obtain access token\n+        return obtainAccessTokenAsync(token);\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response, otherwise,\n+     * if no refresh token available, re-obtains a new access token from the token end-point.\n+     * If the refresh token request fails with {@link TokenRequestException}, tries to re-obtains a new access\n+     * token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule refreshAccessToken(Instant instant) {\n+        // after acquiring the lock, re-check if it's a valid token\n+        final AccessTokenCapsule token = tokenRef.get();\n+        if (token.isValid(instant)) {\n+            // simply return a valid token\n+            return token;\n+        }\n+        // otherwise, refresh it\n+        AccessTokenCapsule refreshedToken;\n+        try {\n+            refreshedToken = refreshAccessTokenAsync(token).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3OTYzNw=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2NDgxNg==", "bodyText": "Just to help clarify (regardless of your final decisions), Caffeine does perform the Map.compute calls atomically. In the case of computeIfAbsent it is actually a fast-path ConcurrentHashMap#get followed by a ConcurrentHashMap#compute if absent. This allows us to optimistically return a valid value cheaply, whereas ConcurrentHashMap#computeIfAbsent pessimistically locks which limits read concurrency. We fallback to a compute in order to handle cases like expired entries still in the map and similar caching details.\nThe AsyncCache will perform the map operations atomically, but only establishes the mapping for the future. The future is therefore independent, so atomically established and asynchronously completed. If the future fails (exceptionally or returns a null result), then a whenComplete handler will remove it from the cache.\nThe simplest way to think about Caffeine is as ConcurrentHashMap with extra features, which tries as much as possible to not deviate. There are very small differences, primarily that our #clear cannot block on unestablished mappings hidden by the iterator, whereas CHM does by traversing its internal table. But from atomicity standpoint we try hard to be correct while also performant. A Cache ~= CHM, AsyncCache ~= CHM<K, CF<V>>, and the asMap views let you use the collections api rather than a cache-oriented one.\nThe JavaDoc can always be improved, but does try to convey this atomicity. If you have any suggestions to clarify it, please let me know.\nAs an aside, I often use Failsafe for failure handling, retries, etc. You could avoid the join by using an async fallback so that the returned future encapsulates this error handling logic. That avoids surprises like starving FJP when its workers are all blocked waiting on tasks queued for execution. I am assuming that you'd prefer returning an async result rather than a synchronous API.\nvar fallback = Fallback.ofStage(this::obtainAccessToken)\n    .handleIf(e -> Exceptions.peel(e) instanceof TokenRequestException);\nreturn Failsafe.with(fallback).getAsync(() -> refreshAccessTokenAsync(token));", "url": "https://github.com/line/armeria/pull/2840#discussion_r461264816", "createdAt": "2020-07-28T01:33:20Z", "author": {"login": "ben-manes"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessTokenAsync(\n+            @Nullable AccessTokenCapsule token);\n+\n+    /**\n+     * Obtains a new access token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule obtainAccessToken() {\n+        final AccessTokenCapsule token = obtainAccessTokenAsync(null).join();\n+        tokenRef.set(token); // reset the token reference\n+        if (tokenConsumer != null) {\n+            tokenConsumer.accept(token); // store token to an optional storage (e.g. secret store)\n+        }\n+        return token;\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response\n+     * asynchronously, otherwise, if no refresh token available, re-obtains a new access token from the token\n+     * end-point.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private CompletableFuture<AccessTokenCapsule> refreshAccessTokenAsync(AccessTokenCapsule token) {\n+        if (token.refreshToken() != null) {\n+            // try refreshing token if refresh token was previously provided\n+            return refreshRequest.make(token);\n+        }\n+        // try to re-obtain access token\n+        return obtainAccessTokenAsync(token);\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response, otherwise,\n+     * if no refresh token available, re-obtains a new access token from the token end-point.\n+     * If the refresh token request fails with {@link TokenRequestException}, tries to re-obtains a new access\n+     * token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule refreshAccessToken(Instant instant) {\n+        // after acquiring the lock, re-check if it's a valid token\n+        final AccessTokenCapsule token = tokenRef.get();\n+        if (token.isValid(instant)) {\n+            // simply return a valid token\n+            return token;\n+        }\n+        // otherwise, refresh it\n+        AccessTokenCapsule refreshedToken;\n+        try {\n+            refreshedToken = refreshAccessTokenAsync(token).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3OTYzNw=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxMzkzMg==", "bodyText": "Thanks a lot for chiming in, @ben-manes!\n+1 for going full-async rather than using a dedicated executor.", "url": "https://github.com/line/armeria/pull/2840#discussion_r461313932", "createdAt": "2020-07-28T04:42:02Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessTokenAsync(\n+            @Nullable AccessTokenCapsule token);\n+\n+    /**\n+     * Obtains a new access token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule obtainAccessToken() {\n+        final AccessTokenCapsule token = obtainAccessTokenAsync(null).join();\n+        tokenRef.set(token); // reset the token reference\n+        if (tokenConsumer != null) {\n+            tokenConsumer.accept(token); // store token to an optional storage (e.g. secret store)\n+        }\n+        return token;\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response\n+     * asynchronously, otherwise, if no refresh token available, re-obtains a new access token from the token\n+     * end-point.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private CompletableFuture<AccessTokenCapsule> refreshAccessTokenAsync(AccessTokenCapsule token) {\n+        if (token.refreshToken() != null) {\n+            // try refreshing token if refresh token was previously provided\n+            return refreshRequest.make(token);\n+        }\n+        // try to re-obtain access token\n+        return obtainAccessTokenAsync(token);\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response, otherwise,\n+     * if no refresh token available, re-obtains a new access token from the token end-point.\n+     * If the refresh token request fails with {@link TokenRequestException}, tries to re-obtains a new access\n+     * token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule refreshAccessToken(Instant instant) {\n+        // after acquiring the lock, re-check if it's a valid token\n+        final AccessTokenCapsule token = tokenRef.get();\n+        if (token.isValid(instant)) {\n+            // simply return a valid token\n+            return token;\n+        }\n+        // otherwise, refresh it\n+        AccessTokenCapsule refreshedToken;\n+        try {\n+            refreshedToken = refreshAccessTokenAsync(token).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3OTYzNw=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ1MzM0OQ==", "bodyText": "Thank you @ben-manes for clarification!\nLet me comment on some points...\n\n\nThe AsyncCache will perform the map operations atomically, but only establishes the mapping for the future. The future is therefore independent, so atomically established and asynchronously completed.\n\n\nThis is actually the key part of the clarification in our context. And this is how I interpreted the AsyncCache code.\nIn our case the mapping function have to be executed serially, that's the only way to guarantee that Obtain or Refresh operation executed only once.\n\n\nArmeria is a non-blocking microservice framework. If it is possible, we don't have to block IO.\n\n\nI think I can understand that. That's why Obtain/Refresh token operation executed asynchronously by a different (executor) thread.\n\n\nThe verification logic on tokenRef is pretty difficult for me. I think we can hide the logic.\n\n\nApparently not behind the AsyncCache, as explained above.\nLet me summarize some concrete requirements so you can advise better:\n\ngetAccessToken() shall be asynchronous;\ngetAccessToken() shall be extremely cheap when the access token already issued;\nWhen the token not yet available or expired, Obtain or Refresh access token shall take place only once - no duplicate requests should be issued towards the OAuth 2 endpoint;\n\nI'm not saying the solution with the Executor is perfect, but at the moment I only see Queue or Executor approach can reasonably facilitate the three requirements above.\nIf you just don't like seeing such complexity inside the Grant, this can easily be achieved by extracting it into some more generic utility class.\n\n\nYes, that's true. Hash lookup operation is expensive that AtomicReference. However, I think the context switching cost is more expensive than them.\n\n\nNot sure I understand where the context switching takes place (as oppose to the hash lookup)? In regular case AtomicReference#get() is all we are going to have. Once in a while, on a rare occasion (either when there is no access token issued yet or when the access token to be renewed) the processing will take its turn through the serial executor. This minimizes the negative impact comparing to frequent hash lookup taking place for each request.\nFor the Obtain/Refresh operations context switching is unavoidable and must be facilitated by a different thread to avoid blocking the event loop. These operations may take significant time to complete (OAuth 2 endpoint will perform authentication, authorization, security artifact generation and provisioning, etc). Some operations may take much longer and involve continuous polling of the OAuth 2 token endpoint (e.g. Device Authorization Flow, especially authorization_pending and slow_down type of responses - this one I was planning to add next as the code already developed).", "url": "https://github.com/line/armeria/pull/2840#discussion_r461453349", "createdAt": "2020-07-28T09:39:41Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessTokenAsync(\n+            @Nullable AccessTokenCapsule token);\n+\n+    /**\n+     * Obtains a new access token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule obtainAccessToken() {\n+        final AccessTokenCapsule token = obtainAccessTokenAsync(null).join();\n+        tokenRef.set(token); // reset the token reference\n+        if (tokenConsumer != null) {\n+            tokenConsumer.accept(token); // store token to an optional storage (e.g. secret store)\n+        }\n+        return token;\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response\n+     * asynchronously, otherwise, if no refresh token available, re-obtains a new access token from the token\n+     * end-point.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private CompletableFuture<AccessTokenCapsule> refreshAccessTokenAsync(AccessTokenCapsule token) {\n+        if (token.refreshToken() != null) {\n+            // try refreshing token if refresh token was previously provided\n+            return refreshRequest.make(token);\n+        }\n+        // try to re-obtain access token\n+        return obtainAccessTokenAsync(token);\n+    }\n+\n+    /**\n+     * Refreshes access token using refresh token provided with the previous access token response, otherwise,\n+     * if no refresh token available, re-obtains a new access token from the token end-point.\n+     * If the refresh token request fails with {@link TokenRequestException}, tries to re-obtains a new access\n+     * token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule refreshAccessToken(Instant instant) {\n+        // after acquiring the lock, re-check if it's a valid token\n+        final AccessTokenCapsule token = tokenRef.get();\n+        if (token.isValid(instant)) {\n+            // simply return a valid token\n+            return token;\n+        }\n+        // otherwise, refresh it\n+        AccessTokenCapsule refreshedToken;\n+        try {\n+            refreshedToken = refreshAccessTokenAsync(token).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3OTYzNw=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjU4ODkxOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDoxNDozOFrOGxtkvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDozMjo0NlrOG2NX8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MDA5NA==", "bodyText": "Do we have to create a new ExecutorService for every request? I think this might cause GC pressure in the high traffic. \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2840#discussion_r454780094", "createdAt": "2020-07-15T04:14:38Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MTI5NQ==", "bodyText": "I think expires is not that short. So RefreshAccessTokenRequest might not be used for short live requests.", "url": "https://github.com/line/armeria/pull/2840#discussion_r454781295", "createdAt": "2020-07-15T04:19:33Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MDA5NA=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAwNjE4NQ==", "bodyText": "There will be a dedicated instance created per Grant. Typically there should be only few Grants created ever - it's a resource that corresponds to a given OAuth 2.0 authorization endpoint. Do you think there is still a risk?\nDo you mean refreshBefore? RefreshAccessTokenRequest is connected to token expiration period and determined by the OAuth 2 authorization endpoint. This validity period of the token is large enough and typically expressed in hours or days. There is not much sense to issue token just for a few seconds. Therefore, even default 1 minute to refresh before its expiry should be good enough for most of the cases. It can also be customized with the builder.\nAlso, the Grant lifespan should be independent from any client resource request.", "url": "https://github.com/line/armeria/pull/2840#discussion_r458006185", "createdAt": "2020-07-21T10:48:20Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MDA5NA=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwMzM0OA==", "bodyText": "There will be a dedicated instance created per Grant. Typically there should be only few Grants created ever - it's a resource that corresponds to a given OAuth 2.0 authorization endpoint. Do you think there is still a risk?\n\nFrom the perspective of OAuth2ClientCredentialsGrant, that is true. Users do not need to create many OAuth2ClientCredentialsGrants.\nBut OAuth2ResourceOwnerPasswordCredentialsGrant also inherits AbstractOAuth2AuthorizationGrant too. What if users want to handle various resource owners?\nIIUC, based on the current implementation, they have to create OAuth2ResourceOwnerPasswordCredentialsGrant for every resource owner.", "url": "https://github.com/line/armeria/pull/2840#discussion_r459203348", "createdAt": "2020-07-23T04:02:57Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MDA5NA=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI5Mjk3MQ==", "bodyText": "Do you mean some multi-tenant use case, where the client serves multiple users? You are right, this will cause each Grant instance to have a dedicated single-thread executor. How do you suggest to make sharing of such thread/executor efficient and safe? I do not like an idea of injecting an external executor or a thread into the Grant. Should I simply make it static?", "url": "https://github.com/line/armeria/pull/2840#discussion_r459292971", "createdAt": "2020-07-23T08:31:35Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MDA5NA=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5NTQwOQ==", "bodyText": "Another alternative to static could be to wrap the Executor with some custom class (e.g. OAuth2AuthorizationGrantExecutor) and let it be injected via the GrantBuilder.", "url": "https://github.com/line/armeria/pull/2840#discussion_r459495409", "createdAt": "2020-07-23T14:32:46Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MDA5NA=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjU5OTUzOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDoyMDo0NlrOGxtqxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNDoxMTo1OVrOG67H2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MTYzOQ==", "bodyText": "Ditto, Couldn't we return CompletableFuture<AccessTokenCapsule>?", "url": "https://github.com/line/armeria/pull/2840#discussion_r454781639", "createdAt": "2020-07-15T04:20:46Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessTokenAsync(\n+            @Nullable AccessTokenCapsule token);\n+\n+    /**\n+     * Obtains a new access token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule obtainAccessToken() {\n+        final AccessTokenCapsule token = obtainAccessTokenAsync(null).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAwNjYxNQ==", "bodyText": "See my previous comment on the subject...\nYes, there is a special reason for synchronizing the request execution here.\nIn order to deal with concurrency issues, all token obtain and refresh requests have to be executed serially by a dedicated serialExecutor, which was introduced based on the previous @trustin comment. So the obtaining or refreshing of the access token is indeed happens asynchronously by the serialExecutor, but anything that happens during the refresh or obtain have to be serialized.", "url": "https://github.com/line/armeria/pull/2840#discussion_r458006615", "createdAt": "2020-07-21T10:49:17Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessTokenAsync(\n+            @Nullable AccessTokenCapsule token);\n+\n+    /**\n+     * Obtains a new access token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule obtainAccessToken() {\n+        final AccessTokenCapsule token = obtainAccessTokenAsync(null).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MTYzOQ=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0ODM5MA==", "bodyText": "Perhaps we could ensure serial execution without using a dedicated executor? For example, we could write some arbiter class that keeps the CompletableFuture of the previous task and add a callback to it to run the next task?", "url": "https://github.com/line/armeria/pull/2840#discussion_r462048390", "createdAt": "2020-07-29T05:33:30Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessTokenAsync(\n+            @Nullable AccessTokenCapsule token);\n+\n+    /**\n+     * Obtains a new access token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule obtainAccessToken() {\n+        final AccessTokenCapsule token = obtainAccessTokenAsync(null).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MTYzOQ=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEwNTc3Mw==", "bodyText": "I'm sure we can. We just need to find the right way. Let me think about your suggestion. We would still need another thread (or executor) to execute Obtain/Refresh, right? Your original comment was to avoid blocking the event loop.", "url": "https://github.com/line/armeria/pull/2840#discussion_r462105773", "createdAt": "2020-07-29T07:49:16Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessTokenAsync(\n+            @Nullable AccessTokenCapsule token);\n+\n+    /**\n+     * Obtains a new access token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule obtainAccessToken() {\n+        final AccessTokenCapsule token = obtainAccessTokenAsync(null).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MTYzOQ=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIwOTI4OA==", "bodyText": "We would still need another thread (or executor) to execute Obtain/Refresh, right?\n\nIf what 'obtain/refresh' does is simply doing some HTTP calls and waiting for them, we do not need another thread or executor. That's the whole point of going asynchronous. \ud83d\ude09 Do you have any specific task that will block for a long time during obtain/refresh? I'd be happy to help you make them fully asynchronous.", "url": "https://github.com/line/armeria/pull/2840#discussion_r462209288", "createdAt": "2020-07-29T10:48:06Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessTokenAsync(\n+            @Nullable AccessTokenCapsule token);\n+\n+    /**\n+     * Obtains a new access token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule obtainAccessToken() {\n+        final AccessTokenCapsule token = obtainAccessTokenAsync(null).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MTYzOQ=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwOTcwNQ==", "bodyText": "If what 'obtain/refresh' does is simply doing some HTTP calls and waiting for them, we do not need another thread or executor. That's the whole point of going asynchronous. \ud83d\ude09 Do you have any specific task that will block for a long time during obtain/refresh? I'd be happy to help you make them fully asynchronous.\n\nYes, I do. I have pointed at such example in the other thread. Some grants may involve continuous polling of the OAuth 2 token endpoint. For example Device Authorization Flow which I have also implemented but did not include into this PR. This Flow assumes that the token obtained through a series or requests to which the OAuth 2 token endpoint responds with authorization_pending specifying some backoff or instructing to slow_down, and finally with the access token itself. This grant type is common to equipment activation (including consumer electronics), where the device starts the token Obtain cycle, while the authorization takes place independently by the user given the previously issued User Code. Many of us dealt with such grant type activating some apps on a smart TV, for instance.\n      +----------+                                +----------------+\n      |          |>---(A)-- Client Identifier --->|                |\n      |          |                                |                |\n      |          |<---(B)-- Device Code,      ---<|                |\n      |          |          User Code,            |                |\n      |  Device  |          & Verification URI    |                |\n      |  Client  |                                |                |\n      |          |  [polling]                     |                |\n      |          |>---(E)-- Device Code       --->|                |\n      |          |          & Client Identifier   |                |\n      |          |                                |  Authorization |\n      |          |<---(F)-- Access Token      ---<|     Server     |\n      +----------+   (& Optional Refresh Token)   |                |\n            v                                     |                |\n            :                                     |                |\n           (C) User Code & Verification URI       |                |\n            :                                     |                |\n            v                                     |                |\n      +----------+                                |                |\n      | End User |                                |                |\n      |    at    |<---(D)-- End user reviews  --->|                |\n      |  Browser |          authorization request |                |\n      +----------+                                +----------------+", "url": "https://github.com/line/armeria/pull/2840#discussion_r462309705", "createdAt": "2020-07-29T13:45:08Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessTokenAsync(\n+            @Nullable AccessTokenCapsule token);\n+\n+    /**\n+     * Obtains a new access token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule obtainAccessToken() {\n+        final AccessTokenCapsule token = obtainAccessTokenAsync(null).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MTYzOQ=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0MTU1OQ==", "bodyText": "Yes, such periodic check with backoff can be done completely asynchronously. That's how we do in RetryingClient. Of course it's more complicated than synchronous flow, but we'd like to make sure all this can be done in our event loop thread, so that a user doesn't have to manage another thread pool. How about focusing on making what's in this pull request asynchronous first? We could then discuss/cowork in more detail about how to make the second part asynchronous.", "url": "https://github.com/line/armeria/pull/2840#discussion_r463041559", "createdAt": "2020-07-30T14:33:45Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessTokenAsync(\n+            @Nullable AccessTokenCapsule token);\n+\n+    /**\n+     * Obtains a new access token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule obtainAccessToken() {\n+        final AccessTokenCapsule token = obtainAccessTokenAsync(null).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MTYzOQ=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQzOTI1OQ==", "bodyText": "Made a refactoring for this. Please see my other comment with a summary.", "url": "https://github.com/line/armeria/pull/2840#discussion_r464439259", "createdAt": "2020-08-03T14:11:59Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant, AutoCloseable {\n+\n+    /**\n+     * Holds a reference to the access token capsule.\n+     */\n+    private final AtomicReference<AccessTokenCapsule> tokenRef;\n+\n+    /**\n+     * Executes obtain and refresh token operations serially on a separate thread.\n+     */\n+    private final ExecutorService serialExecutor;\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    @Nullable\n+    private final Supplier<AccessTokenCapsule> tokenSupplier;\n+    @Nullable\n+    private final Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<AccessTokenCapsule> tokenSupplier,\n+                                     @Nullable Consumer<AccessTokenCapsule> tokenConsumer) {\n+        tokenRef = new AtomicReference<>();\n+        serialExecutor = Executors.newSingleThreadExecutor();\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        this.tokenSupplier = tokenSupplier;\n+        this.tokenConsumer = tokenConsumer;\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link AccessTokenCapsule} or an exception,\n+     *         if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<AccessTokenCapsule> obtainAccessTokenAsync(\n+            @Nullable AccessTokenCapsule token);\n+\n+    /**\n+     * Obtains a new access token from the token end-point.\n+     * Optionally stores access token to registered {@link Consumer} for longer term storage.\n+     * @return an {@link AccessTokenCapsule} that contains requested access token.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    private AccessTokenCapsule obtainAccessToken() {\n+        final AccessTokenCapsule token = obtainAccessTokenAsync(null).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MTYzOQ=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjYwMzM4OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDoyMjozMlrOGxts2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODozMTo0OFrOG0tvJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MjE2OQ==", "bodyText": "nit: Could merge two lines.", "url": "https://github.com/line/armeria/pull/2840#discussion_r454782169", "createdAt": "2020-07-15T04:22:32Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<AccessTokenCapsule> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkyODQ4Nw==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r457928487", "createdAt": "2020-07-21T08:31:48Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<AccessTokenCapsule> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MjE2OQ=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjYwNTEyOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDoyMzozOVrOGxtt6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODozMTo1NlrOG0tvYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MjQ0MQ==", "bodyText": "nit: Could merge two lines.", "url": "https://github.com/line/armeria/pull/2840#discussion_r454782441", "createdAt": "2020-07-15T04:23:39Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<AccessTokenCapsule> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T refreshBefore(Duration refreshBefore) {\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        return (T) this;\n+    }\n+\n+    public final Duration refreshBefore() {\n+        return refreshBefore;\n+    }\n+\n+    @Nullable\n+    public final Supplier<AccessTokenCapsule> tokenSupplier() {\n+        return tokenSupplier;\n+    }\n+\n+    /**\n+     * A {@link Supplier} to load Access Token from, to be able to restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenSupplier(\n+            Supplier<AccessTokenCapsule> tokenSupplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkyODU0Ng==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r457928546", "createdAt": "2020-07-21T08:31:56Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<AccessTokenCapsule> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T refreshBefore(Duration refreshBefore) {\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        return (T) this;\n+    }\n+\n+    public final Duration refreshBefore() {\n+        return refreshBefore;\n+    }\n+\n+    @Nullable\n+    public final Supplier<AccessTokenCapsule> tokenSupplier() {\n+        return tokenSupplier;\n+    }\n+\n+    /**\n+     * A {@link Supplier} to load Access Token from, to be able to restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenSupplier(\n+            Supplier<AccessTokenCapsule> tokenSupplier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MjQ0MQ=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjYwNTM1OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDoyMzo0OVrOGxtuDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODozODozOFrOG0t-fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MjQ3Ng==", "bodyText": "Could merge two lines.\nGlobal comment Consumer<? super AccessTokenCapsule> and Supplier<? extends AccessTokenCapsule>", "url": "https://github.com/line/armeria/pull/2840#discussion_r454782476", "createdAt": "2020-07-15T04:23:49Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<AccessTokenCapsule> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T refreshBefore(Duration refreshBefore) {\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        return (T) this;\n+    }\n+\n+    public final Duration refreshBefore() {\n+        return refreshBefore;\n+    }\n+\n+    @Nullable\n+    public final Supplier<AccessTokenCapsule> tokenSupplier() {\n+        return tokenSupplier;\n+    }\n+\n+    /**\n+     * A {@link Supplier} to load Access Token from, to be able to restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenSupplier(\n+            Supplier<AccessTokenCapsule> tokenSupplier) {\n+        this.tokenSupplier = requireNonNull(tokenSupplier, \"tokenSupplier\");\n+        return (T) this;\n+    }\n+\n+    @Nullable\n+    public final Consumer<AccessTokenCapsule> tokenConsumer() {\n+        return tokenConsumer;\n+    }\n+\n+    /**\n+     * A {@link Consumer} to store Access Token to, to be able restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenConsumer(\n+            Consumer<AccessTokenCapsule> tokenConsumer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkzMjQxNQ==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r457932415", "createdAt": "2020-07-21T08:38:38Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractAccessTokenRequest;\n+import com.linecorp.armeria.common.auth.oauth2.AccessTokenCapsule;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.RefreshAccessTokenRequest;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<AccessTokenCapsule> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<AccessTokenCapsule> tokenConsumer;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientBasicAuthorization(\n+            Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T refreshBefore(Duration refreshBefore) {\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        return (T) this;\n+    }\n+\n+    public final Duration refreshBefore() {\n+        return refreshBefore;\n+    }\n+\n+    @Nullable\n+    public final Supplier<AccessTokenCapsule> tokenSupplier() {\n+        return tokenSupplier;\n+    }\n+\n+    /**\n+     * A {@link Supplier} to load Access Token from, to be able to restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenSupplier(\n+            Supplier<AccessTokenCapsule> tokenSupplier) {\n+        this.tokenSupplier = requireNonNull(tokenSupplier, \"tokenSupplier\");\n+        return (T) this;\n+    }\n+\n+    @Nullable\n+    public final Consumer<AccessTokenCapsule> tokenConsumer() {\n+        return tokenConsumer;\n+    }\n+\n+    /**\n+     * A {@link Consumer} to store Access Token to, to be able restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenConsumer(\n+            Consumer<AccessTokenCapsule> tokenConsumer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MjQ3Ng=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjYxMjU0OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDoyNzo0N1rOGxtyJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoyOToxMlrOG173kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MzUyNA==", "bodyText": "Do we need to catch an Exception?\nI think we can just return unwrap().execute(ctx, newReq) without try...catch", "url": "https://github.com/line/armeria/pull/2840#discussion_r454783524", "createdAt": "2020-07-15T04:27:47Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Decorates a {@link HttpClient} with an OAuth 2.0 Authorization Grant flow.\n+ */\n+public class OAuth2Client extends SimpleDecoratingHttpClient {\n+\n+    /**\n+     * Creates a new {@link HttpClient} decorator that handles OAuth 2.0 Authorization Grant flow.\n+     * @param authorizationGrant An {@link OAuth2AuthorizationGrant} implementing specific\n+     *                           OAuth 2.0 Authorization Grant flow.\n+     */\n+    public static Function<? super HttpClient, OAuth2Client> newDecorator(\n+            OAuth2AuthorizationGrant authorizationGrant) {\n+        return delegate -> new OAuth2Client(delegate, authorizationGrant);\n+    }\n+\n+    private final OAuth2AuthorizationGrant authorizationGrant;\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpClient} with\n+     * an OAuth 2.0 Authorization Grant flow.\n+     */\n+    OAuth2Client(HttpClient delegate, OAuth2AuthorizationGrant authorizationGrant) {\n+        super(delegate);\n+        this.authorizationGrant = requireNonNull(authorizationGrant, \"authorizationGrant\");\n+    }\n+\n+    @Override\n+    public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n+        return HttpResponse.from(authorizationGrant.getAccessToken().thenApply(accessToken -> {\n+            // Create a new request with an additional 'Authorization' header\n+            final HttpRequest newReq =\n+                req.withHeaders(req.headers().toBuilder()\n+                                   .set(HttpHeaderNames.AUTHORIZATION, accessToken.authorization())\n+                                   .build());\n+            // Update the ctx.request\n+            ctx.updateRequest(newReq);\n+            try {\n+                return unwrap().execute(ctx, newReq);\n+            } catch (Exception e) {\n+                return Exceptions.throwUnsafely(Exceptions.peel(e));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk0MDM4NQ==", "bodyText": "Unfortunately, unwrap().execute(ctx, newReq) executed within lambda expression and has to be handled. The code won't compile if I remove try...catch.", "url": "https://github.com/line/armeria/pull/2840#discussion_r457940385", "createdAt": "2020-07-21T08:51:59Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Decorates a {@link HttpClient} with an OAuth 2.0 Authorization Grant flow.\n+ */\n+public class OAuth2Client extends SimpleDecoratingHttpClient {\n+\n+    /**\n+     * Creates a new {@link HttpClient} decorator that handles OAuth 2.0 Authorization Grant flow.\n+     * @param authorizationGrant An {@link OAuth2AuthorizationGrant} implementing specific\n+     *                           OAuth 2.0 Authorization Grant flow.\n+     */\n+    public static Function<? super HttpClient, OAuth2Client> newDecorator(\n+            OAuth2AuthorizationGrant authorizationGrant) {\n+        return delegate -> new OAuth2Client(delegate, authorizationGrant);\n+    }\n+\n+    private final OAuth2AuthorizationGrant authorizationGrant;\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpClient} with\n+     * an OAuth 2.0 Authorization Grant flow.\n+     */\n+    OAuth2Client(HttpClient delegate, OAuth2AuthorizationGrant authorizationGrant) {\n+        super(delegate);\n+        this.authorizationGrant = requireNonNull(authorizationGrant, \"authorizationGrant\");\n+    }\n+\n+    @Override\n+    public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n+        return HttpResponse.from(authorizationGrant.getAccessToken().thenApply(accessToken -> {\n+            // Create a new request with an additional 'Authorization' header\n+            final HttpRequest newReq =\n+                req.withHeaders(req.headers().toBuilder()\n+                                   .set(HttpHeaderNames.AUTHORIZATION, accessToken.authorization())\n+                                   .build());\n+            // Update the ctx.request\n+            ctx.updateRequest(newReq);\n+            try {\n+                return unwrap().execute(ctx, newReq);\n+            } catch (Exception e) {\n+                return Exceptions.throwUnsafely(Exceptions.peel(e));\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MzUyNA=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwODU5NA==", "bodyText": "I see!", "url": "https://github.com/line/armeria/pull/2840#discussion_r459208594", "createdAt": "2020-07-23T04:29:12Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Decorates a {@link HttpClient} with an OAuth 2.0 Authorization Grant flow.\n+ */\n+public class OAuth2Client extends SimpleDecoratingHttpClient {\n+\n+    /**\n+     * Creates a new {@link HttpClient} decorator that handles OAuth 2.0 Authorization Grant flow.\n+     * @param authorizationGrant An {@link OAuth2AuthorizationGrant} implementing specific\n+     *                           OAuth 2.0 Authorization Grant flow.\n+     */\n+    public static Function<? super HttpClient, OAuth2Client> newDecorator(\n+            OAuth2AuthorizationGrant authorizationGrant) {\n+        return delegate -> new OAuth2Client(delegate, authorizationGrant);\n+    }\n+\n+    private final OAuth2AuthorizationGrant authorizationGrant;\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpClient} with\n+     * an OAuth 2.0 Authorization Grant flow.\n+     */\n+    OAuth2Client(HttpClient delegate, OAuth2AuthorizationGrant authorizationGrant) {\n+        super(delegate);\n+        this.authorizationGrant = requireNonNull(authorizationGrant, \"authorizationGrant\");\n+    }\n+\n+    @Override\n+    public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n+        return HttpResponse.from(authorizationGrant.getAccessToken().thenApply(accessToken -> {\n+            // Create a new request with an additional 'Authorization' header\n+            final HttpRequest newReq =\n+                req.withHeaders(req.headers().toBuilder()\n+                                   .set(HttpHeaderNames.AUTHORIZATION, accessToken.authorization())\n+                                   .build());\n+            // Update the ctx.request\n+            ctx.updateRequest(newReq);\n+            try {\n+                return unwrap().execute(ctx, newReq);\n+            } catch (Exception e) {\n+                return Exceptions.throwUnsafely(Exceptions.peel(e));\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MzUyNA=="}, "originalCommit": {"oid": "7e258fbe3783684db657d1a998fc24a181a80b55"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTM4NDYzOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2AccessToken.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNDoxODo1M1rOG1SHzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOToyOTowNFrOG2C7pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyNDYyMw==", "bodyText": "I realized that we already have a class named OAuth2Token at com.linecorp.armeria.common.auth. How about OAuth2AccessTokenResponse?", "url": "https://github.com/line/armeria/pull/2840#discussion_r458524623", "createdAt": "2020-07-22T04:18:53Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+public class OAuth2AccessToken implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71764df4cfc611e905efe7f57e8b3418237f0808"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYxODc0MQ==", "bodyText": "I don't like the name Response. It implies something ephemeral. The name should imply that this object contains the Access Token.", "url": "https://github.com/line/armeria/pull/2840#discussion_r458618741", "createdAt": "2020-07-22T08:19:02Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+public class OAuth2AccessToken implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyNDYyMw=="}, "originalCommit": {"oid": "71764df4cfc611e905efe7f57e8b3418237f0808"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMwODA1NA==", "bodyText": "What about OAuth2AccessTokenRecord or, as per you other suggestion, GrantedOAuth2AccessToken?", "url": "https://github.com/line/armeria/pull/2840#discussion_r459308054", "createdAt": "2020-07-23T08:58:30Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+public class OAuth2AccessToken implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyNDYyMw=="}, "originalCommit": {"oid": "71764df4cfc611e905efe7f57e8b3418237f0808"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxMDYxNQ==", "bodyText": "GrantedOAuth2AccessToken or GrantedOAuth2Token? I wonder if we can drop Access here since a token usually means an access token. I'm not an expert on this topic, so it's your call.", "url": "https://github.com/line/armeria/pull/2840#discussion_r459310615", "createdAt": "2020-07-23T09:03:20Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+public class OAuth2AccessToken implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyNDYyMw=="}, "originalCommit": {"oid": "71764df4cfc611e905efe7f57e8b3418237f0808"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMyNDMyNQ==", "bodyText": "No, we should not drop Access for two reasons:\n\nThis object represents exactly the issued Access Token (as per RFC6749, Section 5.1).\nThere are common Token operations that apply to different type of tokens, like Access Token or Refresh Token. For instance, OAuth2TokenDescriptor or TokenRevocationRequest may apply to either Access or Refresh tokens.\n\nI'll go ahead and rename it to GrantedOAuth2AccessToken then.", "url": "https://github.com/line/armeria/pull/2840#discussion_r459324325", "createdAt": "2020-07-23T09:29:04Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+public class OAuth2AccessToken implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyNDYyMw=="}, "originalCommit": {"oid": "71764df4cfc611e905efe7f57e8b3418237f0808"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTc0NjMxOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoyNDozMlrOG17z_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODozNDowMFrOG2BGUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNzY3Ng==", "bodyText": "nit: Could you use 4 spaces for indentation?", "url": "https://github.com/line/armeria/pull/2840#discussion_r459207676", "createdAt": "2020-07-23T04:24:32Z", "author": {"login": "ikhoon"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+public final class ClientAuthorization {\n+\n+  private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed953b11229b23d72d7156c62d2a91826db4a702"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI5NDI4OA==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r459294288", "createdAt": "2020-07-23T08:34:00Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/ClientAuthorization.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+\n+/**\n+ * Provides client authorization for the OAuth 2.0 requests,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+ * For example:\n+ * <pre>{@code\n+ * Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n+ * }</pre>\n+ * Fetches authorization source from the designated authorization or credentials supplier, which\n+ * might be facilitated by a secure Secret provider. Will fetch the authorization source for each\n+ * request. Therefore the designated supplier must cache the value in order to avoid unnecessary\n+ * network hops.\n+ * The authorization source might either provide complete authorization token or client credentials.\n+ */\n+public final class ClientAuthorization {\n+\n+  private static final String DEFAULT_AUTHORIZATION_TYPE = \"Basic\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNzY3Ng=="}, "originalCommit": {"oid": "ed953b11229b23d72d7156c62d2a91826db4a702"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDg3NDMzOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AbstractOAuth2Request.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzo0Mjo0NlrOG_VmsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODoyNDo1NFrOHBfGzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA2NzQ0MQ==", "bodyText": "Is it possible to use QueryParams instead of Map<String, String> here?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469067441", "createdAt": "2020-08-12T07:42:46Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected WebClient endpoint() {\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Returns the authorization endpoint path.\n+     */\n+    protected String endpointPath() {\n+        return endpointPath;\n+    }\n+\n+    /**\n+     * Returns the client authorization object.\n+     */\n+    @Nullable\n+    protected ClientAuthorization clientAuthorization() {\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Extracts data from OK response and converts it to the target type {@code T}.\n+     */\n+    protected abstract T extractOkResults(AggregatedHttpResponse response, Map<String, String> requestData);\n+\n+    /**\n+     * Returns the value for the {@link HttpHeaderNames#AUTHORIZATION}.\n+     */\n+    @Nullable\n+    protected String authorizationHeaderValue() {\n+        return clientAuthorization == null ? null : clientAuthorization.authorizationHeaderValue();\n+    }\n+\n+    /**\n+     * Sets client credentials as form data parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected void setCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {\n+        if (clientAuthorization != null) {\n+            clientAuthorization.setCredentialsAsBodyParameters(formBuilder);\n+        }\n+    }\n+\n+    /**\n+     * Makes a request to the authorization endpoint using supplied {@code requestForm} parameters and converts\n+     * the result to the given type {@code T}.\n+     */\n+    protected CompletableFuture<T> executeWithParameters(LinkedHashMap<String, String> requestFormData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMyMDI3MA==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r471320270", "createdAt": "2020-08-17T08:24:54Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected WebClient endpoint() {\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Returns the authorization endpoint path.\n+     */\n+    protected String endpointPath() {\n+        return endpointPath;\n+    }\n+\n+    /**\n+     * Returns the client authorization object.\n+     */\n+    @Nullable\n+    protected ClientAuthorization clientAuthorization() {\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Extracts data from OK response and converts it to the target type {@code T}.\n+     */\n+    protected abstract T extractOkResults(AggregatedHttpResponse response, Map<String, String> requestData);\n+\n+    /**\n+     * Returns the value for the {@link HttpHeaderNames#AUTHORIZATION}.\n+     */\n+    @Nullable\n+    protected String authorizationHeaderValue() {\n+        return clientAuthorization == null ? null : clientAuthorization.authorizationHeaderValue();\n+    }\n+\n+    /**\n+     * Sets client credentials as form data parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected void setCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {\n+        if (clientAuthorization != null) {\n+            clientAuthorization.setCredentialsAsBodyParameters(formBuilder);\n+        }\n+    }\n+\n+    /**\n+     * Makes a request to the authorization endpoint using supplied {@code requestForm} parameters and converts\n+     * the result to the given type {@code T}.\n+     */\n+    protected CompletableFuture<T> executeWithParameters(LinkedHashMap<String, String> requestFormData) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA2NzQ0MQ=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDg3ODEyOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AbstractOAuth2Request.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzo0Mzo1M1rOG_VpGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODoyNTowMlrOHBfHIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA2ODA1Ng==", "bodyText": "Ditto - could use QueryParams?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469068056", "createdAt": "2020-08-12T07:43:53Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected WebClient endpoint() {\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Returns the authorization endpoint path.\n+     */\n+    protected String endpointPath() {\n+        return endpointPath;\n+    }\n+\n+    /**\n+     * Returns the client authorization object.\n+     */\n+    @Nullable\n+    protected ClientAuthorization clientAuthorization() {\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Extracts data from OK response and converts it to the target type {@code T}.\n+     */\n+    protected abstract T extractOkResults(AggregatedHttpResponse response, Map<String, String> requestData);\n+\n+    /**\n+     * Returns the value for the {@link HttpHeaderNames#AUTHORIZATION}.\n+     */\n+    @Nullable\n+    protected String authorizationHeaderValue() {\n+        return clientAuthorization == null ? null : clientAuthorization.authorizationHeaderValue();\n+    }\n+\n+    /**\n+     * Sets client credentials as form data parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected void setCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {\n+        if (clientAuthorization != null) {\n+            clientAuthorization.setCredentialsAsBodyParameters(formBuilder);\n+        }\n+    }\n+\n+    /**\n+     * Makes a request to the authorization endpoint using supplied {@code requestForm} parameters and converts\n+     * the result to the given type {@code T}.\n+     */\n+    protected CompletableFuture<T> executeWithParameters(LinkedHashMap<String, String> requestFormData) {\n+        final Map<String, String> requestData = Collections.unmodifiableMap(requestFormData);\n+        final HttpResponse response = endpoint().execute(createHttpRequest(endpointPath, requestData));\n+        // when response aggregated, then extract the results...\n+        return response.aggregate().thenApply(r -> extractResults(r, Collections.unmodifiableMap(requestData)));\n+    }\n+\n+    /**\n+     * Produces {@link HttpRequest} based on this object.\n+     */\n+    private HttpRequest createHttpRequest(String endpointPath, Map<String, String> requestFormData) {\n+        final QueryParamsBuilder requestFormBuilder = QueryParams.builder();\n+        requestFormBuilder.add(requestFormData.entrySet());\n+\n+        final RequestHeadersBuilder headersBuilder =\n+                RequestHeaders.of(HttpMethod.POST, endpointPath).toBuilder();\n+        final String authorizationHeaderValue = authorizationHeaderValue();\n+        if (authorizationHeaderValue != null) {\n+            headersBuilder.add(HttpHeaderNames.AUTHORIZATION, authorizationHeaderValue);\n+        } else {\n+            setCredentialsAsBodyParameters(requestFormBuilder);\n+        }\n+        headersBuilder.add(HttpHeaderNames.CONTENT_TYPE, MediaType.FORM_DATA.toString());\n+\n+        return HttpRequest.of(headersBuilder.build(), HttpData.ofUtf8(requestFormBuilder.toQueryString()));\n+    }\n+\n+    /**\n+     * Extracts the result and convert it to the target type {@code T} or throw an error in case of an error\n+     * result.\n+     * @param response An {@link AggregatedHttpResponse} returned by the authorization endpoint.\n+     * @param requestData A {@link Map} that contains all the elements of the request form sent with the\n+     *                    request.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    @Nullable\n+    protected T extractResults(AggregatedHttpResponse response, Map<String, String> requestData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMyMDM1NQ==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r471320355", "createdAt": "2020-08-17T08:25:02Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {\n+        this.endpoint = Objects.requireNonNull(endpoint, \"endpoint\");\n+        this.endpointPath = Objects.requireNonNull(endpointPath, \"endpointPath\");\n+        this.clientAuthorization = clientAuthorization; // optional\n+    }\n+\n+    /**\n+     * Returns the {@link WebClient} of the authorization endpoint.\n+     */\n+    protected WebClient endpoint() {\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Returns the authorization endpoint path.\n+     */\n+    protected String endpointPath() {\n+        return endpointPath;\n+    }\n+\n+    /**\n+     * Returns the client authorization object.\n+     */\n+    @Nullable\n+    protected ClientAuthorization clientAuthorization() {\n+        return clientAuthorization;\n+    }\n+\n+    /**\n+     * Extracts data from OK response and converts it to the target type {@code T}.\n+     */\n+    protected abstract T extractOkResults(AggregatedHttpResponse response, Map<String, String> requestData);\n+\n+    /**\n+     * Returns the value for the {@link HttpHeaderNames#AUTHORIZATION}.\n+     */\n+    @Nullable\n+    protected String authorizationHeaderValue() {\n+        return clientAuthorization == null ? null : clientAuthorization.authorizationHeaderValue();\n+    }\n+\n+    /**\n+     * Sets client credentials as form data parameters,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected void setCredentialsAsBodyParameters(QueryParamsBuilder formBuilder) {\n+        if (clientAuthorization != null) {\n+            clientAuthorization.setCredentialsAsBodyParameters(formBuilder);\n+        }\n+    }\n+\n+    /**\n+     * Makes a request to the authorization endpoint using supplied {@code requestForm} parameters and converts\n+     * the result to the given type {@code T}.\n+     */\n+    protected CompletableFuture<T> executeWithParameters(LinkedHashMap<String, String> requestFormData) {\n+        final Map<String, String> requestData = Collections.unmodifiableMap(requestFormData);\n+        final HttpResponse response = endpoint().execute(createHttpRequest(endpointPath, requestData));\n+        // when response aggregated, then extract the results...\n+        return response.aggregate().thenApply(r -> extractResults(r, Collections.unmodifiableMap(requestData)));\n+    }\n+\n+    /**\n+     * Produces {@link HttpRequest} based on this object.\n+     */\n+    private HttpRequest createHttpRequest(String endpointPath, Map<String, String> requestFormData) {\n+        final QueryParamsBuilder requestFormBuilder = QueryParams.builder();\n+        requestFormBuilder.add(requestFormData.entrySet());\n+\n+        final RequestHeadersBuilder headersBuilder =\n+                RequestHeaders.of(HttpMethod.POST, endpointPath).toBuilder();\n+        final String authorizationHeaderValue = authorizationHeaderValue();\n+        if (authorizationHeaderValue != null) {\n+            headersBuilder.add(HttpHeaderNames.AUTHORIZATION, authorizationHeaderValue);\n+        } else {\n+            setCredentialsAsBodyParameters(requestFormBuilder);\n+        }\n+        headersBuilder.add(HttpHeaderNames.CONTENT_TYPE, MediaType.FORM_DATA.toString());\n+\n+        return HttpRequest.of(headersBuilder.build(), HttpData.ofUtf8(requestFormBuilder.toQueryString()));\n+    }\n+\n+    /**\n+     * Extracts the result and convert it to the target type {@code T} or throw an error in case of an error\n+     * result.\n+     * @param response An {@link AggregatedHttpResponse} returned by the authorization endpoint.\n+     * @param requestData A {@link Map} that contains all the elements of the request form sent with the\n+     *                    request.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    @Nullable\n+    protected T extractResults(AggregatedHttpResponse response, Map<String, String> requestData) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA2ODA1Ng=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTAwMDY3OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODoxOTo0OVrOG_W06Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTo1NzozNFrOHhLdSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4NzQ2NQ==", "bodyText": "This is interesting. I was rather expecting something like:\nAuthService.builder()\n           .addOAuth2(OAuth2TokenIntrospectionAuthorizer.builder()....build())\n           .newDecorator(); // or .build(..);\nOne missing piece here is that you cannot specify the failure handler. To solve this problem, what do you think about adding some default methods to Authorizer? e.g.\npublic interface Authorizer<T> {\n    ...\n    @Nullable // null means 'use the default or what's specified in the builder.'\n    default AuthSuccessHandler successHandler() { return null; }\n    @Nullable // null means 'use the default or what's specified in the builder.'\n    default AuthFailureHandler failureHandler() { return null; }\n}\n.. so that you can specify the success/failure handler specific to OAuth2.", "url": "https://github.com/line/armeria/pull/2840#discussion_r469087465", "createdAt": "2020-08-12T08:19:49Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.cache.Cache;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.auth.OAuth2Token;\n+import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.AuthFailureHandler;\n+import com.linecorp.armeria.server.auth.AuthService;\n+import com.linecorp.armeria.server.auth.Authorizer;\n+\n+import io.netty.util.AttributeKey;\n+\n+/**\n+ * Determines whether a given {@link OAuth2Token} is authorized for the service registered in using OAuth 2.0\n+ * Token Introspection. {@code ctx} can be used for storing authorization information about the request for use\n+ * in business logic.\n+ */\n+public class OAuth2TokenIntrospectionAuthorizer implements Authorizer<OAuth2Token> {\n+\n+    /**\n+     * Returns a newly created {@link OAuth2TokenIntrospectionAuthorizerBuilder}.\n+     *\n+     * @param introspectionEndpoint A {@link WebClient} to facilitate the Token Introspection request. Must\n+     *                              correspond to the Token Introspection endpoint of the OAuth 2.0 system.\n+     * @param introspectionEndpointPath A URI path that corresponds to the Token Introspection endpoint of the\n+     *                                  OAuth 2.0 system.\n+     */\n+    public static OAuth2TokenIntrospectionAuthorizerBuilder builder(WebClient introspectionEndpoint,\n+                                                                    String introspectionEndpointPath) {\n+        return new OAuth2TokenIntrospectionAuthorizerBuilder(introspectionEndpoint, introspectionEndpointPath);\n+    }\n+\n+    static final AttributeKey<Integer> ERROR_CODE = AttributeKey.valueOf(\"x-oauth2-error\");\n+    static final AttributeKey<String> ERROR_TYPE = AttributeKey.valueOf(\"x-oauth2-error-type\");\n+    static final String UNSUPPORTED_TOKEN_TYPE = \"unsupported_token_type\";\n+    static final String INVALID_TOKEN = \"invalid_token\";\n+    static final String INSUFFICIENT_SCOPE = \"insufficient_scope\";\n+\n+    private final Cache<String, OAuth2TokenDescriptor> tokenCache;\n+    private final Set<String> permittedScope;\n+    @Nullable\n+    private final String accessTokenType;\n+    @Nullable\n+    private final String realm;\n+    private final TokenIntrospectionRequest tokenIntrospectionRequest;\n+    private final AuthFailureHandler authFailureHandler;\n+\n+    OAuth2TokenIntrospectionAuthorizer(Cache<String, OAuth2TokenDescriptor> tokenCache,\n+                                       @Nullable String accessTokenType, @Nullable String realm,\n+                                       Set<String> permittedScope,\n+                                       TokenIntrospectionRequest tokenIntrospectionRequest) {\n+        this.tokenCache = requireNonNull(tokenCache, \"tokenCache\");\n+        this.accessTokenType = accessTokenType;\n+        this.realm = realm;\n+        this.permittedScope = requireNonNull(permittedScope, \"permittedScope\");\n+        this.tokenIntrospectionRequest =\n+                requireNonNull(tokenIntrospectionRequest, \"tokenIntrospectionRequest\");\n+        authFailureHandler =\n+                new OAuth2AuthorizationFailureHandler(accessTokenType, realm, String.join(\" \", permittedScope));\n+    }\n+\n+    /**\n+     * Creates a new {@link AuthService} that authorizes HTTP requests using OAuth 2.0 Token Introspection.\n+     */\n+    public AuthService asAuthService(HttpService delegate) {\n+        return AuthService.builder()\n+                          .addOAuth2(this)\n+                          .onFailure(authFailureHandler())\n+                          .build(delegate);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE5NzYzMg==", "bodyText": "Sorry, did not understand your proposal. What exactly am I missing?", "url": "https://github.com/line/armeria/pull/2840#discussion_r472197632", "createdAt": "2020-08-18T13:29:58Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.cache.Cache;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.auth.OAuth2Token;\n+import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.AuthFailureHandler;\n+import com.linecorp.armeria.server.auth.AuthService;\n+import com.linecorp.armeria.server.auth.Authorizer;\n+\n+import io.netty.util.AttributeKey;\n+\n+/**\n+ * Determines whether a given {@link OAuth2Token} is authorized for the service registered in using OAuth 2.0\n+ * Token Introspection. {@code ctx} can be used for storing authorization information about the request for use\n+ * in business logic.\n+ */\n+public class OAuth2TokenIntrospectionAuthorizer implements Authorizer<OAuth2Token> {\n+\n+    /**\n+     * Returns a newly created {@link OAuth2TokenIntrospectionAuthorizerBuilder}.\n+     *\n+     * @param introspectionEndpoint A {@link WebClient} to facilitate the Token Introspection request. Must\n+     *                              correspond to the Token Introspection endpoint of the OAuth 2.0 system.\n+     * @param introspectionEndpointPath A URI path that corresponds to the Token Introspection endpoint of the\n+     *                                  OAuth 2.0 system.\n+     */\n+    public static OAuth2TokenIntrospectionAuthorizerBuilder builder(WebClient introspectionEndpoint,\n+                                                                    String introspectionEndpointPath) {\n+        return new OAuth2TokenIntrospectionAuthorizerBuilder(introspectionEndpoint, introspectionEndpointPath);\n+    }\n+\n+    static final AttributeKey<Integer> ERROR_CODE = AttributeKey.valueOf(\"x-oauth2-error\");\n+    static final AttributeKey<String> ERROR_TYPE = AttributeKey.valueOf(\"x-oauth2-error-type\");\n+    static final String UNSUPPORTED_TOKEN_TYPE = \"unsupported_token_type\";\n+    static final String INVALID_TOKEN = \"invalid_token\";\n+    static final String INSUFFICIENT_SCOPE = \"insufficient_scope\";\n+\n+    private final Cache<String, OAuth2TokenDescriptor> tokenCache;\n+    private final Set<String> permittedScope;\n+    @Nullable\n+    private final String accessTokenType;\n+    @Nullable\n+    private final String realm;\n+    private final TokenIntrospectionRequest tokenIntrospectionRequest;\n+    private final AuthFailureHandler authFailureHandler;\n+\n+    OAuth2TokenIntrospectionAuthorizer(Cache<String, OAuth2TokenDescriptor> tokenCache,\n+                                       @Nullable String accessTokenType, @Nullable String realm,\n+                                       Set<String> permittedScope,\n+                                       TokenIntrospectionRequest tokenIntrospectionRequest) {\n+        this.tokenCache = requireNonNull(tokenCache, \"tokenCache\");\n+        this.accessTokenType = accessTokenType;\n+        this.realm = realm;\n+        this.permittedScope = requireNonNull(permittedScope, \"permittedScope\");\n+        this.tokenIntrospectionRequest =\n+                requireNonNull(tokenIntrospectionRequest, \"tokenIntrospectionRequest\");\n+        authFailureHandler =\n+                new OAuth2AuthorizationFailureHandler(accessTokenType, realm, String.join(\" \", permittedScope));\n+    }\n+\n+    /**\n+     * Creates a new {@link AuthService} that authorizes HTTP requests using OAuth 2.0 Token Introspection.\n+     */\n+    public AuthService asAuthService(HttpService delegate) {\n+        return AuthService.builder()\n+                          .addOAuth2(this)\n+                          .onFailure(authFailureHandler())\n+                          .build(delegate);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4NzQ2NQ=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4MzUzNA==", "bodyText": "I meant:\nA usual pattern for creating an AuthService with an Authorizer is to pass an Authorizer when building an AuthService with an AuthServiceBuilder. What's suggested here is the opposite; a user calls Authorizer.asAuthService(). Could we change this so it's consistent with others?", "url": "https://github.com/line/armeria/pull/2840#discussion_r472583534", "createdAt": "2020-08-19T01:32:29Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.cache.Cache;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.auth.OAuth2Token;\n+import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.AuthFailureHandler;\n+import com.linecorp.armeria.server.auth.AuthService;\n+import com.linecorp.armeria.server.auth.Authorizer;\n+\n+import io.netty.util.AttributeKey;\n+\n+/**\n+ * Determines whether a given {@link OAuth2Token} is authorized for the service registered in using OAuth 2.0\n+ * Token Introspection. {@code ctx} can be used for storing authorization information about the request for use\n+ * in business logic.\n+ */\n+public class OAuth2TokenIntrospectionAuthorizer implements Authorizer<OAuth2Token> {\n+\n+    /**\n+     * Returns a newly created {@link OAuth2TokenIntrospectionAuthorizerBuilder}.\n+     *\n+     * @param introspectionEndpoint A {@link WebClient} to facilitate the Token Introspection request. Must\n+     *                              correspond to the Token Introspection endpoint of the OAuth 2.0 system.\n+     * @param introspectionEndpointPath A URI path that corresponds to the Token Introspection endpoint of the\n+     *                                  OAuth 2.0 system.\n+     */\n+    public static OAuth2TokenIntrospectionAuthorizerBuilder builder(WebClient introspectionEndpoint,\n+                                                                    String introspectionEndpointPath) {\n+        return new OAuth2TokenIntrospectionAuthorizerBuilder(introspectionEndpoint, introspectionEndpointPath);\n+    }\n+\n+    static final AttributeKey<Integer> ERROR_CODE = AttributeKey.valueOf(\"x-oauth2-error\");\n+    static final AttributeKey<String> ERROR_TYPE = AttributeKey.valueOf(\"x-oauth2-error-type\");\n+    static final String UNSUPPORTED_TOKEN_TYPE = \"unsupported_token_type\";\n+    static final String INVALID_TOKEN = \"invalid_token\";\n+    static final String INSUFFICIENT_SCOPE = \"insufficient_scope\";\n+\n+    private final Cache<String, OAuth2TokenDescriptor> tokenCache;\n+    private final Set<String> permittedScope;\n+    @Nullable\n+    private final String accessTokenType;\n+    @Nullable\n+    private final String realm;\n+    private final TokenIntrospectionRequest tokenIntrospectionRequest;\n+    private final AuthFailureHandler authFailureHandler;\n+\n+    OAuth2TokenIntrospectionAuthorizer(Cache<String, OAuth2TokenDescriptor> tokenCache,\n+                                       @Nullable String accessTokenType, @Nullable String realm,\n+                                       Set<String> permittedScope,\n+                                       TokenIntrospectionRequest tokenIntrospectionRequest) {\n+        this.tokenCache = requireNonNull(tokenCache, \"tokenCache\");\n+        this.accessTokenType = accessTokenType;\n+        this.realm = realm;\n+        this.permittedScope = requireNonNull(permittedScope, \"permittedScope\");\n+        this.tokenIntrospectionRequest =\n+                requireNonNull(tokenIntrospectionRequest, \"tokenIntrospectionRequest\");\n+        authFailureHandler =\n+                new OAuth2AuthorizationFailureHandler(accessTokenType, realm, String.join(\" \", permittedScope));\n+    }\n+\n+    /**\n+     * Creates a new {@link AuthService} that authorizes HTTP requests using OAuth 2.0 Token Introspection.\n+     */\n+    public AuthService asAuthService(HttpService delegate) {\n+        return AuthService.builder()\n+                          .addOAuth2(this)\n+                          .onFailure(authFailureHandler())\n+                          .build(delegate);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4NzQ2NQ=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE0OTUyMQ==", "bodyText": "As you pointed, the usual pattern does not allow configuring the failure processing bound to the authorization logic. That's why I had to do it this way.\nDo you suggest modifying com.linecorp.armeria.server.auth.Authorizer and com.linecorp.armeria.server.auth.AuthServiceBuilder to support success and failure handlers provided by the Authorizer?", "url": "https://github.com/line/armeria/pull/2840#discussion_r477149521", "createdAt": "2020-08-26T09:05:26Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.cache.Cache;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.auth.OAuth2Token;\n+import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.AuthFailureHandler;\n+import com.linecorp.armeria.server.auth.AuthService;\n+import com.linecorp.armeria.server.auth.Authorizer;\n+\n+import io.netty.util.AttributeKey;\n+\n+/**\n+ * Determines whether a given {@link OAuth2Token} is authorized for the service registered in using OAuth 2.0\n+ * Token Introspection. {@code ctx} can be used for storing authorization information about the request for use\n+ * in business logic.\n+ */\n+public class OAuth2TokenIntrospectionAuthorizer implements Authorizer<OAuth2Token> {\n+\n+    /**\n+     * Returns a newly created {@link OAuth2TokenIntrospectionAuthorizerBuilder}.\n+     *\n+     * @param introspectionEndpoint A {@link WebClient} to facilitate the Token Introspection request. Must\n+     *                              correspond to the Token Introspection endpoint of the OAuth 2.0 system.\n+     * @param introspectionEndpointPath A URI path that corresponds to the Token Introspection endpoint of the\n+     *                                  OAuth 2.0 system.\n+     */\n+    public static OAuth2TokenIntrospectionAuthorizerBuilder builder(WebClient introspectionEndpoint,\n+                                                                    String introspectionEndpointPath) {\n+        return new OAuth2TokenIntrospectionAuthorizerBuilder(introspectionEndpoint, introspectionEndpointPath);\n+    }\n+\n+    static final AttributeKey<Integer> ERROR_CODE = AttributeKey.valueOf(\"x-oauth2-error\");\n+    static final AttributeKey<String> ERROR_TYPE = AttributeKey.valueOf(\"x-oauth2-error-type\");\n+    static final String UNSUPPORTED_TOKEN_TYPE = \"unsupported_token_type\";\n+    static final String INVALID_TOKEN = \"invalid_token\";\n+    static final String INSUFFICIENT_SCOPE = \"insufficient_scope\";\n+\n+    private final Cache<String, OAuth2TokenDescriptor> tokenCache;\n+    private final Set<String> permittedScope;\n+    @Nullable\n+    private final String accessTokenType;\n+    @Nullable\n+    private final String realm;\n+    private final TokenIntrospectionRequest tokenIntrospectionRequest;\n+    private final AuthFailureHandler authFailureHandler;\n+\n+    OAuth2TokenIntrospectionAuthorizer(Cache<String, OAuth2TokenDescriptor> tokenCache,\n+                                       @Nullable String accessTokenType, @Nullable String realm,\n+                                       Set<String> permittedScope,\n+                                       TokenIntrospectionRequest tokenIntrospectionRequest) {\n+        this.tokenCache = requireNonNull(tokenCache, \"tokenCache\");\n+        this.accessTokenType = accessTokenType;\n+        this.realm = realm;\n+        this.permittedScope = requireNonNull(permittedScope, \"permittedScope\");\n+        this.tokenIntrospectionRequest =\n+                requireNonNull(tokenIntrospectionRequest, \"tokenIntrospectionRequest\");\n+        authFailureHandler =\n+                new OAuth2AuthorizationFailureHandler(accessTokenType, realm, String.join(\" \", permittedScope));\n+    }\n+\n+    /**\n+     * Creates a new {@link AuthService} that authorizes HTTP requests using OAuth 2.0 Token Introspection.\n+     */\n+    public AuthService asAuthService(HttpService delegate) {\n+        return AuthService.builder()\n+                          .addOAuth2(this)\n+                          .onFailure(authFailureHandler())\n+                          .build(delegate);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4NzQ2NQ=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0MzkwMg==", "bodyText": "Do you suggest modifying com.linecorp.armeria.server.auth.Authorizer and com.linecorp.armeria.server.auth.AuthServiceBuilder to support success and failure handlers provided by the Authorizer?\n\nExactly! (Sorry about a very late reply. \ud83d\ude4f Was busy joining a new company \ud83d\ude09)", "url": "https://github.com/line/armeria/pull/2840#discussion_r503843902", "createdAt": "2020-10-13T10:32:45Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.cache.Cache;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.auth.OAuth2Token;\n+import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.AuthFailureHandler;\n+import com.linecorp.armeria.server.auth.AuthService;\n+import com.linecorp.armeria.server.auth.Authorizer;\n+\n+import io.netty.util.AttributeKey;\n+\n+/**\n+ * Determines whether a given {@link OAuth2Token} is authorized for the service registered in using OAuth 2.0\n+ * Token Introspection. {@code ctx} can be used for storing authorization information about the request for use\n+ * in business logic.\n+ */\n+public class OAuth2TokenIntrospectionAuthorizer implements Authorizer<OAuth2Token> {\n+\n+    /**\n+     * Returns a newly created {@link OAuth2TokenIntrospectionAuthorizerBuilder}.\n+     *\n+     * @param introspectionEndpoint A {@link WebClient} to facilitate the Token Introspection request. Must\n+     *                              correspond to the Token Introspection endpoint of the OAuth 2.0 system.\n+     * @param introspectionEndpointPath A URI path that corresponds to the Token Introspection endpoint of the\n+     *                                  OAuth 2.0 system.\n+     */\n+    public static OAuth2TokenIntrospectionAuthorizerBuilder builder(WebClient introspectionEndpoint,\n+                                                                    String introspectionEndpointPath) {\n+        return new OAuth2TokenIntrospectionAuthorizerBuilder(introspectionEndpoint, introspectionEndpointPath);\n+    }\n+\n+    static final AttributeKey<Integer> ERROR_CODE = AttributeKey.valueOf(\"x-oauth2-error\");\n+    static final AttributeKey<String> ERROR_TYPE = AttributeKey.valueOf(\"x-oauth2-error-type\");\n+    static final String UNSUPPORTED_TOKEN_TYPE = \"unsupported_token_type\";\n+    static final String INVALID_TOKEN = \"invalid_token\";\n+    static final String INSUFFICIENT_SCOPE = \"insufficient_scope\";\n+\n+    private final Cache<String, OAuth2TokenDescriptor> tokenCache;\n+    private final Set<String> permittedScope;\n+    @Nullable\n+    private final String accessTokenType;\n+    @Nullable\n+    private final String realm;\n+    private final TokenIntrospectionRequest tokenIntrospectionRequest;\n+    private final AuthFailureHandler authFailureHandler;\n+\n+    OAuth2TokenIntrospectionAuthorizer(Cache<String, OAuth2TokenDescriptor> tokenCache,\n+                                       @Nullable String accessTokenType, @Nullable String realm,\n+                                       Set<String> permittedScope,\n+                                       TokenIntrospectionRequest tokenIntrospectionRequest) {\n+        this.tokenCache = requireNonNull(tokenCache, \"tokenCache\");\n+        this.accessTokenType = accessTokenType;\n+        this.realm = realm;\n+        this.permittedScope = requireNonNull(permittedScope, \"permittedScope\");\n+        this.tokenIntrospectionRequest =\n+                requireNonNull(tokenIntrospectionRequest, \"tokenIntrospectionRequest\");\n+        authFailureHandler =\n+                new OAuth2AuthorizationFailureHandler(accessTokenType, realm, String.join(\" \", permittedScope));\n+    }\n+\n+    /**\n+     * Creates a new {@link AuthService} that authorizes HTTP requests using OAuth 2.0 Token Introspection.\n+     */\n+    public AuthService asAuthService(HttpService delegate) {\n+        return AuthService.builder()\n+                          .addOAuth2(this)\n+                          .onFailure(authFailureHandler())\n+                          .build(delegate);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4NzQ2NQ=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1Mjc3OQ==", "bodyText": "No problem. I will follow your proposal and push an update in the next few days.", "url": "https://github.com/line/armeria/pull/2840#discussion_r504552779", "createdAt": "2020-10-14T09:57:34Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.cache.Cache;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.auth.OAuth2Token;\n+import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.AuthFailureHandler;\n+import com.linecorp.armeria.server.auth.AuthService;\n+import com.linecorp.armeria.server.auth.Authorizer;\n+\n+import io.netty.util.AttributeKey;\n+\n+/**\n+ * Determines whether a given {@link OAuth2Token} is authorized for the service registered in using OAuth 2.0\n+ * Token Introspection. {@code ctx} can be used for storing authorization information about the request for use\n+ * in business logic.\n+ */\n+public class OAuth2TokenIntrospectionAuthorizer implements Authorizer<OAuth2Token> {\n+\n+    /**\n+     * Returns a newly created {@link OAuth2TokenIntrospectionAuthorizerBuilder}.\n+     *\n+     * @param introspectionEndpoint A {@link WebClient} to facilitate the Token Introspection request. Must\n+     *                              correspond to the Token Introspection endpoint of the OAuth 2.0 system.\n+     * @param introspectionEndpointPath A URI path that corresponds to the Token Introspection endpoint of the\n+     *                                  OAuth 2.0 system.\n+     */\n+    public static OAuth2TokenIntrospectionAuthorizerBuilder builder(WebClient introspectionEndpoint,\n+                                                                    String introspectionEndpointPath) {\n+        return new OAuth2TokenIntrospectionAuthorizerBuilder(introspectionEndpoint, introspectionEndpointPath);\n+    }\n+\n+    static final AttributeKey<Integer> ERROR_CODE = AttributeKey.valueOf(\"x-oauth2-error\");\n+    static final AttributeKey<String> ERROR_TYPE = AttributeKey.valueOf(\"x-oauth2-error-type\");\n+    static final String UNSUPPORTED_TOKEN_TYPE = \"unsupported_token_type\";\n+    static final String INVALID_TOKEN = \"invalid_token\";\n+    static final String INSUFFICIENT_SCOPE = \"insufficient_scope\";\n+\n+    private final Cache<String, OAuth2TokenDescriptor> tokenCache;\n+    private final Set<String> permittedScope;\n+    @Nullable\n+    private final String accessTokenType;\n+    @Nullable\n+    private final String realm;\n+    private final TokenIntrospectionRequest tokenIntrospectionRequest;\n+    private final AuthFailureHandler authFailureHandler;\n+\n+    OAuth2TokenIntrospectionAuthorizer(Cache<String, OAuth2TokenDescriptor> tokenCache,\n+                                       @Nullable String accessTokenType, @Nullable String realm,\n+                                       Set<String> permittedScope,\n+                                       TokenIntrospectionRequest tokenIntrospectionRequest) {\n+        this.tokenCache = requireNonNull(tokenCache, \"tokenCache\");\n+        this.accessTokenType = accessTokenType;\n+        this.realm = realm;\n+        this.permittedScope = requireNonNull(permittedScope, \"permittedScope\");\n+        this.tokenIntrospectionRequest =\n+                requireNonNull(tokenIntrospectionRequest, \"tokenIntrospectionRequest\");\n+        authFailureHandler =\n+                new OAuth2AuthorizationFailureHandler(accessTokenType, realm, String.join(\" \", permittedScope));\n+    }\n+\n+    /**\n+     * Creates a new {@link AuthService} that authorizes HTTP requests using OAuth 2.0 Token Introspection.\n+     */\n+    public AuthService asAuthService(HttpService delegate) {\n+        return AuthService.builder()\n+                          .addOAuth2(this)\n+                          .onFailure(authFailureHandler())\n+                          .build(delegate);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4NzQ2NQ=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTAwMzM5OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODoyMDoyOFrOG_W2gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODoyMDoyOFrOG_W2gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4Nzg3NQ==", "bodyText": "With the change I suggested above, we will not need this method.", "url": "https://github.com/line/armeria/pull/2840#discussion_r469087875", "createdAt": "2020-08-12T08:20:28Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.cache.Cache;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.auth.OAuth2Token;\n+import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.AuthFailureHandler;\n+import com.linecorp.armeria.server.auth.AuthService;\n+import com.linecorp.armeria.server.auth.Authorizer;\n+\n+import io.netty.util.AttributeKey;\n+\n+/**\n+ * Determines whether a given {@link OAuth2Token} is authorized for the service registered in using OAuth 2.0\n+ * Token Introspection. {@code ctx} can be used for storing authorization information about the request for use\n+ * in business logic.\n+ */\n+public class OAuth2TokenIntrospectionAuthorizer implements Authorizer<OAuth2Token> {\n+\n+    /**\n+     * Returns a newly created {@link OAuth2TokenIntrospectionAuthorizerBuilder}.\n+     *\n+     * @param introspectionEndpoint A {@link WebClient} to facilitate the Token Introspection request. Must\n+     *                              correspond to the Token Introspection endpoint of the OAuth 2.0 system.\n+     * @param introspectionEndpointPath A URI path that corresponds to the Token Introspection endpoint of the\n+     *                                  OAuth 2.0 system.\n+     */\n+    public static OAuth2TokenIntrospectionAuthorizerBuilder builder(WebClient introspectionEndpoint,\n+                                                                    String introspectionEndpointPath) {\n+        return new OAuth2TokenIntrospectionAuthorizerBuilder(introspectionEndpoint, introspectionEndpointPath);\n+    }\n+\n+    static final AttributeKey<Integer> ERROR_CODE = AttributeKey.valueOf(\"x-oauth2-error\");\n+    static final AttributeKey<String> ERROR_TYPE = AttributeKey.valueOf(\"x-oauth2-error-type\");\n+    static final String UNSUPPORTED_TOKEN_TYPE = \"unsupported_token_type\";\n+    static final String INVALID_TOKEN = \"invalid_token\";\n+    static final String INSUFFICIENT_SCOPE = \"insufficient_scope\";\n+\n+    private final Cache<String, OAuth2TokenDescriptor> tokenCache;\n+    private final Set<String> permittedScope;\n+    @Nullable\n+    private final String accessTokenType;\n+    @Nullable\n+    private final String realm;\n+    private final TokenIntrospectionRequest tokenIntrospectionRequest;\n+    private final AuthFailureHandler authFailureHandler;\n+\n+    OAuth2TokenIntrospectionAuthorizer(Cache<String, OAuth2TokenDescriptor> tokenCache,\n+                                       @Nullable String accessTokenType, @Nullable String realm,\n+                                       Set<String> permittedScope,\n+                                       TokenIntrospectionRequest tokenIntrospectionRequest) {\n+        this.tokenCache = requireNonNull(tokenCache, \"tokenCache\");\n+        this.accessTokenType = accessTokenType;\n+        this.realm = realm;\n+        this.permittedScope = requireNonNull(permittedScope, \"permittedScope\");\n+        this.tokenIntrospectionRequest =\n+                requireNonNull(tokenIntrospectionRequest, \"tokenIntrospectionRequest\");\n+        authFailureHandler =\n+                new OAuth2AuthorizationFailureHandler(accessTokenType, realm, String.join(\" \", permittedScope));\n+    }\n+\n+    /**\n+     * Creates a new {@link AuthService} that authorizes HTTP requests using OAuth 2.0 Token Introspection.\n+     */\n+    public AuthService asAuthService(HttpService delegate) {\n+        return AuthService.builder()\n+                          .addOAuth2(this)\n+                          .onFailure(authFailureHandler())\n+                          .build(delegate);\n+    }\n+\n+    /**\n+     * Creates a new {@link AuthService} that authorizes HTTP requests using OAuth 2.0 Token Introspection.\n+     * Returns this service as a decorator.\n+     */\n+    public Function<? super HttpService, ? extends HttpService> asDecorator() {\n+        return this::asAuthService;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTk1NTkwOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractAccessTokenRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo1MzowNlrOG_f5dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODozODo1M1rOHBflew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzNjA4NQ==", "bodyText": "We can drop protected if this class is package-local.", "url": "https://github.com/line/armeria/pull/2840#discussion_r469236085", "createdAt": "2020-08-12T12:53:06Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractAccessTokenRequest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.SCOPE;\n+\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractOAuth2Request;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+/**\n+ * A common abstraction for the requests implementing various Access Token request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+ */\n+abstract class AbstractAccessTokenRequest extends AbstractOAuth2Request<GrantedOAuth2AccessToken> {\n+\n+    protected static final String GRANT_TYPE = \"grant_type\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMyODEyMw==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r471328123", "createdAt": "2020-08-17T08:38:53Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractAccessTokenRequest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.SCOPE;\n+\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractOAuth2Request;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+/**\n+ * A common abstraction for the requests implementing various Access Token request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+ */\n+abstract class AbstractAccessTokenRequest extends AbstractOAuth2Request<GrantedOAuth2AccessToken> {\n+\n+    protected static final String GRANT_TYPE = \"grant_type\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzNjA4NQ=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTk1ODA4OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractAccessTokenRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo1Mzo0NFrOG_f6xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODozOTowMVrOHBflzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzNjQyMQ==", "bodyText": "We can drop protected if this class is package-local.", "url": "https://github.com/line/armeria/pull/2840#discussion_r469236421", "createdAt": "2020-08-12T12:53:44Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractAccessTokenRequest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.SCOPE;\n+\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractOAuth2Request;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+/**\n+ * A common abstraction for the requests implementing various Access Token request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+ */\n+abstract class AbstractAccessTokenRequest extends AbstractOAuth2Request<GrantedOAuth2AccessToken> {\n+\n+    protected static final String GRANT_TYPE = \"grant_type\";\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractAccessTokenRequest(WebClient accessTokenEndpoint, String accessTokenEndpointPath,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMyODIwNA==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r471328204", "createdAt": "2020-08-17T08:39:01Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractAccessTokenRequest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.SCOPE;\n+\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.auth.oauth2.AbstractOAuth2Request;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+/**\n+ * A common abstraction for the requests implementing various Access Token request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+ */\n+abstract class AbstractAccessTokenRequest extends AbstractOAuth2Request<GrantedOAuth2AccessToken> {\n+\n+    protected static final String GRANT_TYPE = \"grant_type\";\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractAccessTokenRequest(WebClient accessTokenEndpoint, String accessTokenEndpointPath,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzNjQyMQ=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTk2ODkyOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo1NjoyOFrOG_gBVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNDoyNTozMlrOHCC2UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzODEwMA==", "bodyText": "Does it make sense to drop client from all client*() builder methods for brevity?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469238100", "createdAt": "2020-08-12T12:56:28Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<? super GrantedOAuth2AccessToken> tokenConsumer;\n+\n+    @Nullable\n+    private Executor executor;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientBasicAuthorization(Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMyOTc1NQ==", "bodyText": "no, because there are userCredentials as well. here \"client\" is the OAuth2 spec term, which represents client application/device/etc vs. \"user\" which represents a human being", "url": "https://github.com/line/armeria/pull/2840#discussion_r471329755", "createdAt": "2020-08-17T08:41:59Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<? super GrantedOAuth2AccessToken> tokenConsumer;\n+\n+    @Nullable\n+    private Executor executor;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientBasicAuthorization(Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzODEwMA=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwNTg3Mg==", "bodyText": "Got it. Thanks.", "url": "https://github.com/line/armeria/pull/2840#discussion_r471905872", "createdAt": "2020-08-18T04:25:32Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<? super GrantedOAuth2AccessToken> tokenConsumer;\n+\n+    @Nullable\n+    private Executor executor;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientBasicAuthorization(Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzODEwMA=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTk3NjM4OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo1ODoxMlrOG_gFvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODo1MDowM1rOHBf9TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzOTIyOA==", "bodyText": "Global comment:\n\nIn our convention, the getter methods are usually hidden (i.e. they are protected or package-local). Could you reduce the visibility of the getters in builder classes?\nMissing Javadoc", "url": "https://github.com/line/armeria/pull/2840#discussion_r469239228", "createdAt": "2020-08-12T12:58:12Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<? super GrantedOAuth2AccessToken> tokenConsumer;\n+\n+    @Nullable\n+    private Executor executor;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientBasicAuthorization(Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T refreshBefore(Duration refreshBefore) {\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        return (T) this;\n+    }\n+\n+    public final Duration refreshBefore() {\n+        return refreshBefore;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzNDIyMQ==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r471334221", "createdAt": "2020-08-17T08:50:03Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<? super GrantedOAuth2AccessToken> tokenConsumer;\n+\n+    @Nullable\n+    private Executor executor;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientBasicAuthorization(Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T refreshBefore(Duration refreshBefore) {\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        return (T) this;\n+    }\n+\n+    public final Duration refreshBefore() {\n+        return refreshBefore;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzOTIyOA=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTk4MDM3OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo1OToxNFrOG_gIKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODo1MDoxMFrOHBf9jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzOTg1MA==", "bodyText": "How about just executor() for consistency with other existing builders?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469239850", "createdAt": "2020-08-12T12:59:14Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<? super GrantedOAuth2AccessToken> tokenConsumer;\n+\n+    @Nullable\n+    private Executor executor;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientBasicAuthorization(Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T refreshBefore(Duration refreshBefore) {\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        return (T) this;\n+    }\n+\n+    public final Duration refreshBefore() {\n+        return refreshBefore;\n+    }\n+\n+    @Nullable\n+    public final Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier() {\n+        return tokenSupplier;\n+    }\n+\n+    /**\n+     * A {@link Supplier} to load Access Token from, to be able to restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenSupplier(Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier) {\n+        this.tokenSupplier = requireNonNull(tokenSupplier, \"tokenSupplier\");\n+        return (T) this;\n+    }\n+\n+    @Nullable\n+    public final Consumer<? super GrantedOAuth2AccessToken> tokenConsumer() {\n+        return tokenConsumer;\n+    }\n+\n+    /**\n+     * A {@link Consumer} to store Access Token to, to be able restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenConsumer(Consumer<? super GrantedOAuth2AccessToken> tokenConsumer) {\n+        this.tokenConsumer = requireNonNull(tokenConsumer, \"tokenConsumer\");\n+        return (T) this;\n+    }\n+\n+    /**\n+     * An optional {@link Executor} that facilitates asynchronous access token obtain and refresh operations.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T withExecutor(Executor executor) {\n+        this.executor = requireNonNull(executor, \"executor\");\n+        return (T) this;\n+    }\n+\n+    public final Executor withExecutor() {\n+        return executor;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzNDI4NA==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r471334284", "createdAt": "2020-08-17T08:50:10Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<? super GrantedOAuth2AccessToken> tokenConsumer;\n+\n+    @Nullable\n+    private Executor executor;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientBasicAuthorization(Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T refreshBefore(Duration refreshBefore) {\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        return (T) this;\n+    }\n+\n+    public final Duration refreshBefore() {\n+        return refreshBefore;\n+    }\n+\n+    @Nullable\n+    public final Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier() {\n+        return tokenSupplier;\n+    }\n+\n+    /**\n+     * A {@link Supplier} to load Access Token from, to be able to restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenSupplier(Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier) {\n+        this.tokenSupplier = requireNonNull(tokenSupplier, \"tokenSupplier\");\n+        return (T) this;\n+    }\n+\n+    @Nullable\n+    public final Consumer<? super GrantedOAuth2AccessToken> tokenConsumer() {\n+        return tokenConsumer;\n+    }\n+\n+    /**\n+     * A {@link Consumer} to store Access Token to, to be able restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenConsumer(Consumer<? super GrantedOAuth2AccessToken> tokenConsumer) {\n+        this.tokenConsumer = requireNonNull(tokenConsumer, \"tokenConsumer\");\n+        return (T) this;\n+    }\n+\n+    /**\n+     * An optional {@link Executor} that facilitates asynchronous access token obtain and refresh operations.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T withExecutor(Executor executor) {\n+        this.executor = requireNonNull(executor, \"executor\");\n+        return (T) this;\n+    }\n+\n+    public final Executor withExecutor() {\n+        return executor;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzOTg1MA=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTk4NDcxOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzowMDoxMFrOG_gKzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzowMDoxMFrOG_gKzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0MDUyNQ==", "bodyText": "Global comment: Consider dropping protected from package-local classes.", "url": "https://github.com/line/armeria/pull/2840#discussion_r469240525", "createdAt": "2020-08-12T13:00:10Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrantBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+@SuppressWarnings(\"rawtypes\")\n+abstract class AbstractOAuth2AuthorizationGrantBuilder<T extends AbstractOAuth2AuthorizationGrantBuilder> {\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    private static final Duration DEFAULT_REFRESH_BEFORE = Duration.ofMinutes(1L); // 1 minute\n+\n+    private final WebClient accessTokenEndpoint;\n+    private final String accessTokenEndpointPath;\n+\n+    @Nullable\n+    private ClientAuthorization clientAuthorization;\n+\n+    private Duration refreshBefore = DEFAULT_REFRESH_BEFORE;\n+\n+    @Nullable\n+    private Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier;\n+\n+    @Nullable\n+    private Consumer<? super GrantedOAuth2AccessToken> tokenConsumer;\n+\n+    @Nullable\n+    private Executor executor;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     */\n+    AbstractOAuth2AuthorizationGrantBuilder(WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        this.accessTokenEndpoint = requireNonNull(accessTokenEndpoint, \"accessTokenEndpoint\");\n+        this.accessTokenEndpointPath = requireNonNull(accessTokenEndpointPath, \"accessTokenEndpointPath\");\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientAuthorization(\n+            Supplier<String> authorizationSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofAuthorization(authorizationSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on encoded authorization token and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param authorizationSupplier A supplier of encoded client authorization token.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientBasicAuthorization(Supplier<String> authorizationSupplier) {\n+        clientAuthorization = ClientAuthorization.ofBasicAuthorization(authorizationSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     * @param authorizationType One of the registered HTTP authentication schemes as per\n+     *                          <a href=\"https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml\">\n+     *                          HTTP Authentication Scheme Registry</a>.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier, String authorizationType) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier, authorizationType);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Provides client authorization for the OAuth 2.0 requests based on client credentials and\n+     * {@code Basic} authorization type,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     *\n+     * @param credentialsSupplier A supplier of client credentials.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T clientCredentials(\n+            Supplier<? extends Map.Entry<String, String>> credentialsSupplier) {\n+        clientAuthorization = ClientAuthorization.ofCredentials(credentialsSupplier);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * A period when the token should be refreshed proactively prior to its expiry.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T refreshBefore(Duration refreshBefore) {\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        return (T) this;\n+    }\n+\n+    public final Duration refreshBefore() {\n+        return refreshBefore;\n+    }\n+\n+    @Nullable\n+    public final Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier() {\n+        return tokenSupplier;\n+    }\n+\n+    /**\n+     * A {@link Supplier} to load Access Token from, to be able to restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenSupplier(Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier) {\n+        this.tokenSupplier = requireNonNull(tokenSupplier, \"tokenSupplier\");\n+        return (T) this;\n+    }\n+\n+    @Nullable\n+    public final Consumer<? super GrantedOAuth2AccessToken> tokenConsumer() {\n+        return tokenConsumer;\n+    }\n+\n+    /**\n+     * A {@link Consumer} to store Access Token to, to be able restore the previous session. OPTIONAL.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T tokenConsumer(Consumer<? super GrantedOAuth2AccessToken> tokenConsumer) {\n+        this.tokenConsumer = requireNonNull(tokenConsumer, \"tokenConsumer\");\n+        return (T) this;\n+    }\n+\n+    /**\n+     * An optional {@link Executor} that facilitates asynchronous access token obtain and refresh operations.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public final T withExecutor(Executor executor) {\n+        this.executor = requireNonNull(executor, \"executor\");\n+        return (T) this;\n+    }\n+\n+    public final Executor withExecutor() {\n+        return executor;\n+    }\n+\n+    protected abstract AbstractAccessTokenRequest buildObtainRequest(\n+            WebClient accessTokenEndpoint, String accessTokenEndpointPath,\n+            @Nullable ClientAuthorization clientAuthorization);\n+\n+    protected final AbstractAccessTokenRequest buildObtainRequest() {\n+        return buildObtainRequest(accessTokenEndpoint, accessTokenEndpointPath, clientAuthorization);\n+    }\n+\n+    protected final RefreshAccessTokenRequest buildRefreshRequest() {\n+        return new RefreshAccessTokenRequest(accessTokenEndpoint, accessTokenEndpointPath, clientAuthorization);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTk4Nzk2OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/ClientCredentialsTokenRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzowMDo1NlrOG_gM1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODo1Mjo0NVrOHBgDWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0MTA0NQ==", "bodyText": "Global comment: Please add final to all classes that can be final.", "url": "https://github.com/line/armeria/pull/2840#discussion_r469241045", "createdAt": "2020-08-12T13:00:56Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/ClientCredentialsTokenRequest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.SCOPE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.LinkedHashMap;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+\n+/**\n+ * Implements Client Credentials Grant request/response flow,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-4.4\">[RFC6749], Section 4.4</a>.\n+ */\n+class ClientCredentialsTokenRequest extends AbstractAccessTokenRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzNTc2OA==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r471335768", "createdAt": "2020-08-17T08:52:45Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/ClientCredentialsTokenRequest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.SCOPE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.LinkedHashMap;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+\n+/**\n+ * Implements Client Credentials Grant request/response flow,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-4.4\">[RFC6749], Section 4.4</a>.\n+ */\n+class ClientCredentialsTokenRequest extends AbstractAccessTokenRequest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0MTA0NQ=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTk4ODc4OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/ClientCredentialsTokenRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzowMToxMFrOG_gNXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODo1MzoxMVrOHBgESA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0MTE4MA==", "bodyText": "nit: indentation", "url": "https://github.com/line/armeria/pull/2840#discussion_r469241180", "createdAt": "2020-08-12T13:01:10Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/ClientCredentialsTokenRequest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.SCOPE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.LinkedHashMap;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+\n+/**\n+ * Implements Client Credentials Grant request/response flow,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-4.4\">[RFC6749], Section 4.4</a>.\n+ */\n+class ClientCredentialsTokenRequest extends AbstractAccessTokenRequest {\n+\n+    private static final String CLIENT_CREDENTIALS_GRANT_TYPE = \"client_credentials\";\n+\n+    /**\n+     * Implements Client Credentials Grant request/response flow,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-4.4\">[RFC6749], Section 4.4</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    ClientCredentialsTokenRequest(WebClient accessTokenEndpoint, String accessTokenEndpointPath,\n+                                         ClientAuthorization clientAuthorization) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzNjAwOA==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r471336008", "createdAt": "2020-08-17T08:53:11Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/ClientCredentialsTokenRequest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.SCOPE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.LinkedHashMap;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+\n+/**\n+ * Implements Client Credentials Grant request/response flow,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-4.4\">[RFC6749], Section 4.4</a>.\n+ */\n+class ClientCredentialsTokenRequest extends AbstractAccessTokenRequest {\n+\n+    private static final String CLIENT_CREDENTIALS_GRANT_TYPE = \"client_credentials\";\n+\n+    /**\n+     * Implements Client Credentials Grant request/response flow,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-4.4\">[RFC6749], Section 4.4</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    ClientCredentialsTokenRequest(WebClient accessTokenEndpoint, String accessTokenEndpointPath,\n+                                         ClientAuthorization clientAuthorization) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0MTE4MA=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjAwOTkyOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzowNjoyMVrOG_gZ4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNDoxNzo0MFrOHCCuWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NDM4NA==", "bodyText": "Do you have a better name than this? with*() usually returns a new object modified from the callee in our API, e.g. HttpData.withEndOfStream(), HttpRequest.withHeaders(). How about overloading getAccessToken()?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469244384", "createdAt": "2020-08-12T13:06:21Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+public interface OAuth2AuthorizationGrant {\n+\n+    /**\n+     * Produces OAuth 2.0 Access Token\n+     */\n+    CompletionStage<GrantedOAuth2AccessToken> getAccessToken();\n+\n+    /**\n+     * Produces (if necessary) OAuth 2.0 Access Token and adds it to the {@code req} in form of the\n+     * {@code Authorization} header.\n+     * @param req {@link HttpRequest} to wrap with OAuth 2.0 authorization.\n+     * @return {@link CompletionStage} that refers to {@link HttpRequest} wrapped wrap with\n+     *         OAuth 2.0 authorization information.\n+     */\n+    default CompletionStage<HttpRequest> withAuthorization(HttpRequest req) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMzOTc5NQ==", "bodyText": "with*() usually returns a new object modified from the callee in our API\nThis is exactly what this method does:\nCompletionStage withAuthorization(HttpRequest req) - wraps HttpRequest with the authorization information.\nThis function proposed by one of your colleagues earlier in the review.\nOverloading getAccessToken() does not make sense as the signature and the semantics of the functions completely different.", "url": "https://github.com/line/armeria/pull/2840#discussion_r471339795", "createdAt": "2020-08-17T08:59:53Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+public interface OAuth2AuthorizationGrant {\n+\n+    /**\n+     * Produces OAuth 2.0 Access Token\n+     */\n+    CompletionStage<GrantedOAuth2AccessToken> getAccessToken();\n+\n+    /**\n+     * Produces (if necessary) OAuth 2.0 Access Token and adds it to the {@code req} in form of the\n+     * {@code Authorization} header.\n+     * @param req {@link HttpRequest} to wrap with OAuth 2.0 authorization.\n+     * @return {@link CompletionStage} that refers to {@link HttpRequest} wrapped wrap with\n+     *         OAuth 2.0 authorization information.\n+     */\n+    default CompletionStage<HttpRequest> withAuthorization(HttpRequest req) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NDM4NA=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwMzgzMg==", "bodyText": "I see. Seems reasonable to me.", "url": "https://github.com/line/armeria/pull/2840#discussion_r471903832", "createdAt": "2020-08-18T04:17:40Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+public interface OAuth2AuthorizationGrant {\n+\n+    /**\n+     * Produces OAuth 2.0 Access Token\n+     */\n+    CompletionStage<GrantedOAuth2AccessToken> getAccessToken();\n+\n+    /**\n+     * Produces (if necessary) OAuth 2.0 Access Token and adds it to the {@code req} in form of the\n+     * {@code Authorization} header.\n+     * @param req {@link HttpRequest} to wrap with OAuth 2.0 authorization.\n+     * @return {@link CompletionStage} that refers to {@link HttpRequest} wrapped wrap with\n+     *         OAuth 2.0 authorization information.\n+     */\n+    default CompletionStage<HttpRequest> withAuthorization(HttpRequest req) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NDM4NA=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjAyMDY1OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzowODo1NlrOG_ggTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOTowMzo0N1rOHBgbCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NjAzMQ==", "bodyText": "Could use withAuthorization().", "url": "https://github.com/line/armeria/pull/2840#discussion_r469246031", "createdAt": "2020-08-12T13:08:56Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Decorates a {@link HttpClient} with an OAuth 2.0 Authorization Grant flow.\n+ */\n+public class OAuth2Client extends SimpleDecoratingHttpClient {\n+\n+    /**\n+     * Creates a new {@link HttpClient} decorator that handles OAuth 2.0 Authorization Grant flow.\n+     * @param authorizationGrant An {@link OAuth2AuthorizationGrant} implementing specific\n+     *                           OAuth 2.0 Authorization Grant flow.\n+     */\n+    public static Function<? super HttpClient, OAuth2Client> newDecorator(\n+            OAuth2AuthorizationGrant authorizationGrant) {\n+        return delegate -> new OAuth2Client(delegate, authorizationGrant);\n+    }\n+\n+    private final OAuth2AuthorizationGrant authorizationGrant;\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpClient} with\n+     * an OAuth 2.0 Authorization Grant flow.\n+     */\n+    OAuth2Client(HttpClient delegate, OAuth2AuthorizationGrant authorizationGrant) {\n+        super(delegate);\n+        this.authorizationGrant = requireNonNull(authorizationGrant, \"authorizationGrant\");\n+    }\n+\n+    @Override\n+    public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n+        return HttpResponse.from(authorizationGrant.getAccessToken().thenApply(accessToken -> {\n+            // Create a new request with an additional 'Authorization' header\n+            final HttpRequest newReq =\n+                req.withHeaders(req.headers().toBuilder()\n+                                   .set(HttpHeaderNames.AUTHORIZATION, accessToken.authorization())\n+                                   .build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM0MTgzNQ==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r471341835", "createdAt": "2020-08-17T09:03:47Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Decorates a {@link HttpClient} with an OAuth 2.0 Authorization Grant flow.\n+ */\n+public class OAuth2Client extends SimpleDecoratingHttpClient {\n+\n+    /**\n+     * Creates a new {@link HttpClient} decorator that handles OAuth 2.0 Authorization Grant flow.\n+     * @param authorizationGrant An {@link OAuth2AuthorizationGrant} implementing specific\n+     *                           OAuth 2.0 Authorization Grant flow.\n+     */\n+    public static Function<? super HttpClient, OAuth2Client> newDecorator(\n+            OAuth2AuthorizationGrant authorizationGrant) {\n+        return delegate -> new OAuth2Client(delegate, authorizationGrant);\n+    }\n+\n+    private final OAuth2AuthorizationGrant authorizationGrant;\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpClient} with\n+     * an OAuth 2.0 Authorization Grant flow.\n+     */\n+    OAuth2Client(HttpClient delegate, OAuth2AuthorizationGrant authorizationGrant) {\n+        super(delegate);\n+        this.authorizationGrant = requireNonNull(authorizationGrant, \"authorizationGrant\");\n+    }\n+\n+    @Override\n+    public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n+        return HttpResponse.from(authorizationGrant.getAccessToken().thenApply(accessToken -> {\n+            // Create a new request with an additional 'Authorization' header\n+            final HttpRequest newReq =\n+                req.withHeaders(req.headers().toBuilder()\n+                                   .set(HttpHeaderNames.AUTHORIZATION, accessToken.authorization())\n+                                   .build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NjAzMQ=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjAyNjkxOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ClientCredentialsGrantBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxMDoyNFrOG_gj_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOTowNTo0NFrOHBgflA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0Njk3Mw==", "bodyText": "Global comment: All concrete builders should be final unless there's a good reason for not doing so.", "url": "https://github.com/line/armeria/pull/2840#discussion_r469246973", "createdAt": "2020-08-12T13:10:24Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ClientCredentialsGrantBuilder.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+\n+/**\n+ * Builds {@link OAuth2ClientCredentialsGrant}.\n+ */\n+public class OAuth2ClientCredentialsGrantBuilder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM0Mjk5Ng==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r471342996", "createdAt": "2020-08-17T09:05:44Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ClientCredentialsGrantBuilder.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+\n+/**\n+ * Builds {@link OAuth2ClientCredentialsGrant}.\n+ */\n+public class OAuth2ClientCredentialsGrantBuilder", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0Njk3Mw=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjA2NTE2OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ResourceOwnerPasswordCredentialsGrantBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxOTozNFrOG_g7Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNDoxODozN1rOHCCvIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MjkwMg==", "bodyText": "Does it make sense to use auth.BasicToken instead of Map.Entry?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469252902", "createdAt": "2020-08-12T13:19:34Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ResourceOwnerPasswordCredentialsGrantBuilder.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+\n+/**\n+ * Builds {@link OAuth2ClientCredentialsGrant}.\n+ */\n+public class OAuth2ResourceOwnerPasswordCredentialsGrantBuilder\n+        extends AbstractOAuth2AuthorizationGrantBuilder<OAuth2ResourceOwnerPasswordCredentialsGrantBuilder> {\n+\n+    @Nullable\n+    private Supplier<? extends Map.Entry<String, String>> userCredentialsSupplier;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     */\n+    OAuth2ResourceOwnerPasswordCredentialsGrantBuilder(\n+            WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath);\n+    }\n+\n+    /**\n+     * A supplier of user credentials: \"username\" and \"password\" used to grant the Access Token. REQUIRED.\n+     */\n+    public OAuth2ResourceOwnerPasswordCredentialsGrantBuilder userCredentialsSupplier(\n+            Supplier<Entry<String, String>> userCredentialsSupplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM0NzEwOQ==", "bodyText": "No, it should be very generic. Credentials will come most likely from some kind of \"secret\" store like Vault (e.g. LogicalResponse)", "url": "https://github.com/line/armeria/pull/2840#discussion_r471347109", "createdAt": "2020-08-17T09:13:37Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ResourceOwnerPasswordCredentialsGrantBuilder.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+\n+/**\n+ * Builds {@link OAuth2ClientCredentialsGrant}.\n+ */\n+public class OAuth2ResourceOwnerPasswordCredentialsGrantBuilder\n+        extends AbstractOAuth2AuthorizationGrantBuilder<OAuth2ResourceOwnerPasswordCredentialsGrantBuilder> {\n+\n+    @Nullable\n+    private Supplier<? extends Map.Entry<String, String>> userCredentialsSupplier;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     */\n+    OAuth2ResourceOwnerPasswordCredentialsGrantBuilder(\n+            WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath);\n+    }\n+\n+    /**\n+     * A supplier of user credentials: \"username\" and \"password\" used to grant the Access Token. REQUIRED.\n+     */\n+    public OAuth2ResourceOwnerPasswordCredentialsGrantBuilder userCredentialsSupplier(\n+            Supplier<Entry<String, String>> userCredentialsSupplier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MjkwMg=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwNDAzNQ==", "bodyText": "I see. Thanks for education. \ud83d\ude47", "url": "https://github.com/line/armeria/pull/2840#discussion_r471904035", "createdAt": "2020-08-18T04:18:37Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ResourceOwnerPasswordCredentialsGrantBuilder.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+\n+/**\n+ * Builds {@link OAuth2ClientCredentialsGrant}.\n+ */\n+public class OAuth2ResourceOwnerPasswordCredentialsGrantBuilder\n+        extends AbstractOAuth2AuthorizationGrantBuilder<OAuth2ResourceOwnerPasswordCredentialsGrantBuilder> {\n+\n+    @Nullable\n+    private Supplier<? extends Map.Entry<String, String>> userCredentialsSupplier;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Access Token request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a>.\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     */\n+    OAuth2ResourceOwnerPasswordCredentialsGrantBuilder(\n+            WebClient accessTokenEndpoint, String accessTokenEndpointPath) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath);\n+    }\n+\n+    /**\n+     * A supplier of user credentials: \"username\" and \"password\" used to grant the Access Token. REQUIRED.\n+     */\n+    public OAuth2ResourceOwnerPasswordCredentialsGrantBuilder userCredentialsSupplier(\n+            Supplier<Entry<String, String>> userCredentialsSupplier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MjkwMg=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjA2NzY2OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/RefreshAccessTokenRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoyMDowN1rOG_g8iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOToxMzo0OVrOHBgv_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MzI1OQ==", "bodyText": "Could use QueryParams?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469253259", "createdAt": "2020-08-12T13:20:07Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/RefreshAccessTokenRequest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.REFRESH_TOKEN;\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.SCOPE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.LinkedHashMap;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+\n+/**\n+ * Implements Access Token Refresh request\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+ */\n+class RefreshAccessTokenRequest extends AbstractAccessTokenRequest {\n+\n+    /**\n+     * Implements Client Credentials Grant request/response flow,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    RefreshAccessTokenRequest(WebClient accessTokenEndpoint, String accessTokenEndpointPath,\n+                              @Nullable ClientAuthorization clientAuthorization) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath, clientAuthorization);\n+    }\n+\n+    /**\n+     * Makes Access Token Refresh request using the given {@code refresh_token} and handles the response\n+     * converting the result data to {@link GrantedOAuth2AccessToken}.\n+     * @param refreshToken The Refresh Token issued to the client to re-new an Access Token.\n+     * @param scope OPTIONAL. Scope to request for the token. A list of space-delimited,\n+     *              case-sensitive strings. The strings are defined by the authorization server.\n+     *              The authorization server MAY fully or partially ignore the scope requested by the\n+     *              client, based on the authorization server policy or the resource owner's\n+     *              instructions. If the issued access token scope is different from the one requested\n+     *              by the client, the authorization server MUST include the \"scope\" response\n+     *              parameter to inform the client of the actual scope granted.\n+     *              If the client omits the scope parameter when requesting authorization, the\n+     *              authorization server MUST either process the request using a pre-defined default\n+     *              value or fail the request indicating an invalid scope.\n+     * @return A {@link CompletableFuture} carrying the target result as {@link GrantedOAuth2AccessToken}.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    public CompletableFuture<GrantedOAuth2AccessToken> make(String refreshToken, @Nullable String scope) {\n+\n+        requireNonNull(refreshToken, REFRESH_TOKEN);\n+        final LinkedHashMap<String, String> requestFormItems = new LinkedHashMap<>(3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM0NzE5OA==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r471347198", "createdAt": "2020-08-17T09:13:49Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/RefreshAccessTokenRequest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.REFRESH_TOKEN;\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.SCOPE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.LinkedHashMap;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+\n+/**\n+ * Implements Access Token Refresh request\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+ */\n+class RefreshAccessTokenRequest extends AbstractAccessTokenRequest {\n+\n+    /**\n+     * Implements Client Credentials Grant request/response flow,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    RefreshAccessTokenRequest(WebClient accessTokenEndpoint, String accessTokenEndpointPath,\n+                              @Nullable ClientAuthorization clientAuthorization) {\n+        super(accessTokenEndpoint, accessTokenEndpointPath, clientAuthorization);\n+    }\n+\n+    /**\n+     * Makes Access Token Refresh request using the given {@code refresh_token} and handles the response\n+     * converting the result data to {@link GrantedOAuth2AccessToken}.\n+     * @param refreshToken The Refresh Token issued to the client to re-new an Access Token.\n+     * @param scope OPTIONAL. Scope to request for the token. A list of space-delimited,\n+     *              case-sensitive strings. The strings are defined by the authorization server.\n+     *              The authorization server MAY fully or partially ignore the scope requested by the\n+     *              client, based on the authorization server policy or the resource owner's\n+     *              instructions. If the issued access token scope is different from the one requested\n+     *              by the client, the authorization server MUST include the \"scope\" response\n+     *              parameter to inform the client of the actual scope granted.\n+     *              If the client omits the scope parameter when requesting authorization, the\n+     *              authorization server MUST either process the request using a pre-defined default\n+     *              value or fail the request indicating an invalid scope.\n+     * @return A {@link CompletableFuture} carrying the target result as {@link GrantedOAuth2AccessToken}.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    public CompletableFuture<GrantedOAuth2AccessToken> make(String refreshToken, @Nullable String scope) {\n+\n+        requireNonNull(refreshToken, REFRESH_TOKEN);\n+        final LinkedHashMap<String, String> requestFormItems = new LinkedHashMap<>(3);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MzI1OQ=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjA3MDY1OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/ResourceOwnerPasswordCredentialsTokenRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoyMDo0OFrOG_g-Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOToxNTowN1rOHBgytg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MzcxNQ==", "bodyText": "Ditto - could use Supplier<BasicToken>?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469253715", "createdAt": "2020-08-12T13:20:48Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/ResourceOwnerPasswordCredentialsTokenRequest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.SCOPE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+\n+/**\n+ * Implements Resource Owner Password Credentials Grant request\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-4.3\">[RFC6749], Section 4.3</a>.\n+ */\n+class ResourceOwnerPasswordCredentialsTokenRequest extends AbstractAccessTokenRequest {\n+\n+    private static final String USERNAME = \"username\";\n+    private static final String PASSWORD = \"password\";\n+    private static final String PASSWORD_GRANT_TYPE = PASSWORD;\n+\n+    private final Supplier<? extends Map.Entry<String, String>> userCredentialsSupplier;\n+\n+    /**\n+     * Implements Resource Owner Password Credentials Grant request/response flow,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-4.3\">[RFC6749], Section 4.3</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     * @param userCredentialsSupplier A supplier of user credentials: \"username\" and \"password\" used to grant\n+     *                                the Access Token.\n+     */\n+    ResourceOwnerPasswordCredentialsTokenRequest(\n+            WebClient accessTokenEndpoint, String accessTokenEndpointPath,\n+            @Nullable ClientAuthorization clientAuthorization,\n+            Supplier<? extends Map.Entry<String, String>> userCredentialsSupplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM0Nzg5NA==", "bodyText": "Same response as above...\nNo, it should be very generic. Credentials will come most likely from some kind of \"secret\" store like Vault (e.g. LogicalResponse).", "url": "https://github.com/line/armeria/pull/2840#discussion_r471347894", "createdAt": "2020-08-17T09:15:07Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/ResourceOwnerPasswordCredentialsTokenRequest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken.SCOPE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.auth.oauth2.ClientAuthorization;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+\n+/**\n+ * Implements Resource Owner Password Credentials Grant request\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-4.3\">[RFC6749], Section 4.3</a>.\n+ */\n+class ResourceOwnerPasswordCredentialsTokenRequest extends AbstractAccessTokenRequest {\n+\n+    private static final String USERNAME = \"username\";\n+    private static final String PASSWORD = \"password\";\n+    private static final String PASSWORD_GRANT_TYPE = PASSWORD;\n+\n+    private final Supplier<? extends Map.Entry<String, String>> userCredentialsSupplier;\n+\n+    /**\n+     * Implements Resource Owner Password Credentials Grant request/response flow,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-4.3\">[RFC6749], Section 4.3</a>.\n+     *\n+     * @param accessTokenEndpoint A {@link WebClient} to facilitate an Access Token request. Must correspond to\n+     *                            the Access Token endpoint of the OAuth 2 system.\n+     * @param accessTokenEndpointPath A URI path that corresponds to the Access Token endpoint of the\n+     *                                OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     * @param userCredentialsSupplier A supplier of user credentials: \"username\" and \"password\" used to grant\n+     *                                the Access Token.\n+     */\n+    ResourceOwnerPasswordCredentialsTokenRequest(\n+            WebClient accessTokenEndpoint, String accessTokenEndpointPath,\n+            @Nullable ClientAuthorization clientAuthorization,\n+            Supplier<? extends Map.Entry<String, String>> userCredentialsSupplier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MzcxNQ=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjA4MDczOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/TokenLifecycleManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoyMzowM1rOG_hEcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOToxOTo1NVrOHBg8uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1NTI4MA==", "bodyText": "Global comment: Could we use UnmodifiableFuture.completedFuture() wherever possible, so that a caller cannot complete or cancel the returned future arbitrarily?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469255280", "createdAt": "2020-08-12T13:23:03Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/TokenLifecycleManager.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.BiPredicate;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.SerialFuture;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Holds a token object and facilitates its lifecycle based on a number of procedures,\n+ * such as supply, update, load, store.\n+ * @param <T> the type of the token object\n+ */\n+class TokenLifecycleManager<T> {\n+\n+    /**\n+     * Holds a reference to the token.\n+     */\n+    private final AtomicReference<T> ref;\n+\n+    /**\n+     * Executes token operations serially on a separate thread.\n+     */\n+    private final SerialFuture serialFuture;\n+\n+    private final BiPredicate<? super T, Instant> validator;\n+\n+    private final Predicate<? super T> isUpdatable;\n+\n+    private final Predicate<Throwable> shallResupply;\n+\n+    private final Function<? super T, CompletionStage<? extends T>> serviceSupplier;\n+\n+    @Nullable\n+    private final Function<? super T, CompletionStage<? extends T>> serviceUpdater;\n+\n+    @Nullable\n+    private final Supplier<? extends T> storageSupplier;\n+\n+    @Nullable\n+    private final Consumer<? super T> storageConsumer;\n+\n+    /**\n+     * Constructs new {@link TokenLifecycleManager}.\n+     * @param validator A {@link BiPredicate} that tests the token for validity at the {@link Instant} time.\n+     * @param isUpdatable A {@link Predicate} that tests whether the token object can be updated or re-supplied.\n+     * @param shallResupply A {@link Predicate} that tests whether given {@link Throwable} indicates that\n+     *                      the token shall be re-supplied after the update operation failure.\n+     * @param serviceSupplier A {@link Function} that supplies an initial token object.\n+     * @param serviceUpdater A {@link Function} that updates token object.\n+     * @param storageSupplier A {@link Supplier} that can optionally load previously stored token object.\n+     * @param storageConsumer A {@link Consumer} that can optionally store token object.\n+     * @param executor An optional {@link Executor} that facilitates asynchronous supply and update operations.\n+     *                 A new single thread {@link Executor} will be created using\n+     *                 {@link Executors#newSingleThreadExecutor()} if the {@code null}.\n+     */\n+    TokenLifecycleManager(BiPredicate<? super T, Instant> validator,\n+                          Predicate<? super T> isUpdatable, Predicate<Throwable> shallResupply,\n+                          Function<? super T, CompletionStage<? extends T>> serviceSupplier,\n+                          @Nullable Function<? super T, CompletionStage<? extends T>> serviceUpdater,\n+                          @Nullable Supplier<? extends T> storageSupplier,\n+                          @Nullable Consumer<? super T> storageConsumer,\n+                          @Nullable Executor executor) {\n+        ref = new AtomicReference<>();\n+        serialFuture = new SerialFuture(executor);\n+        this.validator = requireNonNull(validator, \"validator\");\n+        this.isUpdatable = requireNonNull(isUpdatable, \"isUpdatable\");\n+        this.shallResupply = requireNonNull(shallResupply, \"shallResupply\");\n+        this.serviceSupplier = requireNonNull(serviceSupplier, \"serviceSupplier\");\n+        this.serviceUpdater = serviceUpdater;\n+        this.storageSupplier = storageSupplier;\n+        this.storageConsumer = storageConsumer;\n+    }\n+\n+    /**\n+     * Provides managed token object asynchronously. This operation may involve initial token supply or\n+     * token update operation, if required.\n+     */\n+    public CompletionStage<T> get() {\n+        final T t = ref.get();\n+        if (t != null) {\n+            // token already present\n+            return validateOrUpdate(t);\n+        }\n+\n+        // token is not yet present\n+        // try to supply an initial token serially using a serial execution\n+        return serialFuture.executeAsync(this::supplySerially);\n+    }\n+\n+    private CompletionStage<T> supplySerially() {\n+        // re-check if the token already present\n+        T t = ref.get();\n+        if (t != null) {\n+            // token already present\n+            return validateOrUpdate(t, false);\n+        }\n+\n+        // token not yet loaded\n+        // try loading from storage\n+        t = load();\n+        if (t != null) {\n+            // token loaded\n+            return validateOrUpdate(t, true);\n+        }\n+\n+        // token has never been supplied\n+        // otherwise, supply initial value\n+        return supplyInitial();\n+    }\n+\n+    /**\n+     * Updates the token object if it's invalid at the given {@link Instant} time.\n+     */\n+    private CompletionStage<T> updateSerially(Instant instant) {\n+        // after acquiring the lock, re-check if it's a valid token\n+        final T t = ref.get();\n+        if (validator.test(t, instant)) {\n+            // simply return a valid token\n+            return CompletableFuture.completedFuture(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1MDQ1Nw==", "bodyText": "I was not aware of this class. But I prefer to stick to Java API whenever possible.", "url": "https://github.com/line/armeria/pull/2840#discussion_r471350457", "createdAt": "2020-08-17T09:19:55Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/TokenLifecycleManager.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.BiPredicate;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.SerialFuture;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Holds a token object and facilitates its lifecycle based on a number of procedures,\n+ * such as supply, update, load, store.\n+ * @param <T> the type of the token object\n+ */\n+class TokenLifecycleManager<T> {\n+\n+    /**\n+     * Holds a reference to the token.\n+     */\n+    private final AtomicReference<T> ref;\n+\n+    /**\n+     * Executes token operations serially on a separate thread.\n+     */\n+    private final SerialFuture serialFuture;\n+\n+    private final BiPredicate<? super T, Instant> validator;\n+\n+    private final Predicate<? super T> isUpdatable;\n+\n+    private final Predicate<Throwable> shallResupply;\n+\n+    private final Function<? super T, CompletionStage<? extends T>> serviceSupplier;\n+\n+    @Nullable\n+    private final Function<? super T, CompletionStage<? extends T>> serviceUpdater;\n+\n+    @Nullable\n+    private final Supplier<? extends T> storageSupplier;\n+\n+    @Nullable\n+    private final Consumer<? super T> storageConsumer;\n+\n+    /**\n+     * Constructs new {@link TokenLifecycleManager}.\n+     * @param validator A {@link BiPredicate} that tests the token for validity at the {@link Instant} time.\n+     * @param isUpdatable A {@link Predicate} that tests whether the token object can be updated or re-supplied.\n+     * @param shallResupply A {@link Predicate} that tests whether given {@link Throwable} indicates that\n+     *                      the token shall be re-supplied after the update operation failure.\n+     * @param serviceSupplier A {@link Function} that supplies an initial token object.\n+     * @param serviceUpdater A {@link Function} that updates token object.\n+     * @param storageSupplier A {@link Supplier} that can optionally load previously stored token object.\n+     * @param storageConsumer A {@link Consumer} that can optionally store token object.\n+     * @param executor An optional {@link Executor} that facilitates asynchronous supply and update operations.\n+     *                 A new single thread {@link Executor} will be created using\n+     *                 {@link Executors#newSingleThreadExecutor()} if the {@code null}.\n+     */\n+    TokenLifecycleManager(BiPredicate<? super T, Instant> validator,\n+                          Predicate<? super T> isUpdatable, Predicate<Throwable> shallResupply,\n+                          Function<? super T, CompletionStage<? extends T>> serviceSupplier,\n+                          @Nullable Function<? super T, CompletionStage<? extends T>> serviceUpdater,\n+                          @Nullable Supplier<? extends T> storageSupplier,\n+                          @Nullable Consumer<? super T> storageConsumer,\n+                          @Nullable Executor executor) {\n+        ref = new AtomicReference<>();\n+        serialFuture = new SerialFuture(executor);\n+        this.validator = requireNonNull(validator, \"validator\");\n+        this.isUpdatable = requireNonNull(isUpdatable, \"isUpdatable\");\n+        this.shallResupply = requireNonNull(shallResupply, \"shallResupply\");\n+        this.serviceSupplier = requireNonNull(serviceSupplier, \"serviceSupplier\");\n+        this.serviceUpdater = serviceUpdater;\n+        this.storageSupplier = storageSupplier;\n+        this.storageConsumer = storageConsumer;\n+    }\n+\n+    /**\n+     * Provides managed token object asynchronously. This operation may involve initial token supply or\n+     * token update operation, if required.\n+     */\n+    public CompletionStage<T> get() {\n+        final T t = ref.get();\n+        if (t != null) {\n+            // token already present\n+            return validateOrUpdate(t);\n+        }\n+\n+        // token is not yet present\n+        // try to supply an initial token serially using a serial execution\n+        return serialFuture.executeAsync(this::supplySerially);\n+    }\n+\n+    private CompletionStage<T> supplySerially() {\n+        // re-check if the token already present\n+        T t = ref.get();\n+        if (t != null) {\n+            // token already present\n+            return validateOrUpdate(t, false);\n+        }\n+\n+        // token not yet loaded\n+        // try loading from storage\n+        t = load();\n+        if (t != null) {\n+            // token loaded\n+            return validateOrUpdate(t, true);\n+        }\n+\n+        // token has never been supplied\n+        // otherwise, supply initial value\n+        return supplyInitial();\n+    }\n+\n+    /**\n+     * Updates the token object if it's invalid at the given {@link Instant} time.\n+     */\n+    private CompletionStage<T> updateSerially(Instant instant) {\n+        // after acquiring the lock, re-check if it's a valid token\n+        final T t = ref.get();\n+        if (validator.test(t, instant)) {\n+            // simply return a valid token\n+            return CompletableFuture.completedFuture(t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1NTI4MA=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjA5MjgxOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/package-info.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoyNTozN1rOG_hLgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMToxODozOVrOHBkpDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1NzA4OA==", "bodyText": "How about adding a hyperlink to a good resource about OAuth 2.0 for the text OAuth 2.0?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469257088", "createdAt": "2020-08-12T13:25:37Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/package-info.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Client-side OAuth 2.0 implementation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQxMDk1Ng==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r471410956", "createdAt": "2020-08-17T11:18:39Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/package-info.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Client-side OAuth 2.0 implementation.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1NzA4OA=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjExMDkxOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AbstractOAuth2Request.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoyOTo0M1rOG_hWdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNDoxOToyNVrOHCCv4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1OTg5Mw==", "bodyText": "I see both *Request and *Grant require WebClient as an endpoint. How about letting a user specify a WebClient when creating an OAuth2Client or OAuth2*Authorizer and changing *Request and *Grant to require a WebClient when sending a request? This way, we can keep only one WebClient in OAuth2Client or OAuth2*Authorizer.\nOr, is there a use case for specifying different WebClient for each request?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469259893", "createdAt": "2020-08-12T13:29:43Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQxMzAyNQ==", "bodyText": "Requests aren't public. Grant passes WebClient to Requests whenever appropriate. So there are no multiple WebClients.\n\n\nis there a use case for specifying different WebClient for each request\nIt all depends on the particular Grant. The Grant decides (as per the spec) whether to use the same endpoint/WebClient for different operations/requests or not.", "url": "https://github.com/line/armeria/pull/2840#discussion_r471413025", "createdAt": "2020-08-17T11:23:14Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1OTg5Mw=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwNDIyNQ==", "bodyText": "OK!", "url": "https://github.com/line/armeria/pull/2840#discussion_r471904225", "createdAt": "2020-08-18T04:19:25Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+public abstract class AbstractOAuth2Request<T> {\n+\n+    private final WebClient endpoint;\n+    private final String endpointPath;\n+    @Nullable\n+    private final ClientAuthorization clientAuthorization;\n+\n+    /**\n+     * A common abstraction for the requests implementing various Authorization request/response flows,\n+     * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+     *\n+     * @param endpoint A {@link WebClient} to facilitate the Authorization requests. Must\n+     *                 correspond to the required Authorization endpoint of the OAuth 2 system.\n+     * @param endpointPath A URI path that corresponds to the Authorization endpoint of the\n+     *                     OAuth 2 system.\n+     * @param clientAuthorization Provides client authorization for the OAuth requests,\n+     *                            as per <a href=\"https://tools.ietf.org/html/rfc6749#section-2.3\">[RFC6749], Section 2.3</a>.\n+     */\n+    protected AbstractOAuth2Request(WebClient endpoint, String endpointPath,\n+                                    @Nullable ClientAuthorization clientAuthorization) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1OTg5Mw=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjE0MzcwOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessToken.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzozNzoyNlrOG_hqPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMTowOTo1OVrOHCOlWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2NDk1OA==", "bodyText": "Should these be public? If we want to hide these fields, we could add private or remove public. If it's accessed by the classes in other package, we could extract these constants into a class like OAuth2Constants in internal.common.auth.oauth2 package to hide them from the public API.", "url": "https://github.com/line/armeria/pull/2840#discussion_r469264958", "createdAt": "2020-08-12T13:37:26Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+public class GrantedOAuth2AccessToken implements Serializable {\n+\n+    private static final long serialVersionUID = 8698118404098897958L;\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessToken} based on the {@code JSON}-formatted raw response body and\n+     * optional raw formatted {@code scope} used to request the token.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @param requestScope OPTIONAL. A list of space-delimited, case-sensitive strings.\n+     *                     The strings are defined by the authorization server.\n+     *                     The authorization server MAY fully or partially ignore the scope requested by the\n+     *                     client, based on the authorization server policy or the resource owner's\n+     *                     instructions. If the issued access token scope is different from the one requested\n+     *                     by the client, the authorization server MUST include the \"scope\" response\n+     *                     parameter to inform the client of the actual scope granted.\n+     *                     If the client omits the scope parameter when requesting authorization, the\n+     *                     authorization server MUST either process the request using a pre-defined default\n+     *                     value or fail the request indicating an invalid scope.\n+     * @return A new instance of {@link GrantedOAuth2AccessToken}.\n+     */\n+    public static GrantedOAuth2AccessToken of(String rawResponse, @Nullable String requestScope) {\n+        return GrantedOAuth2AccessTokenBuilder.of(rawResponse, requestScope);\n+    }\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessTokenBuilder} to build a new {@link GrantedOAuth2AccessToken} and\n+     * supplied it with a value of {@code access_token} Access Token response field.\n+     * @return A new instance of {@link GrantedOAuth2AccessTokenBuilder}.\n+     */\n+    public static GrantedOAuth2AccessTokenBuilder builder(String accessToken) {\n+        return new GrantedOAuth2AccessTokenBuilder(accessToken);\n+    }\n+\n+    public static final String ACCESS_TOKEN = \"access_token\";\n+    public static final String REFRESH_TOKEN = \"refresh_token\";\n+    public static final String SCOPE = \"scope\";\n+    public static final String TOKEN_TYPE = \"token_type\";\n+    public static final String EXPIRES_IN = \"expires_in\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQxNDgxMQ==", "bodyText": "Those were not public before, but since you've asked me to put various requests into different packages, I've made those public. Weather or not those constants extracted into a separate class, those would remain public.", "url": "https://github.com/line/armeria/pull/2840#discussion_r471414811", "createdAt": "2020-08-17T11:26:55Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+public class GrantedOAuth2AccessToken implements Serializable {\n+\n+    private static final long serialVersionUID = 8698118404098897958L;\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessToken} based on the {@code JSON}-formatted raw response body and\n+     * optional raw formatted {@code scope} used to request the token.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @param requestScope OPTIONAL. A list of space-delimited, case-sensitive strings.\n+     *                     The strings are defined by the authorization server.\n+     *                     The authorization server MAY fully or partially ignore the scope requested by the\n+     *                     client, based on the authorization server policy or the resource owner's\n+     *                     instructions. If the issued access token scope is different from the one requested\n+     *                     by the client, the authorization server MUST include the \"scope\" response\n+     *                     parameter to inform the client of the actual scope granted.\n+     *                     If the client omits the scope parameter when requesting authorization, the\n+     *                     authorization server MUST either process the request using a pre-defined default\n+     *                     value or fail the request indicating an invalid scope.\n+     * @return A new instance of {@link GrantedOAuth2AccessToken}.\n+     */\n+    public static GrantedOAuth2AccessToken of(String rawResponse, @Nullable String requestScope) {\n+        return GrantedOAuth2AccessTokenBuilder.of(rawResponse, requestScope);\n+    }\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessTokenBuilder} to build a new {@link GrantedOAuth2AccessToken} and\n+     * supplied it with a value of {@code access_token} Access Token response field.\n+     * @return A new instance of {@link GrantedOAuth2AccessTokenBuilder}.\n+     */\n+    public static GrantedOAuth2AccessTokenBuilder builder(String accessToken) {\n+        return new GrantedOAuth2AccessTokenBuilder(accessToken);\n+    }\n+\n+    public static final String ACCESS_TOKEN = \"access_token\";\n+    public static final String REFRESH_TOKEN = \"refresh_token\";\n+    public static final String SCOPE = \"scope\";\n+    public static final String TOKEN_TYPE = \"token_type\";\n+    public static final String EXPIRES_IN = \"expires_in\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2NDk1OA=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwNDcwNQ==", "bodyText": "Yeah, what I'm suggesting is to extract these public constants into a new class like OAuth2Constants in an internal package - internal.common.auth.oauth2. We exclude the internal packages from our Javadoc and a user usually knows it's not a good idea to use the classes in an 'internal' package, so we are sort of 'hiding' it from the public API, although not perfect.", "url": "https://github.com/line/armeria/pull/2840#discussion_r471904705", "createdAt": "2020-08-18T04:21:11Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+public class GrantedOAuth2AccessToken implements Serializable {\n+\n+    private static final long serialVersionUID = 8698118404098897958L;\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessToken} based on the {@code JSON}-formatted raw response body and\n+     * optional raw formatted {@code scope} used to request the token.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @param requestScope OPTIONAL. A list of space-delimited, case-sensitive strings.\n+     *                     The strings are defined by the authorization server.\n+     *                     The authorization server MAY fully or partially ignore the scope requested by the\n+     *                     client, based on the authorization server policy or the resource owner's\n+     *                     instructions. If the issued access token scope is different from the one requested\n+     *                     by the client, the authorization server MUST include the \"scope\" response\n+     *                     parameter to inform the client of the actual scope granted.\n+     *                     If the client omits the scope parameter when requesting authorization, the\n+     *                     authorization server MUST either process the request using a pre-defined default\n+     *                     value or fail the request indicating an invalid scope.\n+     * @return A new instance of {@link GrantedOAuth2AccessToken}.\n+     */\n+    public static GrantedOAuth2AccessToken of(String rawResponse, @Nullable String requestScope) {\n+        return GrantedOAuth2AccessTokenBuilder.of(rawResponse, requestScope);\n+    }\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessTokenBuilder} to build a new {@link GrantedOAuth2AccessToken} and\n+     * supplied it with a value of {@code access_token} Access Token response field.\n+     * @return A new instance of {@link GrantedOAuth2AccessTokenBuilder}.\n+     */\n+    public static GrantedOAuth2AccessTokenBuilder builder(String accessToken) {\n+        return new GrantedOAuth2AccessTokenBuilder(accessToken);\n+    }\n+\n+    public static final String ACCESS_TOKEN = \"access_token\";\n+    public static final String REFRESH_TOKEN = \"refresh_token\";\n+    public static final String SCOPE = \"scope\";\n+    public static final String TOKEN_TYPE = \"token_type\";\n+    public static final String EXPIRES_IN = \"expires_in\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2NDk1OA=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA5ODEzOQ==", "bodyText": "moved to internal as suggested", "url": "https://github.com/line/armeria/pull/2840#discussion_r472098139", "createdAt": "2020-08-18T11:09:59Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+public class GrantedOAuth2AccessToken implements Serializable {\n+\n+    private static final long serialVersionUID = 8698118404098897958L;\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessToken} based on the {@code JSON}-formatted raw response body and\n+     * optional raw formatted {@code scope} used to request the token.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @param requestScope OPTIONAL. A list of space-delimited, case-sensitive strings.\n+     *                     The strings are defined by the authorization server.\n+     *                     The authorization server MAY fully or partially ignore the scope requested by the\n+     *                     client, based on the authorization server policy or the resource owner's\n+     *                     instructions. If the issued access token scope is different from the one requested\n+     *                     by the client, the authorization server MUST include the \"scope\" response\n+     *                     parameter to inform the client of the actual scope granted.\n+     *                     If the client omits the scope parameter when requesting authorization, the\n+     *                     authorization server MUST either process the request using a pre-defined default\n+     *                     value or fail the request indicating an invalid scope.\n+     * @return A new instance of {@link GrantedOAuth2AccessToken}.\n+     */\n+    public static GrantedOAuth2AccessToken of(String rawResponse, @Nullable String requestScope) {\n+        return GrantedOAuth2AccessTokenBuilder.of(rawResponse, requestScope);\n+    }\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessTokenBuilder} to build a new {@link GrantedOAuth2AccessToken} and\n+     * supplied it with a value of {@code access_token} Access Token response field.\n+     * @return A new instance of {@link GrantedOAuth2AccessTokenBuilder}.\n+     */\n+    public static GrantedOAuth2AccessTokenBuilder builder(String accessToken) {\n+        return new GrantedOAuth2AccessTokenBuilder(accessToken);\n+    }\n+\n+    public static final String ACCESS_TOKEN = \"access_token\";\n+    public static final String REFRESH_TOKEN = \"refresh_token\";\n+    public static final String SCOPE = \"scope\";\n+    public static final String TOKEN_TYPE = \"token_type\";\n+    public static final String EXPIRES_IN = \"expires_in\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2NDk1OA=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjE0NzU5OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessToken.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzozODoxNVrOG_hsjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMzowMTozNVrOHCS7Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2NTU0OQ==", "bodyText": "Global comment: Could use {@value ...} expression, e.g. {@value #ACCESS_TOKEN}.", "url": "https://github.com/line/armeria/pull/2840#discussion_r469265549", "createdAt": "2020-08-12T13:38:15Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+public class GrantedOAuth2AccessToken implements Serializable {\n+\n+    private static final long serialVersionUID = 8698118404098897958L;\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessToken} based on the {@code JSON}-formatted raw response body and\n+     * optional raw formatted {@code scope} used to request the token.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @param requestScope OPTIONAL. A list of space-delimited, case-sensitive strings.\n+     *                     The strings are defined by the authorization server.\n+     *                     The authorization server MAY fully or partially ignore the scope requested by the\n+     *                     client, based on the authorization server policy or the resource owner's\n+     *                     instructions. If the issued access token scope is different from the one requested\n+     *                     by the client, the authorization server MUST include the \"scope\" response\n+     *                     parameter to inform the client of the actual scope granted.\n+     *                     If the client omits the scope parameter when requesting authorization, the\n+     *                     authorization server MUST either process the request using a pre-defined default\n+     *                     value or fail the request indicating an invalid scope.\n+     * @return A new instance of {@link GrantedOAuth2AccessToken}.\n+     */\n+    public static GrantedOAuth2AccessToken of(String rawResponse, @Nullable String requestScope) {\n+        return GrantedOAuth2AccessTokenBuilder.of(rawResponse, requestScope);\n+    }\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessTokenBuilder} to build a new {@link GrantedOAuth2AccessToken} and\n+     * supplied it with a value of {@code access_token} Access Token response field.\n+     * @return A new instance of {@link GrantedOAuth2AccessTokenBuilder}.\n+     */\n+    public static GrantedOAuth2AccessTokenBuilder builder(String accessToken) {\n+        return new GrantedOAuth2AccessTokenBuilder(accessToken);\n+    }\n+\n+    public static final String ACCESS_TOKEN = \"access_token\";\n+    public static final String REFRESH_TOKEN = \"refresh_token\";\n+    public static final String SCOPE = \"scope\";\n+    public static final String TOKEN_TYPE = \"token_type\";\n+    public static final String EXPIRES_IN = \"expires_in\";\n+\n+    static final String ISSUED_AT = \"issued_at\";\n+\n+    static final String SCOPE_SEPARATOR = \" \";\n+    static final char AUTHORIZATION_SEPARATOR = ' ';\n+\n+    static final String DEFAULT_TOKEN_TYPE = \"bearer\";\n+\n+    static final ObjectMapper JSON = new ObjectMapper();\n+\n+    /**\n+     * {@code access_token} Access Token response field,\n+     * REQUIRED. The access token issued by the authorization server.\n+     */\n+    private final String accessToken;\n+\n+    /**\n+     * {@code token_type} Access Token response field,\n+     * REQUIRED. The type of the token issued as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>, e.g. \"bearer\".\n+     * Value is case insensitive.\n+     */\n+    @Nullable\n+    private final String tokenType;\n+\n+    /**\n+     * {@code expires_in} Access Token response field,\n+     * RECOMMENDED. The lifetime in seconds of the access token. For example, the value \"3600\" denotes\n+     * that the access token will expire in one hour from the time the response was generated. If\n+     * omitted, the authorization server SHOULD provide the expiration time via other means or\n+     * document the default value.\n+     */\n+    @Nullable\n+    private final Duration expiresIn;\n+\n+    /**\n+     * {@code refresh_token} Access Token response field,\n+     * OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same\n+     * authorization grant as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     */\n+    @Nullable\n+    private final String refreshToken;\n+\n+    /**\n+     * {@code scope} Access Token response field,\n+     * OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of\n+     * the access token as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     * A list of space-delimited, case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     * The authorization server MAY fully or partially ignore the scope requested by the client, based\n+     * on the authorization server policy or the resource owner's instructions.  If the issued access\n+     * token scope is different from the one requested by the client, the authorization server MUST\n+     * include the \"scope\" response parameter to inform the client of the actual scope granted.\n+     * If the client omits the scope parameter when requesting authorization, the authorization server\n+     * MUST either process the request using a pre-defined default value or fail the request\n+     * indicating an invalid scope.\n+     */\n+    @Nullable\n+    private final String scope;\n+\n+    /**\n+     * A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    private final Set<String> scopeSet;\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Access Token response,\n+     * OPTIONAL.\n+     */\n+    private final Map<String, String> extras;\n+\n+    private final Instant issuedAt;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    @Nullable\n+    private transient Instant expiresAt;\n+\n+    @Nullable\n+    private transient String authorization;\n+\n+    @Nullable\n+    private transient String toString;\n+\n+    GrantedOAuth2AccessToken(String accessToken, @Nullable String tokenType,\n+                             Instant issuedAt, @Nullable Duration expiresIn,\n+                             @Nullable String refreshToken, @Nullable List<String> scopeList,\n+                             @Nullable ImmutableMap<String, String> extras,\n+                             @Nullable String rawResponse) {\n+        // token fields\n+        this.accessToken = requireNonNull(accessToken, ACCESS_TOKEN);\n+        this.tokenType = tokenType;\n+        this.expiresIn = expiresIn;\n+        this.issuedAt = requireNonNull(issuedAt, ISSUED_AT);\n+        this.refreshToken = refreshToken;\n+        scope = toScopeString(scopeList);\n+        scopeSet = (scopeList == null) ? ImmutableSet.of() : ImmutableSet.copyOf(scopeList);\n+        this.extras = (extras == null) ? ImmutableMap.of() : extras;\n+        // raw response\n+        this.rawResponse = rawResponse;\n+    }\n+\n+    /**\n+     * {@code access_token} Access Token response field,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEwMjEyOQ==", "bodyText": "Somehow it does not work well with static imports", "url": "https://github.com/line/armeria/pull/2840#discussion_r472102129", "createdAt": "2020-08-18T11:18:31Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+public class GrantedOAuth2AccessToken implements Serializable {\n+\n+    private static final long serialVersionUID = 8698118404098897958L;\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessToken} based on the {@code JSON}-formatted raw response body and\n+     * optional raw formatted {@code scope} used to request the token.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @param requestScope OPTIONAL. A list of space-delimited, case-sensitive strings.\n+     *                     The strings are defined by the authorization server.\n+     *                     The authorization server MAY fully or partially ignore the scope requested by the\n+     *                     client, based on the authorization server policy or the resource owner's\n+     *                     instructions. If the issued access token scope is different from the one requested\n+     *                     by the client, the authorization server MUST include the \"scope\" response\n+     *                     parameter to inform the client of the actual scope granted.\n+     *                     If the client omits the scope parameter when requesting authorization, the\n+     *                     authorization server MUST either process the request using a pre-defined default\n+     *                     value or fail the request indicating an invalid scope.\n+     * @return A new instance of {@link GrantedOAuth2AccessToken}.\n+     */\n+    public static GrantedOAuth2AccessToken of(String rawResponse, @Nullable String requestScope) {\n+        return GrantedOAuth2AccessTokenBuilder.of(rawResponse, requestScope);\n+    }\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessTokenBuilder} to build a new {@link GrantedOAuth2AccessToken} and\n+     * supplied it with a value of {@code access_token} Access Token response field.\n+     * @return A new instance of {@link GrantedOAuth2AccessTokenBuilder}.\n+     */\n+    public static GrantedOAuth2AccessTokenBuilder builder(String accessToken) {\n+        return new GrantedOAuth2AccessTokenBuilder(accessToken);\n+    }\n+\n+    public static final String ACCESS_TOKEN = \"access_token\";\n+    public static final String REFRESH_TOKEN = \"refresh_token\";\n+    public static final String SCOPE = \"scope\";\n+    public static final String TOKEN_TYPE = \"token_type\";\n+    public static final String EXPIRES_IN = \"expires_in\";\n+\n+    static final String ISSUED_AT = \"issued_at\";\n+\n+    static final String SCOPE_SEPARATOR = \" \";\n+    static final char AUTHORIZATION_SEPARATOR = ' ';\n+\n+    static final String DEFAULT_TOKEN_TYPE = \"bearer\";\n+\n+    static final ObjectMapper JSON = new ObjectMapper();\n+\n+    /**\n+     * {@code access_token} Access Token response field,\n+     * REQUIRED. The access token issued by the authorization server.\n+     */\n+    private final String accessToken;\n+\n+    /**\n+     * {@code token_type} Access Token response field,\n+     * REQUIRED. The type of the token issued as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>, e.g. \"bearer\".\n+     * Value is case insensitive.\n+     */\n+    @Nullable\n+    private final String tokenType;\n+\n+    /**\n+     * {@code expires_in} Access Token response field,\n+     * RECOMMENDED. The lifetime in seconds of the access token. For example, the value \"3600\" denotes\n+     * that the access token will expire in one hour from the time the response was generated. If\n+     * omitted, the authorization server SHOULD provide the expiration time via other means or\n+     * document the default value.\n+     */\n+    @Nullable\n+    private final Duration expiresIn;\n+\n+    /**\n+     * {@code refresh_token} Access Token response field,\n+     * OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same\n+     * authorization grant as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     */\n+    @Nullable\n+    private final String refreshToken;\n+\n+    /**\n+     * {@code scope} Access Token response field,\n+     * OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of\n+     * the access token as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     * A list of space-delimited, case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     * The authorization server MAY fully or partially ignore the scope requested by the client, based\n+     * on the authorization server policy or the resource owner's instructions.  If the issued access\n+     * token scope is different from the one requested by the client, the authorization server MUST\n+     * include the \"scope\" response parameter to inform the client of the actual scope granted.\n+     * If the client omits the scope parameter when requesting authorization, the authorization server\n+     * MUST either process the request using a pre-defined default value or fail the request\n+     * indicating an invalid scope.\n+     */\n+    @Nullable\n+    private final String scope;\n+\n+    /**\n+     * A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    private final Set<String> scopeSet;\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Access Token response,\n+     * OPTIONAL.\n+     */\n+    private final Map<String, String> extras;\n+\n+    private final Instant issuedAt;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    @Nullable\n+    private transient Instant expiresAt;\n+\n+    @Nullable\n+    private transient String authorization;\n+\n+    @Nullable\n+    private transient String toString;\n+\n+    GrantedOAuth2AccessToken(String accessToken, @Nullable String tokenType,\n+                             Instant issuedAt, @Nullable Duration expiresIn,\n+                             @Nullable String refreshToken, @Nullable List<String> scopeList,\n+                             @Nullable ImmutableMap<String, String> extras,\n+                             @Nullable String rawResponse) {\n+        // token fields\n+        this.accessToken = requireNonNull(accessToken, ACCESS_TOKEN);\n+        this.tokenType = tokenType;\n+        this.expiresIn = expiresIn;\n+        this.issuedAt = requireNonNull(issuedAt, ISSUED_AT);\n+        this.refreshToken = refreshToken;\n+        scope = toScopeString(scopeList);\n+        scopeSet = (scopeList == null) ? ImmutableSet.of() : ImmutableSet.copyOf(scopeList);\n+        this.extras = (extras == null) ? ImmutableMap.of() : extras;\n+        // raw response\n+        this.rawResponse = rawResponse;\n+    }\n+\n+    /**\n+     * {@code access_token} Access Token response field,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2NTU0OQ=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjExMDYzMw==", "bodyText": "Does {@value ClassName#FIELD_NAME} work, then?", "url": "https://github.com/line/armeria/pull/2840#discussion_r472110633", "createdAt": "2020-08-18T11:35:19Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+public class GrantedOAuth2AccessToken implements Serializable {\n+\n+    private static final long serialVersionUID = 8698118404098897958L;\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessToken} based on the {@code JSON}-formatted raw response body and\n+     * optional raw formatted {@code scope} used to request the token.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @param requestScope OPTIONAL. A list of space-delimited, case-sensitive strings.\n+     *                     The strings are defined by the authorization server.\n+     *                     The authorization server MAY fully or partially ignore the scope requested by the\n+     *                     client, based on the authorization server policy or the resource owner's\n+     *                     instructions. If the issued access token scope is different from the one requested\n+     *                     by the client, the authorization server MUST include the \"scope\" response\n+     *                     parameter to inform the client of the actual scope granted.\n+     *                     If the client omits the scope parameter when requesting authorization, the\n+     *                     authorization server MUST either process the request using a pre-defined default\n+     *                     value or fail the request indicating an invalid scope.\n+     * @return A new instance of {@link GrantedOAuth2AccessToken}.\n+     */\n+    public static GrantedOAuth2AccessToken of(String rawResponse, @Nullable String requestScope) {\n+        return GrantedOAuth2AccessTokenBuilder.of(rawResponse, requestScope);\n+    }\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessTokenBuilder} to build a new {@link GrantedOAuth2AccessToken} and\n+     * supplied it with a value of {@code access_token} Access Token response field.\n+     * @return A new instance of {@link GrantedOAuth2AccessTokenBuilder}.\n+     */\n+    public static GrantedOAuth2AccessTokenBuilder builder(String accessToken) {\n+        return new GrantedOAuth2AccessTokenBuilder(accessToken);\n+    }\n+\n+    public static final String ACCESS_TOKEN = \"access_token\";\n+    public static final String REFRESH_TOKEN = \"refresh_token\";\n+    public static final String SCOPE = \"scope\";\n+    public static final String TOKEN_TYPE = \"token_type\";\n+    public static final String EXPIRES_IN = \"expires_in\";\n+\n+    static final String ISSUED_AT = \"issued_at\";\n+\n+    static final String SCOPE_SEPARATOR = \" \";\n+    static final char AUTHORIZATION_SEPARATOR = ' ';\n+\n+    static final String DEFAULT_TOKEN_TYPE = \"bearer\";\n+\n+    static final ObjectMapper JSON = new ObjectMapper();\n+\n+    /**\n+     * {@code access_token} Access Token response field,\n+     * REQUIRED. The access token issued by the authorization server.\n+     */\n+    private final String accessToken;\n+\n+    /**\n+     * {@code token_type} Access Token response field,\n+     * REQUIRED. The type of the token issued as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>, e.g. \"bearer\".\n+     * Value is case insensitive.\n+     */\n+    @Nullable\n+    private final String tokenType;\n+\n+    /**\n+     * {@code expires_in} Access Token response field,\n+     * RECOMMENDED. The lifetime in seconds of the access token. For example, the value \"3600\" denotes\n+     * that the access token will expire in one hour from the time the response was generated. If\n+     * omitted, the authorization server SHOULD provide the expiration time via other means or\n+     * document the default value.\n+     */\n+    @Nullable\n+    private final Duration expiresIn;\n+\n+    /**\n+     * {@code refresh_token} Access Token response field,\n+     * OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same\n+     * authorization grant as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     */\n+    @Nullable\n+    private final String refreshToken;\n+\n+    /**\n+     * {@code scope} Access Token response field,\n+     * OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of\n+     * the access token as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     * A list of space-delimited, case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     * The authorization server MAY fully or partially ignore the scope requested by the client, based\n+     * on the authorization server policy or the resource owner's instructions.  If the issued access\n+     * token scope is different from the one requested by the client, the authorization server MUST\n+     * include the \"scope\" response parameter to inform the client of the actual scope granted.\n+     * If the client omits the scope parameter when requesting authorization, the authorization server\n+     * MUST either process the request using a pre-defined default value or fail the request\n+     * indicating an invalid scope.\n+     */\n+    @Nullable\n+    private final String scope;\n+\n+    /**\n+     * A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    private final Set<String> scopeSet;\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Access Token response,\n+     * OPTIONAL.\n+     */\n+    private final Map<String, String> extras;\n+\n+    private final Instant issuedAt;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    @Nullable\n+    private transient Instant expiresAt;\n+\n+    @Nullable\n+    private transient String authorization;\n+\n+    @Nullable\n+    private transient String toString;\n+\n+    GrantedOAuth2AccessToken(String accessToken, @Nullable String tokenType,\n+                             Instant issuedAt, @Nullable Duration expiresIn,\n+                             @Nullable String refreshToken, @Nullable List<String> scopeList,\n+                             @Nullable ImmutableMap<String, String> extras,\n+                             @Nullable String rawResponse) {\n+        // token fields\n+        this.accessToken = requireNonNull(accessToken, ACCESS_TOKEN);\n+        this.tokenType = tokenType;\n+        this.expiresIn = expiresIn;\n+        this.issuedAt = requireNonNull(issuedAt, ISSUED_AT);\n+        this.refreshToken = refreshToken;\n+        scope = toScopeString(scopeList);\n+        scopeSet = (scopeList == null) ? ImmutableSet.of() : ImmutableSet.copyOf(scopeList);\n+        this.extras = (extras == null) ? ImmutableMap.of() : extras;\n+        // raw response\n+        this.rawResponse = rawResponse;\n+    }\n+\n+    /**\n+     * {@code access_token} Access Token response field,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2NTU0OQ=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE2OTI5MA==", "bodyText": "yes. fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r472169290", "createdAt": "2020-08-18T13:01:35Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessToken.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.time.format.DateTimeFormatter.ISO_INSTANT;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * Defines a structure of the Access Token Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">[RFC6749], Section 5.1</a>.\n+ */\n+public class GrantedOAuth2AccessToken implements Serializable {\n+\n+    private static final long serialVersionUID = 8698118404098897958L;\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessToken} based on the {@code JSON}-formatted raw response body and\n+     * optional raw formatted {@code scope} used to request the token.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @param requestScope OPTIONAL. A list of space-delimited, case-sensitive strings.\n+     *                     The strings are defined by the authorization server.\n+     *                     The authorization server MAY fully or partially ignore the scope requested by the\n+     *                     client, based on the authorization server policy or the resource owner's\n+     *                     instructions. If the issued access token scope is different from the one requested\n+     *                     by the client, the authorization server MUST include the \"scope\" response\n+     *                     parameter to inform the client of the actual scope granted.\n+     *                     If the client omits the scope parameter when requesting authorization, the\n+     *                     authorization server MUST either process the request using a pre-defined default\n+     *                     value or fail the request indicating an invalid scope.\n+     * @return A new instance of {@link GrantedOAuth2AccessToken}.\n+     */\n+    public static GrantedOAuth2AccessToken of(String rawResponse, @Nullable String requestScope) {\n+        return GrantedOAuth2AccessTokenBuilder.of(rawResponse, requestScope);\n+    }\n+\n+    /**\n+     * Creates a new {@link GrantedOAuth2AccessTokenBuilder} to build a new {@link GrantedOAuth2AccessToken} and\n+     * supplied it with a value of {@code access_token} Access Token response field.\n+     * @return A new instance of {@link GrantedOAuth2AccessTokenBuilder}.\n+     */\n+    public static GrantedOAuth2AccessTokenBuilder builder(String accessToken) {\n+        return new GrantedOAuth2AccessTokenBuilder(accessToken);\n+    }\n+\n+    public static final String ACCESS_TOKEN = \"access_token\";\n+    public static final String REFRESH_TOKEN = \"refresh_token\";\n+    public static final String SCOPE = \"scope\";\n+    public static final String TOKEN_TYPE = \"token_type\";\n+    public static final String EXPIRES_IN = \"expires_in\";\n+\n+    static final String ISSUED_AT = \"issued_at\";\n+\n+    static final String SCOPE_SEPARATOR = \" \";\n+    static final char AUTHORIZATION_SEPARATOR = ' ';\n+\n+    static final String DEFAULT_TOKEN_TYPE = \"bearer\";\n+\n+    static final ObjectMapper JSON = new ObjectMapper();\n+\n+    /**\n+     * {@code access_token} Access Token response field,\n+     * REQUIRED. The access token issued by the authorization server.\n+     */\n+    private final String accessToken;\n+\n+    /**\n+     * {@code token_type} Access Token response field,\n+     * REQUIRED. The type of the token issued as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>, e.g. \"bearer\".\n+     * Value is case insensitive.\n+     */\n+    @Nullable\n+    private final String tokenType;\n+\n+    /**\n+     * {@code expires_in} Access Token response field,\n+     * RECOMMENDED. The lifetime in seconds of the access token. For example, the value \"3600\" denotes\n+     * that the access token will expire in one hour from the time the response was generated. If\n+     * omitted, the authorization server SHOULD provide the expiration time via other means or\n+     * document the default value.\n+     */\n+    @Nullable\n+    private final Duration expiresIn;\n+\n+    /**\n+     * {@code refresh_token} Access Token response field,\n+     * OPTIONAL. The refresh token, which can be used to obtain new access tokens using the same\n+     * authorization grant as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-6\">[RFC6749], Section 6</a>.\n+     */\n+    @Nullable\n+    private final String refreshToken;\n+\n+    /**\n+     * {@code scope} Access Token response field,\n+     * OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED. The scope of\n+     * the access token as described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     * A list of space-delimited, case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     * The authorization server MAY fully or partially ignore the scope requested by the client, based\n+     * on the authorization server policy or the resource owner's instructions.  If the issued access\n+     * token scope is different from the one requested by the client, the authorization server MUST\n+     * include the \"scope\" response parameter to inform the client of the actual scope granted.\n+     * If the client omits the scope parameter when requesting authorization, the authorization server\n+     * MUST either process the request using a pre-defined default value or fail the request\n+     * indicating an invalid scope.\n+     */\n+    @Nullable\n+    private final String scope;\n+\n+    /**\n+     * A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    private final Set<String> scopeSet;\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Access Token response,\n+     * OPTIONAL.\n+     */\n+    private final Map<String, String> extras;\n+\n+    private final Instant issuedAt;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    @Nullable\n+    private transient Instant expiresAt;\n+\n+    @Nullable\n+    private transient String authorization;\n+\n+    @Nullable\n+    private transient String toString;\n+\n+    GrantedOAuth2AccessToken(String accessToken, @Nullable String tokenType,\n+                             Instant issuedAt, @Nullable Duration expiresIn,\n+                             @Nullable String refreshToken, @Nullable List<String> scopeList,\n+                             @Nullable ImmutableMap<String, String> extras,\n+                             @Nullable String rawResponse) {\n+        // token fields\n+        this.accessToken = requireNonNull(accessToken, ACCESS_TOKEN);\n+        this.tokenType = tokenType;\n+        this.expiresIn = expiresIn;\n+        this.issuedAt = requireNonNull(issuedAt, ISSUED_AT);\n+        this.refreshToken = refreshToken;\n+        scope = toScopeString(scopeList);\n+        scopeSet = (scopeList == null) ? ImmutableSet.of() : ImmutableSet.copyOf(scopeList);\n+        this.extras = (extras == null) ? ImmutableMap.of() : extras;\n+        // raw response\n+        this.rawResponse = rawResponse;\n+    }\n+\n+    /**\n+     * {@code access_token} Access Token response field,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2NTU0OQ=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjE1OTk2OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzo0MDo0N1rOG_hz1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMzoyODoyOFrOHCUlvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2NzQxMw==", "bodyText": "Could share one ObjectMapper instance across all classes unless some needs to be configured differently?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469267413", "createdAt": "2020-08-12T13:40:47Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptor.java", "diffHunk": "@@ -0,0 +1,511 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+/**\n+ * Defines a structure of the Token Introspection Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc7662#section-2.2\">[RFC7662], Section 2.2</a>.\n+ */\n+public class OAuth2TokenDescriptor implements Serializable {\n+\n+    private static final long serialVersionUID = -3976877781134216467L;\n+\n+    /**\n+     * Creates a new {@link OAuth2TokenDescriptor} based on the {@code JSON}-formatted raw response body.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @return A new instance of {@link OAuth2TokenDescriptor}.\n+     */\n+    public static OAuth2TokenDescriptor of(String rawResponse) {\n+        return OAuth2TokenDescriptorBuilder.of(rawResponse);\n+    }\n+\n+    /**\n+     * Creates a new {@link OAuth2TokenDescriptorBuilder} to build a new {@link OAuth2TokenDescriptor} and\n+     * supplied it with a value of {@code active} Token Introspection Response field.\n+     * @return A new instance of {@link OAuth2TokenDescriptorBuilder}.\n+     */\n+    public static OAuth2TokenDescriptorBuilder builder(boolean active) {\n+        return new OAuth2TokenDescriptorBuilder(active);\n+    }\n+\n+    static final String ACTIVE = \"active\";\n+    static final String SCOPE = \"scope\";\n+    static final String CLIENT_ID = \"client_id\";\n+    static final String USER_NAME = \"username\";\n+    static final String TOKEN_TYPE = \"token_type\";\n+    static final String EXPIRES_AT = \"exp\";\n+    static final String ISSUED_AT = \"iat\";\n+    static final String NOT_BEFORE = \"nbf\";\n+    static final String SUBJECT = \"sub\";\n+    static final String AUDIENCE = \"aud\";\n+    static final String ISSUER = \"iss\";\n+    static final String JWT_ID = \"jti\";\n+\n+    static final String SCOPE_SEPARATOR = \" \";\n+\n+    static final ObjectMapper JSON = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE5NjU0MQ==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r472196541", "createdAt": "2020-08-18T13:28:28Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptor.java", "diffHunk": "@@ -0,0 +1,511 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+/**\n+ * Defines a structure of the Token Introspection Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc7662#section-2.2\">[RFC7662], Section 2.2</a>.\n+ */\n+public class OAuth2TokenDescriptor implements Serializable {\n+\n+    private static final long serialVersionUID = -3976877781134216467L;\n+\n+    /**\n+     * Creates a new {@link OAuth2TokenDescriptor} based on the {@code JSON}-formatted raw response body.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @return A new instance of {@link OAuth2TokenDescriptor}.\n+     */\n+    public static OAuth2TokenDescriptor of(String rawResponse) {\n+        return OAuth2TokenDescriptorBuilder.of(rawResponse);\n+    }\n+\n+    /**\n+     * Creates a new {@link OAuth2TokenDescriptorBuilder} to build a new {@link OAuth2TokenDescriptor} and\n+     * supplied it with a value of {@code active} Token Introspection Response field.\n+     * @return A new instance of {@link OAuth2TokenDescriptorBuilder}.\n+     */\n+    public static OAuth2TokenDescriptorBuilder builder(boolean active) {\n+        return new OAuth2TokenDescriptorBuilder(active);\n+    }\n+\n+    static final String ACTIVE = \"active\";\n+    static final String SCOPE = \"scope\";\n+    static final String CLIENT_ID = \"client_id\";\n+    static final String USER_NAME = \"username\";\n+    static final String TOKEN_TYPE = \"token_type\";\n+    static final String EXPIRES_AT = \"exp\";\n+    static final String ISSUED_AT = \"iat\";\n+    static final String NOT_BEFORE = \"nbf\";\n+    static final String SUBJECT = \"sub\";\n+    static final String AUDIENCE = \"aud\";\n+    static final String ISSUER = \"iss\";\n+    static final String JWT_ID = \"jti\";\n+\n+    static final String SCOPE_SEPARATOR = \" \";\n+\n+    static final ObjectMapper JSON = new ObjectMapper();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2NzQxMw=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjE2MTcxOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzo0MToxNFrOG_h1Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMzowMTo1NVrOHCS8hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2NzcxOQ==", "bodyText": "Could use {@value ...}", "url": "https://github.com/line/armeria/pull/2840#discussion_r469267719", "createdAt": "2020-08-12T13:41:14Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptor.java", "diffHunk": "@@ -0,0 +1,511 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+/**\n+ * Defines a structure of the Token Introspection Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc7662#section-2.2\">[RFC7662], Section 2.2</a>.\n+ */\n+public class OAuth2TokenDescriptor implements Serializable {\n+\n+    private static final long serialVersionUID = -3976877781134216467L;\n+\n+    /**\n+     * Creates a new {@link OAuth2TokenDescriptor} based on the {@code JSON}-formatted raw response body.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @return A new instance of {@link OAuth2TokenDescriptor}.\n+     */\n+    public static OAuth2TokenDescriptor of(String rawResponse) {\n+        return OAuth2TokenDescriptorBuilder.of(rawResponse);\n+    }\n+\n+    /**\n+     * Creates a new {@link OAuth2TokenDescriptorBuilder} to build a new {@link OAuth2TokenDescriptor} and\n+     * supplied it with a value of {@code active} Token Introspection Response field.\n+     * @return A new instance of {@link OAuth2TokenDescriptorBuilder}.\n+     */\n+    public static OAuth2TokenDescriptorBuilder builder(boolean active) {\n+        return new OAuth2TokenDescriptorBuilder(active);\n+    }\n+\n+    static final String ACTIVE = \"active\";\n+    static final String SCOPE = \"scope\";\n+    static final String CLIENT_ID = \"client_id\";\n+    static final String USER_NAME = \"username\";\n+    static final String TOKEN_TYPE = \"token_type\";\n+    static final String EXPIRES_AT = \"exp\";\n+    static final String ISSUED_AT = \"iat\";\n+    static final String NOT_BEFORE = \"nbf\";\n+    static final String SUBJECT = \"sub\";\n+    static final String AUDIENCE = \"aud\";\n+    static final String ISSUER = \"iss\";\n+    static final String JWT_ID = \"jti\";\n+\n+    static final String SCOPE_SEPARATOR = \" \";\n+\n+    static final ObjectMapper JSON = new ObjectMapper();\n+\n+    /**\n+     * {@code active} Token Introspection Response field,\n+     * REQUIRED. Boolean indicator of whether or not the presented token is currently active. The\n+     * specifics of a token's \"active\" state will vary depending on the implementation of the\n+     * authorization server and the information it keeps about its tokens, but a \"true\" value return\n+     * for the \"active\" property will generally indicate that a given token has been issued by this\n+     * authorization server, has not been revoked by the resource owner, and is within its given time\n+     * window of validity (e.g., after its issuance time and before its expiration time).\n+     */\n+    private final boolean active;\n+\n+    /**\n+     * {@code scope} Token Introspection Response field,\n+     * OPTIONAL. A JSON string containing a space-separated list of scopes associated with this token,\n+     * in the format described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     */\n+    @Nullable\n+    private final String scope;\n+\n+    /**\n+     * A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    private final Set<String> scopeSet;\n+\n+    /**\n+     * {@code client_id} Token Introspection Response field,\n+     * OPTIONAL. Client identifier for the OAuth 2.0 client that requested this token.\n+     */\n+    @Nullable\n+    private final String clientId;\n+\n+    /**\n+     * {@code username} Token Introspection Response field,\n+     * OPTIONAL. Human-readable identifier for the resource owner who authorized this token.\n+     */\n+    @Nullable\n+    private final String userName;\n+\n+    /**\n+     * {@code token_type} Token Introspection Response field,\n+     * OPTIONAL. Type of the token as defined at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     */\n+    @Nullable\n+    private final String tokenType;\n+\n+    /**\n+     * {@code exp} Token Introspection Response field,\n+     * OPTIONAL. Integer timestamp, measured in the number of seconds since January 1 1970 UTC,\n+     * indicating when this token will expire, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final Instant expiresAt;\n+\n+    /**\n+     * {@code iat} Token Introspection Response field,\n+     * OPTIONAL. Integer timestamp, measured in the number of seconds since January 1 1970 UTC,\n+     * indicating when this token was originally issued, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final Instant issuedAt;\n+\n+    /**\n+     * {@code nbf} Token Introspection Response field,\n+     * OPTIONAL. Integer timestamp, measured in the number of seconds since January 1 1970 UTC,\n+     * indicating when this token is not to be used before, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final Instant notBefore;\n+\n+    /**\n+     * {@code sub} Token Introspection Response field,\n+     * OPTIONAL. Subject of the token. Usually a machine-readable\n+     * identifier of the resource owner who authorized this token. As defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String subject;\n+\n+    /**\n+     * {@code aud} Token Introspection Response field,\n+     * OPTIONAL. Service-specific string identifier or list of string identifiers representing the\n+     * intended audience for this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String audience;\n+\n+    /**\n+     * {@code iss} Token Introspection Response field,\n+     * OPTIONAL. String representing the issuer of this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String issuer;\n+\n+    /**\n+     * {@code jti} Token Introspection Response field,\n+     * OPTIONAL. String identifier for the token - JWT ID, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String jwtId;\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Token Introspection Response,\n+     * OPTIONAL.\n+     */\n+    private final Map<String, String> extras;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    @Nullable\n+    private transient String toString;\n+\n+    OAuth2TokenDescriptor(boolean active, @Nullable List<String> scopeList, @Nullable String clientId,\n+                          @Nullable String userName, @Nullable String tokenType,\n+                          @Nullable Instant expiresAt, @Nullable Instant issuedAt,\n+                          @Nullable Instant notBefore, @Nullable String subject,\n+                          @Nullable String audience, @Nullable String issuer,\n+                          @Nullable String jwtId, @Nullable ImmutableMap<String, String> extras,\n+                          @Nullable String rawResponse) {\n+        this.active = active;\n+        scope = toScopeString(scopeList);\n+        scopeSet = (scopeList == null) ? ImmutableSet.of() : ImmutableSet.copyOf(scopeList);\n+        this.clientId = clientId;\n+        this.userName = userName;\n+        this.tokenType = tokenType;\n+        this.expiresAt = expiresAt;\n+        this.issuedAt = issuedAt;\n+        this.notBefore = notBefore;\n+        this.subject = subject;\n+        this.audience = audience;\n+        this.issuer = issuer;\n+        this.jwtId = jwtId;\n+        this.extras = (extras == null) ? ImmutableMap.of() : extras;\n+        // raw response\n+        this.rawResponse = rawResponse;\n+    }\n+\n+    /**\n+     * {@code active} Token Introspection Response field,\n+     * REQUIRED. Boolean indicator of whether or not the presented token is currently active. The\n+     * specifics of a token's \"active\" state will vary depending on the implementation of the\n+     * authorization server and the information it keeps about its tokens, but a \"true\" value return\n+     * for the \"active\" property will generally indicate that a given token has been issued by this\n+     * authorization server, has not been revoked by the resource owner, and is within its given time\n+     * window of validity (e.g., after its issuance time and before its expiration time).\n+     */\n+    public boolean isActive() {\n+        return active;\n+    }\n+\n+    /**\n+     * Indicates whether or not the Token expire at the given {@link Instant} time based on\n+     * {@link #expiresAt()} function.\n+     */\n+    public boolean isValid(Instant instant) {\n+        final Instant expires = expiresAt();\n+        return (expires == null) || requireNonNull(instant, \"instant\").isBefore(expires);\n+    }\n+\n+    /**\n+     * Indicates whether or not the Token already expired based on {@link #expiresAt()} function.\n+     */\n+    public boolean isValid() {\n+        return isValid(Instant.now());\n+    }\n+\n+    /**\n+     * Indicates whether or not the Token used prematurely based on {@link #notBefore()} function.\n+     */\n+    public boolean isNotBefore() {\n+        final Instant notBefore = notBefore();\n+        return (notBefore == null) || Instant.now().isAfter(notBefore);\n+    }\n+\n+    /**\n+     * {@code scope} Token Introspection Response field,\n+     * OPTIONAL. A JSON string containing a space-separated list of scopes associated with this token,\n+     * in the format described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     */\n+    @Nullable\n+    public String scope() {\n+        return scope;\n+    }\n+\n+    /**\n+     * {@code scope} Token Introspection Response field,\n+     * OPTIONAL. A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    public Set<String> scopeSet() {\n+        return scopeSet;\n+    }\n+\n+    /**\n+     * {@code client_id} Token Introspection Response field,\n+     * OPTIONAL. Client identifier for the OAuth 2.0 client that requested this token.\n+     */\n+    @Nullable\n+    public String clientId() {\n+        return clientId;\n+    }\n+\n+    /**\n+     * {@code username} Token Introspection Response field,\n+     * OPTIONAL. Human-readable identifier for the resource owner who authorized this token.\n+     */\n+    @Nullable\n+    public String userName() {\n+        return userName;\n+    }\n+\n+    /**\n+     * {@code token_type} Token Introspection Response field,\n+     * OPTIONAL. Type of the token as defined at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     */\n+    @Nullable\n+    public String tokenType() {\n+        return tokenType;\n+    }\n+\n+    /**\n+     * {@code exp} Token Introspection Response field,\n+     * OPTIONAL. {@link Instant} timestamp, indicating when this token will expire, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public Instant expiresAt() {\n+        return expiresAt;\n+    }\n+\n+    /**\n+     * {@code iat} Token Introspection Response field,\n+     * OPTIONAL. {@link Instant} timestamp, indicating when this token was originally issued, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public Instant issuedAt() {\n+        return issuedAt;\n+    }\n+\n+    /**\n+     * {@link Duration} indicating the lifetime of the access token. The value is NOT supplied with the\n+     * Token Introspection response and calculated based on {@code iat} and {@code exp} response fields every\n+     * time this method invoked.\n+     */\n+    @Nullable\n+    public Duration expiresIn() {\n+        if (issuedAt != null && expiresAt != null) {\n+            return Duration.ofMillis(issuedAt.until(expiresAt, ChronoUnit.MILLIS));\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * {@code nbf} Token Introspection Response field,\n+     * OPTIONAL. {@link Instant} timestamp, indicating when this token is not to be used before, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public Instant notBefore() {\n+        return notBefore;\n+    }\n+\n+    /**\n+     * {@code sub} Token Introspection Response field,\n+     * OPTIONAL. Subject of the token. Usually a machine-readable\n+     * identifier of the resource owner who authorized this token. As defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public String subject() {\n+        return subject;\n+    }\n+\n+    /**\n+     * {@code aud} Token Introspection Response field,\n+     * OPTIONAL. Service-specific string identifier or list of string identifiers representing the\n+     * intended audience for this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public String audience() {\n+        return audience;\n+    }\n+\n+    /**\n+     * {@code iss} Token Introspection Response field,\n+     * OPTIONAL. String representing the issuer of this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public String issuer() {\n+        return issuer;\n+    }\n+\n+    /**\n+     * {@code jti} Token Introspection Response field,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 388}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEwMjIxMw==", "bodyText": "Somehow it does not work well with static imports", "url": "https://github.com/line/armeria/pull/2840#discussion_r472102213", "createdAt": "2020-08-18T11:18:41Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptor.java", "diffHunk": "@@ -0,0 +1,511 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+/**\n+ * Defines a structure of the Token Introspection Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc7662#section-2.2\">[RFC7662], Section 2.2</a>.\n+ */\n+public class OAuth2TokenDescriptor implements Serializable {\n+\n+    private static final long serialVersionUID = -3976877781134216467L;\n+\n+    /**\n+     * Creates a new {@link OAuth2TokenDescriptor} based on the {@code JSON}-formatted raw response body.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @return A new instance of {@link OAuth2TokenDescriptor}.\n+     */\n+    public static OAuth2TokenDescriptor of(String rawResponse) {\n+        return OAuth2TokenDescriptorBuilder.of(rawResponse);\n+    }\n+\n+    /**\n+     * Creates a new {@link OAuth2TokenDescriptorBuilder} to build a new {@link OAuth2TokenDescriptor} and\n+     * supplied it with a value of {@code active} Token Introspection Response field.\n+     * @return A new instance of {@link OAuth2TokenDescriptorBuilder}.\n+     */\n+    public static OAuth2TokenDescriptorBuilder builder(boolean active) {\n+        return new OAuth2TokenDescriptorBuilder(active);\n+    }\n+\n+    static final String ACTIVE = \"active\";\n+    static final String SCOPE = \"scope\";\n+    static final String CLIENT_ID = \"client_id\";\n+    static final String USER_NAME = \"username\";\n+    static final String TOKEN_TYPE = \"token_type\";\n+    static final String EXPIRES_AT = \"exp\";\n+    static final String ISSUED_AT = \"iat\";\n+    static final String NOT_BEFORE = \"nbf\";\n+    static final String SUBJECT = \"sub\";\n+    static final String AUDIENCE = \"aud\";\n+    static final String ISSUER = \"iss\";\n+    static final String JWT_ID = \"jti\";\n+\n+    static final String SCOPE_SEPARATOR = \" \";\n+\n+    static final ObjectMapper JSON = new ObjectMapper();\n+\n+    /**\n+     * {@code active} Token Introspection Response field,\n+     * REQUIRED. Boolean indicator of whether or not the presented token is currently active. The\n+     * specifics of a token's \"active\" state will vary depending on the implementation of the\n+     * authorization server and the information it keeps about its tokens, but a \"true\" value return\n+     * for the \"active\" property will generally indicate that a given token has been issued by this\n+     * authorization server, has not been revoked by the resource owner, and is within its given time\n+     * window of validity (e.g., after its issuance time and before its expiration time).\n+     */\n+    private final boolean active;\n+\n+    /**\n+     * {@code scope} Token Introspection Response field,\n+     * OPTIONAL. A JSON string containing a space-separated list of scopes associated with this token,\n+     * in the format described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     */\n+    @Nullable\n+    private final String scope;\n+\n+    /**\n+     * A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    private final Set<String> scopeSet;\n+\n+    /**\n+     * {@code client_id} Token Introspection Response field,\n+     * OPTIONAL. Client identifier for the OAuth 2.0 client that requested this token.\n+     */\n+    @Nullable\n+    private final String clientId;\n+\n+    /**\n+     * {@code username} Token Introspection Response field,\n+     * OPTIONAL. Human-readable identifier for the resource owner who authorized this token.\n+     */\n+    @Nullable\n+    private final String userName;\n+\n+    /**\n+     * {@code token_type} Token Introspection Response field,\n+     * OPTIONAL. Type of the token as defined at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     */\n+    @Nullable\n+    private final String tokenType;\n+\n+    /**\n+     * {@code exp} Token Introspection Response field,\n+     * OPTIONAL. Integer timestamp, measured in the number of seconds since January 1 1970 UTC,\n+     * indicating when this token will expire, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final Instant expiresAt;\n+\n+    /**\n+     * {@code iat} Token Introspection Response field,\n+     * OPTIONAL. Integer timestamp, measured in the number of seconds since January 1 1970 UTC,\n+     * indicating when this token was originally issued, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final Instant issuedAt;\n+\n+    /**\n+     * {@code nbf} Token Introspection Response field,\n+     * OPTIONAL. Integer timestamp, measured in the number of seconds since January 1 1970 UTC,\n+     * indicating when this token is not to be used before, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final Instant notBefore;\n+\n+    /**\n+     * {@code sub} Token Introspection Response field,\n+     * OPTIONAL. Subject of the token. Usually a machine-readable\n+     * identifier of the resource owner who authorized this token. As defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String subject;\n+\n+    /**\n+     * {@code aud} Token Introspection Response field,\n+     * OPTIONAL. Service-specific string identifier or list of string identifiers representing the\n+     * intended audience for this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String audience;\n+\n+    /**\n+     * {@code iss} Token Introspection Response field,\n+     * OPTIONAL. String representing the issuer of this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String issuer;\n+\n+    /**\n+     * {@code jti} Token Introspection Response field,\n+     * OPTIONAL. String identifier for the token - JWT ID, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String jwtId;\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Token Introspection Response,\n+     * OPTIONAL.\n+     */\n+    private final Map<String, String> extras;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    @Nullable\n+    private transient String toString;\n+\n+    OAuth2TokenDescriptor(boolean active, @Nullable List<String> scopeList, @Nullable String clientId,\n+                          @Nullable String userName, @Nullable String tokenType,\n+                          @Nullable Instant expiresAt, @Nullable Instant issuedAt,\n+                          @Nullable Instant notBefore, @Nullable String subject,\n+                          @Nullable String audience, @Nullable String issuer,\n+                          @Nullable String jwtId, @Nullable ImmutableMap<String, String> extras,\n+                          @Nullable String rawResponse) {\n+        this.active = active;\n+        scope = toScopeString(scopeList);\n+        scopeSet = (scopeList == null) ? ImmutableSet.of() : ImmutableSet.copyOf(scopeList);\n+        this.clientId = clientId;\n+        this.userName = userName;\n+        this.tokenType = tokenType;\n+        this.expiresAt = expiresAt;\n+        this.issuedAt = issuedAt;\n+        this.notBefore = notBefore;\n+        this.subject = subject;\n+        this.audience = audience;\n+        this.issuer = issuer;\n+        this.jwtId = jwtId;\n+        this.extras = (extras == null) ? ImmutableMap.of() : extras;\n+        // raw response\n+        this.rawResponse = rawResponse;\n+    }\n+\n+    /**\n+     * {@code active} Token Introspection Response field,\n+     * REQUIRED. Boolean indicator of whether or not the presented token is currently active. The\n+     * specifics of a token's \"active\" state will vary depending on the implementation of the\n+     * authorization server and the information it keeps about its tokens, but a \"true\" value return\n+     * for the \"active\" property will generally indicate that a given token has been issued by this\n+     * authorization server, has not been revoked by the resource owner, and is within its given time\n+     * window of validity (e.g., after its issuance time and before its expiration time).\n+     */\n+    public boolean isActive() {\n+        return active;\n+    }\n+\n+    /**\n+     * Indicates whether or not the Token expire at the given {@link Instant} time based on\n+     * {@link #expiresAt()} function.\n+     */\n+    public boolean isValid(Instant instant) {\n+        final Instant expires = expiresAt();\n+        return (expires == null) || requireNonNull(instant, \"instant\").isBefore(expires);\n+    }\n+\n+    /**\n+     * Indicates whether or not the Token already expired based on {@link #expiresAt()} function.\n+     */\n+    public boolean isValid() {\n+        return isValid(Instant.now());\n+    }\n+\n+    /**\n+     * Indicates whether or not the Token used prematurely based on {@link #notBefore()} function.\n+     */\n+    public boolean isNotBefore() {\n+        final Instant notBefore = notBefore();\n+        return (notBefore == null) || Instant.now().isAfter(notBefore);\n+    }\n+\n+    /**\n+     * {@code scope} Token Introspection Response field,\n+     * OPTIONAL. A JSON string containing a space-separated list of scopes associated with this token,\n+     * in the format described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     */\n+    @Nullable\n+    public String scope() {\n+        return scope;\n+    }\n+\n+    /**\n+     * {@code scope} Token Introspection Response field,\n+     * OPTIONAL. A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    public Set<String> scopeSet() {\n+        return scopeSet;\n+    }\n+\n+    /**\n+     * {@code client_id} Token Introspection Response field,\n+     * OPTIONAL. Client identifier for the OAuth 2.0 client that requested this token.\n+     */\n+    @Nullable\n+    public String clientId() {\n+        return clientId;\n+    }\n+\n+    /**\n+     * {@code username} Token Introspection Response field,\n+     * OPTIONAL. Human-readable identifier for the resource owner who authorized this token.\n+     */\n+    @Nullable\n+    public String userName() {\n+        return userName;\n+    }\n+\n+    /**\n+     * {@code token_type} Token Introspection Response field,\n+     * OPTIONAL. Type of the token as defined at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     */\n+    @Nullable\n+    public String tokenType() {\n+        return tokenType;\n+    }\n+\n+    /**\n+     * {@code exp} Token Introspection Response field,\n+     * OPTIONAL. {@link Instant} timestamp, indicating when this token will expire, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public Instant expiresAt() {\n+        return expiresAt;\n+    }\n+\n+    /**\n+     * {@code iat} Token Introspection Response field,\n+     * OPTIONAL. {@link Instant} timestamp, indicating when this token was originally issued, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public Instant issuedAt() {\n+        return issuedAt;\n+    }\n+\n+    /**\n+     * {@link Duration} indicating the lifetime of the access token. The value is NOT supplied with the\n+     * Token Introspection response and calculated based on {@code iat} and {@code exp} response fields every\n+     * time this method invoked.\n+     */\n+    @Nullable\n+    public Duration expiresIn() {\n+        if (issuedAt != null && expiresAt != null) {\n+            return Duration.ofMillis(issuedAt.until(expiresAt, ChronoUnit.MILLIS));\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * {@code nbf} Token Introspection Response field,\n+     * OPTIONAL. {@link Instant} timestamp, indicating when this token is not to be used before, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public Instant notBefore() {\n+        return notBefore;\n+    }\n+\n+    /**\n+     * {@code sub} Token Introspection Response field,\n+     * OPTIONAL. Subject of the token. Usually a machine-readable\n+     * identifier of the resource owner who authorized this token. As defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public String subject() {\n+        return subject;\n+    }\n+\n+    /**\n+     * {@code aud} Token Introspection Response field,\n+     * OPTIONAL. Service-specific string identifier or list of string identifiers representing the\n+     * intended audience for this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public String audience() {\n+        return audience;\n+    }\n+\n+    /**\n+     * {@code iss} Token Introspection Response field,\n+     * OPTIONAL. String representing the issuer of this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public String issuer() {\n+        return issuer;\n+    }\n+\n+    /**\n+     * {@code jti} Token Introspection Response field,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2NzcxOQ=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 388}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE2OTYwNw==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r472169607", "createdAt": "2020-08-18T13:01:55Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptor.java", "diffHunk": "@@ -0,0 +1,511 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+/**\n+ * Defines a structure of the Token Introspection Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc7662#section-2.2\">[RFC7662], Section 2.2</a>.\n+ */\n+public class OAuth2TokenDescriptor implements Serializable {\n+\n+    private static final long serialVersionUID = -3976877781134216467L;\n+\n+    /**\n+     * Creates a new {@link OAuth2TokenDescriptor} based on the {@code JSON}-formatted raw response body.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @return A new instance of {@link OAuth2TokenDescriptor}.\n+     */\n+    public static OAuth2TokenDescriptor of(String rawResponse) {\n+        return OAuth2TokenDescriptorBuilder.of(rawResponse);\n+    }\n+\n+    /**\n+     * Creates a new {@link OAuth2TokenDescriptorBuilder} to build a new {@link OAuth2TokenDescriptor} and\n+     * supplied it with a value of {@code active} Token Introspection Response field.\n+     * @return A new instance of {@link OAuth2TokenDescriptorBuilder}.\n+     */\n+    public static OAuth2TokenDescriptorBuilder builder(boolean active) {\n+        return new OAuth2TokenDescriptorBuilder(active);\n+    }\n+\n+    static final String ACTIVE = \"active\";\n+    static final String SCOPE = \"scope\";\n+    static final String CLIENT_ID = \"client_id\";\n+    static final String USER_NAME = \"username\";\n+    static final String TOKEN_TYPE = \"token_type\";\n+    static final String EXPIRES_AT = \"exp\";\n+    static final String ISSUED_AT = \"iat\";\n+    static final String NOT_BEFORE = \"nbf\";\n+    static final String SUBJECT = \"sub\";\n+    static final String AUDIENCE = \"aud\";\n+    static final String ISSUER = \"iss\";\n+    static final String JWT_ID = \"jti\";\n+\n+    static final String SCOPE_SEPARATOR = \" \";\n+\n+    static final ObjectMapper JSON = new ObjectMapper();\n+\n+    /**\n+     * {@code active} Token Introspection Response field,\n+     * REQUIRED. Boolean indicator of whether or not the presented token is currently active. The\n+     * specifics of a token's \"active\" state will vary depending on the implementation of the\n+     * authorization server and the information it keeps about its tokens, but a \"true\" value return\n+     * for the \"active\" property will generally indicate that a given token has been issued by this\n+     * authorization server, has not been revoked by the resource owner, and is within its given time\n+     * window of validity (e.g., after its issuance time and before its expiration time).\n+     */\n+    private final boolean active;\n+\n+    /**\n+     * {@code scope} Token Introspection Response field,\n+     * OPTIONAL. A JSON string containing a space-separated list of scopes associated with this token,\n+     * in the format described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     */\n+    @Nullable\n+    private final String scope;\n+\n+    /**\n+     * A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    private final Set<String> scopeSet;\n+\n+    /**\n+     * {@code client_id} Token Introspection Response field,\n+     * OPTIONAL. Client identifier for the OAuth 2.0 client that requested this token.\n+     */\n+    @Nullable\n+    private final String clientId;\n+\n+    /**\n+     * {@code username} Token Introspection Response field,\n+     * OPTIONAL. Human-readable identifier for the resource owner who authorized this token.\n+     */\n+    @Nullable\n+    private final String userName;\n+\n+    /**\n+     * {@code token_type} Token Introspection Response field,\n+     * OPTIONAL. Type of the token as defined at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     */\n+    @Nullable\n+    private final String tokenType;\n+\n+    /**\n+     * {@code exp} Token Introspection Response field,\n+     * OPTIONAL. Integer timestamp, measured in the number of seconds since January 1 1970 UTC,\n+     * indicating when this token will expire, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final Instant expiresAt;\n+\n+    /**\n+     * {@code iat} Token Introspection Response field,\n+     * OPTIONAL. Integer timestamp, measured in the number of seconds since January 1 1970 UTC,\n+     * indicating when this token was originally issued, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final Instant issuedAt;\n+\n+    /**\n+     * {@code nbf} Token Introspection Response field,\n+     * OPTIONAL. Integer timestamp, measured in the number of seconds since January 1 1970 UTC,\n+     * indicating when this token is not to be used before, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final Instant notBefore;\n+\n+    /**\n+     * {@code sub} Token Introspection Response field,\n+     * OPTIONAL. Subject of the token. Usually a machine-readable\n+     * identifier of the resource owner who authorized this token. As defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String subject;\n+\n+    /**\n+     * {@code aud} Token Introspection Response field,\n+     * OPTIONAL. Service-specific string identifier or list of string identifiers representing the\n+     * intended audience for this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String audience;\n+\n+    /**\n+     * {@code iss} Token Introspection Response field,\n+     * OPTIONAL. String representing the issuer of this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String issuer;\n+\n+    /**\n+     * {@code jti} Token Introspection Response field,\n+     * OPTIONAL. String identifier for the token - JWT ID, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String jwtId;\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Token Introspection Response,\n+     * OPTIONAL.\n+     */\n+    private final Map<String, String> extras;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    @Nullable\n+    private transient String toString;\n+\n+    OAuth2TokenDescriptor(boolean active, @Nullable List<String> scopeList, @Nullable String clientId,\n+                          @Nullable String userName, @Nullable String tokenType,\n+                          @Nullable Instant expiresAt, @Nullable Instant issuedAt,\n+                          @Nullable Instant notBefore, @Nullable String subject,\n+                          @Nullable String audience, @Nullable String issuer,\n+                          @Nullable String jwtId, @Nullable ImmutableMap<String, String> extras,\n+                          @Nullable String rawResponse) {\n+        this.active = active;\n+        scope = toScopeString(scopeList);\n+        scopeSet = (scopeList == null) ? ImmutableSet.of() : ImmutableSet.copyOf(scopeList);\n+        this.clientId = clientId;\n+        this.userName = userName;\n+        this.tokenType = tokenType;\n+        this.expiresAt = expiresAt;\n+        this.issuedAt = issuedAt;\n+        this.notBefore = notBefore;\n+        this.subject = subject;\n+        this.audience = audience;\n+        this.issuer = issuer;\n+        this.jwtId = jwtId;\n+        this.extras = (extras == null) ? ImmutableMap.of() : extras;\n+        // raw response\n+        this.rawResponse = rawResponse;\n+    }\n+\n+    /**\n+     * {@code active} Token Introspection Response field,\n+     * REQUIRED. Boolean indicator of whether or not the presented token is currently active. The\n+     * specifics of a token's \"active\" state will vary depending on the implementation of the\n+     * authorization server and the information it keeps about its tokens, but a \"true\" value return\n+     * for the \"active\" property will generally indicate that a given token has been issued by this\n+     * authorization server, has not been revoked by the resource owner, and is within its given time\n+     * window of validity (e.g., after its issuance time and before its expiration time).\n+     */\n+    public boolean isActive() {\n+        return active;\n+    }\n+\n+    /**\n+     * Indicates whether or not the Token expire at the given {@link Instant} time based on\n+     * {@link #expiresAt()} function.\n+     */\n+    public boolean isValid(Instant instant) {\n+        final Instant expires = expiresAt();\n+        return (expires == null) || requireNonNull(instant, \"instant\").isBefore(expires);\n+    }\n+\n+    /**\n+     * Indicates whether or not the Token already expired based on {@link #expiresAt()} function.\n+     */\n+    public boolean isValid() {\n+        return isValid(Instant.now());\n+    }\n+\n+    /**\n+     * Indicates whether or not the Token used prematurely based on {@link #notBefore()} function.\n+     */\n+    public boolean isNotBefore() {\n+        final Instant notBefore = notBefore();\n+        return (notBefore == null) || Instant.now().isAfter(notBefore);\n+    }\n+\n+    /**\n+     * {@code scope} Token Introspection Response field,\n+     * OPTIONAL. A JSON string containing a space-separated list of scopes associated with this token,\n+     * in the format described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     */\n+    @Nullable\n+    public String scope() {\n+        return scope;\n+    }\n+\n+    /**\n+     * {@code scope} Token Introspection Response field,\n+     * OPTIONAL. A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    public Set<String> scopeSet() {\n+        return scopeSet;\n+    }\n+\n+    /**\n+     * {@code client_id} Token Introspection Response field,\n+     * OPTIONAL. Client identifier for the OAuth 2.0 client that requested this token.\n+     */\n+    @Nullable\n+    public String clientId() {\n+        return clientId;\n+    }\n+\n+    /**\n+     * {@code username} Token Introspection Response field,\n+     * OPTIONAL. Human-readable identifier for the resource owner who authorized this token.\n+     */\n+    @Nullable\n+    public String userName() {\n+        return userName;\n+    }\n+\n+    /**\n+     * {@code token_type} Token Introspection Response field,\n+     * OPTIONAL. Type of the token as defined at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     */\n+    @Nullable\n+    public String tokenType() {\n+        return tokenType;\n+    }\n+\n+    /**\n+     * {@code exp} Token Introspection Response field,\n+     * OPTIONAL. {@link Instant} timestamp, indicating when this token will expire, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public Instant expiresAt() {\n+        return expiresAt;\n+    }\n+\n+    /**\n+     * {@code iat} Token Introspection Response field,\n+     * OPTIONAL. {@link Instant} timestamp, indicating when this token was originally issued, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public Instant issuedAt() {\n+        return issuedAt;\n+    }\n+\n+    /**\n+     * {@link Duration} indicating the lifetime of the access token. The value is NOT supplied with the\n+     * Token Introspection response and calculated based on {@code iat} and {@code exp} response fields every\n+     * time this method invoked.\n+     */\n+    @Nullable\n+    public Duration expiresIn() {\n+        if (issuedAt != null && expiresAt != null) {\n+            return Duration.ofMillis(issuedAt.until(expiresAt, ChronoUnit.MILLIS));\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * {@code nbf} Token Introspection Response field,\n+     * OPTIONAL. {@link Instant} timestamp, indicating when this token is not to be used before, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public Instant notBefore() {\n+        return notBefore;\n+    }\n+\n+    /**\n+     * {@code sub} Token Introspection Response field,\n+     * OPTIONAL. Subject of the token. Usually a machine-readable\n+     * identifier of the resource owner who authorized this token. As defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public String subject() {\n+        return subject;\n+    }\n+\n+    /**\n+     * {@code aud} Token Introspection Response field,\n+     * OPTIONAL. Service-specific string identifier or list of string identifiers representing the\n+     * intended audience for this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public String audience() {\n+        return audience;\n+    }\n+\n+    /**\n+     * {@code iss} Token Introspection Response field,\n+     * OPTIONAL. String representing the issuer of this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public String issuer() {\n+        return issuer;\n+    }\n+\n+    /**\n+     * {@code jti} Token Introspection Response field,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2NzcxOQ=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 388}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjE2NjU1OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptorBuilder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzo0MjoyMFrOG_h4AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOTowMjowNlrOIO2vvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2ODQ4MA==", "bodyText": "Should this method be moved to OAuth2TokenDescriptor and renamed to builder(String)?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469268480", "createdAt": "2020-08-12T13:42:20Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptorBuilder.java", "diffHunk": "@@ -0,0 +1,331 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.ACTIVE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.AUDIENCE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.CLIENT_ID;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.EXPIRES_AT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.ISSUED_AT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.ISSUER;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.JSON;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.JWT_ID;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.NOT_BEFORE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SCOPE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SCOPE_SEPARATOR;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SUBJECT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.TOKEN_TYPE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.USER_NAME;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Instant;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Builds an instance of {@link OAuth2TokenDescriptor}.\n+ */\n+public class OAuth2TokenDescriptorBuilder {\n+\n+    private static final TypeReference<LinkedHashMap<String, String>> MAP_TYPE =\n+            new TypeReference<LinkedHashMap<String, String>>() {};\n+\n+    static OAuth2TokenDescriptor of(String rawResponse) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQxNjQ5MA==", "bodyText": "it's already there:\n    public static OAuth2TokenDescriptor of(String rawResponse) {\n        return OAuth2TokenDescriptorBuilder.of(rawResponse);\n    }", "url": "https://github.com/line/armeria/pull/2840#discussion_r471416490", "createdAt": "2020-08-17T11:30:36Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptorBuilder.java", "diffHunk": "@@ -0,0 +1,331 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.ACTIVE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.AUDIENCE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.CLIENT_ID;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.EXPIRES_AT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.ISSUED_AT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.ISSUER;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.JSON;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.JWT_ID;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.NOT_BEFORE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SCOPE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SCOPE_SEPARATOR;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SUBJECT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.TOKEN_TYPE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.USER_NAME;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Instant;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Builds an instance of {@link OAuth2TokenDescriptor}.\n+ */\n+public class OAuth2TokenDescriptorBuilder {\n+\n+    private static final TypeReference<LinkedHashMap<String, String>> MAP_TYPE =\n+            new TypeReference<LinkedHashMap<String, String>>() {};\n+\n+    static OAuth2TokenDescriptor of(String rawResponse) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2ODQ4MA=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NzkzNA==", "bodyText": "I actually meant inlining and removing this method.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552447934", "createdAt": "2021-01-06T09:02:06Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptorBuilder.java", "diffHunk": "@@ -0,0 +1,331 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.ACTIVE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.AUDIENCE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.CLIENT_ID;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.EXPIRES_AT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.ISSUED_AT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.ISSUER;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.JSON;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.JWT_ID;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.NOT_BEFORE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SCOPE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SCOPE_SEPARATOR;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.SUBJECT;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.TOKEN_TYPE;\n+import static com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor.USER_NAME;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Instant;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Builds an instance of {@link OAuth2TokenDescriptor}.\n+ */\n+public class OAuth2TokenDescriptorBuilder {\n+\n+    private static final TypeReference<LinkedHashMap<String, String>> MAP_TYPE =\n+            new TypeReference<LinkedHashMap<String, String>>() {};\n+\n+    static OAuth2TokenDescriptor of(String rawResponse) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2ODQ4MA=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjE3MDc3OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzo0MzoyM1rOG_h6xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMzowMjoyMlrOHCS-WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2OTE4OA==", "bodyText": "Could we remove public or move to internal.common.auth.oauth2?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469269188", "createdAt": "2020-08-12T13:43:23Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+public class SerialFuture {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQxNjkyNw==", "bodyText": "This is a generic utility class", "url": "https://github.com/line/armeria/pull/2840#discussion_r471416927", "createdAt": "2020-08-17T11:31:30Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+public class SerialFuture {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2OTE4OA=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwNTIxNQ==", "bodyText": "Yes, but I'd like to hide it from the public API and consider making it public when there are demands from users, because it's not an essential part of OAuth 2 support.", "url": "https://github.com/line/armeria/pull/2840#discussion_r471905215", "createdAt": "2020-08-18T04:22:57Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+public class SerialFuture {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2OTE4OA=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE3MDA3Mw==", "bodyText": "moved to internal", "url": "https://github.com/line/armeria/pull/2840#discussion_r472170073", "createdAt": "2020-08-18T13:02:22Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+public class SerialFuture {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2OTE4OA=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjE3MTk4OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzo0Mzo0MFrOG_h7ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMTozMjoxM1rOHBlBsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2OTQwNg==", "bodyText": "this(null)", "url": "https://github.com/line/armeria/pull/2840#discussion_r469269406", "createdAt": "2020-08-12T13:43:40Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+public class SerialFuture {\n+\n+    private final Queue<Runnable> actions = new LinkedList<>();\n+\n+    @Nullable\n+    private Runnable active;\n+\n+    @Nullable\n+    Executor executor;\n+\n+    /**\n+     * Constructs {@link SerialFuture} with a supplied {@link Executor}.\n+     * @param executor An {@link Executor} to execute asynchronous actions.\n+     */\n+    public SerialFuture(@Nullable Executor executor) {\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Constructs {@link SerialFuture}.\n+     */\n+    public SerialFuture() {\n+        executor = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQxNzI2Ng==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r471417266", "createdAt": "2020-08-17T11:32:13Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+public class SerialFuture {\n+\n+    private final Queue<Runnable> actions = new LinkedList<>();\n+\n+    @Nullable\n+    private Runnable active;\n+\n+    @Nullable\n+    Executor executor;\n+\n+    /**\n+     * Constructs {@link SerialFuture} with a supplied {@link Executor}.\n+     * @param executor An {@link Executor} to execute asynchronous actions.\n+     */\n+    public SerialFuture(@Nullable Executor executor) {\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Constructs {@link SerialFuture}.\n+     */\n+    public SerialFuture() {\n+        executor = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2OTQwNg=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjE3NzAzOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzo0NDo1MVrOG_h-2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMzowOTo0N1rOHCTadg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3MDIzMg==", "bodyText": "Please use handle with a null-returning BiFunction, because whenComplete() has a known performance issue in Java 8.", "url": "https://github.com/line/armeria/pull/2840#discussion_r469270232", "createdAt": "2020-08-12T13:44:51Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+public class SerialFuture {\n+\n+    private final Queue<Runnable> actions = new LinkedList<>();\n+\n+    @Nullable\n+    private Runnable active;\n+\n+    @Nullable\n+    Executor executor;\n+\n+    /**\n+     * Constructs {@link SerialFuture} with a supplied {@link Executor}.\n+     * @param executor An {@link Executor} to execute asynchronous actions.\n+     */\n+    public SerialFuture(@Nullable Executor executor) {\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Constructs {@link SerialFuture}.\n+     */\n+    public SerialFuture() {\n+        executor = null;\n+    }\n+\n+    /**\n+     * Executes submitted {@link Callable} action asynchronously in sequence.\n+     * @param action An asynchronous {@link Callable} action to be executed in sequence.\n+     *               It returns {@link CompletionStage} that produces the final result when the action\n+     *               completes.\n+     * @return Returns a new {@link CompletionStage} with the same result or exception as the {@code action},\n+     *         that executes the given action when this stage completes.\n+     */\n+    public synchronized <V> CompletionStage<V> executeAsync(Callable<CompletionStage<V>> action) {\n+        final CompletableFuture<V> result = new CompletableFuture<>();\n+        actions.add(() -> {\n+            final CompletionStage<V> future;\n+            try {\n+                future = action.call();\n+            } catch (Exception e) {\n+                result.completeExceptionally(Exceptions.peel(e));\n+                executeNext();\n+                return;\n+            }\n+            future.whenComplete((v, ex) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzOTgzMQ==", "bodyText": "I'm not aware of such performance issue. Could you provide some links?", "url": "https://github.com/line/armeria/pull/2840#discussion_r471439831", "createdAt": "2020-08-17T12:19:38Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+public class SerialFuture {\n+\n+    private final Queue<Runnable> actions = new LinkedList<>();\n+\n+    @Nullable\n+    private Runnable active;\n+\n+    @Nullable\n+    Executor executor;\n+\n+    /**\n+     * Constructs {@link SerialFuture} with a supplied {@link Executor}.\n+     * @param executor An {@link Executor} to execute asynchronous actions.\n+     */\n+    public SerialFuture(@Nullable Executor executor) {\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Constructs {@link SerialFuture}.\n+     */\n+    public SerialFuture() {\n+        executor = null;\n+    }\n+\n+    /**\n+     * Executes submitted {@link Callable} action asynchronously in sequence.\n+     * @param action An asynchronous {@link Callable} action to be executed in sequence.\n+     *               It returns {@link CompletionStage} that produces the final result when the action\n+     *               completes.\n+     * @return Returns a new {@link CompletionStage} with the same result or exception as the {@code action},\n+     *         that executes the given action when this stage completes.\n+     */\n+    public synchronized <V> CompletionStage<V> executeAsync(Callable<CompletionStage<V>> action) {\n+        final CompletableFuture<V> result = new CompletableFuture<>();\n+        actions.add(() -> {\n+            final CompletionStage<V> future;\n+            try {\n+                future = action.call();\n+            } catch (Exception e) {\n+                result.completeExceptionally(Exceptions.peel(e));\n+                executeNext();\n+                return;\n+            }\n+            future.whenComplete((v, ex) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3MDIzMg=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwNTU5Ng==", "bodyText": "#1440", "url": "https://github.com/line/armeria/pull/2840#discussion_r471905596", "createdAt": "2020-08-18T04:24:36Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+public class SerialFuture {\n+\n+    private final Queue<Runnable> actions = new LinkedList<>();\n+\n+    @Nullable\n+    private Runnable active;\n+\n+    @Nullable\n+    Executor executor;\n+\n+    /**\n+     * Constructs {@link SerialFuture} with a supplied {@link Executor}.\n+     * @param executor An {@link Executor} to execute asynchronous actions.\n+     */\n+    public SerialFuture(@Nullable Executor executor) {\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Constructs {@link SerialFuture}.\n+     */\n+    public SerialFuture() {\n+        executor = null;\n+    }\n+\n+    /**\n+     * Executes submitted {@link Callable} action asynchronously in sequence.\n+     * @param action An asynchronous {@link Callable} action to be executed in sequence.\n+     *               It returns {@link CompletionStage} that produces the final result when the action\n+     *               completes.\n+     * @return Returns a new {@link CompletionStage} with the same result or exception as the {@code action},\n+     *         that executes the given action when this stage completes.\n+     */\n+    public synchronized <V> CompletionStage<V> executeAsync(Callable<CompletionStage<V>> action) {\n+        final CompletableFuture<V> result = new CompletableFuture<>();\n+        actions.add(() -> {\n+            final CompletionStage<V> future;\n+            try {\n+                future = action.call();\n+            } catch (Exception e) {\n+                result.completeExceptionally(Exceptions.peel(e));\n+                executeNext();\n+                return;\n+            }\n+            future.whenComplete((v, ex) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3MDIzMg=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzMzM3NA==", "bodyText": "Interesting. This ticket reported against whenCompleteAsync(). Does it also apply to whenComplete()?", "url": "https://github.com/line/armeria/pull/2840#discussion_r472033374", "createdAt": "2020-08-18T09:10:34Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+public class SerialFuture {\n+\n+    private final Queue<Runnable> actions = new LinkedList<>();\n+\n+    @Nullable\n+    private Runnable active;\n+\n+    @Nullable\n+    Executor executor;\n+\n+    /**\n+     * Constructs {@link SerialFuture} with a supplied {@link Executor}.\n+     * @param executor An {@link Executor} to execute asynchronous actions.\n+     */\n+    public SerialFuture(@Nullable Executor executor) {\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Constructs {@link SerialFuture}.\n+     */\n+    public SerialFuture() {\n+        executor = null;\n+    }\n+\n+    /**\n+     * Executes submitted {@link Callable} action asynchronously in sequence.\n+     * @param action An asynchronous {@link Callable} action to be executed in sequence.\n+     *               It returns {@link CompletionStage} that produces the final result when the action\n+     *               completes.\n+     * @return Returns a new {@link CompletionStage} with the same result or exception as the {@code action},\n+     *         that executes the given action when this stage completes.\n+     */\n+    public synchronized <V> CompletionStage<V> executeAsync(Callable<CompletionStage<V>> action) {\n+        final CompletableFuture<V> result = new CompletableFuture<>();\n+        actions.add(() -> {\n+            final CompletionStage<V> future;\n+            try {\n+                future = action.call();\n+            } catch (Exception e) {\n+                result.completeExceptionally(Exceptions.peel(e));\n+                executeNext();\n+                return;\n+            }\n+            future.whenComplete((v, ex) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3MDIzMg=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjExMTE3OQ==", "bodyText": "Yeah, it applies to both whenCompleteAsync() and whenComplete() IIRC, because they both go to uniWhenComplete().", "url": "https://github.com/line/armeria/pull/2840#discussion_r472111179", "createdAt": "2020-08-18T11:36:28Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+public class SerialFuture {\n+\n+    private final Queue<Runnable> actions = new LinkedList<>();\n+\n+    @Nullable\n+    private Runnable active;\n+\n+    @Nullable\n+    Executor executor;\n+\n+    /**\n+     * Constructs {@link SerialFuture} with a supplied {@link Executor}.\n+     * @param executor An {@link Executor} to execute asynchronous actions.\n+     */\n+    public SerialFuture(@Nullable Executor executor) {\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Constructs {@link SerialFuture}.\n+     */\n+    public SerialFuture() {\n+        executor = null;\n+    }\n+\n+    /**\n+     * Executes submitted {@link Callable} action asynchronously in sequence.\n+     * @param action An asynchronous {@link Callable} action to be executed in sequence.\n+     *               It returns {@link CompletionStage} that produces the final result when the action\n+     *               completes.\n+     * @return Returns a new {@link CompletionStage} with the same result or exception as the {@code action},\n+     *         that executes the given action when this stage completes.\n+     */\n+    public synchronized <V> CompletionStage<V> executeAsync(Callable<CompletionStage<V>> action) {\n+        final CompletableFuture<V> result = new CompletableFuture<>();\n+        actions.add(() -> {\n+            final CompletionStage<V> future;\n+            try {\n+                future = action.call();\n+            } catch (Exception e) {\n+                result.completeExceptionally(Exceptions.peel(e));\n+                executeNext();\n+                return;\n+            }\n+            future.whenComplete((v, ex) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3MDIzMg=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE3NzI3MA==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r472177270", "createdAt": "2020-08-18T13:09:47Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+public class SerialFuture {\n+\n+    private final Queue<Runnable> actions = new LinkedList<>();\n+\n+    @Nullable\n+    private Runnable active;\n+\n+    @Nullable\n+    Executor executor;\n+\n+    /**\n+     * Constructs {@link SerialFuture} with a supplied {@link Executor}.\n+     * @param executor An {@link Executor} to execute asynchronous actions.\n+     */\n+    public SerialFuture(@Nullable Executor executor) {\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Constructs {@link SerialFuture}.\n+     */\n+    public SerialFuture() {\n+        executor = null;\n+    }\n+\n+    /**\n+     * Executes submitted {@link Callable} action asynchronously in sequence.\n+     * @param action An asynchronous {@link Callable} action to be executed in sequence.\n+     *               It returns {@link CompletionStage} that produces the final result when the action\n+     *               completes.\n+     * @return Returns a new {@link CompletionStage} with the same result or exception as the {@code action},\n+     *         that executes the given action when this stage completes.\n+     */\n+    public synchronized <V> CompletionStage<V> executeAsync(Callable<CompletionStage<V>> action) {\n+        final CompletableFuture<V> result = new CompletableFuture<>();\n+        actions.add(() -> {\n+            final CompletionStage<V> future;\n+            try {\n+                future = action.call();\n+            } catch (Exception e) {\n+                result.completeExceptionally(Exceptions.peel(e));\n+                executeNext();\n+                return;\n+            }\n+            future.whenComplete((v, ex) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3MDIzMg=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjE4MDM2OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzo0NTozNVrOG_iA4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMjoyMToyOVrOHBmdbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3MDc1Mw==", "bodyText": "Could catch Throwable and call executeNext() in finally.", "url": "https://github.com/line/armeria/pull/2840#discussion_r469270753", "createdAt": "2020-08-12T13:45:35Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+public class SerialFuture {\n+\n+    private final Queue<Runnable> actions = new LinkedList<>();\n+\n+    @Nullable\n+    private Runnable active;\n+\n+    @Nullable\n+    Executor executor;\n+\n+    /**\n+     * Constructs {@link SerialFuture} with a supplied {@link Executor}.\n+     * @param executor An {@link Executor} to execute asynchronous actions.\n+     */\n+    public SerialFuture(@Nullable Executor executor) {\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Constructs {@link SerialFuture}.\n+     */\n+    public SerialFuture() {\n+        executor = null;\n+    }\n+\n+    /**\n+     * Executes submitted {@link Callable} action asynchronously in sequence.\n+     * @param action An asynchronous {@link Callable} action to be executed in sequence.\n+     *               It returns {@link CompletionStage} that produces the final result when the action\n+     *               completes.\n+     * @return Returns a new {@link CompletionStage} with the same result or exception as the {@code action},\n+     *         that executes the given action when this stage completes.\n+     */\n+    public synchronized <V> CompletionStage<V> executeAsync(Callable<CompletionStage<V>> action) {\n+        final CompletableFuture<V> result = new CompletableFuture<>();\n+        actions.add(() -> {\n+            final CompletionStage<V> future;\n+            try {\n+                future = action.call();\n+            } catch (Exception e) {\n+                result.completeExceptionally(Exceptions.peel(e));\n+                executeNext();\n+                return;\n+            }\n+            future.whenComplete((v, ex) -> {\n+                if (ex == null) {\n+                    result.complete(v);\n+                } else {\n+                    result.completeExceptionally(ex);\n+                }\n+                executeNext();\n+            });\n+        });\n+\n+        if (active == null) {\n+            executeNext();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Calls submitted {@link Callable} action asynchronously in sequence.\n+     * @param action A {@link Callable} action to be called asynchronously in sequence.\n+     *               It returns that produces the final result of computation.\n+     * @return Returns a new {@link CompletionStage} with the same result or exception as the {@code action},\n+     *         that executes the given action when this stage completes.\n+     */\n+    public synchronized <V> CompletionStage<V> callAsync(Callable<V> action) {\n+        final CompletableFuture<V> result = new CompletableFuture<>();\n+        actions.add(() -> {\n+            try {\n+                result.complete(action.call());\n+                executeNext();\n+            } catch (Exception e) {\n+                result.completeExceptionally(Exceptions.peel(e));\n+                executeNext();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ0MDc0OA==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r471440748", "createdAt": "2020-08-17T12:21:29Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+public class SerialFuture {\n+\n+    private final Queue<Runnable> actions = new LinkedList<>();\n+\n+    @Nullable\n+    private Runnable active;\n+\n+    @Nullable\n+    Executor executor;\n+\n+    /**\n+     * Constructs {@link SerialFuture} with a supplied {@link Executor}.\n+     * @param executor An {@link Executor} to execute asynchronous actions.\n+     */\n+    public SerialFuture(@Nullable Executor executor) {\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Constructs {@link SerialFuture}.\n+     */\n+    public SerialFuture() {\n+        executor = null;\n+    }\n+\n+    /**\n+     * Executes submitted {@link Callable} action asynchronously in sequence.\n+     * @param action An asynchronous {@link Callable} action to be executed in sequence.\n+     *               It returns {@link CompletionStage} that produces the final result when the action\n+     *               completes.\n+     * @return Returns a new {@link CompletionStage} with the same result or exception as the {@code action},\n+     *         that executes the given action when this stage completes.\n+     */\n+    public synchronized <V> CompletionStage<V> executeAsync(Callable<CompletionStage<V>> action) {\n+        final CompletableFuture<V> result = new CompletableFuture<>();\n+        actions.add(() -> {\n+            final CompletionStage<V> future;\n+            try {\n+                future = action.call();\n+            } catch (Exception e) {\n+                result.completeExceptionally(Exceptions.peel(e));\n+                executeNext();\n+                return;\n+            }\n+            future.whenComplete((v, ex) -> {\n+                if (ex == null) {\n+                    result.complete(v);\n+                } else {\n+                    result.completeExceptionally(ex);\n+                }\n+                executeNext();\n+            });\n+        });\n+\n+        if (active == null) {\n+            executeNext();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Calls submitted {@link Callable} action asynchronously in sequence.\n+     * @param action A {@link Callable} action to be called asynchronously in sequence.\n+     *               It returns that produces the final result of computation.\n+     * @return Returns a new {@link CompletionStage} with the same result or exception as the {@code action},\n+     *         that executes the given action when this stage completes.\n+     */\n+    public synchronized <V> CompletionStage<V> callAsync(Callable<V> action) {\n+        final CompletableFuture<V> result = new CompletableFuture<>();\n+        actions.add(() -> {\n+            try {\n+                result.complete(action.call());\n+                executeNext();\n+            } catch (Exception e) {\n+                result.completeExceptionally(Exceptions.peel(e));\n+                executeNext();\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3MDc1Mw=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjE4MzAxOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzo0NjoxOFrOG_iCqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMjoyMjo1MlrOHBmgGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3MTIxMA==", "bodyText": "Catch Throwable, since nobody will probably catch when Error is thrown here?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469271210", "createdAt": "2020-08-12T13:46:18Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+public class SerialFuture {\n+\n+    private final Queue<Runnable> actions = new LinkedList<>();\n+\n+    @Nullable\n+    private Runnable active;\n+\n+    @Nullable\n+    Executor executor;\n+\n+    /**\n+     * Constructs {@link SerialFuture} with a supplied {@link Executor}.\n+     * @param executor An {@link Executor} to execute asynchronous actions.\n+     */\n+    public SerialFuture(@Nullable Executor executor) {\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Constructs {@link SerialFuture}.\n+     */\n+    public SerialFuture() {\n+        executor = null;\n+    }\n+\n+    /**\n+     * Executes submitted {@link Callable} action asynchronously in sequence.\n+     * @param action An asynchronous {@link Callable} action to be executed in sequence.\n+     *               It returns {@link CompletionStage} that produces the final result when the action\n+     *               completes.\n+     * @return Returns a new {@link CompletionStage} with the same result or exception as the {@code action},\n+     *         that executes the given action when this stage completes.\n+     */\n+    public synchronized <V> CompletionStage<V> executeAsync(Callable<CompletionStage<V>> action) {\n+        final CompletableFuture<V> result = new CompletableFuture<>();\n+        actions.add(() -> {\n+            final CompletionStage<V> future;\n+            try {\n+                future = action.call();\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ0MTQzMg==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r471441432", "createdAt": "2020-08-17T12:22:52Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/SerialFuture.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Executes submitted {@link Callable} actions asynchronously in sequence.\n+ */\n+public class SerialFuture {\n+\n+    private final Queue<Runnable> actions = new LinkedList<>();\n+\n+    @Nullable\n+    private Runnable active;\n+\n+    @Nullable\n+    Executor executor;\n+\n+    /**\n+     * Constructs {@link SerialFuture} with a supplied {@link Executor}.\n+     * @param executor An {@link Executor} to execute asynchronous actions.\n+     */\n+    public SerialFuture(@Nullable Executor executor) {\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Constructs {@link SerialFuture}.\n+     */\n+    public SerialFuture() {\n+        executor = null;\n+    }\n+\n+    /**\n+     * Executes submitted {@link Callable} action asynchronously in sequence.\n+     * @param action An asynchronous {@link Callable} action to be executed in sequence.\n+     *               It returns {@link CompletionStage} that produces the final result when the action\n+     *               completes.\n+     * @return Returns a new {@link CompletionStage} with the same result or exception as the {@code action},\n+     *         that executes the given action when this stage completes.\n+     */\n+    public synchronized <V> CompletionStage<V> executeAsync(Callable<CompletionStage<V>> action) {\n+        final CompletableFuture<V> result = new CompletableFuture<>();\n+        actions.add(() -> {\n+            final CompletionStage<V> future;\n+            try {\n+                future = action.call();\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3MTIxMA=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjE4OTI0OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRequestException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzo0Nzo0MVrOG_iGag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMjoyNTo1MlrOHBmmEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3MjE3MA==", "bodyText": "How about accepting URI when constructing this exception and returning a URI?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469272170", "createdAt": "2020-08-12T13:47:41Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRequestException.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A common token request exception type.\n+ */\n+public class TokenRequestException extends RuntimeException {\n+\n+  private static final long serialVersionUID = 3324433572773111913L;\n+\n+  private static final TokenRequestExceptionBuilder BUILDER = new TokenRequestExceptionBuilder();\n+\n+  /**\n+   * Returns a {@link TokenRequestExceptionBuilder} to build error-specific types\n+   * of {@link TokenRequestException}.\n+   */\n+  public static TokenRequestExceptionBuilder builder() {\n+    return BUILDER;\n+  }\n+\n+  @Nullable\n+  private final String errorUri;\n+\n+  /**\n+   * Constructs a new {@link TokenRequestException} using {@code errorDescription} and {@code errorUri}.\n+   * @param errorDescription OPTIONAL. Human-readable ASCII [USASCII] text providing additional information,\n+   *                         used to assist the client developer in understanding the error that occurred.\n+   *                         Values for the {@code errorDescription} parameter MUST NOT include\n+   *                         characters outside the set {@code %x20-21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   * @param errorUri OPTIONAL. A URI identifying a human-readable web page with information about the error,\n+   *                 used to provide the client developer with additional information about the error.\n+   *                 Values for the {@code errorUri} parameter MUST conform to the URI-reference syntax and\n+   *                 thus MUST NOT include characters outside\n+   *                 the set {@code %x21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   */\n+  public TokenRequestException(String errorDescription, @Nullable String errorUri) {\n+    super(errorDescription);\n+    this.errorUri = errorUri;\n+  }\n+\n+  /**\n+   * Constructs a new {@link TokenRequestException} using {@code errorDescription} and {@code errorUri}.\n+   * @param errorDescription OPTIONAL. Human-readable ASCII [USASCII] text providing additional information,\n+   *                         used to assist the client developer in understanding the error that occurred.\n+   *                         Values for the {@code errorDescription} parameter MUST NOT include\n+   *                         characters outside the set {@code %x20-21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   * @param errorUri OPTIONAL. A URI identifying a human-readable web page with information about the error,\n+   *                 used to provide the client developer with additional information about the error.\n+   *                 Values for the {@code errorUri} parameter MUST conform to the URI-reference syntax and\n+   *                 thus MUST NOT include characters outside\n+   *                 the set {@code %x21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   * @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method).\n+   *              (A {@code null} value is permitted, and indicates that the cause is nonexistent or unknown.)\n+   */\n+  public TokenRequestException(String errorDescription, @Nullable String errorUri, Throwable cause) {\n+    super(errorDescription, cause);\n+    this.errorUri = errorUri;\n+  }\n+\n+  /**\n+   * A URI identifying a human-readable web page with information about the error, used to provide the client\n+   * developer with additional information about the error.\n+   * Values for the {@code errorUri} parameter MUST conform to the URI-reference syntax and thus MUST NOT\n+   * include characters outside the set {@code %x21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   */\n+  @Nullable\n+  public String getErrorUri() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ0Mjk2MQ==", "bodyText": "This URI comes in the error response body (as per the spec). I did not want to parse it. What if it's invalid or corrupt? Then we will fail processing the exception with another exception.", "url": "https://github.com/line/armeria/pull/2840#discussion_r471442961", "createdAt": "2020-08-17T12:25:52Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRequestException.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A common token request exception type.\n+ */\n+public class TokenRequestException extends RuntimeException {\n+\n+  private static final long serialVersionUID = 3324433572773111913L;\n+\n+  private static final TokenRequestExceptionBuilder BUILDER = new TokenRequestExceptionBuilder();\n+\n+  /**\n+   * Returns a {@link TokenRequestExceptionBuilder} to build error-specific types\n+   * of {@link TokenRequestException}.\n+   */\n+  public static TokenRequestExceptionBuilder builder() {\n+    return BUILDER;\n+  }\n+\n+  @Nullable\n+  private final String errorUri;\n+\n+  /**\n+   * Constructs a new {@link TokenRequestException} using {@code errorDescription} and {@code errorUri}.\n+   * @param errorDescription OPTIONAL. Human-readable ASCII [USASCII] text providing additional information,\n+   *                         used to assist the client developer in understanding the error that occurred.\n+   *                         Values for the {@code errorDescription} parameter MUST NOT include\n+   *                         characters outside the set {@code %x20-21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   * @param errorUri OPTIONAL. A URI identifying a human-readable web page with information about the error,\n+   *                 used to provide the client developer with additional information about the error.\n+   *                 Values for the {@code errorUri} parameter MUST conform to the URI-reference syntax and\n+   *                 thus MUST NOT include characters outside\n+   *                 the set {@code %x21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   */\n+  public TokenRequestException(String errorDescription, @Nullable String errorUri) {\n+    super(errorDescription);\n+    this.errorUri = errorUri;\n+  }\n+\n+  /**\n+   * Constructs a new {@link TokenRequestException} using {@code errorDescription} and {@code errorUri}.\n+   * @param errorDescription OPTIONAL. Human-readable ASCII [USASCII] text providing additional information,\n+   *                         used to assist the client developer in understanding the error that occurred.\n+   *                         Values for the {@code errorDescription} parameter MUST NOT include\n+   *                         characters outside the set {@code %x20-21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   * @param errorUri OPTIONAL. A URI identifying a human-readable web page with information about the error,\n+   *                 used to provide the client developer with additional information about the error.\n+   *                 Values for the {@code errorUri} parameter MUST conform to the URI-reference syntax and\n+   *                 thus MUST NOT include characters outside\n+   *                 the set {@code %x21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   * @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method).\n+   *              (A {@code null} value is permitted, and indicates that the cause is nonexistent or unknown.)\n+   */\n+  public TokenRequestException(String errorDescription, @Nullable String errorUri, Throwable cause) {\n+    super(errorDescription, cause);\n+    this.errorUri = errorUri;\n+  }\n+\n+  /**\n+   * A URI identifying a human-readable web page with information about the error, used to provide the client\n+   * developer with additional information about the error.\n+   * Values for the {@code errorUri} parameter MUST conform to the URI-reference syntax and thus MUST NOT\n+   * include characters outside the set {@code %x21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   */\n+  @Nullable\n+  public String getErrorUri() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3MjE3MA=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjE5Mzg3OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRequestExceptionBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzo0ODo0N1rOG_iJZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMjozNDo1MlrOHBm3tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3MjkzMg==", "bodyText": "Could be made static and moved to TokenRequestException?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469272932", "createdAt": "2020-08-12T13:48:47Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRequestExceptionBuilder.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.LinkedHashMap;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * A builder of a {@link TokenRequestException}.\n+ */\n+public class TokenRequestExceptionBuilder {\n+\n+    private static final String ERROR = \"error\";\n+    private static final String ERROR_DESCRIPTION = \"error_description\";\n+    private static final String ERROR_URI = \"error_uri\";\n+\n+    // RFC6749 (The OAuth 2.0 Authorization Framework) - https://tools.ietf.org/html/rfc6749#section-5.2\n+    private static final String INVALID_REQUEST = \"invalid_request\";\n+    private static final String INVALID_CLIENT = \"invalid_client\";\n+    private static final String INVALID_GRANT = \"invalid_grant\";\n+    private static final String UNAUTHORIZED_CLIENT = \"unauthorized_client\";\n+    private static final String UNSUPPORTED_GRANT_TYPE = \"unsupported_grant_type\";\n+    private static final String INVALID_SCOPE = \"invalid_scope\";\n+\n+    // RFC7009 (OAuth 2.0 Token Revocation) - https://tools.ietf.org/html/rfc7009\n+    private static final String UNSUPPORTED_TOKEN_TYPE = \"unsupported_token_type\";\n+\n+    static final ObjectMapper JSON = new ObjectMapper();\n+    private static final TypeReference<LinkedHashMap<String, String>> MAP_TYPE =\n+            new TypeReference<LinkedHashMap<String, String>>() {};\n+\n+    /**\n+     * Parses {@code JSON} error response body and created a new instance of {@link TokenRequestException}\n+     * using the response data.\n+     * @param rawResponse {@code JSON} formatted error response body.\n+     * @return a new instance of {@link TokenRequestException}\n+     */\n+    public TokenRequestException of(String rawResponse) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ0NzQ3Nw==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r471447477", "createdAt": "2020-08-17T12:34:52Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRequestExceptionBuilder.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.LinkedHashMap;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * A builder of a {@link TokenRequestException}.\n+ */\n+public class TokenRequestExceptionBuilder {\n+\n+    private static final String ERROR = \"error\";\n+    private static final String ERROR_DESCRIPTION = \"error_description\";\n+    private static final String ERROR_URI = \"error_uri\";\n+\n+    // RFC6749 (The OAuth 2.0 Authorization Framework) - https://tools.ietf.org/html/rfc6749#section-5.2\n+    private static final String INVALID_REQUEST = \"invalid_request\";\n+    private static final String INVALID_CLIENT = \"invalid_client\";\n+    private static final String INVALID_GRANT = \"invalid_grant\";\n+    private static final String UNAUTHORIZED_CLIENT = \"unauthorized_client\";\n+    private static final String UNSUPPORTED_GRANT_TYPE = \"unsupported_grant_type\";\n+    private static final String INVALID_SCOPE = \"invalid_scope\";\n+\n+    // RFC7009 (OAuth 2.0 Token Revocation) - https://tools.ietf.org/html/rfc7009\n+    private static final String UNSUPPORTED_TOKEN_TYPE = \"unsupported_token_type\";\n+\n+    static final ObjectMapper JSON = new ObjectMapper();\n+    private static final TypeReference<LinkedHashMap<String, String>> MAP_TYPE =\n+            new TypeReference<LinkedHashMap<String, String>>() {};\n+\n+    /**\n+     * Parses {@code JSON} error response body and created a new instance of {@link TokenRequestException}\n+     * using the response data.\n+     * @param rawResponse {@code JSON} formatted error response body.\n+     * @return a new instance of {@link TokenRequestException}\n+     */\n+    public TokenRequestException of(String rawResponse) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3MjkzMg=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjIwMjE5OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedMediaTypeException.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzo1MDozMFrOG_iOZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNDoxNjo0OFrOHCCtig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3NDIxNA==", "bodyText": "getMediaType() or mediaType()?\nCould accept and return MediaType?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469274214", "createdAt": "2020-08-12T13:50:30Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedMediaTypeException.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * A response {@code Content-Type} header does not match the expected type.\n+ */\n+public class UnsupportedMediaTypeException extends RuntimeException {\n+\n+    private static final long serialVersionUID = 5350546517834409748L;\n+\n+    private final String mediaType;\n+\n+    /**\n+     * Constructs new {@link UnsupportedMediaTypeException}.\n+     * @param mediaType A {@code Content-Type} of the response.\n+     * @param status An HTTP status of the response.\n+     * @param message A response content\n+     */\n+    public UnsupportedMediaTypeException(String mediaType, String status, @Nullable String message) {\n+        super(join(mediaType, status, message));\n+        this.mediaType = mediaType;\n+    }\n+\n+    /**\n+     * Constructs new {@link UnsupportedMediaTypeException}.\n+     * @param mediaType A {@code Content-Type} of the response.\n+     * @param status An HTTP status of the response.\n+     * @param message A response content\n+     * @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method).\n+     *              (A {@code null} value is permitted, and indicates that the cause is nonexistent or unknown.)\n+     */\n+    public UnsupportedMediaTypeException(String mediaType, String status, @Nullable String message,\n+                                         @Nullable Throwable cause) {\n+        super(join(mediaType, status, message), cause);\n+        this.mediaType = mediaType;\n+    }\n+\n+    private static String join(String mediaType, String status, @Nullable String message) {\n+        final StringBuilder builder = new StringBuilder();\n+        builder.append(status).append(\": \")\n+               .append(HttpHeaderNames.CONTENT_TYPE).append(\" - \")\n+               .append(mediaType);\n+        return (message == null) ? builder.toString() : builder.append(\": \").append(message).toString();\n+    }\n+\n+    /**\n+     * A {@code Content-Type} of the response.\n+     */\n+    public String getMediaType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ0ODAzOQ==", "bodyText": "Same reason here...\nThis mediaType comes in the error response body (as per the spec). I did not want to parse it. What if it's invalid or corrupt? Then we will fail processing the exception with another exception.", "url": "https://github.com/line/armeria/pull/2840#discussion_r471448039", "createdAt": "2020-08-17T12:35:58Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedMediaTypeException.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * A response {@code Content-Type} header does not match the expected type.\n+ */\n+public class UnsupportedMediaTypeException extends RuntimeException {\n+\n+    private static final long serialVersionUID = 5350546517834409748L;\n+\n+    private final String mediaType;\n+\n+    /**\n+     * Constructs new {@link UnsupportedMediaTypeException}.\n+     * @param mediaType A {@code Content-Type} of the response.\n+     * @param status An HTTP status of the response.\n+     * @param message A response content\n+     */\n+    public UnsupportedMediaTypeException(String mediaType, String status, @Nullable String message) {\n+        super(join(mediaType, status, message));\n+        this.mediaType = mediaType;\n+    }\n+\n+    /**\n+     * Constructs new {@link UnsupportedMediaTypeException}.\n+     * @param mediaType A {@code Content-Type} of the response.\n+     * @param status An HTTP status of the response.\n+     * @param message A response content\n+     * @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method).\n+     *              (A {@code null} value is permitted, and indicates that the cause is nonexistent or unknown.)\n+     */\n+    public UnsupportedMediaTypeException(String mediaType, String status, @Nullable String message,\n+                                         @Nullable Throwable cause) {\n+        super(join(mediaType, status, message), cause);\n+        this.mediaType = mediaType;\n+    }\n+\n+    private static String join(String mediaType, String status, @Nullable String message) {\n+        final StringBuilder builder = new StringBuilder();\n+        builder.append(status).append(\": \")\n+               .append(HttpHeaderNames.CONTENT_TYPE).append(\" - \")\n+               .append(mediaType);\n+        return (message == null) ? builder.toString() : builder.append(\": \").append(message).toString();\n+    }\n+\n+    /**\n+     * A {@code Content-Type} of the response.\n+     */\n+    public String getMediaType() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3NDIxNA=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwMzYyNg==", "bodyText": "SGTM", "url": "https://github.com/line/armeria/pull/2840#discussion_r471903626", "createdAt": "2020-08-18T04:16:48Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedMediaTypeException.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * A response {@code Content-Type} header does not match the expected type.\n+ */\n+public class UnsupportedMediaTypeException extends RuntimeException {\n+\n+    private static final long serialVersionUID = 5350546517834409748L;\n+\n+    private final String mediaType;\n+\n+    /**\n+     * Constructs new {@link UnsupportedMediaTypeException}.\n+     * @param mediaType A {@code Content-Type} of the response.\n+     * @param status An HTTP status of the response.\n+     * @param message A response content\n+     */\n+    public UnsupportedMediaTypeException(String mediaType, String status, @Nullable String message) {\n+        super(join(mediaType, status, message));\n+        this.mediaType = mediaType;\n+    }\n+\n+    /**\n+     * Constructs new {@link UnsupportedMediaTypeException}.\n+     * @param mediaType A {@code Content-Type} of the response.\n+     * @param status An HTTP status of the response.\n+     * @param message A response content\n+     * @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method).\n+     *              (A {@code null} value is permitted, and indicates that the cause is nonexistent or unknown.)\n+     */\n+    public UnsupportedMediaTypeException(String mediaType, String status, @Nullable String message,\n+                                         @Nullable Throwable cause) {\n+        super(join(mediaType, status, message), cause);\n+        this.mediaType = mediaType;\n+    }\n+\n+    private static String join(String mediaType, String status, @Nullable String message) {\n+        final StringBuilder builder = new StringBuilder();\n+        builder.append(status).append(\": \")\n+               .append(HttpHeaderNames.CONTENT_TYPE).append(\" - \")\n+               .append(mediaType);\n+        return (message == null) ? builder.toString() : builder.append(\": \").append(message).toString();\n+    }\n+\n+    /**\n+     * A {@code Content-Type} of the response.\n+     */\n+    public String getMediaType() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3NDIxNA=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjIwOTE5OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedResponseException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzo1MjowMFrOG_iSuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMjo0Mjo0OFrOHBnH-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3NTMyMA==", "bodyText": "How about just accepting and returning an HttpStatus?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469275320", "createdAt": "2020-08-12T13:52:00Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedResponseException.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A response type in not supported by the given request/response flow.\n+ */\n+public class UnsupportedResponseException extends RuntimeException {\n+\n+    private static final long serialVersionUID = 4982498806675787821L;\n+\n+    private final int statusCode;\n+\n+    /**\n+     * Constructs new {@link UnsupportedMediaTypeException}.\n+     * @param statusCode A status code of the response.\n+     * @param status An HTTP status of the response.\n+     * @param message A response content\n+     */\n+    public UnsupportedResponseException(int statusCode, String status, @Nullable String message) {\n+        super(join(status, message));\n+        this.statusCode = statusCode;\n+    }\n+\n+    /**\n+     * Constructs new {@link UnsupportedMediaTypeException}.\n+     * @param statusCode A status code of the response.\n+     * @param status An HTTP status of the response.\n+     * @param message A response content\n+     * @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method).\n+     *              (A {@code null} value is permitted, and indicates that the cause is nonexistent or unknown.)\n+     */\n+    public UnsupportedResponseException(int statusCode, String status,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1MTY0Mw==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r471451643", "createdAt": "2020-08-17T12:42:48Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedResponseException.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A response type in not supported by the given request/response flow.\n+ */\n+public class UnsupportedResponseException extends RuntimeException {\n+\n+    private static final long serialVersionUID = 4982498806675787821L;\n+\n+    private final int statusCode;\n+\n+    /**\n+     * Constructs new {@link UnsupportedMediaTypeException}.\n+     * @param statusCode A status code of the response.\n+     * @param status An HTTP status of the response.\n+     * @param message A response content\n+     */\n+    public UnsupportedResponseException(int statusCode, String status, @Nullable String message) {\n+        super(join(status, message));\n+        this.statusCode = statusCode;\n+    }\n+\n+    /**\n+     * Constructs new {@link UnsupportedMediaTypeException}.\n+     * @param statusCode A status code of the response.\n+     * @param status An HTTP status of the response.\n+     * @param message A response content\n+     * @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method).\n+     *              (A {@code null} value is permitted, and indicates that the cause is nonexistent or unknown.)\n+     */\n+    public UnsupportedResponseException(int statusCode, String status,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3NTMyMA=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjIxMjg0OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2AuthorizationFailureHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzo1Mjo0N1rOG_iVFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMjo1MjoyN1rOHBncZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3NTkyNg==", "bodyText": "Does it make sense to hide this from the public API?", "url": "https://github.com/line/armeria/pull/2840#discussion_r469275926", "createdAt": "2020-08-12T13:52:47Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2AuthorizationFailureHandler.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static com.linecorp.armeria.server.auth.oauth2.OAuth2TokenIntrospectionAuthorizer.ERROR_CODE;\n+import static com.linecorp.armeria.server.auth.oauth2.OAuth2TokenIntrospectionAuthorizer.ERROR_TYPE;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.AuthFailureHandler;\n+import com.linecorp.armeria.server.auth.AuthServiceBuilder;\n+import com.linecorp.armeria.server.auth.Authorizer;\n+\n+/**\n+ * A callback which is invoked to handle OAuth 2.0 authorization failure indicated by {@link Authorizer}.\n+ * Composes OAuth 2.0 authorization error response in one of the following ways:\n+ * <ul>\n+ *    <li>\n+ *    invalid_request\n+ *          <p>The request is missing a required parameter, includes an\n+ *          unsupported parameter or parameter value, repeats the same\n+ *          parameter, uses more than one method for including an access\n+ *          token, or is otherwise malformed. The resource server SHOULD\n+ *          respond with the HTTP 400 (Bad Request) status code.</p>\n+ *          Example:\n+ *          <pre>{@code\n+ *              HTTP/1.1 400 Bad Request\n+ *              Content-Type: application/json;charset=UTF-8\n+ *              {\"error\":\"unsupported_token_type\"}\n+ *          }</pre>\n+ *    </li>\n+ *    <li>\n+ *    invalid_token\n+ *          <p>The access token provided is expired, revoked, malformed, or\n+ *          invalid for other reasons. The resource SHOULD respond with\n+ *          the HTTP 401 (Unauthorized) status code. The client MAY\n+ *          request a new access token and retry the protected resource\n+ *          request.</p>\n+ *          Example:\n+ *          <pre>{@code\n+ *              HTTP/1.1 401 Unauthorized\n+ *              WWW-Authenticate: Bearer realm=\"example\",\n+ *                                error=\"invalid_token\",\n+ *                                scope=\"read write\"\n+ *          }</pre>\n+ *    </li>\n+ *    <li>\n+ *    insufficient_scope\n+ *          <p>The request requires higher privileges than provided by the\n+ *          access token. The resource server SHOULD respond with the HTTP\n+ *          403 (Forbidden) status code and MAY include the \"scope\"\n+ *          attribute with the scope necessary to access the protected\n+ *          resource.</p>\n+ *          Example:\n+ *          <pre>{@code\n+ *              HTTP/1.1 403 Forbidden\n+ *              Content-Type: application/json;charset=UTF-8\n+ *              {\"error\":\"insufficient_scope\"}\n+ *          }</pre>\n+ *    </li>\n+ * </ul>\n+ *\n+ * @see AuthServiceBuilder#onFailure(AuthFailureHandler)\n+ */\n+public class OAuth2AuthorizationFailureHandler implements AuthFailureHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1Njg2OA==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r471456868", "createdAt": "2020-08-17T12:52:27Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2AuthorizationFailureHandler.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth.oauth2;\n+\n+import static com.linecorp.armeria.server.auth.oauth2.OAuth2TokenIntrospectionAuthorizer.ERROR_CODE;\n+import static com.linecorp.armeria.server.auth.oauth2.OAuth2TokenIntrospectionAuthorizer.ERROR_TYPE;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.auth.AuthFailureHandler;\n+import com.linecorp.armeria.server.auth.AuthServiceBuilder;\n+import com.linecorp.armeria.server.auth.Authorizer;\n+\n+/**\n+ * A callback which is invoked to handle OAuth 2.0 authorization failure indicated by {@link Authorizer}.\n+ * Composes OAuth 2.0 authorization error response in one of the following ways:\n+ * <ul>\n+ *    <li>\n+ *    invalid_request\n+ *          <p>The request is missing a required parameter, includes an\n+ *          unsupported parameter or parameter value, repeats the same\n+ *          parameter, uses more than one method for including an access\n+ *          token, or is otherwise malformed. The resource server SHOULD\n+ *          respond with the HTTP 400 (Bad Request) status code.</p>\n+ *          Example:\n+ *          <pre>{@code\n+ *              HTTP/1.1 400 Bad Request\n+ *              Content-Type: application/json;charset=UTF-8\n+ *              {\"error\":\"unsupported_token_type\"}\n+ *          }</pre>\n+ *    </li>\n+ *    <li>\n+ *    invalid_token\n+ *          <p>The access token provided is expired, revoked, malformed, or\n+ *          invalid for other reasons. The resource SHOULD respond with\n+ *          the HTTP 401 (Unauthorized) status code. The client MAY\n+ *          request a new access token and retry the protected resource\n+ *          request.</p>\n+ *          Example:\n+ *          <pre>{@code\n+ *              HTTP/1.1 401 Unauthorized\n+ *              WWW-Authenticate: Bearer realm=\"example\",\n+ *                                error=\"invalid_token\",\n+ *                                scope=\"read write\"\n+ *          }</pre>\n+ *    </li>\n+ *    <li>\n+ *    insufficient_scope\n+ *          <p>The request requires higher privileges than provided by the\n+ *          access token. The resource server SHOULD respond with the HTTP\n+ *          403 (Forbidden) status code and MAY include the \"scope\"\n+ *          attribute with the scope necessary to access the protected\n+ *          resource.</p>\n+ *          Example:\n+ *          <pre>{@code\n+ *              HTTP/1.1 403 Forbidden\n+ *              Content-Type: application/json;charset=UTF-8\n+ *              {\"error\":\"insufficient_scope\"}\n+ *          }</pre>\n+ *    </li>\n+ * </ul>\n+ *\n+ * @see AuthServiceBuilder#onFailure(AuthFailureHandler)\n+ */\n+public class OAuth2AuthorizationFailureHandler implements AuthFailureHandler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3NTkyNg=="}, "originalCommit": {"oid": "e2eef13ef36d705634355e43cb7c3123382f44bd"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTcwOTEyOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AbstractOAuth2Request.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNDoyNzoxNFrOHCC3ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMTozNDo0MFrOHCPU0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwNjI0Mw==", "bodyText": "As I mentioned, the *Request classes in common.auth.oauth2 could be hidden from the public API by moving them to internal.common.auth.oauth2.", "url": "https://github.com/line/armeria/pull/2840#discussion_r471906243", "createdAt": "2020-08-18T04:27:14Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+public abstract class AbstractOAuth2Request<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c417198fb4cf397ae8ee568015a077f591be3376"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA5ODI0Mw==", "bodyText": "moved to internal as suggested", "url": "https://github.com/line/armeria/pull/2840#discussion_r472098243", "createdAt": "2020-08-18T11:10:14Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+public abstract class AbstractOAuth2Request<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwNjI0Mw=="}, "originalCommit": {"oid": "c417198fb4cf397ae8ee568015a077f591be3376"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjExMDI4OA==", "bodyText": "Thanks, @max904-github. Will review again soon.", "url": "https://github.com/line/armeria/pull/2840#discussion_r472110288", "createdAt": "2020-08-18T11:34:40Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/AbstractOAuth2Request.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.common.QueryParamsBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+\n+/**\n+ * A common abstraction for the requests implementing various OAuth 2.0 request/response flows,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749\">[RFC6749]</a> and other relevant specifications.\n+ * @param <T> the type of the authorization result.\n+ */\n+public abstract class AbstractOAuth2Request<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwNjI0Mw=="}, "originalCommit": {"oid": "c417198fb4cf397ae8ee568015a077f591be3376"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzA2MTUxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthServiceBuilder.java", "isResolved": false, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMTo0MzoyMlrOHrLhYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxODowMDozN1rOINRnSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzOTU4Ng==", "bodyText": "What would happen if a user adds more than one authorizer? Wouldn't each authorizer need to have its own success/failure handler pair?", "url": "https://github.com/line/armeria/pull/2840#discussion_r515039586", "createdAt": "2020-10-30T11:43:22Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthServiceBuilder.java", "diffHunk": "@@ -140,6 +141,7 @@ public AuthServiceBuilder addOAuth2(Authorizer<? super OAuth2Token> authorizer,\n             return authorizer.authorize(ctx, token);\n         };\n         add(requestAuthorizer);\n+        setAuthorizerHandlers(authorizer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85d92d51d2a0dc70eac909d6db3a76bdb63e473b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkyMTg2NA==", "bodyText": "I don't think it makes sense or even possible to chain success/failure handlers. Unlike authorizers, which represent decision making points, handlers represent concrete actions, like AuthSuccessHandler successHandler = Service::serve;. How can this action get chained or replicated?\nThe problem is that for some protocols like OAuth 2 the action (concretely failureHandler) is bound to the decision making. That's why it made sense to add handlers to an Authorizer as you've suggested. However, Authorizer chaining brings ambiguity to that.\nIMHO Authorizer chaining is quite ambiguous and dangerous even without that, at least in the way the logic implemented right now - it goes against some basic authorization principles. Solution implemented today represents a permissive mechanism where two conflicting policies (represented by Authorizers) may permit the client even if one of the policies explicitly says NO. It should work the other way around - it should permit the client only if ALL policies said YES.\nDo you know of the use cases when it's required to have authorizers chaining? Could it be solved via multiple AuthServices instead?", "url": "https://github.com/line/armeria/pull/2840#discussion_r540921864", "createdAt": "2020-12-11T12:45:38Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthServiceBuilder.java", "diffHunk": "@@ -140,6 +141,7 @@ public AuthServiceBuilder addOAuth2(Authorizer<? super OAuth2Token> authorizer,\n             return authorizer.authorize(ctx, token);\n         };\n         add(requestAuthorizer);\n+        setAuthorizerHandlers(authorizer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzOTU4Ng=="}, "originalCommit": {"oid": "85d92d51d2a0dc70eac909d6db3a76bdb63e473b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE2Mjg4NQ==", "bodyText": "Hey, thanks for the feedback and sorry for giving a poor suggestion.\nThe authorizer chaining was introduced to handle the case where a service has to support different protocols, e.g. OAuth1, OAuth2 and authorize by source IP address, etc.\nI think it can't be solved by having multiple AuthServices in the pipeline because the first AuthService will have to authorize the request to make the second AuthService evaluated.\nIdeally, we could change the return value of Authorizer.authorize() so it can represent one of the following states:\n\nAUTHORIZED - successHandler will handle the request.\nUNAUTHORIZED - failureHandler will handle the request.\nNEXT - ask the next authorizer. If reached at the last authorizer, failureHandler will handle the request.\n\nHowever, we can't do this due to backward compatibility.\nHow about doing this until we release Armeria 2 (maybe late 2021?) as a compromise?\n\nWhen authorizer returns true, use the authorizer's successHandler.\nWhen authorizer returns false, try the next authorizer. (i.e. retain the current AuthService behavior.)\nWhen the last authorizer returns false, use the last authorizer's failureHandler.", "url": "https://github.com/line/armeria/pull/2840#discussion_r542162885", "createdAt": "2020-12-14T07:25:23Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthServiceBuilder.java", "diffHunk": "@@ -140,6 +141,7 @@ public AuthServiceBuilder addOAuth2(Authorizer<? super OAuth2Token> authorizer,\n             return authorizer.authorize(ctx, token);\n         };\n         add(requestAuthorizer);\n+        setAuthorizerHandlers(authorizer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzOTU4Ng=="}, "originalCommit": {"oid": "85d92d51d2a0dc70eac909d6db3a76bdb63e473b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI4OTM2OQ==", "bodyText": "Sure, let me think about it. However, I see some problem immediately - this will break the tie between the Authorizer and Success/FailureHandlers. Following your proposal, in case when there are two Authorizers, then AuthService could engage SuccessHandler associated with the first Authorizer and engage FailureHandler associated with the second Authorizer. It could be messy. If we keep Authorizer chaining, we have to disassociate handlers from the Authorizers (i.e. revert the last changes I did).", "url": "https://github.com/line/armeria/pull/2840#discussion_r542289369", "createdAt": "2020-12-14T10:50:50Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthServiceBuilder.java", "diffHunk": "@@ -140,6 +141,7 @@ public AuthServiceBuilder addOAuth2(Authorizer<? super OAuth2Token> authorizer,\n             return authorizer.authorize(ctx, token);\n         };\n         add(requestAuthorizer);\n+        setAuthorizerHandlers(authorizer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzOTU4Ng=="}, "originalCommit": {"oid": "85d92d51d2a0dc70eac909d6db3a76bdb63e473b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwNDU0MA==", "bodyText": "Yeah, I thought about that problem where only the last failure handler will be used. I see a few ways to address this:\n\nDocument the behavior (only the last authorizer's failureHandler will be used).\nMake sure all authorizers except the last one did not override failureHandler() method. Raise an exception if not.\nRevert the change that added successHandler() and failureHandler().\n\nBut we need to how we can make OAuth2TokenIntrospectionAuthorizer to configure AuthServiceBuilder. It'd be nice if AuthService.onFailure() is automatically called when OAuth2TokenIntrospectionAuthorizer for example.\n\n\n\nWhich would be the best?", "url": "https://github.com/line/armeria/pull/2840#discussion_r542304540", "createdAt": "2020-12-14T11:14:56Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthServiceBuilder.java", "diffHunk": "@@ -140,6 +141,7 @@ public AuthServiceBuilder addOAuth2(Authorizer<? super OAuth2Token> authorizer,\n             return authorizer.authorize(ctx, token);\n         };\n         add(requestAuthorizer);\n+        setAuthorizerHandlers(authorizer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzOTU4Ng=="}, "originalCommit": {"oid": "85d92d51d2a0dc70eac909d6db3a76bdb63e473b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc1ODQzNg==", "bodyText": "I think if we want to keep Authorizer chaining in place, we should make following adjustments:\nAs you pointed, ideally, we should change Authorizer.authorize() signature to return {AUTHORIZED, UNAUTHORIZED, NEXT}. However, I\u2019m not sure when would the authorizer return NEXT really \u2013 as you know most on the authorization systems always return some kind of opaque NO_ACCESS, no matter whether the user specified wrong credentials, has insufficient rights or simply absent in the authorization DB altogether.\nTherefore, we should change chaining semantics from \u201cgoing next on failure\u201d to \u201cgoing next on success\u201d. I.e. reverse the current AuthService behavior:\n\nWhen authorizer returns false, use the authorizer's failure handler.\nWhen authorizer returns true, try the next authorizer.\nReaching the end of the success chain engages common success handler.\n\nThis will require minimal changes to the API, however, the chaining will work differently.\nOn the implementation side the AuthService will still have common success and default failure handlers. Each Authorizer may be permitted to define only custom failure handler (which will serve as authorization sequence terminator). If an Authorizer provides its own handler, the AuthService will use that to terminate, but if the Authorizer does not provide a custom handler, the AuthService will use the default one.\nWhat do you think?", "url": "https://github.com/line/armeria/pull/2840#discussion_r546758436", "createdAt": "2020-12-21T15:09:03Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthServiceBuilder.java", "diffHunk": "@@ -140,6 +141,7 @@ public AuthServiceBuilder addOAuth2(Authorizer<? super OAuth2Token> authorizer,\n             return authorizer.authorize(ctx, token);\n         };\n         add(requestAuthorizer);\n+        setAuthorizerHandlers(authorizer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzOTU4Ng=="}, "originalCommit": {"oid": "85d92d51d2a0dc70eac909d6db3a76bdb63e473b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc4Mjc3Mw==", "bodyText": "We could make it even more complex and introduce a \u201cchaining mode\u201d for the chain to work: {AND, OR}. The Authorizer would remain binary (true/false), but the AuthService to engage next Authorizer and terminate the sequence either on failure (AND) or on success (OR). The AND case I have described above. The OR case would look like the following:\nThe AuthService invokes the first Authorizer form the chain. If it succeeds, it terminates the chain and invokes common success handler. If it fails, the AuthService tries the next Authorizer, and so on. At the end of the chain, if none of the Authroizers returned success, the AuthService selects the Authorizer to handle the failure handler (typically first or last, or even designated one). The AuthService always engages matching failure handler from the selected Authorizer. If an authorizer does not define a failure handler, the AuthService selects the one that does or engages default failure handler.\nI think AND mode should be the default one, as it matches security practices better. OR mode should be specified explicitly.\nTo summarize the interface changes:\n\nAuthService will have successHandler as before and existing failureHandler will rename to defaultFailureHandler.\nAuthService will have a chainMode that defaults to AND.\nAuthService will have an additional configuration on which Authorizer to select in OR mode with following policies: {FIRST, LAST, FIRST_WITH_HANDLER, LAST_WITH_HANDLER, SELECTED}.\nAuthorizer will have failureHandler with default implementation to NULL, and will no longer have successHandler.", "url": "https://github.com/line/armeria/pull/2840#discussion_r546782773", "createdAt": "2020-12-21T15:51:56Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthServiceBuilder.java", "diffHunk": "@@ -140,6 +141,7 @@ public AuthServiceBuilder addOAuth2(Authorizer<? super OAuth2Token> authorizer,\n             return authorizer.authorize(ctx, token);\n         };\n         add(requestAuthorizer);\n+        setAuthorizerHandlers(authorizer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzOTU4Ng=="}, "originalCommit": {"oid": "85d92d51d2a0dc70eac909d6db3a76bdb63e473b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE4NTc4Mw==", "bodyText": "Thanks for the idea. I have a few comments.\n\nAuthService will have a chainMode that defaults to AND.\n\nI guess we can't default to AND in this case because it will be a breaking change, because AuthService and Authrizer are unfortunately (?) not unstable. For now, could we just stay with the current behavior of 'success if true, next if false'? I think it's fine as long as a user has one authorizer. We can redesign this properly in Armeria 2 or defer the changes like introducing chainMode, unless this problem blocks you from implementing OAuth2. This way, we could merge your work sooner without making too much changes in the core API.\n\nAuthorizer will have failureHandler with default implementation to NULL, and will no longer have successHandler.\n\nWouldn't it be better having successHandler for each authorizer? An authorizer might want to perform some action specific to its corresponding auth mechanism, e.g. updating metrics, redirecting to an intermediary page, etc.", "url": "https://github.com/line/armeria/pull/2840#discussion_r547185783", "createdAt": "2020-12-22T10:07:19Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthServiceBuilder.java", "diffHunk": "@@ -140,6 +141,7 @@ public AuthServiceBuilder addOAuth2(Authorizer<? super OAuth2Token> authorizer,\n             return authorizer.authorize(ctx, token);\n         };\n         add(requestAuthorizer);\n+        setAuthorizerHandlers(authorizer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzOTU4Ng=="}, "originalCommit": {"oid": "85d92d51d2a0dc70eac909d6db3a76bdb63e473b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgyMTQ2NQ==", "bodyText": "Ok, I will implement it in the following way \"for now\" following OR mode.\nThe AuthService invokes the first Authorizer form the chain. If it succeeds, it terminates the chain and invokes associated successHandler. If successHandler not defined for given Authorizer, it will invoke default/common successHandler. If the Authorizer fails (returns false), the AuthService tries the next Authorizer, and so on. At the end of the chain, if none of the Authroizers returned success, the AuthService selects the Authorizer to handle the failureHandler (LAST_WITH_HANDLER - the last one that has specific failureHandler defined). The AuthService always engages matching failureHandler from the selected Authorizer. If none of the Authorizers define a failureHandler, the AuthService selects engages default/common failureHandler.\nSummary of the interface changes:\n\nAuthService will have successHandler and failureHandler as before - these will play a role of default/common handlers.\nAuthService will have LAST_WITH_HANDLER Authorizer selection strategy hardcoded.\nAuthorizer will have failureHandler and successHandler set to NULL by default, as before.\n\nThis solution will be fully backward compatible and the new changes will mostly take place in AuthService#serve() method.", "url": "https://github.com/line/armeria/pull/2840#discussion_r547821465", "createdAt": "2020-12-23T08:52:21Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthServiceBuilder.java", "diffHunk": "@@ -140,6 +141,7 @@ public AuthServiceBuilder addOAuth2(Authorizer<? super OAuth2Token> authorizer,\n             return authorizer.authorize(ctx, token);\n         };\n         add(requestAuthorizer);\n+        setAuthorizerHandlers(authorizer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzOTU4Ng=="}, "originalCommit": {"oid": "85d92d51d2a0dc70eac909d6db3a76bdb63e473b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM3ODMyMQ==", "bodyText": "Excellent. Thank you so much for your understanding. I agree that this is not ideal but it will help us move forward. Looking forward to this PR being merged and your follow-up PRs! \ud83d\ude47", "url": "https://github.com/line/armeria/pull/2840#discussion_r548378321", "createdAt": "2020-12-24T04:35:52Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthServiceBuilder.java", "diffHunk": "@@ -140,6 +141,7 @@ public AuthServiceBuilder addOAuth2(Authorizer<? super OAuth2Token> authorizer,\n             return authorizer.authorize(ctx, token);\n         };\n         add(requestAuthorizer);\n+        setAuthorizerHandlers(authorizer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzOTU4Ng=="}, "originalCommit": {"oid": "85d92d51d2a0dc70eac909d6db3a76bdb63e473b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MDk4NQ==", "bodyText": "Pushed the requested changes as described above. Had to extract chaining logic into dedicated AuthorizerChain and extract HttpRequest token authorization into dedicated DelegatingHttpRequestAuthorizer classes. Made a minor correction to existing test case (AuthorizerTest#orElseToString()).\nSorry for the delays - got lot's of work lately.", "url": "https://github.com/line/armeria/pull/2840#discussion_r550790985", "createdAt": "2021-01-01T18:00:37Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthServiceBuilder.java", "diffHunk": "@@ -140,6 +141,7 @@ public AuthServiceBuilder addOAuth2(Authorizer<? super OAuth2Token> authorizer,\n             return authorizer.authorize(ctx, token);\n         };\n         add(requestAuthorizer);\n+        setAuthorizerHandlers(authorizer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzOTU4Ng=="}, "originalCommit": {"oid": "85d92d51d2a0dc70eac909d6db3a76bdb63e473b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjQ0OTc3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/server/auth/AuthorizerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNjoyMzo1NlrOIOLcmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODoxMDo0N1rOIO1bZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTczODUyMw==", "bodyText": "Could use @ParameterizedTest with @CsvSource?", "url": "https://github.com/line/armeria/pull/2840#discussion_r551738523", "createdAt": "2021-01-05T06:23:56Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/auth/AuthorizerTest.java", "diffHunk": "@@ -126,17 +129,71 @@ public void orElseSecond() {\n \n     @Test\n     public void orElseToString() {\n-        final Authorizer<Object> a = new AuthorizerWithToString(\"A\");\n-        final Authorizer<Object> b = new AuthorizerWithToString(\"B\");\n-        final Authorizer<Object> c = new AuthorizerWithToString(\"C\");\n-        final Authorizer<Object> d = new AuthorizerWithToString(\"D\");\n+        final Authorizer<Object> a = new NamedAuthorizer<>(\"A\");\n+        final Authorizer<Object> b = new NamedAuthorizer<>(\"B\");\n+        final Authorizer<Object> c = new NamedAuthorizer<>(\"C\");\n+        final Authorizer<Object> d = new NamedAuthorizer<>(\"D\");\n+        final Authorizer<Object> e = new NamedAuthorizer<>(\"E\");\n \n         // A + B\n         assertThat(a.orElse(b).toString()).isEqualTo(\"[A, B]\");\n-        // A + B\n+        // A + B + C\n         assertThat(a.orElse(b).orElse(c).toString()).isEqualTo(\"[A, B, C]\");\n-        // (A + B) + (C + D)\n-        assertThat(a.orElse(b).orElse(c.orElse(d)).toString()).isEqualTo(\"[A, B, C, D]\");\n+        // A + B + (C + D) + E\n+        assertThat(a.orElse(b).orElse(c.orElse(d)).orElse(e).toString()).isEqualTo(\"[A, B, [C, D], E]\");\n+    }\n+\n+    @Test\n+    public void orElseHandler() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA2NzU2MQ==", "bodyText": "Done. Used @MethodSource instead of @CsvSource since JUnit 5 lacks array parameter conversions. Also migrated the unit test fully to JUnit 5 as @ParameterizedTest was in conflict with Junit 4.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552067561", "createdAt": "2021-01-05T17:06:14Z", "author": {"login": "max904-github"}, "path": "core/src/test/java/com/linecorp/armeria/server/auth/AuthorizerTest.java", "diffHunk": "@@ -126,17 +129,71 @@ public void orElseSecond() {\n \n     @Test\n     public void orElseToString() {\n-        final Authorizer<Object> a = new AuthorizerWithToString(\"A\");\n-        final Authorizer<Object> b = new AuthorizerWithToString(\"B\");\n-        final Authorizer<Object> c = new AuthorizerWithToString(\"C\");\n-        final Authorizer<Object> d = new AuthorizerWithToString(\"D\");\n+        final Authorizer<Object> a = new NamedAuthorizer<>(\"A\");\n+        final Authorizer<Object> b = new NamedAuthorizer<>(\"B\");\n+        final Authorizer<Object> c = new NamedAuthorizer<>(\"C\");\n+        final Authorizer<Object> d = new NamedAuthorizer<>(\"D\");\n+        final Authorizer<Object> e = new NamedAuthorizer<>(\"E\");\n \n         // A + B\n         assertThat(a.orElse(b).toString()).isEqualTo(\"[A, B]\");\n-        // A + B\n+        // A + B + C\n         assertThat(a.orElse(b).orElse(c).toString()).isEqualTo(\"[A, B, C]\");\n-        // (A + B) + (C + D)\n-        assertThat(a.orElse(b).orElse(c.orElse(d)).toString()).isEqualTo(\"[A, B, C, D]\");\n+        // A + B + (C + D) + E\n+        assertThat(a.orElse(b).orElse(c.orElse(d)).orElse(e).toString()).isEqualTo(\"[A, B, [C, D], E]\");\n+    }\n+\n+    @Test\n+    public void orElseHandler() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTczODUyMw=="}, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyNjM0Mg==", "bodyText": "Thank you for migration, @max904-github \ud83d\ude47", "url": "https://github.com/line/armeria/pull/2840#discussion_r552426342", "createdAt": "2021-01-06T08:10:47Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/auth/AuthorizerTest.java", "diffHunk": "@@ -126,17 +129,71 @@ public void orElseSecond() {\n \n     @Test\n     public void orElseToString() {\n-        final Authorizer<Object> a = new AuthorizerWithToString(\"A\");\n-        final Authorizer<Object> b = new AuthorizerWithToString(\"B\");\n-        final Authorizer<Object> c = new AuthorizerWithToString(\"C\");\n-        final Authorizer<Object> d = new AuthorizerWithToString(\"D\");\n+        final Authorizer<Object> a = new NamedAuthorizer<>(\"A\");\n+        final Authorizer<Object> b = new NamedAuthorizer<>(\"B\");\n+        final Authorizer<Object> c = new NamedAuthorizer<>(\"C\");\n+        final Authorizer<Object> d = new NamedAuthorizer<>(\"D\");\n+        final Authorizer<Object> e = new NamedAuthorizer<>(\"E\");\n \n         // A + B\n         assertThat(a.orElse(b).toString()).isEqualTo(\"[A, B]\");\n-        // A + B\n+        // A + B + C\n         assertThat(a.orElse(b).orElse(c).toString()).isEqualTo(\"[A, B, C]\");\n-        // (A + B) + (C + D)\n-        assertThat(a.orElse(b).orElse(c.orElse(d)).toString()).isEqualTo(\"[A, B, C, D]\");\n+        // A + B + (C + D) + E\n+        assertThat(a.orElse(b).orElse(c.orElse(d)).orElse(e).toString()).isEqualTo(\"[A, B, [C, D], E]\");\n+    }\n+\n+    @Test\n+    public void orElseHandler() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTczODUyMw=="}, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjQ2MTA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNjoyOTowNFrOIOLixg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzowNzo0OFrOIOflZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MDEwMg==", "bodyText": "How about accepting a list of Authorizers and making an immutable copy of the list rather than keeping a mutable list?", "url": "https://github.com/line/armeria/pull/2840#discussion_r551740102", "createdAt": "2021-01-05T06:29:04Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Chains multiple {@link Authorizer}s together into a single {@link Authorizer}.\n+ * Utilizes {@link AuthorizerSelectionStrategy} to select corresponding {@link AuthFailureHandler}.\n+ */\n+final class AuthorizerChain<T> implements Authorizer<T> {\n+\n+    enum AuthorizerSelectionStrategy {\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain.\n+         */\n+        FIRST,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain.\n+         */\n+        LAST,\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        FIRST_WITH_HANDLER,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        LAST_WITH_HANDLER\n+    }\n+\n+    private final LinkedList<Authorizer<T>> authorizers = new LinkedList<>();\n+    private final AuthorizerSelectionStrategy selectionStrategy;\n+    @Nullable\n+    private AuthSuccessHandler successHandler;\n+    @Nullable\n+    private AuthFailureHandler failureHandler;\n+\n+    AuthorizerChain(Authorizer<T> firstAuthorizer, AuthorizerSelectionStrategy selectionStrategy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA2ODQ1NA==", "bodyText": "Done. However, note that AuthorizerChain still won't be immutable due to dynamic handlers assignment.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552068454", "createdAt": "2021-01-05T17:07:48Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Chains multiple {@link Authorizer}s together into a single {@link Authorizer}.\n+ * Utilizes {@link AuthorizerSelectionStrategy} to select corresponding {@link AuthFailureHandler}.\n+ */\n+final class AuthorizerChain<T> implements Authorizer<T> {\n+\n+    enum AuthorizerSelectionStrategy {\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain.\n+         */\n+        FIRST,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain.\n+         */\n+        LAST,\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        FIRST_WITH_HANDLER,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        LAST_WITH_HANDLER\n+    }\n+\n+    private final LinkedList<Authorizer<T>> authorizers = new LinkedList<>();\n+    private final AuthorizerSelectionStrategy selectionStrategy;\n+    @Nullable\n+    private AuthSuccessHandler successHandler;\n+    @Nullable\n+    private AuthFailureHandler failureHandler;\n+\n+    AuthorizerChain(Authorizer<T> firstAuthorizer, AuthorizerSelectionStrategy selectionStrategy) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MDEwMg=="}, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjQ2NTA2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNjozMTowOFrOIOLlAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzowODowOFrOIOfmJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MDY3NA==", "bodyText": "We should not update the internal state of this class here. Could we return a new AuthorizerChain with a newly constructed list? e.g.\nfinal List<Authorizer<T>> newAuthorizers =\n    ImmutableList.builder()\n                 .addAll(authorizers)\n                 .add(requireNonNull(nextAuthorizer, \"nextAuthorizer\")\n                 .build();\nreturn new AuthorizerChain<>(newAuthorizers, ...);", "url": "https://github.com/line/armeria/pull/2840#discussion_r551740674", "createdAt": "2021-01-05T06:31:08Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Chains multiple {@link Authorizer}s together into a single {@link Authorizer}.\n+ * Utilizes {@link AuthorizerSelectionStrategy} to select corresponding {@link AuthFailureHandler}.\n+ */\n+final class AuthorizerChain<T> implements Authorizer<T> {\n+\n+    enum AuthorizerSelectionStrategy {\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain.\n+         */\n+        FIRST,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain.\n+         */\n+        LAST,\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        FIRST_WITH_HANDLER,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        LAST_WITH_HANDLER\n+    }\n+\n+    private final LinkedList<Authorizer<T>> authorizers = new LinkedList<>();\n+    private final AuthorizerSelectionStrategy selectionStrategy;\n+    @Nullable\n+    private AuthSuccessHandler successHandler;\n+    @Nullable\n+    private AuthFailureHandler failureHandler;\n+\n+    AuthorizerChain(Authorizer<T> firstAuthorizer, AuthorizerSelectionStrategy selectionStrategy) {\n+        authorizers.add(requireNonNull(firstAuthorizer, \"firstAuthorizer\"));\n+        this.selectionStrategy = requireNonNull(selectionStrategy, \"selectionStrategy\");\n+        if (selectionStrategy == AuthorizerSelectionStrategy.FIRST) {\n+            // this could be NULL\n+            failureHandler = authorizers.getFirst().failureHandler();\n+        }\n+    }\n+\n+    /**\n+     * Adds a new {@link Authorizer} to the chain.\n+     * @return an original {@link AuthorizerChain} instance with added {@link Authorizer}.\n+     */\n+    @Override\n+    public Authorizer<T> orElse(Authorizer<T> nextAuthorizer) {\n+        authorizers.add(requireNonNull(nextAuthorizer, \"nextAuthorizer\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA2ODY0Ng==", "bodyText": "Done. However, note that AuthorizerChain still won't be immutable due to dynamic handlers assignment.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552068646", "createdAt": "2021-01-05T17:08:08Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Chains multiple {@link Authorizer}s together into a single {@link Authorizer}.\n+ * Utilizes {@link AuthorizerSelectionStrategy} to select corresponding {@link AuthFailureHandler}.\n+ */\n+final class AuthorizerChain<T> implements Authorizer<T> {\n+\n+    enum AuthorizerSelectionStrategy {\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain.\n+         */\n+        FIRST,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain.\n+         */\n+        LAST,\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        FIRST_WITH_HANDLER,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        LAST_WITH_HANDLER\n+    }\n+\n+    private final LinkedList<Authorizer<T>> authorizers = new LinkedList<>();\n+    private final AuthorizerSelectionStrategy selectionStrategy;\n+    @Nullable\n+    private AuthSuccessHandler successHandler;\n+    @Nullable\n+    private AuthFailureHandler failureHandler;\n+\n+    AuthorizerChain(Authorizer<T> firstAuthorizer, AuthorizerSelectionStrategy selectionStrategy) {\n+        authorizers.add(requireNonNull(firstAuthorizer, \"firstAuthorizer\"));\n+        this.selectionStrategy = requireNonNull(selectionStrategy, \"selectionStrategy\");\n+        if (selectionStrategy == AuthorizerSelectionStrategy.FIRST) {\n+            // this could be NULL\n+            failureHandler = authorizers.getFirst().failureHandler();\n+        }\n+    }\n+\n+    /**\n+     * Adds a new {@link Authorizer} to the chain.\n+     * @return an original {@link AuthorizerChain} instance with added {@link Authorizer}.\n+     */\n+    @Override\n+    public Authorizer<T> orElse(Authorizer<T> nextAuthorizer) {\n+        authorizers.add(requireNonNull(nextAuthorizer, \"nextAuthorizer\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MDY3NA=="}, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjQ3NzU2OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNjozNjo0NVrOIOLrow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzowOTo1M1rOIOfqKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MjM3MQ==", "bodyText": "(Global comment) Shall we remove Async suffix from all async operations? Armeria operations are usually asynchronous anyway. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2840#discussion_r551742371", "createdAt": "2021-01-05T06:36:45Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant {\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    /**\n+     * Holds a token object and facilitates its lifecycle.\n+     */\n+    private final TokenLifecycleManager<GrantedOAuth2AccessToken> tokenManager;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier,\n+                                     @Nullable Consumer<? super GrantedOAuth2AccessToken> tokenConsumer,\n+                                     @Nullable Executor executor) {\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        tokenManager = new TokenLifecycleManager<>(this::isValid, this::canRefresh,\n+                                                   this::shallObtainInsteadOfUpdate,\n+                                                   this::obtainAccessTokenAsync, this::refreshAccessTokenAsync,\n+                                                   tokenSupplier, tokenConsumer, executor);\n+    }\n+\n+    /**\n+     * Tests the token for validity at the given {@link Instant} time.\n+     */\n+    private boolean isValid(GrantedOAuth2AccessToken token, Instant now) {\n+        return token.isValid(now.plus(refreshBefore));\n+    }\n+\n+    /**\n+     * Tests whether the token object can be refreshed or re-obtained.\n+     */\n+    private boolean canRefresh(GrantedOAuth2AccessToken token) {\n+        return token.refreshToken() != null;\n+    }\n+\n+    /**\n+     * Tests whether given {@link Throwable} indicates that the token shall be re-obtained\n+     * after the refresh operation failure.\n+     */\n+    private boolean shallObtainInsteadOfUpdate(Throwable throwable) {\n+        return throwable instanceof TokenRequestException;\n+    }\n+\n+    /**\n+     * Refreshes access token.\n+     */\n+    private CompletionStage<GrantedOAuth2AccessToken> refreshAccessTokenAsync(GrantedOAuth2AccessToken token) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA2OTY3NQ==", "bodyText": "Done", "url": "https://github.com/line/armeria/pull/2840#discussion_r552069675", "createdAt": "2021-01-05T17:09:53Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant {\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    /**\n+     * Holds a token object and facilitates its lifecycle.\n+     */\n+    private final TokenLifecycleManager<GrantedOAuth2AccessToken> tokenManager;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier,\n+                                     @Nullable Consumer<? super GrantedOAuth2AccessToken> tokenConsumer,\n+                                     @Nullable Executor executor) {\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        tokenManager = new TokenLifecycleManager<>(this::isValid, this::canRefresh,\n+                                                   this::shallObtainInsteadOfUpdate,\n+                                                   this::obtainAccessTokenAsync, this::refreshAccessTokenAsync,\n+                                                   tokenSupplier, tokenConsumer, executor);\n+    }\n+\n+    /**\n+     * Tests the token for validity at the given {@link Instant} time.\n+     */\n+    private boolean isValid(GrantedOAuth2AccessToken token, Instant now) {\n+        return token.isValid(now.plus(refreshBefore));\n+    }\n+\n+    /**\n+     * Tests whether the token object can be refreshed or re-obtained.\n+     */\n+    private boolean canRefresh(GrantedOAuth2AccessToken token) {\n+        return token.refreshToken() != null;\n+    }\n+\n+    /**\n+     * Tests whether given {@link Throwable} indicates that the token shall be re-obtained\n+     * after the refresh operation failure.\n+     */\n+    private boolean shallObtainInsteadOfUpdate(Throwable throwable) {\n+        return throwable instanceof TokenRequestException;\n+    }\n+\n+    /**\n+     * Refreshes access token.\n+     */\n+    private CompletionStage<GrantedOAuth2AccessToken> refreshAccessTokenAsync(GrantedOAuth2AccessToken token) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MjM3MQ=="}, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjQ3ODA3OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNjozNjo1NlrOIOLr6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMTo1MToxNVrOIOu4nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MjQ0MA==", "bodyText": "(Global comment) Could you make all protected methods in package-private classes package-private?", "url": "https://github.com/line/armeria/pull/2840#discussion_r551742440", "createdAt": "2021-01-05T06:36:56Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant {\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    /**\n+     * Holds a token object and facilitates its lifecycle.\n+     */\n+    private final TokenLifecycleManager<GrantedOAuth2AccessToken> tokenManager;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier,\n+                                     @Nullable Consumer<? super GrantedOAuth2AccessToken> tokenConsumer,\n+                                     @Nullable Executor executor) {\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        tokenManager = new TokenLifecycleManager<>(this::isValid, this::canRefresh,\n+                                                   this::shallObtainInsteadOfUpdate,\n+                                                   this::obtainAccessTokenAsync, this::refreshAccessTokenAsync,\n+                                                   tokenSupplier, tokenConsumer, executor);\n+    }\n+\n+    /**\n+     * Tests the token for validity at the given {@link Instant} time.\n+     */\n+    private boolean isValid(GrantedOAuth2AccessToken token, Instant now) {\n+        return token.isValid(now.plus(refreshBefore));\n+    }\n+\n+    /**\n+     * Tests whether the token object can be refreshed or re-obtained.\n+     */\n+    private boolean canRefresh(GrantedOAuth2AccessToken token) {\n+        return token.refreshToken() != null;\n+    }\n+\n+    /**\n+     * Tests whether given {@link Throwable} indicates that the token shall be re-obtained\n+     * after the refresh operation failure.\n+     */\n+    private boolean shallObtainInsteadOfUpdate(Throwable throwable) {\n+        return throwable instanceof TokenRequestException;\n+    }\n+\n+    /**\n+     * Refreshes access token.\n+     */\n+    private CompletionStage<GrantedOAuth2AccessToken> refreshAccessTokenAsync(GrantedOAuth2AccessToken token) {\n+        return refreshRequest.make(token);\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link GrantedOAuth2AccessToken} or an\n+     *         exception, if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<GrantedOAuth2AccessToken> obtainAccessTokenAsync(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMxOTEzNQ==", "bodyText": "Done", "url": "https://github.com/line/armeria/pull/2840#discussion_r552319135", "createdAt": "2021-01-06T01:51:15Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant {\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    /**\n+     * Holds a token object and facilitates its lifecycle.\n+     */\n+    private final TokenLifecycleManager<GrantedOAuth2AccessToken> tokenManager;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier,\n+                                     @Nullable Consumer<? super GrantedOAuth2AccessToken> tokenConsumer,\n+                                     @Nullable Executor executor) {\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        tokenManager = new TokenLifecycleManager<>(this::isValid, this::canRefresh,\n+                                                   this::shallObtainInsteadOfUpdate,\n+                                                   this::obtainAccessTokenAsync, this::refreshAccessTokenAsync,\n+                                                   tokenSupplier, tokenConsumer, executor);\n+    }\n+\n+    /**\n+     * Tests the token for validity at the given {@link Instant} time.\n+     */\n+    private boolean isValid(GrantedOAuth2AccessToken token, Instant now) {\n+        return token.isValid(now.plus(refreshBefore));\n+    }\n+\n+    /**\n+     * Tests whether the token object can be refreshed or re-obtained.\n+     */\n+    private boolean canRefresh(GrantedOAuth2AccessToken token) {\n+        return token.refreshToken() != null;\n+    }\n+\n+    /**\n+     * Tests whether given {@link Throwable} indicates that the token shall be re-obtained\n+     * after the refresh operation failure.\n+     */\n+    private boolean shallObtainInsteadOfUpdate(Throwable throwable) {\n+        return throwable instanceof TokenRequestException;\n+    }\n+\n+    /**\n+     * Refreshes access token.\n+     */\n+    private CompletionStage<GrantedOAuth2AccessToken> refreshAccessTokenAsync(GrantedOAuth2AccessToken token) {\n+        return refreshRequest.make(token);\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link GrantedOAuth2AccessToken} or an\n+     *         exception, if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    protected abstract CompletableFuture<GrantedOAuth2AccessToken> obtainAccessTokenAsync(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MjQ0MA=="}, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjQ4MzgzOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNjozOTo0OVrOIOLu-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzoxMDozM1rOIOfryg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MzIyNw==", "bodyText": "(Global comment) Could you add @UnstableApi annotation to all new public classes and all new packages we are introducing in this pull request, so we have some wiggle room when we have to break backward compatibility in future 1.x releases?", "url": "https://github.com/line/armeria/pull/2840#discussion_r551743227", "createdAt": "2021-01-05T06:39:49Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+public interface OAuth2AuthorizationGrant {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA3MDA5MA==", "bodyText": "Done", "url": "https://github.com/line/armeria/pull/2840#discussion_r552070090", "createdAt": "2021-01-05T17:10:33Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+\n+/**\n+ * Represents an OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ */\n+public interface OAuth2AuthorizationGrant {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MzIyNw=="}, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjQ4NTE0OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNjo0MDo0NFrOIOLvzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzoxMDo0M1rOIOfsGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MzQzOQ==", "bodyText": "(Global comment) final in all public classes that are not intended for extension.", "url": "https://github.com/line/armeria/pull/2840#discussion_r551743439", "createdAt": "2021-01-05T06:40:44Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Decorates a {@link HttpClient} with an OAuth 2.0 Authorization Grant flow.\n+ */\n+public class OAuth2Client extends SimpleDecoratingHttpClient {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA3MDE3MQ==", "bodyText": "Done", "url": "https://github.com/line/armeria/pull/2840#discussion_r552070171", "createdAt": "2021-01-05T17:10:43Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * Decorates a {@link HttpClient} with an OAuth 2.0 Authorization Grant flow.\n+ */\n+public class OAuth2Client extends SimpleDecoratingHttpClient {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MzQzOQ=="}, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjQ5NDY5OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/package-info.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNjo0NTozOVrOIOL1XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzoxMTowN1rOIOftEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0NDg2MA==", "bodyText": "(Global comment) Please add @UnstableApi to all new packages, including the internal ones.", "url": "https://github.com/line/armeria/pull/2840#discussion_r551744860", "createdAt": "2021-01-05T06:45:39Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/package-info.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Client-side <a href=\"https://en.wikipedia.org/wiki/OAuth#OAuth_2.0\">OAuth 2.0</a> implementation artifacts.\n+ */\n+@NonNullByDefault\n+package com.linecorp.armeria.client.auth.oauth2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA3MDQxOA==", "bodyText": "Done", "url": "https://github.com/line/armeria/pull/2840#discussion_r552070418", "createdAt": "2021-01-05T17:11:07Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/package-info.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Client-side <a href=\"https://en.wikipedia.org/wiki/OAuth#OAuth_2.0\">OAuth 2.0</a> implementation artifacts.\n+ */\n+@NonNullByDefault\n+package com.linecorp.armeria.client.auth.oauth2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0NDg2MA=="}, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjUwMzYzOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidClientException.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNjo0OTo1MVrOIOL6bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzoxMzoyOFrOIOfykQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0NjE1OA==", "bodyText": "(Global comment)\n\n4-space indentation?\nPlease let me know if you forked any existing source code when writing this pull request. (Thought it's possible since these classes have different indentation.) If you forked something, we need to make it clear that we did.", "url": "https://github.com/line/armeria/pull/2840#discussion_r551746158", "createdAt": "2021-01-05T06:49:51Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidClientException.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Client authentication failed (e.g., unknown client, no client authentication included, or\n+ * unsupported authentication method). The authorization server MAY return an HTTP 401\n+ * (Unauthorized) status code to indicate which HTTP authentication schemes are supported. If the\n+ * client attempted to authenticate via the \"Authorization\" request header field, the authorization\n+ * server MUST respond with an HTTP 401 (Unauthorized) status code and include the\n+ * \"WWW-Authenticate\" response header field matching the authentication scheme used by the client.\n+ */\n+public class InvalidClientException extends TokenRequestException {\n+\n+  private static final long serialVersionUID = -1894934023468438715L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA3MTgyNQ==", "bodyText": "Fixed. The original prototype used Google style, that's why 2-spaces. The prototype is being ported (with somewhat significant changes), so it's not really a fork. No need to preserve the originals after the porting finished.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552071825", "createdAt": "2021-01-05T17:13:28Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidClientException.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Client authentication failed (e.g., unknown client, no client authentication included, or\n+ * unsupported authentication method). The authorization server MAY return an HTTP 401\n+ * (Unauthorized) status code to indicate which HTTP authentication schemes are supported. If the\n+ * client attempted to authenticate via the \"Authorization\" request header field, the authorization\n+ * server MUST respond with an HTTP 401 (Unauthorized) status code and include the\n+ * \"WWW-Authenticate\" response header field matching the authentication scheme used by the client.\n+ */\n+public class InvalidClientException extends TokenRequestException {\n+\n+  private static final long serialVersionUID = -1894934023468438715L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0NjE1OA=="}, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjUwOTQwOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNjo1MzowMFrOIOL97w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzoxMzozNVrOIOfy7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0NzA1NQ==", "bodyText": "Could just do rawResponse().hashCode() because rawResponse() will never return null.", "url": "https://github.com/line/armeria/pull/2840#discussion_r551747055", "createdAt": "2021-01-05T06:53:00Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptor.java", "diffHunk": "@@ -0,0 +1,510 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACTIVE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.AUDIENCE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.CLIENT_ID;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_AT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ISSUED_AT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ISSUER;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.JWT_ID;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.NOT_BEFORE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SUBJECT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.USER_NAME;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Defines a structure of the Token Introspection Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc7662#section-2.2\">[RFC7662], Section 2.2</a>.\n+ */\n+public class OAuth2TokenDescriptor implements Serializable {\n+\n+    private static final long serialVersionUID = -3976877781134216467L;\n+\n+    /**\n+     * Creates a new {@link OAuth2TokenDescriptor} based on the {@code JSON}-formatted raw response body.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @return A new instance of {@link OAuth2TokenDescriptor}.\n+     */\n+    public static OAuth2TokenDescriptor of(String rawResponse) {\n+        return OAuth2TokenDescriptorBuilder.of(rawResponse);\n+    }\n+\n+    /**\n+     * Creates a new {@link OAuth2TokenDescriptorBuilder} to build a new {@link OAuth2TokenDescriptor} and\n+     * supplied it with a value of {@code active} Token Introspection Response field.\n+     * @return A new instance of {@link OAuth2TokenDescriptorBuilder}.\n+     */\n+    public static OAuth2TokenDescriptorBuilder builder(boolean active) {\n+        return new OAuth2TokenDescriptorBuilder(active);\n+    }\n+\n+    static final String SCOPE_SEPARATOR = \" \";\n+\n+    /**\n+     * {@value OAuth2Constants#ACTIVE} Token Introspection Response field,\n+     * REQUIRED. Boolean indicator of whether or not the presented token is currently active. The\n+     * specifics of a token's \"active\" state will vary depending on the implementation of the\n+     * authorization server and the information it keeps about its tokens, but a \"true\" value return\n+     * for the \"active\" property will generally indicate that a given token has been issued by this\n+     * authorization server, has not been revoked by the resource owner, and is within its given time\n+     * window of validity (e.g., after its issuance time and before its expiration time).\n+     */\n+    private final boolean active;\n+\n+    /**\n+     * {@value OAuth2Constants#SCOPE} Token Introspection Response field,\n+     * OPTIONAL. A JSON string containing a space-separated list of scopes associated with this token,\n+     * in the format described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     */\n+    @Nullable\n+    private final String scope;\n+\n+    /**\n+     * A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    private final Set<String> scopeSet;\n+\n+    /**\n+     * {@value OAuth2Constants#CLIENT_ID} Token Introspection Response field,\n+     * OPTIONAL. Client identifier for the OAuth 2.0 client that requested this token.\n+     */\n+    @Nullable\n+    private final String clientId;\n+\n+    /**\n+     * {@value OAuth2Constants#USER_NAME} Token Introspection Response field,\n+     * OPTIONAL. Human-readable identifier for the resource owner who authorized this token.\n+     */\n+    @Nullable\n+    private final String userName;\n+\n+    /**\n+     * {@value OAuth2Constants#TOKEN_TYPE} Token Introspection Response field,\n+     * OPTIONAL. Type of the token as defined at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     */\n+    @Nullable\n+    private final String tokenType;\n+\n+    /**\n+     * {@value OAuth2Constants#EXPIRES_AT} Token Introspection Response field,\n+     * OPTIONAL. Integer timestamp, measured in the number of seconds since January 1 1970 UTC,\n+     * indicating when this token will expire, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final Instant expiresAt;\n+\n+    /**\n+     * {@value OAuth2Constants#ISSUED_AT} Token Introspection Response field,\n+     * OPTIONAL. Integer timestamp, measured in the number of seconds since January 1 1970 UTC,\n+     * indicating when this token was originally issued, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final Instant issuedAt;\n+\n+    /**\n+     * {@value OAuth2Constants#NOT_BEFORE} Token Introspection Response field,\n+     * OPTIONAL. Integer timestamp, measured in the number of seconds since January 1 1970 UTC,\n+     * indicating when this token is not to be used before, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final Instant notBefore;\n+\n+    /**\n+     * {@value OAuth2Constants#SUBJECT} Token Introspection Response field,\n+     * OPTIONAL. Subject of the token. Usually a machine-readable\n+     * identifier of the resource owner who authorized this token. As defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String subject;\n+\n+    /**\n+     * {@value OAuth2Constants#AUDIENCE} Token Introspection Response field,\n+     * OPTIONAL. Service-specific string identifier or list of string identifiers representing the\n+     * intended audience for this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String audience;\n+\n+    /**\n+     * {@value OAuth2Constants#ISSUER} Token Introspection Response field,\n+     * OPTIONAL. String representing the issuer of this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String issuer;\n+\n+    /**\n+     * {@value OAuth2Constants#JWT_ID} Token Introspection Response field,\n+     * OPTIONAL. String identifier for the token - JWT ID, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String jwtId;\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Token Introspection Response,\n+     * OPTIONAL.\n+     */\n+    private final Map<String, String> extras;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    @Nullable\n+    private transient String toString;\n+\n+    OAuth2TokenDescriptor(boolean active, @Nullable List<String> scopeList, @Nullable String clientId,\n+                          @Nullable String userName, @Nullable String tokenType,\n+                          @Nullable Instant expiresAt, @Nullable Instant issuedAt,\n+                          @Nullable Instant notBefore, @Nullable String subject,\n+                          @Nullable String audience, @Nullable String issuer,\n+                          @Nullable String jwtId, @Nullable ImmutableMap<String, String> extras,\n+                          @Nullable String rawResponse) {\n+        this.active = active;\n+        scope = toScopeString(scopeList);\n+        scopeSet = (scopeList == null) ? ImmutableSet.of() : ImmutableSet.copyOf(scopeList);\n+        this.clientId = clientId;\n+        this.userName = userName;\n+        this.tokenType = tokenType;\n+        this.expiresAt = expiresAt;\n+        this.issuedAt = issuedAt;\n+        this.notBefore = notBefore;\n+        this.subject = subject;\n+        this.audience = audience;\n+        this.issuer = issuer;\n+        this.jwtId = jwtId;\n+        this.extras = (extras == null) ? ImmutableMap.of() : extras;\n+        // raw response\n+        this.rawResponse = rawResponse;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#ACTIVE} Token Introspection Response field,\n+     * REQUIRED. Boolean indicator of whether or not the presented token is currently active. The\n+     * specifics of a token's \"active\" state will vary depending on the implementation of the\n+     * authorization server and the information it keeps about its tokens, but a \"true\" value return\n+     * for the \"active\" property will generally indicate that a given token has been issued by this\n+     * authorization server, has not been revoked by the resource owner, and is within its given time\n+     * window of validity (e.g., after its issuance time and before its expiration time).\n+     */\n+    public boolean isActive() {\n+        return active;\n+    }\n+\n+    /**\n+     * Indicates whether or not the Token expire at the given {@link Instant} time based on\n+     * {@link #expiresAt()} function.\n+     */\n+    public boolean isValid(Instant instant) {\n+        final Instant expires = expiresAt();\n+        return (expires == null) || requireNonNull(instant, \"instant\").isBefore(expires);\n+    }\n+\n+    /**\n+     * Indicates whether or not the Token already expired based on {@link #expiresAt()} function.\n+     */\n+    public boolean isValid() {\n+        return isValid(Instant.now());\n+    }\n+\n+    /**\n+     * Indicates whether or not the Token used prematurely based on {@link #notBefore()} function.\n+     */\n+    public boolean isNotBefore() {\n+        final Instant notBefore = notBefore();\n+        return (notBefore == null) || Instant.now().isAfter(notBefore);\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#SCOPE} Token Introspection Response field,\n+     * OPTIONAL. A JSON string containing a space-separated list of scopes associated with this token,\n+     * in the format described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     */\n+    @Nullable\n+    public String scope() {\n+        return scope;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#SCOPE} Token Introspection Response field,\n+     * OPTIONAL. A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    public Set<String> scopeSet() {\n+        return scopeSet;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#CLIENT_ID} Token Introspection Response field,\n+     * OPTIONAL. Client identifier for the OAuth 2.0 client that requested this token.\n+     */\n+    @Nullable\n+    public String clientId() {\n+        return clientId;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#USER_NAME} Token Introspection Response field,\n+     * OPTIONAL. Human-readable identifier for the resource owner who authorized this token.\n+     */\n+    @Nullable\n+    public String userName() {\n+        return userName;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#TOKEN_TYPE} Token Introspection Response field,\n+     * OPTIONAL. Type of the token as defined at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     */\n+    @Nullable\n+    public String tokenType() {\n+        return tokenType;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#EXPIRES_AT} Token Introspection Response field,\n+     * OPTIONAL. {@link Instant} timestamp, indicating when this token will expire, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public Instant expiresAt() {\n+        return expiresAt;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#ISSUED_AT} Token Introspection Response field,\n+     * OPTIONAL. {@link Instant} timestamp, indicating when this token was originally issued, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public Instant issuedAt() {\n+        return issuedAt;\n+    }\n+\n+    /**\n+     * {@link Duration} indicating the lifetime of the access token. The value is NOT supplied with the\n+     * Token Introspection response and calculated based on {@value OAuth2Constants#ISSUED_AT} and\n+     * {@value OAuth2Constants#EXPIRES_AT} response fields every time this method invoked.\n+     */\n+    @Nullable\n+    public Duration expiresIn() {\n+        if (issuedAt != null && expiresAt != null) {\n+            return Duration.ofMillis(issuedAt.until(expiresAt, ChronoUnit.MILLIS));\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#NOT_BEFORE} Token Introspection Response field,\n+     * OPTIONAL. {@link Instant} timestamp, indicating when this token is not to be used before, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public Instant notBefore() {\n+        return notBefore;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#SUBJECT} Token Introspection Response field,\n+     * OPTIONAL. Subject of the token. Usually a machine-readable\n+     * identifier of the resource owner who authorized this token. As defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public String subject() {\n+        return subject;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#AUDIENCE} Token Introspection Response field,\n+     * OPTIONAL. Service-specific string identifier or list of string identifiers representing the\n+     * intended audience for this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public String audience() {\n+        return audience;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#ISSUER} Token Introspection Response field,\n+     * OPTIONAL. String representing the issuer of this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public String issuer() {\n+        return issuer;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#JWT_ID} Token Introspection Response field,\n+     * OPTIONAL. String identifier for the token - JWT ID, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public String jwtId() {\n+        return jwtId;\n+    }\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Token Introspection Response,\n+     * OPTIONAL.\n+     */\n+    public Map<String, String> extras() {\n+        return extras;\n+    }\n+\n+    /**\n+     * {@code JSON}-formatted raw Token Introspection Response body. If the {@link OAuth2TokenDescriptor} was\n+     * not parsed out of the raw response body, this value calculated based on the other\n+     * {@link OAuth2TokenDescriptor} values.\n+     */\n+    public String rawResponse() {\n+        if (rawResponse == null) {\n+            rawResponse = composeRawResponse(active, scope, clientId, userName, tokenType,\n+                                             expiresAt, issuedAt, notBefore,\n+                                             subject, audience, issuer,\n+                                             jwtId, extras);\n+        }\n+        return rawResponse;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        if (toString == null) {\n+            toString = rawResponse();\n+        }\n+        return toString;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof OAuth2TokenDescriptor)) {\n+            return false;\n+        }\n+        final OAuth2TokenDescriptor that = (OAuth2TokenDescriptor) o;\n+        return Objects.equals(rawResponse(), that.rawResponse());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(rawResponse());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 441}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA3MTkxNg==", "bodyText": "Done", "url": "https://github.com/line/armeria/pull/2840#discussion_r552071916", "createdAt": "2021-01-05T17:13:35Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptor.java", "diffHunk": "@@ -0,0 +1,510 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ACTIVE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.AUDIENCE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.CLIENT_ID;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.EXPIRES_AT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ISSUED_AT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.ISSUER;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.JWT_ID;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.NOT_BEFORE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SCOPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.SUBJECT;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.TOKEN_TYPE;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants.USER_NAME;\n+import static com.linecorp.armeria.internal.common.auth.oauth2.ResponseParserUtil.JSON;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.internal.common.auth.oauth2.OAuth2Constants;\n+\n+/**\n+ * Defines a structure of the Token Introspection Response, as per\n+ * <a href=\"https://tools.ietf.org/html/rfc7662#section-2.2\">[RFC7662], Section 2.2</a>.\n+ */\n+public class OAuth2TokenDescriptor implements Serializable {\n+\n+    private static final long serialVersionUID = -3976877781134216467L;\n+\n+    /**\n+     * Creates a new {@link OAuth2TokenDescriptor} based on the {@code JSON}-formatted raw response body.\n+     * @param rawResponse {@code JSON}-formatted raw response body.\n+     * @return A new instance of {@link OAuth2TokenDescriptor}.\n+     */\n+    public static OAuth2TokenDescriptor of(String rawResponse) {\n+        return OAuth2TokenDescriptorBuilder.of(rawResponse);\n+    }\n+\n+    /**\n+     * Creates a new {@link OAuth2TokenDescriptorBuilder} to build a new {@link OAuth2TokenDescriptor} and\n+     * supplied it with a value of {@code active} Token Introspection Response field.\n+     * @return A new instance of {@link OAuth2TokenDescriptorBuilder}.\n+     */\n+    public static OAuth2TokenDescriptorBuilder builder(boolean active) {\n+        return new OAuth2TokenDescriptorBuilder(active);\n+    }\n+\n+    static final String SCOPE_SEPARATOR = \" \";\n+\n+    /**\n+     * {@value OAuth2Constants#ACTIVE} Token Introspection Response field,\n+     * REQUIRED. Boolean indicator of whether or not the presented token is currently active. The\n+     * specifics of a token's \"active\" state will vary depending on the implementation of the\n+     * authorization server and the information it keeps about its tokens, but a \"true\" value return\n+     * for the \"active\" property will generally indicate that a given token has been issued by this\n+     * authorization server, has not been revoked by the resource owner, and is within its given time\n+     * window of validity (e.g., after its issuance time and before its expiration time).\n+     */\n+    private final boolean active;\n+\n+    /**\n+     * {@value OAuth2Constants#SCOPE} Token Introspection Response field,\n+     * OPTIONAL. A JSON string containing a space-separated list of scopes associated with this token,\n+     * in the format described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     */\n+    @Nullable\n+    private final String scope;\n+\n+    /**\n+     * A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    private final Set<String> scopeSet;\n+\n+    /**\n+     * {@value OAuth2Constants#CLIENT_ID} Token Introspection Response field,\n+     * OPTIONAL. Client identifier for the OAuth 2.0 client that requested this token.\n+     */\n+    @Nullable\n+    private final String clientId;\n+\n+    /**\n+     * {@value OAuth2Constants#USER_NAME} Token Introspection Response field,\n+     * OPTIONAL. Human-readable identifier for the resource owner who authorized this token.\n+     */\n+    @Nullable\n+    private final String userName;\n+\n+    /**\n+     * {@value OAuth2Constants#TOKEN_TYPE} Token Introspection Response field,\n+     * OPTIONAL. Type of the token as defined at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     */\n+    @Nullable\n+    private final String tokenType;\n+\n+    /**\n+     * {@value OAuth2Constants#EXPIRES_AT} Token Introspection Response field,\n+     * OPTIONAL. Integer timestamp, measured in the number of seconds since January 1 1970 UTC,\n+     * indicating when this token will expire, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final Instant expiresAt;\n+\n+    /**\n+     * {@value OAuth2Constants#ISSUED_AT} Token Introspection Response field,\n+     * OPTIONAL. Integer timestamp, measured in the number of seconds since January 1 1970 UTC,\n+     * indicating when this token was originally issued, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final Instant issuedAt;\n+\n+    /**\n+     * {@value OAuth2Constants#NOT_BEFORE} Token Introspection Response field,\n+     * OPTIONAL. Integer timestamp, measured in the number of seconds since January 1 1970 UTC,\n+     * indicating when this token is not to be used before, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final Instant notBefore;\n+\n+    /**\n+     * {@value OAuth2Constants#SUBJECT} Token Introspection Response field,\n+     * OPTIONAL. Subject of the token. Usually a machine-readable\n+     * identifier of the resource owner who authorized this token. As defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String subject;\n+\n+    /**\n+     * {@value OAuth2Constants#AUDIENCE} Token Introspection Response field,\n+     * OPTIONAL. Service-specific string identifier or list of string identifiers representing the\n+     * intended audience for this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String audience;\n+\n+    /**\n+     * {@value OAuth2Constants#ISSUER} Token Introspection Response field,\n+     * OPTIONAL. String representing the issuer of this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String issuer;\n+\n+    /**\n+     * {@value OAuth2Constants#JWT_ID} Token Introspection Response field,\n+     * OPTIONAL. String identifier for the token - JWT ID, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    private final String jwtId;\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Token Introspection Response,\n+     * OPTIONAL.\n+     */\n+    private final Map<String, String> extras;\n+\n+    @Nullable\n+    private String rawResponse;\n+\n+    @Nullable\n+    private transient String toString;\n+\n+    OAuth2TokenDescriptor(boolean active, @Nullable List<String> scopeList, @Nullable String clientId,\n+                          @Nullable String userName, @Nullable String tokenType,\n+                          @Nullable Instant expiresAt, @Nullable Instant issuedAt,\n+                          @Nullable Instant notBefore, @Nullable String subject,\n+                          @Nullable String audience, @Nullable String issuer,\n+                          @Nullable String jwtId, @Nullable ImmutableMap<String, String> extras,\n+                          @Nullable String rawResponse) {\n+        this.active = active;\n+        scope = toScopeString(scopeList);\n+        scopeSet = (scopeList == null) ? ImmutableSet.of() : ImmutableSet.copyOf(scopeList);\n+        this.clientId = clientId;\n+        this.userName = userName;\n+        this.tokenType = tokenType;\n+        this.expiresAt = expiresAt;\n+        this.issuedAt = issuedAt;\n+        this.notBefore = notBefore;\n+        this.subject = subject;\n+        this.audience = audience;\n+        this.issuer = issuer;\n+        this.jwtId = jwtId;\n+        this.extras = (extras == null) ? ImmutableMap.of() : extras;\n+        // raw response\n+        this.rawResponse = rawResponse;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#ACTIVE} Token Introspection Response field,\n+     * REQUIRED. Boolean indicator of whether or not the presented token is currently active. The\n+     * specifics of a token's \"active\" state will vary depending on the implementation of the\n+     * authorization server and the information it keeps about its tokens, but a \"true\" value return\n+     * for the \"active\" property will generally indicate that a given token has been issued by this\n+     * authorization server, has not been revoked by the resource owner, and is within its given time\n+     * window of validity (e.g., after its issuance time and before its expiration time).\n+     */\n+    public boolean isActive() {\n+        return active;\n+    }\n+\n+    /**\n+     * Indicates whether or not the Token expire at the given {@link Instant} time based on\n+     * {@link #expiresAt()} function.\n+     */\n+    public boolean isValid(Instant instant) {\n+        final Instant expires = expiresAt();\n+        return (expires == null) || requireNonNull(instant, \"instant\").isBefore(expires);\n+    }\n+\n+    /**\n+     * Indicates whether or not the Token already expired based on {@link #expiresAt()} function.\n+     */\n+    public boolean isValid() {\n+        return isValid(Instant.now());\n+    }\n+\n+    /**\n+     * Indicates whether or not the Token used prematurely based on {@link #notBefore()} function.\n+     */\n+    public boolean isNotBefore() {\n+        final Instant notBefore = notBefore();\n+        return (notBefore == null) || Instant.now().isAfter(notBefore);\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#SCOPE} Token Introspection Response field,\n+     * OPTIONAL. A JSON string containing a space-separated list of scopes associated with this token,\n+     * in the format described at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-3.3\">[RFC6749], Section 3.3</a>.\n+     */\n+    @Nullable\n+    public String scope() {\n+        return scope;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#SCOPE} Token Introspection Response field,\n+     * OPTIONAL. A {@link Set} of case-sensitive scope strings. The strings are defined by the authorization\n+     * server.\n+     */\n+    public Set<String> scopeSet() {\n+        return scopeSet;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#CLIENT_ID} Token Introspection Response field,\n+     * OPTIONAL. Client identifier for the OAuth 2.0 client that requested this token.\n+     */\n+    @Nullable\n+    public String clientId() {\n+        return clientId;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#USER_NAME} Token Introspection Response field,\n+     * OPTIONAL. Human-readable identifier for the resource owner who authorized this token.\n+     */\n+    @Nullable\n+    public String userName() {\n+        return userName;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#TOKEN_TYPE} Token Introspection Response field,\n+     * OPTIONAL. Type of the token as defined at\n+     * <a href=\"http://tools.ietf.org/html/rfc6749#section-7.1\">[RFC6749], Section 7.1</a>.\n+     */\n+    @Nullable\n+    public String tokenType() {\n+        return tokenType;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#EXPIRES_AT} Token Introspection Response field,\n+     * OPTIONAL. {@link Instant} timestamp, indicating when this token will expire, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public Instant expiresAt() {\n+        return expiresAt;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#ISSUED_AT} Token Introspection Response field,\n+     * OPTIONAL. {@link Instant} timestamp, indicating when this token was originally issued, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public Instant issuedAt() {\n+        return issuedAt;\n+    }\n+\n+    /**\n+     * {@link Duration} indicating the lifetime of the access token. The value is NOT supplied with the\n+     * Token Introspection response and calculated based on {@value OAuth2Constants#ISSUED_AT} and\n+     * {@value OAuth2Constants#EXPIRES_AT} response fields every time this method invoked.\n+     */\n+    @Nullable\n+    public Duration expiresIn() {\n+        if (issuedAt != null && expiresAt != null) {\n+            return Duration.ofMillis(issuedAt.until(expiresAt, ChronoUnit.MILLIS));\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#NOT_BEFORE} Token Introspection Response field,\n+     * OPTIONAL. {@link Instant} timestamp, indicating when this token is not to be used before, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public Instant notBefore() {\n+        return notBefore;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#SUBJECT} Token Introspection Response field,\n+     * OPTIONAL. Subject of the token. Usually a machine-readable\n+     * identifier of the resource owner who authorized this token. As defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public String subject() {\n+        return subject;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#AUDIENCE} Token Introspection Response field,\n+     * OPTIONAL. Service-specific string identifier or list of string identifiers representing the\n+     * intended audience for this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public String audience() {\n+        return audience;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#ISSUER} Token Introspection Response field,\n+     * OPTIONAL. String representing the issuer of this token, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public String issuer() {\n+        return issuer;\n+    }\n+\n+    /**\n+     * {@value OAuth2Constants#JWT_ID} Token Introspection Response field,\n+     * OPTIONAL. String identifier for the token - JWT ID, as defined at\n+     * <a href=\"https://tools.ietf.org/html/rfc7519\">[RFC7519]</a>.\n+     */\n+    @Nullable\n+    public String jwtId() {\n+        return jwtId;\n+    }\n+\n+    /**\n+     * A {@link Map} of extra system-specific token parameters included with Token Introspection Response,\n+     * OPTIONAL.\n+     */\n+    public Map<String, String> extras() {\n+        return extras;\n+    }\n+\n+    /**\n+     * {@code JSON}-formatted raw Token Introspection Response body. If the {@link OAuth2TokenDescriptor} was\n+     * not parsed out of the raw response body, this value calculated based on the other\n+     * {@link OAuth2TokenDescriptor} values.\n+     */\n+    public String rawResponse() {\n+        if (rawResponse == null) {\n+            rawResponse = composeRawResponse(active, scope, clientId, userName, tokenType,\n+                                             expiresAt, issuedAt, notBefore,\n+                                             subject, audience, issuer,\n+                                             jwtId, extras);\n+        }\n+        return rawResponse;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        if (toString == null) {\n+            toString = rawResponse();\n+        }\n+        return toString;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof OAuth2TokenDescriptor)) {\n+            return false;\n+        }\n+        final OAuth2TokenDescriptor that = (OAuth2TokenDescriptor) o;\n+        return Objects.equals(rawResponse(), that.rawResponse());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(rawResponse());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0NzA1NQ=="}, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 441}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjUxMTU0OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRequestException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNjo1Mzo1M1rOIOL_Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzoxMzo0NFrOIOfzSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0NzM3MA==", "bodyText": "4-space indentation", "url": "https://github.com/line/armeria/pull/2840#discussion_r551747370", "createdAt": "2021-01-05T06:53:53Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRequestException.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A common token request exception type.\n+ */\n+public class TokenRequestException extends RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA3MjAxMA==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r552072010", "createdAt": "2021-01-05T17:13:44Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRequestException.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A common token request exception type.\n+ */\n+public class TokenRequestException extends RuntimeException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0NzM3MA=="}, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjUxMzEzOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRequestException.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNjo1NDo0OFrOIOMALg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzoxNDo1MVrOIOf1zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0NzYzMA==", "bodyText": "(Global comment) Could you add final to any methods in a non-final class if it's not meant to be overridden?", "url": "https://github.com/line/armeria/pull/2840#discussion_r551747630", "createdAt": "2021-01-05T06:54:48Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRequestException.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A common token request exception type.\n+ */\n+public class TokenRequestException extends RuntimeException {\n+\n+  private static final long serialVersionUID = 3324433572773111913L;\n+\n+  /**\n+   * Returns a {@link TokenRequestExceptionBuilder} to build error-specific types\n+   * of {@link TokenRequestException}.\n+   */\n+  public static TokenRequestException of(String rawResponse) {\n+    return TokenRequestExceptionBuilder.parse(rawResponse);\n+  }\n+\n+  @Nullable\n+  private final String errorUri;\n+\n+  /**\n+   * Constructs a new {@link TokenRequestException} using {@code errorDescription} and {@code errorUri}.\n+   * @param errorDescription OPTIONAL. Human-readable ASCII [USASCII] text providing additional information,\n+   *                         used to assist the client developer in understanding the error that occurred.\n+   *                         Values for the {@code errorDescription} parameter MUST NOT include\n+   *                         characters outside the set {@code %x20-21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   * @param errorUri OPTIONAL. A URI identifying a human-readable web page with information about the error,\n+   *                 used to provide the client developer with additional information about the error.\n+   *                 Values for the {@code errorUri} parameter MUST conform to the URI-reference syntax and\n+   *                 thus MUST NOT include characters outside\n+   *                 the set {@code %x21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   */\n+  public TokenRequestException(String errorDescription, @Nullable String errorUri) {\n+    super(errorDescription);\n+    this.errorUri = errorUri;\n+  }\n+\n+  /**\n+   * Constructs a new {@link TokenRequestException} using {@code errorDescription} and {@code errorUri}.\n+   * @param errorDescription OPTIONAL. Human-readable ASCII [USASCII] text providing additional information,\n+   *                         used to assist the client developer in understanding the error that occurred.\n+   *                         Values for the {@code errorDescription} parameter MUST NOT include\n+   *                         characters outside the set {@code %x20-21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   * @param errorUri OPTIONAL. A URI identifying a human-readable web page with information about the error,\n+   *                 used to provide the client developer with additional information about the error.\n+   *                 Values for the {@code errorUri} parameter MUST conform to the URI-reference syntax and\n+   *                 thus MUST NOT include characters outside\n+   *                 the set {@code %x21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   * @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method).\n+   *              (A {@code null} value is permitted, and indicates that the cause is nonexistent or unknown.)\n+   */\n+  public TokenRequestException(String errorDescription, @Nullable String errorUri, Throwable cause) {\n+    super(errorDescription, cause);\n+    this.errorUri = errorUri;\n+  }\n+\n+  /**\n+   * A URI identifying a human-readable web page with information about the error, used to provide the client\n+   * developer with additional information about the error.\n+   * Values for the {@code errorUri} parameter MUST conform to the URI-reference syntax and thus MUST NOT\n+   * include characters outside the set {@code %x21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   */\n+  @Nullable\n+  public String getErrorUri() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA3MjY1NQ==", "bodyText": "Fixed this one. But since most of the public classes marked final now, there is no need to mark every method.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552072655", "createdAt": "2021-01-05T17:14:51Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRequestException.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A common token request exception type.\n+ */\n+public class TokenRequestException extends RuntimeException {\n+\n+  private static final long serialVersionUID = 3324433572773111913L;\n+\n+  /**\n+   * Returns a {@link TokenRequestExceptionBuilder} to build error-specific types\n+   * of {@link TokenRequestException}.\n+   */\n+  public static TokenRequestException of(String rawResponse) {\n+    return TokenRequestExceptionBuilder.parse(rawResponse);\n+  }\n+\n+  @Nullable\n+  private final String errorUri;\n+\n+  /**\n+   * Constructs a new {@link TokenRequestException} using {@code errorDescription} and {@code errorUri}.\n+   * @param errorDescription OPTIONAL. Human-readable ASCII [USASCII] text providing additional information,\n+   *                         used to assist the client developer in understanding the error that occurred.\n+   *                         Values for the {@code errorDescription} parameter MUST NOT include\n+   *                         characters outside the set {@code %x20-21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   * @param errorUri OPTIONAL. A URI identifying a human-readable web page with information about the error,\n+   *                 used to provide the client developer with additional information about the error.\n+   *                 Values for the {@code errorUri} parameter MUST conform to the URI-reference syntax and\n+   *                 thus MUST NOT include characters outside\n+   *                 the set {@code %x21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   */\n+  public TokenRequestException(String errorDescription, @Nullable String errorUri) {\n+    super(errorDescription);\n+    this.errorUri = errorUri;\n+  }\n+\n+  /**\n+   * Constructs a new {@link TokenRequestException} using {@code errorDescription} and {@code errorUri}.\n+   * @param errorDescription OPTIONAL. Human-readable ASCII [USASCII] text providing additional information,\n+   *                         used to assist the client developer in understanding the error that occurred.\n+   *                         Values for the {@code errorDescription} parameter MUST NOT include\n+   *                         characters outside the set {@code %x20-21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   * @param errorUri OPTIONAL. A URI identifying a human-readable web page with information about the error,\n+   *                 used to provide the client developer with additional information about the error.\n+   *                 Values for the {@code errorUri} parameter MUST conform to the URI-reference syntax and\n+   *                 thus MUST NOT include characters outside\n+   *                 the set {@code %x21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   * @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method).\n+   *              (A {@code null} value is permitted, and indicates that the cause is nonexistent or unknown.)\n+   */\n+  public TokenRequestException(String errorDescription, @Nullable String errorUri, Throwable cause) {\n+    super(errorDescription, cause);\n+    this.errorUri = errorUri;\n+  }\n+\n+  /**\n+   * A URI identifying a human-readable web page with information about the error, used to provide the client\n+   * developer with additional information about the error.\n+   * Values for the {@code errorUri} parameter MUST conform to the URI-reference syntax and thus MUST NOT\n+   * include characters outside the set {@code %x21} / {@code %x23-5B} / {@code %x5D-7E}.\n+   */\n+  @Nullable\n+  public String getErrorUri() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0NzYzMA=="}, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjU2NTg3OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedMediaTypeException.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNzoxOTowN1rOIOMedQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDowNDowNlrOIQTGFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc1NTM4MQ==", "bodyText": "How about introducing a new parent exception such as OAuth2Exception? TokenRequestException could extend it as well.\nThe exception name sounds too generic. Should we add OAuth2 in its name? e.g. UnsupportedOAuth2MediaTypeException?", "url": "https://github.com/line/armeria/pull/2840#discussion_r551755381", "createdAt": "2021-01-05T07:19:07Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedMediaTypeException.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * A response {@code Content-Type} header does not match the expected type.\n+ */\n+public class UnsupportedMediaTypeException extends RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA2Mjc1NA==", "bodyText": "UnsupportedResponseException and UnsupportedMediaTypeException are indeed generic exceptions. I wish they were placed somewhere inside the core internal. These are not related to OAuth2 or token processing.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552062754", "createdAt": "2021-01-05T16:58:28Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedMediaTypeException.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * A response {@code Content-Type} header does not match the expected type.\n+ */\n+public class UnsupportedMediaTypeException extends RuntimeException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc1NTM4MQ=="}, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ1NTYzMw==", "bodyText": "How about simply replacing UnsupportedResponse/MediaTypeException with an InvalidResponseException which is a sister of InvalidRequestException? That would make it clear that the failure occurred due to a bad OAuth2 response.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552455633", "createdAt": "2021-01-06T09:17:36Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedMediaTypeException.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * A response {@code Content-Type} header does not match the expected type.\n+ */\n+public class UnsupportedMediaTypeException extends RuntimeException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc1NTM4MQ=="}, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk2MDk4Mw==", "bodyText": "Introduced InvalidResponseException as a parent of UnsupportedResponse/MediaTypeException.", "url": "https://github.com/line/armeria/pull/2840#discussion_r553960983", "createdAt": "2021-01-08T14:04:06Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedMediaTypeException.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+\n+/**\n+ * A response {@code Content-Type} header does not match the expected type.\n+ */\n+public class UnsupportedMediaTypeException extends RuntimeException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc1NTM4MQ=="}, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjU2NjgxOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedResponseException.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNzoxOTozOVrOIOMfBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzowMzoxMFrOIOfaQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc1NTUyNQ==", "bodyText": "How about introducing a new parent exception such as OAuth2Exception? TokenRequestException could extend it as well.\nThe exception name sounds too generic. Should we add OAuth2 in its name? e.g. UnsupportedOAuth2ResponseException?", "url": "https://github.com/line/armeria/pull/2840#discussion_r551755525", "createdAt": "2021-01-05T07:19:39Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedResponseException.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpStatus;\n+\n+/**\n+ * A response type in not supported by the given request/response flow.\n+ */\n+public class UnsupportedResponseException extends RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA2NTYwMA==", "bodyText": "UnsupportedResponseException and UnsupportedMediaTypeException are indeed generic exceptions. I wish they were placed somewhere inside the core internal. These are not related to OAuth2 or token processing.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552065600", "createdAt": "2021-01-05T17:03:10Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/UnsupportedResponseException.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.auth.oauth2;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpStatus;\n+\n+/**\n+ * A response type in not supported by the given request/response flow.\n+ */\n+public class UnsupportedResponseException extends RuntimeException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc1NTUyNQ=="}, "originalCommit": {"oid": "dd0a7906c377dfa3b6c130b59aaf723f8d368be6"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NjkzMzQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/auth/Authorizer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODoxMjoxNFrOIO1dfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDowNzoxMlrOIQTNEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyNjg3Nw==", "bodyText": "Could just pass self and nextAuthorizer in as a constructor parameter?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552426877", "createdAt": "2021-01-06T08:12:14Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/Authorizer.java", "diffHunk": "@@ -48,49 +48,31 @@\n      */\n     default Authorizer<T> orElse(Authorizer<T> nextAuthorizer) {\n         final Authorizer<T> self = this;\n-        return new Authorizer<T>() {\n-            @Nullable\n-            private String strVal;\n-\n-            @Override\n-            public CompletionStage<Boolean> authorize(ServiceRequestContext ctx, T data) {\n-                return AuthorizerUtil.authorize(self, ctx, data).thenComposeAsync(result -> {\n-                    if (result == null) {\n-                        throw AuthorizerUtil.newNullResultException(self);\n-                    } else {\n-                        return result ? CompletableFuture.completedFuture(true)\n-                                      : AuthorizerUtil.authorize(nextAuthorizer, ctx, data);\n-                    }\n-                }, ctx.eventLoop());\n-            }\n-\n-            @Override\n-            public String toString() {\n-                if (strVal != null) {\n-                    return strVal;\n-                }\n-\n-                final StringBuilder buf = new StringBuilder();\n-\n-                // Append the first authorizer.\n-                if (self.getClass() == getClass()) {\n-                    final String s = self.toString();\n-                    buf.append(s, 0, s.length() - 1);\n-                } else {\n-                    buf.append('[').append(self);\n-                }\n-                buf.append(\", \");\n+        return new AuthorizerChain<>(self, AuthorizerSelectionStrategy.LAST_WITH_HANDLER)\n+                .orElse(nextAuthorizer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk2Mjc2OA==", "bodyText": "Right. Just wanted to stick close to the original version.\nFixed now.", "url": "https://github.com/line/armeria/pull/2840#discussion_r553962768", "createdAt": "2021-01-08T14:07:12Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/Authorizer.java", "diffHunk": "@@ -48,49 +48,31 @@\n      */\n     default Authorizer<T> orElse(Authorizer<T> nextAuthorizer) {\n         final Authorizer<T> self = this;\n-        return new Authorizer<T>() {\n-            @Nullable\n-            private String strVal;\n-\n-            @Override\n-            public CompletionStage<Boolean> authorize(ServiceRequestContext ctx, T data) {\n-                return AuthorizerUtil.authorize(self, ctx, data).thenComposeAsync(result -> {\n-                    if (result == null) {\n-                        throw AuthorizerUtil.newNullResultException(self);\n-                    } else {\n-                        return result ? CompletableFuture.completedFuture(true)\n-                                      : AuthorizerUtil.authorize(nextAuthorizer, ctx, data);\n-                    }\n-                }, ctx.eventLoop());\n-            }\n-\n-            @Override\n-            public String toString() {\n-                if (strVal != null) {\n-                    return strVal;\n-                }\n-\n-                final StringBuilder buf = new StringBuilder();\n-\n-                // Append the first authorizer.\n-                if (self.getClass() == getClass()) {\n-                    final String s = self.toString();\n-                    buf.append(s, 0, s.length() - 1);\n-                } else {\n-                    buf.append('[').append(self);\n-                }\n-                buf.append(\", \");\n+        return new AuthorizerChain<>(self, AuthorizerSelectionStrategy.LAST_WITH_HANDLER)\n+                .orElse(nextAuthorizer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyNjg3Nw=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NjkzOTE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODoxNDozNFrOIO1hAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDoxMjoxMlrOIQTXMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyNzc3Ng==", "bodyText": "How about simplifying a little bit?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    requireNonNull(authorizers, \"authorizers\");\n          \n          \n            \n                    final Iterator<? extends Authorizer<T>> it = authorizers.iterator();\n          \n          \n            \n                    checkArgument(it.hasNext(), \"List of authorizers is empty\");\n          \n          \n            \n                    final Authorizer<T> firstAuthorizer = it.next();\n          \n          \n            \n                    requireNonNull(firstAuthorizer, \"firstAuthorizer\");\n          \n          \n            \n                    this.authorizers = ImmutableList.copyOf(authorizers);\n          \n          \n            \n                    requireNonNull(authorizers, \"authorizers\");\n          \n          \n            \n                    this.authorizers = ImmutableList.copyOf(authorizers);\n          \n          \n            \n                    checkArgument(!this.authorizers.isEmpty(), \"authorizers is empty.\");\n          \n          \n            \n                    final Authorizer<T> firstAuthorizer = this.authorizers.get(0);", "url": "https://github.com/line/armeria/pull/2840#discussion_r552427776", "createdAt": "2021-01-06T08:14:34Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Chains multiple {@link Authorizer}s together into a single {@link Authorizer}.\n+ * Utilizes {@link AuthorizerSelectionStrategy} to select corresponding {@link AuthFailureHandler}.\n+ */\n+final class AuthorizerChain<T> implements Authorizer<T> {\n+\n+    enum AuthorizerSelectionStrategy {\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain.\n+         */\n+        FIRST,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain.\n+         */\n+        LAST,\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        FIRST_WITH_HANDLER,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        LAST_WITH_HANDLER\n+    }\n+\n+    private final List<? extends Authorizer<T>> authorizers;\n+    private final AuthorizerSelectionStrategy selectionStrategy;\n+    @Nullable\n+    private AuthSuccessHandler successHandler;\n+    @Nullable\n+    private AuthFailureHandler failureHandler;\n+\n+    AuthorizerChain(Iterable<? extends Authorizer<T>> authorizers,\n+                    AuthorizerSelectionStrategy selectionStrategy) {\n+        requireNonNull(authorizers, \"authorizers\");\n+        final Iterator<? extends Authorizer<T>> it = authorizers.iterator();\n+        checkArgument(it.hasNext(), \"List of authorizers is empty\");\n+        final Authorizer<T> firstAuthorizer = it.next();\n+        requireNonNull(firstAuthorizer, \"firstAuthorizer\");\n+        this.authorizers = ImmutableList.copyOf(authorizers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk2NTM2Mw==", "bodyText": "thanks. done.", "url": "https://github.com/line/armeria/pull/2840#discussion_r553965363", "createdAt": "2021-01-08T14:12:12Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Chains multiple {@link Authorizer}s together into a single {@link Authorizer}.\n+ * Utilizes {@link AuthorizerSelectionStrategy} to select corresponding {@link AuthFailureHandler}.\n+ */\n+final class AuthorizerChain<T> implements Authorizer<T> {\n+\n+    enum AuthorizerSelectionStrategy {\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain.\n+         */\n+        FIRST,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain.\n+         */\n+        LAST,\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        FIRST_WITH_HANDLER,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        LAST_WITH_HANDLER\n+    }\n+\n+    private final List<? extends Authorizer<T>> authorizers;\n+    private final AuthorizerSelectionStrategy selectionStrategy;\n+    @Nullable\n+    private AuthSuccessHandler successHandler;\n+    @Nullable\n+    private AuthFailureHandler failureHandler;\n+\n+    AuthorizerChain(Iterable<? extends Authorizer<T>> authorizers,\n+                    AuthorizerSelectionStrategy selectionStrategy) {\n+        requireNonNull(authorizers, \"authorizers\");\n+        final Iterator<? extends Authorizer<T>> it = authorizers.iterator();\n+        checkArgument(it.hasNext(), \"List of authorizers is empty\");\n+        final Authorizer<T> firstAuthorizer = it.next();\n+        requireNonNull(firstAuthorizer, \"firstAuthorizer\");\n+        this.authorizers = ImmutableList.copyOf(authorizers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyNzc3Ng=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Njk0MDk4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODoxNToxN1rOIO1iGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDoxMzo0NlrOIQTamA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyODA1OA==", "bodyText": "We could inline this constructor in Authorizer.orElse() and remove this one.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552428058", "createdAt": "2021-01-06T08:15:17Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Chains multiple {@link Authorizer}s together into a single {@link Authorizer}.\n+ * Utilizes {@link AuthorizerSelectionStrategy} to select corresponding {@link AuthFailureHandler}.\n+ */\n+final class AuthorizerChain<T> implements Authorizer<T> {\n+\n+    enum AuthorizerSelectionStrategy {\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain.\n+         */\n+        FIRST,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain.\n+         */\n+        LAST,\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        FIRST_WITH_HANDLER,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        LAST_WITH_HANDLER\n+    }\n+\n+    private final List<? extends Authorizer<T>> authorizers;\n+    private final AuthorizerSelectionStrategy selectionStrategy;\n+    @Nullable\n+    private AuthSuccessHandler successHandler;\n+    @Nullable\n+    private AuthFailureHandler failureHandler;\n+\n+    AuthorizerChain(Iterable<? extends Authorizer<T>> authorizers,\n+                    AuthorizerSelectionStrategy selectionStrategy) {\n+        requireNonNull(authorizers, \"authorizers\");\n+        final Iterator<? extends Authorizer<T>> it = authorizers.iterator();\n+        checkArgument(it.hasNext(), \"List of authorizers is empty\");\n+        final Authorizer<T> firstAuthorizer = it.next();\n+        requireNonNull(firstAuthorizer, \"firstAuthorizer\");\n+        this.authorizers = ImmutableList.copyOf(authorizers);\n+        this.selectionStrategy = requireNonNull(selectionStrategy, \"selectionStrategy\");\n+        if (selectionStrategy == AuthorizerSelectionStrategy.FIRST) {\n+            // this could be NULL\n+            failureHandler = firstAuthorizer.failureHandler();\n+        }\n+    }\n+\n+    AuthorizerChain(Authorizer<T> firstAuthorizer, AuthorizerSelectionStrategy selectionStrategy) {\n+        this(ImmutableList.of(requireNonNull(firstAuthorizer, \"firstAuthorizer\")), selectionStrategy);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk2NjIzMg==", "bodyText": "done", "url": "https://github.com/line/armeria/pull/2840#discussion_r553966232", "createdAt": "2021-01-08T14:13:46Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Chains multiple {@link Authorizer}s together into a single {@link Authorizer}.\n+ * Utilizes {@link AuthorizerSelectionStrategy} to select corresponding {@link AuthFailureHandler}.\n+ */\n+final class AuthorizerChain<T> implements Authorizer<T> {\n+\n+    enum AuthorizerSelectionStrategy {\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain.\n+         */\n+        FIRST,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain.\n+         */\n+        LAST,\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        FIRST_WITH_HANDLER,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        LAST_WITH_HANDLER\n+    }\n+\n+    private final List<? extends Authorizer<T>> authorizers;\n+    private final AuthorizerSelectionStrategy selectionStrategy;\n+    @Nullable\n+    private AuthSuccessHandler successHandler;\n+    @Nullable\n+    private AuthFailureHandler failureHandler;\n+\n+    AuthorizerChain(Iterable<? extends Authorizer<T>> authorizers,\n+                    AuthorizerSelectionStrategy selectionStrategy) {\n+        requireNonNull(authorizers, \"authorizers\");\n+        final Iterator<? extends Authorizer<T>> it = authorizers.iterator();\n+        checkArgument(it.hasNext(), \"List of authorizers is empty\");\n+        final Authorizer<T> firstAuthorizer = it.next();\n+        requireNonNull(firstAuthorizer, \"firstAuthorizer\");\n+        this.authorizers = ImmutableList.copyOf(authorizers);\n+        this.selectionStrategy = requireNonNull(selectionStrategy, \"selectionStrategy\");\n+        if (selectionStrategy == AuthorizerSelectionStrategy.FIRST) {\n+            // this could be NULL\n+            failureHandler = firstAuthorizer.failureHandler();\n+        }\n+    }\n+\n+    AuthorizerChain(Authorizer<T> firstAuthorizer, AuthorizerSelectionStrategy selectionStrategy) {\n+        this(ImmutableList.of(requireNonNull(firstAuthorizer, \"firstAuthorizer\")), selectionStrategy);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyODA1OA=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Njk0ODY3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODoxNzo1N1rOIO1mtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxMDowODoyM1rOIXugFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyOTIzOA==", "bodyText": "How about managing these two states on a per-authorization basis? Otherwise we may have an issue when authorizing multiple requests at the same time. See below for the suggestion.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552429238", "createdAt": "2021-01-06T08:17:57Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Chains multiple {@link Authorizer}s together into a single {@link Authorizer}.\n+ * Utilizes {@link AuthorizerSelectionStrategy} to select corresponding {@link AuthFailureHandler}.\n+ */\n+final class AuthorizerChain<T> implements Authorizer<T> {\n+\n+    enum AuthorizerSelectionStrategy {\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain.\n+         */\n+        FIRST,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain.\n+         */\n+        LAST,\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        FIRST_WITH_HANDLER,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        LAST_WITH_HANDLER\n+    }\n+\n+    private final List<? extends Authorizer<T>> authorizers;\n+    private final AuthorizerSelectionStrategy selectionStrategy;\n+    @Nullable\n+    private AuthSuccessHandler successHandler;\n+    @Nullable\n+    private AuthFailureHandler failureHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk2MDM1Mw==", "bodyText": "Yes, this chain processing does not look nice at the second look - we WILL have a problem with multiple requests. But not sure how we could make successHandler and failureHandler local as those exposed by Authorizer interface.\nThe only solution I can see right now is to return successHandler and failureHandler alongside the authorization status.", "url": "https://github.com/line/armeria/pull/2840#discussion_r553960353", "createdAt": "2021-01-08T14:02:56Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Chains multiple {@link Authorizer}s together into a single {@link Authorizer}.\n+ * Utilizes {@link AuthorizerSelectionStrategy} to select corresponding {@link AuthFailureHandler}.\n+ */\n+final class AuthorizerChain<T> implements Authorizer<T> {\n+\n+    enum AuthorizerSelectionStrategy {\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain.\n+         */\n+        FIRST,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain.\n+         */\n+        LAST,\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        FIRST_WITH_HANDLER,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        LAST_WITH_HANDLER\n+    }\n+\n+    private final List<? extends Authorizer<T>> authorizers;\n+    private final AuthorizerSelectionStrategy selectionStrategy;\n+    @Nullable\n+    private AuthSuccessHandler successHandler;\n+    @Nullable\n+    private AuthFailureHandler failureHandler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyOTIzOA=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDAwNTM3Mw==", "bodyText": "Yes, this chain processing does not look nice at the second look - we WILL have a problem with multiple requests. But not sure how we could make successHandler and failureHandler local as those exposed by Authorizer interface.\nThe only solution I can see right now is to return successHandler and failureHandler alongside the authorization status.\n\nPlease advise on the best/optimal/acceptable solution.", "url": "https://github.com/line/armeria/pull/2840#discussion_r554005373", "createdAt": "2021-01-08T15:19:42Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Chains multiple {@link Authorizer}s together into a single {@link Authorizer}.\n+ * Utilizes {@link AuthorizerSelectionStrategy} to select corresponding {@link AuthFailureHandler}.\n+ */\n+final class AuthorizerChain<T> implements Authorizer<T> {\n+\n+    enum AuthorizerSelectionStrategy {\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain.\n+         */\n+        FIRST,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain.\n+         */\n+        LAST,\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        FIRST_WITH_HANDLER,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        LAST_WITH_HANDLER\n+    }\n+\n+    private final List<? extends Authorizer<T>> authorizers;\n+    private final AuthorizerSelectionStrategy selectionStrategy;\n+    @Nullable\n+    private AuthSuccessHandler successHandler;\n+    @Nullable\n+    private AuthFailureHandler failureHandler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyOTIzOA=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDAyMDk1MA==", "bodyText": "What about the following solution?\npublic interface Authorizer<T> {\n\n    CompletionStage<Boolean> authorize(ServiceRequestContext ctx, T data);\n\n    default CompletionStage<AuthorizationStatus> authorizeAndSupplyHandlers(ServiceRequestContext ctx, T data) {\n        authorize(ctx, data).thenApply(status -> new AuthorizationStatusImpl(status));\n    }\n\n    ...\n}\n\n\npublic interface AuthorizationStatus {\n\n    boolean status();\n\n    @Nullable\n    AuthSuccessHandler successHandler();\n\n    @Nullable\n    AuthFailureHandler failureHandler();\n}\n\n\nclass AuthorizationStatusImpl implements AuthorizationStatus {\n\n    private final boolean status;\n    @Nullable\n    private final AuthSuccessHandler successHandler;\n    @Nullable\n    private final AuthFailureHandler failureHandler;\n\n    AuthorizationStatusImpl(boolean status, @Nullable AuthSuccessHandler successHandler, @Nullable AuthFailureHandler failureHandler) {\n        this.status = status;\n        this.successHandler = successHandler;\n        this.failureHandler = failureHandler;\n    }\n\n    AuthorizationStatusImpl(boolean status) {\n        this(status, null, null);\n    }\n\n    boolean status() {\n        return status;\n    }\n\n    AuthSuccessHandler successHandler() {\n        return successHandler;\n    }\n\n    AuthFailureHandler failureHandler() {\n        return failureHandler;\n    }\n}\n\nThis will allow removing successHandler()/failureHandler() from the Authorizer interface while keeping backward compatibility with the original interface. AuthorizerChain and OAuth2 will implement the new authorizeAndSupplyHandlers method.", "url": "https://github.com/line/armeria/pull/2840#discussion_r554020950", "createdAt": "2021-01-08T15:45:16Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Chains multiple {@link Authorizer}s together into a single {@link Authorizer}.\n+ * Utilizes {@link AuthorizerSelectionStrategy} to select corresponding {@link AuthFailureHandler}.\n+ */\n+final class AuthorizerChain<T> implements Authorizer<T> {\n+\n+    enum AuthorizerSelectionStrategy {\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain.\n+         */\n+        FIRST,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain.\n+         */\n+        LAST,\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        FIRST_WITH_HANDLER,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        LAST_WITH_HANDLER\n+    }\n+\n+    private final List<? extends Authorizer<T>> authorizers;\n+    private final AuthorizerSelectionStrategy selectionStrategy;\n+    @Nullable\n+    private AuthSuccessHandler successHandler;\n+    @Nullable\n+    private AuthFailureHandler failureHandler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyOTIzOA=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDIwNTQ4Ng==", "bodyText": "I've implemented this approach in the latest commit. It looks fine. Please review.", "url": "https://github.com/line/armeria/pull/2840#discussion_r554205486", "createdAt": "2021-01-08T21:42:16Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Chains multiple {@link Authorizer}s together into a single {@link Authorizer}.\n+ * Utilizes {@link AuthorizerSelectionStrategy} to select corresponding {@link AuthFailureHandler}.\n+ */\n+final class AuthorizerChain<T> implements Authorizer<T> {\n+\n+    enum AuthorizerSelectionStrategy {\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain.\n+         */\n+        FIRST,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain.\n+         */\n+        LAST,\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        FIRST_WITH_HANDLER,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        LAST_WITH_HANDLER\n+    }\n+\n+    private final List<? extends Authorizer<T>> authorizers;\n+    private final AuthorizerSelectionStrategy selectionStrategy;\n+    @Nullable\n+    private AuthSuccessHandler successHandler;\n+    @Nullable\n+    private AuthFailureHandler failureHandler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyOTIzOA=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTc1MDAzOQ==", "bodyText": "That sounds good to me. Let me take a close look soon.", "url": "https://github.com/line/armeria/pull/2840#discussion_r561750039", "createdAt": "2021-01-21T10:08:23Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Chains multiple {@link Authorizer}s together into a single {@link Authorizer}.\n+ * Utilizes {@link AuthorizerSelectionStrategy} to select corresponding {@link AuthFailureHandler}.\n+ */\n+final class AuthorizerChain<T> implements Authorizer<T> {\n+\n+    enum AuthorizerSelectionStrategy {\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain.\n+         */\n+        FIRST,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain.\n+         */\n+        LAST,\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        FIRST_WITH_HANDLER,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        LAST_WITH_HANDLER\n+    }\n+\n+    private final List<? extends Authorizer<T>> authorizers;\n+    private final AuthorizerSelectionStrategy selectionStrategy;\n+    @Nullable\n+    private AuthSuccessHandler successHandler;\n+    @Nullable\n+    private AuthFailureHandler failureHandler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyOTIzOA=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Njk1MjAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODoxOToxMlrOIO1onw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDowMzowNFrOIQTD4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyOTcyNw==", "bodyText": "We could add successHandler and failureHandler as parameters here and remove the member fields above.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552429727", "createdAt": "2021-01-06T08:19:12Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Chains multiple {@link Authorizer}s together into a single {@link Authorizer}.\n+ * Utilizes {@link AuthorizerSelectionStrategy} to select corresponding {@link AuthFailureHandler}.\n+ */\n+final class AuthorizerChain<T> implements Authorizer<T> {\n+\n+    enum AuthorizerSelectionStrategy {\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain.\n+         */\n+        FIRST,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain.\n+         */\n+        LAST,\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        FIRST_WITH_HANDLER,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        LAST_WITH_HANDLER\n+    }\n+\n+    private final List<? extends Authorizer<T>> authorizers;\n+    private final AuthorizerSelectionStrategy selectionStrategy;\n+    @Nullable\n+    private AuthSuccessHandler successHandler;\n+    @Nullable\n+    private AuthFailureHandler failureHandler;\n+\n+    AuthorizerChain(Iterable<? extends Authorizer<T>> authorizers,\n+                    AuthorizerSelectionStrategy selectionStrategy) {\n+        requireNonNull(authorizers, \"authorizers\");\n+        final Iterator<? extends Authorizer<T>> it = authorizers.iterator();\n+        checkArgument(it.hasNext(), \"List of authorizers is empty\");\n+        final Authorizer<T> firstAuthorizer = it.next();\n+        requireNonNull(firstAuthorizer, \"firstAuthorizer\");\n+        this.authorizers = ImmutableList.copyOf(authorizers);\n+        this.selectionStrategy = requireNonNull(selectionStrategy, \"selectionStrategy\");\n+        if (selectionStrategy == AuthorizerSelectionStrategy.FIRST) {\n+            // this could be NULL\n+            failureHandler = firstAuthorizer.failureHandler();\n+        }\n+    }\n+\n+    AuthorizerChain(Authorizer<T> firstAuthorizer, AuthorizerSelectionStrategy selectionStrategy) {\n+        this(ImmutableList.of(requireNonNull(firstAuthorizer, \"firstAuthorizer\")), selectionStrategy);\n+    }\n+\n+    /**\n+     * Adds a new {@link Authorizer} to the chain.\n+     * @return an original {@link AuthorizerChain} instance with added {@link Authorizer}.\n+     */\n+    @Override\n+    public Authorizer<T> orElse(Authorizer<T> nextAuthorizer) {\n+        final ImmutableList.Builder<Authorizer<T>> newAuthorizersBuilder = ImmutableList.builder();\n+        newAuthorizersBuilder.addAll(authorizers).add(requireNonNull(nextAuthorizer, \"nextAuthorizer\"));\n+        return new AuthorizerChain<>(newAuthorizersBuilder.build(), selectionStrategy);\n+    }\n+\n+    /**\n+     * Triggers an authorization on the chain of {@link Authorizer}s.\n+     * @return a {@link CompletionStage} that will resolve to {@code true} if any of {@link Authorizer}s in the\n+     *         chain authorize the request, or {@code false} if none of {@link Authorizer}s in the chain\n+     *         authorize the request. If the future resolves exceptionally, the request will not be authorized.\n+     */\n+    @Override\n+    public CompletionStage<Boolean> authorize(ServiceRequestContext ctx, T data) {\n+        return authorize(authorizers.iterator(), ctx, data);\n+    }\n+\n+    private CompletionStage<Boolean> authorize(Iterator<? extends Authorizer<T>> iterator,\n+                                               ServiceRequestContext ctx, T data) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk2MDQxOQ==", "bodyText": "How can we avoid having successHandler and failureHandler member fields as those exposed by Authorizer interface?\nThe only solution I can see right now is to return successHandler and failureHandler alongside the authorization status.", "url": "https://github.com/line/armeria/pull/2840#discussion_r553960419", "createdAt": "2021-01-08T14:03:04Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * Chains multiple {@link Authorizer}s together into a single {@link Authorizer}.\n+ * Utilizes {@link AuthorizerSelectionStrategy} to select corresponding {@link AuthFailureHandler}.\n+ */\n+final class AuthorizerChain<T> implements Authorizer<T> {\n+\n+    enum AuthorizerSelectionStrategy {\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain.\n+         */\n+        FIRST,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain.\n+         */\n+        LAST,\n+        /**\n+         * Select a handler provided by the first {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        FIRST_WITH_HANDLER,\n+        /**\n+         * Select a handler provided by the last {@link Authorizer} in the chain that has an associated\n+         * handler actually defined (non-NULL).\n+         */\n+        LAST_WITH_HANDLER\n+    }\n+\n+    private final List<? extends Authorizer<T>> authorizers;\n+    private final AuthorizerSelectionStrategy selectionStrategy;\n+    @Nullable\n+    private AuthSuccessHandler successHandler;\n+    @Nullable\n+    private AuthFailureHandler failureHandler;\n+\n+    AuthorizerChain(Iterable<? extends Authorizer<T>> authorizers,\n+                    AuthorizerSelectionStrategy selectionStrategy) {\n+        requireNonNull(authorizers, \"authorizers\");\n+        final Iterator<? extends Authorizer<T>> it = authorizers.iterator();\n+        checkArgument(it.hasNext(), \"List of authorizers is empty\");\n+        final Authorizer<T> firstAuthorizer = it.next();\n+        requireNonNull(firstAuthorizer, \"firstAuthorizer\");\n+        this.authorizers = ImmutableList.copyOf(authorizers);\n+        this.selectionStrategy = requireNonNull(selectionStrategy, \"selectionStrategy\");\n+        if (selectionStrategy == AuthorizerSelectionStrategy.FIRST) {\n+            // this could be NULL\n+            failureHandler = firstAuthorizer.failureHandler();\n+        }\n+    }\n+\n+    AuthorizerChain(Authorizer<T> firstAuthorizer, AuthorizerSelectionStrategy selectionStrategy) {\n+        this(ImmutableList.of(requireNonNull(firstAuthorizer, \"firstAuthorizer\")), selectionStrategy);\n+    }\n+\n+    /**\n+     * Adds a new {@link Authorizer} to the chain.\n+     * @return an original {@link AuthorizerChain} instance with added {@link Authorizer}.\n+     */\n+    @Override\n+    public Authorizer<T> orElse(Authorizer<T> nextAuthorizer) {\n+        final ImmutableList.Builder<Authorizer<T>> newAuthorizersBuilder = ImmutableList.builder();\n+        newAuthorizersBuilder.addAll(authorizers).add(requireNonNull(nextAuthorizer, \"nextAuthorizer\"));\n+        return new AuthorizerChain<>(newAuthorizersBuilder.build(), selectionStrategy);\n+    }\n+\n+    /**\n+     * Triggers an authorization on the chain of {@link Authorizer}s.\n+     * @return a {@link CompletionStage} that will resolve to {@code true} if any of {@link Authorizer}s in the\n+     *         chain authorize the request, or {@code false} if none of {@link Authorizer}s in the chain\n+     *         authorize the request. If the future resolves exceptionally, the request will not be authorized.\n+     */\n+    @Override\n+    public CompletionStage<Boolean> authorize(ServiceRequestContext ctx, T data) {\n+        return authorize(authorizers.iterator(), ctx, data);\n+    }\n+\n+    private CompletionStage<Boolean> authorize(Iterator<? extends Authorizer<T>> iterator,\n+                                               ServiceRequestContext ctx, T data) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyOTcyNw=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Njk1NTQ1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/server/auth/AuthorizerTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODoyMDo0M1rOIO1qyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxNzo0NjoyOFrOIZy7Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMDI4MA==", "bodyText": "nit: in JUnit 5 tests, you don't need to make your test classes and methods public. Please remove all public modifiers.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552430280", "createdAt": "2021-01-06T08:20:43Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/auth/AuthorizerTest.java", "diffHunk": "@@ -29,35 +30,42 @@\n \n import java.util.concurrent.CompletionException;\n import java.util.concurrent.CompletionStage;\n+import java.util.stream.Stream;\n \n import javax.annotation.Nullable;\n \n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.ClassRule;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n \n import com.linecorp.armeria.common.HttpMethod;\n import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.server.HttpService;\n import com.linecorp.armeria.server.ServiceRequestContext;\n-import com.linecorp.armeria.testing.junit4.common.EventLoopRule;\n+import com.linecorp.armeria.testing.junit5.common.EventLoopExtension;\n \n public class AuthorizerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk2NzczMQ==", "bodyText": "right. done.", "url": "https://github.com/line/armeria/pull/2840#discussion_r553967731", "createdAt": "2021-01-08T14:16:17Z", "author": {"login": "max904-github"}, "path": "core/src/test/java/com/linecorp/armeria/server/auth/AuthorizerTest.java", "diffHunk": "@@ -29,35 +30,42 @@\n \n import java.util.concurrent.CompletionException;\n import java.util.concurrent.CompletionStage;\n+import java.util.stream.Stream;\n \n import javax.annotation.Nullable;\n \n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.ClassRule;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n \n import com.linecorp.armeria.common.HttpMethod;\n import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.server.HttpService;\n import com.linecorp.armeria.server.ServiceRequestContext;\n-import com.linecorp.armeria.testing.junit4.common.EventLoopRule;\n+import com.linecorp.armeria.testing.junit5.common.EventLoopExtension;\n \n public class AuthorizerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMDI4MA=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzExNDc3NA==", "bodyText": "The test class itself can also be package-private.", "url": "https://github.com/line/armeria/pull/2840#discussion_r563114774", "createdAt": "2021-01-23T11:22:06Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/auth/AuthorizerTest.java", "diffHunk": "@@ -29,35 +30,42 @@\n \n import java.util.concurrent.CompletionException;\n import java.util.concurrent.CompletionStage;\n+import java.util.stream.Stream;\n \n import javax.annotation.Nullable;\n \n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.ClassRule;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n \n import com.linecorp.armeria.common.HttpMethod;\n import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.server.HttpService;\n import com.linecorp.armeria.server.ServiceRequestContext;\n-import com.linecorp.armeria.testing.junit4.common.EventLoopRule;\n+import com.linecorp.armeria.testing.junit5.common.EventLoopExtension;\n \n public class AuthorizerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMDI4MA=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkxOTY2Ng==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r563919666", "createdAt": "2021-01-25T17:46:28Z", "author": {"login": "max904-github"}, "path": "core/src/test/java/com/linecorp/armeria/server/auth/AuthorizerTest.java", "diffHunk": "@@ -29,35 +30,42 @@\n \n import java.util.concurrent.CompletionException;\n import java.util.concurrent.CompletionStage;\n+import java.util.stream.Stream;\n \n import javax.annotation.Nullable;\n \n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.ClassRule;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n \n import com.linecorp.armeria.common.HttpMethod;\n import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.server.HttpService;\n import com.linecorp.armeria.server.ServiceRequestContext;\n-import com.linecorp.armeria.testing.junit4.common.EventLoopRule;\n+import com.linecorp.armeria.testing.junit5.common.EventLoopExtension;\n \n public class AuthorizerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMDI4MA=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Njk1NjA2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/server/auth/AuthorizerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODoyMTowMVrOIO1rLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDoxODowNVrOIQTkTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMDM4Mw==", "bodyText": "Missing final", "url": "https://github.com/line/armeria/pull/2840#discussion_r552430383", "createdAt": "2021-01-06T08:21:01Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/auth/AuthorizerTest.java", "diffHunk": "@@ -29,35 +30,42 @@\n \n import java.util.concurrent.CompletionException;\n import java.util.concurrent.CompletionStage;\n+import java.util.stream.Stream;\n \n import javax.annotation.Nullable;\n \n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.ClassRule;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n \n import com.linecorp.armeria.common.HttpMethod;\n import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.server.HttpService;\n import com.linecorp.armeria.server.ServiceRequestContext;\n-import com.linecorp.armeria.testing.junit4.common.EventLoopRule;\n+import com.linecorp.armeria.testing.junit5.common.EventLoopExtension;\n \n public class AuthorizerTest {\n \n-    @ClassRule\n-    public static final EventLoopRule eventLoop = new EventLoopRule();\n+    @RegisterExtension\n+    static EventLoopExtension eventLoop = new EventLoopExtension();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk2ODcxNw==", "bodyText": "copy-paste from some other Armeria's test.\nfixed.", "url": "https://github.com/line/armeria/pull/2840#discussion_r553968717", "createdAt": "2021-01-08T14:18:05Z", "author": {"login": "max904-github"}, "path": "core/src/test/java/com/linecorp/armeria/server/auth/AuthorizerTest.java", "diffHunk": "@@ -29,35 +30,42 @@\n \n import java.util.concurrent.CompletionException;\n import java.util.concurrent.CompletionStage;\n+import java.util.stream.Stream;\n \n import javax.annotation.Nullable;\n \n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.ClassRule;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n \n import com.linecorp.armeria.common.HttpMethod;\n import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.server.HttpService;\n import com.linecorp.armeria.server.ServiceRequestContext;\n-import com.linecorp.armeria.testing.junit4.common.EventLoopRule;\n+import com.linecorp.armeria.testing.junit5.common.EventLoopExtension;\n \n public class AuthorizerTest {\n \n-    @ClassRule\n-    public static final EventLoopRule eventLoop = new EventLoopRule();\n+    @RegisterExtension\n+    static EventLoopExtension eventLoop = new EventLoopExtension();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMDM4Mw=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Njk1ODI3OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODoyMjowM1rOIO1slQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDoyMDowNVrOIQTonA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMDc0MQ==", "bodyText": "Could be final.", "url": "https://github.com/line/armeria/pull/2840#discussion_r552430741", "createdAt": "2021-01-06T08:22:03Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant {\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    /**\n+     * Holds a token object and facilitates its lifecycle.\n+     */\n+    private final TokenLifecycleManager<GrantedOAuth2AccessToken> tokenManager;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier,\n+                                     @Nullable Consumer<? super GrantedOAuth2AccessToken> tokenConsumer,\n+                                     @Nullable Executor executor) {\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        tokenManager = new TokenLifecycleManager<>(this::isValid, this::canRefresh,\n+                                                   this::shallObtainInsteadOfUpdate,\n+                                                   this::obtainAccessToken, this::refreshAccessToken,\n+                                                   tokenSupplier, tokenConsumer, executor);\n+    }\n+\n+    /**\n+     * Tests the token for validity at the given {@link Instant} time.\n+     */\n+    private boolean isValid(GrantedOAuth2AccessToken token, Instant now) {\n+        return token.isValid(now.plus(refreshBefore));\n+    }\n+\n+    /**\n+     * Tests whether the token object can be refreshed or re-obtained.\n+     */\n+    private boolean canRefresh(GrantedOAuth2AccessToken token) {\n+        return token.refreshToken() != null;\n+    }\n+\n+    /**\n+     * Tests whether given {@link Throwable} indicates that the token shall be re-obtained\n+     * after the refresh operation failure.\n+     */\n+    private boolean shallObtainInsteadOfUpdate(Throwable throwable) {\n+        return throwable instanceof TokenRequestException;\n+    }\n+\n+    /**\n+     * Refreshes access token.\n+     */\n+    private CompletionStage<GrantedOAuth2AccessToken> refreshAccessToken(GrantedOAuth2AccessToken token) {\n+        return refreshRequest.make(token);\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link GrantedOAuth2AccessToken} or an\n+     *         exception, if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    abstract CompletableFuture<GrantedOAuth2AccessToken> obtainAccessToken(\n+            @Nullable GrantedOAuth2AccessToken token);\n+\n+    /**\n+     * Produces valid OAuth 2.0 Access Token.\n+     * Returns cached access token if previously obtained from the token end-point.\n+     * Optionally loads access token from longer term storage provided by registered {@link Supplier}.\n+     * If access token has not previously obtained, obtains is from the OAuth 2.0 token end-point using\n+     * dedicated single-thread {@link ExecutorService} which makes sure all token obtain and refresh requests\n+     * executed serially.\n+     * Validates access token and refreshes it if necessary.\n+     */\n+    @Override\n+    public CompletionStage<GrantedOAuth2AccessToken> getAccessToken() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk2OTgyMA==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r553969820", "createdAt": "2021-01-08T14:20:05Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;\n+import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;\n+import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;\n+import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;\n+\n+/**\n+ * Base implementation of OAuth 2.0 Access Token Grant flow to obtain Access Token.\n+ * Implements Access Token loading, storing and refreshing.\n+ */\n+abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGrant {\n+\n+    private final RefreshAccessTokenRequest refreshRequest;\n+\n+    private final Duration refreshBefore;\n+\n+    /**\n+     * Holds a token object and facilitates its lifecycle.\n+     */\n+    private final TokenLifecycleManager<GrantedOAuth2AccessToken> tokenManager;\n+\n+    AbstractOAuth2AuthorizationGrant(RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,\n+                                     @Nullable Supplier<? extends GrantedOAuth2AccessToken> tokenSupplier,\n+                                     @Nullable Consumer<? super GrantedOAuth2AccessToken> tokenConsumer,\n+                                     @Nullable Executor executor) {\n+        this.refreshRequest = requireNonNull(refreshRequest, \"refreshRequest\");\n+        this.refreshBefore = requireNonNull(refreshBefore, \"refreshBefore\");\n+        tokenManager = new TokenLifecycleManager<>(this::isValid, this::canRefresh,\n+                                                   this::shallObtainInsteadOfUpdate,\n+                                                   this::obtainAccessToken, this::refreshAccessToken,\n+                                                   tokenSupplier, tokenConsumer, executor);\n+    }\n+\n+    /**\n+     * Tests the token for validity at the given {@link Instant} time.\n+     */\n+    private boolean isValid(GrantedOAuth2AccessToken token, Instant now) {\n+        return token.isValid(now.plus(refreshBefore));\n+    }\n+\n+    /**\n+     * Tests whether the token object can be refreshed or re-obtained.\n+     */\n+    private boolean canRefresh(GrantedOAuth2AccessToken token) {\n+        return token.refreshToken() != null;\n+    }\n+\n+    /**\n+     * Tests whether given {@link Throwable} indicates that the token shall be re-obtained\n+     * after the refresh operation failure.\n+     */\n+    private boolean shallObtainInsteadOfUpdate(Throwable throwable) {\n+        return throwable instanceof TokenRequestException;\n+    }\n+\n+    /**\n+     * Refreshes access token.\n+     */\n+    private CompletionStage<GrantedOAuth2AccessToken> refreshAccessToken(GrantedOAuth2AccessToken token) {\n+        return refreshRequest.make(token);\n+    }\n+\n+    /**\n+     * Obtains a new access token from the token end-point asynchronously.\n+     * @return A {@link CompletableFuture} carrying the requested {@link GrantedOAuth2AccessToken} or an\n+     *         exception, if the request failed.\n+     * @throws TokenRequestException when the endpoint returns {code HTTP 400 (Bad Request)} status and the\n+     *                               response payload contains the details of the error.\n+     * @throws InvalidClientException when the endpoint returns {@code HTTP 401 (Unauthorized)} status, which\n+     *                                typically indicates that client authentication failed (e.g.: unknown\n+     *                                client, no client authentication included, or unsupported authentication\n+     *                                method).\n+     * @throws UnsupportedMediaTypeException if the media type of the response does not match the expected\n+     *                                       (JSON).\n+     */\n+    abstract CompletableFuture<GrantedOAuth2AccessToken> obtainAccessToken(\n+            @Nullable GrantedOAuth2AccessToken token);\n+\n+    /**\n+     * Produces valid OAuth 2.0 Access Token.\n+     * Returns cached access token if previously obtained from the token end-point.\n+     * Optionally loads access token from longer term storage provided by registered {@link Supplier}.\n+     * If access token has not previously obtained, obtains is from the OAuth 2.0 token end-point using\n+     * dedicated single-thread {@link ExecutorService} which makes sure all token obtain and refresh requests\n+     * executed serially.\n+     * Validates access token and refreshes it if necessary.\n+     */\n+    @Override\n+    public CompletionStage<GrantedOAuth2AccessToken> getAccessToken() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMDc0MQ=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Njk2MjY1OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ClientCredentialsGrant.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODoyMzo0NFrOIO1vOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDoyMDozOVrOIQTpwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMTQxNw==", "bodyText": "Could be final?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552431417", "createdAt": "2021-01-06T08:23:44Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ClientCredentialsGrant.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.internal.client.auth.oauth2.ClientCredentialsTokenRequest;\n+import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;\n+\n+/**\n+ * An implementation of OAuth 2.0 Client Credentials Grant flow to obtain Access Token,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-4.4\">[RFC6749], Section 4.4</a>.\n+ * Implements Access Token loading, storing, obtaining and refreshing.\n+ */\n+@UnstableApi\n+public class OAuth2ClientCredentialsGrant extends AbstractOAuth2AuthorizationGrant {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk3MDExNA==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r553970114", "createdAt": "2021-01-08T14:20:39Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ClientCredentialsGrant.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.internal.client.auth.oauth2.ClientCredentialsTokenRequest;\n+import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;\n+\n+/**\n+ * An implementation of OAuth 2.0 Client Credentials Grant flow to obtain Access Token,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-4.4\">[RFC6749], Section 4.4</a>.\n+ * Implements Access Token loading, storing, obtaining and refreshing.\n+ */\n+@UnstableApi\n+public class OAuth2ClientCredentialsGrant extends AbstractOAuth2AuthorizationGrant {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMTQxNw=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Njk2MzY2OnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ResourceOwnerPasswordCredentialsGrant.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODoyNDoxM1rOIO1v4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDoyMDo0NVrOIQTp9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMTU4Nw==", "bodyText": "Could be final?", "url": "https://github.com/line/armeria/pull/2840#discussion_r552431587", "createdAt": "2021-01-06T08:24:13Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ResourceOwnerPasswordCredentialsGrant.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.internal.client.auth.oauth2.ResourceOwnerPasswordCredentialsTokenRequest;\n+\n+/**\n+ * An implementation of OAuth 2.0 Resource Owner Password Credentials Grant flow to obtain Access Token,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-4.3\">[RFC6749], Section 4.3</a>.\n+ * Implements Access Token loading, storing, obtaining and refreshing.\n+ */\n+@UnstableApi\n+public class OAuth2ResourceOwnerPasswordCredentialsGrant extends AbstractOAuth2AuthorizationGrant {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk3MDE2NQ==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r553970165", "createdAt": "2021-01-08T14:20:45Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ResourceOwnerPasswordCredentialsGrant.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.auth.oauth2.GrantedOAuth2AccessToken;\n+import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;\n+import com.linecorp.armeria.internal.client.auth.oauth2.ResourceOwnerPasswordCredentialsTokenRequest;\n+\n+/**\n+ * An implementation of OAuth 2.0 Resource Owner Password Credentials Grant flow to obtain Access Token,\n+ * as per <a href=\"https://tools.ietf.org/html/rfc6749#section-4.3\">[RFC6749], Section 4.3</a>.\n+ * Implements Access Token loading, storing, obtaining and refreshing.\n+ */\n+@UnstableApi\n+public class OAuth2ResourceOwnerPasswordCredentialsGrant extends AbstractOAuth2AuthorizationGrant {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMTU4Nw=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Njk2NTQyOnYy", "diffSide": "RIGHT", "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/TokenLifecycleManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODoyNDo1OFrOIO1xCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDoyMjowN1rOIQTs_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMTg4MQ==", "bodyText": "public could be removed", "url": "https://github.com/line/armeria/pull/2840#discussion_r552431881", "createdAt": "2021-01-06T08:24:58Z", "author": {"login": "trustin"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/TokenLifecycleManager.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.BiPredicate;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+import com.linecorp.armeria.internal.common.auth.oauth2.SerialFuture;\n+\n+/**\n+ * Holds a token object and facilitates its lifecycle based on a number of procedures,\n+ * such as supply, update, load, store.\n+ * @param <T> the type of the token object\n+ */\n+class TokenLifecycleManager<T> {\n+\n+    /**\n+     * Holds a reference to the token.\n+     */\n+    private final AtomicReference<T> ref;\n+\n+    /**\n+     * Executes token operations serially on a separate thread.\n+     */\n+    private final SerialFuture serialFuture;\n+\n+    private final BiPredicate<? super T, Instant> validator;\n+\n+    private final Predicate<? super T> isUpdatable;\n+\n+    private final Predicate<Throwable> shallResupply;\n+\n+    private final Function<? super T, CompletionStage<? extends T>> serviceSupplier;\n+\n+    @Nullable\n+    private final Function<? super T, CompletionStage<? extends T>> serviceUpdater;\n+\n+    @Nullable\n+    private final Supplier<? extends T> storageSupplier;\n+\n+    @Nullable\n+    private final Consumer<? super T> storageConsumer;\n+\n+    /**\n+     * Constructs new {@link TokenLifecycleManager}.\n+     * @param validator A {@link BiPredicate} that tests the token for validity at the {@link Instant} time.\n+     * @param isUpdatable A {@link Predicate} that tests whether the token object can be updated or re-supplied.\n+     * @param shallResupply A {@link Predicate} that tests whether given {@link Throwable} indicates that\n+     *                      the token shall be re-supplied after the update operation failure.\n+     * @param serviceSupplier A {@link Function} that supplies an initial token object.\n+     * @param serviceUpdater A {@link Function} that updates token object.\n+     * @param storageSupplier A {@link Supplier} that can optionally load previously stored token object.\n+     * @param storageConsumer A {@link Consumer} that can optionally store token object.\n+     * @param executor An optional {@link Executor} that facilitates asynchronous supply and update operations.\n+     *                 A new single thread {@link Executor} will be created using\n+     *                 {@link Executors#newSingleThreadExecutor()} if the {@code null}.\n+     */\n+    TokenLifecycleManager(BiPredicate<? super T, Instant> validator,\n+                          Predicate<? super T> isUpdatable, Predicate<Throwable> shallResupply,\n+                          Function<? super T, CompletionStage<? extends T>> serviceSupplier,\n+                          @Nullable Function<? super T, CompletionStage<? extends T>> serviceUpdater,\n+                          @Nullable Supplier<? extends T> storageSupplier,\n+                          @Nullable Consumer<? super T> storageConsumer,\n+                          @Nullable Executor executor) {\n+        ref = new AtomicReference<>();\n+        serialFuture = new SerialFuture(executor);\n+        this.validator = requireNonNull(validator, \"validator\");\n+        this.isUpdatable = requireNonNull(isUpdatable, \"isUpdatable\");\n+        this.shallResupply = requireNonNull(shallResupply, \"shallResupply\");\n+        this.serviceSupplier = requireNonNull(serviceSupplier, \"serviceSupplier\");\n+        this.serviceUpdater = serviceUpdater;\n+        this.storageSupplier = storageSupplier;\n+        this.storageConsumer = storageConsumer;\n+    }\n+\n+    /**\n+     * Provides managed token object asynchronously. This operation may involve initial token supply or\n+     * token update operation, if required.\n+     */\n+    public CompletionStage<T> get() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk3MDk0Mg==", "bodyText": "fixed", "url": "https://github.com/line/armeria/pull/2840#discussion_r553970942", "createdAt": "2021-01-08T14:22:07Z", "author": {"login": "max904-github"}, "path": "oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/TokenLifecycleManager.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.auth.oauth2;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Instant;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.BiPredicate;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+import com.linecorp.armeria.internal.common.auth.oauth2.SerialFuture;\n+\n+/**\n+ * Holds a token object and facilitates its lifecycle based on a number of procedures,\n+ * such as supply, update, load, store.\n+ * @param <T> the type of the token object\n+ */\n+class TokenLifecycleManager<T> {\n+\n+    /**\n+     * Holds a reference to the token.\n+     */\n+    private final AtomicReference<T> ref;\n+\n+    /**\n+     * Executes token operations serially on a separate thread.\n+     */\n+    private final SerialFuture serialFuture;\n+\n+    private final BiPredicate<? super T, Instant> validator;\n+\n+    private final Predicate<? super T> isUpdatable;\n+\n+    private final Predicate<Throwable> shallResupply;\n+\n+    private final Function<? super T, CompletionStage<? extends T>> serviceSupplier;\n+\n+    @Nullable\n+    private final Function<? super T, CompletionStage<? extends T>> serviceUpdater;\n+\n+    @Nullable\n+    private final Supplier<? extends T> storageSupplier;\n+\n+    @Nullable\n+    private final Consumer<? super T> storageConsumer;\n+\n+    /**\n+     * Constructs new {@link TokenLifecycleManager}.\n+     * @param validator A {@link BiPredicate} that tests the token for validity at the {@link Instant} time.\n+     * @param isUpdatable A {@link Predicate} that tests whether the token object can be updated or re-supplied.\n+     * @param shallResupply A {@link Predicate} that tests whether given {@link Throwable} indicates that\n+     *                      the token shall be re-supplied after the update operation failure.\n+     * @param serviceSupplier A {@link Function} that supplies an initial token object.\n+     * @param serviceUpdater A {@link Function} that updates token object.\n+     * @param storageSupplier A {@link Supplier} that can optionally load previously stored token object.\n+     * @param storageConsumer A {@link Consumer} that can optionally store token object.\n+     * @param executor An optional {@link Executor} that facilitates asynchronous supply and update operations.\n+     *                 A new single thread {@link Executor} will be created using\n+     *                 {@link Executors#newSingleThreadExecutor()} if the {@code null}.\n+     */\n+    TokenLifecycleManager(BiPredicate<? super T, Instant> validator,\n+                          Predicate<? super T> isUpdatable, Predicate<Throwable> shallResupply,\n+                          Function<? super T, CompletionStage<? extends T>> serviceSupplier,\n+                          @Nullable Function<? super T, CompletionStage<? extends T>> serviceUpdater,\n+                          @Nullable Supplier<? extends T> storageSupplier,\n+                          @Nullable Consumer<? super T> storageConsumer,\n+                          @Nullable Executor executor) {\n+        ref = new AtomicReference<>();\n+        serialFuture = new SerialFuture(executor);\n+        this.validator = requireNonNull(validator, \"validator\");\n+        this.isUpdatable = requireNonNull(isUpdatable, \"isUpdatable\");\n+        this.shallResupply = requireNonNull(shallResupply, \"shallResupply\");\n+        this.serviceSupplier = requireNonNull(serviceSupplier, \"serviceSupplier\");\n+        this.serviceUpdater = serviceUpdater;\n+        this.storageSupplier = storageSupplier;\n+        this.storageConsumer = storageConsumer;\n+    }\n+\n+    /**\n+     * Provides managed token object asynchronously. This operation may involve initial token supply or\n+     * token update operation, if required.\n+     */\n+    public CompletionStage<T> get() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMTg4MQ=="}, "originalCommit": {"oid": "d5a2061fbc22a4eef3b9cad11dc35c485638c67f"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2417, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}