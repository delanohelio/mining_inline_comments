{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5Nzg0NTc5", "number": 2834, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODoxOTo1MFrOEIqRJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjo1NDozOFrOEKYrRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NTE2NTgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/RequestContextAwareScheduledExecutorService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODoxOTo1MFrOGowV0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzoyMDoxM1rOGo6VVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4ODI0MQ==", "bodyText": "I think this class name is way too long.\nCan we rename classes that start with RequestContextAware to ContextAware?", "url": "https://github.com/line/armeria/pull/2834#discussion_r445388241", "createdAt": "2020-06-25T08:19:50Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/RequestContextAwareScheduledExecutorService.java", "diffHunk": "@@ -16,43 +16,95 @@\n \n package com.linecorp.armeria.common;\n \n+import static java.util.Objects.requireNonNull;\n+\n import java.util.concurrent.Callable;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n-final class RequestContextAwareScheduledExecutorService extends RequestContextAwareExecutorService\n-        implements ScheduledExecutorService {\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * A delegating {@link ScheduledExecutorService} that sets the {@link RequestContext} before executing any\n+ * submitted tasks.\n+ */\n+public final class RequestContextAwareScheduledExecutorService", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e10c4cba696482c577f498fa5a864476e3eb712"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU1MTk1Ng==", "bodyText": "SGTM", "url": "https://github.com/line/armeria/pull/2834#discussion_r445551956", "createdAt": "2020-06-25T13:20:13Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/RequestContextAwareScheduledExecutorService.java", "diffHunk": "@@ -16,43 +16,95 @@\n \n package com.linecorp.armeria.common;\n \n+import static java.util.Objects.requireNonNull;\n+\n import java.util.concurrent.Callable;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n-final class RequestContextAwareScheduledExecutorService extends RequestContextAwareExecutorService\n-        implements ScheduledExecutorService {\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * A delegating {@link ScheduledExecutorService} that sets the {@link RequestContext} before executing any\n+ * submitted tasks.\n+ */\n+public final class RequestContextAwareScheduledExecutorService", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4ODI0MQ=="}, "originalCommit": {"oid": "6e10c4cba696482c577f498fa5a864476e3eb712"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTM1NjcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/ContextAwareEventLoop.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwOTowNToyNFrOGpZeEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyNjoyNlrOGqOd6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2MjA5Ng==", "bodyText": "This method name seems mutable, not sure it follows our normal conventions.\nwithoutContext?", "url": "https://github.com/line/armeria/pull/2834#discussion_r446062096", "createdAt": "2020-06-26T09:05:24Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/ContextAwareEventLoop.java", "diffHunk": "@@ -32,18 +36,51 @@\n import io.netty.util.concurrent.ScheduledFuture;\n \n /**\n- * A delegating {@link EventLoop} that makes sure all submitted tasks are\n- * executed within the {@link RequestContext}.\n+ * A delegating {@link EventLoop} that sets the {@link RequestContext} before executing any submitted tasks.\n  */\n-final class RequestContextAwareEventLoop extends RequestContextAwareExecutorService implements EventLoop {\n+public final class ContextAwareEventLoop extends ContextAwareExecutorService implements EventLoop {\n+\n+    /**\n+     * Returns a new {@link ContextAwareEventLoop} that sets the specified {@link RequestContext}\n+     * before executing any submitted tasks.\n+     */\n+    public static ContextAwareEventLoop of(RequestContext context, EventLoop eventLoop) {\n+        requireNonNull(context, \"context\");\n+        requireNonNull(eventLoop, \"eventLoop\");\n+        if (eventLoop instanceof ContextAwareEventLoop) {\n+            final RequestContext ctx = ((ContextAwareEventLoop) eventLoop).context();\n+            if (context == ctx) {\n+                return (ContextAwareEventLoop) eventLoop;\n+            }\n+            throw new IllegalArgumentException(\n+                    \"cannot create a \" + ContextAwareEventLoop.class.getSimpleName() +\n+                    \" using another \" + eventLoop);\n+        }\n+        return new ContextAwareEventLoop(context, eventLoop);\n+    }\n+\n+    private final EventLoop eventLoop;\n \n-    RequestContextAwareEventLoop(RequestContext context, EventLoop delegate) {\n-        super(context, delegate);\n+    private ContextAwareEventLoop(RequestContext context, EventLoop eventLoop) {\n+        super(context, eventLoop);\n+        this.eventLoop = eventLoop;\n     }\n \n+    /**\n+     * Returns the {@link EventLoop} that is executing submitted tasks without setting\n+     * the {@link RequestContext}.\n+     */\n+    public EventLoop detachContext() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff22cc21e3c4cb75ef4c33e74150ea5582f15d62"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIwMDc1Nw==", "bodyText": "That's a good suggestion. Fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2834#discussion_r446200757", "createdAt": "2020-06-26T13:57:50Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/ContextAwareEventLoop.java", "diffHunk": "@@ -32,18 +36,51 @@\n import io.netty.util.concurrent.ScheduledFuture;\n \n /**\n- * A delegating {@link EventLoop} that makes sure all submitted tasks are\n- * executed within the {@link RequestContext}.\n+ * A delegating {@link EventLoop} that sets the {@link RequestContext} before executing any submitted tasks.\n  */\n-final class RequestContextAwareEventLoop extends RequestContextAwareExecutorService implements EventLoop {\n+public final class ContextAwareEventLoop extends ContextAwareExecutorService implements EventLoop {\n+\n+    /**\n+     * Returns a new {@link ContextAwareEventLoop} that sets the specified {@link RequestContext}\n+     * before executing any submitted tasks.\n+     */\n+    public static ContextAwareEventLoop of(RequestContext context, EventLoop eventLoop) {\n+        requireNonNull(context, \"context\");\n+        requireNonNull(eventLoop, \"eventLoop\");\n+        if (eventLoop instanceof ContextAwareEventLoop) {\n+            final RequestContext ctx = ((ContextAwareEventLoop) eventLoop).context();\n+            if (context == ctx) {\n+                return (ContextAwareEventLoop) eventLoop;\n+            }\n+            throw new IllegalArgumentException(\n+                    \"cannot create a \" + ContextAwareEventLoop.class.getSimpleName() +\n+                    \" using another \" + eventLoop);\n+        }\n+        return new ContextAwareEventLoop(context, eventLoop);\n+    }\n+\n+    private final EventLoop eventLoop;\n \n-    RequestContextAwareEventLoop(RequestContext context, EventLoop delegate) {\n-        super(context, delegate);\n+    private ContextAwareEventLoop(RequestContext context, EventLoop eventLoop) {\n+        super(context, eventLoop);\n+        this.eventLoop = eventLoop;\n     }\n \n+    /**\n+     * Returns the {@link EventLoop} that is executing submitted tasks without setting\n+     * the {@link RequestContext}.\n+     */\n+    public EventLoop detachContext() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2MjA5Ng=="}, "originalCommit": {"oid": "ff22cc21e3c4cb75ef4c33e74150ea5582f15d62"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwNzQ2MQ==", "bodyText": "withoutContext looks good to me. On second thought, we can implement Unwrappable and seems to use unwrap. (You can ignore this review.\ud83d\ude09)", "url": "https://github.com/line/armeria/pull/2834#discussion_r446507461", "createdAt": "2020-06-27T09:50:14Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/ContextAwareEventLoop.java", "diffHunk": "@@ -32,18 +36,51 @@\n import io.netty.util.concurrent.ScheduledFuture;\n \n /**\n- * A delegating {@link EventLoop} that makes sure all submitted tasks are\n- * executed within the {@link RequestContext}.\n+ * A delegating {@link EventLoop} that sets the {@link RequestContext} before executing any submitted tasks.\n  */\n-final class RequestContextAwareEventLoop extends RequestContextAwareExecutorService implements EventLoop {\n+public final class ContextAwareEventLoop extends ContextAwareExecutorService implements EventLoop {\n+\n+    /**\n+     * Returns a new {@link ContextAwareEventLoop} that sets the specified {@link RequestContext}\n+     * before executing any submitted tasks.\n+     */\n+    public static ContextAwareEventLoop of(RequestContext context, EventLoop eventLoop) {\n+        requireNonNull(context, \"context\");\n+        requireNonNull(eventLoop, \"eventLoop\");\n+        if (eventLoop instanceof ContextAwareEventLoop) {\n+            final RequestContext ctx = ((ContextAwareEventLoop) eventLoop).context();\n+            if (context == ctx) {\n+                return (ContextAwareEventLoop) eventLoop;\n+            }\n+            throw new IllegalArgumentException(\n+                    \"cannot create a \" + ContextAwareEventLoop.class.getSimpleName() +\n+                    \" using another \" + eventLoop);\n+        }\n+        return new ContextAwareEventLoop(context, eventLoop);\n+    }\n+\n+    private final EventLoop eventLoop;\n \n-    RequestContextAwareEventLoop(RequestContext context, EventLoop delegate) {\n-        super(context, delegate);\n+    private ContextAwareEventLoop(RequestContext context, EventLoop eventLoop) {\n+        super(context, eventLoop);\n+        this.eventLoop = eventLoop;\n     }\n \n+    /**\n+     * Returns the {@link EventLoop} that is executing submitted tasks without setting\n+     * the {@link RequestContext}.\n+     */\n+    public EventLoop detachContext() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2MjA5Ng=="}, "originalCommit": {"oid": "ff22cc21e3c4cb75ef4c33e74150ea5582f15d62"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzMDQxMA==", "bodyText": "Let's use withoutContext as we've discussed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2834#discussion_r446930410", "createdAt": "2020-06-29T12:26:26Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/ContextAwareEventLoop.java", "diffHunk": "@@ -32,18 +36,51 @@\n import io.netty.util.concurrent.ScheduledFuture;\n \n /**\n- * A delegating {@link EventLoop} that makes sure all submitted tasks are\n- * executed within the {@link RequestContext}.\n+ * A delegating {@link EventLoop} that sets the {@link RequestContext} before executing any submitted tasks.\n  */\n-final class RequestContextAwareEventLoop extends RequestContextAwareExecutorService implements EventLoop {\n+public final class ContextAwareEventLoop extends ContextAwareExecutorService implements EventLoop {\n+\n+    /**\n+     * Returns a new {@link ContextAwareEventLoop} that sets the specified {@link RequestContext}\n+     * before executing any submitted tasks.\n+     */\n+    public static ContextAwareEventLoop of(RequestContext context, EventLoop eventLoop) {\n+        requireNonNull(context, \"context\");\n+        requireNonNull(eventLoop, \"eventLoop\");\n+        if (eventLoop instanceof ContextAwareEventLoop) {\n+            final RequestContext ctx = ((ContextAwareEventLoop) eventLoop).context();\n+            if (context == ctx) {\n+                return (ContextAwareEventLoop) eventLoop;\n+            }\n+            throw new IllegalArgumentException(\n+                    \"cannot create a \" + ContextAwareEventLoop.class.getSimpleName() +\n+                    \" using another \" + eventLoop);\n+        }\n+        return new ContextAwareEventLoop(context, eventLoop);\n+    }\n+\n+    private final EventLoop eventLoop;\n \n-    RequestContextAwareEventLoop(RequestContext context, EventLoop delegate) {\n-        super(context, delegate);\n+    private ContextAwareEventLoop(RequestContext context, EventLoop eventLoop) {\n+        super(context, eventLoop);\n+        this.eventLoop = eventLoop;\n     }\n \n+    /**\n+     * Returns the {@link EventLoop} that is executing submitted tasks without setting\n+     * the {@link RequestContext}.\n+     */\n+    public EventLoop detachContext() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2MjA5Ng=="}, "originalCommit": {"oid": "ff22cc21e3c4cb75ef4c33e74150ea5582f15d62"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDA5MTkzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/ContextAwareEventLoop.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMjoxNjozM1rOGqCrzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyNTowNlrOGqOazA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjczNzM1Nw==", "bodyText": "How about extracting the interfaces from the implementations?", "url": "https://github.com/line/armeria/pull/2834#discussion_r446737357", "createdAt": "2020-06-29T02:16:33Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/ContextAwareEventLoop.java", "diffHunk": "@@ -32,18 +36,51 @@\n import io.netty.util.concurrent.ScheduledFuture;\n \n /**\n- * A delegating {@link EventLoop} that makes sure all submitted tasks are\n- * executed within the {@link RequestContext}.\n+ * A delegating {@link EventLoop} that sets the {@link RequestContext} before executing any submitted tasks.\n  */\n-final class RequestContextAwareEventLoop extends RequestContextAwareExecutorService implements EventLoop {\n+public final class ContextAwareEventLoop extends ContextAwareExecutorService implements EventLoop {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840d58f1cd4020399773a7d1e1ec2461990b7311"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyOTYxMg==", "bodyText": "Fixed. \ud83d\ude09\nI didn't extract other package-private classes such as ContextAwareExecutorService.\nIf I need to extract that as well, please let me know.", "url": "https://github.com/line/armeria/pull/2834#discussion_r446929612", "createdAt": "2020-06-29T12:25:06Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/ContextAwareEventLoop.java", "diffHunk": "@@ -32,18 +36,51 @@\n import io.netty.util.concurrent.ScheduledFuture;\n \n /**\n- * A delegating {@link EventLoop} that makes sure all submitted tasks are\n- * executed within the {@link RequestContext}.\n+ * A delegating {@link EventLoop} that sets the {@link RequestContext} before executing any submitted tasks.\n  */\n-final class RequestContextAwareEventLoop extends RequestContextAwareExecutorService implements EventLoop {\n+public final class ContextAwareEventLoop extends ContextAwareExecutorService implements EventLoop {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjczNzM1Nw=="}, "originalCommit": {"oid": "840d58f1cd4020399773a7d1e1ec2461990b7311"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODkyNDIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/ContextAwareScheduledExecutorService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo0MTowMVrOGqvxIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjo0NDowNFrOGq6i2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3NjAwMQ==", "bodyText": "Suggestion: How about calling executor.withoutContext() than throwing an IAE?", "url": "https://github.com/line/armeria/pull/2834#discussion_r447476001", "createdAt": "2020-06-30T07:41:01Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/ContextAwareScheduledExecutorService.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2019 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * A delegating {@link ScheduledExecutorService} that sets the {@link RequestContext} before executing any\n+ * submitted tasks.\n+ */\n+public interface ContextAwareScheduledExecutorService extends ScheduledExecutorService {\n+\n+    /**\n+     * Returns a new {@link ContextAwareScheduledExecutorService} that sets the specified\n+     * {@link RequestContext} before executing any submitted tasks.\n+     */\n+    static ContextAwareScheduledExecutorService of(\n+            RequestContext context, ScheduledExecutorService executor) {\n+        requireNonNull(context, \"context\");\n+        requireNonNull(executor, \"executor\");\n+        if (executor instanceof ContextAwareScheduledExecutorService) {\n+            final RequestContext ctx = ((ContextAwareScheduledExecutorService) executor).context();\n+            if (context == ctx) {\n+                return (ContextAwareScheduledExecutorService) executor;\n+            }\n+            throw new IllegalArgumentException(\n+                    \"cannot create a \" + ContextAwareScheduledExecutorService.class.getSimpleName() +\n+                    \" using another \" + executor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc28a586a118031efcc52841094f548e87fb8cd5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY1MjU2OQ==", "bodyText": "I don't want to do that because the RequestContext is used for scoping and if it's the different context, it could mean that the request scope is mixed. So I think we should throw an IAE.", "url": "https://github.com/line/armeria/pull/2834#discussion_r447652569", "createdAt": "2020-06-30T12:44:04Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/ContextAwareScheduledExecutorService.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2019 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * A delegating {@link ScheduledExecutorService} that sets the {@link RequestContext} before executing any\n+ * submitted tasks.\n+ */\n+public interface ContextAwareScheduledExecutorService extends ScheduledExecutorService {\n+\n+    /**\n+     * Returns a new {@link ContextAwareScheduledExecutorService} that sets the specified\n+     * {@link RequestContext} before executing any submitted tasks.\n+     */\n+    static ContextAwareScheduledExecutorService of(\n+            RequestContext context, ScheduledExecutorService executor) {\n+        requireNonNull(context, \"context\");\n+        requireNonNull(executor, \"executor\");\n+        if (executor instanceof ContextAwareScheduledExecutorService) {\n+            final RequestContext ctx = ((ContextAwareScheduledExecutorService) executor).context();\n+            if (context == ctx) {\n+                return (ContextAwareScheduledExecutorService) executor;\n+            }\n+            throw new IllegalArgumentException(\n+                    \"cannot create a \" + ContextAwareScheduledExecutorService.class.getSimpleName() +\n+                    \" using another \" + executor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3NjAwMQ=="}, "originalCommit": {"oid": "dc28a586a118031efcc52841094f548e87fb8cd5"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODkzODk1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/DefaultContextAwareScheduledExecutorService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo0NTowMFrOGqv6Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODowNDoxMVrOGqwpvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3ODMzOQ==", "bodyText": "Could be removed?", "url": "https://github.com/line/armeria/pull/2834#discussion_r447478339", "createdAt": "2020-06-30T07:45:00Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/DefaultContextAwareScheduledExecutorService.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.common.base.MoreObjects;\n+\n+final class DefaultContextAwareScheduledExecutorService\n+        extends ContextAwareExecutorService implements ContextAwareScheduledExecutorService {\n+\n+    private final ScheduledExecutorService executor;\n+\n+    DefaultContextAwareScheduledExecutorService(\n+            RequestContext context, ScheduledExecutorService executor) {\n+        super(context, executor);\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Returns the {@link ScheduledExecutorService} that is executing submitted tasks without setting\n+     * the {@link RequestContext}.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc28a586a118031efcc52841094f548e87fb8cd5"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ5MDQ5Mg==", "bodyText": "Forgot to remove this. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2834#discussion_r447490492", "createdAt": "2020-06-30T08:04:11Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/DefaultContextAwareScheduledExecutorService.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.common.base.MoreObjects;\n+\n+final class DefaultContextAwareScheduledExecutorService\n+        extends ContextAwareExecutorService implements ContextAwareScheduledExecutorService {\n+\n+    private final ScheduledExecutorService executor;\n+\n+    DefaultContextAwareScheduledExecutorService(\n+            RequestContext context, ScheduledExecutorService executor) {\n+        super(context, executor);\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Returns the {@link ScheduledExecutorService} that is executing submitted tasks without setting\n+     * the {@link RequestContext}.\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3ODMzOQ=="}, "originalCommit": {"oid": "dc28a586a118031efcc52841094f548e87fb8cd5"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODk0MDA1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/DefaultContextAwareScheduledExecutorService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo0NToxM1rOGqv64g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo0NToxM1rOGqv64g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3ODQ5OA==", "bodyText": "Could be removed?", "url": "https://github.com/line/armeria/pull/2834#discussion_r447478498", "createdAt": "2020-06-30T07:45:13Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/DefaultContextAwareScheduledExecutorService.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.common.base.MoreObjects;\n+\n+final class DefaultContextAwareScheduledExecutorService\n+        extends ContextAwareExecutorService implements ContextAwareScheduledExecutorService {\n+\n+    private final ScheduledExecutorService executor;\n+\n+    DefaultContextAwareScheduledExecutorService(\n+            RequestContext context, ScheduledExecutorService executor) {\n+        super(context, executor);\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Returns the {@link ScheduledExecutorService} that is executing submitted tasks without setting\n+     * the {@link RequestContext}.\n+     */\n+    @Override\n+    public ScheduledExecutorService withoutContext() {\n+        return executor;\n+    }\n+\n+    /**\n+     * Returns the {@link RequestContext} that is specified when creating\n+     * this {@link ContextAwareScheduledExecutorService}.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc28a586a118031efcc52841094f548e87fb8cd5"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODk1ODE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo0OTo1N1rOGqwGIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo0OTo1N1rOGqwGIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4MTM3Nw==", "bodyText": "Don't we need to check whether the specified executor is ContextAwareExecutorService like you did in ContextAwareScheduledExecutorService.of?", "url": "https://github.com/line/armeria/pull/2834#discussion_r447481377", "createdAt": "2020-06-30T07:49:57Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "diffHunk": "@@ -469,15 +481,15 @@ default Executor makeContextAware(Executor executor) {\n      * sure to propagate the current {@link RequestContext} into the callback execution.\n      */\n     default ExecutorService makeContextAware(ExecutorService executor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc28a586a118031efcc52841094f548e87fb8cd5"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODk2MjUyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo1MDo0OFrOGqwIoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo1MDo0OFrOGqwIoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4MjAxNw==", "bodyText": "Ditto, need to check logger is ContextAwareLogger?", "url": "https://github.com/line/armeria/pull/2834#discussion_r447482017", "createdAt": "2020-06-30T07:50:48Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "diffHunk": "@@ -587,7 +599,7 @@ default Runnable makeContextAware(Runnable runnable) {\n      * @param logger the {@link Logger} to decorate.\n      */\n     default Logger makeContextAware(Logger logger) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc28a586a118031efcc52841094f548e87fb8cd5"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzI1NTA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/RequestContextUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjo1NDozOFrOGrZGkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzowMDo1OFrOGrZRHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1MzIzMg==", "bodyText": "validate -> ensure?", "url": "https://github.com/line/armeria/pull/2834#discussion_r448153232", "createdAt": "2020-07-01T06:54:38Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/RequestContextUtil.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+final class RequestContextUtil {\n+\n+    static void validateSameCtx(RequestContext ctx, ContextHolder contextHolder, Class<?> type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65af4df2ac34c287d15cb51e36c830be5ea25ed4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1NTkzMg==", "bodyText": "Fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2834#discussion_r448155932", "createdAt": "2020-07-01T07:00:58Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/RequestContextUtil.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+final class RequestContextUtil {\n+\n+    static void validateSameCtx(RequestContext ctx, ContextHolder contextHolder, Class<?> type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1MzIzMg=="}, "originalCommit": {"oid": "65af4df2ac34c287d15cb51e36c830be5ea25ed4"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2392, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}