{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MDg1MjA0", "number": 2552, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo1MToyNlrODlVeRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTowMzozNVrODmNDjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDc1NzE4OnYy", "diffSide": "RIGHT", "path": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListenerBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo1MToyNlrOFyK2nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo1MToyNlrOFyK2nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1MDk0Mw==", "bodyText": "We have this on line 40 as well. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2552#discussion_r388150943", "createdAt": "2020-03-05T08:51:26Z", "author": {"login": "minwoox"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListenerBuilder.java", "diffHunk": "@@ -53,20 +51,16 @@\n  * <pre>{@code\n  * ZooKeeperUpdatingListener listener =\n  *     ZooKeeperUpdatingListener.builder(curatorFramework, \"/myProductionEndpoints\")\n- *                              .nodeValueCodec(NodeValueCodec.DEFAULT)\n+ *                              .codec(NodeValueCodec.DEFAULT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcc9f3011a04961de4630a83e491e8540f97f50"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDc2NDkwOnYy", "diffSide": "RIGHT", "path": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListenerBuilder.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo1Mzo1M1rOFyK7dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwODoxMDowOFrOFywJYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1MjE4MQ==", "bodyText": "Is there any reason that you deprecated this? because it seems fine to me. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2552#discussion_r388152181", "createdAt": "2020-03-05T08:53:53Z", "author": {"login": "minwoox"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListenerBuilder.java", "diffHunk": "@@ -80,129 +74,97 @@\n      */\n     ZooKeeperUpdatingListenerBuilder(CuratorFramework client, String zNodePath) {\n         this.client = requireNonNull(client, \"client\");\n-        connectionStr = null;\n         this.zNodePath = requireNonNull(zNodePath, \"zNodePath\");\n         checkArgument(!this.zNodePath.isEmpty(), \"zNodePath can't be empty\");\n     }\n \n     /**\n      * Creates a {@link ZooKeeperUpdatingListenerBuilder} with a ZooKeeper connection string and a zNode path.\n      *\n-     * @param connectionStr the ZooKeeper connection string\n+     * @param zkConnectionStr the ZooKeeper connection string\n      * @param zNodePath the ZooKeeper node to register\n      */\n-    ZooKeeperUpdatingListenerBuilder(String connectionStr, String zNodePath) {\n-        this.connectionStr = requireNonNull(connectionStr, \"connectionStr\");\n-        checkArgument(!this.connectionStr.isEmpty(), \"connectionStr can't be empty\");\n+    ZooKeeperUpdatingListenerBuilder(String zkConnectionStr, String zNodePath) {\n+        super(requireNonNull(zkConnectionStr, \"zkConnectionStr\"));\n+        client = null;\n         this.zNodePath = requireNonNull(zNodePath, \"zNodePath\");\n         checkArgument(!this.zNodePath.isEmpty(), \"zNodePath can't be empty\");\n     }\n \n-    private void ensureInternalClient() {\n-        checkState(client == null,\n-                   \"This method is allowed only when created with a connection string.\");\n-    }\n-\n     /**\n-     * Sets the connect timeout.\n-     *\n-     * @param connectTimeout the connect timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder connectTimeout(Duration connectTimeout) {\n-        requireNonNull(connectTimeout, \"connectTimeout\");\n-        checkArgument(!connectTimeout.isZero() && !connectTimeout.isNegative(),\n-                      \"connectTimeout: %s (expected: > 0)\", connectTimeout);\n-        return connectTimeoutMillis(connectTimeout.toMillis());\n-    }\n-\n-    /**\n-     * Sets the connect timeout (in ms). (default: {@value ZooKeeperDefaults#DEFAULT_CONNECT_TIMEOUT_MS})\n-     *\n-     * @param connectTimeoutMillis the connect timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder connectTimeoutMillis(long connectTimeoutMillis) {\n-        ensureInternalClient();\n-        checkArgument(connectTimeoutMillis > 0,\n-                      \"connectTimeoutMillis: %s (expected: > 0)\", connectTimeoutMillis);\n-        this.connectTimeoutMillis = Ints.saturatedCast(connectTimeoutMillis);\n-        return this;\n-    }\n-\n-    /**\n-     * Sets the session timeout.\n-     *\n-     * @param sessionTimeout the session timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder sessionTimeout(Duration sessionTimeout) {\n-        requireNonNull(sessionTimeout, \"sessionTimeout\");\n-        checkArgument(!sessionTimeout.isZero() && !sessionTimeout.isNegative(),\n-                      \"sessionTimeout: %s (expected: > 0)\", sessionTimeout);\n-        return sessionTimeoutMillis(sessionTimeout.toMillis());\n-    }\n-\n-    /**\n-     * Sets the session timeout (in ms). (default: {@value ZooKeeperDefaults#DEFAULT_SESSION_TIMEOUT_MS})\n-     *\n-     * @param sessionTimeoutMillis the session timeout\n+     * Sets the {@link Endpoint} to register. If not set, the current host name is used automatically.\n      *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n+     * @param endpoint the {@link Endpoint} to register\n      */\n-    public ZooKeeperUpdatingListenerBuilder sessionTimeoutMillis(long sessionTimeoutMillis) {\n-        ensureInternalClient();\n-        checkArgument(sessionTimeoutMillis > 0,\n-                      \"sessionTimeoutMillis: %s (expected: > 0)\", sessionTimeoutMillis);\n-        this.sessionTimeoutMillis = Ints.saturatedCast(sessionTimeoutMillis);\n+    public ZooKeeperUpdatingListenerBuilder endpoint(Endpoint endpoint) {\n+        this.endpoint = requireNonNull(endpoint, \"endpoint\");\n         return this;\n     }\n \n     /**\n-     * Sets the {@link Endpoint} to register. If not set, the current host name is used automatically.\n+     * Sets the {@link NodeValueCodec} to encode or decode ZooKeeper data.\n      *\n-     * @param endpoint the {@link Endpoint} to register\n+     * @param nodeValueCodec the {@link NodeValueCodec} instance to use\n      */\n-    public ZooKeeperUpdatingListenerBuilder endpoint(Endpoint endpoint) {\n-        this.endpoint = requireNonNull(endpoint, \"endpoint\");\n+    public ZooKeeperUpdatingListenerBuilder codec(NodeValueCodec nodeValueCodec) {\n+        this.nodeValueCodec = requireNonNull(nodeValueCodec, \"nodeValueCodec\");\n         return this;\n     }\n \n     /**\n      * Sets the {@link NodeValueCodec} to encode or decode ZooKeeper data.\n      *\n      * @param nodeValueCodec the {@link NodeValueCodec} instance to use\n+     *\n+     * @deprecated Use {@link #codec(NodeValueCodec)}\n      */\n+    @Deprecated\n     public ZooKeeperUpdatingListenerBuilder nodeValueCodec(NodeValueCodec nodeValueCodec) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcc9f3011a04961de4630a83e491e8540f97f50"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MzM4MQ==", "bodyText": "Itself is fine for me too. But we use codec(NodeValueCodec nodeValueCodec) as a method name in ZooKeeperEndpointGroupBuilder\n\n  \n    \n      armeria/zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroupBuilder.java\n    \n    \n        Lines 80 to 86\n      in\n      6f21290\n    \n    \n    \n    \n\n        \n          \n               /** \n        \n\n        \n          \n                * Sets the {@link NodeValueCodec} of the {@link ZooKeeperEndpointGroup}. \n        \n\n        \n          \n                */ \n        \n\n        \n          \n               public ZooKeeperEndpointGroupBuilder codec(NodeValueCodec nodeValueCodec) { \n        \n\n        \n          \n                   this.nodeValueCodec = requireNonNull(nodeValueCodec, \"nodeValueCodec\"); \n        \n\n        \n          \n                   return this; \n        \n\n        \n          \n               } \n        \n    \n  \n\n\nI'm not strong here, however I think it would be better to offer consistent APIs. :-)", "url": "https://github.com/line/armeria/pull/2552#discussion_r388193381", "createdAt": "2020-03-05T10:08:23Z", "author": {"login": "ikhoon"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListenerBuilder.java", "diffHunk": "@@ -80,129 +74,97 @@\n      */\n     ZooKeeperUpdatingListenerBuilder(CuratorFramework client, String zNodePath) {\n         this.client = requireNonNull(client, \"client\");\n-        connectionStr = null;\n         this.zNodePath = requireNonNull(zNodePath, \"zNodePath\");\n         checkArgument(!this.zNodePath.isEmpty(), \"zNodePath can't be empty\");\n     }\n \n     /**\n      * Creates a {@link ZooKeeperUpdatingListenerBuilder} with a ZooKeeper connection string and a zNode path.\n      *\n-     * @param connectionStr the ZooKeeper connection string\n+     * @param zkConnectionStr the ZooKeeper connection string\n      * @param zNodePath the ZooKeeper node to register\n      */\n-    ZooKeeperUpdatingListenerBuilder(String connectionStr, String zNodePath) {\n-        this.connectionStr = requireNonNull(connectionStr, \"connectionStr\");\n-        checkArgument(!this.connectionStr.isEmpty(), \"connectionStr can't be empty\");\n+    ZooKeeperUpdatingListenerBuilder(String zkConnectionStr, String zNodePath) {\n+        super(requireNonNull(zkConnectionStr, \"zkConnectionStr\"));\n+        client = null;\n         this.zNodePath = requireNonNull(zNodePath, \"zNodePath\");\n         checkArgument(!this.zNodePath.isEmpty(), \"zNodePath can't be empty\");\n     }\n \n-    private void ensureInternalClient() {\n-        checkState(client == null,\n-                   \"This method is allowed only when created with a connection string.\");\n-    }\n-\n     /**\n-     * Sets the connect timeout.\n-     *\n-     * @param connectTimeout the connect timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder connectTimeout(Duration connectTimeout) {\n-        requireNonNull(connectTimeout, \"connectTimeout\");\n-        checkArgument(!connectTimeout.isZero() && !connectTimeout.isNegative(),\n-                      \"connectTimeout: %s (expected: > 0)\", connectTimeout);\n-        return connectTimeoutMillis(connectTimeout.toMillis());\n-    }\n-\n-    /**\n-     * Sets the connect timeout (in ms). (default: {@value ZooKeeperDefaults#DEFAULT_CONNECT_TIMEOUT_MS})\n-     *\n-     * @param connectTimeoutMillis the connect timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder connectTimeoutMillis(long connectTimeoutMillis) {\n-        ensureInternalClient();\n-        checkArgument(connectTimeoutMillis > 0,\n-                      \"connectTimeoutMillis: %s (expected: > 0)\", connectTimeoutMillis);\n-        this.connectTimeoutMillis = Ints.saturatedCast(connectTimeoutMillis);\n-        return this;\n-    }\n-\n-    /**\n-     * Sets the session timeout.\n-     *\n-     * @param sessionTimeout the session timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder sessionTimeout(Duration sessionTimeout) {\n-        requireNonNull(sessionTimeout, \"sessionTimeout\");\n-        checkArgument(!sessionTimeout.isZero() && !sessionTimeout.isNegative(),\n-                      \"sessionTimeout: %s (expected: > 0)\", sessionTimeout);\n-        return sessionTimeoutMillis(sessionTimeout.toMillis());\n-    }\n-\n-    /**\n-     * Sets the session timeout (in ms). (default: {@value ZooKeeperDefaults#DEFAULT_SESSION_TIMEOUT_MS})\n-     *\n-     * @param sessionTimeoutMillis the session timeout\n+     * Sets the {@link Endpoint} to register. If not set, the current host name is used automatically.\n      *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n+     * @param endpoint the {@link Endpoint} to register\n      */\n-    public ZooKeeperUpdatingListenerBuilder sessionTimeoutMillis(long sessionTimeoutMillis) {\n-        ensureInternalClient();\n-        checkArgument(sessionTimeoutMillis > 0,\n-                      \"sessionTimeoutMillis: %s (expected: > 0)\", sessionTimeoutMillis);\n-        this.sessionTimeoutMillis = Ints.saturatedCast(sessionTimeoutMillis);\n+    public ZooKeeperUpdatingListenerBuilder endpoint(Endpoint endpoint) {\n+        this.endpoint = requireNonNull(endpoint, \"endpoint\");\n         return this;\n     }\n \n     /**\n-     * Sets the {@link Endpoint} to register. If not set, the current host name is used automatically.\n+     * Sets the {@link NodeValueCodec} to encode or decode ZooKeeper data.\n      *\n-     * @param endpoint the {@link Endpoint} to register\n+     * @param nodeValueCodec the {@link NodeValueCodec} instance to use\n      */\n-    public ZooKeeperUpdatingListenerBuilder endpoint(Endpoint endpoint) {\n-        this.endpoint = requireNonNull(endpoint, \"endpoint\");\n+    public ZooKeeperUpdatingListenerBuilder codec(NodeValueCodec nodeValueCodec) {\n+        this.nodeValueCodec = requireNonNull(nodeValueCodec, \"nodeValueCodec\");\n         return this;\n     }\n \n     /**\n      * Sets the {@link NodeValueCodec} to encode or decode ZooKeeper data.\n      *\n      * @param nodeValueCodec the {@link NodeValueCodec} instance to use\n+     *\n+     * @deprecated Use {@link #codec(NodeValueCodec)}\n      */\n+    @Deprecated\n     public ZooKeeperUpdatingListenerBuilder nodeValueCodec(NodeValueCodec nodeValueCodec) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1MjE4MQ=="}, "originalCommit": {"oid": "4dcc9f3011a04961de4630a83e491e8540f97f50"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4NTI3Mw==", "bodyText": "+1 for using codec() for consistency.", "url": "https://github.com/line/armeria/pull/2552#discussion_r388285273", "createdAt": "2020-03-05T13:16:15Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListenerBuilder.java", "diffHunk": "@@ -80,129 +74,97 @@\n      */\n     ZooKeeperUpdatingListenerBuilder(CuratorFramework client, String zNodePath) {\n         this.client = requireNonNull(client, \"client\");\n-        connectionStr = null;\n         this.zNodePath = requireNonNull(zNodePath, \"zNodePath\");\n         checkArgument(!this.zNodePath.isEmpty(), \"zNodePath can't be empty\");\n     }\n \n     /**\n      * Creates a {@link ZooKeeperUpdatingListenerBuilder} with a ZooKeeper connection string and a zNode path.\n      *\n-     * @param connectionStr the ZooKeeper connection string\n+     * @param zkConnectionStr the ZooKeeper connection string\n      * @param zNodePath the ZooKeeper node to register\n      */\n-    ZooKeeperUpdatingListenerBuilder(String connectionStr, String zNodePath) {\n-        this.connectionStr = requireNonNull(connectionStr, \"connectionStr\");\n-        checkArgument(!this.connectionStr.isEmpty(), \"connectionStr can't be empty\");\n+    ZooKeeperUpdatingListenerBuilder(String zkConnectionStr, String zNodePath) {\n+        super(requireNonNull(zkConnectionStr, \"zkConnectionStr\"));\n+        client = null;\n         this.zNodePath = requireNonNull(zNodePath, \"zNodePath\");\n         checkArgument(!this.zNodePath.isEmpty(), \"zNodePath can't be empty\");\n     }\n \n-    private void ensureInternalClient() {\n-        checkState(client == null,\n-                   \"This method is allowed only when created with a connection string.\");\n-    }\n-\n     /**\n-     * Sets the connect timeout.\n-     *\n-     * @param connectTimeout the connect timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder connectTimeout(Duration connectTimeout) {\n-        requireNonNull(connectTimeout, \"connectTimeout\");\n-        checkArgument(!connectTimeout.isZero() && !connectTimeout.isNegative(),\n-                      \"connectTimeout: %s (expected: > 0)\", connectTimeout);\n-        return connectTimeoutMillis(connectTimeout.toMillis());\n-    }\n-\n-    /**\n-     * Sets the connect timeout (in ms). (default: {@value ZooKeeperDefaults#DEFAULT_CONNECT_TIMEOUT_MS})\n-     *\n-     * @param connectTimeoutMillis the connect timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder connectTimeoutMillis(long connectTimeoutMillis) {\n-        ensureInternalClient();\n-        checkArgument(connectTimeoutMillis > 0,\n-                      \"connectTimeoutMillis: %s (expected: > 0)\", connectTimeoutMillis);\n-        this.connectTimeoutMillis = Ints.saturatedCast(connectTimeoutMillis);\n-        return this;\n-    }\n-\n-    /**\n-     * Sets the session timeout.\n-     *\n-     * @param sessionTimeout the session timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder sessionTimeout(Duration sessionTimeout) {\n-        requireNonNull(sessionTimeout, \"sessionTimeout\");\n-        checkArgument(!sessionTimeout.isZero() && !sessionTimeout.isNegative(),\n-                      \"sessionTimeout: %s (expected: > 0)\", sessionTimeout);\n-        return sessionTimeoutMillis(sessionTimeout.toMillis());\n-    }\n-\n-    /**\n-     * Sets the session timeout (in ms). (default: {@value ZooKeeperDefaults#DEFAULT_SESSION_TIMEOUT_MS})\n-     *\n-     * @param sessionTimeoutMillis the session timeout\n+     * Sets the {@link Endpoint} to register. If not set, the current host name is used automatically.\n      *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n+     * @param endpoint the {@link Endpoint} to register\n      */\n-    public ZooKeeperUpdatingListenerBuilder sessionTimeoutMillis(long sessionTimeoutMillis) {\n-        ensureInternalClient();\n-        checkArgument(sessionTimeoutMillis > 0,\n-                      \"sessionTimeoutMillis: %s (expected: > 0)\", sessionTimeoutMillis);\n-        this.sessionTimeoutMillis = Ints.saturatedCast(sessionTimeoutMillis);\n+    public ZooKeeperUpdatingListenerBuilder endpoint(Endpoint endpoint) {\n+        this.endpoint = requireNonNull(endpoint, \"endpoint\");\n         return this;\n     }\n \n     /**\n-     * Sets the {@link Endpoint} to register. If not set, the current host name is used automatically.\n+     * Sets the {@link NodeValueCodec} to encode or decode ZooKeeper data.\n      *\n-     * @param endpoint the {@link Endpoint} to register\n+     * @param nodeValueCodec the {@link NodeValueCodec} instance to use\n      */\n-    public ZooKeeperUpdatingListenerBuilder endpoint(Endpoint endpoint) {\n-        this.endpoint = requireNonNull(endpoint, \"endpoint\");\n+    public ZooKeeperUpdatingListenerBuilder codec(NodeValueCodec nodeValueCodec) {\n+        this.nodeValueCodec = requireNonNull(nodeValueCodec, \"nodeValueCodec\");\n         return this;\n     }\n \n     /**\n      * Sets the {@link NodeValueCodec} to encode or decode ZooKeeper data.\n      *\n      * @param nodeValueCodec the {@link NodeValueCodec} instance to use\n+     *\n+     * @deprecated Use {@link #codec(NodeValueCodec)}\n      */\n+    @Deprecated\n     public ZooKeeperUpdatingListenerBuilder nodeValueCodec(NodeValueCodec nodeValueCodec) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1MjE4MQ=="}, "originalCommit": {"oid": "4dcc9f3011a04961de4630a83e491e8540f97f50"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY4MDY3Nw==", "bodyText": "Then, how about moving this up and add the getter for this?", "url": "https://github.com/line/armeria/pull/2552#discussion_r388680677", "createdAt": "2020-03-06T02:18:21Z", "author": {"login": "minwoox"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListenerBuilder.java", "diffHunk": "@@ -80,129 +74,97 @@\n      */\n     ZooKeeperUpdatingListenerBuilder(CuratorFramework client, String zNodePath) {\n         this.client = requireNonNull(client, \"client\");\n-        connectionStr = null;\n         this.zNodePath = requireNonNull(zNodePath, \"zNodePath\");\n         checkArgument(!this.zNodePath.isEmpty(), \"zNodePath can't be empty\");\n     }\n \n     /**\n      * Creates a {@link ZooKeeperUpdatingListenerBuilder} with a ZooKeeper connection string and a zNode path.\n      *\n-     * @param connectionStr the ZooKeeper connection string\n+     * @param zkConnectionStr the ZooKeeper connection string\n      * @param zNodePath the ZooKeeper node to register\n      */\n-    ZooKeeperUpdatingListenerBuilder(String connectionStr, String zNodePath) {\n-        this.connectionStr = requireNonNull(connectionStr, \"connectionStr\");\n-        checkArgument(!this.connectionStr.isEmpty(), \"connectionStr can't be empty\");\n+    ZooKeeperUpdatingListenerBuilder(String zkConnectionStr, String zNodePath) {\n+        super(requireNonNull(zkConnectionStr, \"zkConnectionStr\"));\n+        client = null;\n         this.zNodePath = requireNonNull(zNodePath, \"zNodePath\");\n         checkArgument(!this.zNodePath.isEmpty(), \"zNodePath can't be empty\");\n     }\n \n-    private void ensureInternalClient() {\n-        checkState(client == null,\n-                   \"This method is allowed only when created with a connection string.\");\n-    }\n-\n     /**\n-     * Sets the connect timeout.\n-     *\n-     * @param connectTimeout the connect timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder connectTimeout(Duration connectTimeout) {\n-        requireNonNull(connectTimeout, \"connectTimeout\");\n-        checkArgument(!connectTimeout.isZero() && !connectTimeout.isNegative(),\n-                      \"connectTimeout: %s (expected: > 0)\", connectTimeout);\n-        return connectTimeoutMillis(connectTimeout.toMillis());\n-    }\n-\n-    /**\n-     * Sets the connect timeout (in ms). (default: {@value ZooKeeperDefaults#DEFAULT_CONNECT_TIMEOUT_MS})\n-     *\n-     * @param connectTimeoutMillis the connect timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder connectTimeoutMillis(long connectTimeoutMillis) {\n-        ensureInternalClient();\n-        checkArgument(connectTimeoutMillis > 0,\n-                      \"connectTimeoutMillis: %s (expected: > 0)\", connectTimeoutMillis);\n-        this.connectTimeoutMillis = Ints.saturatedCast(connectTimeoutMillis);\n-        return this;\n-    }\n-\n-    /**\n-     * Sets the session timeout.\n-     *\n-     * @param sessionTimeout the session timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder sessionTimeout(Duration sessionTimeout) {\n-        requireNonNull(sessionTimeout, \"sessionTimeout\");\n-        checkArgument(!sessionTimeout.isZero() && !sessionTimeout.isNegative(),\n-                      \"sessionTimeout: %s (expected: > 0)\", sessionTimeout);\n-        return sessionTimeoutMillis(sessionTimeout.toMillis());\n-    }\n-\n-    /**\n-     * Sets the session timeout (in ms). (default: {@value ZooKeeperDefaults#DEFAULT_SESSION_TIMEOUT_MS})\n-     *\n-     * @param sessionTimeoutMillis the session timeout\n+     * Sets the {@link Endpoint} to register. If not set, the current host name is used automatically.\n      *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n+     * @param endpoint the {@link Endpoint} to register\n      */\n-    public ZooKeeperUpdatingListenerBuilder sessionTimeoutMillis(long sessionTimeoutMillis) {\n-        ensureInternalClient();\n-        checkArgument(sessionTimeoutMillis > 0,\n-                      \"sessionTimeoutMillis: %s (expected: > 0)\", sessionTimeoutMillis);\n-        this.sessionTimeoutMillis = Ints.saturatedCast(sessionTimeoutMillis);\n+    public ZooKeeperUpdatingListenerBuilder endpoint(Endpoint endpoint) {\n+        this.endpoint = requireNonNull(endpoint, \"endpoint\");\n         return this;\n     }\n \n     /**\n-     * Sets the {@link Endpoint} to register. If not set, the current host name is used automatically.\n+     * Sets the {@link NodeValueCodec} to encode or decode ZooKeeper data.\n      *\n-     * @param endpoint the {@link Endpoint} to register\n+     * @param nodeValueCodec the {@link NodeValueCodec} instance to use\n      */\n-    public ZooKeeperUpdatingListenerBuilder endpoint(Endpoint endpoint) {\n-        this.endpoint = requireNonNull(endpoint, \"endpoint\");\n+    public ZooKeeperUpdatingListenerBuilder codec(NodeValueCodec nodeValueCodec) {\n+        this.nodeValueCodec = requireNonNull(nodeValueCodec, \"nodeValueCodec\");\n         return this;\n     }\n \n     /**\n      * Sets the {@link NodeValueCodec} to encode or decode ZooKeeper data.\n      *\n      * @param nodeValueCodec the {@link NodeValueCodec} instance to use\n+     *\n+     * @deprecated Use {@link #codec(NodeValueCodec)}\n      */\n+    @Deprecated\n     public ZooKeeperUpdatingListenerBuilder nodeValueCodec(NodeValueCodec nodeValueCodec) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1MjE4MQ=="}, "originalCommit": {"oid": "4dcc9f3011a04961de4630a83e491e8540f97f50"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc0NTIzMw==", "bodyText": "Then, how about moving this up and add the getter for this?\n\nI thought about this idea too. However, the NodeValueCodec is only used for encoding and decoding Endpoints. AbstractCuratorFrameworkBuilder is an internal API, so I'm not strong here :-)", "url": "https://github.com/line/armeria/pull/2552#discussion_r388745233", "createdAt": "2020-03-06T07:18:04Z", "author": {"login": "ikhoon"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListenerBuilder.java", "diffHunk": "@@ -80,129 +74,97 @@\n      */\n     ZooKeeperUpdatingListenerBuilder(CuratorFramework client, String zNodePath) {\n         this.client = requireNonNull(client, \"client\");\n-        connectionStr = null;\n         this.zNodePath = requireNonNull(zNodePath, \"zNodePath\");\n         checkArgument(!this.zNodePath.isEmpty(), \"zNodePath can't be empty\");\n     }\n \n     /**\n      * Creates a {@link ZooKeeperUpdatingListenerBuilder} with a ZooKeeper connection string and a zNode path.\n      *\n-     * @param connectionStr the ZooKeeper connection string\n+     * @param zkConnectionStr the ZooKeeper connection string\n      * @param zNodePath the ZooKeeper node to register\n      */\n-    ZooKeeperUpdatingListenerBuilder(String connectionStr, String zNodePath) {\n-        this.connectionStr = requireNonNull(connectionStr, \"connectionStr\");\n-        checkArgument(!this.connectionStr.isEmpty(), \"connectionStr can't be empty\");\n+    ZooKeeperUpdatingListenerBuilder(String zkConnectionStr, String zNodePath) {\n+        super(requireNonNull(zkConnectionStr, \"zkConnectionStr\"));\n+        client = null;\n         this.zNodePath = requireNonNull(zNodePath, \"zNodePath\");\n         checkArgument(!this.zNodePath.isEmpty(), \"zNodePath can't be empty\");\n     }\n \n-    private void ensureInternalClient() {\n-        checkState(client == null,\n-                   \"This method is allowed only when created with a connection string.\");\n-    }\n-\n     /**\n-     * Sets the connect timeout.\n-     *\n-     * @param connectTimeout the connect timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder connectTimeout(Duration connectTimeout) {\n-        requireNonNull(connectTimeout, \"connectTimeout\");\n-        checkArgument(!connectTimeout.isZero() && !connectTimeout.isNegative(),\n-                      \"connectTimeout: %s (expected: > 0)\", connectTimeout);\n-        return connectTimeoutMillis(connectTimeout.toMillis());\n-    }\n-\n-    /**\n-     * Sets the connect timeout (in ms). (default: {@value ZooKeeperDefaults#DEFAULT_CONNECT_TIMEOUT_MS})\n-     *\n-     * @param connectTimeoutMillis the connect timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder connectTimeoutMillis(long connectTimeoutMillis) {\n-        ensureInternalClient();\n-        checkArgument(connectTimeoutMillis > 0,\n-                      \"connectTimeoutMillis: %s (expected: > 0)\", connectTimeoutMillis);\n-        this.connectTimeoutMillis = Ints.saturatedCast(connectTimeoutMillis);\n-        return this;\n-    }\n-\n-    /**\n-     * Sets the session timeout.\n-     *\n-     * @param sessionTimeout the session timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder sessionTimeout(Duration sessionTimeout) {\n-        requireNonNull(sessionTimeout, \"sessionTimeout\");\n-        checkArgument(!sessionTimeout.isZero() && !sessionTimeout.isNegative(),\n-                      \"sessionTimeout: %s (expected: > 0)\", sessionTimeout);\n-        return sessionTimeoutMillis(sessionTimeout.toMillis());\n-    }\n-\n-    /**\n-     * Sets the session timeout (in ms). (default: {@value ZooKeeperDefaults#DEFAULT_SESSION_TIMEOUT_MS})\n-     *\n-     * @param sessionTimeoutMillis the session timeout\n+     * Sets the {@link Endpoint} to register. If not set, the current host name is used automatically.\n      *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n+     * @param endpoint the {@link Endpoint} to register\n      */\n-    public ZooKeeperUpdatingListenerBuilder sessionTimeoutMillis(long sessionTimeoutMillis) {\n-        ensureInternalClient();\n-        checkArgument(sessionTimeoutMillis > 0,\n-                      \"sessionTimeoutMillis: %s (expected: > 0)\", sessionTimeoutMillis);\n-        this.sessionTimeoutMillis = Ints.saturatedCast(sessionTimeoutMillis);\n+    public ZooKeeperUpdatingListenerBuilder endpoint(Endpoint endpoint) {\n+        this.endpoint = requireNonNull(endpoint, \"endpoint\");\n         return this;\n     }\n \n     /**\n-     * Sets the {@link Endpoint} to register. If not set, the current host name is used automatically.\n+     * Sets the {@link NodeValueCodec} to encode or decode ZooKeeper data.\n      *\n-     * @param endpoint the {@link Endpoint} to register\n+     * @param nodeValueCodec the {@link NodeValueCodec} instance to use\n      */\n-    public ZooKeeperUpdatingListenerBuilder endpoint(Endpoint endpoint) {\n-        this.endpoint = requireNonNull(endpoint, \"endpoint\");\n+    public ZooKeeperUpdatingListenerBuilder codec(NodeValueCodec nodeValueCodec) {\n+        this.nodeValueCodec = requireNonNull(nodeValueCodec, \"nodeValueCodec\");\n         return this;\n     }\n \n     /**\n      * Sets the {@link NodeValueCodec} to encode or decode ZooKeeper data.\n      *\n      * @param nodeValueCodec the {@link NodeValueCodec} instance to use\n+     *\n+     * @deprecated Use {@link #codec(NodeValueCodec)}\n      */\n+    @Deprecated\n     public ZooKeeperUpdatingListenerBuilder nodeValueCodec(NodeValueCodec nodeValueCodec) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1MjE4MQ=="}, "originalCommit": {"oid": "4dcc9f3011a04961de4630a83e491e8540f97f50"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc1Njg2MQ==", "bodyText": "Ah yes, its name was AbstractCuratorFrameworkBuilder. \ud83d\ude09\nFor me, it's weird that the subclasses of an abstract builder have the same property setter respectively.\nPerhaps it's better to use composition here? I'm not strong this as well. \ud83d\ude06", "url": "https://github.com/line/armeria/pull/2552#discussion_r388756861", "createdAt": "2020-03-06T07:55:15Z", "author": {"login": "minwoox"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListenerBuilder.java", "diffHunk": "@@ -80,129 +74,97 @@\n      */\n     ZooKeeperUpdatingListenerBuilder(CuratorFramework client, String zNodePath) {\n         this.client = requireNonNull(client, \"client\");\n-        connectionStr = null;\n         this.zNodePath = requireNonNull(zNodePath, \"zNodePath\");\n         checkArgument(!this.zNodePath.isEmpty(), \"zNodePath can't be empty\");\n     }\n \n     /**\n      * Creates a {@link ZooKeeperUpdatingListenerBuilder} with a ZooKeeper connection string and a zNode path.\n      *\n-     * @param connectionStr the ZooKeeper connection string\n+     * @param zkConnectionStr the ZooKeeper connection string\n      * @param zNodePath the ZooKeeper node to register\n      */\n-    ZooKeeperUpdatingListenerBuilder(String connectionStr, String zNodePath) {\n-        this.connectionStr = requireNonNull(connectionStr, \"connectionStr\");\n-        checkArgument(!this.connectionStr.isEmpty(), \"connectionStr can't be empty\");\n+    ZooKeeperUpdatingListenerBuilder(String zkConnectionStr, String zNodePath) {\n+        super(requireNonNull(zkConnectionStr, \"zkConnectionStr\"));\n+        client = null;\n         this.zNodePath = requireNonNull(zNodePath, \"zNodePath\");\n         checkArgument(!this.zNodePath.isEmpty(), \"zNodePath can't be empty\");\n     }\n \n-    private void ensureInternalClient() {\n-        checkState(client == null,\n-                   \"This method is allowed only when created with a connection string.\");\n-    }\n-\n     /**\n-     * Sets the connect timeout.\n-     *\n-     * @param connectTimeout the connect timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder connectTimeout(Duration connectTimeout) {\n-        requireNonNull(connectTimeout, \"connectTimeout\");\n-        checkArgument(!connectTimeout.isZero() && !connectTimeout.isNegative(),\n-                      \"connectTimeout: %s (expected: > 0)\", connectTimeout);\n-        return connectTimeoutMillis(connectTimeout.toMillis());\n-    }\n-\n-    /**\n-     * Sets the connect timeout (in ms). (default: {@value ZooKeeperDefaults#DEFAULT_CONNECT_TIMEOUT_MS})\n-     *\n-     * @param connectTimeoutMillis the connect timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder connectTimeoutMillis(long connectTimeoutMillis) {\n-        ensureInternalClient();\n-        checkArgument(connectTimeoutMillis > 0,\n-                      \"connectTimeoutMillis: %s (expected: > 0)\", connectTimeoutMillis);\n-        this.connectTimeoutMillis = Ints.saturatedCast(connectTimeoutMillis);\n-        return this;\n-    }\n-\n-    /**\n-     * Sets the session timeout.\n-     *\n-     * @param sessionTimeout the session timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder sessionTimeout(Duration sessionTimeout) {\n-        requireNonNull(sessionTimeout, \"sessionTimeout\");\n-        checkArgument(!sessionTimeout.isZero() && !sessionTimeout.isNegative(),\n-                      \"sessionTimeout: %s (expected: > 0)\", sessionTimeout);\n-        return sessionTimeoutMillis(sessionTimeout.toMillis());\n-    }\n-\n-    /**\n-     * Sets the session timeout (in ms). (default: {@value ZooKeeperDefaults#DEFAULT_SESSION_TIMEOUT_MS})\n-     *\n-     * @param sessionTimeoutMillis the session timeout\n+     * Sets the {@link Endpoint} to register. If not set, the current host name is used automatically.\n      *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n+     * @param endpoint the {@link Endpoint} to register\n      */\n-    public ZooKeeperUpdatingListenerBuilder sessionTimeoutMillis(long sessionTimeoutMillis) {\n-        ensureInternalClient();\n-        checkArgument(sessionTimeoutMillis > 0,\n-                      \"sessionTimeoutMillis: %s (expected: > 0)\", sessionTimeoutMillis);\n-        this.sessionTimeoutMillis = Ints.saturatedCast(sessionTimeoutMillis);\n+    public ZooKeeperUpdatingListenerBuilder endpoint(Endpoint endpoint) {\n+        this.endpoint = requireNonNull(endpoint, \"endpoint\");\n         return this;\n     }\n \n     /**\n-     * Sets the {@link Endpoint} to register. If not set, the current host name is used automatically.\n+     * Sets the {@link NodeValueCodec} to encode or decode ZooKeeper data.\n      *\n-     * @param endpoint the {@link Endpoint} to register\n+     * @param nodeValueCodec the {@link NodeValueCodec} instance to use\n      */\n-    public ZooKeeperUpdatingListenerBuilder endpoint(Endpoint endpoint) {\n-        this.endpoint = requireNonNull(endpoint, \"endpoint\");\n+    public ZooKeeperUpdatingListenerBuilder codec(NodeValueCodec nodeValueCodec) {\n+        this.nodeValueCodec = requireNonNull(nodeValueCodec, \"nodeValueCodec\");\n         return this;\n     }\n \n     /**\n      * Sets the {@link NodeValueCodec} to encode or decode ZooKeeper data.\n      *\n      * @param nodeValueCodec the {@link NodeValueCodec} instance to use\n+     *\n+     * @deprecated Use {@link #codec(NodeValueCodec)}\n      */\n+    @Deprecated\n     public ZooKeeperUpdatingListenerBuilder nodeValueCodec(NodeValueCodec nodeValueCodec) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1MjE4MQ=="}, "originalCommit": {"oid": "4dcc9f3011a04961de4630a83e491e8540f97f50"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc2MTk1NQ==", "bodyText": "Well never mind. I was actually thinking to change the name of the builder to something else but it was hard. \ud83d\ude09 So I guess I'm fine as it is.", "url": "https://github.com/line/armeria/pull/2552#discussion_r388761955", "createdAt": "2020-03-06T08:10:08Z", "author": {"login": "minwoox"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListenerBuilder.java", "diffHunk": "@@ -80,129 +74,97 @@\n      */\n     ZooKeeperUpdatingListenerBuilder(CuratorFramework client, String zNodePath) {\n         this.client = requireNonNull(client, \"client\");\n-        connectionStr = null;\n         this.zNodePath = requireNonNull(zNodePath, \"zNodePath\");\n         checkArgument(!this.zNodePath.isEmpty(), \"zNodePath can't be empty\");\n     }\n \n     /**\n      * Creates a {@link ZooKeeperUpdatingListenerBuilder} with a ZooKeeper connection string and a zNode path.\n      *\n-     * @param connectionStr the ZooKeeper connection string\n+     * @param zkConnectionStr the ZooKeeper connection string\n      * @param zNodePath the ZooKeeper node to register\n      */\n-    ZooKeeperUpdatingListenerBuilder(String connectionStr, String zNodePath) {\n-        this.connectionStr = requireNonNull(connectionStr, \"connectionStr\");\n-        checkArgument(!this.connectionStr.isEmpty(), \"connectionStr can't be empty\");\n+    ZooKeeperUpdatingListenerBuilder(String zkConnectionStr, String zNodePath) {\n+        super(requireNonNull(zkConnectionStr, \"zkConnectionStr\"));\n+        client = null;\n         this.zNodePath = requireNonNull(zNodePath, \"zNodePath\");\n         checkArgument(!this.zNodePath.isEmpty(), \"zNodePath can't be empty\");\n     }\n \n-    private void ensureInternalClient() {\n-        checkState(client == null,\n-                   \"This method is allowed only when created with a connection string.\");\n-    }\n-\n     /**\n-     * Sets the connect timeout.\n-     *\n-     * @param connectTimeout the connect timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder connectTimeout(Duration connectTimeout) {\n-        requireNonNull(connectTimeout, \"connectTimeout\");\n-        checkArgument(!connectTimeout.isZero() && !connectTimeout.isNegative(),\n-                      \"connectTimeout: %s (expected: > 0)\", connectTimeout);\n-        return connectTimeoutMillis(connectTimeout.toMillis());\n-    }\n-\n-    /**\n-     * Sets the connect timeout (in ms). (default: {@value ZooKeeperDefaults#DEFAULT_CONNECT_TIMEOUT_MS})\n-     *\n-     * @param connectTimeoutMillis the connect timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder connectTimeoutMillis(long connectTimeoutMillis) {\n-        ensureInternalClient();\n-        checkArgument(connectTimeoutMillis > 0,\n-                      \"connectTimeoutMillis: %s (expected: > 0)\", connectTimeoutMillis);\n-        this.connectTimeoutMillis = Ints.saturatedCast(connectTimeoutMillis);\n-        return this;\n-    }\n-\n-    /**\n-     * Sets the session timeout.\n-     *\n-     * @param sessionTimeout the session timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder sessionTimeout(Duration sessionTimeout) {\n-        requireNonNull(sessionTimeout, \"sessionTimeout\");\n-        checkArgument(!sessionTimeout.isZero() && !sessionTimeout.isNegative(),\n-                      \"sessionTimeout: %s (expected: > 0)\", sessionTimeout);\n-        return sessionTimeoutMillis(sessionTimeout.toMillis());\n-    }\n-\n-    /**\n-     * Sets the session timeout (in ms). (default: {@value ZooKeeperDefaults#DEFAULT_SESSION_TIMEOUT_MS})\n-     *\n-     * @param sessionTimeoutMillis the session timeout\n+     * Sets the {@link Endpoint} to register. If not set, the current host name is used automatically.\n      *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n+     * @param endpoint the {@link Endpoint} to register\n      */\n-    public ZooKeeperUpdatingListenerBuilder sessionTimeoutMillis(long sessionTimeoutMillis) {\n-        ensureInternalClient();\n-        checkArgument(sessionTimeoutMillis > 0,\n-                      \"sessionTimeoutMillis: %s (expected: > 0)\", sessionTimeoutMillis);\n-        this.sessionTimeoutMillis = Ints.saturatedCast(sessionTimeoutMillis);\n+    public ZooKeeperUpdatingListenerBuilder endpoint(Endpoint endpoint) {\n+        this.endpoint = requireNonNull(endpoint, \"endpoint\");\n         return this;\n     }\n \n     /**\n-     * Sets the {@link Endpoint} to register. If not set, the current host name is used automatically.\n+     * Sets the {@link NodeValueCodec} to encode or decode ZooKeeper data.\n      *\n-     * @param endpoint the {@link Endpoint} to register\n+     * @param nodeValueCodec the {@link NodeValueCodec} instance to use\n      */\n-    public ZooKeeperUpdatingListenerBuilder endpoint(Endpoint endpoint) {\n-        this.endpoint = requireNonNull(endpoint, \"endpoint\");\n+    public ZooKeeperUpdatingListenerBuilder codec(NodeValueCodec nodeValueCodec) {\n+        this.nodeValueCodec = requireNonNull(nodeValueCodec, \"nodeValueCodec\");\n         return this;\n     }\n \n     /**\n      * Sets the {@link NodeValueCodec} to encode or decode ZooKeeper data.\n      *\n      * @param nodeValueCodec the {@link NodeValueCodec} instance to use\n+     *\n+     * @deprecated Use {@link #codec(NodeValueCodec)}\n      */\n+    @Deprecated\n     public ZooKeeperUpdatingListenerBuilder nodeValueCodec(NodeValueCodec nodeValueCodec) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1MjE4MQ=="}, "originalCommit": {"oid": "4dcc9f3011a04961de4630a83e491e8540f97f50"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDc4NDI5OnYy", "diffSide": "RIGHT", "path": "zookeeper/src/test/java/com/linecorp/armeria/common/zookeeper/ZooKeeperTestUtil.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo1OTozMlrOFyLHKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNzo1NjoyMFrOFyv2_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1NTE3Ng==", "bodyText": "How about adding this class to the extension?", "url": "https://github.com/line/armeria/pull/2552#discussion_r388155176", "createdAt": "2020-03-05T08:59:32Z", "author": {"login": "minwoox"}, "path": "zookeeper/src/test/java/com/linecorp/armeria/common/zookeeper/ZooKeeperTestUtil.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.zookeeper;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+\n+public final class ZooKeeperTestUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcc9f3011a04961de4630a83e491e8540f97f50"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5NjkzNw==", "bodyText": "That's a good suggestion. This is my considering point. I thought generating random Endpoints is not related to ZooKeeperInstanceExtension.\nI'd like to listen to other folks' opinions too. :-)", "url": "https://github.com/line/armeria/pull/2552#discussion_r388196937", "createdAt": "2020-03-05T10:14:55Z", "author": {"login": "ikhoon"}, "path": "zookeeper/src/test/java/com/linecorp/armeria/common/zookeeper/ZooKeeperTestUtil.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.zookeeper;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+\n+public final class ZooKeeperTestUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1NTE3Ng=="}, "originalCommit": {"oid": "4dcc9f3011a04961de4630a83e491e8540f97f50"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4NjY0Mg==", "bodyText": "I prefer keeping ZooKeeperInstanceExtension generic enough just in case we reuse it somewhere else or someone else fork it in their projects.", "url": "https://github.com/line/armeria/pull/2552#discussion_r388286642", "createdAt": "2020-03-05T13:18:53Z", "author": {"login": "trustin"}, "path": "zookeeper/src/test/java/com/linecorp/armeria/common/zookeeper/ZooKeeperTestUtil.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.zookeeper;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+\n+public final class ZooKeeperTestUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1NTE3Ng=="}, "originalCommit": {"oid": "4dcc9f3011a04961de4630a83e491e8540f97f50"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc1NzI0NA==", "bodyText": "That makes sense. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2552#discussion_r388757244", "createdAt": "2020-03-06T07:56:20Z", "author": {"login": "minwoox"}, "path": "zookeeper/src/test/java/com/linecorp/armeria/common/zookeeper/ZooKeeperTestUtil.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.zookeeper;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+\n+public final class ZooKeeperTestUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1NTE3Ng=="}, "originalCommit": {"oid": "4dcc9f3011a04961de4630a83e491e8540f97f50"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTYwNjkzOnYy", "diffSide": "RIGHT", "path": "zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzoxMjoxNFrOFyS7SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNzoxMzo0OVrOFyvDPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4MzIwOA==", "bodyText": "ImmutableList.builder()", "url": "https://github.com/line/armeria/pull/2552#discussion_r388283208", "createdAt": "2020-03-05T13:12:14Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.zookeeper;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.function.Consumer;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.framework.CuratorFrameworkFactory.Builder;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.primitives.Ints;\n+\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+/**\n+ * A skeletal builder implementation for {@link CuratorFramework}.\n+ */\n+@UnstableApi\n+public class AbstractCuratorFrameworkBuilder {\n+\n+    private static final int DEFAULT_CONNECT_TIMEOUT_MILLIS = 1000;\n+    private static final int DEFAULT_SESSION_TIMEOUT_MILLIS = 10000;\n+    private static final ExponentialBackoffRetry DEFAULT_RETRY_POLICY =\n+            new ExponentialBackoffRetry(DEFAULT_CONNECT_TIMEOUT_MILLIS, 3);\n+\n+    @Nullable\n+    private final CuratorFrameworkFactory.Builder clientBuilder;\n+    @Nullable\n+    private final ImmutableList.Builder<Consumer<? super Builder>> customizers;\n+\n+    /**\n+     * Creates a new instance with the specified {@code zkConnectionStr}.\n+     */\n+    protected AbstractCuratorFrameworkBuilder(String zkConnectionStr) {\n+        checkArgument(!zkConnectionStr.isEmpty(), \"zkConnectionStr can't be empty\");\n+        clientBuilder = CuratorFrameworkFactory.builder()\n+                                               .connectString(zkConnectionStr)\n+                                               .connectionTimeoutMs(DEFAULT_CONNECT_TIMEOUT_MILLIS)\n+                                               .sessionTimeoutMs(DEFAULT_SESSION_TIMEOUT_MILLIS)\n+                                               .retryPolicy(DEFAULT_RETRY_POLICY);\n+        customizers = new ImmutableList.Builder<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59672f6196b9dabbdb5f0ddcde5cc03c3e43698"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc0Mzk5Nw==", "bodyText": "Oops..", "url": "https://github.com/line/armeria/pull/2552#discussion_r388743997", "createdAt": "2020-03-06T07:13:49Z", "author": {"login": "ikhoon"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.zookeeper;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.function.Consumer;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.framework.CuratorFrameworkFactory.Builder;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.primitives.Ints;\n+\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+/**\n+ * A skeletal builder implementation for {@link CuratorFramework}.\n+ */\n+@UnstableApi\n+public class AbstractCuratorFrameworkBuilder {\n+\n+    private static final int DEFAULT_CONNECT_TIMEOUT_MILLIS = 1000;\n+    private static final int DEFAULT_SESSION_TIMEOUT_MILLIS = 10000;\n+    private static final ExponentialBackoffRetry DEFAULT_RETRY_POLICY =\n+            new ExponentialBackoffRetry(DEFAULT_CONNECT_TIMEOUT_MILLIS, 3);\n+\n+    @Nullable\n+    private final CuratorFrameworkFactory.Builder clientBuilder;\n+    @Nullable\n+    private final ImmutableList.Builder<Consumer<? super Builder>> customizers;\n+\n+    /**\n+     * Creates a new instance with the specified {@code zkConnectionStr}.\n+     */\n+    protected AbstractCuratorFrameworkBuilder(String zkConnectionStr) {\n+        checkArgument(!zkConnectionStr.isEmpty(), \"zkConnectionStr can't be empty\");\n+        clientBuilder = CuratorFrameworkFactory.builder()\n+                                               .connectString(zkConnectionStr)\n+                                               .connectionTimeoutMs(DEFAULT_CONNECT_TIMEOUT_MILLIS)\n+                                               .sessionTimeoutMs(DEFAULT_SESSION_TIMEOUT_MILLIS)\n+                                               .retryPolicy(DEFAULT_RETRY_POLICY);\n+        customizers = new ImmutableList.Builder<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4MzIwOA=="}, "originalCommit": {"oid": "f59672f6196b9dabbdb5f0ddcde5cc03c3e43698"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTYwNzQ2OnYy", "diffSide": "RIGHT", "path": "zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzoxMjoyM1rOFyS7lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzoxMjoyM1rOFyS7lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4MzI4Nw==", "bodyText": "Missing period", "url": "https://github.com/line/armeria/pull/2552#discussion_r388283287", "createdAt": "2020-03-05T13:12:23Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.zookeeper;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.function.Consumer;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.framework.CuratorFrameworkFactory.Builder;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.primitives.Ints;\n+\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+/**\n+ * A skeletal builder implementation for {@link CuratorFramework}.\n+ */\n+@UnstableApi\n+public class AbstractCuratorFrameworkBuilder {\n+\n+    private static final int DEFAULT_CONNECT_TIMEOUT_MILLIS = 1000;\n+    private static final int DEFAULT_SESSION_TIMEOUT_MILLIS = 10000;\n+    private static final ExponentialBackoffRetry DEFAULT_RETRY_POLICY =\n+            new ExponentialBackoffRetry(DEFAULT_CONNECT_TIMEOUT_MILLIS, 3);\n+\n+    @Nullable\n+    private final CuratorFrameworkFactory.Builder clientBuilder;\n+    @Nullable\n+    private final ImmutableList.Builder<Consumer<? super Builder>> customizers;\n+\n+    /**\n+     * Creates a new instance with the specified {@code zkConnectionStr}.\n+     */\n+    protected AbstractCuratorFrameworkBuilder(String zkConnectionStr) {\n+        checkArgument(!zkConnectionStr.isEmpty(), \"zkConnectionStr can't be empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59672f6196b9dabbdb5f0ddcde5cc03c3e43698"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTYwOTIyOnYy", "diffSide": "RIGHT", "path": "zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzoxMjo1NlrOFyS8mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzoxMjo1NlrOFyS8mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4MzU0Nw==", "bodyText": "is -> ms is", "url": "https://github.com/line/armeria/pull/2552#discussion_r388283547", "createdAt": "2020-03-05T13:12:56Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.zookeeper;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.function.Consumer;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.framework.CuratorFrameworkFactory.Builder;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.primitives.Ints;\n+\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+/**\n+ * A skeletal builder implementation for {@link CuratorFramework}.\n+ */\n+@UnstableApi\n+public class AbstractCuratorFrameworkBuilder {\n+\n+    private static final int DEFAULT_CONNECT_TIMEOUT_MILLIS = 1000;\n+    private static final int DEFAULT_SESSION_TIMEOUT_MILLIS = 10000;\n+    private static final ExponentialBackoffRetry DEFAULT_RETRY_POLICY =\n+            new ExponentialBackoffRetry(DEFAULT_CONNECT_TIMEOUT_MILLIS, 3);\n+\n+    @Nullable\n+    private final CuratorFrameworkFactory.Builder clientBuilder;\n+    @Nullable\n+    private final ImmutableList.Builder<Consumer<? super Builder>> customizers;\n+\n+    /**\n+     * Creates a new instance with the specified {@code zkConnectionStr}.\n+     */\n+    protected AbstractCuratorFrameworkBuilder(String zkConnectionStr) {\n+        checkArgument(!zkConnectionStr.isEmpty(), \"zkConnectionStr can't be empty\");\n+        clientBuilder = CuratorFrameworkFactory.builder()\n+                                               .connectString(zkConnectionStr)\n+                                               .connectionTimeoutMs(DEFAULT_CONNECT_TIMEOUT_MILLIS)\n+                                               .sessionTimeoutMs(DEFAULT_SESSION_TIMEOUT_MILLIS)\n+                                               .retryPolicy(DEFAULT_RETRY_POLICY);\n+        customizers = new ImmutableList.Builder<>();\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    protected AbstractCuratorFrameworkBuilder() {\n+        clientBuilder = null;\n+        customizers = null;\n+    }\n+\n+    /**\n+     * Sets the specified connect timeout. {@value DEFAULT_CONNECT_TIMEOUT_MILLIS} is used by default.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59672f6196b9dabbdb5f0ddcde5cc03c3e43698"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTYyMzgzOnYy", "diffSide": "RIGHT", "path": "zookeeper/src/test/java/com/linecorp/armeria/common/zookeeper/ZooKeeperInstanceExtension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzoxNzoyMlrOFyTFsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzoxNzoyMlrOFyTFsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4NTg3Mg==", "bodyText": "How about just ZooKeeperExtension?", "url": "https://github.com/line/armeria/pull/2552#discussion_r388285872", "createdAt": "2020-03-05T13:17:22Z", "author": {"login": "trustin"}, "path": "zookeeper/src/test/java/com/linecorp/armeria/common/zookeeper/ZooKeeperInstanceExtension.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.zookeeper;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import java.time.Duration;\n+\n+import javax.annotation.Nullable;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+import com.linecorp.armeria.internal.testing.TemporaryFolder;\n+import com.linecorp.armeria.testing.junit.common.AbstractAllOrEachExtension;\n+\n+import zookeeperjunit.CloseableZooKeeper;\n+import zookeeperjunit.ZKFactory;\n+import zookeeperjunit.ZKInstance;\n+import zookeeperjunit.ZooKeeperAssert;\n+\n+public class ZooKeeperInstanceExtension extends AbstractAllOrEachExtension implements ZooKeeperAssert {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59672f6196b9dabbdb5f0ddcde5cc03c3e43698"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTYzNzc4OnYy", "diffSide": "RIGHT", "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroupBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzoyMToyM1rOFyTN_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNzoxNDoxMlrOFyvDpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4Nzk5Ng==", "bodyText": "Perhaps we could move this field up and make buildCuratorFramework() return it? We could add a method like isUserSpecifiedCuratorFramework() to AbstractCuratorFrameworkBuilder.", "url": "https://github.com/line/armeria/pull/2552#discussion_r388287996", "createdAt": "2020-03-05T13:21:23Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroupBuilder.java", "diffHunk": "@@ -15,58 +15,41 @@\n  */\n package com.linecorp.armeria.client.zookeeper;\n \n-import static com.google.common.base.Preconditions.checkState;\n-import static com.linecorp.armeria.internal.common.zookeeper.ZooKeeperDefaults.DEFAULT_CONNECT_TIMEOUT_MS;\n-import static com.linecorp.armeria.internal.common.zookeeper.ZooKeeperDefaults.DEFAULT_RETRY_POLICY;\n-import static com.linecorp.armeria.internal.common.zookeeper.ZooKeeperDefaults.DEFAULT_SESSION_TIMEOUT_MS;\n import static java.util.Objects.requireNonNull;\n \n-import java.util.ArrayList;\n-import java.util.List;\n+import java.time.Duration;\n import java.util.function.Consumer;\n \n import javax.annotation.Nullable;\n \n import org.apache.curator.framework.CuratorFramework;\n-import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.framework.CuratorFrameworkFactory.Builder;\n \n import com.linecorp.armeria.client.endpoint.EndpointSelectionStrategy;\n+import com.linecorp.armeria.common.zookeeper.AbstractCuratorFrameworkBuilder;\n import com.linecorp.armeria.common.zookeeper.NodeValueCodec;\n \n /**\n  * Builds a {@link ZooKeeperEndpointGroup}.\n  */\n-public final class ZooKeeperEndpointGroupBuilder {\n+public final class ZooKeeperEndpointGroupBuilder extends AbstractCuratorFrameworkBuilder {\n \n     @Nullable\n     private final CuratorFramework client;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59672f6196b9dabbdb5f0ddcde5cc03c3e43698"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc0NDEwMQ==", "bodyText": "That sounds good.", "url": "https://github.com/line/armeria/pull/2552#discussion_r388744101", "createdAt": "2020-03-06T07:14:12Z", "author": {"login": "ikhoon"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroupBuilder.java", "diffHunk": "@@ -15,58 +15,41 @@\n  */\n package com.linecorp.armeria.client.zookeeper;\n \n-import static com.google.common.base.Preconditions.checkState;\n-import static com.linecorp.armeria.internal.common.zookeeper.ZooKeeperDefaults.DEFAULT_CONNECT_TIMEOUT_MS;\n-import static com.linecorp.armeria.internal.common.zookeeper.ZooKeeperDefaults.DEFAULT_RETRY_POLICY;\n-import static com.linecorp.armeria.internal.common.zookeeper.ZooKeeperDefaults.DEFAULT_SESSION_TIMEOUT_MS;\n import static java.util.Objects.requireNonNull;\n \n-import java.util.ArrayList;\n-import java.util.List;\n+import java.time.Duration;\n import java.util.function.Consumer;\n \n import javax.annotation.Nullable;\n \n import org.apache.curator.framework.CuratorFramework;\n-import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.framework.CuratorFrameworkFactory.Builder;\n \n import com.linecorp.armeria.client.endpoint.EndpointSelectionStrategy;\n+import com.linecorp.armeria.common.zookeeper.AbstractCuratorFrameworkBuilder;\n import com.linecorp.armeria.common.zookeeper.NodeValueCodec;\n \n /**\n  * Builds a {@link ZooKeeperEndpointGroup}.\n  */\n-public final class ZooKeeperEndpointGroupBuilder {\n+public final class ZooKeeperEndpointGroupBuilder extends AbstractCuratorFrameworkBuilder {\n \n     @Nullable\n     private final CuratorFramework client;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4Nzk5Ng=="}, "originalCommit": {"oid": "f59672f6196b9dabbdb5f0ddcde5cc03c3e43698"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzg2MzgwOnYy", "diffSide": "RIGHT", "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/TemporaryFolder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTowMzozNVrOFzfHwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTowMzozNVrOFzfHwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzMTU4NA==", "bodyText": "nit: Now 0.44.4", "url": "https://github.com/line/armeria/pull/2552#discussion_r389531584", "createdAt": "2020-03-09T09:03:35Z", "author": {"login": "trustin"}, "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/TemporaryFolder.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.testing;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Comparator;\n+import java.util.stream.Stream;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A helper class to handle temporary folders in JUnit {@code Extension}s.\n+ */\n+public class TemporaryFolder {\n+\n+    // Forked from CentralDogma 0.44.3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e682a46a5c043c5dc6020d9796c9ef6bc9c5fd2b"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2731, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}