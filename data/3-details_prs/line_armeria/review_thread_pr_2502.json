{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MjIyMTk2", "number": 2502, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNzo0NjozOFrODha79w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTo0NjoyM1rOECFN0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzcwOTM1OnYy", "diffSide": "RIGHT", "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNzo0NjozOFrOFsJCEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMjo1MzoyNFrOGWgu_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTY0OQ==", "bodyText": "Question: Is it possible to use management.server.port instead?", "url": "https://github.com/line/armeria/pull/2502#discussion_r381829649", "createdAt": "2020-02-20T07:46:38Z", "author": {"login": "trustin"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java", "diffHunk": "@@ -61,6 +61,9 @@\n  *     mime-types: text/*, application/json\n  *     excluded-user-agents: some-user-agent, another-user-agent\n  *     min-response-size: 1KB\n+ *   security:\n+ *     enabled: true\n+ *     ports: 8080", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86ebe6f6ea13a5bbc070a3bc516a227784cf2d04"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5MjUzMw==", "bodyText": "It is not possible right now. However, It can possibly change. There seems to be no implementation problem.", "url": "https://github.com/line/armeria/pull/2502#discussion_r381892533", "createdAt": "2020-02-20T09:53:39Z", "author": {"login": "heowc"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java", "diffHunk": "@@ -61,6 +61,9 @@\n  *     mime-types: text/*, application/json\n  *     excluded-user-agents: some-user-agent, another-user-agent\n  *     min-response-size: 1KB\n+ *   security:\n+ *     enabled: true\n+ *     ports: 8080", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTY0OQ=="}, "originalCommit": {"oid": "86ebe6f6ea13a5bbc070a3bc516a227784cf2d04"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU4Nzk2NQ==", "bodyText": "@trustin\nQuestion: Do you want to remove the armeria.security.ports value instead of the optional value?", "url": "https://github.com/line/armeria/pull/2502#discussion_r382587965", "createdAt": "2020-02-21T13:45:23Z", "author": {"login": "heowc"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java", "diffHunk": "@@ -61,6 +61,9 @@\n  *     mime-types: text/*, application/json\n  *     excluded-user-agents: some-user-agent, another-user-agent\n  *     min-response-size: 1KB\n+ *   security:\n+ *     enabled: true\n+ *     ports: 8080", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTY0OQ=="}, "originalCommit": {"oid": "86ebe6f6ea13a5bbc070a3bc516a227784cf2d04"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkxMzA0OA==", "bodyText": "I tried management.server.port and it doesn't bind to that value. Do you want this property to be an additional binding?", "url": "https://github.com/line/armeria/pull/2502#discussion_r382913048", "createdAt": "2020-02-22T13:35:01Z", "author": {"login": "heowc"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java", "diffHunk": "@@ -61,6 +61,9 @@\n  *     mime-types: text/*, application/json\n  *     excluded-user-agents: some-user-agent, another-user-agent\n  *     min-response-size: 1KB\n+ *   security:\n+ *     enabled: true\n+ *     ports: 8080", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTY0OQ=="}, "originalCommit": {"oid": "86ebe6f6ea13a5bbc070a3bc516a227784cf2d04"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNzgwOA==", "bodyText": "Question: Do you want to remove the armeria.security.ports value instead of the optional value?\n\nYes, we might want to add it later but not until there's a user request.\n\nI tried management.server.port and it doesn't bind to that value. Do you want this property to be an additional binding?\n\nYes, please.", "url": "https://github.com/line/armeria/pull/2502#discussion_r384937808", "createdAt": "2020-02-27T06:41:06Z", "author": {"login": "trustin"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java", "diffHunk": "@@ -61,6 +61,9 @@\n  *     mime-types: text/*, application/json\n  *     excluded-user-agents: some-user-agent, another-user-agent\n  *     min-response-size: 1KB\n+ *   security:\n+ *     enabled: true\n+ *     ports: 8080", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTY0OQ=="}, "originalCommit": {"oid": "86ebe6f6ea13a5bbc070a3bc516a227784cf2d04"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MTk1NA==", "bodyText": "Thanks for the reply. \ud83d\ude04\nWe can apply security by checking management.server.port when using Actuator. However, we're obscure which ports to secure internal/docs, internal/healthcheck, and internal/metrics.  \ud83d\ude33", "url": "https://github.com/line/armeria/pull/2502#discussion_r385081954", "createdAt": "2020-02-27T11:58:16Z", "author": {"login": "heowc"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java", "diffHunk": "@@ -61,6 +61,9 @@\n  *     mime-types: text/*, application/json\n  *     excluded-user-agents: some-user-agent, another-user-agent\n  *     min-response-size: 1KB\n+ *   security:\n+ *     enabled: true\n+ *     ports: 8080", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTY0OQ=="}, "originalCommit": {"oid": "86ebe6f6ea13a5bbc070a3bc516a227784cf2d04"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxNzc0Ng==", "bodyText": "That's a good question. Perhaps we could default to all services under /internal/ and make it configurable?", "url": "https://github.com/line/armeria/pull/2502#discussion_r388317746", "createdAt": "2020-03-05T14:13:21Z", "author": {"login": "trustin"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java", "diffHunk": "@@ -61,6 +61,9 @@\n  *     mime-types: text/*, application/json\n  *     excluded-user-agents: some-user-agent, another-user-agent\n  *     min-response-size: 1KB\n+ *   security:\n+ *     enabled: true\n+ *     ports: 8080", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTY0OQ=="}, "originalCommit": {"oid": "86ebe6f6ea13a5bbc070a3bc516a227784cf2d04"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1NzgxMQ==", "bodyText": "I've configured the default port(8001) if armeria.security.enabled is true, and have it protect all services under /internal/ on other ports.", "url": "https://github.com/line/armeria/pull/2502#discussion_r426257811", "createdAt": "2020-05-17T12:50:03Z", "author": {"login": "heowc"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java", "diffHunk": "@@ -61,6 +61,9 @@\n  *     mime-types: text/*, application/json\n  *     excluded-user-agents: some-user-agent, another-user-agent\n  *     min-response-size: 1KB\n+ *   security:\n+ *     enabled: true\n+ *     ports: 8080", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTY0OQ=="}, "originalCommit": {"oid": "86ebe6f6ea13a5bbc070a3bc516a227784cf2d04"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1ODE3NQ==", "bodyText": "Question: I specified the default port, but when the user specified management.server.port I didn't remove the default port. Should I avoid specifying a default port?", "url": "https://github.com/line/armeria/pull/2502#discussion_r426258175", "createdAt": "2020-05-17T12:53:24Z", "author": {"login": "heowc"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java", "diffHunk": "@@ -61,6 +61,9 @@\n  *     mime-types: text/*, application/json\n  *     excluded-user-agents: some-user-agent, another-user-agent\n  *     min-response-size: 1KB\n+ *   security:\n+ *     enabled: true\n+ *     ports: 8080", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyOTY0OQ=="}, "originalCommit": {"oid": "86ebe6f6ea13a5bbc070a3bc516a227784cf2d04"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTQ1OTIwOnYy", "diffSide": "RIGHT", "path": "spring/boot-autoconfigure/build.gradle", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNToxNjozNlrOFvVXOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjo0NzoxOVrOFybYgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE3NzQwMA==", "bodyText": "I changed all test cases in boot-autoconfigure to JUnit5. The test ran twice, showing unintended failures in certain situations.", "url": "https://github.com/line/armeria/pull/2502#discussion_r385177400", "createdAt": "2020-02-27T15:16:36Z", "author": {"login": "heowc"}, "path": "spring/boot-autoconfigure/build.gradle", "diffHunk": "@@ -15,5 +15,7 @@ dependencies {\n     testImplementation project(':grpc')\n     testImplementation project(':thrift')\n     testImplementation 'org.springframework.boot:spring-boot-starter-actuator'\n-    testImplementation 'org.springframework.boot:spring-boot-starter-test'\n+    testImplementation ('org.springframework.boot:spring-boot-starter-test') {\n+        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29eb21893762db3f293d2642026a165d6f11492b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE5MzUzMA==", "bodyText": "And I wrote a test to apply security to a specific port. As a result, there seems to be a problem with running multiple tests. \ud83d\ude05\nDo you think it's right to write tests like this? Or do you have a good idea?", "url": "https://github.com/line/armeria/pull/2502#discussion_r385193530", "createdAt": "2020-02-27T15:41:32Z", "author": {"login": "heowc"}, "path": "spring/boot-autoconfigure/build.gradle", "diffHunk": "@@ -15,5 +15,7 @@ dependencies {\n     testImplementation project(':grpc')\n     testImplementation project(':thrift')\n     testImplementation 'org.springframework.boot:spring-boot-starter-actuator'\n-    testImplementation 'org.springframework.boot:spring-boot-starter-test'\n+    testImplementation ('org.springframework.boot:spring-boot-starter-test') {\n+        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE3NzQwMA=="}, "originalCommit": {"oid": "29eb21893762db3f293d2642026a165d6f11492b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxNjgxOQ==", "bodyText": "JUnit 5\n\nIIRC, Spring Boot 1 does not support JUnit 5 officially, so we should stay with JUnit 4.\n\na problem with running multiple tests\n\nI think we should never specify a certain port when testing. Can you just specify port 0 to use an ephemeral port?", "url": "https://github.com/line/armeria/pull/2502#discussion_r388316819", "createdAt": "2020-03-05T14:11:44Z", "author": {"login": "trustin"}, "path": "spring/boot-autoconfigure/build.gradle", "diffHunk": "@@ -15,5 +15,7 @@ dependencies {\n     testImplementation project(':grpc')\n     testImplementation project(':thrift')\n     testImplementation 'org.springframework.boot:spring-boot-starter-actuator'\n-    testImplementation 'org.springframework.boot:spring-boot-starter-test'\n+    testImplementation ('org.springframework.boot:spring-boot-starter-test') {\n+        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE3NzQwMA=="}, "originalCommit": {"oid": "29eb21893762db3f293d2642026a165d6f11492b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQyMTc2MA==", "bodyText": "IIRC, Spring Boot 1 does not support JUnit 5 officially, so we should stay with JUnit 4.\n\nOops ... I couldn't confirm this.\n\nI think we should never specify a certain port when testing. Can you just specify port 0 to use an ephemeral port?\n\nI'll check. Thank you. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2502#discussion_r388421760", "createdAt": "2020-03-05T16:47:19Z", "author": {"login": "heowc"}, "path": "spring/boot-autoconfigure/build.gradle", "diffHunk": "@@ -15,5 +15,7 @@ dependencies {\n     testImplementation project(':grpc')\n     testImplementation project(':thrift')\n     testImplementation 'org.springframework.boot:spring-boot-starter-actuator'\n-    testImplementation 'org.springframework.boot:spring-boot-starter-test'\n+    testImplementation ('org.springframework.boot:spring-boot-starter-test') {\n+        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE3NzQwMA=="}, "originalCommit": {"oid": "29eb21893762db3f293d2642026a165d6f11492b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTk0OTI1OnYy", "diffSide": "RIGHT", "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSecurityAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMzoyODozOVrOGZJkZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMzo0NzozMFrOGZJzHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyNDM1OQ==", "bodyText": "I fetched Spring Actuator related fields to solve what I mentioned. I am not sure if this is a good way. what do you think?", "url": "https://github.com/line/armeria/pull/2502#discussion_r429024359", "createdAt": "2020-05-22T03:28:39Z", "author": {"login": "heowc"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSecurityAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configurePorts;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.core.env.PropertySource;\n+import org.springframework.util.SocketUtils;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.server.DecoratingServiceBindingBuilder;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.spring.ArmeriaSettings.Port;\n+\n+/**\n+ * Spring Boot {@link Configuration} that provides Armeria integration.\n+ */\n+@Configuration\n+@EnableConfigurationProperties(ArmeriaSettings.class)\n+public class ArmeriaSecurityAutoConfiguration {\n+\n+    private static final Port DEFAULT_SECURITY_PORT = new Port().setPort(8001)\n+                                                                .setProtocol(SessionProtocol.HTTP);\n+\n+    @Bean\n+    ArmeriaServerConfigurator secureArmeriaServerConfig(ArmeriaSettings settings,\n+                                                        ConfigurableEnvironment environment,\n+                                                        @Value(\"${management.server.port:#{null}}\")\n+                                                        Integer actuatorPort,\n+                                                        @Value(\"${management.endpoints.web.base-path:#{null}}\")\n+                                                        String actuatorBasePath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37c34a20111065f1debb4827a82c6c4392738495"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyODEyNw==", "bodyText": "I think it's OK. If there's any issue with this, we can fix it later.", "url": "https://github.com/line/armeria/pull/2502#discussion_r429028127", "createdAt": "2020-05-22T03:47:30Z", "author": {"login": "trustin"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSecurityAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configurePorts;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.core.env.PropertySource;\n+import org.springframework.util.SocketUtils;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.server.DecoratingServiceBindingBuilder;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.spring.ArmeriaSettings.Port;\n+\n+/**\n+ * Spring Boot {@link Configuration} that provides Armeria integration.\n+ */\n+@Configuration\n+@EnableConfigurationProperties(ArmeriaSettings.class)\n+public class ArmeriaSecurityAutoConfiguration {\n+\n+    private static final Port DEFAULT_SECURITY_PORT = new Port().setPort(8001)\n+                                                                .setProtocol(SessionProtocol.HTTP);\n+\n+    @Bean\n+    ArmeriaServerConfigurator secureArmeriaServerConfig(ArmeriaSettings settings,\n+                                                        ConfigurableEnvironment environment,\n+                                                        @Value(\"${management.server.port:#{null}}\")\n+                                                        Integer actuatorPort,\n+                                                        @Value(\"${management.endpoints.web.base-path:#{null}}\")\n+                                                        String actuatorBasePath) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyNDM1OQ=="}, "originalCommit": {"oid": "37c34a20111065f1debb4827a82c6c4392738495"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTk3OTI3OnYy", "diffSide": "RIGHT", "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMzo1MTo1MFrOGZJ2ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzo0ODoyMVrOGdBtzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyODk4Nw==", "bodyText": "Question: Should we expose this option or always enable it when a different management port was specified?", "url": "https://github.com/line/armeria/pull/2502#discussion_r429028987", "createdAt": "2020-05-22T03:51:50Z", "author": {"login": "trustin"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java", "diffHunk": "@@ -61,6 +61,8 @@\n  *     mime-types: text/*, application/json\n  *     excluded-user-agents: some-user-agent, another-user-agent\n  *     min-response-size: 1KB\n+ *   security:\n+ *     enabled: true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37c34a20111065f1debb4827a82c6c4392738495"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0Nzg0OQ==", "bodyText": "I have modified some code. I think I can divide it into the following cases.\n\narmeria.security.enabled = false, -> nothing (not secure)\narmeria.security.enabled = true, -> port = 8001 (secure)\narmeria.security.enabled = false, management.server.port = 1111 -> port = 1111 (not secure)\narmeria.security.enabled = true, management.server.port = 1111 -> port = 1111 (secure)", "url": "https://github.com/line/armeria/pull/2502#discussion_r429047849", "createdAt": "2020-05-22T05:21:48Z", "author": {"login": "heowc"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java", "diffHunk": "@@ -61,6 +61,8 @@\n  *     mime-types: text/*, application/json\n  *     excluded-user-agents: some-user-agent, another-user-agent\n  *     min-response-size: 1KB\n+ *   security:\n+ *     enabled: true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyODk4Nw=="}, "originalCommit": {"oid": "37c34a20111065f1debb4827a82c6c4392738495"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4OTk5OA==", "bodyText": "I removed it.", "url": "https://github.com/line/armeria/pull/2502#discussion_r433089998", "createdAt": "2020-06-01T07:48:21Z", "author": {"login": "heowc"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java", "diffHunk": "@@ -61,6 +61,8 @@\n  *     mime-types: text/*, application/json\n  *     excluded-user-agents: some-user-agent, another-user-agent\n  *     min-response-size: 1KB\n+ *   security:\n+ *     enabled: true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyODk4Nw=="}, "originalCommit": {"oid": "37c34a20111065f1debb4827a82c6c4392738495"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTk3OTkzOnYy", "diffSide": "RIGHT", "path": "spring/boot-autoconfigure/src/test/resources/config/application-secureTest.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMzo1MjoxOFrOGZJ25A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNToyMTo1NFrOGZLAQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyOTA5Mg==", "bodyText": "Missing newline", "url": "https://github.com/line/armeria/pull/2502#discussion_r429029092", "createdAt": "2020-05-22T03:52:18Z", "author": {"login": "trustin"}, "path": "spring/boot-autoconfigure/src/test/resources/config/application-secureTest.yml", "diffHunk": "@@ -0,0 +1,5 @@\n+armeria:\n+  ports:\n+    - port: 0\n+  security:\n+    enabled: true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37c34a20111065f1debb4827a82c6c4392738495"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0Nzg3Mg==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2502#discussion_r429047872", "createdAt": "2020-05-22T05:21:54Z", "author": {"login": "heowc"}, "path": "spring/boot-autoconfigure/src/test/resources/config/application-secureTest.yml", "diffHunk": "@@ -0,0 +1,5 @@\n+armeria:\n+  ports:\n+    - port: 0\n+  security:\n+    enabled: true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyOTA5Mg=="}, "originalCommit": {"oid": "37c34a20111065f1debb4827a82c6c4392738495"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjI0MTc4OnYy", "diffSide": "RIGHT", "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSecurityAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjo0MjoxN1rOGZMWKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzo1MDoxOVrOGdBwzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2OTg2NQ==", "bodyText": "Question: Where is the 8001 from? Spring uses it?", "url": "https://github.com/line/armeria/pull/2502#discussion_r429069865", "createdAt": "2020-05-22T06:42:17Z", "author": {"login": "minwoox"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSecurityAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configurePorts;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.core.env.PropertySource;\n+import org.springframework.util.SocketUtils;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.server.DecoratingServiceBindingBuilder;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.spring.ArmeriaSettings.Port;\n+\n+/**\n+ * Spring Boot {@link Configuration} that provides Armeria integration.\n+ */\n+@Configuration\n+@EnableConfigurationProperties(ArmeriaSettings.class)\n+public class ArmeriaSecurityAutoConfiguration {\n+\n+    private static final Port DEFAULT_SECURITY_PORT = new Port().setPort(8001)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab928676f4ca45d2e96b94fb4ed01fbfa6da6006"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3MjQ2OA==", "bodyText": "I think we shouldn't use the default port.\nIf a user forgets to disable the security, an attacker might use the default port to get the information of the server. What do you think?", "url": "https://github.com/line/armeria/pull/2502#discussion_r429072468", "createdAt": "2020-05-22T06:50:03Z", "author": {"login": "minwoox"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSecurityAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configurePorts;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.core.env.PropertySource;\n+import org.springframework.util.SocketUtils;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.server.DecoratingServiceBindingBuilder;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.spring.ArmeriaSettings.Port;\n+\n+/**\n+ * Spring Boot {@link Configuration} that provides Armeria integration.\n+ */\n+@Configuration\n+@EnableConfigurationProperties(ArmeriaSettings.class)\n+public class ArmeriaSecurityAutoConfiguration {\n+\n+    private static final Port DEFAULT_SECURITY_PORT = new Port().setPort(8001)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2OTg2NQ=="}, "originalCommit": {"oid": "ab928676f4ca45d2e96b94fb4ed01fbfa6da6006"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyNTE1Ng==", "bodyText": "I agree. I understood here to mean adding a default port.", "url": "https://github.com/line/armeria/pull/2502#discussion_r429225156", "createdAt": "2020-05-22T12:46:46Z", "author": {"login": "heowc"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSecurityAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configurePorts;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.core.env.PropertySource;\n+import org.springframework.util.SocketUtils;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.server.DecoratingServiceBindingBuilder;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.spring.ArmeriaSettings.Port;\n+\n+/**\n+ * Spring Boot {@link Configuration} that provides Armeria integration.\n+ */\n+@Configuration\n+@EnableConfigurationProperties(ArmeriaSettings.class)\n+public class ArmeriaSecurityAutoConfiguration {\n+\n+    private static final Port DEFAULT_SECURITY_PORT = new Port().setPort(8001)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2OTg2NQ=="}, "originalCommit": {"oid": "ab928676f4ca45d2e96b94fb4ed01fbfa6da6006"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyNjQ3MA==", "bodyText": "If so, should this feature be enabled only by adding Spring Actuator?", "url": "https://github.com/line/armeria/pull/2502#discussion_r429226470", "createdAt": "2020-05-22T12:49:23Z", "author": {"login": "heowc"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSecurityAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configurePorts;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.core.env.PropertySource;\n+import org.springframework.util.SocketUtils;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.server.DecoratingServiceBindingBuilder;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.spring.ArmeriaSettings.Port;\n+\n+/**\n+ * Spring Boot {@link Configuration} that provides Armeria integration.\n+ */\n+@Configuration\n+@EnableConfigurationProperties(ArmeriaSettings.class)\n+public class ArmeriaSecurityAutoConfiguration {\n+\n+    private static final Port DEFAULT_SECURITY_PORT = new Port().setPort(8001)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2OTg2NQ=="}, "originalCommit": {"oid": "ab928676f4ca45d2e96b94fb4ed01fbfa6da6006"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA5MDc2Ng==", "bodyText": "I removed it. :)", "url": "https://github.com/line/armeria/pull/2502#discussion_r433090766", "createdAt": "2020-06-01T07:50:19Z", "author": {"login": "heowc"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSecurityAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configurePorts;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.core.env.PropertySource;\n+import org.springframework.util.SocketUtils;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.server.DecoratingServiceBindingBuilder;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.spring.ArmeriaSettings.Port;\n+\n+/**\n+ * Spring Boot {@link Configuration} that provides Armeria integration.\n+ */\n+@Configuration\n+@EnableConfigurationProperties(ArmeriaSettings.class)\n+public class ArmeriaSecurityAutoConfiguration {\n+\n+    private static final Port DEFAULT_SECURITY_PORT = new Port().setPort(8001)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2OTg2NQ=="}, "originalCommit": {"oid": "ab928676f4ca45d2e96b94fb4ed01fbfa6da6006"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzY4Mjc2OnYy", "diffSide": "RIGHT", "path": "spring/boot-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzozMTowM1rOGdBTJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzo1Mjo1NVrOGdB02A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4MzE3Mg==", "bodyText": "nit: Could just use int?", "url": "https://github.com/line/armeria/pull/2502#discussion_r433083172", "createdAt": "2020-06-01T07:31:03Z", "author": {"login": "trustin"}, "path": "spring/boot-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java", "diffHunk": "@@ -305,4 +288,52 @@ public void testOptions() {\n             assertThat(res.status()).isNotEqualTo(HttpStatus.METHOD_NOT_ALLOWED);\n         }\n     }\n+\n+    @Nested\n+    @SpringBootTest(classes = org.springframework.boot.test.context.TestConfiguration.class)\n+    @ActiveProfiles({ \"local\", \"secureTest\" })\n+    @DirtiesContext\n+    @EnableAutoConfiguration\n+    @ImportAutoConfiguration(ArmeriaSpringActuatorAutoConfiguration.class)\n+    @Timeout(10)\n+    class ArmeriaSpringActuatorAutoConfigurationSecureTest {\n+\n+        @SpringBootApplication\n+        class TestConfiguration {}\n+\n+        @LocalManagementPort\n+        private Integer actuatorPort;\n+        @Inject\n+        private Server server;\n+        @Inject\n+        private ArmeriaSettings settings;\n+\n+        @Test\n+        void normal() throws Exception {\n+            server.activePorts().values().stream()\n+                  .map(p -> p.localAddress().getPort())\n+                  .forEach(port -> {\n+                      final Integer statusCode = actuatorPort.equals(port) ? 200 : 404;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ce24215966f0a05b5fd5a5429ad6c2e952b6baf"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA5MTgwMA==", "bodyText": "Fixed cb9cf10", "url": "https://github.com/line/armeria/pull/2502#discussion_r433091800", "createdAt": "2020-06-01T07:52:55Z", "author": {"login": "heowc"}, "path": "spring/boot-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java", "diffHunk": "@@ -305,4 +288,52 @@ public void testOptions() {\n             assertThat(res.status()).isNotEqualTo(HttpStatus.METHOD_NOT_ALLOWED);\n         }\n     }\n+\n+    @Nested\n+    @SpringBootTest(classes = org.springframework.boot.test.context.TestConfiguration.class)\n+    @ActiveProfiles({ \"local\", \"secureTest\" })\n+    @DirtiesContext\n+    @EnableAutoConfiguration\n+    @ImportAutoConfiguration(ArmeriaSpringActuatorAutoConfiguration.class)\n+    @Timeout(10)\n+    class ArmeriaSpringActuatorAutoConfigurationSecureTest {\n+\n+        @SpringBootApplication\n+        class TestConfiguration {}\n+\n+        @LocalManagementPort\n+        private Integer actuatorPort;\n+        @Inject\n+        private Server server;\n+        @Inject\n+        private ArmeriaSettings settings;\n+\n+        @Test\n+        void normal() throws Exception {\n+            server.activePorts().values().stream()\n+                  .map(p -> p.localAddress().getPort())\n+                  .forEach(port -> {\n+                      final Integer statusCode = actuatorPort.equals(port) ? 200 : 404;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4MzE3Mg=="}, "originalCommit": {"oid": "2ce24215966f0a05b5fd5a5429ad6c2e952b6baf"}, "originalPosition": 245}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzY4MzIyOnYy", "diffSide": "RIGHT", "path": "spring/boot-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzozMToxOFrOGdBTcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzo1MzowMVrOGdB0_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4MzI1MQ==", "bodyText": "Ditto - int should work?", "url": "https://github.com/line/armeria/pull/2502#discussion_r433083251", "createdAt": "2020-06-01T07:31:18Z", "author": {"login": "trustin"}, "path": "spring/boot-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java", "diffHunk": "@@ -305,4 +288,52 @@ public void testOptions() {\n             assertThat(res.status()).isNotEqualTo(HttpStatus.METHOD_NOT_ALLOWED);\n         }\n     }\n+\n+    @Nested\n+    @SpringBootTest(classes = org.springframework.boot.test.context.TestConfiguration.class)\n+    @ActiveProfiles({ \"local\", \"secureTest\" })\n+    @DirtiesContext\n+    @EnableAutoConfiguration\n+    @ImportAutoConfiguration(ArmeriaSpringActuatorAutoConfiguration.class)\n+    @Timeout(10)\n+    class ArmeriaSpringActuatorAutoConfigurationSecureTest {\n+\n+        @SpringBootApplication\n+        class TestConfiguration {}\n+\n+        @LocalManagementPort\n+        private Integer actuatorPort;\n+        @Inject\n+        private Server server;\n+        @Inject\n+        private ArmeriaSettings settings;\n+\n+        @Test\n+        void normal() throws Exception {\n+            server.activePorts().values().stream()\n+                  .map(p -> p.localAddress().getPort())\n+                  .forEach(port -> {\n+                      final Integer statusCode = actuatorPort.equals(port) ? 200 : 404;\n+                      assertStatus(port, \"/actuator\", statusCode);\n+                      assertStatus(port, \"/actuator/health\", statusCode);\n+                      assertStatus(port, \"/actuator/loggers/\" + TEST_LOGGER_NAME, statusCode);\n+                      assertStatus(port, \"/actuator/prometheus\", statusCode);\n+                      assertStatus(port, settings.getDocsPath(), statusCode);\n+                      assertStatus(port, settings.getHealthCheckPath(), statusCode);\n+                      assertStatus(port, settings.getMetricsPath(), statusCode);\n+                  });\n+        }\n+    }\n+\n+    private static void assertStatus(Integer port, String url, Integer statusCode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ce24215966f0a05b5fd5a5429ad6c2e952b6baf"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA5MTgzOA==", "bodyText": "Fixed cb9cf10", "url": "https://github.com/line/armeria/pull/2502#discussion_r433091838", "createdAt": "2020-06-01T07:53:01Z", "author": {"login": "heowc"}, "path": "spring/boot-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java", "diffHunk": "@@ -305,4 +288,52 @@ public void testOptions() {\n             assertThat(res.status()).isNotEqualTo(HttpStatus.METHOD_NOT_ALLOWED);\n         }\n     }\n+\n+    @Nested\n+    @SpringBootTest(classes = org.springframework.boot.test.context.TestConfiguration.class)\n+    @ActiveProfiles({ \"local\", \"secureTest\" })\n+    @DirtiesContext\n+    @EnableAutoConfiguration\n+    @ImportAutoConfiguration(ArmeriaSpringActuatorAutoConfiguration.class)\n+    @Timeout(10)\n+    class ArmeriaSpringActuatorAutoConfigurationSecureTest {\n+\n+        @SpringBootApplication\n+        class TestConfiguration {}\n+\n+        @LocalManagementPort\n+        private Integer actuatorPort;\n+        @Inject\n+        private Server server;\n+        @Inject\n+        private ArmeriaSettings settings;\n+\n+        @Test\n+        void normal() throws Exception {\n+            server.activePorts().values().stream()\n+                  .map(p -> p.localAddress().getPort())\n+                  .forEach(port -> {\n+                      final Integer statusCode = actuatorPort.equals(port) ? 200 : 404;\n+                      assertStatus(port, \"/actuator\", statusCode);\n+                      assertStatus(port, \"/actuator/health\", statusCode);\n+                      assertStatus(port, \"/actuator/loggers/\" + TEST_LOGGER_NAME, statusCode);\n+                      assertStatus(port, \"/actuator/prometheus\", statusCode);\n+                      assertStatus(port, settings.getDocsPath(), statusCode);\n+                      assertStatus(port, settings.getHealthCheckPath(), statusCode);\n+                      assertStatus(port, settings.getMetricsPath(), statusCode);\n+                  });\n+        }\n+    }\n+\n+    private static void assertStatus(Integer port, String url, Integer statusCode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4MzI1MQ=="}, "originalCommit": {"oid": "2ce24215966f0a05b5fd5a5429ad6c2e952b6baf"}, "originalPosition": 257}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDg2NzA4OnYy", "diffSide": "RIGHT", "path": "spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMjozNzo0M1rOGdgL4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzoxOToxM1rOGdxLmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU4OTIxOA==", "bodyText": "What happens if the management port number is not 0?", "url": "https://github.com/line/armeria/pull/2502#discussion_r433589218", "createdAt": "2020-06-02T02:37:43Z", "author": {"login": "minwoox"}, "path": "spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java", "diffHunk": "@@ -196,6 +215,70 @@ ArmeriaServerConfigurator actuatorServerConfigurator(\n         };\n     }\n \n+    @Bean\n+    @ConditionalOnProperty(\"management.server.port\")\n+    ArmeriaServerConfigurator secureActuatorServerConfigurator(WebEndpointProperties properties,\n+                                                               ManagementServerProperties serverProperties,\n+                                                               ConfigurableEnvironment environment,\n+                                                               ArmeriaSettings armeriaSettings) {\n+        return sb -> {\n+            final Port port = obtainManagementServerPort(serverProperties.getPort());\n+            if (port != null) {\n+                configurePorts(sb, ImmutableList.of(port));\n+                addLocalManagementPortPropertyAlias(environment, port);\n+                configureSecureDecorator(sb, port, properties.getBasePath(), armeriaSettings);\n+            }\n+        };\n+    }\n+\n+    @Nullable\n+    private static Port obtainManagementServerPort(@Nullable Integer port) {\n+        return Optional.ofNullable(port)\n+                       .filter(it -> it.equals(0))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb9cf10ff7900e0b399e285f378a1ecd02944cfb"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg2NzY3NA==", "bodyText": "Oops... I fixed this. \ud83d\ude28", "url": "https://github.com/line/armeria/pull/2502#discussion_r433867674", "createdAt": "2020-06-02T13:19:13Z", "author": {"login": "heowc"}, "path": "spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java", "diffHunk": "@@ -196,6 +215,70 @@ ArmeriaServerConfigurator actuatorServerConfigurator(\n         };\n     }\n \n+    @Bean\n+    @ConditionalOnProperty(\"management.server.port\")\n+    ArmeriaServerConfigurator secureActuatorServerConfigurator(WebEndpointProperties properties,\n+                                                               ManagementServerProperties serverProperties,\n+                                                               ConfigurableEnvironment environment,\n+                                                               ArmeriaSettings armeriaSettings) {\n+        return sb -> {\n+            final Port port = obtainManagementServerPort(serverProperties.getPort());\n+            if (port != null) {\n+                configurePorts(sb, ImmutableList.of(port));\n+                addLocalManagementPortPropertyAlias(environment, port);\n+                configureSecureDecorator(sb, port, properties.getBasePath(), armeriaSettings);\n+            }\n+        };\n+    }\n+\n+    @Nullable\n+    private static Port obtainManagementServerPort(@Nullable Integer port) {\n+        return Optional.ofNullable(port)\n+                       .filter(it -> it.equals(0))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU4OTIxOA=="}, "originalCommit": {"oid": "cb9cf10ff7900e0b399e285f378a1ecd02944cfb"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjE4MDY3OnYy", "diffSide": "RIGHT", "path": "spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTo0NjoyM1rOGeUYZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoxODoxNVrOGeeD6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ0NDM4OA==", "bodyText": "Question: Don't we need to support HTTPS? The upstream seems to support TLS/SSL configuration.\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-management-specific-ssl\nIf that is worthy to handle, I think you can do it in the following PR. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2502#discussion_r434444388", "createdAt": "2020-06-03T09:46:23Z", "author": {"login": "ikhoon"}, "path": "spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java", "diffHunk": "@@ -196,6 +215,67 @@ ArmeriaServerConfigurator actuatorServerConfigurator(\n         };\n     }\n \n+    @Bean\n+    @ConditionalOnProperty(\"management.server.port\")\n+    ArmeriaServerConfigurator secureActuatorServerConfigurator(WebEndpointProperties properties,\n+                                                               ManagementServerProperties serverProperties,\n+                                                               ConfigurableEnvironment environment,\n+                                                               ArmeriaSettings armeriaSettings) {\n+        return sb -> {\n+            final Port port = obtainManagementServerPort(serverProperties.getPort());\n+            configurePorts(sb, ImmutableList.of(port));\n+            addLocalManagementPortPropertyAlias(environment, port);\n+            configureSecureDecorator(sb, port, properties.getBasePath(), armeriaSettings);\n+        };\n+    }\n+\n+    private static Port obtainManagementServerPort(Integer port) {\n+        int actualPort = requireNonNull(port, \"port\");\n+        if (actualPort == 0) {\n+            actualPort = SocketUtils.findAvailableTcpPort();\n+        }\n+        return new Port().setPort(actualPort).setProtocol(SessionProtocol.HTTP);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5cbb56447a04d81d89b8b74e194f7fc3b9e6048"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ1MTU4Mg==", "bodyText": "Can I set up another certificate on a specific port in Armeria? I think this is a bit vague.\nAnyway, I felt the need to deal with this. WDYT?", "url": "https://github.com/line/armeria/pull/2502#discussion_r434451582", "createdAt": "2020-06-03T09:58:53Z", "author": {"login": "heowc"}, "path": "spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java", "diffHunk": "@@ -196,6 +215,67 @@ ArmeriaServerConfigurator actuatorServerConfigurator(\n         };\n     }\n \n+    @Bean\n+    @ConditionalOnProperty(\"management.server.port\")\n+    ArmeriaServerConfigurator secureActuatorServerConfigurator(WebEndpointProperties properties,\n+                                                               ManagementServerProperties serverProperties,\n+                                                               ConfigurableEnvironment environment,\n+                                                               ArmeriaSettings armeriaSettings) {\n+        return sb -> {\n+            final Port port = obtainManagementServerPort(serverProperties.getPort());\n+            configurePorts(sb, ImmutableList.of(port));\n+            addLocalManagementPortPropertyAlias(environment, port);\n+            configureSecureDecorator(sb, port, properties.getBasePath(), armeriaSettings);\n+        };\n+    }\n+\n+    private static Port obtainManagementServerPort(Integer port) {\n+        int actualPort = requireNonNull(port, \"port\");\n+        if (actualPort == 0) {\n+            actualPort = SocketUtils.findAvailableTcpPort();\n+        }\n+        return new Port().setPort(actualPort).setProtocol(SessionProtocol.HTTP);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ0NDM4OA=="}, "originalCommit": {"oid": "d5cbb56447a04d81d89b8b74e194f7fc3b9e6048"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU1NTk5Mg==", "bodyText": "Can I set up another certificate on a specific port in Armeria? I think this is a bit vague.\n\nI thought that the actuator shares the Server's certification.\nWe cannot perfectly handle the feature, now. Please ignore this.\n\nAnyway, I felt the need to deal with this. WDYT?\n\nThat sounds good. \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/2502#discussion_r434555992", "createdAt": "2020-06-03T13:13:33Z", "author": {"login": "ikhoon"}, "path": "spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java", "diffHunk": "@@ -196,6 +215,67 @@ ArmeriaServerConfigurator actuatorServerConfigurator(\n         };\n     }\n \n+    @Bean\n+    @ConditionalOnProperty(\"management.server.port\")\n+    ArmeriaServerConfigurator secureActuatorServerConfigurator(WebEndpointProperties properties,\n+                                                               ManagementServerProperties serverProperties,\n+                                                               ConfigurableEnvironment environment,\n+                                                               ArmeriaSettings armeriaSettings) {\n+        return sb -> {\n+            final Port port = obtainManagementServerPort(serverProperties.getPort());\n+            configurePorts(sb, ImmutableList.of(port));\n+            addLocalManagementPortPropertyAlias(environment, port);\n+            configureSecureDecorator(sb, port, properties.getBasePath(), armeriaSettings);\n+        };\n+    }\n+\n+    private static Port obtainManagementServerPort(Integer port) {\n+        int actualPort = requireNonNull(port, \"port\");\n+        if (actualPort == 0) {\n+            actualPort = SocketUtils.findAvailableTcpPort();\n+        }\n+        return new Port().setPort(actualPort).setProtocol(SessionProtocol.HTTP);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ0NDM4OA=="}, "originalCommit": {"oid": "d5cbb56447a04d81d89b8b74e194f7fc3b9e6048"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwMjk4NQ==", "bodyText": "Thanks :)", "url": "https://github.com/line/armeria/pull/2502#discussion_r434602985", "createdAt": "2020-06-03T14:18:15Z", "author": {"login": "heowc"}, "path": "spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java", "diffHunk": "@@ -196,6 +215,67 @@ ArmeriaServerConfigurator actuatorServerConfigurator(\n         };\n     }\n \n+    @Bean\n+    @ConditionalOnProperty(\"management.server.port\")\n+    ArmeriaServerConfigurator secureActuatorServerConfigurator(WebEndpointProperties properties,\n+                                                               ManagementServerProperties serverProperties,\n+                                                               ConfigurableEnvironment environment,\n+                                                               ArmeriaSettings armeriaSettings) {\n+        return sb -> {\n+            final Port port = obtainManagementServerPort(serverProperties.getPort());\n+            configurePorts(sb, ImmutableList.of(port));\n+            addLocalManagementPortPropertyAlias(environment, port);\n+            configureSecureDecorator(sb, port, properties.getBasePath(), armeriaSettings);\n+        };\n+    }\n+\n+    private static Port obtainManagementServerPort(Integer port) {\n+        int actualPort = requireNonNull(port, \"port\");\n+        if (actualPort == 0) {\n+            actualPort = SocketUtils.findAvailableTcpPort();\n+        }\n+        return new Port().setPort(actualPort).setProtocol(SessionProtocol.HTTP);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ0NDM4OA=="}, "originalCommit": {"oid": "d5cbb56447a04d81d89b8b74e194f7fc3b9e6048"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3025, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}