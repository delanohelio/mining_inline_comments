{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3OTE4Mjkx", "number": 3220, "title": "Fix invalid return types of overridden methods in builder classes", "bodyText": "Motivation:\nThe intended object cannot be created because the returned type is incorrect.\nModification:\n\nFrom ServiceConfigBuilder\n\nServiceConfigSetters  -> ServiceConfigBuilder\n\n\nFrom VirtualHostAnnotatedServiceBindingBuilder\n\nServiceConfigSetters -> VirtualHostAnnotatedServiceBindingBuilder\n\n\n\nResult:\nYou can create the intended object.", "createdAt": "2020-12-12T08:40:46Z", "url": "https://github.com/line/armeria/pull/3220", "merged": true, "mergeCommit": {"oid": "c8abe56bff8a53505cf2911ddfa2c2d9d9b8f72c"}, "closed": true, "closedAt": "2021-01-05T08:37:34Z", "author": {"login": "heowc"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdlYT2PAH2gAyNTM3OTE4MjkxOjFjZmYyNWM5NjExODc0NzVhNjc0MmI0MTgxYTg0MzI1NDBhNjE3MmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdsseDSgFqTU2MDc0ODcwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1cff25c961187475a6742b4181a8432540a6172c", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/1cff25c961187475a6742b4181a8432540a6172c", "committedDate": "2020-12-12T08:31:50Z", "message": "Fix type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5688e8b3cf41f5d49785daf90a5990def924d9f", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/c5688e8b3cf41f5d49785daf90a5990def924d9f", "committedDate": "2020-12-14T13:03:46Z", "message": "Add `MethodChainingTest`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMzQ1NzY0", "url": "https://github.com/line/armeria/pull/3220#pullrequestreview-551345764", "createdAt": "2020-12-14T13:05:54Z", "commit": {"oid": "c5688e8b3cf41f5d49785daf90a5990def924d9f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMzowNTo1NFrOIFPgCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMzoxMDo1OFrOIFPs0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM2Nzc1Mw==", "bodyText": "I am not sure if this is the right way \ud83d\ude05\nThese classes should not be changed like the class I raised as an issue.", "url": "https://github.com/line/armeria/pull/3220#discussion_r542367753", "createdAt": "2020-12-14T13:05:54Z", "author": {"login": "heowc"}, "path": "core/src/test/java/com/linecorp/armeria/MethodChainingTest.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria;\n+\n+import com.linecorp.armeria.internal.testing.AbstractMethodChainingTest;\n+\n+class MethodChainingTest extends AbstractMethodChainingTest {\n+\n+    MethodChainingTest() {\n+        super(\"com.linecorp.armeria.common.DefaultQueryParamsBuilder\",\n+              \"com.linecorp.armeria.common.DefaultRequestHeadersBuilder\",\n+              \"com.linecorp.armeria.common.DefaultHttpHeadersBuilder\",\n+              \"com.linecorp.armeria.common.DefaultResponseHeadersBuilder\",\n+              \"com.linecorp.armeria.client.ClientBuilder\",\n+              \"com.linecorp.armeria.server.file.HttpFileBuilder$FileSystemHttpFileBuilder\",\n+              \"com.linecorp.armeria.server.file.HttpFileBuilder$ClassPathHttpFileBuilder\",\n+              \"com.linecorp.armeria.server.file.HttpFileBuilder$NonExistentHttpFileBuilder\",\n+              \"com.linecorp.armeria.server.file.HttpFileBuilder$HttpDataFileBuilder\",\n+              \"com.linecorp.armeria.server.DomainMappingBuilder\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5688e8b3cf41f5d49785daf90a5990def924d9f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM3MTAyNQ==", "bodyText": "Exclude classes written from test code.\nExclude classes that are not suffixed with Builder.\nExclude classes to be ignored.", "url": "https://github.com/line/armeria/pull/3220#discussion_r542371025", "createdAt": "2020-12-14T13:10:58Z", "author": {"login": "heowc"}, "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/AbstractMethodChainingTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.testing;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reflections.ReflectionUtils;\n+import org.reflections.Reflections;\n+import org.reflections.scanners.SubTypesScanner;\n+import org.reflections.util.ClasspathHelper;\n+import org.reflections.util.ConfigurationBuilder;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+public abstract class AbstractMethodChainingTest {\n+\n+    private final List<String> ignoredClasses;\n+\n+    protected AbstractMethodChainingTest(String... ignoredClasses) {\n+        this.ignoredClasses = ImmutableList.copyOf(ignoredClasses);\n+    }\n+\n+    @Test\n+    void methodChaining() {\n+        final String packageName = getClass().getPackage().getName();\n+        findAllClasses(packageName).stream()\n+                                   .map(ReflectionUtils::forName)\n+                                   .filter(this::filterClass)\n+                                   .forEach(clazz -> {\n+                                       final List<Method> methods = getAllMethods(clazz);\n+                                       for (Method m : methods) {\n+                                           try {\n+                                               final Method overriddenMethod =\n+                                                       clazz.getDeclaredMethod(m.getName(),\n+                                                                               m.getParameterTypes());\n+                                               assertThat(overriddenMethod.getReturnType()).isSameAs(clazz);\n+                                           } catch (NoSuchMethodException e) {\n+                                               // ignored\n+                                           }\n+                                       }\n+                                   });\n+    }\n+\n+    private static Collection<String> findAllClasses(String packageName) {\n+        final Reflections reflections = new Reflections(\n+                new ConfigurationBuilder()\n+                        .setUrls(ClasspathHelper.forPackage(packageName))\n+                        .setScanners(new SubTypesScanner(false))\n+        );\n+        return reflections.getStore().get(\"SubTypesScanner\").values();\n+    }\n+\n+    private boolean filterClass(Class<?> clazz) {\n+        return declaredInTestClass(clazz) &&\n+               clazz.getName().endsWith(\"Builder\") &&\n+               !ignoredClasses.contains(clazz.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5688e8b3cf41f5d49785daf90a5990def924d9f"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13f929a346fd44c81b659721b6f07513c3b4b3c9", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/13f929a346fd44c81b659721b6f07513c3b4b3c9", "committedDate": "2020-12-15T10:08:48Z", "message": "Add condition if parent class has build method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dde00ce4e980217af2866de22fec04df1f4d8fe", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/4dde00ce4e980217af2866de22fec04df1f4d8fe", "committedDate": "2020-12-15T13:59:23Z", "message": "Refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83086b9bbccdde8742fb6120a59e539711b5c028", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/83086b9bbccdde8742fb6120a59e539711b5c028", "committedDate": "2020-12-16T02:07:51Z", "message": "Add javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDI0MDgz", "url": "https://github.com/line/armeria/pull/3220#pullrequestreview-553424083", "createdAt": "2020-12-16T07:41:39Z", "commit": {"oid": "83086b9bbccdde8742fb6120a59e539711b5c028"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo0MTozOVrOIG32cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo0OToyN1rOIG4Fsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA3NzQyNA==", "bodyText": "We don't need to call this method because we always check if the name ends with \"Builder\"?\n(the method check if the name of the class ends with \"Test\" which is exclusive)", "url": "https://github.com/line/armeria/pull/3220#discussion_r544077424", "createdAt": "2020-12-16T07:41:39Z", "author": {"login": "minwoox"}, "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/AbstractMethodChainingTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.testing;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reflections.ReflectionUtils;\n+import org.reflections.Reflections;\n+import org.reflections.adapters.JavaReflectionAdapter;\n+import org.reflections.scanners.SubTypesScanner;\n+import org.reflections.util.ClasspathHelper;\n+import org.reflections.util.ConfigurationBuilder;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Makes sure most builder overrides all overridden methods with the correct return type.\n+ */\n+public abstract class AbstractMethodChainingTest {\n+\n+    @Test\n+    void methodChaining() {\n+        final String packageName = getClass().getPackage().getName();\n+        findAllClasses(packageName).stream()\n+                                   .map(ReflectionUtils::forName)\n+                                   .filter(AbstractMethodChainingTest::filterClass)\n+                                   .forEach(clazz -> {\n+                                       final List<Method> methods = obtainMethods(clazz);\n+                                       for (Method m : methods) {\n+                                           try {\n+                                               final Method overriddenMethod =\n+                                                       clazz.getDeclaredMethod(m.getName(),\n+                                                                               m.getParameterTypes());\n+                                               assertThat(overriddenMethod.getReturnType()).isSameAs(clazz);\n+                                           } catch (NoSuchMethodException e) {\n+                                               // ignored\n+                                           }\n+                                       }\n+                                   });\n+    }\n+\n+    private static Collection<String> findAllClasses(String packageName) {\n+        final ConfigurationBuilder configuration = new ConfigurationBuilder()\n+                .setUrls(ClasspathHelper.forPackage(packageName))\n+                .setScanners(new SubTypesScanner())\n+                .setMetadataAdapter(new JavaReflectionAdapter());\n+        final Reflections reflections = new Reflections(configuration);\n+        return reflections.getStore().get(SubTypesScanner.class.getSimpleName()).values();\n+    }\n+\n+    private static boolean filterClass(Class<?> clazz) {\n+        return declaredInTestClass(clazz) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83086b9bbccdde8742fb6120a59e539711b5c028"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA3NzUyNg==", "bodyText": "getSimpleName()?", "url": "https://github.com/line/armeria/pull/3220#discussion_r544077526", "createdAt": "2020-12-16T07:41:48Z", "author": {"login": "minwoox"}, "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/AbstractMethodChainingTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.testing;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reflections.ReflectionUtils;\n+import org.reflections.Reflections;\n+import org.reflections.adapters.JavaReflectionAdapter;\n+import org.reflections.scanners.SubTypesScanner;\n+import org.reflections.util.ClasspathHelper;\n+import org.reflections.util.ConfigurationBuilder;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Makes sure most builder overrides all overridden methods with the correct return type.\n+ */\n+public abstract class AbstractMethodChainingTest {\n+\n+    @Test\n+    void methodChaining() {\n+        final String packageName = getClass().getPackage().getName();\n+        findAllClasses(packageName).stream()\n+                                   .map(ReflectionUtils::forName)\n+                                   .filter(AbstractMethodChainingTest::filterClass)\n+                                   .forEach(clazz -> {\n+                                       final List<Method> methods = obtainMethods(clazz);\n+                                       for (Method m : methods) {\n+                                           try {\n+                                               final Method overriddenMethod =\n+                                                       clazz.getDeclaredMethod(m.getName(),\n+                                                                               m.getParameterTypes());\n+                                               assertThat(overriddenMethod.getReturnType()).isSameAs(clazz);\n+                                           } catch (NoSuchMethodException e) {\n+                                               // ignored\n+                                           }\n+                                       }\n+                                   });\n+    }\n+\n+    private static Collection<String> findAllClasses(String packageName) {\n+        final ConfigurationBuilder configuration = new ConfigurationBuilder()\n+                .setUrls(ClasspathHelper.forPackage(packageName))\n+                .setScanners(new SubTypesScanner())\n+                .setMetadataAdapter(new JavaReflectionAdapter());\n+        final Reflections reflections = new Reflections(configuration);\n+        return reflections.getStore().get(SubTypesScanner.class.getSimpleName()).values();\n+    }\n+\n+    private static boolean filterClass(Class<?> clazz) {\n+        return declaredInTestClass(clazz) &&\n+               clazz.getName().endsWith(\"Builder\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83086b9bbccdde8742fb6120a59e539711b5c028"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4MTA0OA==", "bodyText": "How about adding\n.filterInputsBy(filePath -> filePath != null && filePath.endsWith(\".class\"))\nso this does not run on a different file? (e.g. pavicon.png)", "url": "https://github.com/line/armeria/pull/3220#discussion_r544081048", "createdAt": "2020-12-16T07:48:55Z", "author": {"login": "minwoox"}, "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/AbstractMethodChainingTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.testing;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reflections.ReflectionUtils;\n+import org.reflections.Reflections;\n+import org.reflections.adapters.JavaReflectionAdapter;\n+import org.reflections.scanners.SubTypesScanner;\n+import org.reflections.util.ClasspathHelper;\n+import org.reflections.util.ConfigurationBuilder;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Makes sure most builder overrides all overridden methods with the correct return type.\n+ */\n+public abstract class AbstractMethodChainingTest {\n+\n+    @Test\n+    void methodChaining() {\n+        final String packageName = getClass().getPackage().getName();\n+        findAllClasses(packageName).stream()\n+                                   .map(ReflectionUtils::forName)\n+                                   .filter(AbstractMethodChainingTest::filterClass)\n+                                   .forEach(clazz -> {\n+                                       final List<Method> methods = obtainMethods(clazz);\n+                                       for (Method m : methods) {\n+                                           try {\n+                                               final Method overriddenMethod =\n+                                                       clazz.getDeclaredMethod(m.getName(),\n+                                                                               m.getParameterTypes());\n+                                               assertThat(overriddenMethod.getReturnType()).isSameAs(clazz);\n+                                           } catch (NoSuchMethodException e) {\n+                                               // ignored\n+                                           }\n+                                       }\n+                                   });\n+    }\n+\n+    private static Collection<String> findAllClasses(String packageName) {\n+        final ConfigurationBuilder configuration = new ConfigurationBuilder()\n+                .setUrls(ClasspathHelper.forPackage(packageName))\n+                .setScanners(new SubTypesScanner())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83086b9bbccdde8742fb6120a59e539711b5c028"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4MTMzMQ==", "bodyText": "Shouldn't we put this class to all modules?", "url": "https://github.com/line/armeria/pull/3220#discussion_r544081331", "createdAt": "2020-12-16T07:49:27Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/MethodChainingTest.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria;\n+\n+import com.linecorp.armeria.internal.testing.AbstractMethodChainingTest;\n+\n+class MethodChainingTest extends AbstractMethodChainingTest {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83086b9bbccdde8742fb6120a59e539711b5c028"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f3d3f5489453e2777eec07968279730385f0ccf", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/6f3d3f5489453e2777eec07968279730385f0ccf", "committedDate": "2020-12-16T08:25:26Z", "message": "Address comments by @minwoox"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbfb44fc77681307b493e766cd99b0aa6d15d28b", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/fbfb44fc77681307b493e766cd99b0aa6d15d28b", "committedDate": "2020-12-16T09:06:39Z", "message": "add `MethodChainingTest` for each module"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0Mjk1OTk0", "url": "https://github.com/line/armeria/pull/3220#pullrequestreview-554295994", "createdAt": "2020-12-17T05:48:05Z", "commit": {"oid": "fbfb44fc77681307b493e766cd99b0aa6d15d28b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MzMzNzY2", "url": "https://github.com/line/armeria/pull/3220#pullrequestreview-555333766", "createdAt": "2020-12-18T09:34:48Z", "commit": {"oid": "fbfb44fc77681307b493e766cd99b0aa6d15d28b"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTozNDo0OFrOIIbl0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTo0MToyNFrOIIb0Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxMTU2OQ==", "bodyText": "OverridenBuilderMethodsRetureTypeTest?", "url": "https://github.com/line/armeria/pull/3220#discussion_r545711569", "createdAt": "2020-12-18T09:34:48Z", "author": {"login": "minwoox"}, "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/AbstractMethodChainingTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.testing;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reflections.ReflectionUtils;\n+import org.reflections.Reflections;\n+import org.reflections.adapters.JavaReflectionAdapter;\n+import org.reflections.scanners.SubTypesScanner;\n+import org.reflections.util.ClasspathHelper;\n+import org.reflections.util.ConfigurationBuilder;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Makes sure most builder overrides all overridden methods with the correct return type.\n+ */\n+public abstract class AbstractMethodChainingTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbfb44fc77681307b493e766cd99b0aa6d15d28b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNDA1Ng==", "bodyText": "Shouldn't we fail in this case? \ud83e\udd14", "url": "https://github.com/line/armeria/pull/3220#discussion_r545714056", "createdAt": "2020-12-18T09:39:14Z", "author": {"login": "minwoox"}, "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/AbstractMethodChainingTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.testing;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reflections.ReflectionUtils;\n+import org.reflections.Reflections;\n+import org.reflections.adapters.JavaReflectionAdapter;\n+import org.reflections.scanners.SubTypesScanner;\n+import org.reflections.util.ClasspathHelper;\n+import org.reflections.util.ConfigurationBuilder;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Makes sure most builder overrides all overridden methods with the correct return type.\n+ */\n+public abstract class AbstractMethodChainingTest {\n+\n+    @Test\n+    void methodChaining() {\n+        final String packageName = getClass().getPackage().getName();\n+        findAllClasses(packageName).stream()\n+                                   .map(ReflectionUtils::forName)\n+                                   .filter(clazz -> clazz.getSimpleName().endsWith(\"Builder\"))\n+                                   .forEach(clazz -> {\n+                                       final List<Method> methods = obtainMethods(clazz);\n+                                       for (Method m : methods) {\n+                                           try {\n+                                               final Method overriddenMethod =\n+                                                       clazz.getDeclaredMethod(m.getName(),\n+                                                                               m.getParameterTypes());\n+                                               assertThat(overriddenMethod.getReturnType()).isSameAs(clazz);\n+                                           } catch (NoSuchMethodException e) {\n+                                               // ignored", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbfb44fc77681307b493e766cd99b0aa6d15d28b"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNDM1OA==", "bodyText": "overriddenMethods?", "url": "https://github.com/line/armeria/pull/3220#discussion_r545714358", "createdAt": "2020-12-18T09:39:45Z", "author": {"login": "minwoox"}, "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/AbstractMethodChainingTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.testing;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reflections.ReflectionUtils;\n+import org.reflections.Reflections;\n+import org.reflections.adapters.JavaReflectionAdapter;\n+import org.reflections.scanners.SubTypesScanner;\n+import org.reflections.util.ClasspathHelper;\n+import org.reflections.util.ConfigurationBuilder;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Makes sure most builder overrides all overridden methods with the correct return type.\n+ */\n+public abstract class AbstractMethodChainingTest {\n+\n+    @Test\n+    void methodChaining() {\n+        final String packageName = getClass().getPackage().getName();\n+        findAllClasses(packageName).stream()\n+                                   .map(ReflectionUtils::forName)\n+                                   .filter(clazz -> clazz.getSimpleName().endsWith(\"Builder\"))\n+                                   .forEach(clazz -> {\n+                                       final List<Method> methods = obtainMethods(clazz);\n+                                       for (Method m : methods) {\n+                                           try {\n+                                               final Method overriddenMethod =\n+                                                       clazz.getDeclaredMethod(m.getName(),\n+                                                                               m.getParameterTypes());\n+                                               assertThat(overriddenMethod.getReturnType()).isSameAs(clazz);\n+                                           } catch (NoSuchMethodException e) {\n+                                               // ignored\n+                                           }\n+                                       }\n+                                   });\n+    }\n+\n+    private static Collection<String> findAllClasses(String packageName) {\n+        final ConfigurationBuilder configuration = new ConfigurationBuilder()\n+                .filterInputsBy(filePath -> filePath != null && filePath.endsWith(\".class\"))\n+                .setUrls(ClasspathHelper.forPackage(packageName))\n+                .setScanners(new SubTypesScanner())\n+                .setMetadataAdapter(new JavaReflectionAdapter());\n+        final Reflections reflections = new Reflections(configuration);\n+        return reflections.getStore().get(SubTypesScanner.class.getSimpleName()).values();\n+    }\n+\n+    private static List<Method> obtainMethods(Class<?> clazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbfb44fc77681307b493e766cd99b0aa6d15d28b"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNDY4MQ==", "bodyText": "Could you give an example of this?", "url": "https://github.com/line/armeria/pull/3220#discussion_r545714681", "createdAt": "2020-12-18T09:40:25Z", "author": {"login": "minwoox"}, "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/AbstractMethodChainingTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.testing;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reflections.ReflectionUtils;\n+import org.reflections.Reflections;\n+import org.reflections.adapters.JavaReflectionAdapter;\n+import org.reflections.scanners.SubTypesScanner;\n+import org.reflections.util.ClasspathHelper;\n+import org.reflections.util.ConfigurationBuilder;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Makes sure most builder overrides all overridden methods with the correct return type.\n+ */\n+public abstract class AbstractMethodChainingTest {\n+\n+    @Test\n+    void methodChaining() {\n+        final String packageName = getClass().getPackage().getName();\n+        findAllClasses(packageName).stream()\n+                                   .map(ReflectionUtils::forName)\n+                                   .filter(clazz -> clazz.getSimpleName().endsWith(\"Builder\"))\n+                                   .forEach(clazz -> {\n+                                       final List<Method> methods = obtainMethods(clazz);\n+                                       for (Method m : methods) {\n+                                           try {\n+                                               final Method overriddenMethod =\n+                                                       clazz.getDeclaredMethod(m.getName(),\n+                                                                               m.getParameterTypes());\n+                                               assertThat(overriddenMethod.getReturnType()).isSameAs(clazz);\n+                                           } catch (NoSuchMethodException e) {\n+                                               // ignored\n+                                           }\n+                                       }\n+                                   });\n+    }\n+\n+    private static Collection<String> findAllClasses(String packageName) {\n+        final ConfigurationBuilder configuration = new ConfigurationBuilder()\n+                .filterInputsBy(filePath -> filePath != null && filePath.endsWith(\".class\"))\n+                .setUrls(ClasspathHelper.forPackage(packageName))\n+                .setScanners(new SubTypesScanner())\n+                .setMetadataAdapter(new JavaReflectionAdapter());\n+        final Reflections reflections = new Reflections(configuration);\n+        return reflections.getStore().get(SubTypesScanner.class.getSimpleName()).values();\n+    }\n+\n+    private static List<Method> obtainMethods(Class<?> clazz) {\n+        final Set<Class<?>> allSuperTypes = ReflectionUtils.getAllSuperTypes(clazz, input -> input != clazz);\n+        final ImmutableList<Method> methods = allSuperTypes.stream()\n+                                                           .flatMap(sc -> Arrays.stream(sc.getMethods()))\n+                                                           .distinct()\n+                                                           .collect(toImmutableList());\n+        // In general, if parent classes have a build method, did not override the method with that type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbfb44fc77681307b493e766cd99b0aa6d15d28b"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNTI1OQ==", "bodyText": "Could just buildMethodExists and remove \"build\"?", "url": "https://github.com/line/armeria/pull/3220#discussion_r545715259", "createdAt": "2020-12-18T09:41:24Z", "author": {"login": "minwoox"}, "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/AbstractMethodChainingTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.testing;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reflections.ReflectionUtils;\n+import org.reflections.Reflections;\n+import org.reflections.adapters.JavaReflectionAdapter;\n+import org.reflections.scanners.SubTypesScanner;\n+import org.reflections.util.ClasspathHelper;\n+import org.reflections.util.ConfigurationBuilder;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Makes sure most builder overrides all overridden methods with the correct return type.\n+ */\n+public abstract class AbstractMethodChainingTest {\n+\n+    @Test\n+    void methodChaining() {\n+        final String packageName = getClass().getPackage().getName();\n+        findAllClasses(packageName).stream()\n+                                   .map(ReflectionUtils::forName)\n+                                   .filter(clazz -> clazz.getSimpleName().endsWith(\"Builder\"))\n+                                   .forEach(clazz -> {\n+                                       final List<Method> methods = obtainMethods(clazz);\n+                                       for (Method m : methods) {\n+                                           try {\n+                                               final Method overriddenMethod =\n+                                                       clazz.getDeclaredMethod(m.getName(),\n+                                                                               m.getParameterTypes());\n+                                               assertThat(overriddenMethod.getReturnType()).isSameAs(clazz);\n+                                           } catch (NoSuchMethodException e) {\n+                                               // ignored\n+                                           }\n+                                       }\n+                                   });\n+    }\n+\n+    private static Collection<String> findAllClasses(String packageName) {\n+        final ConfigurationBuilder configuration = new ConfigurationBuilder()\n+                .filterInputsBy(filePath -> filePath != null && filePath.endsWith(\".class\"))\n+                .setUrls(ClasspathHelper.forPackage(packageName))\n+                .setScanners(new SubTypesScanner())\n+                .setMetadataAdapter(new JavaReflectionAdapter());\n+        final Reflections reflections = new Reflections(configuration);\n+        return reflections.getStore().get(SubTypesScanner.class.getSimpleName()).values();\n+    }\n+\n+    private static List<Method> obtainMethods(Class<?> clazz) {\n+        final Set<Class<?>> allSuperTypes = ReflectionUtils.getAllSuperTypes(clazz, input -> input != clazz);\n+        final ImmutableList<Method> methods = allSuperTypes.stream()\n+                                                           .flatMap(sc -> Arrays.stream(sc.getMethods()))\n+                                                           .distinct()\n+                                                           .collect(toImmutableList());\n+        // In general, if parent classes have a build method, did not override the method with that type.\n+        if (existMethodName(methods, \"build\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbfb44fc77681307b493e766cd99b0aa6d15d28b"}, "originalPosition": 81}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23ca946f327b3b4f2cc99a3a02c6219d69110c40", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/23ca946f327b3b4f2cc99a3a02c6219d69110c40", "committedDate": "2020-12-19T03:13:16Z", "message": "Address comments by @minwoox"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fa51a5980401329b10d0938a9057077f545ae83", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/2fa51a5980401329b10d0938a9057077f545ae83", "committedDate": "2020-12-19T04:32:48Z", "message": "Merge branch 'master' into fix_type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ce42134ab7a0972ec4705707519f495d6a0dc58", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/5ce42134ab7a0972ec4705707519f495d6a0dc58", "committedDate": "2020-12-24T06:19:18Z", "message": "Address comments by @minwoox"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MzcwNzk0", "url": "https://github.com/line/armeria/pull/3220#pullrequestreview-558370794", "createdAt": "2020-12-24T06:36:53Z", "commit": {"oid": "5ce42134ab7a0972ec4705707519f495d6a0dc58"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4Mzg5NTYz", "url": "https://github.com/line/armeria/pull/3220#pullrequestreview-558389563", "createdAt": "2020-12-24T07:39:32Z", "commit": {"oid": "5ce42134ab7a0972ec4705707519f495d6a0dc58"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "834f24bb33b8380990711389791db39f47cc6468", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/834f24bb33b8380990711389791db39f47cc6468", "committedDate": "2020-12-24T08:15:54Z", "message": "Add module (`it/builders`)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e0624e35dc9270218de094ff329fcc8293a9a48", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/6e0624e35dc9270218de094ff329fcc8293a9a48", "committedDate": "2020-12-24T08:26:29Z", "message": "Fix `build.gradle`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4OTgzMzU5", "url": "https://github.com/line/armeria/pull/3220#pullrequestreview-558983359", "createdAt": "2020-12-28T03:20:43Z", "commit": {"oid": "6e0624e35dc9270218de094ff329fcc8293a9a48"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4OTg0MTYy", "url": "https://github.com/line/armeria/pull/3220#pullrequestreview-558984162", "createdAt": "2020-12-28T03:27:06Z", "commit": {"oid": "6e0624e35dc9270218de094ff329fcc8293a9a48"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwMzoyNzowNlrOILwpbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwMzoyNzowNlrOILwpbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIwMjI4NA==", "bodyText": "How about hardcoring this string instead of using the test's package? Then it allows the tests location to be decoupled from the test.", "url": "https://github.com/line/armeria/pull/3220#discussion_r549202284", "createdAt": "2020-12-28T03:27:06Z", "author": {"login": "anuraaga"}, "path": "it/builders/src/test/java/com/linecorp/armeria/OverriddenBuilderMethodsReturnTypeTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reflections.ReflectionUtils;\n+import org.reflections.Reflections;\n+import org.reflections.adapters.JavaReflectionAdapter;\n+import org.reflections.scanners.SubTypesScanner;\n+import org.reflections.util.ClasspathHelper;\n+import org.reflections.util.ConfigurationBuilder;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Makes sure most builder overrides all overridden methods with the correct return type.\n+ */\n+class OverriddenBuilderMethodsReturnTypeTest {\n+\n+    @Test\n+    void methodChaining() {\n+        final String packageName = getClass().getPackage().getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e0624e35dc9270218de094ff329fcc8293a9a48"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbfaf2f0b01161c9bc87e9f9dae6b54914dcdac4", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/bbfaf2f0b01161c9bc87e9f9dae6b54914dcdac4", "committedDate": "2020-12-28T03:35:11Z", "message": "Address comments by @anuraaga"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNTg3NDYz", "url": "https://github.com/line/armeria/pull/3220#pullrequestreview-560587463", "createdAt": "2021-01-01T13:32:09Z", "commit": {"oid": "bbfaf2f0b01161c9bc87e9f9dae6b54914dcdac4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNzQ4MjAz", "url": "https://github.com/line/armeria/pull/3220#pullrequestreview-560748203", "createdAt": "2021-01-04T01:55:06Z", "commit": {"oid": "bbfaf2f0b01161c9bc87e9f9dae6b54914dcdac4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNzQ4NzAz", "url": "https://github.com/line/armeria/pull/3220#pullrequestreview-560748703", "createdAt": "2021-01-04T01:58:33Z", "commit": {"oid": "bbfaf2f0b01161c9bc87e9f9dae6b54914dcdac4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4540, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}