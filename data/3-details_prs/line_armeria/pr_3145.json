{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNjIyNTUy", "number": 3145, "title": "Mapping retry config by context/request parameters", "bodyText": "This PR adds the ability to map retry config (total attempts, response timeout) to elements from the context and/or request.\nThis effectively means that the user can vary retry config by host, method, path, and/or any other element from the context/request.\nFeature request issue: #3128", "createdAt": "2020-10-29T23:16:40Z", "url": "https://github.com/line/armeria/pull/3145", "merged": true, "mergeCommit": {"oid": "6164ca0193177423fc920973e012a8b776e718df"}, "closed": true, "closedAt": "2020-11-19T07:08:58Z", "author": {"login": "haithamgabr"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXai0BgH2gAyNTEyNjIyNTUyOjUzNzk1MDU5N2JmZTYzZmJiYjhmNDdkMGM5NmI1YzUxYTI0NmU3Zjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddlF6VgH2gAyNTEyNjIyNTUyOjVjZGNkMzQ1MTc5ZGNmY2FiMzM0YjBmNzdjNTg0NmZkMmZjODY4MWI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "537950597bfe63fbbb8f47d0c96b5c51a246e7f8", "author": {"user": {"login": "haithamgabr", "name": "Haitham Gabr"}}, "url": "https://github.com/line/armeria/commit/537950597bfe63fbbb8f47d0c96b5c51a246e7f8", "committedDate": "2020-10-29T23:13:03Z", "message": "Mapping retry config by context/request parameeters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00b813ec663921a6627b9ac3cd3812031f34a3c8", "author": {"user": {"login": "haithamgabr", "name": "Haitham Gabr"}}, "url": "https://github.com/line/armeria/commit/00b813ec663921a6627b9ac3cd3812031f34a3c8", "committedDate": "2020-10-30T03:00:40Z", "message": "Adding a test for RetryingRpcClient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7b510b96921980e7c18b032267dd6f31a1a8f84", "author": {"user": {"login": "haithamgabr", "name": "Haitham Gabr"}}, "url": "https://github.com/line/armeria/commit/f7b510b96921980e7c18b032267dd6f31a1a8f84", "committedDate": "2020-11-04T02:55:31Z", "message": "Adding RetryRule to RetryConfig, so it's part of RetryConfigMapping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30d5049b2ae589b96e9bbd356e342a51a27cf298", "author": {"user": {"login": "haithamgabr", "name": "Haitham Gabr"}}, "url": "https://github.com/line/armeria/commit/30d5049b2ae589b96e9bbd356e342a51a27cf298", "committedDate": "2020-11-04T03:46:40Z", "message": "Removing dead code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzOTc4MjE1", "url": "https://github.com/line/armeria/pull/3145#pullrequestreview-523978215", "createdAt": "2020-11-05T07:18:18Z", "commit": {"oid": "30d5049b2ae589b96e9bbd356e342a51a27cf298"}, "state": "COMMENTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzoxODoxOFrOHt2LFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzo1MjoxOVrOHt3D6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgzNTU0MQ==", "bodyText": "Could you revert these changes? \ud83d\ude05 We conventionally use I and O in other classes.", "url": "https://github.com/line/armeria/pull/3145#discussion_r517835541", "createdAt": "2020-11-05T07:18:18Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "diffHunk": "@@ -52,11 +51,11 @@\n /**\n  * A {@link Client} decorator that handles failures of remote invocation and retries requests.\n  *\n- * @param <I> the {@link Request} type\n- * @param <O> the {@link Response} type\n+ * @param <REQ_T> the {@link Request} type\n+ * @param <RES_T> the {@link Response} type\n  */\n-public abstract class AbstractRetryingClient<I extends Request, O extends Response>\n-        extends SimpleDecoratingClient<I, O> {\n+public abstract class AbstractRetryingClient<REQ_T extends Request, RES_T extends Response>\n+        extends SimpleDecoratingClient<REQ_T, RES_T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d5049b2ae589b96e9bbd356e342a51a27cf298"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgzNzE1Mw==", "bodyText": "Armeria follows semantic versioning. Unfortunately, we can't remove these protected methods in 1.x.", "url": "https://github.com/line/armeria/pull/3145#discussion_r517837153", "createdAt": "2020-11-05T07:22:05Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "diffHunk": "@@ -145,31 +106,6 @@ protected static void onRetryingComplete(ClientRequestContext ctx) {\n         ctx.logBuilder().endResponseWithLastChild();\n     }\n \n-    /**\n-     * Returns the {@link RetryRule}.\n-     *\n-     * @throws IllegalStateException if the {@link RetryRule} is not set\n-     */\n-    protected final RetryRule retryRule() {\n-        checkState(retryRule != null, \"retryRule is not set.\");\n-        return retryRule;\n-    }\n-\n-    /**\n-     * Returns the {@link RetryRuleWithContent}.\n-     *\n-     * @throws IllegalStateException if the {@link RetryRuleWithContent} is not set\n-     */\n-    protected final RetryRuleWithContent<O> retryRuleWithContent() {\n-        checkState(retryRuleWithContent != null, \"retryRuleWithContent is not set.\");\n-        return retryRuleWithContent;\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d5049b2ae589b96e9bbd356e342a51a27cf298"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgzNzUzOQ==", "bodyText": "Sorry, please revert this. \ud83d\ude4f", "url": "https://github.com/line/armeria/pull/3145#discussion_r517837539", "createdAt": "2020-11-05T07:23:01Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClientBuilder.java", "diffHunk": "@@ -34,47 +34,49 @@\n /**\n  * Builds a new {@link AbstractRetryingClient} or its decorator function.\n  *\n- * @param <O> the type of incoming {@link Response} of the {@link Client}\n+ * @param <T> the type of incoming {@link Response} of the {@link Client}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d5049b2ae589b96e9bbd356e342a51a27cf298"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgzNzg2NQ==", "bodyText": "nit: Join two lines?", "url": "https://github.com/line/armeria/pull/3145#discussion_r517837865", "createdAt": "2020-11-05T07:23:48Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClientBuilder.java", "diffHunk": "@@ -83,17 +85,17 @@ final RetryRule retryRule() {\n      *\n      * @return {@code this} to support method chaining.\n      */\n-    public AbstractRetryingClientBuilder<O> maxTotalAttempts(int maxTotalAttempts) {\n+    public AbstractRetryingClientBuilder<T> maxTotalAttempts(int maxTotalAttempts) {\n+        checkState(\n+                retryConfig != null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d5049b2ae589b96e9bbd356e342a51a27cf298"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgzNzk4Mw==", "bodyText": "nit: Join two lines?", "url": "https://github.com/line/armeria/pull/3145#discussion_r517837983", "createdAt": "2020-11-05T07:24:05Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClientBuilder.java", "diffHunk": "@@ -105,19 +107,19 @@ final int maxTotalAttempts() {\n      *\n      * @see <a href=\"https://armeria.dev/docs/client-retry#per-attempt-timeout\">Per-attempt timeout</a>\n      */\n-    public AbstractRetryingClientBuilder<O> responseTimeoutMillisForEachAttempt(\n+    public AbstractRetryingClientBuilder<T> responseTimeoutMillisForEachAttempt(\n             long responseTimeoutMillisForEachAttempt) {\n+        checkState(\n+                retryConfig != null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d5049b2ae589b96e9bbd356e342a51a27cf298"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgzOTEwNw==", "bodyText": "nit: Join two lines?", "url": "https://github.com/line/armeria/pull/3145#discussion_r517839107", "createdAt": "2020-11-05T07:26:51Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/KeyedRetryConfigMapping.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.BiFunction;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+\n+final class KeyedRetryConfigMapping<T extends Response> implements RetryConfigMapping<T> {\n+    private final BiFunction<ClientRequestContext, Request, RetryConfig<T>> retryConfigFactory;\n+    private final BiFunction<ClientRequestContext, Request, String> keyFactory;\n+    private final ConcurrentMap<String, RetryConfig<T>>  mapping = new ConcurrentHashMap<>();\n+\n+    KeyedRetryConfigMapping(\n+            BiFunction<ClientRequestContext, Request, String> keyFactory,\n+            BiFunction<ClientRequestContext, Request, RetryConfig<T>> retryConfigFactory\n+    ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d5049b2ae589b96e9bbd356e342a51a27cf298"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0MDUzOA==", "bodyText": "Could you add a new line at the end of @Nullable?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable public RetryRule retryRule() {\n          \n          \n            \n                @Nullable\n          \n          \n            \n                public RetryRule retryRule() {", "url": "https://github.com/line/armeria/pull/3145#discussion_r517840538", "createdAt": "2020-11-05T07:30:20Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfig.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Holds retry config used by a {@link RetryingClient}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, maxTotalAttempts,\n+ *  * and responseTimeoutMillisForEachAttempt.\n+ */\n+public final class RetryConfig<T extends Response> {\n+    private final int maxTotalAttempts;\n+    private final long responseTimeoutMillisForEachAttempt;\n+    @Nullable private final RetryRule retryRule;\n+    @Nullable private final RetryRuleWithContent<T> retryRuleWithContent;\n+    @Nullable private final RetryRule fromRetryRuleWithContent;\n+    private final int maxContentLength;\n+    private final boolean needsContentInRule;\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@link RetryRule}.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@link RetryRuleWithContent} with unlimited content length.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses {@link RetryRuleWithContent} with specified maxContentLength.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent, int maxContentLength) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent, maxContentLength);\n+    }\n+\n+    /**\n+     * Returns config's maxTotalAttempt.\n+     */\n+    public int maxTotalAttempts() {\n+        return maxTotalAttempts;\n+    }\n+\n+    /**\n+     * Returns config's responseTimeoutMillisForEachAttempt.\n+     */\n+    public long responseTimeoutMillisForEachAttempt() {\n+        return responseTimeoutMillisForEachAttempt;\n+    }\n+\n+    /**\n+     * Returns config's retryRule, could be null.\n+     */\n+    @Nullable public RetryRule retryRule() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d5049b2ae589b96e9bbd356e342a51a27cf298"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0MDYxNg==", "bodyText": "Ditto.", "url": "https://github.com/line/armeria/pull/3145#discussion_r517840616", "createdAt": "2020-11-05T07:30:33Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfig.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Holds retry config used by a {@link RetryingClient}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, maxTotalAttempts,\n+ *  * and responseTimeoutMillisForEachAttempt.\n+ */\n+public final class RetryConfig<T extends Response> {\n+    private final int maxTotalAttempts;\n+    private final long responseTimeoutMillisForEachAttempt;\n+    @Nullable private final RetryRule retryRule;\n+    @Nullable private final RetryRuleWithContent<T> retryRuleWithContent;\n+    @Nullable private final RetryRule fromRetryRuleWithContent;\n+    private final int maxContentLength;\n+    private final boolean needsContentInRule;\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@link RetryRule}.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@link RetryRuleWithContent} with unlimited content length.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses {@link RetryRuleWithContent} with specified maxContentLength.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent, int maxContentLength) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent, maxContentLength);\n+    }\n+\n+    /**\n+     * Returns config's maxTotalAttempt.\n+     */\n+    public int maxTotalAttempts() {\n+        return maxTotalAttempts;\n+    }\n+\n+    /**\n+     * Returns config's responseTimeoutMillisForEachAttempt.\n+     */\n+    public long responseTimeoutMillisForEachAttempt() {\n+        return responseTimeoutMillisForEachAttempt;\n+    }\n+\n+    /**\n+     * Returns config's retryRule, could be null.\n+     */\n+    @Nullable public RetryRule retryRule() {\n+        return retryRule;\n+    }\n+\n+    /**\n+     * Returns config's retryRuleWithContent, could be null.\n+     */\n+    @Nullable public RetryRuleWithContent<T> retryRuleWithContent() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d5049b2ae589b96e9bbd356e342a51a27cf298"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0MDY1Nw==", "bodyText": "Ditto.", "url": "https://github.com/line/armeria/pull/3145#discussion_r517840657", "createdAt": "2020-11-05T07:30:39Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfig.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Holds retry config used by a {@link RetryingClient}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, maxTotalAttempts,\n+ *  * and responseTimeoutMillisForEachAttempt.\n+ */\n+public final class RetryConfig<T extends Response> {\n+    private final int maxTotalAttempts;\n+    private final long responseTimeoutMillisForEachAttempt;\n+    @Nullable private final RetryRule retryRule;\n+    @Nullable private final RetryRuleWithContent<T> retryRuleWithContent;\n+    @Nullable private final RetryRule fromRetryRuleWithContent;\n+    private final int maxContentLength;\n+    private final boolean needsContentInRule;\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@link RetryRule}.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@link RetryRuleWithContent} with unlimited content length.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses {@link RetryRuleWithContent} with specified maxContentLength.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent, int maxContentLength) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent, maxContentLength);\n+    }\n+\n+    /**\n+     * Returns config's maxTotalAttempt.\n+     */\n+    public int maxTotalAttempts() {\n+        return maxTotalAttempts;\n+    }\n+\n+    /**\n+     * Returns config's responseTimeoutMillisForEachAttempt.\n+     */\n+    public long responseTimeoutMillisForEachAttempt() {\n+        return responseTimeoutMillisForEachAttempt;\n+    }\n+\n+    /**\n+     * Returns config's retryRule, could be null.\n+     */\n+    @Nullable public RetryRule retryRule() {\n+        return retryRule;\n+    }\n+\n+    /**\n+     * Returns config's retryRuleWithContent, could be null.\n+     */\n+    @Nullable public RetryRuleWithContent<T> retryRuleWithContent() {\n+        return retryRuleWithContent;\n+    }\n+\n+    /**\n+     * Returns config's retry rule that is converted from retryRuleWithContent, could be null.\n+     */\n+    @Nullable public RetryRule fromRetryRuleWithContent() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d5049b2ae589b96e9bbd356e342a51a27cf298"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0MTU5OQ==", "bodyText": "Use JDK's requireNonNull?\nPlease refer to https://armeria.dev/community/developer-guide#check-null .", "url": "https://github.com/line/armeria/pull/3145#discussion_r517841599", "createdAt": "2020-11-05T07:33:02Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfig.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Holds retry config used by a {@link RetryingClient}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, maxTotalAttempts,\n+ *  * and responseTimeoutMillisForEachAttempt.\n+ */\n+public final class RetryConfig<T extends Response> {\n+    private final int maxTotalAttempts;\n+    private final long responseTimeoutMillisForEachAttempt;\n+    @Nullable private final RetryRule retryRule;\n+    @Nullable private final RetryRuleWithContent<T> retryRuleWithContent;\n+    @Nullable private final RetryRule fromRetryRuleWithContent;\n+    private final int maxContentLength;\n+    private final boolean needsContentInRule;\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@link RetryRule}.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@link RetryRuleWithContent} with unlimited content length.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses {@link RetryRuleWithContent} with specified maxContentLength.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent, int maxContentLength) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent, maxContentLength);\n+    }\n+\n+    /**\n+     * Returns config's maxTotalAttempt.\n+     */\n+    public int maxTotalAttempts() {\n+        return maxTotalAttempts;\n+    }\n+\n+    /**\n+     * Returns config's responseTimeoutMillisForEachAttempt.\n+     */\n+    public long responseTimeoutMillisForEachAttempt() {\n+        return responseTimeoutMillisForEachAttempt;\n+    }\n+\n+    /**\n+     * Returns config's retryRule, could be null.\n+     */\n+    @Nullable public RetryRule retryRule() {\n+        return retryRule;\n+    }\n+\n+    /**\n+     * Returns config's retryRuleWithContent, could be null.\n+     */\n+    @Nullable public RetryRuleWithContent<T> retryRuleWithContent() {\n+        return retryRuleWithContent;\n+    }\n+\n+    /**\n+     * Returns config's retry rule that is converted from retryRuleWithContent, could be null.\n+     */\n+    @Nullable public RetryRule fromRetryRuleWithContent() {\n+        return fromRetryRuleWithContent;\n+    }\n+\n+    /**\n+     * Returns config's maxContentLength, which is non-zero only if a {@link RetryRuleWithContent} is used.\n+     */\n+    public int maxContentLength() {\n+        return maxContentLength;\n+    }\n+\n+    /**\n+     * Returns whether a {@link RetryRuleWithContent} is being used.\n+     */\n+    public boolean needsContentInRule() {\n+        return needsContentInRule;\n+    }\n+\n+    /**\n+     * Returns whether the associated requires response trailers.\n+     */\n+    public boolean requiresResponseTrailers() {\n+        return needsContentInRule() ?\n+               retryRuleWithContent().requiresResponseTrailers() : retryRule().requiresResponseTrailers();\n+    }\n+\n+    RetryConfig(RetryRule retryRule, int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n+        checkArguments(maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n+        this.retryRule = checkNotNull(retryRule);\n+        this.maxTotalAttempts = maxTotalAttempts;\n+        this.responseTimeoutMillisForEachAttempt = responseTimeoutMillisForEachAttempt;\n+        needsContentInRule = false;\n+        maxContentLength = 0;\n+        retryRuleWithContent = null;\n+        fromRetryRuleWithContent = null;\n+    }\n+\n+    RetryConfig(\n+            RetryRuleWithContent<T> retryRuleWithContent,\n+            int maxContentLength,\n+            int maxTotalAttempts,\n+            long responseTimeoutMillisForEachAttempt) {\n+        checkArguments(maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n+        this.maxContentLength = maxContentLength;\n+        this.retryRuleWithContent = checkNotNull(retryRuleWithContent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d5049b2ae589b96e9bbd356e342a51a27cf298"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0MjQyMA==", "bodyText": "This class already has package-private constructors. Can't we remove this?", "url": "https://github.com/line/armeria/pull/3145#discussion_r517842420", "createdAt": "2020-11-05T07:34:58Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfig.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Holds retry config used by a {@link RetryingClient}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, maxTotalAttempts,\n+ *  * and responseTimeoutMillisForEachAttempt.\n+ */\n+public final class RetryConfig<T extends Response> {\n+    private final int maxTotalAttempts;\n+    private final long responseTimeoutMillisForEachAttempt;\n+    @Nullable private final RetryRule retryRule;\n+    @Nullable private final RetryRuleWithContent<T> retryRuleWithContent;\n+    @Nullable private final RetryRule fromRetryRuleWithContent;\n+    private final int maxContentLength;\n+    private final boolean needsContentInRule;\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@link RetryRule}.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@link RetryRuleWithContent} with unlimited content length.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses {@link RetryRuleWithContent} with specified maxContentLength.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent, int maxContentLength) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent, maxContentLength);\n+    }\n+\n+    /**\n+     * Returns config's maxTotalAttempt.\n+     */\n+    public int maxTotalAttempts() {\n+        return maxTotalAttempts;\n+    }\n+\n+    /**\n+     * Returns config's responseTimeoutMillisForEachAttempt.\n+     */\n+    public long responseTimeoutMillisForEachAttempt() {\n+        return responseTimeoutMillisForEachAttempt;\n+    }\n+\n+    /**\n+     * Returns config's retryRule, could be null.\n+     */\n+    @Nullable public RetryRule retryRule() {\n+        return retryRule;\n+    }\n+\n+    /**\n+     * Returns config's retryRuleWithContent, could be null.\n+     */\n+    @Nullable public RetryRuleWithContent<T> retryRuleWithContent() {\n+        return retryRuleWithContent;\n+    }\n+\n+    /**\n+     * Returns config's retry rule that is converted from retryRuleWithContent, could be null.\n+     */\n+    @Nullable public RetryRule fromRetryRuleWithContent() {\n+        return fromRetryRuleWithContent;\n+    }\n+\n+    /**\n+     * Returns config's maxContentLength, which is non-zero only if a {@link RetryRuleWithContent} is used.\n+     */\n+    public int maxContentLength() {\n+        return maxContentLength;\n+    }\n+\n+    /**\n+     * Returns whether a {@link RetryRuleWithContent} is being used.\n+     */\n+    public boolean needsContentInRule() {\n+        return needsContentInRule;\n+    }\n+\n+    /**\n+     * Returns whether the associated requires response trailers.\n+     */\n+    public boolean requiresResponseTrailers() {\n+        return needsContentInRule() ?\n+               retryRuleWithContent().requiresResponseTrailers() : retryRule().requiresResponseTrailers();\n+    }\n+\n+    RetryConfig(RetryRule retryRule, int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n+        checkArguments(maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n+        this.retryRule = checkNotNull(retryRule);\n+        this.maxTotalAttempts = maxTotalAttempts;\n+        this.responseTimeoutMillisForEachAttempt = responseTimeoutMillisForEachAttempt;\n+        needsContentInRule = false;\n+        maxContentLength = 0;\n+        retryRuleWithContent = null;\n+        fromRetryRuleWithContent = null;\n+    }\n+\n+    RetryConfig(\n+            RetryRuleWithContent<T> retryRuleWithContent,\n+            int maxContentLength,\n+            int maxTotalAttempts,\n+            long responseTimeoutMillisForEachAttempt) {\n+        checkArguments(maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n+        this.maxContentLength = maxContentLength;\n+        this.retryRuleWithContent = checkNotNull(retryRuleWithContent);\n+        fromRetryRuleWithContent = RetryRuleUtil.fromRetryRuleWithContent(retryRuleWithContent);\n+        this.maxTotalAttempts = maxTotalAttempts;\n+        this.responseTimeoutMillisForEachAttempt = responseTimeoutMillisForEachAttempt;\n+        needsContentInRule = true;\n+        retryRule = null;\n+    }\n+\n+    private RetryConfig() {\n+        throw new IllegalStateException(\"RetryConfig must have a rule.\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d5049b2ae589b96e9bbd356e342a51a27cf298"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0MzI0MQ==", "bodyText": "Make these private?", "url": "https://github.com/line/armeria/pull/3145#discussion_r517843241", "createdAt": "2020-11-05T07:36:48Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfigBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.time.Duration;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.MoreObjects.ToStringHelper;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Builds a {@link RetryConfig}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, maxTotalAttempts,\n+ * and responseTimeoutMillisForEachAttempt.\n+ */\n+public final class RetryConfigBuilder<T extends Response> {\n+    int maxTotalAttempts = Flags.defaultMaxTotalAttempts();\n+    long responseTimeoutMillisForEachAttempt = Flags.defaultResponseTimeoutMillis();\n+    @Nullable final RetryRule retryRule;\n+    @Nullable final RetryRuleWithContent<T> retryRuleWithContent;\n+    final int maxContentLength;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d5049b2ae589b96e9bbd356e342a51a27cf298"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0MzYwNw==", "bodyText": "Remove public?", "url": "https://github.com/line/armeria/pull/3145#discussion_r517843607", "createdAt": "2020-11-05T07:37:46Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfigBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.time.Duration;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.MoreObjects.ToStringHelper;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Builds a {@link RetryConfig}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, maxTotalAttempts,\n+ * and responseTimeoutMillisForEachAttempt.\n+ */\n+public final class RetryConfigBuilder<T extends Response> {\n+    int maxTotalAttempts = Flags.defaultMaxTotalAttempts();\n+    long responseTimeoutMillisForEachAttempt = Flags.defaultResponseTimeoutMillis();\n+    @Nullable final RetryRule retryRule;\n+    @Nullable final RetryRuleWithContent<T> retryRuleWithContent;\n+    final int maxContentLength;\n+\n+    private RetryConfigBuilder() {\n+        throw new IllegalStateException(\"RetryConfigBuilder must have a rule.\");\n+    }\n+\n+    /**\n+     * Returns a {@link RetryConfigBuilder} with this {@link RetryRule}.\n+     */\n+    public RetryConfigBuilder(RetryRule retryRule) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d5049b2ae589b96e9bbd356e342a51a27cf298"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0MzcyOQ==", "bodyText": "I think we can remove this.", "url": "https://github.com/line/armeria/pull/3145#discussion_r517843729", "createdAt": "2020-11-05T07:38:09Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfigBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.time.Duration;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.MoreObjects.ToStringHelper;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Builds a {@link RetryConfig}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, maxTotalAttempts,\n+ * and responseTimeoutMillisForEachAttempt.\n+ */\n+public final class RetryConfigBuilder<T extends Response> {\n+    int maxTotalAttempts = Flags.defaultMaxTotalAttempts();\n+    long responseTimeoutMillisForEachAttempt = Flags.defaultResponseTimeoutMillis();\n+    @Nullable final RetryRule retryRule;\n+    @Nullable final RetryRuleWithContent<T> retryRuleWithContent;\n+    final int maxContentLength;\n+\n+    private RetryConfigBuilder() {\n+        throw new IllegalStateException(\"RetryConfigBuilder must have a rule.\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d5049b2ae589b96e9bbd356e342a51a27cf298"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0Mzk2MA==", "bodyText": "Global comments: Please use requireNonNull where checkNotNull is used.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.retryRule = checkNotNull(retryRule);\n          \n          \n            \n                    this.retryRule = requireNonNull(retryRule, \"retryRule\");", "url": "https://github.com/line/armeria/pull/3145#discussion_r517843960", "createdAt": "2020-11-05T07:38:42Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfigBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.time.Duration;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.MoreObjects.ToStringHelper;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Builds a {@link RetryConfig}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, maxTotalAttempts,\n+ * and responseTimeoutMillisForEachAttempt.\n+ */\n+public final class RetryConfigBuilder<T extends Response> {\n+    int maxTotalAttempts = Flags.defaultMaxTotalAttempts();\n+    long responseTimeoutMillisForEachAttempt = Flags.defaultResponseTimeoutMillis();\n+    @Nullable final RetryRule retryRule;\n+    @Nullable final RetryRuleWithContent<T> retryRuleWithContent;\n+    final int maxContentLength;\n+\n+    private RetryConfigBuilder() {\n+        throw new IllegalStateException(\"RetryConfigBuilder must have a rule.\");\n+    }\n+\n+    /**\n+     * Returns a {@link RetryConfigBuilder} with this {@link RetryRule}.\n+     */\n+    public RetryConfigBuilder(RetryRule retryRule) {\n+        this.retryRule = checkNotNull(retryRule);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d5049b2ae589b96e9bbd356e342a51a27cf298"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0NDcxMw==", "bodyText": "Add requireNonNull?", "url": "https://github.com/line/armeria/pull/3145#discussion_r517844713", "createdAt": "2020-11-05T07:40:20Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfigBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.time.Duration;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.MoreObjects.ToStringHelper;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Builds a {@link RetryConfig}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, maxTotalAttempts,\n+ * and responseTimeoutMillisForEachAttempt.\n+ */\n+public final class RetryConfigBuilder<T extends Response> {\n+    int maxTotalAttempts = Flags.defaultMaxTotalAttempts();\n+    long responseTimeoutMillisForEachAttempt = Flags.defaultResponseTimeoutMillis();\n+    @Nullable final RetryRule retryRule;\n+    @Nullable final RetryRuleWithContent<T> retryRuleWithContent;\n+    final int maxContentLength;\n+\n+    private RetryConfigBuilder() {\n+        throw new IllegalStateException(\"RetryConfigBuilder must have a rule.\");\n+    }\n+\n+    /**\n+     * Returns a {@link RetryConfigBuilder} with this {@link RetryRule}.\n+     */\n+    public RetryConfigBuilder(RetryRule retryRule) {\n+        this.retryRule = checkNotNull(retryRule);\n+        retryRuleWithContent = null;\n+        maxContentLength = 0;\n+    }\n+\n+    /**\n+     * Returns a {@link RetryConfigBuilder} with this {@link RetryRuleWithContent}.\n+     */\n+    public RetryConfigBuilder(RetryRuleWithContent<T> retryRuleWithContent) {\n+        this(retryRuleWithContent, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * Returns a {@link RetryConfigBuilder} with this {@link RetryRuleWithContent} and maxContentLength.\n+     */\n+    public RetryConfigBuilder(RetryRuleWithContent<T> retryRuleWithContent, int maxContentLength) {\n+        retryRule = null;\n+        this.retryRuleWithContent = checkNotNull(retryRuleWithContent);\n+        checkArgument(maxContentLength > 0,\n+                      \"maxContentLength: %s (expected: > 0)\", maxContentLength);\n+        this.maxContentLength = maxContentLength;\n+    }\n+\n+    /**\n+     * Sets maxTotalAttempts.\n+     */\n+    public RetryConfigBuilder<T> maxTotalAttempts(int maxTotalAttempts) {\n+        checkArgument(\n+                maxTotalAttempts > 0,\n+                \"maxTotalAttempts: %s (expected: > 0)\",\n+                maxTotalAttempts);\n+        this.maxTotalAttempts = maxTotalAttempts;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets responseTimeoutMillisForEachAttempt.\n+     */\n+    public RetryConfigBuilder<T> responseTimeoutMillisForEachAttempt(long responseTimeoutMillisForEachAttempt) {\n+        checkArgument(\n+                responseTimeoutMillisForEachAttempt >= 0,\n+                \"responseTimeoutMillisForEachAttempt: %s (expected: >= 0)\",\n+                responseTimeoutMillisForEachAttempt);\n+        this.responseTimeoutMillisForEachAttempt = responseTimeoutMillisForEachAttempt;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets responseTimeoutMillisForEachAttempt by converting responseTimeoutForEachAttempt to millis.\n+     */\n+    public RetryConfigBuilder<T> responseTimeoutForEachAttempt(Duration responseTimeoutMillisForEachAttempt) {\n+        final long millis = responseTimeoutMillisForEachAttempt.toMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d5049b2ae589b96e9bbd356e342a51a27cf298"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0NDkyMg==", "bodyText": "Remove public?", "url": "https://github.com/line/armeria/pull/3145#discussion_r517844922", "createdAt": "2020-11-05T07:40:53Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfigBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.time.Duration;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.MoreObjects.ToStringHelper;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Builds a {@link RetryConfig}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, maxTotalAttempts,\n+ * and responseTimeoutMillisForEachAttempt.\n+ */\n+public final class RetryConfigBuilder<T extends Response> {\n+    int maxTotalAttempts = Flags.defaultMaxTotalAttempts();\n+    long responseTimeoutMillisForEachAttempt = Flags.defaultResponseTimeoutMillis();\n+    @Nullable final RetryRule retryRule;\n+    @Nullable final RetryRuleWithContent<T> retryRuleWithContent;\n+    final int maxContentLength;\n+\n+    private RetryConfigBuilder() {\n+        throw new IllegalStateException(\"RetryConfigBuilder must have a rule.\");\n+    }\n+\n+    /**\n+     * Returns a {@link RetryConfigBuilder} with this {@link RetryRule}.\n+     */\n+    public RetryConfigBuilder(RetryRule retryRule) {\n+        this.retryRule = checkNotNull(retryRule);\n+        retryRuleWithContent = null;\n+        maxContentLength = 0;\n+    }\n+\n+    /**\n+     * Returns a {@link RetryConfigBuilder} with this {@link RetryRuleWithContent}.\n+     */\n+    public RetryConfigBuilder(RetryRuleWithContent<T> retryRuleWithContent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d5049b2ae589b96e9bbd356e342a51a27cf298"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0NTI1Nw==", "bodyText": "Remove this else block? I think we can reach this condition.", "url": "https://github.com/line/armeria/pull/3145#discussion_r517845257", "createdAt": "2020-11-05T07:41:39Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfigBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.time.Duration;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.MoreObjects.ToStringHelper;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Builds a {@link RetryConfig}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, maxTotalAttempts,\n+ * and responseTimeoutMillisForEachAttempt.\n+ */\n+public final class RetryConfigBuilder<T extends Response> {\n+    int maxTotalAttempts = Flags.defaultMaxTotalAttempts();\n+    long responseTimeoutMillisForEachAttempt = Flags.defaultResponseTimeoutMillis();\n+    @Nullable final RetryRule retryRule;\n+    @Nullable final RetryRuleWithContent<T> retryRuleWithContent;\n+    final int maxContentLength;\n+\n+    private RetryConfigBuilder() {\n+        throw new IllegalStateException(\"RetryConfigBuilder must have a rule.\");\n+    }\n+\n+    /**\n+     * Returns a {@link RetryConfigBuilder} with this {@link RetryRule}.\n+     */\n+    public RetryConfigBuilder(RetryRule retryRule) {\n+        this.retryRule = checkNotNull(retryRule);\n+        retryRuleWithContent = null;\n+        maxContentLength = 0;\n+    }\n+\n+    /**\n+     * Returns a {@link RetryConfigBuilder} with this {@link RetryRuleWithContent}.\n+     */\n+    public RetryConfigBuilder(RetryRuleWithContent<T> retryRuleWithContent) {\n+        this(retryRuleWithContent, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * Returns a {@link RetryConfigBuilder} with this {@link RetryRuleWithContent} and maxContentLength.\n+     */\n+    public RetryConfigBuilder(RetryRuleWithContent<T> retryRuleWithContent, int maxContentLength) {\n+        retryRule = null;\n+        this.retryRuleWithContent = checkNotNull(retryRuleWithContent);\n+        checkArgument(maxContentLength > 0,\n+                      \"maxContentLength: %s (expected: > 0)\", maxContentLength);\n+        this.maxContentLength = maxContentLength;\n+    }\n+\n+    /**\n+     * Sets maxTotalAttempts.\n+     */\n+    public RetryConfigBuilder<T> maxTotalAttempts(int maxTotalAttempts) {\n+        checkArgument(\n+                maxTotalAttempts > 0,\n+                \"maxTotalAttempts: %s (expected: > 0)\",\n+                maxTotalAttempts);\n+        this.maxTotalAttempts = maxTotalAttempts;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets responseTimeoutMillisForEachAttempt.\n+     */\n+    public RetryConfigBuilder<T> responseTimeoutMillisForEachAttempt(long responseTimeoutMillisForEachAttempt) {\n+        checkArgument(\n+                responseTimeoutMillisForEachAttempt >= 0,\n+                \"responseTimeoutMillisForEachAttempt: %s (expected: >= 0)\",\n+                responseTimeoutMillisForEachAttempt);\n+        this.responseTimeoutMillisForEachAttempt = responseTimeoutMillisForEachAttempt;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets responseTimeoutMillisForEachAttempt by converting responseTimeoutForEachAttempt to millis.\n+     */\n+    public RetryConfigBuilder<T> responseTimeoutForEachAttempt(Duration responseTimeoutMillisForEachAttempt) {\n+        final long millis = responseTimeoutMillisForEachAttempt.toMillis();\n+        checkArgument(\n+                millis >= 0,\n+                \"responseTimeoutForEachAttempt.toMillis(): %s (expected: >= 0)\",\n+                millis);\n+        this.responseTimeoutMillisForEachAttempt = millis;\n+        return this;\n+    }\n+\n+    /**\n+     * Builds a {@link RetryConfig} from this builder's values and returns it.\n+     */\n+    public RetryConfig<T> build() {\n+        if (retryRule != null) {\n+            return new RetryConfig<>(retryRule, maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n+        } else if (retryRuleWithContent != null) {\n+            return new RetryConfig<>(\n+                    retryRuleWithContent,\n+                    maxContentLength,\n+                    maxTotalAttempts,\n+                    responseTimeoutMillisForEachAttempt);\n+        } else {\n+            throw new IllegalStateException(\"RetryConfigBuilder must have a rule.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d5049b2ae589b96e9bbd356e342a51a27cf298"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0ODMyNw==", "bodyText": "RetryingRpcClient only use retryRuleWithContent because there is no performance degression  using RetryRuleWithContent.\nCould add a validation code to builder(RetryConfigMapping<RpcResponse> mapping) whether retryRuleWithContent is configured?", "url": "https://github.com/line/armeria/pull/3145#discussion_r517848327", "createdAt": "2020-11-05T07:48:27Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java", "diffHunk": "@@ -124,9 +141,13 @@ private void doExecute0(ClientRequestContext ctx, RpcRequest req,\n         final RpcResponse res = executeWithFallback(unwrap(), derivedCtx,\n                                                     (context, cause) -> RpcResponse.ofFailure(cause));\n \n+        final RetryConfig<RpcResponse> retryConfig = mapping().get(ctx, req);\n+        final RetryRuleWithContent<RpcResponse> retryRule =\n+                retryConfig.needsContentInRule() ?\n+                retryConfig.retryRuleWithContent() : RetryRuleUtil.fromRetryRule(retryConfig.retryRule());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d5049b2ae589b96e9bbd356e342a51a27cf298"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg1MDA5MQ==", "bodyText": "Hmm, This seems an API level breaking changes.", "url": "https://github.com/line/armeria/pull/3145#discussion_r517850091", "createdAt": "2020-11-05T07:52:19Z", "author": {"login": "ikhoon"}, "path": "grpc/src/test/java/com/linecorp/armeria/internal/client/grpc/GrpcClientUnwrapTest.java", "diffHunk": "@@ -37,8 +38,8 @@ void test() {\n         final TestServiceBlockingStub client =\n                 Clients.builder(\"gproto+http://127.0.0.1:1/\")\n                        .decorator(LoggingClient.newDecorator())\n-                       .decorator(RetryingClient.newDecorator(\n-                               (ctx, cause) -> CompletableFuture.completedFuture(RetryDecision.noRetry())))\n+                       .decorator(RetryingClient.newDecorator(RetryRule.of(\n+                               (ctx, cause) -> CompletableFuture.completedFuture(RetryDecision.noRetry()))))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d5049b2ae589b96e9bbd356e342a51a27cf298"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "020667f5d127d69d364d4af1ae9746f1f39c3a15", "author": {"user": {"login": "haithamgabr", "name": "Haitham Gabr"}}, "url": "https://github.com/line/armeria/commit/020667f5d127d69d364d4af1ae9746f1f39c3a15", "committedDate": "2020-11-05T23:55:14Z", "message": "Renaming newDecorator mapping overload, maintaining protected getters, addressing comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2c218a994f788e889e816486ba132f876a000c1", "author": {"user": {"login": "haithamgabr", "name": "Haitham Gabr"}}, "url": "https://github.com/line/armeria/commit/d2c218a994f788e889e816486ba132f876a000c1", "committedDate": "2020-11-06T00:11:57Z", "message": "Replacing checkNotNull with requireNonNull"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1OTA1Mzc2", "url": "https://github.com/line/armeria/pull/3145#pullrequestreview-525905376", "createdAt": "2020-11-09T03:39:53Z", "commit": {"oid": "d2c218a994f788e889e816486ba132f876a000c1"}, "state": "COMMENTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwMzozOTo1M1rOHveAuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNDo1MDoyNlrOHve5Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzNjgyNw==", "bodyText": "Revert?", "url": "https://github.com/line/armeria/pull/3145#discussion_r519536827", "createdAt": "2020-11-09T03:39:53Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "diffHunk": "@@ -52,11 +51,11 @@\n /**\n  * A {@link Client} decorator that handles failures of remote invocation and retries requests.\n  *\n- * @param <I> the {@link Request} type\n+ * @param <T> the {@link Request} type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2c218a994f788e889e816486ba132f876a000c1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzNzA5NA==", "bodyText": "Missing Javadoc", "url": "https://github.com/line/armeria/pull/3145#discussion_r519537094", "createdAt": "2020-11-09T03:41:10Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "diffHunk": "@@ -69,74 +68,39 @@\n     private static final AttributeKey<State> STATE =\n             AttributeKey.valueOf(AbstractRetryingClient.class, \"STATE\");\n \n-    @Nullable\n-    private final RetryRule retryRule;\n-\n-    @Nullable\n-    private final RetryRule fromRetryRuleWithContent;\n-\n-    @Nullable\n-    private final RetryRuleWithContent<O> retryRuleWithContent;\n-\n-    private final int maxTotalAttempts;\n-    private final long responseTimeoutMillisForEachAttempt;\n+    private final RetryConfigMapping<O> mapping;\n+    private final RetryConfig retryConfig;\n \n     /**\n      * Creates a new instance that decorates the specified {@link Client}.\n      */\n-    AbstractRetryingClient(Client<I, O> delegate, RetryRule retryRule,\n-                           int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n-        this(delegate, requireNonNull(retryRule, \"retryRule\"), null,\n-             maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n-    }\n-\n-    /**\n-     * Creates a new instance that decorates the specified {@link Client}.\n-     */\n-    AbstractRetryingClient(Client<I, O> delegate,\n-                           RetryRuleWithContent<O> retryRuleWithContent,\n-                           int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n-        this(delegate, null, requireNonNull(retryRuleWithContent, \"retryRuleWithContent\"),\n-             maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n-    }\n-\n-    /**\n-     * Creates a new instance that decorates the specified {@link Client}.\n-     */\n-    private AbstractRetryingClient(Client<I, O> delegate, @Nullable RetryRule retryRule,\n-                                   @Nullable RetryRuleWithContent<O> retryRuleWithContent,\n-                                   int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n+    AbstractRetryingClient(\n+            Client<T, O> delegate, RetryConfigMapping<O> mapping, @Nullable RetryConfig<O> retryConfig) {\n         super(delegate);\n-        this.retryRule = retryRule;\n-        this.retryRuleWithContent = retryRuleWithContent;\n-        if (retryRuleWithContent != null) {\n-            fromRetryRuleWithContent = RetryRuleUtil.fromRetryRuleWithContent(retryRuleWithContent);\n-        } else {\n-            fromRetryRuleWithContent = null;\n-        }\n-\n-        checkArgument(maxTotalAttempts > 0, \"maxTotalAttempts: %s (expected: > 0)\", maxTotalAttempts);\n-        this.maxTotalAttempts = maxTotalAttempts;\n-\n-        checkArgument(responseTimeoutMillisForEachAttempt >= 0,\n-                      \"responseTimeoutMillisForEachAttempt: %s (expected: >= 0)\",\n-                      responseTimeoutMillisForEachAttempt);\n-        this.responseTimeoutMillisForEachAttempt = responseTimeoutMillisForEachAttempt;\n+        this.mapping = requireNonNull(mapping);\n+        this.retryConfig = retryConfig;\n     }\n \n     @Override\n-    public final O execute(ClientRequestContext ctx, I req) throws Exception {\n-        final State state =\n-                new State(maxTotalAttempts, responseTimeoutMillisForEachAttempt, ctx.responseTimeoutMillis());\n+    public final O execute(ClientRequestContext ctx, T req) throws Exception {\n+        final RetryConfig<O> config = mapping.get(ctx, req);\n+        final State state = new State(\n+                config.maxTotalAttempts(),\n+                config.responseTimeoutMillisForEachAttempt(),\n+                ctx.responseTimeoutMillis());\n         ctx.setAttr(STATE, state);\n         return doExecute(ctx, req);\n     }\n \n+    protected RetryConfigMapping<O> mapping() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2c218a994f788e889e816486ba132f876a000c1"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzNzI0MA==", "bodyText": "are -> Are", "url": "https://github.com/line/armeria/pull/3145#discussion_r519537240", "createdAt": "2020-11-09T03:41:56Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "diffHunk": "@@ -151,8 +115,9 @@ protected static void onRetryingComplete(ClientRequestContext ctx) {\n      * @throws IllegalStateException if the {@link RetryRule} is not set\n      */\n     protected final RetryRule retryRule() {\n-        checkState(retryRule != null, \"retryRule is not set.\");\n-        return retryRule;\n+        checkState(retryConfig != null, \"No retryRule set. are you using RetryConfigMapping?\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2c218a994f788e889e816486ba132f876a000c1"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzNzMzMw==", "bodyText": "are -> Are", "url": "https://github.com/line/armeria/pull/3145#discussion_r519537333", "createdAt": "2020-11-09T03:42:18Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "diffHunk": "@@ -161,13 +126,9 @@ protected final RetryRule retryRule() {\n      * @throws IllegalStateException if the {@link RetryRuleWithContent} is not set\n      */\n     protected final RetryRuleWithContent<O> retryRuleWithContent() {\n-        checkState(retryRuleWithContent != null, \"retryRuleWithContent is not set.\");\n-        return retryRuleWithContent;\n-    }\n-\n-    final RetryRule fromRetryRuleWithContent() {\n-        checkState(retryRuleWithContent != null, \"retryRuleWithContent is not set.\");\n-        return fromRetryRuleWithContent;\n+        checkState(retryConfig != null, \"No retryRuleWithContent set. are you using RetryConfigMapping?\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2c218a994f788e889e816486ba132f876a000c1"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzNzQzMw==", "bodyText": "Could be final?", "url": "https://github.com/line/armeria/pull/3145#discussion_r519537433", "createdAt": "2020-11-09T03:42:57Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClientBuilder.java", "diffHunk": "@@ -38,43 +37,53 @@\n  */\n public abstract class AbstractRetryingClientBuilder<O extends Response> {\n \n-    @Nullable\n-    private final RetryRule retryRule;\n+    @Nullable private final RetryConfigBuilder<O> retryConfig;\n \n-    @Nullable\n-    private final RetryRuleWithContent<O> retryRuleWithContent;\n-\n-    private int maxTotalAttempts = Flags.defaultMaxTotalAttempts();\n-    private long responseTimeoutMillisForEachAttempt = Flags.defaultResponseTimeoutMillis();\n+    private RetryConfigMapping<O> mapping;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2c218a994f788e889e816486ba132f876a000c1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzODM3NQ==", "bodyText": "Remove the extra asterisk\nUse {@code ...} for maxTotalAttempts and responseTimeoutMillisForEachAttempt", "url": "https://github.com/line/armeria/pull/3145#discussion_r519538375", "createdAt": "2020-11-09T03:47:31Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfig.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Holds retry config used by a {@link RetryingClient}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, maxTotalAttempts,\n+ *  * and responseTimeoutMillisForEachAttempt.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2c218a994f788e889e816486ba132f876a000c1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU0NzY0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.mapping = requireNonNull(mapping);\n          \n          \n            \n                    this.mapping = requireNonNull(mapping, \"mapping\");", "url": "https://github.com/line/armeria/pull/3145#discussion_r519547648", "createdAt": "2020-11-09T04:33:36Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClientBuilder.java", "diffHunk": "@@ -38,43 +37,53 @@\n  */\n public abstract class AbstractRetryingClientBuilder<O extends Response> {\n \n-    @Nullable\n-    private final RetryRule retryRule;\n+    @Nullable private final RetryConfigBuilder<O> retryConfig;\n \n-    @Nullable\n-    private final RetryRuleWithContent<O> retryRuleWithContent;\n-\n-    private int maxTotalAttempts = Flags.defaultMaxTotalAttempts();\n-    private long responseTimeoutMillisForEachAttempt = Flags.defaultResponseTimeoutMillis();\n+    private RetryConfigMapping<O> mapping;\n \n     /**\n      * Creates a new builder with the specified {@link RetryRule}.\n      */\n     AbstractRetryingClientBuilder(RetryRule retryRule) {\n-        this(requireNonNull(retryRule, \"retryRule\"), null);\n+        retryConfig = RetryConfig.builder(requireNonNull(retryRule, \"retryRule\"));\n+        mapping = (ctx, req) -> retryConfig.build();\n     }\n \n     /**\n      * Creates a new builder with the specified {@link RetryRuleWithContent}.\n      */\n     AbstractRetryingClientBuilder(RetryRuleWithContent<O> retryRuleWithContent) {\n-        this(null, requireNonNull(retryRuleWithContent, \"retryRuleWithContent\"));\n+        retryConfig = RetryConfig.builder(requireNonNull(retryRuleWithContent, \"retryRuleWithContent\"));\n+        mapping = (ctx, req) -> retryConfig.build();\n+    }\n+\n+    /**\n+     * Creates a new builder with the specified {@link RetryRuleWithContent}.\n+     */\n+    AbstractRetryingClientBuilder(RetryRuleWithContent<O> retryRuleWithContent, int maxContentLength) {\n+        retryConfig = RetryConfig.builder(\n+                requireNonNull(retryRuleWithContent, \"retryRuleWithContent\"),\n+                maxContentLength);\n+        mapping = (ctx, req) -> retryConfig.build();\n     }\n \n-    private AbstractRetryingClientBuilder(@Nullable RetryRule retryRule,\n-                                          @Nullable RetryRuleWithContent<O> retryRuleWithContent) {\n-        this.retryRule = retryRule;\n-        this.retryRuleWithContent = retryRuleWithContent;\n+    /**\n+     * Creates a new builder with the specified {@link RetryConfigMapping}.\n+     */\n+    AbstractRetryingClientBuilder(RetryConfigMapping<O> mapping) {\n+        this.mapping = requireNonNull(mapping);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2c218a994f788e889e816486ba132f876a000c1"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU0ODMxNw==", "bodyText": "We should not call .build() on each request. Could we build it only once?", "url": "https://github.com/line/armeria/pull/3145#discussion_r519548317", "createdAt": "2020-11-09T04:36:34Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClientBuilder.java", "diffHunk": "@@ -38,43 +37,53 @@\n  */\n public abstract class AbstractRetryingClientBuilder<O extends Response> {\n \n-    @Nullable\n-    private final RetryRule retryRule;\n+    @Nullable private final RetryConfigBuilder<O> retryConfig;\n \n-    @Nullable\n-    private final RetryRuleWithContent<O> retryRuleWithContent;\n-\n-    private int maxTotalAttempts = Flags.defaultMaxTotalAttempts();\n-    private long responseTimeoutMillisForEachAttempt = Flags.defaultResponseTimeoutMillis();\n+    private RetryConfigMapping<O> mapping;\n \n     /**\n      * Creates a new builder with the specified {@link RetryRule}.\n      */\n     AbstractRetryingClientBuilder(RetryRule retryRule) {\n-        this(requireNonNull(retryRule, \"retryRule\"), null);\n+        retryConfig = RetryConfig.builder(requireNonNull(retryRule, \"retryRule\"));\n+        mapping = (ctx, req) -> retryConfig.build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2c218a994f788e889e816486ba132f876a000c1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU0ODU1Nw==", "bodyText": "How about removing this constructor as well as RetryConfig.builder() that requires maxContentLength? We could instead add a setter to the builders?", "url": "https://github.com/line/armeria/pull/3145#discussion_r519548557", "createdAt": "2020-11-09T04:37:47Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClientBuilder.java", "diffHunk": "@@ -38,43 +37,53 @@\n  */\n public abstract class AbstractRetryingClientBuilder<O extends Response> {\n \n-    @Nullable\n-    private final RetryRule retryRule;\n+    @Nullable private final RetryConfigBuilder<O> retryConfig;\n \n-    @Nullable\n-    private final RetryRuleWithContent<O> retryRuleWithContent;\n-\n-    private int maxTotalAttempts = Flags.defaultMaxTotalAttempts();\n-    private long responseTimeoutMillisForEachAttempt = Flags.defaultResponseTimeoutMillis();\n+    private RetryConfigMapping<O> mapping;\n \n     /**\n      * Creates a new builder with the specified {@link RetryRule}.\n      */\n     AbstractRetryingClientBuilder(RetryRule retryRule) {\n-        this(requireNonNull(retryRule, \"retryRule\"), null);\n+        retryConfig = RetryConfig.builder(requireNonNull(retryRule, \"retryRule\"));\n+        mapping = (ctx, req) -> retryConfig.build();\n     }\n \n     /**\n      * Creates a new builder with the specified {@link RetryRuleWithContent}.\n      */\n     AbstractRetryingClientBuilder(RetryRuleWithContent<O> retryRuleWithContent) {\n-        this(null, requireNonNull(retryRuleWithContent, \"retryRuleWithContent\"));\n+        retryConfig = RetryConfig.builder(requireNonNull(retryRuleWithContent, \"retryRuleWithContent\"));\n+        mapping = (ctx, req) -> retryConfig.build();\n+    }\n+\n+    /**\n+     * Creates a new builder with the specified {@link RetryRuleWithContent}.\n+     */\n+    AbstractRetryingClientBuilder(RetryRuleWithContent<O> retryRuleWithContent, int maxContentLength) {\n+        retryConfig = RetryConfig.builder(\n+                requireNonNull(retryRuleWithContent, \"retryRuleWithContent\"),\n+                maxContentLength);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2c218a994f788e889e816486ba132f876a000c1"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU0ODk2NA==", "bodyText": "This will make a debugger see an exception instead of a string. Could we make this fall back to the old version when retryConfig is null?", "url": "https://github.com/line/armeria/pull/3145#discussion_r519548964", "createdAt": "2020-11-09T04:39:45Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClientBuilder.java", "diffHunk": "@@ -140,10 +149,9 @@ public String toString() {\n     }\n \n     final ToStringHelper toStringHelper() {\n-        return MoreObjects.toStringHelper(this).omitNullValues()\n-                          .add(\"retryRule\", retryRule)\n-                          .add(\"retryRuleWithContent\", retryRuleWithContent)\n-                          .add(\"maxTotalAttempts\", maxTotalAttempts)\n-                          .add(\"responseTimeoutMillisForEachAttempt\", responseTimeoutMillisForEachAttempt);\n+        checkState(\n+                retryConfig != null,\n+                \"You are using a RetryConfigMapping, so you cannot get a string representation.\");\n+        return retryConfig.toStringHelper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2c218a994f788e889e816486ba132f876a000c1"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU0OTUyMw==", "bodyText": "Could maxContentLength be unlimited by default and be overridden by using a setter in RetryConfigBuilder?", "url": "https://github.com/line/armeria/pull/3145#discussion_r519549523", "createdAt": "2020-11-09T04:42:16Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfig.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Holds retry config used by a {@link RetryingClient}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, maxTotalAttempts,\n+ *  * and responseTimeoutMillisForEachAttempt.\n+ */\n+public final class RetryConfig<T extends Response> {\n+    private final int maxTotalAttempts;\n+    private final long responseTimeoutMillisForEachAttempt;\n+    @Nullable private final RetryRule retryRule;\n+    @Nullable private final RetryRuleWithContent<T> retryRuleWithContent;\n+    @Nullable private final RetryRule fromRetryRuleWithContent;\n+    private final int maxContentLength;\n+    private final boolean needsContentInRule;\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@link RetryRule}.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@link RetryRuleWithContent} with unlimited content length.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses {@link RetryRuleWithContent} with specified maxContentLength.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent, int maxContentLength) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent, maxContentLength);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2c218a994f788e889e816486ba132f876a000c1"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU0OTU4OQ==", "bodyText": "Please move all static factory methods before the member fields.", "url": "https://github.com/line/armeria/pull/3145#discussion_r519549589", "createdAt": "2020-11-09T04:42:36Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfig.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Holds retry config used by a {@link RetryingClient}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, maxTotalAttempts,\n+ *  * and responseTimeoutMillisForEachAttempt.\n+ */\n+public final class RetryConfig<T extends Response> {\n+    private final int maxTotalAttempts;\n+    private final long responseTimeoutMillisForEachAttempt;\n+    @Nullable private final RetryRule retryRule;\n+    @Nullable private final RetryRuleWithContent<T> retryRuleWithContent;\n+    @Nullable private final RetryRule fromRetryRuleWithContent;\n+    private final int maxContentLength;\n+    private final boolean needsContentInRule;\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@link RetryRule}.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(RetryRule retryRule) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2c218a994f788e889e816486ba132f876a000c1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU0OTk0MA==", "bodyText": "Could we explain what this property does rather than just repeating what the method name implies? e.g. Returns the maximum number of request attempts made by a {@link RetryingClient}.", "url": "https://github.com/line/armeria/pull/3145#discussion_r519549940", "createdAt": "2020-11-09T04:44:14Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfig.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Holds retry config used by a {@link RetryingClient}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, maxTotalAttempts,\n+ *  * and responseTimeoutMillisForEachAttempt.\n+ */\n+public final class RetryConfig<T extends Response> {\n+    private final int maxTotalAttempts;\n+    private final long responseTimeoutMillisForEachAttempt;\n+    @Nullable private final RetryRule retryRule;\n+    @Nullable private final RetryRuleWithContent<T> retryRuleWithContent;\n+    @Nullable private final RetryRule fromRetryRuleWithContent;\n+    private final int maxContentLength;\n+    private final boolean needsContentInRule;\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@link RetryRule}.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@link RetryRuleWithContent} with unlimited content length.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses {@link RetryRuleWithContent} with specified maxContentLength.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent, int maxContentLength) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent, maxContentLength);\n+    }\n+\n+    /**\n+     * Returns config's maxTotalAttempt.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2c218a994f788e889e816486ba132f876a000c1"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU1MDA1MA==", "bodyText": "Ditto - please update the Javadoc of all properties for better user experience.", "url": "https://github.com/line/armeria/pull/3145#discussion_r519550050", "createdAt": "2020-11-09T04:44:45Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfig.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Holds retry config used by a {@link RetryingClient}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, maxTotalAttempts,\n+ *  * and responseTimeoutMillisForEachAttempt.\n+ */\n+public final class RetryConfig<T extends Response> {\n+    private final int maxTotalAttempts;\n+    private final long responseTimeoutMillisForEachAttempt;\n+    @Nullable private final RetryRule retryRule;\n+    @Nullable private final RetryRuleWithContent<T> retryRuleWithContent;\n+    @Nullable private final RetryRule fromRetryRuleWithContent;\n+    private final int maxContentLength;\n+    private final boolean needsContentInRule;\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@link RetryRule}.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@link RetryRuleWithContent} with unlimited content length.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses {@link RetryRuleWithContent} with specified maxContentLength.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent, int maxContentLength) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent, maxContentLength);\n+    }\n+\n+    /**\n+     * Returns config's maxTotalAttempt.\n+     */\n+    public int maxTotalAttempts() {\n+        return maxTotalAttempts;\n+    }\n+\n+    /**\n+     * Returns config's responseTimeoutMillisForEachAttempt.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2c218a994f788e889e816486ba132f876a000c1"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU1MDY1MA==", "bodyText": "How about merging this method into retryRule()?", "url": "https://github.com/line/armeria/pull/3145#discussion_r519550650", "createdAt": "2020-11-09T04:47:28Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfig.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Holds retry config used by a {@link RetryingClient}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, maxTotalAttempts,\n+ *  * and responseTimeoutMillisForEachAttempt.\n+ */\n+public final class RetryConfig<T extends Response> {\n+    private final int maxTotalAttempts;\n+    private final long responseTimeoutMillisForEachAttempt;\n+    @Nullable private final RetryRule retryRule;\n+    @Nullable private final RetryRuleWithContent<T> retryRuleWithContent;\n+    @Nullable private final RetryRule fromRetryRuleWithContent;\n+    private final int maxContentLength;\n+    private final boolean needsContentInRule;\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@link RetryRule}.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@link RetryRuleWithContent} with unlimited content length.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses {@link RetryRuleWithContent} with specified maxContentLength.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent, int maxContentLength) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent, maxContentLength);\n+    }\n+\n+    /**\n+     * Returns config's maxTotalAttempt.\n+     */\n+    public int maxTotalAttempts() {\n+        return maxTotalAttempts;\n+    }\n+\n+    /**\n+     * Returns config's responseTimeoutMillisForEachAttempt.\n+     */\n+    public long responseTimeoutMillisForEachAttempt() {\n+        return responseTimeoutMillisForEachAttempt;\n+    }\n+\n+    /**\n+     * Returns config's retryRule, could be null.\n+     */\n+    @Nullable\n+    public RetryRule retryRule() {\n+        return retryRule;\n+    }\n+\n+    /**\n+     * Returns config's retryRuleWithContent, could be null.\n+     */\n+    @Nullable\n+    public RetryRuleWithContent<T> retryRuleWithContent() {\n+        return retryRuleWithContent;\n+    }\n+\n+    /**\n+     * Returns config's retry rule that is converted from retryRuleWithContent, could be null.\n+     */\n+    @Nullable\n+    public RetryRule fromRetryRuleWithContent() {\n+        return fromRetryRuleWithContent;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2c218a994f788e889e816486ba132f876a000c1"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU1MDc2OA==", "bodyText": "Please moves these after the member fields, so that the initialization code comes before other member methods.", "url": "https://github.com/line/armeria/pull/3145#discussion_r519550768", "createdAt": "2020-11-09T04:48:12Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfig.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Holds retry config used by a {@link RetryingClient}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, maxTotalAttempts,\n+ *  * and responseTimeoutMillisForEachAttempt.\n+ */\n+public final class RetryConfig<T extends Response> {\n+    private final int maxTotalAttempts;\n+    private final long responseTimeoutMillisForEachAttempt;\n+    @Nullable private final RetryRule retryRule;\n+    @Nullable private final RetryRuleWithContent<T> retryRuleWithContent;\n+    @Nullable private final RetryRule fromRetryRuleWithContent;\n+    private final int maxContentLength;\n+    private final boolean needsContentInRule;\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@link RetryRule}.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@link RetryRuleWithContent} with unlimited content length.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses {@link RetryRuleWithContent} with specified maxContentLength.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent, int maxContentLength) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent, maxContentLength);\n+    }\n+\n+    /**\n+     * Returns config's maxTotalAttempt.\n+     */\n+    public int maxTotalAttempts() {\n+        return maxTotalAttempts;\n+    }\n+\n+    /**\n+     * Returns config's responseTimeoutMillisForEachAttempt.\n+     */\n+    public long responseTimeoutMillisForEachAttempt() {\n+        return responseTimeoutMillisForEachAttempt;\n+    }\n+\n+    /**\n+     * Returns config's retryRule, could be null.\n+     */\n+    @Nullable\n+    public RetryRule retryRule() {\n+        return retryRule;\n+    }\n+\n+    /**\n+     * Returns config's retryRuleWithContent, could be null.\n+     */\n+    @Nullable\n+    public RetryRuleWithContent<T> retryRuleWithContent() {\n+        return retryRuleWithContent;\n+    }\n+\n+    /**\n+     * Returns config's retry rule that is converted from retryRuleWithContent, could be null.\n+     */\n+    @Nullable\n+    public RetryRule fromRetryRuleWithContent() {\n+        return fromRetryRuleWithContent;\n+    }\n+\n+    /**\n+     * Returns config's maxContentLength, which is non-zero only if a {@link RetryRuleWithContent} is used.\n+     */\n+    public int maxContentLength() {\n+        return maxContentLength;\n+    }\n+\n+    /**\n+     * Returns whether a {@link RetryRuleWithContent} is being used.\n+     */\n+    public boolean needsContentInRule() {\n+        return needsContentInRule;\n+    }\n+\n+    /**\n+     * Returns whether the associated requires response trailers.\n+     */\n+    public boolean requiresResponseTrailers() {\n+        return needsContentInRule() ?\n+               retryRuleWithContent().requiresResponseTrailers() : retryRule().requiresResponseTrailers();\n+    }\n+\n+    RetryConfig(RetryRule retryRule, int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n+        checkArguments(maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n+        this.retryRule = requireNonNull(retryRule);\n+        this.maxTotalAttempts = maxTotalAttempts;\n+        this.responseTimeoutMillisForEachAttempt = responseTimeoutMillisForEachAttempt;\n+        needsContentInRule = false;\n+        maxContentLength = 0;\n+        retryRuleWithContent = null;\n+        fromRetryRuleWithContent = null;\n+    }\n+\n+    RetryConfig(\n+            RetryRuleWithContent<T> retryRuleWithContent,\n+            int maxContentLength,\n+            int maxTotalAttempts,\n+            long responseTimeoutMillisForEachAttempt) {\n+        checkArguments(maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n+        this.maxContentLength = maxContentLength;\n+        this.retryRuleWithContent = requireNonNull(retryRuleWithContent);\n+        fromRetryRuleWithContent = RetryRuleUtil.fromRetryRuleWithContent(retryRuleWithContent);\n+        this.maxTotalAttempts = maxTotalAttempts;\n+        this.responseTimeoutMillisForEachAttempt = responseTimeoutMillisForEachAttempt;\n+        needsContentInRule = true;\n+        retryRule = null;\n+    }\n+\n+    private static void checkArguments(int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n+        checkArgument(\n+                maxTotalAttempts > 0,\n+                \"maxTotalAttempts: %s (expected: > 0)\",\n+                maxTotalAttempts);\n+        checkArgument(\n+                responseTimeoutMillisForEachAttempt >= 0,\n+                \"responseTimeoutMillisForEachAttempt: %s (expected: >= 0)\",\n+                responseTimeoutMillisForEachAttempt);\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2c218a994f788e889e816486ba132f876a000c1"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU1MTE2MA==", "bodyText": "BiFunction<? super ClientRequestContext, ? super Request, String>\nBiFunction<? super ClientRequestContext, ? super Request, RetryConfig<T>>", "url": "https://github.com/line/armeria/pull/3145#discussion_r519551160", "createdAt": "2020-11-09T04:49:55Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfigMapping.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.function.BiFunction;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Returns a {@link RetryConfig} given the request context.\n+ */\n+@FunctionalInterface\n+public interface RetryConfigMapping<T extends Response> {\n+    /**\n+     * Creates a {@link KeyedRetryConfigMapping} that maps keys created by keyFactory to  {@link RetryConfig}s\n+     * created by retryConfigFactory.\n+     */\n+    static <T extends Response> RetryConfigMapping<T> of(\n+            BiFunction<ClientRequestContext, Request, String> keyFactory,\n+            BiFunction<ClientRequestContext, Request, RetryConfig<T>> retryConfigFactory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2c218a994f788e889e816486ba132f876a000c1"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU1MTMxNQ==", "bodyText": "builder() or builderWithMapping()?", "url": "https://github.com/line/armeria/pull/3145#discussion_r519551315", "createdAt": "2020-11-09T04:50:26Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java", "diffHunk": "@@ -85,6 +87,13 @@ public static RetryingClientBuilder builder(RetryRuleWithContent<HttpResponse> r\n         return new RetryingClientBuilder(retryRuleWithContent, maxContentLength);\n     }\n \n+    /**\n+     * Returns a new {@link RetryingClientBuilder} with the specified {@link RetryConfigMapping}.\n+     */\n+    public static RetryingClientBuilder builderWithMapping(RetryConfigMapping<HttpResponse> mapping) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2c218a994f788e889e816486ba132f876a000c1"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecc904516a17c9505eec0b358e5bcd9807de52bb", "author": {"user": {"login": "haithamgabr", "name": "Haitham Gabr"}}, "url": "https://github.com/line/armeria/commit/ecc904516a17c9505eec0b358e5bcd9807de52bb", "committedDate": "2020-11-09T23:12:41Z", "message": "Refactoring, Documenting, and addressing comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1f00aaf3edbf0d3d789c4b7841b532f0b4dc2b9", "author": {"user": {"login": "haithamgabr", "name": "Haitham Gabr"}}, "url": "https://github.com/line/armeria/commit/d1f00aaf3edbf0d3d789c4b7841b532f0b4dc2b9", "committedDate": "2020-11-09T23:16:53Z", "message": "Refactoring, Documenting, and addressing comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4Njk5NjU2", "url": "https://github.com/line/armeria/pull/3145#pullrequestreview-528699656", "createdAt": "2020-11-12T02:58:19Z", "commit": {"oid": "d1f00aaf3edbf0d3d789c4b7841b532f0b4dc2b9"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMjo1ODoyMFrOHxnUbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo1OTo0MFrOHxpaNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc4NjQ3OQ==", "bodyText": "Global comment:\nCould you add the message?\nrequireNonNull(mapping, \"mapping\");", "url": "https://github.com/line/armeria/pull/3145#discussion_r521786479", "createdAt": "2020-11-12T02:58:20Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "diffHunk": "@@ -69,69 +68,37 @@\n     private static final AttributeKey<State> STATE =\n             AttributeKey.valueOf(AbstractRetryingClient.class, \"STATE\");\n \n-    @Nullable\n-    private final RetryRule retryRule;\n-\n-    @Nullable\n-    private final RetryRule fromRetryRuleWithContent;\n-\n-    @Nullable\n-    private final RetryRuleWithContent<O> retryRuleWithContent;\n-\n-    private final int maxTotalAttempts;\n-    private final long responseTimeoutMillisForEachAttempt;\n-\n-    /**\n-     * Creates a new instance that decorates the specified {@link Client}.\n-     */\n-    AbstractRetryingClient(Client<I, O> delegate, RetryRule retryRule,\n-                           int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n-        this(delegate, requireNonNull(retryRule, \"retryRule\"), null,\n-             maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n-    }\n+    private final RetryConfigMapping<O> mapping;\n+    private final RetryConfig retryConfig;\n \n     /**\n      * Creates a new instance that decorates the specified {@link Client}.\n      */\n-    AbstractRetryingClient(Client<I, O> delegate,\n-                           RetryRuleWithContent<O> retryRuleWithContent,\n-                           int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n-        this(delegate, null, requireNonNull(retryRuleWithContent, \"retryRuleWithContent\"),\n-             maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n-    }\n-\n-    /**\n-     * Creates a new instance that decorates the specified {@link Client}.\n-     */\n-    private AbstractRetryingClient(Client<I, O> delegate, @Nullable RetryRule retryRule,\n-                                   @Nullable RetryRuleWithContent<O> retryRuleWithContent,\n-                                   int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n+    AbstractRetryingClient(\n+            Client<I, O> delegate, RetryConfigMapping<O> mapping, @Nullable RetryConfig<O> retryConfig) {\n         super(delegate);\n-        this.retryRule = retryRule;\n-        this.retryRuleWithContent = retryRuleWithContent;\n-        if (retryRuleWithContent != null) {\n-            fromRetryRuleWithContent = RetryRuleUtil.fromRetryRuleWithContent(retryRuleWithContent);\n-        } else {\n-            fromRetryRuleWithContent = null;\n-        }\n-\n-        checkArgument(maxTotalAttempts > 0, \"maxTotalAttempts: %s (expected: > 0)\", maxTotalAttempts);\n-        this.maxTotalAttempts = maxTotalAttempts;\n-\n-        checkArgument(responseTimeoutMillisForEachAttempt >= 0,\n-                      \"responseTimeoutMillisForEachAttempt: %s (expected: >= 0)\",\n-                      responseTimeoutMillisForEachAttempt);\n-        this.responseTimeoutMillisForEachAttempt = responseTimeoutMillisForEachAttempt;\n+        this.mapping = requireNonNull(mapping);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1f00aaf3edbf0d3d789c4b7841b532f0b4dc2b9"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxMzEwNQ==", "bodyText": "Fortunately, these constructors are package-private so we can change them:\nHow about making the constructor takes just RetryConfigBuilder, then we will have two constructors:\nAbstractRetryingClientBuilder(RetryConfigBuilder retryConfigBuilder) {...}\nAbstractRetryingClientBuilder(RetryConfigMapping<O> mapping) {...}", "url": "https://github.com/line/armeria/pull/3145#discussion_r521813105", "createdAt": "2020-11-12T03:48:17Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClientBuilder.java", "diffHunk": "@@ -38,43 +38,47 @@\n  */\n public abstract class AbstractRetryingClientBuilder<O extends Response> {\n \n-    @Nullable\n-    private final RetryRule retryRule;\n+    @Nullable private final RetryConfigBuilder<O> retryConfig;\n \n-    @Nullable\n-    private final RetryRuleWithContent<O> retryRuleWithContent;\n-\n-    private int maxTotalAttempts = Flags.defaultMaxTotalAttempts();\n-    private long responseTimeoutMillisForEachAttempt = Flags.defaultResponseTimeoutMillis();\n+    @Nullable private final RetryConfigMapping<O> mapping;\n \n     /**\n      * Creates a new builder with the specified {@link RetryRule}.\n      */\n     AbstractRetryingClientBuilder(RetryRule retryRule) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1f00aaf3edbf0d3d789c4b7841b532f0b4dc2b9"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxNjU4NA==", "bodyText": "How about deprecating these methods for maxTotalAttempts, responseTimeout and maxContentLength because RetryConfig is responsible for those parameters now?\nWe might recommend to use RetryingClient.builder(RetryConfig)\nAlso, we need RetryConfig.toBuilder so that we don't have to raise an exception.", "url": "https://github.com/line/armeria/pull/3145#discussion_r521816584", "createdAt": "2020-11-12T03:53:36Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClientBuilder.java", "diffHunk": "@@ -84,16 +88,13 @@ final RetryRule retryRule() {\n      * @return {@code this} to support method chaining.\n      */\n     public AbstractRetryingClientBuilder<O> maxTotalAttempts(int maxTotalAttempts) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1f00aaf3edbf0d3d789c4b7841b532f0b4dc2b9"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxOTk5OQ==", "bodyText": "How about just accepting Client<I, O> delegate, RetryConfigMapping<O> mapping?\nI think we can set the config to the ctx as an attribute and retrieve it in\nretryRule() and retryRuleWithContent() using ClientRequestContext.current().", "url": "https://github.com/line/armeria/pull/3145#discussion_r521819999", "createdAt": "2020-11-12T03:58:38Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "diffHunk": "@@ -69,69 +68,37 @@\n     private static final AttributeKey<State> STATE =\n             AttributeKey.valueOf(AbstractRetryingClient.class, \"STATE\");\n \n-    @Nullable\n-    private final RetryRule retryRule;\n-\n-    @Nullable\n-    private final RetryRule fromRetryRuleWithContent;\n-\n-    @Nullable\n-    private final RetryRuleWithContent<O> retryRuleWithContent;\n-\n-    private final int maxTotalAttempts;\n-    private final long responseTimeoutMillisForEachAttempt;\n-\n-    /**\n-     * Creates a new instance that decorates the specified {@link Client}.\n-     */\n-    AbstractRetryingClient(Client<I, O> delegate, RetryRule retryRule,\n-                           int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n-        this(delegate, requireNonNull(retryRule, \"retryRule\"), null,\n-             maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n-    }\n+    private final RetryConfigMapping<O> mapping;\n+    private final RetryConfig retryConfig;\n \n     /**\n      * Creates a new instance that decorates the specified {@link Client}.\n      */\n-    AbstractRetryingClient(Client<I, O> delegate,\n-                           RetryRuleWithContent<O> retryRuleWithContent,\n-                           int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n-        this(delegate, null, requireNonNull(retryRuleWithContent, \"retryRuleWithContent\"),\n-             maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n-    }\n-\n-    /**\n-     * Creates a new instance that decorates the specified {@link Client}.\n-     */\n-    private AbstractRetryingClient(Client<I, O> delegate, @Nullable RetryRule retryRule,\n-                                   @Nullable RetryRuleWithContent<O> retryRuleWithContent,\n-                                   int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n+    AbstractRetryingClient(\n+            Client<I, O> delegate, RetryConfigMapping<O> mapping, @Nullable RetryConfig<O> retryConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1f00aaf3edbf0d3d789c4b7841b532f0b4dc2b9"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyMDcyNA==", "bodyText": "Global comment:\nCould you use auto formatting?\nif so this will be:\n@Nullable\nprivate final RetryConfigBuilder<O> retryConfig;", "url": "https://github.com/line/armeria/pull/3145#discussion_r521820724", "createdAt": "2020-11-12T03:59:40Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClientBuilder.java", "diffHunk": "@@ -38,43 +38,47 @@\n  */\n public abstract class AbstractRetryingClientBuilder<O extends Response> {\n \n-    @Nullable\n-    private final RetryRule retryRule;\n+    @Nullable private final RetryConfigBuilder<O> retryConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1f00aaf3edbf0d3d789c4b7841b532f0b4dc2b9"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2229baf2fe4c74f19e9138da343165587eba6554", "author": {"user": {"login": "haithamgabr", "name": "Haitham Gabr"}}, "url": "https://github.com/line/armeria/commit/2229baf2fe4c74f19e9138da343165587eba6554", "committedDate": "2020-11-12T19:23:09Z", "message": "Refactoring, deprecating, and addressing comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44d952ff1eba0879bb966991990adc6077baf07f", "author": {"user": {"login": "haithamgabr", "name": "Haitham Gabr"}}, "url": "https://github.com/line/armeria/commit/44d952ff1eba0879bb966991990adc6077baf07f", "committedDate": "2020-11-12T19:40:46Z", "message": "Refactoring, deprecating, and addressing comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NjU0NDk4", "url": "https://github.com/line/armeria/pull/3145#pullrequestreview-529654498", "createdAt": "2020-11-13T02:14:06Z", "commit": {"oid": "44d952ff1eba0879bb966991990adc6077baf07f"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMjoxNDowNlrOHyXABA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMjo0MjoyN1rOHyXfxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU2NzY4NA==", "bodyText": "How about just retryConfigBuilder for the field name?", "url": "https://github.com/line/armeria/pull/3145#discussion_r522567684", "createdAt": "2020-11-13T02:14:06Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClientBuilder.java", "diffHunk": "@@ -39,61 +39,60 @@\n public abstract class AbstractRetryingClientBuilder<O extends Response> {\n \n     @Nullable\n-    private final RetryRule retryRule;\n+    private final RetryConfigBuilder<O> retryConfig;\n \n     @Nullable\n-    private final RetryRuleWithContent<O> retryRuleWithContent;\n-\n-    private int maxTotalAttempts = Flags.defaultMaxTotalAttempts();\n-    private long responseTimeoutMillisForEachAttempt = Flags.defaultResponseTimeoutMillis();\n+    private final RetryConfigMapping<O> mapping;\n \n     /**\n-     * Creates a new builder with the specified {@link RetryRule}.\n+     * Creates a new builder with the specified {@link RetryConfig}.\n      */\n-    AbstractRetryingClientBuilder(RetryRule retryRule) {\n-        this(requireNonNull(retryRule, \"retryRule\"), null);\n+    AbstractRetryingClientBuilder(RetryConfig<O> retryConfig) {\n+        this.retryConfig = requireNonNull(retryConfig, \"retryConfig\").toBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d952ff1eba0879bb966991990adc6077baf07f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU2ODQxNg==", "bodyText": "Could you add assert config != null; so that IDE does not complain?", "url": "https://github.com/line/armeria/pull/3145#discussion_r522568416", "createdAt": "2020-11-13T02:16:35Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClientBuilder.java", "diffHunk": "@@ -39,61 +39,60 @@\n public abstract class AbstractRetryingClientBuilder<O extends Response> {\n \n     @Nullable\n-    private final RetryRule retryRule;\n+    private final RetryConfigBuilder<O> retryConfig;\n \n     @Nullable\n-    private final RetryRuleWithContent<O> retryRuleWithContent;\n-\n-    private int maxTotalAttempts = Flags.defaultMaxTotalAttempts();\n-    private long responseTimeoutMillisForEachAttempt = Flags.defaultResponseTimeoutMillis();\n+    private final RetryConfigMapping<O> mapping;\n \n     /**\n-     * Creates a new builder with the specified {@link RetryRule}.\n+     * Creates a new builder with the specified {@link RetryConfig}.\n      */\n-    AbstractRetryingClientBuilder(RetryRule retryRule) {\n-        this(requireNonNull(retryRule, \"retryRule\"), null);\n+    AbstractRetryingClientBuilder(RetryConfig<O> retryConfig) {\n+        this.retryConfig = requireNonNull(retryConfig, \"retryConfig\").toBuilder();\n+        mapping = null;\n     }\n \n     /**\n-     * Creates a new builder with the specified {@link RetryRuleWithContent}.\n+     * Creates a new builder with the specified {@link RetryConfigMapping}.\n      */\n-    AbstractRetryingClientBuilder(RetryRuleWithContent<O> retryRuleWithContent) {\n-        this(null, requireNonNull(retryRuleWithContent, \"retryRuleWithContent\"));\n-    }\n-\n-    private AbstractRetryingClientBuilder(@Nullable RetryRule retryRule,\n-                                          @Nullable RetryRuleWithContent<O> retryRuleWithContent) {\n-        this.retryRule = retryRule;\n-        this.retryRuleWithContent = retryRuleWithContent;\n+    AbstractRetryingClientBuilder(RetryConfigMapping<O> mapping) {\n+        this.mapping = requireNonNull(mapping, \"mapping\");\n+        retryConfig = null;\n     }\n \n-    final RetryRule retryRule() {\n-        checkState(retryRule != null, \"retryRule is not set.\");\n-        return retryRule;\n+    final RetryConfigMapping<O> mapping() {\n+        if (mapping == null) {\n+            final RetryConfig<O> config = retryConfig();\n+            return (ctx, req) -> config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d952ff1eba0879bb966991990adc6077baf07f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU2ODU2MA==", "bodyText": "We can do @deprecated Use {@link RetryConfigBuilder#maxTotalAttempts(int)}. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3145#discussion_r522568560", "createdAt": "2020-11-13T02:17:02Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClientBuilder.java", "diffHunk": "@@ -39,61 +39,60 @@\n public abstract class AbstractRetryingClientBuilder<O extends Response> {\n \n     @Nullable\n-    private final RetryRule retryRule;\n+    private final RetryConfigBuilder<O> retryConfig;\n \n     @Nullable\n-    private final RetryRuleWithContent<O> retryRuleWithContent;\n-\n-    private int maxTotalAttempts = Flags.defaultMaxTotalAttempts();\n-    private long responseTimeoutMillisForEachAttempt = Flags.defaultResponseTimeoutMillis();\n+    private final RetryConfigMapping<O> mapping;\n \n     /**\n-     * Creates a new builder with the specified {@link RetryRule}.\n+     * Creates a new builder with the specified {@link RetryConfig}.\n      */\n-    AbstractRetryingClientBuilder(RetryRule retryRule) {\n-        this(requireNonNull(retryRule, \"retryRule\"), null);\n+    AbstractRetryingClientBuilder(RetryConfig<O> retryConfig) {\n+        this.retryConfig = requireNonNull(retryConfig, \"retryConfig\").toBuilder();\n+        mapping = null;\n     }\n \n     /**\n-     * Creates a new builder with the specified {@link RetryRuleWithContent}.\n+     * Creates a new builder with the specified {@link RetryConfigMapping}.\n      */\n-    AbstractRetryingClientBuilder(RetryRuleWithContent<O> retryRuleWithContent) {\n-        this(null, requireNonNull(retryRuleWithContent, \"retryRuleWithContent\"));\n-    }\n-\n-    private AbstractRetryingClientBuilder(@Nullable RetryRule retryRule,\n-                                          @Nullable RetryRuleWithContent<O> retryRuleWithContent) {\n-        this.retryRule = retryRule;\n-        this.retryRuleWithContent = retryRuleWithContent;\n+    AbstractRetryingClientBuilder(RetryConfigMapping<O> mapping) {\n+        this.mapping = requireNonNull(mapping, \"mapping\");\n+        retryConfig = null;\n     }\n \n-    final RetryRule retryRule() {\n-        checkState(retryRule != null, \"retryRule is not set.\");\n-        return retryRule;\n+    final RetryConfigMapping<O> mapping() {\n+        if (mapping == null) {\n+            final RetryConfig<O> config = retryConfig();\n+            return (ctx, req) -> config;\n+        }\n+        return mapping;\n     }\n \n-    final RetryRuleWithContent<O> retryRuleWithContent() {\n-        checkState(retryRuleWithContent != null, \"retryRuleWithContent is not set.\");\n-        return retryRuleWithContent;\n+    @Nullable\n+    final RetryConfig<O> retryConfig() {\n+        if (retryConfig == null) {\n+            return null;\n+        }\n+        return retryConfig.build();\n     }\n \n     /**\n      * Sets the maximum allowed number of total attempts. If unspecified, the value from\n      * {@link Flags#defaultMaxTotalAttempts()} will be used.\n      *\n      * @return {@code this} to support method chaining.\n+     *\n+     * @deprecated Use {@link RetryConfigBuilder}::maxTotalAttempts() instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d952ff1eba0879bb966991990adc6077baf07f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU2ODY3Mg==", "bodyText": "ditto", "url": "https://github.com/line/armeria/pull/3145#discussion_r522568672", "createdAt": "2020-11-13T02:17:28Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClientBuilder.java", "diffHunk": "@@ -104,30 +103,37 @@ final int maxTotalAttempts() {\n      * @return {@code this} to support method chaining.\n      *\n      * @see <a href=\"https://armeria.dev/docs/client-retry#per-attempt-timeout\">Per-attempt timeout</a>\n+     *\n+     * @deprecated Use {@link RetryConfigBuilder}::responseTimeoutMillisForEachAttempt() instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d952ff1eba0879bb966991990adc6077baf07f"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU2ODg4Mw==", "bodyText": "ditto.", "url": "https://github.com/line/armeria/pull/3145#discussion_r522568883", "createdAt": "2020-11-13T02:18:12Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClientBuilder.java", "diffHunk": "@@ -104,30 +103,37 @@ final int maxTotalAttempts() {\n      * @return {@code this} to support method chaining.\n      *\n      * @see <a href=\"https://armeria.dev/docs/client-retry#per-attempt-timeout\">Per-attempt timeout</a>\n+     *\n+     * @deprecated Use {@link RetryConfigBuilder}::responseTimeoutMillisForEachAttempt() instead.\n      */\n+    @Deprecated\n     public AbstractRetryingClientBuilder<O> responseTimeoutMillisForEachAttempt(\n             long responseTimeoutMillisForEachAttempt) {\n+        checkState(retryConfig != null,\n+                   \"You are using a RetryConfigMapping. You cannot set responseTimeoutMillisForEachAttempt.\");\n         checkArgument(responseTimeoutMillisForEachAttempt >= 0,\n                       \"responseTimeoutMillisForEachAttempt: %s (expected: >= 0)\",\n                       responseTimeoutMillisForEachAttempt);\n-        this.responseTimeoutMillisForEachAttempt = responseTimeoutMillisForEachAttempt;\n+        retryConfig.responseTimeoutMillisForEachAttempt(responseTimeoutMillisForEachAttempt);\n         return this;\n     }\n \n-    final long responseTimeoutMillisForEachAttempt() {\n-        return responseTimeoutMillisForEachAttempt;\n-    }\n-\n     /**\n      * Sets the response timeout for each attempt. When requests in {@link AbstractRetryingClient} are made,\n      * corresponding responses are timed out by this value. {@code 0} disables the timeout.\n      *\n      * @return {@code this} to support method chaining.\n      *\n      * @see <a href=\"https://armeria.dev/docs/client-retry#per-attempt-timeout\">Per-attempt timeout</a>\n+     *\n+     * @deprecated Use {@link RetryConfigBuilder}::responseTimeoutForEachAttempt() instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d952ff1eba0879bb966991990adc6077baf07f"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU2OTg1OQ==", "bodyText": "nit: two spaces before mapping", "url": "https://github.com/line/armeria/pull/3145#discussion_r522569859", "createdAt": "2020-11-13T02:21:22Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/KeyedRetryConfigMapping.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.BiFunction;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+\n+final class KeyedRetryConfigMapping<T extends Response> implements RetryConfigMapping<T> {\n+    private final BiFunction<? super ClientRequestContext, Request, RetryConfig<T>> retryConfigFactory;\n+    private final BiFunction<? super ClientRequestContext, Request, String> keyFactory;\n+    private final ConcurrentMap<String, RetryConfig<T>>  mapping = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d952ff1eba0879bb966991990adc6077baf07f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3MDg1Nw==", "bodyText": "Can we just call computeIfAbsent?", "url": "https://github.com/line/armeria/pull/3145#discussion_r522570857", "createdAt": "2020-11-13T02:24:20Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/KeyedRetryConfigMapping.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.BiFunction;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+\n+final class KeyedRetryConfigMapping<T extends Response> implements RetryConfigMapping<T> {\n+    private final BiFunction<? super ClientRequestContext, Request, RetryConfig<T>> retryConfigFactory;\n+    private final BiFunction<? super ClientRequestContext, Request, String> keyFactory;\n+    private final ConcurrentMap<String, RetryConfig<T>>  mapping = new ConcurrentHashMap<>();\n+\n+    KeyedRetryConfigMapping(\n+            BiFunction<? super ClientRequestContext, Request, String> keyFactory,\n+            BiFunction<? super ClientRequestContext, Request, RetryConfig<T>> retryConfigFactory) {\n+        this.keyFactory = requireNonNull(keyFactory, \"keyFactory\");\n+        this.retryConfigFactory = requireNonNull(retryConfigFactory, \"retryConfigFactory\");\n+    }\n+\n+    @Override\n+    public RetryConfig<T> get(ClientRequestContext ctx, Request req) {\n+        final String key = keyFactory.apply(ctx, req);\n+        final RetryConfig<T> config = mapping.get(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d952ff1eba0879bb966991990adc6077baf07f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3MzE3NQ==", "bodyText": "How about raising an exception if retryRule != null? or\nWe can add this parameter to the constructor that takes RetryRuleWithContent.", "url": "https://github.com/line/armeria/pull/3145#discussion_r522573175", "createdAt": "2020-11-13T02:32:33Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfigBuilder.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.MoreObjects.ToStringHelper;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Builds a {@link RetryConfig}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, maxTotalAttempts,\n+ * and responseTimeoutMillisForEachAttempt.\n+ */\n+public final class RetryConfigBuilder<T extends Response> {\n+    private int maxTotalAttempts = Flags.defaultMaxTotalAttempts();\n+    private long responseTimeoutMillisForEachAttempt = Flags.defaultResponseTimeoutMillis();\n+    private int maxContentLength;\n+\n+    @Nullable\n+    private final RetryRule retryRule;\n+\n+    @Nullable\n+    private final RetryRuleWithContent<T> retryRuleWithContent;\n+\n+    /**\n+     * Returns a {@link RetryConfigBuilder} with this {@link RetryRule}.\n+     */\n+    RetryConfigBuilder(RetryRule retryRule) {\n+        this.retryRule = requireNonNull(retryRule, \"retryRule\");\n+        retryRuleWithContent = null;\n+        maxContentLength = 0;\n+    }\n+\n+    /**\n+     * Returns a {@link RetryConfigBuilder} with this {@link RetryRuleWithContent}.\n+     */\n+    RetryConfigBuilder(RetryRuleWithContent<T> retryRuleWithContent) {\n+        retryRule = null;\n+        this.retryRuleWithContent = requireNonNull(retryRuleWithContent, \"retryRuleWithContent\");\n+        maxContentLength = Integer.MAX_VALUE;\n+    }\n+\n+    /**\n+     * Sets the maxContentLength to be used with a {@link RetryRuleWithContent}.\n+     */\n+    public RetryConfigBuilder<T> maxContentLength(int maxContentLength) {\n+        checkArgument(maxContentLength > 0,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d952ff1eba0879bb966991990adc6077baf07f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3MzQ0Mg==", "bodyText": "How about just adding assert retryRuleWithContent != null and remove if condition?", "url": "https://github.com/line/armeria/pull/3145#discussion_r522573442", "createdAt": "2020-11-13T02:33:39Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfigBuilder.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.MoreObjects.ToStringHelper;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Builds a {@link RetryConfig}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, maxTotalAttempts,\n+ * and responseTimeoutMillisForEachAttempt.\n+ */\n+public final class RetryConfigBuilder<T extends Response> {\n+    private int maxTotalAttempts = Flags.defaultMaxTotalAttempts();\n+    private long responseTimeoutMillisForEachAttempt = Flags.defaultResponseTimeoutMillis();\n+    private int maxContentLength;\n+\n+    @Nullable\n+    private final RetryRule retryRule;\n+\n+    @Nullable\n+    private final RetryRuleWithContent<T> retryRuleWithContent;\n+\n+    /**\n+     * Returns a {@link RetryConfigBuilder} with this {@link RetryRule}.\n+     */\n+    RetryConfigBuilder(RetryRule retryRule) {\n+        this.retryRule = requireNonNull(retryRule, \"retryRule\");\n+        retryRuleWithContent = null;\n+        maxContentLength = 0;\n+    }\n+\n+    /**\n+     * Returns a {@link RetryConfigBuilder} with this {@link RetryRuleWithContent}.\n+     */\n+    RetryConfigBuilder(RetryRuleWithContent<T> retryRuleWithContent) {\n+        retryRule = null;\n+        this.retryRuleWithContent = requireNonNull(retryRuleWithContent, \"retryRuleWithContent\");\n+        maxContentLength = Integer.MAX_VALUE;\n+    }\n+\n+    /**\n+     * Sets the maxContentLength to be used with a {@link RetryRuleWithContent}.\n+     */\n+    public RetryConfigBuilder<T> maxContentLength(int maxContentLength) {\n+        checkArgument(maxContentLength > 0,\n+                      \"maxContentLength: %s (expected: > 0)\", maxContentLength);\n+        this.maxContentLength = maxContentLength;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets maxTotalAttempts.\n+     */\n+    public RetryConfigBuilder<T> maxTotalAttempts(int maxTotalAttempts) {\n+        checkArgument(\n+                maxTotalAttempts > 0,\n+                \"maxTotalAttempts: %s (expected: > 0)\",\n+                maxTotalAttempts);\n+        this.maxTotalAttempts = maxTotalAttempts;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets responseTimeoutMillisForEachAttempt.\n+     */\n+    public RetryConfigBuilder<T> responseTimeoutMillisForEachAttempt(long responseTimeoutMillisForEachAttempt) {\n+        checkArgument(\n+                responseTimeoutMillisForEachAttempt >= 0,\n+                \"responseTimeoutMillisForEachAttempt: %s (expected: >= 0)\",\n+                responseTimeoutMillisForEachAttempt);\n+        this.responseTimeoutMillisForEachAttempt = responseTimeoutMillisForEachAttempt;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets responseTimeoutMillisForEachAttempt by converting responseTimeoutForEachAttempt to millis.\n+     */\n+    public RetryConfigBuilder<T> responseTimeoutForEachAttempt(Duration responseTimeoutMillisForEachAttempt) {\n+        final long millis =\n+                requireNonNull(responseTimeoutMillisForEachAttempt, \"responseTimeoutMillisForEachAttempt\")\n+                        .toMillis();\n+        checkArgument(\n+                millis >= 0,\n+                \"responseTimeoutForEachAttempt.toMillis(): %s (expected: >= 0)\",\n+                millis);\n+        this.responseTimeoutMillisForEachAttempt = millis;\n+        return this;\n+    }\n+\n+    /**\n+     * Builds a {@link RetryConfig} from this builder's values and returns it.\n+     */\n+    public RetryConfig<T> build() {\n+        if (retryRule != null) {\n+            return new RetryConfig<>(retryRule, maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n+        }\n+        if (retryRuleWithContent != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d952ff1eba0879bb966991990adc6077baf07f"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3MzU1Nw==", "bodyText": "nit: tha -> the", "url": "https://github.com/line/armeria/pull/3145#discussion_r522573557", "createdAt": "2020-11-13T02:34:08Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfigMapping.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.function.BiFunction;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Returns a {@link RetryConfig} given the request context.\n+ */\n+@FunctionalInterface\n+public interface RetryConfigMapping<T extends Response> {\n+    /**\n+     * Creates a {@link KeyedRetryConfigMapping} that maps keys created by keyFactory to  {@link RetryConfig}s\n+     * created by retryConfigFactory.\n+     */\n+    static <T extends Response> RetryConfigMapping<T> of(\n+            BiFunction<? super ClientRequestContext, Request, String> keyFactory,\n+            BiFunction<? super ClientRequestContext, Request, RetryConfig<T>> retryConfigFactory) {\n+        return new KeyedRetryConfigMapping<>(keyFactory, retryConfigFactory);\n+    }\n+\n+    /**\n+     * Returns tha {@link RetryConfig} that maps to the given context/request.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d952ff1eba0879bb966991990adc6077baf07f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3NDE4Mg==", "bodyText": "@deprecated Use {@link #newDecorator(RetryConfig)}.", "url": "https://github.com/line/armeria/pull/3145#discussion_r522574182", "createdAt": "2020-11-13T02:36:19Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java", "diffHunk": "@@ -112,7 +131,10 @@ public static RetryingClientBuilder builder(RetryRuleWithContent<HttpResponse> r\n      *\n      * @param retryRule the retry rule\n      * @param maxTotalAttempts the maximum allowed number of total attempts\n+     *\n+     * @deprecated Use newDecorator(RetryConfig) instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d952ff1eba0879bb966991990adc6077baf07f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3NTM4OQ==", "bodyText": "ditto", "url": "https://github.com/line/armeria/pull/3145#discussion_r522575389", "createdAt": "2020-11-13T02:40:46Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java", "diffHunk": "@@ -51,7 +51,10 @@\n      *\n      * @param retryRuleWithContent the retry rule\n      * @param maxTotalAttempts the maximum number of total attempts\n+     *\n+     * @deprecated Use newDecorator(RetryConfig) instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d952ff1eba0879bb966991990adc6077baf07f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3NTgxMg==", "bodyText": "Should we leave a warning log if this is not true?", "url": "https://github.com/line/armeria/pull/3145#discussion_r522575812", "createdAt": "2020-11-13T02:42:27Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java", "diffHunk": "@@ -124,9 +167,13 @@ private void doExecute0(ClientRequestContext ctx, RpcRequest req,\n         final RpcResponse res = executeWithFallback(unwrap(), derivedCtx,\n                                                     (context, cause) -> RpcResponse.ofFailure(cause));\n \n+        final RetryConfig<RpcResponse> retryConfig = mapping().get(ctx, req);\n+        final RetryRuleWithContent<RpcResponse> retryRule =\n+                retryConfig.needsContentInRule() ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d952ff1eba0879bb966991990adc6077baf07f"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "948e99c513d6170bb3f59ac980860a27b0dc230b", "author": {"user": {"login": "haithamgabr", "name": "Haitham Gabr"}}, "url": "https://github.com/line/armeria/commit/948e99c513d6170bb3f59ac980860a27b0dc230b", "committedDate": "2020-11-13T04:22:36Z", "message": "Minor adjustments, addressing comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5ODY0NTE3", "url": "https://github.com/line/armeria/pull/3145#pullrequestreview-529864517", "createdAt": "2020-11-13T08:31:30Z", "commit": {"oid": "948e99c513d6170bb3f59ac980860a27b0dc230b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODozMTozMFrOHyk1kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwOToxNDoxM1rOHymcww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc5NDM4Ng==", "bodyText": "Could remove public? I think the method is an internal implementation.", "url": "https://github.com/line/armeria/pull/3145#discussion_r522794386", "createdAt": "2020-11-13T08:31:30Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfig.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Holds retry config used by a {@link RetryingClient}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, {@code maxTotalAttempts},\n+ * and {@code responseTimeoutMillisForEachAttempt}.\n+ */\n+public final class RetryConfig<T extends Response> {\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@link RetryRule}.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@link RetryRuleWithContent} with unlimited content length.\n+     */\n+    public static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    private final int maxTotalAttempts;\n+    private final long responseTimeoutMillisForEachAttempt;\n+    private final int maxContentLength;\n+    private final boolean needsContentInRule;\n+\n+    @Nullable\n+    private final RetryRule retryRule;\n+\n+    @Nullable\n+    private final RetryRuleWithContent<T> retryRuleWithContent;\n+\n+    @Nullable\n+    private final RetryRule fromRetryRuleWithContent;\n+\n+    RetryConfig(RetryRule retryRule, int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n+        checkArguments(maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n+        this.retryRule = requireNonNull(retryRule, \"retryRule\");\n+        this.maxTotalAttempts = maxTotalAttempts;\n+        this.responseTimeoutMillisForEachAttempt = responseTimeoutMillisForEachAttempt;\n+        needsContentInRule = false;\n+        maxContentLength = 0;\n+        retryRuleWithContent = null;\n+        fromRetryRuleWithContent = null;\n+    }\n+\n+    RetryConfig(\n+            RetryRuleWithContent<T> retryRuleWithContent,\n+            int maxContentLength,\n+            int maxTotalAttempts,\n+            long responseTimeoutMillisForEachAttempt) {\n+        checkArguments(maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n+        this.maxContentLength = maxContentLength;\n+        this.retryRuleWithContent = requireNonNull(retryRuleWithContent, \"retryRuleWithContent\");\n+        fromRetryRuleWithContent = RetryRuleUtil.fromRetryRuleWithContent(retryRuleWithContent);\n+        this.maxTotalAttempts = maxTotalAttempts;\n+        this.responseTimeoutMillisForEachAttempt = responseTimeoutMillisForEachAttempt;\n+        needsContentInRule = true;\n+        retryRule = null;\n+    }\n+\n+    private static void checkArguments(int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n+        checkArgument(\n+                maxTotalAttempts > 0,\n+                \"maxTotalAttempts: %s (expected: > 0)\",\n+                maxTotalAttempts);\n+        checkArgument(\n+                responseTimeoutMillisForEachAttempt >= 0,\n+                \"responseTimeoutMillisForEachAttempt: %s (expected: >= 0)\",\n+                responseTimeoutMillisForEachAttempt);\n+    }\n+\n+    /**\n+     * Converts this {@link RetryConfig} to a mutable {@link RetryConfigBuilder}.\n+     */\n+    public RetryConfigBuilder<T> toBuilder() {\n+        final RetryConfigBuilder<T> builder =\n+                needsContentInRule ?\n+                builder(retryRuleWithContent).maxContentLength(maxContentLength) : builder(retryRule);\n+        return builder\n+                .maxTotalAttempts(maxTotalAttempts)\n+                .responseTimeoutMillisForEachAttempt(responseTimeoutMillisForEachAttempt);\n+    }\n+\n+    /**\n+     * Returns the maximum allowed number of total attempts made by a {@link RetryingClient}.\n+     */\n+    public int maxTotalAttempts() {\n+        return maxTotalAttempts;\n+    }\n+\n+    /**\n+     * Returns the response timeout for each attempt in milliseconds.\n+     * When requests in {@link RetryingClient} are made,\n+     * corresponding responses are timed out by this value.\n+     */\n+    public long responseTimeoutMillisForEachAttempt() {\n+        return responseTimeoutMillisForEachAttempt;\n+    }\n+\n+    /**\n+     * Returns the {@link RetryRule} used by {@link RetryingClient} using this config, could be null.\n+     */\n+    @Nullable\n+    public RetryRule retryRule() {\n+        return retryRule;\n+    }\n+\n+    /**\n+     * Returns the {@link RetryRuleWithContent} used by {@link RetryingClient} using this config, could be null.\n+     */\n+    @Nullable\n+    public RetryRuleWithContent<T> retryRuleWithContent() {\n+        return retryRuleWithContent;\n+    }\n+\n+    /**\n+     * Returns the {@link RetryRuleWithContent} converted from the {@link RetryRule} of this config,\n+     * could be null.\n+     */\n+    @Nullable\n+    public RetryRule fromRetryRuleWithContent() {\n+        return fromRetryRuleWithContent;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948e99c513d6170bb3f59ac980860a27b0dc230b"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgyMDgwMw==", "bodyText": "This API is flexible but not user-friendly a bit. How about providing RetryConfigMappingBuilder for building RetryConfigMapping fluently.\nFor example:\nRetryConfigMapping.builder()\n                  .host(\"foo.com\", retryConfigForFoo)\n                  .path(\"/my/path1\", retryConfigForPath1)\n                  .path(\"/my/path2\", retryConfigForPath2)\n                  .mapping((ctx, req) =>{\n                      if(req.headers().get(\"SOME_HEADER\").equals(\"SOME_VALUE\")) {\n                          return someRetryConfigForFoo;\n                      }\n                      return null;\n                   })\n                   .build(fallbackRetryConfig);\nI don't think we need to cache RetryConfig by mapping the key. RetryConfig does not require to manage its status like a circuit breaker. Let users decide whether to reuse it or create a new one if they want to dynamically change the retry configuration.\nWhat do you think? @haithamgabr", "url": "https://github.com/line/armeria/pull/3145#discussion_r522820803", "createdAt": "2020-11-13T09:14:13Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/client/circuitbreaker/KeyedRetryConfigMappingTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.function.BiFunction;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.retry.RetryConfig;\n+import com.linecorp.armeria.client.retry.RetryConfigMapping;\n+import com.linecorp.armeria.client.retry.RetryRule;\n+import com.linecorp.armeria.client.retry.RetryRuleWithContent;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.RpcResponse;\n+\n+class KeyedRetryConfigMappingTest {\n+\n+    @Test\n+    void mapsCorrectly() throws Exception {\n+        final BiFunction<ClientRequestContext, Request, String> keyFactory =\n+                (ctx, req) -> ctx.endpoint().host() + '#' + ctx.path();\n+        final BiFunction<ClientRequestContext, Request, RetryConfig<RpcResponse>> configFactory =\n+                (ctx, req) -> {\n+            if (ctx.endpoint().host().equals(\"host1\")) {\n+                return RetryConfig.<RpcResponse>builder(RetryRule.onException())\n+                                  .maxTotalAttempts(1).responseTimeoutMillisForEachAttempt(1000).build();\n+            } else if (ctx.endpoint().host().equals(\"host2\")) {\n+                if (ctx.path().equals(\"/path2\")) {\n+                    return RetryConfig.<RpcResponse>builder(\n+                            RetryRuleWithContent.onResponse((c, r) -> completedFuture(true)))\n+                            .maxTotalAttempts(2).responseTimeoutMillisForEachAttempt(2000).build();\n+                } else {\n+                    return RetryConfig.<RpcResponse>builder(RetryRule.onException())\n+                                      .maxTotalAttempts(3).responseTimeoutMillisForEachAttempt(3000).build();\n+                }\n+            } else {\n+                return RetryConfig.<RpcResponse>builder(\n+                        RetryRuleWithContent.onResponse((c, r) -> completedFuture(false)))\n+                        .maxTotalAttempts(4).responseTimeoutMillisForEachAttempt(4000).build();\n+            }\n+        };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948e99c513d6170bb3f59ac980860a27b0dc230b"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f26b863955d83b01ce8773209a64c4822b4731df", "author": {"user": {"login": "haithamgabr", "name": "Haitham Gabr"}}, "url": "https://github.com/line/armeria/commit/f26b863955d83b01ce8773209a64c4822b4731df", "committedDate": "2020-11-13T18:05:10Z", "message": "Expanding RetryConfigMapping docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMTM5ODA2", "url": "https://github.com/line/armeria/pull/3145#pullrequestreview-531139806", "createdAt": "2020-11-16T09:20:59Z", "commit": {"oid": "f26b863955d83b01ce8773209a64c4822b4731df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOToyMDo1OVrOHzvM0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOToyMDo1OVrOHzvM0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAxMjc1Mw==", "bodyText": "Missing final", "url": "https://github.com/line/armeria/pull/3145#discussion_r524012753", "createdAt": "2020-11-16T09:20:59Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "diffHunk": "@@ -69,69 +68,37 @@\n     private static final AttributeKey<State> STATE =\n             AttributeKey.valueOf(AbstractRetryingClient.class, \"STATE\");\n \n-    @Nullable\n-    private final RetryRule retryRule;\n-\n-    @Nullable\n-    private final RetryRule fromRetryRuleWithContent;\n-\n-    @Nullable\n-    private final RetryRuleWithContent<O> retryRuleWithContent;\n-\n-    private final int maxTotalAttempts;\n-    private final long responseTimeoutMillisForEachAttempt;\n-\n-    /**\n-     * Creates a new instance that decorates the specified {@link Client}.\n-     */\n-    AbstractRetryingClient(Client<I, O> delegate, RetryRule retryRule,\n-                           int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n-        this(delegate, requireNonNull(retryRule, \"retryRule\"), null,\n-             maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n-    }\n+    private final RetryConfigMapping<O> mapping;\n+    private final RetryConfig retryConfig;\n \n     /**\n      * Creates a new instance that decorates the specified {@link Client}.\n      */\n-    AbstractRetryingClient(Client<I, O> delegate,\n-                           RetryRuleWithContent<O> retryRuleWithContent,\n-                           int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n-        this(delegate, null, requireNonNull(retryRuleWithContent, \"retryRuleWithContent\"),\n-             maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n-    }\n-\n-    /**\n-     * Creates a new instance that decorates the specified {@link Client}.\n-     */\n-    private AbstractRetryingClient(Client<I, O> delegate, @Nullable RetryRule retryRule,\n-                                   @Nullable RetryRuleWithContent<O> retryRuleWithContent,\n-                                   int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n+    AbstractRetryingClient(\n+            Client<I, O> delegate, RetryConfigMapping<O> mapping, @Nullable RetryConfig<O> retryConfig) {\n         super(delegate);\n-        this.retryRule = retryRule;\n-        this.retryRuleWithContent = retryRuleWithContent;\n-        if (retryRuleWithContent != null) {\n-            fromRetryRuleWithContent = RetryRuleUtil.fromRetryRuleWithContent(retryRuleWithContent);\n-        } else {\n-            fromRetryRuleWithContent = null;\n-        }\n-\n-        checkArgument(maxTotalAttempts > 0, \"maxTotalAttempts: %s (expected: > 0)\", maxTotalAttempts);\n-        this.maxTotalAttempts = maxTotalAttempts;\n-\n-        checkArgument(responseTimeoutMillisForEachAttempt >= 0,\n-                      \"responseTimeoutMillisForEachAttempt: %s (expected: >= 0)\",\n-                      responseTimeoutMillisForEachAttempt);\n-        this.responseTimeoutMillisForEachAttempt = responseTimeoutMillisForEachAttempt;\n+        this.mapping = requireNonNull(mapping, \"mapping\");\n+        this.retryConfig = retryConfig;\n     }\n \n     @Override\n     public final O execute(ClientRequestContext ctx, I req) throws Exception {\n-        final State state =\n-                new State(maxTotalAttempts, responseTimeoutMillisForEachAttempt, ctx.responseTimeoutMillis());\n+        final RetryConfig<O> config = mapping.get(ctx, req);\n+        final State state = new State(\n+                config.maxTotalAttempts(),\n+                config.responseTimeoutMillisForEachAttempt(),\n+                ctx.responseTimeoutMillis());\n         ctx.setAttr(STATE, state);\n         return doExecute(ctx, req);\n     }\n \n+    /**\n+     * Returns the current {@link RetryConfigMapping} set for this client.\n+     */\n+    protected RetryConfigMapping<O> mapping() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26b863955d83b01ce8773209a64c4822b4731df"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59c8e5df4dc5b2df779620d10666114914fbab92", "author": {"user": {"login": "haithamgabr", "name": "Haitham Gabr"}}, "url": "https://github.com/line/armeria/commit/59c8e5df4dc5b2df779620d10666114914fbab92", "committedDate": "2020-11-17T00:03:41Z", "message": "De-parameterizing RetryConfig.builder()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10504f64bfac6d6a02db53e7c4e6900559e3ae9f", "author": {"user": {"login": "haithamgabr", "name": "Haitham Gabr"}}, "url": "https://github.com/line/armeria/commit/10504f64bfac6d6a02db53e7c4e6900559e3ae9f", "committedDate": "2020-11-17T01:49:47Z", "message": "fixing unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f5c83dce7129cca702626b0e3d7c30ba8f07c5c", "author": {"user": {"login": "haithamgabr", "name": "Haitham Gabr"}}, "url": "https://github.com/line/armeria/commit/0f5c83dce7129cca702626b0e3d7c30ba8f07c5c", "committedDate": "2020-11-17T01:52:50Z", "message": "fixing unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMDU0NDU3", "url": "https://github.com/line/armeria/pull/3145#pullrequestreview-532054457", "createdAt": "2020-11-17T06:31:55Z", "commit": {"oid": "0f5c83dce7129cca702626b0e3d7c30ba8f07c5c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNjozMTo1NlrOH0mGPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNjozMTo1NlrOH0mGPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkxMjE5MQ==", "bodyText": "We usually don't mention http in HTTP methods. How about renaming builderForHttp to builder and renaming the package-local builder to something like builder0? Could we also move builderForHttp before builderForRpc? I guess people will look for non-RPC retry handlers first.", "url": "https://github.com/line/armeria/pull/3145#discussion_r524912191", "createdAt": "2020-11-17T06:31:56Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfig.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.RpcResponse;\n+\n+/**\n+ * Holds retry config used by a {@link RetryingClient}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, {@code maxTotalAttempts},\n+ * and {@code responseTimeoutMillisForEachAttempt}.\n+ */\n+public final class RetryConfig<T extends Response> {\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRuleWithContent<RpcResponse>}.\n+     */\n+    public static RetryConfigBuilder<RpcResponse> builderForRpc(\n+            RetryRuleWithContent<RpcResponse> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRule}.\n+     */\n+    public static RetryConfigBuilder<RpcResponse> builderForRpc(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRuleWithContent<HttpResponse>}.\n+     */\n+    public static RetryConfigBuilder<HttpResponse> builderForHttp(\n+            RetryRuleWithContent<HttpResponse> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRule}.\n+     */\n+    public static RetryConfigBuilder<HttpResponse> builderForHttp(RetryRule retryRule) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5c83dce7129cca702626b0e3d7c30ba8f07c5c"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNTA2MzAz", "url": "https://github.com/line/armeria/pull/3145#pullrequestreview-532506303", "createdAt": "2020-11-17T15:43:41Z", "commit": {"oid": "0f5c83dce7129cca702626b0e3d7c30ba8f07c5c"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNTo0Mzo0MlrOH07mkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjozOTowNlrOH0-VYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI2NDUzMA==", "bodyText": "Add @Nullable?", "url": "https://github.com/line/armeria/pull/3145#discussion_r525264530", "createdAt": "2020-11-17T15:43:42Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "diffHunk": "@@ -69,69 +68,37 @@\n     private static final AttributeKey<State> STATE =\n             AttributeKey.valueOf(AbstractRetryingClient.class, \"STATE\");\n \n-    @Nullable\n-    private final RetryRule retryRule;\n-\n-    @Nullable\n-    private final RetryRule fromRetryRuleWithContent;\n-\n-    @Nullable\n-    private final RetryRuleWithContent<O> retryRuleWithContent;\n-\n-    private final int maxTotalAttempts;\n-    private final long responseTimeoutMillisForEachAttempt;\n-\n-    /**\n-     * Creates a new instance that decorates the specified {@link Client}.\n-     */\n-    AbstractRetryingClient(Client<I, O> delegate, RetryRule retryRule,\n-                           int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n-        this(delegate, requireNonNull(retryRule, \"retryRule\"), null,\n-             maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n-    }\n+    private final RetryConfigMapping<O> mapping;\n+    private final RetryConfig retryConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5c83dce7129cca702626b0e3d7c30ba8f07c5c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3Njg1OA==", "bodyText": "How about removing needsContentInRule and checking by retryRuleWithContent !=  null for simplicity.", "url": "https://github.com/line/armeria/pull/3145#discussion_r525276858", "createdAt": "2020-11-17T15:58:42Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfig.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.RpcResponse;\n+\n+/**\n+ * Holds retry config used by a {@link RetryingClient}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, {@code maxTotalAttempts},\n+ * and {@code responseTimeoutMillisForEachAttempt}.\n+ */\n+public final class RetryConfig<T extends Response> {\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRuleWithContent<RpcResponse>}.\n+     */\n+    public static RetryConfigBuilder<RpcResponse> builderForRpc(\n+            RetryRuleWithContent<RpcResponse> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRule}.\n+     */\n+    public static RetryConfigBuilder<RpcResponse> builderForRpc(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRuleWithContent<HttpResponse>}.\n+     */\n+    public static RetryConfigBuilder<HttpResponse> builderForHttp(\n+            RetryRuleWithContent<HttpResponse> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRule}.\n+     */\n+    public static RetryConfigBuilder<HttpResponse> builderForHttp(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    static <T extends Response> RetryConfigBuilder<T> builder(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    private final int maxTotalAttempts;\n+    private final long responseTimeoutMillisForEachAttempt;\n+    private final int maxContentLength;\n+    private final boolean needsContentInRule;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5c83dce7129cca702626b0e3d7c30ba8f07c5c"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3ODE5OQ==", "bodyText": "Could be retryRuleWithContent != null?", "url": "https://github.com/line/armeria/pull/3145#discussion_r525278199", "createdAt": "2020-11-17T16:00:14Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfig.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.RpcResponse;\n+\n+/**\n+ * Holds retry config used by a {@link RetryingClient}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, {@code maxTotalAttempts},\n+ * and {@code responseTimeoutMillisForEachAttempt}.\n+ */\n+public final class RetryConfig<T extends Response> {\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRuleWithContent<RpcResponse>}.\n+     */\n+    public static RetryConfigBuilder<RpcResponse> builderForRpc(\n+            RetryRuleWithContent<RpcResponse> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRule}.\n+     */\n+    public static RetryConfigBuilder<RpcResponse> builderForRpc(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRuleWithContent<HttpResponse>}.\n+     */\n+    public static RetryConfigBuilder<HttpResponse> builderForHttp(\n+            RetryRuleWithContent<HttpResponse> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRule}.\n+     */\n+    public static RetryConfigBuilder<HttpResponse> builderForHttp(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    static <T extends Response> RetryConfigBuilder<T> builder(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    private final int maxTotalAttempts;\n+    private final long responseTimeoutMillisForEachAttempt;\n+    private final int maxContentLength;\n+    private final boolean needsContentInRule;\n+\n+    @Nullable\n+    private final RetryRule retryRule;\n+\n+    @Nullable\n+    private final RetryRuleWithContent<T> retryRuleWithContent;\n+\n+    @Nullable\n+    private final RetryRule fromRetryRuleWithContent;\n+\n+    RetryConfig(RetryRule retryRule, int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n+        checkArguments(maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n+        this.retryRule = requireNonNull(retryRule, \"retryRule\");\n+        this.maxTotalAttempts = maxTotalAttempts;\n+        this.responseTimeoutMillisForEachAttempt = responseTimeoutMillisForEachAttempt;\n+        needsContentInRule = false;\n+        maxContentLength = 0;\n+        retryRuleWithContent = null;\n+        fromRetryRuleWithContent = null;\n+    }\n+\n+    RetryConfig(\n+            RetryRuleWithContent<T> retryRuleWithContent,\n+            int maxContentLength,\n+            int maxTotalAttempts,\n+            long responseTimeoutMillisForEachAttempt) {\n+        checkArguments(maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n+        this.maxContentLength = maxContentLength;\n+        this.retryRuleWithContent = requireNonNull(retryRuleWithContent, \"retryRuleWithContent\");\n+        fromRetryRuleWithContent = RetryRuleUtil.fromRetryRuleWithContent(retryRuleWithContent);\n+        this.maxTotalAttempts = maxTotalAttempts;\n+        this.responseTimeoutMillisForEachAttempt = responseTimeoutMillisForEachAttempt;\n+        needsContentInRule = true;\n+        retryRule = null;\n+    }\n+\n+    private static void checkArguments(int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n+        checkArgument(\n+                maxTotalAttempts > 0,\n+                \"maxTotalAttempts: %s (expected: > 0)\",\n+                maxTotalAttempts);\n+        checkArgument(\n+                responseTimeoutMillisForEachAttempt >= 0,\n+                \"responseTimeoutMillisForEachAttempt: %s (expected: >= 0)\",\n+                responseTimeoutMillisForEachAttempt);\n+    }\n+\n+    /**\n+     * Converts this {@link RetryConfig} to a mutable {@link RetryConfigBuilder}.\n+     */\n+    public RetryConfigBuilder<T> toBuilder() {\n+        final RetryConfigBuilder<T> builder =\n+                needsContentInRule ?\n+                builder(retryRuleWithContent).maxContentLength(maxContentLength) : builder(retryRule);\n+        return builder\n+                .maxTotalAttempts(maxTotalAttempts)\n+                .responseTimeoutMillisForEachAttempt(responseTimeoutMillisForEachAttempt);\n+    }\n+\n+    /**\n+     * Returns the maximum allowed number of total attempts made by a {@link RetryingClient}.\n+     */\n+    public int maxTotalAttempts() {\n+        return maxTotalAttempts;\n+    }\n+\n+    /**\n+     * Returns the response timeout for each attempt in milliseconds.\n+     * When requests in {@link RetryingClient} are made,\n+     * corresponding responses are timed out by this value.\n+     */\n+    public long responseTimeoutMillisForEachAttempt() {\n+        return responseTimeoutMillisForEachAttempt;\n+    }\n+\n+    /**\n+     * Returns the {@link RetryRule} used by {@link RetryingClient} using this config, could be null.\n+     */\n+    @Nullable\n+    public RetryRule retryRule() {\n+        return retryRule;\n+    }\n+\n+    /**\n+     * Returns the {@link RetryRuleWithContent} used by {@link RetryingClient} using this config, could be null.\n+     */\n+    @Nullable\n+    public RetryRuleWithContent<T> retryRuleWithContent() {\n+        return retryRuleWithContent;\n+    }\n+\n+    /**\n+     * Returns config's {@code maxContentLength}, which is non-zero only if\n+     * a {@link RetryRuleWithContent} is used.\n+     */\n+    public int maxContentLength() {\n+        return maxContentLength;\n+    }\n+\n+    /**\n+     * Returns whether a {@link RetryRuleWithContent} is being used.\n+     */\n+    public boolean needsContentInRule() {\n+        return needsContentInRule;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5c83dce7129cca702626b0e3d7c30ba8f07c5c"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4MTUxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Creates a {@link KeyedRetryConfigMapping} that maps keys created by {@code keyFactory} to\n          \n          \n            \n                 * Creates a {@link RetryConfigMapping} that maps keys created by {@code keyFactory} to\n          \n      \n    \n    \n  \n\nBecause KeyedRetryConfigMapping is an internal class that is not exposed by Javadoc.", "url": "https://github.com/line/armeria/pull/3145#discussion_r525281513", "createdAt": "2020-11-17T16:04:31Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfigMapping.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.function.BiFunction;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Returns a {@link RetryConfig} given the request context.\n+ * Allows users to change retry behavior according to any context element, like host, method, path ...etc.\n+ */\n+@FunctionalInterface\n+public interface RetryConfigMapping<T extends Response> {\n+    /**\n+     * Creates a {@link KeyedRetryConfigMapping} that maps keys created by {@code keyFactory} to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5c83dce7129cca702626b0e3d7c30ba8f07c5c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5NDQ5OQ==", "bodyText": "I think we don't need to keep fromRetryRuleWithContent as a member field. How about removing fromRetryRuleWithContent and making retryRule not null always? i.e.,\nretryRule = RetryRuleUtil.fromRetryRuleWithContent(retryRuleWithContent);", "url": "https://github.com/line/armeria/pull/3145#discussion_r525294499", "createdAt": "2020-11-17T16:21:08Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfig.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.RpcResponse;\n+\n+/**\n+ * Holds retry config used by a {@link RetryingClient}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, {@code maxTotalAttempts},\n+ * and {@code responseTimeoutMillisForEachAttempt}.\n+ */\n+public final class RetryConfig<T extends Response> {\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRuleWithContent<RpcResponse>}.\n+     */\n+    public static RetryConfigBuilder<RpcResponse> builderForRpc(\n+            RetryRuleWithContent<RpcResponse> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRule}.\n+     */\n+    public static RetryConfigBuilder<RpcResponse> builderForRpc(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRuleWithContent<HttpResponse>}.\n+     */\n+    public static RetryConfigBuilder<HttpResponse> builderForHttp(\n+            RetryRuleWithContent<HttpResponse> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRule}.\n+     */\n+    public static RetryConfigBuilder<HttpResponse> builderForHttp(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    static <T extends Response> RetryConfigBuilder<T> builder(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    private final int maxTotalAttempts;\n+    private final long responseTimeoutMillisForEachAttempt;\n+    private final int maxContentLength;\n+    private final boolean needsContentInRule;\n+\n+    @Nullable\n+    private final RetryRule retryRule;\n+\n+    @Nullable\n+    private final RetryRuleWithContent<T> retryRuleWithContent;\n+\n+    @Nullable\n+    private final RetryRule fromRetryRuleWithContent;\n+\n+    RetryConfig(RetryRule retryRule, int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n+        checkArguments(maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n+        this.retryRule = requireNonNull(retryRule, \"retryRule\");\n+        this.maxTotalAttempts = maxTotalAttempts;\n+        this.responseTimeoutMillisForEachAttempt = responseTimeoutMillisForEachAttempt;\n+        needsContentInRule = false;\n+        maxContentLength = 0;\n+        retryRuleWithContent = null;\n+        fromRetryRuleWithContent = null;\n+    }\n+\n+    RetryConfig(\n+            RetryRuleWithContent<T> retryRuleWithContent,\n+            int maxContentLength,\n+            int maxTotalAttempts,\n+            long responseTimeoutMillisForEachAttempt) {\n+        checkArguments(maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n+        this.maxContentLength = maxContentLength;\n+        this.retryRuleWithContent = requireNonNull(retryRuleWithContent, \"retryRuleWithContent\");\n+        fromRetryRuleWithContent = RetryRuleUtil.fromRetryRuleWithContent(retryRuleWithContent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5c83dce7129cca702626b0e3d7c30ba8f07c5c"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMwOTI4MQ==", "bodyText": "In my opinion\n\nIt would be noisy to leave a warn message every time.\nIt is not efficient to convert RetryRule to RetryRuleWithContent everytime.\n\nHow about adding a package-private method to RetryConfig such as\nclass RetryConfig {\n\tRetryRuleWithContent<T> fromRetryRule() {\n\t    if (fromRetryRule == null) {\n\t      logger.warn(\"...\")\n\t      fromRetryRule = RetryRuleUtil.fromRetryRule(retryConfig.retryRule());\n\t    }\n\t    return fromRetryRule;\n\t}\n}", "url": "https://github.com/line/armeria/pull/3145#discussion_r525309281", "createdAt": "2020-11-17T16:39:06Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java", "diffHunk": "@@ -124,9 +172,16 @@ private void doExecute0(ClientRequestContext ctx, RpcRequest req,\n         final RpcResponse res = executeWithFallback(unwrap(), derivedCtx,\n                                                     (context, cause) -> RpcResponse.ofFailure(cause));\n \n+        final RetryConfig<RpcResponse> retryConfig = mapping().get(ctx, req);\n+        if (!retryConfig.needsContentInRule()) {\n+            logger.warn(\"RetryingRpcClient is being used with RetryRule (without content).\");\n+        }\n+        final RetryRuleWithContent<RpcResponse> retryRule =\n+                retryConfig.needsContentInRule() ?\n+                retryConfig.retryRuleWithContent() : RetryRuleUtil.fromRetryRule(retryConfig.retryRule());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5c83dce7129cca702626b0e3d7c30ba8f07c5c"}, "originalPosition": 112}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3109b2f082ab7bded1467bdcd5763234b08aeeb", "author": {"user": {"login": "haithamgabr", "name": "Haitham Gabr"}}, "url": "https://github.com/line/armeria/commit/b3109b2f082ab7bded1467bdcd5763234b08aeeb", "committedDate": "2020-11-18T00:08:53Z", "message": "Refactoring RetryConfig.fomRetryRule()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyOTQxODQ2", "url": "https://github.com/line/armeria/pull/3145#pullrequestreview-532941846", "createdAt": "2020-11-18T01:19:26Z", "commit": {"oid": "b3109b2f082ab7bded1467bdcd5763234b08aeeb"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMToxOToyNlrOH1SDWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMTozNDozNVrOH1SWxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYzMjM0NA==", "bodyText": "nit: two spaces before instead", "url": "https://github.com/line/armeria/pull/3145#discussion_r525632344", "createdAt": "2020-11-18T01:19:26Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClientBuilder.java", "diffHunk": "@@ -104,30 +105,37 @@ final int maxTotalAttempts() {\n      * @return {@code this} to support method chaining.\n      *\n      * @see <a href=\"https://armeria.dev/docs/client-retry#per-attempt-timeout\">Per-attempt timeout</a>\n+     *\n+     * @deprecated Use {@link RetryConfigBuilder#responseTimeoutMillisForEachAttempt(long)}  instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3109b2f082ab7bded1467bdcd5763234b08aeeb"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYzMjkwOQ==", "bodyText": "nit: {@link Flags}\nOr I think we could just do:\nReturns a new {@link RetryConfigBuilder} with the specified {@link RetryRule}.", "url": "https://github.com/line/armeria/pull/3145#discussion_r525632909", "createdAt": "2020-11-18T01:21:00Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfig.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.RpcResponse;\n+\n+/**\n+ * Holds retry config used by a {@link RetryingClient}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, {@code maxTotalAttempts},\n+ * and {@code responseTimeoutMillisForEachAttempt}.\n+ */\n+public final class RetryConfig<T extends Response> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(RetryConfig.class);\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3109b2f082ab7bded1467bdcd5763234b08aeeb"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYzNjczNA==", "bodyText": "How about making a private constructor and check it there?\nRetryConfig(RetryRule retryRule, int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n    this(requireNonNull(retryRule, \"retryRule\"),\n         null, 0, maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n}\n\nRetryConfig(RetryRuleWithContent<T> retryRuleWithContent, int maxContentLength, int maxTotalAttempts,\n            long responseTimeoutMillisForEachAttempt) {\n    this(null, requireNonNull(retryRuleWithContent, \"retryRuleWithContent\"), maxContentLength,\n         maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n}\n\nprivate RetryConfig(@Nullable RetryRule retryRule, @Nullable RetryRuleWithContent<T> retryRuleWithContent,\n                    int maxContentLength, int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n    checkArgument(maxTotalAttempts > 0, \"maxTotalAttempts: %s (expected: > 0)\", maxTotalAttempts);\n    ...\n}", "url": "https://github.com/line/armeria/pull/3145#discussion_r525636734", "createdAt": "2020-11-18T01:32:46Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfig.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.RpcResponse;\n+\n+/**\n+ * Holds retry config used by a {@link RetryingClient}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, {@code maxTotalAttempts},\n+ * and {@code responseTimeoutMillisForEachAttempt}.\n+ */\n+public final class RetryConfig<T extends Response> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(RetryConfig.class);\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRule}.\n+     */\n+    public static RetryConfigBuilder<HttpResponse> builder(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRuleWithContent<HttpResponse>}.\n+     */\n+    public static RetryConfigBuilder<HttpResponse> builder(\n+            RetryRuleWithContent<HttpResponse> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRule}.\n+     */\n+    public static RetryConfigBuilder<RpcResponse> builderForRpc(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRuleWithContent<RpcResponse>}.\n+     */\n+    public static RetryConfigBuilder<RpcResponse> builderForRpc(\n+            RetryRuleWithContent<RpcResponse> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    static <T extends Response> RetryConfigBuilder<T> builder0(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    static <T extends Response> RetryConfigBuilder<T> builder0(\n+            RetryRuleWithContent<T> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    private final int maxTotalAttempts;\n+    private final long responseTimeoutMillisForEachAttempt;\n+    private final int maxContentLength;\n+\n+    @Nullable\n+    private final RetryRule retryRule;\n+\n+    @Nullable\n+    private final RetryRuleWithContent<T> retryRuleWithContent;\n+\n+    @Nullable\n+    private final RetryRule fromRetryRuleWithContent;\n+\n+    @Nullable\n+    private RetryRuleWithContent<T> fromRetryRule;\n+\n+    RetryConfig(RetryRule retryRule, int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n+        checkArguments(maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n+        this.retryRule = requireNonNull(retryRule, \"retryRule\");\n+        this.maxTotalAttempts = maxTotalAttempts;\n+        this.responseTimeoutMillisForEachAttempt = responseTimeoutMillisForEachAttempt;\n+        maxContentLength = 0;\n+        retryRuleWithContent = null;\n+        fromRetryRuleWithContent = null;\n+    }\n+\n+    RetryConfig(\n+            RetryRuleWithContent<T> retryRuleWithContent,\n+            int maxContentLength,\n+            int maxTotalAttempts,\n+            long responseTimeoutMillisForEachAttempt) {\n+        checkArguments(maxTotalAttempts, responseTimeoutMillisForEachAttempt);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3109b2f082ab7bded1467bdcd5763234b08aeeb"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYzNzMxOQ==", "bodyText": "indentation?", "url": "https://github.com/line/armeria/pull/3145#discussion_r525637319", "createdAt": "2020-11-18T01:34:35Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfig.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.RpcResponse;\n+\n+/**\n+ * Holds retry config used by a {@link RetryingClient}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, {@code maxTotalAttempts},\n+ * and {@code responseTimeoutMillisForEachAttempt}.\n+ */\n+public final class RetryConfig<T extends Response> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(RetryConfig.class);\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRule}.\n+     */\n+    public static RetryConfigBuilder<HttpResponse> builder(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRuleWithContent<HttpResponse>}.\n+     */\n+    public static RetryConfigBuilder<HttpResponse> builder(\n+            RetryRuleWithContent<HttpResponse> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRule}.\n+     */\n+    public static RetryConfigBuilder<RpcResponse> builderForRpc(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRuleWithContent<RpcResponse>}.\n+     */\n+    public static RetryConfigBuilder<RpcResponse> builderForRpc(\n+            RetryRuleWithContent<RpcResponse> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    static <T extends Response> RetryConfigBuilder<T> builder0(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    static <T extends Response> RetryConfigBuilder<T> builder0(\n+            RetryRuleWithContent<T> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    private final int maxTotalAttempts;\n+    private final long responseTimeoutMillisForEachAttempt;\n+    private final int maxContentLength;\n+\n+    @Nullable\n+    private final RetryRule retryRule;\n+\n+    @Nullable\n+    private final RetryRuleWithContent<T> retryRuleWithContent;\n+\n+    @Nullable\n+    private final RetryRule fromRetryRuleWithContent;\n+\n+    @Nullable\n+    private RetryRuleWithContent<T> fromRetryRule;\n+\n+    RetryConfig(RetryRule retryRule, int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n+        checkArguments(maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n+        this.retryRule = requireNonNull(retryRule, \"retryRule\");\n+        this.maxTotalAttempts = maxTotalAttempts;\n+        this.responseTimeoutMillisForEachAttempt = responseTimeoutMillisForEachAttempt;\n+        maxContentLength = 0;\n+        retryRuleWithContent = null;\n+        fromRetryRuleWithContent = null;\n+    }\n+\n+    RetryConfig(\n+            RetryRuleWithContent<T> retryRuleWithContent,\n+            int maxContentLength,\n+            int maxTotalAttempts,\n+            long responseTimeoutMillisForEachAttempt) {\n+        checkArguments(maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n+        this.maxContentLength = maxContentLength;\n+        this.retryRuleWithContent = requireNonNull(retryRuleWithContent, \"retryRuleWithContent\");\n+        fromRetryRuleWithContent = RetryRuleUtil.fromRetryRuleWithContent(retryRuleWithContent);\n+        this.maxTotalAttempts = maxTotalAttempts;\n+        this.responseTimeoutMillisForEachAttempt = responseTimeoutMillisForEachAttempt;\n+        retryRule = null;\n+    }\n+\n+    private static void checkArguments(int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n+        checkArgument(\n+                maxTotalAttempts > 0,\n+                \"maxTotalAttempts: %s (expected: > 0)\",\n+                maxTotalAttempts);\n+        checkArgument(\n+                responseTimeoutMillisForEachAttempt >= 0,\n+                \"responseTimeoutMillisForEachAttempt: %s (expected: >= 0)\",\n+                responseTimeoutMillisForEachAttempt);\n+    }\n+\n+    /**\n+     * Converts this {@link RetryConfig} to a mutable {@link RetryConfigBuilder}.\n+     */\n+    public RetryConfigBuilder<T> toBuilder() {\n+        final RetryConfigBuilder<T> builder =\n+                retryRuleWithContent != null ?\n+                builder0(retryRuleWithContent).maxContentLength(maxContentLength) : builder0(retryRule);\n+        return builder\n+                .maxTotalAttempts(maxTotalAttempts)\n+                .responseTimeoutMillisForEachAttempt(responseTimeoutMillisForEachAttempt);\n+    }\n+\n+    /**\n+     * Returns the maximum allowed number of total attempts made by a {@link RetryingClient}.\n+     */\n+    public int maxTotalAttempts() {\n+        return maxTotalAttempts;\n+    }\n+\n+    /**\n+     * Returns the response timeout for each attempt in milliseconds.\n+     * When requests in {@link RetryingClient} are made,\n+     * corresponding responses are timed out by this value.\n+     */\n+    public long responseTimeoutMillisForEachAttempt() {\n+        return responseTimeoutMillisForEachAttempt;\n+    }\n+\n+    /**\n+     * Returns the {@link RetryRule} used by {@link RetryingClient} using this config, could be null.\n+     */\n+    @Nullable\n+    public RetryRule retryRule() {\n+        return retryRule;\n+    }\n+\n+    /**\n+     * Returns the {@link RetryRuleWithContent} used by {@link RetryingClient} using this config, could be null.\n+     */\n+    @Nullable\n+    public RetryRuleWithContent<T> retryRuleWithContent() {\n+        return retryRuleWithContent;\n+    }\n+\n+    /**\n+     * Returns config's {@code maxContentLength}, which is non-zero only if\n+     * a {@link RetryRuleWithContent} is used.\n+     */\n+    public int maxContentLength() {\n+        return maxContentLength;\n+    }\n+\n+    /**\n+     * Returns whether a {@link RetryRuleWithContent} is being used.\n+     */\n+    public boolean needsContentInRule() {\n+        return retryRuleWithContent != null;\n+    }\n+\n+    /**\n+     * Returns whether the associated {@link RetryRule} or {@link RetryRuleWithContent} requires\n+     * response trailers.\n+     */\n+    public boolean requiresResponseTrailers() {\n+        return needsContentInRule() ?\n+               retryRuleWithContent().requiresResponseTrailers() : retryRule().requiresResponseTrailers();\n+    }\n+\n+    /**\n+     * Returns the {@link RetryRuleWithContent} converted from the {@link RetryRule} of this config.\n+     */\n+    RetryRule fromRetryRuleWithContent() {\n+        requireNonNull(retryRuleWithContent, \"retryRuleWithContent\");\n+        requireNonNull(fromRetryRuleWithContent, \"fromRetryRuleWithContent\");\n+        return fromRetryRuleWithContent;\n+    }\n+\n+    /**\n+     * Returns the {@link RetryRule} converted from the {@link RetryRuleWithContent} of this config.\n+     */\n+    RetryRuleWithContent<T> fromRetryRule() {\n+        requireNonNull(retryRule, \"retryRule\");\n+        if (fromRetryRule == null) {\n+            logger.warn(\"A RetryRuleWithContent is being generated from a RetryRule. \" +\n+                    \"You are probably using a RetryRule with a RetryingRpcClient. \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3109b2f082ab7bded1467bdcd5763234b08aeeb"}, "originalPosition": 218}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyOTc4MDU1", "url": "https://github.com/line/armeria/pull/3145#pullrequestreview-532978055", "createdAt": "2020-11-18T02:00:37Z", "commit": {"oid": "b3109b2f082ab7bded1467bdcd5763234b08aeeb"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjowMDozN1rOH1S3rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjowMDozN1rOH1S3rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0NTc0MQ==", "bodyText": "Yeah. That is a good point. Let's keep the current API", "url": "https://github.com/line/armeria/pull/3145#discussion_r525645741", "createdAt": "2020-11-18T02:00:37Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryConfig.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.RpcResponse;\n+\n+/**\n+ * Holds retry config used by a {@link RetryingClient}.\n+ * A {@link RetryConfig} instance encapsulates the used {@link RetryRule}, {@code maxTotalAttempts},\n+ * and {@code responseTimeoutMillisForEachAttempt}.\n+ */\n+public final class RetryConfig<T extends Response> {\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRuleWithContent<RpcResponse>}.\n+     */\n+    public static RetryConfigBuilder<RpcResponse> builderForRpc(\n+            RetryRuleWithContent<RpcResponse> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRule}.\n+     */\n+    public static RetryConfigBuilder<RpcResponse> builderForRpc(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRuleWithContent<HttpResponse>}.\n+     */\n+    public static RetryConfigBuilder<HttpResponse> builderForHttp(\n+            RetryRuleWithContent<HttpResponse> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    /**\n+     * Returns a new {@link RetryConfigBuilder} with the default values from Flags.\n+     * Uses a {@code RetryRule}.\n+     */\n+    public static RetryConfigBuilder<HttpResponse> builderForHttp(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    static <T extends Response> RetryConfigBuilder<T> builder(RetryRule retryRule) {\n+        return new RetryConfigBuilder<>(retryRule);\n+    }\n+\n+    static <T extends Response> RetryConfigBuilder<T> builder(\n+            RetryRuleWithContent<T> retryRuleWithContent) {\n+        return new RetryConfigBuilder<>(retryRuleWithContent);\n+    }\n+\n+    private final int maxTotalAttempts;\n+    private final long responseTimeoutMillisForEachAttempt;\n+    private final int maxContentLength;\n+    private final boolean needsContentInRule;\n+\n+    @Nullable\n+    private final RetryRule retryRule;\n+\n+    @Nullable\n+    private final RetryRuleWithContent<T> retryRuleWithContent;\n+\n+    @Nullable\n+    private final RetryRule fromRetryRuleWithContent;\n+\n+    RetryConfig(RetryRule retryRule, int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {\n+        checkArguments(maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n+        this.retryRule = requireNonNull(retryRule, \"retryRule\");\n+        this.maxTotalAttempts = maxTotalAttempts;\n+        this.responseTimeoutMillisForEachAttempt = responseTimeoutMillisForEachAttempt;\n+        needsContentInRule = false;\n+        maxContentLength = 0;\n+        retryRuleWithContent = null;\n+        fromRetryRuleWithContent = null;\n+    }\n+\n+    RetryConfig(\n+            RetryRuleWithContent<T> retryRuleWithContent,\n+            int maxContentLength,\n+            int maxTotalAttempts,\n+            long responseTimeoutMillisForEachAttempt) {\n+        checkArguments(maxTotalAttempts, responseTimeoutMillisForEachAttempt);\n+        this.maxContentLength = maxContentLength;\n+        this.retryRuleWithContent = requireNonNull(retryRuleWithContent, \"retryRuleWithContent\");\n+        fromRetryRuleWithContent = RetryRuleUtil.fromRetryRuleWithContent(retryRuleWithContent);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5NDQ5OQ=="}, "originalCommit": {"oid": "0f5c83dce7129cca702626b0e3d7c30ba8f07c5c"}, "originalPosition": 111}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cdcd345179dcfcab334b0f77c5846fd2fc8681b", "author": {"user": {"login": "haithamgabr", "name": "Haitham Gabr"}}, "url": "https://github.com/line/armeria/commit/5cdcd345179dcfcab334b0f77c5846fd2fc8681b", "committedDate": "2020-11-18T02:53:59Z", "message": "Minor refactorings"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4788, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}