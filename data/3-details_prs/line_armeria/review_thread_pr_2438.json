{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NjgyMDYz", "number": 2438, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMzo1NDoxOFrODcZr_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjoxNjoxMlrODdMSNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTA3NTgzOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMzo1NDoxOFrOFkcO6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQxMDowNDoyMVrOFkhAIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NTYyNQ==", "bodyText": "I think you can use reflection for completeness.", "url": "https://github.com/line/armeria/pull/2438#discussion_r373755625", "createdAt": "2020-02-01T03:54:18Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertSame;\n+\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames\n+ */\n+class MediaTypeNamesTest {\n+\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9414eec0842085bf1fb803593e26f29148766db4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzc2MQ==", "bodyText": "Oh! Let me use reflection referencing MediaTypeTest", "url": "https://github.com/line/armeria/pull/2438#discussion_r373833761", "createdAt": "2020-02-02T10:04:21Z", "author": {"login": "JunoJunho"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertSame;\n+\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames\n+ */\n+class MediaTypeNamesTest {\n+\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NTYyNQ=="}, "originalCommit": {"oid": "9414eec0842085bf1fb803593e26f29148766db4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTA3NjQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/MediaTypeNames.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMzo1NTo1MFrOFkcPMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMzo1ODowMVrOFlEGlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NTY5OQ==", "bodyText": "Missing Javadoc. Could use the string in verbatim, e.g.\n/**\n * {@value #ANY_TYPE}.\n */\n// or..\n/**\n * {@code \"*/*\"}.\n */", "url": "https://github.com/line/armeria/pull/2438#discussion_r373755699", "createdAt": "2020-02-01T03:55:50Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/MediaTypeNames.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+public final class MediaTypeNames {\n+\n+    public static final String ANY_TYPE = \"*/*\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9414eec0842085bf1fb803593e26f29148766db4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg0NTgxOQ==", "bodyText": "For all constants? What your intention is showing the value in javadoc?\nI think first suggestion is better because it seems good to later when editing this code.", "url": "https://github.com/line/armeria/pull/2438#discussion_r373845819", "createdAt": "2020-02-02T13:26:01Z", "author": {"login": "JunoJunho"}, "path": "core/src/main/java/com/linecorp/armeria/common/MediaTypeNames.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+public final class MediaTypeNames {\n+\n+    public static final String ANY_TYPE = \"*/*\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NTY5OQ=="}, "originalCommit": {"oid": "9414eec0842085bf1fb803593e26f29148766db4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwODg1NQ==", "bodyText": "When working with IDE, it will show the value of the constant in quick documentation, auto-completion hints, etc.", "url": "https://github.com/line/armeria/pull/2438#discussion_r374408855", "createdAt": "2020-02-03T23:58:01Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/MediaTypeNames.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+public final class MediaTypeNames {\n+\n+    public static final String ANY_TYPE = \"*/*\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NTY5OQ=="}, "originalCommit": {"oid": "9414eec0842085bf1fb803593e26f29148766db4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjE1MjA0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMjowMDoxMlrOFkk6Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDowODozNFrOFkyifg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5Nzc5NQ==", "bodyText": "FluentIterable is a discouraged precursor by its Javadoc. How about using Stream.of(clazz.getDeclaredFields()).filter...?", "url": "https://github.com/line/armeria/pull/2438#discussion_r373897795", "createdAt": "2020-02-03T02:00:12Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.lang.reflect.Modifier.isFinal;\n+import static java.lang.reflect.Modifier.isPublic;\n+import static java.lang.reflect.Modifier.isStatic;\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.FluentIterable;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames.\n+ */\n+class MediaTypeNamesTest {\n+\n+    // reflection\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {\n+        final FluentIterable<Field> mediaTypeFields = getConstantFields(MediaType.class);\n+        final FluentIterable<Field> mediaTypeNamesFields = getConstantFields(MediaTypeNames.class);\n+\n+        final Map<String, MediaType> mediaTypeConstantsMap =\n+                getConstantFieldMap(mediaTypeFields, MediaType.class);\n+        final Map<String, String> mediaTypeNamesConstantsMap =\n+                getConstantFieldMap(mediaTypeNamesFields, String.class);\n+\n+        for (Entry<String, MediaType> mediaTypeEntry : mediaTypeConstantsMap.entrySet()) {\n+            final String mediaTypeName = mediaTypeNamesConstantsMap.get(mediaTypeEntry.getKey());\n+            assertNotNull(\"MediaTypeName should be defined in MediaType constants\", mediaTypeName);\n+            assertEquals(mediaTypeName, mediaTypeEntry.getValue().toString());\n+        }\n+    }\n+\n+    // reflection\n+    @SuppressWarnings(\"Guava\")\n+    private static <T> FluentIterable<Field> getConstantFields(Class<T> clazz) {\n+        return FluentIterable.from(asList(clazz.getDeclaredFields())).filter(input -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd61475fa2f8daa8d0d9fcc4988f04e42453c3bc"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkwNDY4Ng==", "bodyText": "Found out that this code is from MediaTypeTest. How about making the method as package-private and reusing here?", "url": "https://github.com/line/armeria/pull/2438#discussion_r373904686", "createdAt": "2020-02-03T02:51:54Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.lang.reflect.Modifier.isFinal;\n+import static java.lang.reflect.Modifier.isPublic;\n+import static java.lang.reflect.Modifier.isStatic;\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.FluentIterable;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames.\n+ */\n+class MediaTypeNamesTest {\n+\n+    // reflection\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {\n+        final FluentIterable<Field> mediaTypeFields = getConstantFields(MediaType.class);\n+        final FluentIterable<Field> mediaTypeNamesFields = getConstantFields(MediaTypeNames.class);\n+\n+        final Map<String, MediaType> mediaTypeConstantsMap =\n+                getConstantFieldMap(mediaTypeFields, MediaType.class);\n+        final Map<String, String> mediaTypeNamesConstantsMap =\n+                getConstantFieldMap(mediaTypeNamesFields, String.class);\n+\n+        for (Entry<String, MediaType> mediaTypeEntry : mediaTypeConstantsMap.entrySet()) {\n+            final String mediaTypeName = mediaTypeNamesConstantsMap.get(mediaTypeEntry.getKey());\n+            assertNotNull(\"MediaTypeName should be defined in MediaType constants\", mediaTypeName);\n+            assertEquals(mediaTypeName, mediaTypeEntry.getValue().toString());\n+        }\n+    }\n+\n+    // reflection\n+    @SuppressWarnings(\"Guava\")\n+    private static <T> FluentIterable<Field> getConstantFields(Class<T> clazz) {\n+        return FluentIterable.from(asList(clazz.getDeclaredFields())).filter(input -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5Nzc5NQ=="}, "originalCommit": {"oid": "dd61475fa2f8daa8d0d9fcc4988f04e42453c3bc"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyMDU3OQ==", "bodyText": "Yes, it is from guava test and it is no problem since they are used in verified way (in Guava).\nI will make the method as package-private and re-using.", "url": "https://github.com/line/armeria/pull/2438#discussion_r374120579", "createdAt": "2020-02-03T14:07:38Z", "author": {"login": "JunoJunho"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.lang.reflect.Modifier.isFinal;\n+import static java.lang.reflect.Modifier.isPublic;\n+import static java.lang.reflect.Modifier.isStatic;\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.FluentIterable;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames.\n+ */\n+class MediaTypeNamesTest {\n+\n+    // reflection\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {\n+        final FluentIterable<Field> mediaTypeFields = getConstantFields(MediaType.class);\n+        final FluentIterable<Field> mediaTypeNamesFields = getConstantFields(MediaTypeNames.class);\n+\n+        final Map<String, MediaType> mediaTypeConstantsMap =\n+                getConstantFieldMap(mediaTypeFields, MediaType.class);\n+        final Map<String, String> mediaTypeNamesConstantsMap =\n+                getConstantFieldMap(mediaTypeNamesFields, String.class);\n+\n+        for (Entry<String, MediaType> mediaTypeEntry : mediaTypeConstantsMap.entrySet()) {\n+            final String mediaTypeName = mediaTypeNamesConstantsMap.get(mediaTypeEntry.getKey());\n+            assertNotNull(\"MediaTypeName should be defined in MediaType constants\", mediaTypeName);\n+            assertEquals(mediaTypeName, mediaTypeEntry.getValue().toString());\n+        }\n+    }\n+\n+    // reflection\n+    @SuppressWarnings(\"Guava\")\n+    private static <T> FluentIterable<Field> getConstantFields(Class<T> clazz) {\n+        return FluentIterable.from(asList(clazz.getDeclaredFields())).filter(input -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5Nzc5NQ=="}, "originalCommit": {"oid": "dd61475fa2f8daa8d0d9fcc4988f04e42453c3bc"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyMTA4Ng==", "bodyText": "But little-bit edit is applied (Class parameter) I think it is okay to me. If any issue, please tell me.", "url": "https://github.com/line/armeria/pull/2438#discussion_r374121086", "createdAt": "2020-02-03T14:08:34Z", "author": {"login": "JunoJunho"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.lang.reflect.Modifier.isFinal;\n+import static java.lang.reflect.Modifier.isPublic;\n+import static java.lang.reflect.Modifier.isStatic;\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.FluentIterable;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames.\n+ */\n+class MediaTypeNamesTest {\n+\n+    // reflection\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {\n+        final FluentIterable<Field> mediaTypeFields = getConstantFields(MediaType.class);\n+        final FluentIterable<Field> mediaTypeNamesFields = getConstantFields(MediaTypeNames.class);\n+\n+        final Map<String, MediaType> mediaTypeConstantsMap =\n+                getConstantFieldMap(mediaTypeFields, MediaType.class);\n+        final Map<String, String> mediaTypeNamesConstantsMap =\n+                getConstantFieldMap(mediaTypeNamesFields, String.class);\n+\n+        for (Entry<String, MediaType> mediaTypeEntry : mediaTypeConstantsMap.entrySet()) {\n+            final String mediaTypeName = mediaTypeNamesConstantsMap.get(mediaTypeEntry.getKey());\n+            assertNotNull(\"MediaTypeName should be defined in MediaType constants\", mediaTypeName);\n+            assertEquals(mediaTypeName, mediaTypeEntry.getValue().toString());\n+        }\n+    }\n+\n+    // reflection\n+    @SuppressWarnings(\"Guava\")\n+    private static <T> FluentIterable<Field> getConstantFields(Class<T> clazz) {\n+        return FluentIterable.from(asList(clazz.getDeclaredFields())).filter(input -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5Nzc5NQ=="}, "originalCommit": {"oid": "dd61475fa2f8daa8d0d9fcc4988f04e42453c3bc"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjE1MzMzOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMjowMTo0N1rOFkk67A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDowNToxMVrOFkybnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5Nzk2NA==", "bodyText": "Could you use AssertJ?\nassertThat(mediaTypeName).isNotNull();\nassertThat(mediaTypeName).isEqualTo(mediaTypeEntry.getValue().toString());", "url": "https://github.com/line/armeria/pull/2438#discussion_r373897964", "createdAt": "2020-02-03T02:01:47Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.lang.reflect.Modifier.isFinal;\n+import static java.lang.reflect.Modifier.isPublic;\n+import static java.lang.reflect.Modifier.isStatic;\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.FluentIterable;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames.\n+ */\n+class MediaTypeNamesTest {\n+\n+    // reflection\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {\n+        final FluentIterable<Field> mediaTypeFields = getConstantFields(MediaType.class);\n+        final FluentIterable<Field> mediaTypeNamesFields = getConstantFields(MediaTypeNames.class);\n+\n+        final Map<String, MediaType> mediaTypeConstantsMap =\n+                getConstantFieldMap(mediaTypeFields, MediaType.class);\n+        final Map<String, String> mediaTypeNamesConstantsMap =\n+                getConstantFieldMap(mediaTypeNamesFields, String.class);\n+\n+        for (Entry<String, MediaType> mediaTypeEntry : mediaTypeConstantsMap.entrySet()) {\n+            final String mediaTypeName = mediaTypeNamesConstantsMap.get(mediaTypeEntry.getKey());\n+            assertNotNull(\"MediaTypeName should be defined in MediaType constants\", mediaTypeName);\n+            assertEquals(mediaTypeName, mediaTypeEntry.getValue().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd61475fa2f8daa8d0d9fcc4988f04e42453c3bc"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDExOTMyNw==", "bodyText": "Let me apply it.", "url": "https://github.com/line/armeria/pull/2438#discussion_r374119327", "createdAt": "2020-02-03T14:05:11Z", "author": {"login": "JunoJunho"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.lang.reflect.Modifier.isFinal;\n+import static java.lang.reflect.Modifier.isPublic;\n+import static java.lang.reflect.Modifier.isStatic;\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.FluentIterable;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames.\n+ */\n+class MediaTypeNamesTest {\n+\n+    // reflection\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {\n+        final FluentIterable<Field> mediaTypeFields = getConstantFields(MediaType.class);\n+        final FluentIterable<Field> mediaTypeNamesFields = getConstantFields(MediaTypeNames.class);\n+\n+        final Map<String, MediaType> mediaTypeConstantsMap =\n+                getConstantFieldMap(mediaTypeFields, MediaType.class);\n+        final Map<String, String> mediaTypeNamesConstantsMap =\n+                getConstantFieldMap(mediaTypeNamesFields, String.class);\n+\n+        for (Entry<String, MediaType> mediaTypeEntry : mediaTypeConstantsMap.entrySet()) {\n+            final String mediaTypeName = mediaTypeNamesConstantsMap.get(mediaTypeEntry.getKey());\n+            assertNotNull(\"MediaTypeName should be defined in MediaType constants\", mediaTypeName);\n+            assertEquals(mediaTypeName, mediaTypeEntry.getValue().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5Nzk2NA=="}, "originalCommit": {"oid": "dd61475fa2f8daa8d0d9fcc4988f04e42453c3bc"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjE3NDQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/MediaTypeNames.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMjoyNzoyMFrOFklHcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDowNDo1OVrOFkybQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkwMTE3MA==", "bodyText": "Could you migrate @Produces(\"application/json-seq\") to @Produces(JSON_SEQ) and other similar things in our code base?\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/server/annotation/ProducesJsonSequences.java\n    \n    \n         Line 28\n      in\n      6f3c61e\n    \n    \n    \n    \n\n        \n          \n           @Produces(\"application/json-seq\")", "url": "https://github.com/line/armeria/pull/2438#discussion_r373901170", "createdAt": "2020-02-03T02:27:20Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/MediaTypeNames.java", "diffHunk": "@@ -0,0 +1,472 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+/**\n+ * String constants defined in {@link MediaType} class.\n+ */\n+public final class MediaTypeNames {\n+\n+    /**\n+     * {@value #ANY_TYPE}.\n+     */\n+    public static final String ANY_TYPE = \"*/*\";\n+    /**\n+     * {@value #ANY_TEXT_TYPE}.\n+     */\n+    public static final String ANY_TEXT_TYPE = \"text/*\";\n+    /**\n+     * {@value #ANY_IMAGE_TYPE}.\n+     */\n+    public static final String ANY_IMAGE_TYPE = \"image/*\";\n+    /**\n+     * {@value #ANY_AUDIO_TYPE}.\n+     */\n+    public static final String ANY_AUDIO_TYPE = \"audio/*\";\n+    /**\n+     * {@value #ANY_VIDEO_TYPE}.\n+     */\n+    public static final String ANY_VIDEO_TYPE = \"video/*\";\n+    /**\n+     * {@value #ANY_APPLICATION_TYPE}.\n+     */\n+    public static final String ANY_APPLICATION_TYPE = \"application/*\";\n+\n+    /* text types */\n+\n+    /**\n+     * {@value #CACHE_MANIFEST_UTF_8}.\n+     */\n+    public static final String CACHE_MANIFEST_UTF_8 = \"text/cache-manifest; charset=utf-8\";\n+    /**\n+     * {@value #CSS_UTF_8}.\n+     */\n+    public static final String CSS_UTF_8 = \"text/css; charset=utf-8\";\n+    /**\n+     * {@value #CSV_UTF_8}.\n+     */\n+    public static final String CSV_UTF_8 = \"text/csv; charset=utf-8\";\n+    /**\n+     * {@value #HTML_UTF_8}.\n+     */\n+    public static final String HTML_UTF_8 = \"text/html; charset=utf-8\";\n+    /**\n+     * {@value #I_CALENDAR_UTF_8}.\n+     */\n+    public static final String I_CALENDAR_UTF_8 = \"text/calendar; charset=utf-8\";\n+    /**\n+     * {@value #PLAIN_TEXT_UTF_8}.\n+     */\n+    public static final String PLAIN_TEXT_UTF_8 = \"text/plain; charset=utf-8\";\n+    /**\n+     * {@value #EVENT_STREAM}.\n+     */\n+    public static final String EVENT_STREAM = \"text/event-stream\";\n+    /**\n+     * {@value #TEXT_JAVASCRIPT_UTF_8}.\n+     */\n+    public static final String TEXT_JAVASCRIPT_UTF_8 = \"text/javascript; charset=utf-8\";\n+    /**\n+     * {@value #TSV_UTF_8}.\n+     */\n+    public static final String TSV_UTF_8 = \"text/tab-separated-values; charset=utf-8\";\n+    /**\n+     * {@value #VCARD_UTF_8}.\n+     */\n+    public static final String VCARD_UTF_8 = \"text/vcard; charset=utf-8\";\n+    /**\n+     * {@value #WML_UTF_8}.\n+     */\n+    public static final String WML_UTF_8 = \"text/vnd.wap.wml; charset=utf-8\";\n+    /**\n+     * {@value #XML_UTF_8}.\n+     */\n+    public static final String XML_UTF_8 = \"text/xml; charset=utf-8\";\n+    /**\n+     * {@value #VTT_UTF_8}.\n+     */\n+    public static final String VTT_UTF_8 = \"text/vtt; charset=utf-8\";\n+\n+    /* image types */\n+\n+    /**\n+     * {@value #BMP}.\n+     */\n+    public static final String BMP = \"image/bmp\";\n+    /**\n+     * {@value #CRW}.\n+     */\n+    public static final String CRW = \"image/x-canon-crw\";\n+    /**\n+     * {@value #GIF}.\n+     */\n+    public static final String GIF = \"image/gif\";\n+    /**\n+     * {@value #ICO}.\n+     */\n+    public static final String ICO = \"image/vnd.microsoft.icon\";\n+    /**\n+     * {@value #JPEG}.\n+     */\n+    public static final String JPEG = \"image/jpeg\";\n+    /**\n+     * {@value #PNG}.\n+     */\n+    public static final String PNG = \"image/png\";\n+    /**\n+     * {@value #PSD}.\n+     */\n+    public static final String PSD = \"image/vnd.adobe.photoshop\";\n+    /**\n+     * {@value #SVG_UTF_8}.\n+     */\n+    public static final String SVG_UTF_8 = \"image/svg+xml; charset=utf-8\";\n+    /**\n+     * {@value #TIFF}.\n+     */\n+    public static final String TIFF = \"image/tiff\";\n+    /**\n+     * {@value #WEBP}.\n+     */\n+    public static final String WEBP = \"image/webp\";\n+\n+    /* audio types */\n+\n+    /**\n+     * {@value #MP4_AUDIO}.\n+     */\n+    public static final String MP4_AUDIO = \"audio/mp4\";\n+    /**\n+     * {@value #MPEG_AUDIO}.\n+     */\n+    public static final String MPEG_AUDIO = \"audio/mpeg\";\n+    /**\n+     * {@value #OGG_AUDIO}.\n+     */\n+    public static final String OGG_AUDIO = \"audio/ogg\";\n+    /**\n+     * {@value #WEBM_AUDIO}.\n+     */\n+    public static final String WEBM_AUDIO = \"audio/webm\";\n+    /**\n+     * {@value #L16_AUDIO}.\n+     */\n+    public static final String L16_AUDIO = \"audio/l16\";\n+    /**\n+     * {@value #L24_AUDIO}.\n+     */\n+    public static final String L24_AUDIO = \"audio/l24\";\n+    /**\n+     * {@value #BASIC_AUDIO}.\n+     */\n+    public static final String BASIC_AUDIO = \"audio/basic\";\n+    /**\n+     * {@value #AAC_AUDIO}.\n+     */\n+    public static final String AAC_AUDIO = \"audio/aac\";\n+    /**\n+     * {@value #VORBIS_AUDIO}.\n+     */\n+    public static final String VORBIS_AUDIO = \"audio/vorbis\";\n+    /**\n+     * {@value #WMA_AUDIO}.\n+     */\n+    public static final String WMA_AUDIO = \"audio/x-ms-wma\";\n+    /**\n+     * {@value #WAX_AUDIO}.\n+     */\n+    public static final String WAX_AUDIO = \"audio/x-ms-wax\";\n+    /**\n+     * {@value #VND_REAL_AUDIO}.\n+     */\n+    public static final String VND_REAL_AUDIO = \"audio/vnd.rn-realaudio\";\n+    /**\n+     * {@value #VND_WAVE_AUDIO}.\n+     */\n+    public static final String VND_WAVE_AUDIO = \"audio/vnd.wave\";\n+\n+    /* video types */\n+\n+    /**\n+     * {@value #MP4_VIDEO}.\n+     */\n+    public static final String MP4_VIDEO = \"video/mp4\";\n+    /**\n+     * {@value #MPEG_VIDEO}.\n+     */\n+    public static final String MPEG_VIDEO = \"video/mpeg\";\n+    /**\n+     * {@value #OGG_VIDEO}.\n+     */\n+    public static final String OGG_VIDEO = \"video/ogg\";\n+    /**\n+     * {@value #QUICKTIME}.\n+     */\n+    public static final String QUICKTIME = \"video/quicktime\";\n+    /**\n+     * {@value #WEBM_VIDEO}.\n+     */\n+    public static final String WEBM_VIDEO = \"video/webm\";\n+    /**\n+     * {@value #WMV}.\n+     */\n+    public static final String WMV = \"video/x-ms-wmv\";\n+    /**\n+     * {@value #FLV_VIDEO}.\n+     */\n+    public static final String FLV_VIDEO = \"video/x-flv\";\n+    /**\n+     * {@value #THREE_GPP_VIDEO}.\n+     */\n+    public static final String THREE_GPP_VIDEO = \"video/3gpp\";\n+    /**\n+     * {@value #THREE_GPP2_VIDEO}.\n+     */\n+    public static final String THREE_GPP2_VIDEO = \"video/3gpp2\";\n+\n+    /* application types */\n+\n+    /**\n+     * {@value #APPLICATION_XML_UTF_8}.\n+     */\n+    public static final String APPLICATION_XML_UTF_8 = \"application/xml; charset=utf-8\";\n+    /**\n+     * {@value #ATOM_UTF_8}.\n+     */\n+    public static final String ATOM_UTF_8 = \"application/atom+xml; charset=utf-8\";\n+    /**\n+     * {@value #BZIP2}.\n+     */\n+    public static final String BZIP2 = \"application/x-bzip2\";\n+    /**\n+     * {@value #DART_UTF_8}.\n+     */\n+    public static final String DART_UTF_8 = \"application/dart; charset=utf-8\";\n+    /**\n+     * {@value #APPLE_PASSBOOK}.\n+     */\n+    public static final String APPLE_PASSBOOK = \"application/vnd.apple.pkpass\";\n+    /**\n+     * {@value #EOT}.\n+     */\n+    public static final String EOT = \"application/vnd.ms-fontobject\";\n+    /**\n+     * {@value #EPUB}.\n+     */\n+    public static final String EPUB = \"application/epub+zip\";\n+    /**\n+     * {@value #FORM_DATA}.\n+     */\n+    public static final String FORM_DATA = \"application/x-www-form-urlencoded\";\n+    /**\n+     * {@value #KEY_ARCHIVE}.\n+     */\n+    public static final String KEY_ARCHIVE = \"application/pkcs12\";\n+    /**\n+     * {@value #APPLICATION_BINARY}.\n+     */\n+    public static final String APPLICATION_BINARY = \"application/binary\";\n+    /**\n+     * {@value #GEO_JSON}.\n+     */\n+    public static final String GEO_JSON = \"application/geo+json\";\n+    /**\n+     * {@value #GZIP}.\n+     */\n+    public static final String GZIP = \"application/x-gzip\";\n+    /**\n+     * {@value #HAL_JSON}.\n+     */\n+    public static final String HAL_JSON = \"application/hal+json\";\n+    /**\n+     * {@value #JAVASCRIPT_UTF_8}.\n+     */\n+    public static final String JAVASCRIPT_UTF_8 = \"application/javascript; charset=utf-8\";\n+    /**\n+     * {@value #JOSE}.\n+     */\n+    public static final String JOSE = \"application/jose\";\n+    /**\n+     * {@value #JOSE_JSON}.\n+     */\n+    public static final String JOSE_JSON = \"application/jose+json\";\n+    /**\n+     * {@value #JSON_UTF_8}.\n+     */\n+    public static final String JSON_UTF_8 = \"application/json; charset=utf-8\";\n+    /**\n+     * {@value #JSON}.\n+     */\n+    public static final String JSON = \"application/json\";\n+    /**\n+     * {@value #JSON_PATCH}.\n+     */\n+    public static final String JSON_PATCH = \"application/json-patch+json\";\n+    /**\n+     * {@value #JSON_SEQ}.\n+     */\n+    public static final String JSON_SEQ = \"application/json-seq\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd61475fa2f8daa8d0d9fcc4988f04e42453c3bc"}, "originalPosition": 322}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEwNzU0Mg==", "bodyText": "Let me find and apply it.", "url": "https://github.com/line/armeria/pull/2438#discussion_r374107542", "createdAt": "2020-02-03T13:42:49Z", "author": {"login": "JunoJunho"}, "path": "core/src/main/java/com/linecorp/armeria/common/MediaTypeNames.java", "diffHunk": "@@ -0,0 +1,472 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+/**\n+ * String constants defined in {@link MediaType} class.\n+ */\n+public final class MediaTypeNames {\n+\n+    /**\n+     * {@value #ANY_TYPE}.\n+     */\n+    public static final String ANY_TYPE = \"*/*\";\n+    /**\n+     * {@value #ANY_TEXT_TYPE}.\n+     */\n+    public static final String ANY_TEXT_TYPE = \"text/*\";\n+    /**\n+     * {@value #ANY_IMAGE_TYPE}.\n+     */\n+    public static final String ANY_IMAGE_TYPE = \"image/*\";\n+    /**\n+     * {@value #ANY_AUDIO_TYPE}.\n+     */\n+    public static final String ANY_AUDIO_TYPE = \"audio/*\";\n+    /**\n+     * {@value #ANY_VIDEO_TYPE}.\n+     */\n+    public static final String ANY_VIDEO_TYPE = \"video/*\";\n+    /**\n+     * {@value #ANY_APPLICATION_TYPE}.\n+     */\n+    public static final String ANY_APPLICATION_TYPE = \"application/*\";\n+\n+    /* text types */\n+\n+    /**\n+     * {@value #CACHE_MANIFEST_UTF_8}.\n+     */\n+    public static final String CACHE_MANIFEST_UTF_8 = \"text/cache-manifest; charset=utf-8\";\n+    /**\n+     * {@value #CSS_UTF_8}.\n+     */\n+    public static final String CSS_UTF_8 = \"text/css; charset=utf-8\";\n+    /**\n+     * {@value #CSV_UTF_8}.\n+     */\n+    public static final String CSV_UTF_8 = \"text/csv; charset=utf-8\";\n+    /**\n+     * {@value #HTML_UTF_8}.\n+     */\n+    public static final String HTML_UTF_8 = \"text/html; charset=utf-8\";\n+    /**\n+     * {@value #I_CALENDAR_UTF_8}.\n+     */\n+    public static final String I_CALENDAR_UTF_8 = \"text/calendar; charset=utf-8\";\n+    /**\n+     * {@value #PLAIN_TEXT_UTF_8}.\n+     */\n+    public static final String PLAIN_TEXT_UTF_8 = \"text/plain; charset=utf-8\";\n+    /**\n+     * {@value #EVENT_STREAM}.\n+     */\n+    public static final String EVENT_STREAM = \"text/event-stream\";\n+    /**\n+     * {@value #TEXT_JAVASCRIPT_UTF_8}.\n+     */\n+    public static final String TEXT_JAVASCRIPT_UTF_8 = \"text/javascript; charset=utf-8\";\n+    /**\n+     * {@value #TSV_UTF_8}.\n+     */\n+    public static final String TSV_UTF_8 = \"text/tab-separated-values; charset=utf-8\";\n+    /**\n+     * {@value #VCARD_UTF_8}.\n+     */\n+    public static final String VCARD_UTF_8 = \"text/vcard; charset=utf-8\";\n+    /**\n+     * {@value #WML_UTF_8}.\n+     */\n+    public static final String WML_UTF_8 = \"text/vnd.wap.wml; charset=utf-8\";\n+    /**\n+     * {@value #XML_UTF_8}.\n+     */\n+    public static final String XML_UTF_8 = \"text/xml; charset=utf-8\";\n+    /**\n+     * {@value #VTT_UTF_8}.\n+     */\n+    public static final String VTT_UTF_8 = \"text/vtt; charset=utf-8\";\n+\n+    /* image types */\n+\n+    /**\n+     * {@value #BMP}.\n+     */\n+    public static final String BMP = \"image/bmp\";\n+    /**\n+     * {@value #CRW}.\n+     */\n+    public static final String CRW = \"image/x-canon-crw\";\n+    /**\n+     * {@value #GIF}.\n+     */\n+    public static final String GIF = \"image/gif\";\n+    /**\n+     * {@value #ICO}.\n+     */\n+    public static final String ICO = \"image/vnd.microsoft.icon\";\n+    /**\n+     * {@value #JPEG}.\n+     */\n+    public static final String JPEG = \"image/jpeg\";\n+    /**\n+     * {@value #PNG}.\n+     */\n+    public static final String PNG = \"image/png\";\n+    /**\n+     * {@value #PSD}.\n+     */\n+    public static final String PSD = \"image/vnd.adobe.photoshop\";\n+    /**\n+     * {@value #SVG_UTF_8}.\n+     */\n+    public static final String SVG_UTF_8 = \"image/svg+xml; charset=utf-8\";\n+    /**\n+     * {@value #TIFF}.\n+     */\n+    public static final String TIFF = \"image/tiff\";\n+    /**\n+     * {@value #WEBP}.\n+     */\n+    public static final String WEBP = \"image/webp\";\n+\n+    /* audio types */\n+\n+    /**\n+     * {@value #MP4_AUDIO}.\n+     */\n+    public static final String MP4_AUDIO = \"audio/mp4\";\n+    /**\n+     * {@value #MPEG_AUDIO}.\n+     */\n+    public static final String MPEG_AUDIO = \"audio/mpeg\";\n+    /**\n+     * {@value #OGG_AUDIO}.\n+     */\n+    public static final String OGG_AUDIO = \"audio/ogg\";\n+    /**\n+     * {@value #WEBM_AUDIO}.\n+     */\n+    public static final String WEBM_AUDIO = \"audio/webm\";\n+    /**\n+     * {@value #L16_AUDIO}.\n+     */\n+    public static final String L16_AUDIO = \"audio/l16\";\n+    /**\n+     * {@value #L24_AUDIO}.\n+     */\n+    public static final String L24_AUDIO = \"audio/l24\";\n+    /**\n+     * {@value #BASIC_AUDIO}.\n+     */\n+    public static final String BASIC_AUDIO = \"audio/basic\";\n+    /**\n+     * {@value #AAC_AUDIO}.\n+     */\n+    public static final String AAC_AUDIO = \"audio/aac\";\n+    /**\n+     * {@value #VORBIS_AUDIO}.\n+     */\n+    public static final String VORBIS_AUDIO = \"audio/vorbis\";\n+    /**\n+     * {@value #WMA_AUDIO}.\n+     */\n+    public static final String WMA_AUDIO = \"audio/x-ms-wma\";\n+    /**\n+     * {@value #WAX_AUDIO}.\n+     */\n+    public static final String WAX_AUDIO = \"audio/x-ms-wax\";\n+    /**\n+     * {@value #VND_REAL_AUDIO}.\n+     */\n+    public static final String VND_REAL_AUDIO = \"audio/vnd.rn-realaudio\";\n+    /**\n+     * {@value #VND_WAVE_AUDIO}.\n+     */\n+    public static final String VND_WAVE_AUDIO = \"audio/vnd.wave\";\n+\n+    /* video types */\n+\n+    /**\n+     * {@value #MP4_VIDEO}.\n+     */\n+    public static final String MP4_VIDEO = \"video/mp4\";\n+    /**\n+     * {@value #MPEG_VIDEO}.\n+     */\n+    public static final String MPEG_VIDEO = \"video/mpeg\";\n+    /**\n+     * {@value #OGG_VIDEO}.\n+     */\n+    public static final String OGG_VIDEO = \"video/ogg\";\n+    /**\n+     * {@value #QUICKTIME}.\n+     */\n+    public static final String QUICKTIME = \"video/quicktime\";\n+    /**\n+     * {@value #WEBM_VIDEO}.\n+     */\n+    public static final String WEBM_VIDEO = \"video/webm\";\n+    /**\n+     * {@value #WMV}.\n+     */\n+    public static final String WMV = \"video/x-ms-wmv\";\n+    /**\n+     * {@value #FLV_VIDEO}.\n+     */\n+    public static final String FLV_VIDEO = \"video/x-flv\";\n+    /**\n+     * {@value #THREE_GPP_VIDEO}.\n+     */\n+    public static final String THREE_GPP_VIDEO = \"video/3gpp\";\n+    /**\n+     * {@value #THREE_GPP2_VIDEO}.\n+     */\n+    public static final String THREE_GPP2_VIDEO = \"video/3gpp2\";\n+\n+    /* application types */\n+\n+    /**\n+     * {@value #APPLICATION_XML_UTF_8}.\n+     */\n+    public static final String APPLICATION_XML_UTF_8 = \"application/xml; charset=utf-8\";\n+    /**\n+     * {@value #ATOM_UTF_8}.\n+     */\n+    public static final String ATOM_UTF_8 = \"application/atom+xml; charset=utf-8\";\n+    /**\n+     * {@value #BZIP2}.\n+     */\n+    public static final String BZIP2 = \"application/x-bzip2\";\n+    /**\n+     * {@value #DART_UTF_8}.\n+     */\n+    public static final String DART_UTF_8 = \"application/dart; charset=utf-8\";\n+    /**\n+     * {@value #APPLE_PASSBOOK}.\n+     */\n+    public static final String APPLE_PASSBOOK = \"application/vnd.apple.pkpass\";\n+    /**\n+     * {@value #EOT}.\n+     */\n+    public static final String EOT = \"application/vnd.ms-fontobject\";\n+    /**\n+     * {@value #EPUB}.\n+     */\n+    public static final String EPUB = \"application/epub+zip\";\n+    /**\n+     * {@value #FORM_DATA}.\n+     */\n+    public static final String FORM_DATA = \"application/x-www-form-urlencoded\";\n+    /**\n+     * {@value #KEY_ARCHIVE}.\n+     */\n+    public static final String KEY_ARCHIVE = \"application/pkcs12\";\n+    /**\n+     * {@value #APPLICATION_BINARY}.\n+     */\n+    public static final String APPLICATION_BINARY = \"application/binary\";\n+    /**\n+     * {@value #GEO_JSON}.\n+     */\n+    public static final String GEO_JSON = \"application/geo+json\";\n+    /**\n+     * {@value #GZIP}.\n+     */\n+    public static final String GZIP = \"application/x-gzip\";\n+    /**\n+     * {@value #HAL_JSON}.\n+     */\n+    public static final String HAL_JSON = \"application/hal+json\";\n+    /**\n+     * {@value #JAVASCRIPT_UTF_8}.\n+     */\n+    public static final String JAVASCRIPT_UTF_8 = \"application/javascript; charset=utf-8\";\n+    /**\n+     * {@value #JOSE}.\n+     */\n+    public static final String JOSE = \"application/jose\";\n+    /**\n+     * {@value #JOSE_JSON}.\n+     */\n+    public static final String JOSE_JSON = \"application/jose+json\";\n+    /**\n+     * {@value #JSON_UTF_8}.\n+     */\n+    public static final String JSON_UTF_8 = \"application/json; charset=utf-8\";\n+    /**\n+     * {@value #JSON}.\n+     */\n+    public static final String JSON = \"application/json\";\n+    /**\n+     * {@value #JSON_PATCH}.\n+     */\n+    public static final String JSON_PATCH = \"application/json-patch+json\";\n+    /**\n+     * {@value #JSON_SEQ}.\n+     */\n+    public static final String JSON_SEQ = \"application/json-seq\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkwMTE3MA=="}, "originalCommit": {"oid": "dd61475fa2f8daa8d0d9fcc4988f04e42453c3bc"}, "originalPosition": 322}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDExOTIzNA==", "bodyText": "I applied them all but test code (I am not sure applying test code since some are applied some are not. It seems weird to me).", "url": "https://github.com/line/armeria/pull/2438#discussion_r374119234", "createdAt": "2020-02-03T14:04:59Z", "author": {"login": "JunoJunho"}, "path": "core/src/main/java/com/linecorp/armeria/common/MediaTypeNames.java", "diffHunk": "@@ -0,0 +1,472 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+/**\n+ * String constants defined in {@link MediaType} class.\n+ */\n+public final class MediaTypeNames {\n+\n+    /**\n+     * {@value #ANY_TYPE}.\n+     */\n+    public static final String ANY_TYPE = \"*/*\";\n+    /**\n+     * {@value #ANY_TEXT_TYPE}.\n+     */\n+    public static final String ANY_TEXT_TYPE = \"text/*\";\n+    /**\n+     * {@value #ANY_IMAGE_TYPE}.\n+     */\n+    public static final String ANY_IMAGE_TYPE = \"image/*\";\n+    /**\n+     * {@value #ANY_AUDIO_TYPE}.\n+     */\n+    public static final String ANY_AUDIO_TYPE = \"audio/*\";\n+    /**\n+     * {@value #ANY_VIDEO_TYPE}.\n+     */\n+    public static final String ANY_VIDEO_TYPE = \"video/*\";\n+    /**\n+     * {@value #ANY_APPLICATION_TYPE}.\n+     */\n+    public static final String ANY_APPLICATION_TYPE = \"application/*\";\n+\n+    /* text types */\n+\n+    /**\n+     * {@value #CACHE_MANIFEST_UTF_8}.\n+     */\n+    public static final String CACHE_MANIFEST_UTF_8 = \"text/cache-manifest; charset=utf-8\";\n+    /**\n+     * {@value #CSS_UTF_8}.\n+     */\n+    public static final String CSS_UTF_8 = \"text/css; charset=utf-8\";\n+    /**\n+     * {@value #CSV_UTF_8}.\n+     */\n+    public static final String CSV_UTF_8 = \"text/csv; charset=utf-8\";\n+    /**\n+     * {@value #HTML_UTF_8}.\n+     */\n+    public static final String HTML_UTF_8 = \"text/html; charset=utf-8\";\n+    /**\n+     * {@value #I_CALENDAR_UTF_8}.\n+     */\n+    public static final String I_CALENDAR_UTF_8 = \"text/calendar; charset=utf-8\";\n+    /**\n+     * {@value #PLAIN_TEXT_UTF_8}.\n+     */\n+    public static final String PLAIN_TEXT_UTF_8 = \"text/plain; charset=utf-8\";\n+    /**\n+     * {@value #EVENT_STREAM}.\n+     */\n+    public static final String EVENT_STREAM = \"text/event-stream\";\n+    /**\n+     * {@value #TEXT_JAVASCRIPT_UTF_8}.\n+     */\n+    public static final String TEXT_JAVASCRIPT_UTF_8 = \"text/javascript; charset=utf-8\";\n+    /**\n+     * {@value #TSV_UTF_8}.\n+     */\n+    public static final String TSV_UTF_8 = \"text/tab-separated-values; charset=utf-8\";\n+    /**\n+     * {@value #VCARD_UTF_8}.\n+     */\n+    public static final String VCARD_UTF_8 = \"text/vcard; charset=utf-8\";\n+    /**\n+     * {@value #WML_UTF_8}.\n+     */\n+    public static final String WML_UTF_8 = \"text/vnd.wap.wml; charset=utf-8\";\n+    /**\n+     * {@value #XML_UTF_8}.\n+     */\n+    public static final String XML_UTF_8 = \"text/xml; charset=utf-8\";\n+    /**\n+     * {@value #VTT_UTF_8}.\n+     */\n+    public static final String VTT_UTF_8 = \"text/vtt; charset=utf-8\";\n+\n+    /* image types */\n+\n+    /**\n+     * {@value #BMP}.\n+     */\n+    public static final String BMP = \"image/bmp\";\n+    /**\n+     * {@value #CRW}.\n+     */\n+    public static final String CRW = \"image/x-canon-crw\";\n+    /**\n+     * {@value #GIF}.\n+     */\n+    public static final String GIF = \"image/gif\";\n+    /**\n+     * {@value #ICO}.\n+     */\n+    public static final String ICO = \"image/vnd.microsoft.icon\";\n+    /**\n+     * {@value #JPEG}.\n+     */\n+    public static final String JPEG = \"image/jpeg\";\n+    /**\n+     * {@value #PNG}.\n+     */\n+    public static final String PNG = \"image/png\";\n+    /**\n+     * {@value #PSD}.\n+     */\n+    public static final String PSD = \"image/vnd.adobe.photoshop\";\n+    /**\n+     * {@value #SVG_UTF_8}.\n+     */\n+    public static final String SVG_UTF_8 = \"image/svg+xml; charset=utf-8\";\n+    /**\n+     * {@value #TIFF}.\n+     */\n+    public static final String TIFF = \"image/tiff\";\n+    /**\n+     * {@value #WEBP}.\n+     */\n+    public static final String WEBP = \"image/webp\";\n+\n+    /* audio types */\n+\n+    /**\n+     * {@value #MP4_AUDIO}.\n+     */\n+    public static final String MP4_AUDIO = \"audio/mp4\";\n+    /**\n+     * {@value #MPEG_AUDIO}.\n+     */\n+    public static final String MPEG_AUDIO = \"audio/mpeg\";\n+    /**\n+     * {@value #OGG_AUDIO}.\n+     */\n+    public static final String OGG_AUDIO = \"audio/ogg\";\n+    /**\n+     * {@value #WEBM_AUDIO}.\n+     */\n+    public static final String WEBM_AUDIO = \"audio/webm\";\n+    /**\n+     * {@value #L16_AUDIO}.\n+     */\n+    public static final String L16_AUDIO = \"audio/l16\";\n+    /**\n+     * {@value #L24_AUDIO}.\n+     */\n+    public static final String L24_AUDIO = \"audio/l24\";\n+    /**\n+     * {@value #BASIC_AUDIO}.\n+     */\n+    public static final String BASIC_AUDIO = \"audio/basic\";\n+    /**\n+     * {@value #AAC_AUDIO}.\n+     */\n+    public static final String AAC_AUDIO = \"audio/aac\";\n+    /**\n+     * {@value #VORBIS_AUDIO}.\n+     */\n+    public static final String VORBIS_AUDIO = \"audio/vorbis\";\n+    /**\n+     * {@value #WMA_AUDIO}.\n+     */\n+    public static final String WMA_AUDIO = \"audio/x-ms-wma\";\n+    /**\n+     * {@value #WAX_AUDIO}.\n+     */\n+    public static final String WAX_AUDIO = \"audio/x-ms-wax\";\n+    /**\n+     * {@value #VND_REAL_AUDIO}.\n+     */\n+    public static final String VND_REAL_AUDIO = \"audio/vnd.rn-realaudio\";\n+    /**\n+     * {@value #VND_WAVE_AUDIO}.\n+     */\n+    public static final String VND_WAVE_AUDIO = \"audio/vnd.wave\";\n+\n+    /* video types */\n+\n+    /**\n+     * {@value #MP4_VIDEO}.\n+     */\n+    public static final String MP4_VIDEO = \"video/mp4\";\n+    /**\n+     * {@value #MPEG_VIDEO}.\n+     */\n+    public static final String MPEG_VIDEO = \"video/mpeg\";\n+    /**\n+     * {@value #OGG_VIDEO}.\n+     */\n+    public static final String OGG_VIDEO = \"video/ogg\";\n+    /**\n+     * {@value #QUICKTIME}.\n+     */\n+    public static final String QUICKTIME = \"video/quicktime\";\n+    /**\n+     * {@value #WEBM_VIDEO}.\n+     */\n+    public static final String WEBM_VIDEO = \"video/webm\";\n+    /**\n+     * {@value #WMV}.\n+     */\n+    public static final String WMV = \"video/x-ms-wmv\";\n+    /**\n+     * {@value #FLV_VIDEO}.\n+     */\n+    public static final String FLV_VIDEO = \"video/x-flv\";\n+    /**\n+     * {@value #THREE_GPP_VIDEO}.\n+     */\n+    public static final String THREE_GPP_VIDEO = \"video/3gpp\";\n+    /**\n+     * {@value #THREE_GPP2_VIDEO}.\n+     */\n+    public static final String THREE_GPP2_VIDEO = \"video/3gpp2\";\n+\n+    /* application types */\n+\n+    /**\n+     * {@value #APPLICATION_XML_UTF_8}.\n+     */\n+    public static final String APPLICATION_XML_UTF_8 = \"application/xml; charset=utf-8\";\n+    /**\n+     * {@value #ATOM_UTF_8}.\n+     */\n+    public static final String ATOM_UTF_8 = \"application/atom+xml; charset=utf-8\";\n+    /**\n+     * {@value #BZIP2}.\n+     */\n+    public static final String BZIP2 = \"application/x-bzip2\";\n+    /**\n+     * {@value #DART_UTF_8}.\n+     */\n+    public static final String DART_UTF_8 = \"application/dart; charset=utf-8\";\n+    /**\n+     * {@value #APPLE_PASSBOOK}.\n+     */\n+    public static final String APPLE_PASSBOOK = \"application/vnd.apple.pkpass\";\n+    /**\n+     * {@value #EOT}.\n+     */\n+    public static final String EOT = \"application/vnd.ms-fontobject\";\n+    /**\n+     * {@value #EPUB}.\n+     */\n+    public static final String EPUB = \"application/epub+zip\";\n+    /**\n+     * {@value #FORM_DATA}.\n+     */\n+    public static final String FORM_DATA = \"application/x-www-form-urlencoded\";\n+    /**\n+     * {@value #KEY_ARCHIVE}.\n+     */\n+    public static final String KEY_ARCHIVE = \"application/pkcs12\";\n+    /**\n+     * {@value #APPLICATION_BINARY}.\n+     */\n+    public static final String APPLICATION_BINARY = \"application/binary\";\n+    /**\n+     * {@value #GEO_JSON}.\n+     */\n+    public static final String GEO_JSON = \"application/geo+json\";\n+    /**\n+     * {@value #GZIP}.\n+     */\n+    public static final String GZIP = \"application/x-gzip\";\n+    /**\n+     * {@value #HAL_JSON}.\n+     */\n+    public static final String HAL_JSON = \"application/hal+json\";\n+    /**\n+     * {@value #JAVASCRIPT_UTF_8}.\n+     */\n+    public static final String JAVASCRIPT_UTF_8 = \"application/javascript; charset=utf-8\";\n+    /**\n+     * {@value #JOSE}.\n+     */\n+    public static final String JOSE = \"application/jose\";\n+    /**\n+     * {@value #JOSE_JSON}.\n+     */\n+    public static final String JOSE_JSON = \"application/jose+json\";\n+    /**\n+     * {@value #JSON_UTF_8}.\n+     */\n+    public static final String JSON_UTF_8 = \"application/json; charset=utf-8\";\n+    /**\n+     * {@value #JSON}.\n+     */\n+    public static final String JSON = \"application/json\";\n+    /**\n+     * {@value #JSON_PATCH}.\n+     */\n+    public static final String JSON_PATCH = \"application/json-patch+json\";\n+    /**\n+     * {@value #JSON_SEQ}.\n+     */\n+    public static final String JSON_SEQ = \"application/json-seq\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkwMTE3MA=="}, "originalCommit": {"oid": "dd61475fa2f8daa8d0d9fcc4988f04e42453c3bc"}, "originalPosition": 322}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjE5OTQ4OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMjo1MzoxNlrOFklV7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyNDo1NFrOFkzE0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkwNDg3Ng==", "bodyText": "The clazz parameter seems unused.\nHow about using stream API & ImmutableMap instead of mutable HashMap?\nprivate static <T> Map<String, T> getConstantFieldMap(Iterable<Field> iterable) {\n    return StreamSupport\n            .stream(iterable.spliterator(), false)\n            .collect(toImmutableMap(Field::getName, field -> {\n                try {\n                    @SuppressWarnings(\"unchecked\")\n                    final T cast = (T) field.get(null);\n                    return cast;\n                } catch (Exception ex) {\n                    throw new RuntimeException(ex);\n                }\n            }));\n}", "url": "https://github.com/line/armeria/pull/2438#discussion_r373904876", "createdAt": "2020-02-03T02:53:16Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.lang.reflect.Modifier.isFinal;\n+import static java.lang.reflect.Modifier.isPublic;\n+import static java.lang.reflect.Modifier.isStatic;\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.FluentIterable;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames.\n+ */\n+class MediaTypeNamesTest {\n+\n+    // reflection\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {\n+        final FluentIterable<Field> mediaTypeFields = getConstantFields(MediaType.class);\n+        final FluentIterable<Field> mediaTypeNamesFields = getConstantFields(MediaTypeNames.class);\n+\n+        final Map<String, MediaType> mediaTypeConstantsMap =\n+                getConstantFieldMap(mediaTypeFields, MediaType.class);\n+        final Map<String, String> mediaTypeNamesConstantsMap =\n+                getConstantFieldMap(mediaTypeNamesFields, String.class);\n+\n+        for (Entry<String, MediaType> mediaTypeEntry : mediaTypeConstantsMap.entrySet()) {\n+            final String mediaTypeName = mediaTypeNamesConstantsMap.get(mediaTypeEntry.getKey());\n+            assertNotNull(\"MediaTypeName should be defined in MediaType constants\", mediaTypeName);\n+            assertEquals(mediaTypeName, mediaTypeEntry.getValue().toString());\n+        }\n+    }\n+\n+    // reflection\n+    @SuppressWarnings(\"Guava\")\n+    private static <T> FluentIterable<Field> getConstantFields(Class<T> clazz) {\n+        return FluentIterable.from(asList(clazz.getDeclaredFields())).filter(input -> {\n+            final int modifiers = input.getModifiers();\n+            return isPublic(modifiers) &&\n+                   isStatic(modifiers) &&\n+                   isFinal(modifiers) &&\n+                   String.class.equals(input.getType());\n+        });\n+    }\n+\n+    // reflection\n+    @SuppressWarnings(\"Guava\")\n+    private static <T> Map<String, T> getConstantFieldMap(FluentIterable<Field> iterable, Class<T> clazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd61475fa2f8daa8d0d9fcc4988f04e42453c3bc"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyOTg3NQ==", "bodyText": "Oh! I did not know that I can use without parameter. Let me apply this code snippet! Thanks!", "url": "https://github.com/line/armeria/pull/2438#discussion_r374129875", "createdAt": "2020-02-03T14:24:54Z", "author": {"login": "JunoJunho"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.lang.reflect.Modifier.isFinal;\n+import static java.lang.reflect.Modifier.isPublic;\n+import static java.lang.reflect.Modifier.isStatic;\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.FluentIterable;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames.\n+ */\n+class MediaTypeNamesTest {\n+\n+    // reflection\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {\n+        final FluentIterable<Field> mediaTypeFields = getConstantFields(MediaType.class);\n+        final FluentIterable<Field> mediaTypeNamesFields = getConstantFields(MediaTypeNames.class);\n+\n+        final Map<String, MediaType> mediaTypeConstantsMap =\n+                getConstantFieldMap(mediaTypeFields, MediaType.class);\n+        final Map<String, String> mediaTypeNamesConstantsMap =\n+                getConstantFieldMap(mediaTypeNamesFields, String.class);\n+\n+        for (Entry<String, MediaType> mediaTypeEntry : mediaTypeConstantsMap.entrySet()) {\n+            final String mediaTypeName = mediaTypeNamesConstantsMap.get(mediaTypeEntry.getKey());\n+            assertNotNull(\"MediaTypeName should be defined in MediaType constants\", mediaTypeName);\n+            assertEquals(mediaTypeName, mediaTypeEntry.getValue().toString());\n+        }\n+    }\n+\n+    // reflection\n+    @SuppressWarnings(\"Guava\")\n+    private static <T> FluentIterable<Field> getConstantFields(Class<T> clazz) {\n+        return FluentIterable.from(asList(clazz.getDeclaredFields())).filter(input -> {\n+            final int modifiers = input.getModifiers();\n+            return isPublic(modifiers) &&\n+                   isStatic(modifiers) &&\n+                   isFinal(modifiers) &&\n+                   String.class.equals(input.getType());\n+        });\n+    }\n+\n+    // reflection\n+    @SuppressWarnings(\"Guava\")\n+    private static <T> Map<String, T> getConstantFieldMap(FluentIterable<Field> iterable, Class<T> clazz) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkwNDg3Ng=="}, "originalCommit": {"oid": "dd61475fa2f8daa8d0d9fcc4988f04e42453c3bc"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTQzNTk5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMzo1OTo1NVrOFlEInw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMzoyNDoxNFrOFlT16A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwOTM3NQ==", "bodyText": ".isNotNull() is redundant, because .isEqualTo() next line will check nullness anyway.", "url": "https://github.com/line/armeria/pull/2438#discussion_r374409375", "createdAt": "2020-02-03T23:59:55Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.linecorp.armeria.common.MediaTypeTest.getConstantFields;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Field;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.stream.StreamSupport;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.FluentIterable;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames.\n+ */\n+class MediaTypeNamesTest {\n+\n+    // reflection\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {\n+        final FluentIterable<Field> mediaTypeFields = getConstantFields(MediaType.class);\n+        final FluentIterable<Field> mediaTypeNamesFields = getConstantFields(MediaTypeNames.class,\n+                                                                             String.class);\n+\n+        final Map<String, MediaType> mediaTypeConstantsMap = getConstantFieldMap(mediaTypeFields);\n+        final Map<String, String> mediaTypeNamesConstantsMap = getConstantFieldMap(mediaTypeNamesFields);\n+\n+        for (Entry<String, MediaType> mediaTypeEntry : mediaTypeConstantsMap.entrySet()) {\n+            final String mediaTypeName = mediaTypeNamesConstantsMap.get(mediaTypeEntry.getKey());\n+            assertThat(mediaTypeName).isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "544478cc741f15a19145cf821a55c0ae49649839"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY2NjcyOA==", "bodyText": "Oh! Let me apply it.", "url": "https://github.com/line/armeria/pull/2438#discussion_r374666728", "createdAt": "2020-02-04T13:24:14Z", "author": {"login": "JunoJunho"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.linecorp.armeria.common.MediaTypeTest.getConstantFields;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Field;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.stream.StreamSupport;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.FluentIterable;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames.\n+ */\n+class MediaTypeNamesTest {\n+\n+    // reflection\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {\n+        final FluentIterable<Field> mediaTypeFields = getConstantFields(MediaType.class);\n+        final FluentIterable<Field> mediaTypeNamesFields = getConstantFields(MediaTypeNames.class,\n+                                                                             String.class);\n+\n+        final Map<String, MediaType> mediaTypeConstantsMap = getConstantFieldMap(mediaTypeFields);\n+        final Map<String, String> mediaTypeNamesConstantsMap = getConstantFieldMap(mediaTypeNamesFields);\n+\n+        for (Entry<String, MediaType> mediaTypeEntry : mediaTypeConstantsMap.entrySet()) {\n+            final String mediaTypeName = mediaTypeNamesConstantsMap.get(mediaTypeEntry.getKey());\n+            assertThat(mediaTypeName).isNotNull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwOTM3NQ=="}, "originalCommit": {"oid": "544478cc741f15a19145cf821a55c0ae49649839"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTQzNzU0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMDowMDo1NFrOFlEJnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNTowOToyNlrOFmPamA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwOTYyOQ==", "bodyText": "Iterables.stream(iterable) ?", "url": "https://github.com/line/armeria/pull/2438#discussion_r374409629", "createdAt": "2020-02-04T00:00:54Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.linecorp.armeria.common.MediaTypeTest.getConstantFields;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Field;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.stream.StreamSupport;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.FluentIterable;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames.\n+ */\n+class MediaTypeNamesTest {\n+\n+    // reflection\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {\n+        final FluentIterable<Field> mediaTypeFields = getConstantFields(MediaType.class);\n+        final FluentIterable<Field> mediaTypeNamesFields = getConstantFields(MediaTypeNames.class,\n+                                                                             String.class);\n+\n+        final Map<String, MediaType> mediaTypeConstantsMap = getConstantFieldMap(mediaTypeFields);\n+        final Map<String, String> mediaTypeNamesConstantsMap = getConstantFieldMap(mediaTypeNamesFields);\n+\n+        for (Entry<String, MediaType> mediaTypeEntry : mediaTypeConstantsMap.entrySet()) {\n+            final String mediaTypeName = mediaTypeNamesConstantsMap.get(mediaTypeEntry.getKey());\n+            assertThat(mediaTypeName).isNotNull();\n+            assertThat(mediaTypeName).isEqualTo(mediaTypeEntry.getValue().toString());\n+        }\n+    }\n+\n+    private static <T> Map<String, T> getConstantFieldMap(Iterable<Field> iterable) {\n+        return StreamSupport\n+                .stream(iterable.spliterator(), false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "544478cc741f15a19145cf821a55c0ae49649839"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY2NzA5Mg==", "bodyText": "Current guava does not support such method?", "url": "https://github.com/line/armeria/pull/2438#discussion_r374667092", "createdAt": "2020-02-04T13:24:57Z", "author": {"login": "JunoJunho"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.linecorp.armeria.common.MediaTypeTest.getConstantFields;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Field;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.stream.StreamSupport;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.FluentIterable;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames.\n+ */\n+class MediaTypeNamesTest {\n+\n+    // reflection\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {\n+        final FluentIterable<Field> mediaTypeFields = getConstantFields(MediaType.class);\n+        final FluentIterable<Field> mediaTypeNamesFields = getConstantFields(MediaTypeNames.class,\n+                                                                             String.class);\n+\n+        final Map<String, MediaType> mediaTypeConstantsMap = getConstantFieldMap(mediaTypeFields);\n+        final Map<String, String> mediaTypeNamesConstantsMap = getConstantFieldMap(mediaTypeNamesFields);\n+\n+        for (Entry<String, MediaType> mediaTypeEntry : mediaTypeConstantsMap.entrySet()) {\n+            final String mediaTypeName = mediaTypeNamesConstantsMap.get(mediaTypeEntry.getKey());\n+            assertThat(mediaTypeName).isNotNull();\n+            assertThat(mediaTypeName).isEqualTo(mediaTypeEntry.getValue().toString());\n+        }\n+    }\n+\n+    private static <T> Map<String, T> getConstantFieldMap(Iterable<Field> iterable) {\n+        return StreamSupport\n+                .stream(iterable.spliterator(), false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwOTYyOQ=="}, "originalCommit": {"oid": "544478cc741f15a19145cf821a55c0ae49649839"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcxNjA4NQ==", "bodyText": "I could not find this method.", "url": "https://github.com/line/armeria/pull/2438#discussion_r374716085", "createdAt": "2020-02-04T14:51:57Z", "author": {"login": "JunoJunho"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.linecorp.armeria.common.MediaTypeTest.getConstantFields;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Field;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.stream.StreamSupport;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.FluentIterable;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames.\n+ */\n+class MediaTypeNamesTest {\n+\n+    // reflection\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {\n+        final FluentIterable<Field> mediaTypeFields = getConstantFields(MediaType.class);\n+        final FluentIterable<Field> mediaTypeNamesFields = getConstantFields(MediaTypeNames.class,\n+                                                                             String.class);\n+\n+        final Map<String, MediaType> mediaTypeConstantsMap = getConstantFieldMap(mediaTypeFields);\n+        final Map<String, String> mediaTypeNamesConstantsMap = getConstantFieldMap(mediaTypeNamesFields);\n+\n+        for (Entry<String, MediaType> mediaTypeEntry : mediaTypeConstantsMap.entrySet()) {\n+            final String mediaTypeName = mediaTypeNamesConstantsMap.get(mediaTypeEntry.getKey());\n+            assertThat(mediaTypeName).isNotNull();\n+            assertThat(mediaTypeName).isEqualTo(mediaTypeEntry.getValue().toString());\n+        }\n+    }\n+\n+    private static <T> Map<String, T> getConstantFieldMap(Iterable<Field> iterable) {\n+        return StreamSupport\n+                .stream(iterable.spliterator(), false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwOTYyOQ=="}, "originalCommit": {"oid": "544478cc741f15a19145cf821a55c0ae49649839"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyNDgzNw==", "bodyText": "Ugh, sorry. I must be mistaken. \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2438#discussion_r375024837", "createdAt": "2020-02-05T02:04:14Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.linecorp.armeria.common.MediaTypeTest.getConstantFields;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Field;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.stream.StreamSupport;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.FluentIterable;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames.\n+ */\n+class MediaTypeNamesTest {\n+\n+    // reflection\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {\n+        final FluentIterable<Field> mediaTypeFields = getConstantFields(MediaType.class);\n+        final FluentIterable<Field> mediaTypeNamesFields = getConstantFields(MediaTypeNames.class,\n+                                                                             String.class);\n+\n+        final Map<String, MediaType> mediaTypeConstantsMap = getConstantFieldMap(mediaTypeFields);\n+        final Map<String, String> mediaTypeNamesConstantsMap = getConstantFieldMap(mediaTypeNamesFields);\n+\n+        for (Entry<String, MediaType> mediaTypeEntry : mediaTypeConstantsMap.entrySet()) {\n+            final String mediaTypeName = mediaTypeNamesConstantsMap.get(mediaTypeEntry.getKey());\n+            assertThat(mediaTypeName).isNotNull();\n+            assertThat(mediaTypeName).isEqualTo(mediaTypeEntry.getValue().toString());\n+        }\n+    }\n+\n+    private static <T> Map<String, T> getConstantFieldMap(Iterable<Field> iterable) {\n+        return StreamSupport\n+                .stream(iterable.spliterator(), false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwOTYyOQ=="}, "originalCommit": {"oid": "544478cc741f15a19145cf821a55c0ae49649839"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyNzA1Ng==", "bodyText": "In guava it's Streams.stream :)", "url": "https://github.com/line/armeria/pull/2438#discussion_r375027056", "createdAt": "2020-02-05T02:13:57Z", "author": {"login": "anuraaga"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.linecorp.armeria.common.MediaTypeTest.getConstantFields;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Field;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.stream.StreamSupport;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.FluentIterable;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames.\n+ */\n+class MediaTypeNamesTest {\n+\n+    // reflection\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {\n+        final FluentIterable<Field> mediaTypeFields = getConstantFields(MediaType.class);\n+        final FluentIterable<Field> mediaTypeNamesFields = getConstantFields(MediaTypeNames.class,\n+                                                                             String.class);\n+\n+        final Map<String, MediaType> mediaTypeConstantsMap = getConstantFieldMap(mediaTypeFields);\n+        final Map<String, String> mediaTypeNamesConstantsMap = getConstantFieldMap(mediaTypeNamesFields);\n+\n+        for (Entry<String, MediaType> mediaTypeEntry : mediaTypeConstantsMap.entrySet()) {\n+            final String mediaTypeName = mediaTypeNamesConstantsMap.get(mediaTypeEntry.getKey());\n+            assertThat(mediaTypeName).isNotNull();\n+            assertThat(mediaTypeName).isEqualTo(mediaTypeEntry.getValue().toString());\n+        }\n+    }\n+\n+    private static <T> Map<String, T> getConstantFieldMap(Iterable<Field> iterable) {\n+        return StreamSupport\n+                .stream(iterable.spliterator(), false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwOTYyOQ=="}, "originalCommit": {"oid": "544478cc741f15a19145cf821a55c0ae49649839"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxNDQzNA==", "bodyText": "@JunoJunho Could you fix this?", "url": "https://github.com/line/armeria/pull/2438#discussion_r375614434", "createdAt": "2020-02-06T02:37:50Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.linecorp.armeria.common.MediaTypeTest.getConstantFields;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Field;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.stream.StreamSupport;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.FluentIterable;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames.\n+ */\n+class MediaTypeNamesTest {\n+\n+    // reflection\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {\n+        final FluentIterable<Field> mediaTypeFields = getConstantFields(MediaType.class);\n+        final FluentIterable<Field> mediaTypeNamesFields = getConstantFields(MediaTypeNames.class,\n+                                                                             String.class);\n+\n+        final Map<String, MediaType> mediaTypeConstantsMap = getConstantFieldMap(mediaTypeFields);\n+        final Map<String, String> mediaTypeNamesConstantsMap = getConstantFieldMap(mediaTypeNamesFields);\n+\n+        for (Entry<String, MediaType> mediaTypeEntry : mediaTypeConstantsMap.entrySet()) {\n+            final String mediaTypeName = mediaTypeNamesConstantsMap.get(mediaTypeEntry.getKey());\n+            assertThat(mediaTypeName).isNotNull();\n+            assertThat(mediaTypeName).isEqualTo(mediaTypeEntry.getValue().toString());\n+        }\n+    }\n+\n+    private static <T> Map<String, T> getConstantFieldMap(Iterable<Field> iterable) {\n+        return StreamSupport\n+                .stream(iterable.spliterator(), false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwOTYyOQ=="}, "originalCommit": {"oid": "544478cc741f15a19145cf821a55c0ae49649839"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxOTc0Mg==", "bodyText": "In guava it's Streams.stream :)\n\nGood to know \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/2438#discussion_r375619742", "createdAt": "2020-02-06T03:02:37Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.linecorp.armeria.common.MediaTypeTest.getConstantFields;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Field;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.stream.StreamSupport;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.FluentIterable;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames.\n+ */\n+class MediaTypeNamesTest {\n+\n+    // reflection\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {\n+        final FluentIterable<Field> mediaTypeFields = getConstantFields(MediaType.class);\n+        final FluentIterable<Field> mediaTypeNamesFields = getConstantFields(MediaTypeNames.class,\n+                                                                             String.class);\n+\n+        final Map<String, MediaType> mediaTypeConstantsMap = getConstantFieldMap(mediaTypeFields);\n+        final Map<String, String> mediaTypeNamesConstantsMap = getConstantFieldMap(mediaTypeNamesFields);\n+\n+        for (Entry<String, MediaType> mediaTypeEntry : mediaTypeConstantsMap.entrySet()) {\n+            final String mediaTypeName = mediaTypeNamesConstantsMap.get(mediaTypeEntry.getKey());\n+            assertThat(mediaTypeName).isNotNull();\n+            assertThat(mediaTypeName).isEqualTo(mediaTypeEntry.getValue().toString());\n+        }\n+    }\n+\n+    private static <T> Map<String, T> getConstantFieldMap(Iterable<Field> iterable) {\n+        return StreamSupport\n+                .stream(iterable.spliterator(), false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwOTYyOQ=="}, "originalCommit": {"oid": "544478cc741f15a19145cf821a55c0ae49649839"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0Mjc3Ng==", "bodyText": "Let me handle this.", "url": "https://github.com/line/armeria/pull/2438#discussion_r375642776", "createdAt": "2020-02-06T05:09:26Z", "author": {"login": "JunoJunho"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.linecorp.armeria.common.MediaTypeTest.getConstantFields;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Field;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.stream.StreamSupport;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.FluentIterable;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames.\n+ */\n+class MediaTypeNamesTest {\n+\n+    // reflection\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {\n+        final FluentIterable<Field> mediaTypeFields = getConstantFields(MediaType.class);\n+        final FluentIterable<Field> mediaTypeNamesFields = getConstantFields(MediaTypeNames.class,\n+                                                                             String.class);\n+\n+        final Map<String, MediaType> mediaTypeConstantsMap = getConstantFieldMap(mediaTypeFields);\n+        final Map<String, String> mediaTypeNamesConstantsMap = getConstantFieldMap(mediaTypeNamesFields);\n+\n+        for (Entry<String, MediaType> mediaTypeEntry : mediaTypeConstantsMap.entrySet()) {\n+            final String mediaTypeName = mediaTypeNamesConstantsMap.get(mediaTypeEntry.getKey());\n+            assertThat(mediaTypeName).isNotNull();\n+            assertThat(mediaTypeName).isEqualTo(mediaTypeEntry.getValue().toString());\n+        }\n+    }\n+\n+    private static <T> Map<String, T> getConstantFieldMap(Iterable<Field> iterable) {\n+        return StreamSupport\n+                .stream(iterable.spliterator(), false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwOTYyOQ=="}, "originalCommit": {"oid": "544478cc741f15a19145cf821a55c0ae49649839"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTM1NzcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/annotation/ConsumesJson.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjoxMDoyM1rOFlpyhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjoxMDoyM1rOFlpyhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyNjMxMA==", "bodyText": "Special thanks to this \u2764\ufe0f", "url": "https://github.com/line/armeria/pull/2438#discussion_r375026310", "createdAt": "2020-02-05T02:10:23Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/annotation/ConsumesJson.java", "diffHunk": "@@ -20,11 +20,13 @@\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n \n+import com.linecorp.armeria.common.MediaTypeNames;\n+\n /**\n- * An alias for {@code @Consumes(\"application/json\")}.\n+ * An alias for {@code @Consumes(MediaTypeNames.JSON)}.\n  */\n @Retention(RetentionPolicy.RUNTIME)\n @Target({ ElementType.TYPE, ElementType.METHOD })\n-@Consumes(\"application/json\")\n+@Consumes(MediaTypeNames.JSON)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778c4839e0a0d5d3b8f11879215bac9181e42021"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTM2NTY1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjoxNjoxMlrOFlp3Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwODoxMzozOVrOFlu3QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyNzU1NA==", "bodyText": "Though if we can I think it's good to migrate these to return Stream, we don't use FluentIterable anywhere else in our code", "url": "https://github.com/line/armeria/pull/2438#discussion_r375027554", "createdAt": "2020-02-05T02:16:12Z", "author": {"login": "anuraaga"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeTest.java", "diffHunk": "@@ -116,20 +116,21 @@ public void testConstants_areUnique() {\n \n     // reflection\n     @SuppressWarnings(\"Guava\")\n-    private static FluentIterable<Field> getConstantFields() {\n-        return FluentIterable.from(asList(MediaType.class.getDeclaredFields())).filter(input -> {\n+    static <T, R> FluentIterable<Field> getConstantFields(Class<T> clazz, Class<R>... filterClazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778c4839e0a0d5d3b8f11879215bac9181e42021"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyOTQ3MQ==", "bodyText": "it's good to migrate these to return Stream\n\n+1 \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2438#discussion_r375029471", "createdAt": "2020-02-05T02:24:09Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeTest.java", "diffHunk": "@@ -116,20 +116,21 @@ public void testConstants_areUnique() {\n \n     // reflection\n     @SuppressWarnings(\"Guava\")\n-    private static FluentIterable<Field> getConstantFields() {\n-        return FluentIterable.from(asList(MediaType.class.getDeclaredFields())).filter(input -> {\n+    static <T, R> FluentIterable<Field> getConstantFields(Class<T> clazz, Class<R>... filterClazz) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyNzU1NA=="}, "originalCommit": {"oid": "778c4839e0a0d5d3b8f11879215bac9181e42021"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA0NDgwNg==", "bodyText": "Maybe better leaving at it is, given the entire test case has been forked from Guava?", "url": "https://github.com/line/armeria/pull/2438#discussion_r375044806", "createdAt": "2020-02-05T03:38:31Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeTest.java", "diffHunk": "@@ -116,20 +116,21 @@ public void testConstants_areUnique() {\n \n     // reflection\n     @SuppressWarnings(\"Guava\")\n-    private static FluentIterable<Field> getConstantFields() {\n-        return FluentIterable.from(asList(MediaType.class.getDeclaredFields())).filter(input -> {\n+    static <T, R> FluentIterable<Field> getConstantFields(Class<T> clazz, Class<R>... filterClazz) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyNzU1NA=="}, "originalCommit": {"oid": "778c4839e0a0d5d3b8f11879215bac9181e42021"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwOTQ0MQ==", "bodyText": "Ah yeah it's fine to leave it then, can just clean up the Streams.stream part.", "url": "https://github.com/line/armeria/pull/2438#discussion_r375109441", "createdAt": "2020-02-05T08:13:39Z", "author": {"login": "anuraaga"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeTest.java", "diffHunk": "@@ -116,20 +116,21 @@ public void testConstants_areUnique() {\n \n     // reflection\n     @SuppressWarnings(\"Guava\")\n-    private static FluentIterable<Field> getConstantFields() {\n-        return FluentIterable.from(asList(MediaType.class.getDeclaredFields())).filter(input -> {\n+    static <T, R> FluentIterable<Field> getConstantFields(Class<T> clazz, Class<R>... filterClazz) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyNzU1NA=="}, "originalCommit": {"oid": "778c4839e0a0d5d3b8f11879215bac9181e42021"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2957, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}