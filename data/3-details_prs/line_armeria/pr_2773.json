{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NjcwNzcw", "number": 2773, "title": "Allow injecting `null` into annotated service methods if annotated wi\u2026", "bodyText": "\u2026th @Nullable\nMotivation:\nCurrently, sending a request without all query parameters will fail with\na 400 Bad Request error response. For example, sending a GET /get\nrequest will fail with a 400 Bad Request response because the query\nparameter foo does not exist:\npublic class MyService {\n    @Get(\"/get\")\n    public String get(@Param String foo) {\n        return foo;\n    }\n}\n\nTo make the parameter foo optional, a user has to annotate it with\n@Default annotation or change its type to Optional<String>.\nIt would be nice if we also support @Nullable annotation, so that a\nuser can tell that null (missing value) is allowed for injection.\npublic class MyService {\n    @Get(\"/get\")\n    public String get(@Param @Nullable String foo) {\n        //                   ^^^^^^^^^\n        return foo;\n    }\n}\n\nModifications:\n\nAllow injecting null if the parameter is annotated with @Nullable.\nUpdate documentation\n\nResult:\n\nA simple way to handle an optional parameter/header.\nCloses #2766", "createdAt": "2020-06-04T08:24:40Z", "url": "https://github.com/line/armeria/pull/2773", "merged": true, "mergeCommit": {"oid": "a6ce2171edaf7b30fc61bdaf7f357f2997472d1e"}, "closed": true, "closedAt": "2020-06-05T11:19:23Z", "author": {"login": "trustin"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcn5oGXgH2gAyNDI3NjcwNzcwOjBiMTM3M2Y4OTgwNTg2MGExNzI5NTFmY2Y0NDQ3OWI2MDM1YWQ3NTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoM3vkAFqTQyNTAzMzE1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0b1373f89805860a172951fcf44479b6035ad756", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/0b1373f89805860a172951fcf44479b6035ad756", "committedDate": "2020-06-04T08:17:31Z", "message": "Allow injecting `null` into annotated service methods if annotated with `@Nullable`\n\nMotivation:\n\nCurrently, sending a request without all query parameters will fail with\na `400 Bad Request` error response. For example, sending a `GET /get`\nrequest will fail with a `400 Bad Request` response because the query\nparameter `foo` does not exist:\n\n    public class MyService {\n        @Get(\"/get\")\n        public String get(@Param String foo) {\n            return foo;\n        }\n    }\n\nTo make the parameter `foo` optional, a user has to annotate it with\n`@Default` annotation or change its type to `Optional<String>`.\n\nIt would be nice if we also support `@Nullable` annotation, so that a\nuser can tell that `null` (missing value) is allowed for injection.\n\n    public class MyService {\n        @Get(\"/get\")\n        public String get(@Param @Nullable String foo) {\n            //                   ^^^^^^^^^\n            return foo;\n        }\n    }\n\nModifications:\n\n- Allow injecting `null` if the parameter is annotated with `@Nullable`.\n- Update documentation\n\nResult:\n\n- A simple way to handle an optional parameter/header.\n- Closes #2766"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/e1f27aad706ed51f9e7b75f108c1ea159aafd513", "committedDate": "2020-06-04T08:25:07Z", "message": "Checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjE3NzU4", "url": "https://github.com/line/armeria/pull/2773#pullrequestreview-424217758", "createdAt": "2020-06-04T08:30:05Z", "commit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODozMDowNlrOGe7Unw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODozMDowNlrOGe7Unw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4MjM5OQ==", "bodyText": "\ud83d\ude06", "url": "https://github.com/line/armeria/pull/2773#discussion_r435082399", "createdAt": "2020-06-04T08:30:06Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "diffHunk": "@@ -1045,14 +1045,30 @@ private AnnotatedValueResolver build() {\n                     defaultValue = null;\n                 }\n             } else {\n-                shouldExist = !shouldWrapValueAsOptional;\n                 // Set the default value to null if it was not specified.\n                 defaultValue = null;\n+\n+                if (shouldWrapValueAsOptional) {\n+                    shouldExist = false;\n+                } else {\n+                    // Allow `null` if annotated with `@Nullable`.\n+                    boolean isNonNull = true;\n+                    for (Annotation a : annotatedElement.getAnnotations()) {\n+                        final String annotationTypeName = a.annotationType().getName();\n+                        System.err.println(annotationTypeName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjIwOTg3", "url": "https://github.com/line/armeria/pull/2773#pullrequestreview-424220987", "createdAt": "2020-06-04T08:34:14Z", "commit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODozNDoxNFrOGe7eTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODozNDoyOVrOGe7e5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4NDg3Ng==", "bodyText": "\ud83d\ude05", "url": "https://github.com/line/armeria/pull/2773#discussion_r435084876", "createdAt": "2020-06-04T08:34:14Z", "author": {"login": "KarboniteKream"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "diffHunk": "@@ -1045,14 +1045,30 @@ private AnnotatedValueResolver build() {\n                     defaultValue = null;\n                 }\n             } else {\n-                shouldExist = !shouldWrapValueAsOptional;\n                 // Set the default value to null if it was not specified.\n                 defaultValue = null;\n+\n+                if (shouldWrapValueAsOptional) {\n+                    shouldExist = false;\n+                } else {\n+                    // Allow `null` if annotated with `@Nullable`.\n+                    boolean isNonNull = true;\n+                    for (Annotation a : annotatedElement.getAnnotations()) {\n+                        final String annotationTypeName = a.annotationType().getName();\n+                        System.err.println(annotationTypeName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4NTAzMA==", "bodyText": "Grammar: packages -> package?", "url": "https://github.com/line/armeria/pull/2773#discussion_r435085030", "createdAt": "2020-06-04T08:34:29Z", "author": {"login": "KarboniteKream"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -259,6 +269,14 @@ public class MyAnnotatedService {\n }\n ```\n \n+<Tip>\n+\n+`@Nullable` annotation can be from *any* packages as long as its simple name is `Nullable`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjIzMDk0", "url": "https://github.com/line/armeria/pull/2773#pullrequestreview-424223094", "createdAt": "2020-06-04T08:36:40Z", "commit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODozNjo0MFrOGe7j8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODozNzoyMFrOGe7l4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4NjMyMw==", "bodyText": "<type://@Default>, @Nullable annotation or Optional<?> class?", "url": "https://github.com/line/armeria/pull/2773#discussion_r435086323", "createdAt": "2020-06-04T08:36:40Z", "author": {"login": "minwoox"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -238,19 +238,29 @@ public class MyAnnotatedService {\n When the value of <type://@Param> annotation is not shown in the path pattern, it will be handled as a\n parameter name of the query string of the request. If you have a service class like the example below and\n a user sends an HTTP `GET` request with URI of `/hello1?name=armeria`, the service method will get `armeria`\n-as the value of parameter `name`. If there is no parameter named `name` in the query string, the parameter\n-`name` of the method would be `null`. If you want to avoid `null` in this case, you can use\n-<type://@Default> annotation or `Optional<?>` class, e.g. `hello2` and `hello3` methods below, respectively.\n+as the value of parameter `name`.\n+\n+If there is no parameter named `name` in the query string, the service method that requires it will not be\n+invoked, but the client will get a `400 Bad Request` response.  If you want to allow `null` to be injected,\n+you can use <type://@Default> or `@Nullable` annotation or `Optional<?>` class, like `hello2()`, `hello3()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4NjgxNg==", "bodyText": "hello4?", "url": "https://github.com/line/armeria/pull/2773#discussion_r435086816", "createdAt": "2020-06-04T08:37:20Z", "author": {"login": "minwoox"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -238,19 +238,29 @@ public class MyAnnotatedService {\n When the value of <type://@Param> annotation is not shown in the path pattern, it will be handled as a\n parameter name of the query string of the request. If you have a service class like the example below and\n a user sends an HTTP `GET` request with URI of `/hello1?name=armeria`, the service method will get `armeria`\n-as the value of parameter `name`. If there is no parameter named `name` in the query string, the parameter\n-`name` of the method would be `null`. If you want to avoid `null` in this case, you can use\n-<type://@Default> annotation or `Optional<?>` class, e.g. `hello2` and `hello3` methods below, respectively.\n+as the value of parameter `name`.\n+\n+If there is no parameter named `name` in the query string, the service method that requires it will not be\n+invoked, but the client will get a `400 Bad Request` response.  If you want to allow `null` to be injected,\n+you can use <type://@Default> or `@Nullable` annotation or `Optional<?>` class, like `hello2()`, `hello3()`\n+and `hello4()` methods below.\n \n ```java\n public class MyAnnotatedService {\n \n     @Get(\"/hello1\")\n+    // Not invoked when 'name' parameter is missing.\n     public HttpResponse hello1(@Param(\"name\") String name) { ... }\n \n     @Get(\"/hello2\")\n     public HttpResponse hello2(@Param(\"name\") @Default(\"armeria\") String name) { ... }\n \n+    @Get(\"/hello3\")\n+    public HttpResponse hello3(@Param(\"name\") @Nullable String name) {\n+        String clientName = name != null ? name : \"armeria\";\n+        // ...\n+    }\n+\n     @Get(\"/hello3\")\n     public HttpResponse hello3(@Param(\"name\") Optional<String> name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjM0Mjkw", "url": "https://github.com/line/armeria/pull/2773#pullrequestreview-424234290", "createdAt": "2020-06-04T08:50:50Z", "commit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODo1MDo1MFrOGe8FCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODo1MDo1MFrOGe8FCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5NDc5NQ==", "bodyText": "Could use Class.getSimpleName()?\n\"Nullable\".equals(a.annoatation.getSimpleName())", "url": "https://github.com/line/armeria/pull/2773#discussion_r435094795", "createdAt": "2020-06-04T08:50:50Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "diffHunk": "@@ -1045,14 +1045,30 @@ private AnnotatedValueResolver build() {\n                     defaultValue = null;\n                 }\n             } else {\n-                shouldExist = !shouldWrapValueAsOptional;\n                 // Set the default value to null if it was not specified.\n                 defaultValue = null;\n+\n+                if (shouldWrapValueAsOptional) {\n+                    shouldExist = false;\n+                } else {\n+                    // Allow `null` if annotated with `@Nullable`.\n+                    boolean isNonNull = true;\n+                    for (Annotation a : annotatedElement.getAnnotations()) {\n+                        final String annotationTypeName = a.annotationType().getName();\n+                        System.err.println(annotationTypeName);\n+                        if (annotationTypeName.endsWith(\".Nullable\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "605e89239740369afcc869f63ae209ea06034850", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/605e89239740369afcc869f63ae209ea06034850", "committedDate": "2020-06-04T08:57:57Z", "message": "Address the comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a1c0f71eb0efb57b3d42484ba0091a8bfa887e1", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/4a1c0f71eb0efb57b3d42484ba0091a8bfa887e1", "committedDate": "2020-06-04T08:56:04Z", "message": "Address the comments"}, "afterCommit": {"oid": "605e89239740369afcc869f63ae209ea06034850", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/605e89239740369afcc869f63ae209ea06034850", "committedDate": "2020-06-04T08:57:57Z", "message": "Address the comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a4b864bae0644462a095aa9ae56f4db2afbb99f", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/1a4b864bae0644462a095aa9ae56f4db2afbb99f", "committedDate": "2020-06-04T08:59:52Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74b8947666129a9797303f3ae06a24dfbfd4ceb6", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/74b8947666129a9797303f3ae06a24dfbfd4ceb6", "committedDate": "2020-06-04T09:53:57Z", "message": "Fix a test failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2301835dd27ec8bf034ae3c2933d5b8dce8b65c3", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/2301835dd27ec8bf034ae3c2933d5b8dce8b65c3", "committedDate": "2020-06-04T12:03:20Z", "message": "Fix grammar as suggested by @KarboniteKream / Insert line breaks to avoid horizontal scroll"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2599a95c491d06fdb959a42e2abd0e71b34355e0", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/2599a95c491d06fdb959a42e2abd0e71b34355e0", "committedDate": "2020-06-04T12:10:51Z", "message": "More line breaks and more compact comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MDMzMTU0", "url": "https://github.com/line/armeria/pull/2773#pullrequestreview-425033154", "createdAt": "2020-06-05T06:42:48Z", "commit": {"oid": "2599a95c491d06fdb959a42e2abd0e71b34355e0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 159, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}