{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4NTU3Nzgw", "number": 2780, "title": "Add `RequestLog.serviceName()`", "bodyText": "Motivation:\nThis PR solves two problems.\n\nProvides a human readable serviceName and fullName of a request.\nSometimes users might want to trace or group a request by serviceName or fullName.\nThere are inconsistency in RequestLog.name() that returns\ncom.foo.bar.Service/method for gRPC while method for Thrift.\n\nRelated: #2768\nModifications:\n\nAdd RequestLog.serviceName()\n\nReturns a service name for gRPC and Thrift.\nReturns an innermost class name for annotated service.\nReturns a path pattern for an HttpService if defaultServiceName is not specified.\n\n\nModify RequestLog.name() that returns a method name for gRPC, Thrift and annotated service.\nAdd Request.fullName() that returns a concatentation of serviceName and name with /.\nAdd the setter of defaultServiceName(...) to AbstractServiceBindingBuilder and its subclasses.\nAdd unwrap() to Unwrappable\nAdd REQ_SERVICE_NAME(\"req.serviceName\") property to BuiltInProperty.\n(Deprecating) Unwrappable.delegate() has been deprecated in favor of unwrap().\n(Breaking) RetrofitMeterIdPrefixFunctionBuilder.serviceClass(serviceClass) has been removed\n\nThe serviceClass is obtained from a Retrofit method.\n\n\n\nResult:\nYou can now get the service name and full name of a request through RequestLog.", "createdAt": "2020-06-05T16:19:41Z", "url": "https://github.com/line/armeria/pull/2780", "merged": true, "mergeCommit": {"oid": "7f3295f32ac263ef83d96e6c763c1395431681b9"}, "closed": true, "closedAt": "2020-06-18T06:46:22Z", "author": {"login": "ikhoon"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoVGO4AH2gAyNDI4NTU3NzgwOmFiZGQzMDUxYmNmZWIxZDZhYTEwN2IyZWNiOTlhNmM0ZmNjYjVmYTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsYJOigH2gAyNDI4NTU3NzgwOjljYTZjODEzN2YyM2QwZGVhN2M0M2ViZWQyM2RiNTk4NGVmZmYyNzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "abdd3051bcfeb1d6aa107b2ecb99a6c4fccb5fa6", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/abdd3051bcfeb1d6aa107b2ecb99a6c4fccb5fa6", "committedDate": "2020-06-05T16:17:52Z", "message": "Add `RequestLog.serviceName()`\n\nMotivation:\n\nThis PR solves two problems.\n1) Provides a human readable `serviceName` and `fullName` of a request.\n   Sometimes users might want to trace or group a request by `serviceName` or `fullName`.\n2) There are inconsistency in `RequestLog.name()` that returns\n   `com.foo.bar.Service/method` for gRPC while `method` for Thrift.\n\nRelated: #2768\n\nModifications:\n\n- Add `RequestLog.serviceName()`\n  - Returns a service name for gRPC and Thrift.\n  - Returns an innermost class name for annotated service.\n  - Returns a path pattern for an `HttpService` if defaultServiceName is not specified.\n- Modify `RequestLog.name() to return a method name for gRPC, Thrift and annotated service.\n- Add `Request.fullName() that returns a concatentation of `serviceName` and `name` with `/`.\n- Add the setter of `defaultServiceName(...)` to `AbstractServiceBindingBuilder` and its subclasses.\n\nResult:\n\nYou can now get the service name and full name of a request through `RequestLog`."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0668b77643de5057a2faaa3baf28a181c8481970", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/0668b77643de5057a2faaa3baf28a181c8481970", "committedDate": "2020-06-05T16:52:37Z", "message": "Fix meter tag"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1Nzg4MDYy", "url": "https://github.com/line/armeria/pull/2780#pullrequestreview-425788062", "createdAt": "2020-06-07T05:23:44Z", "commit": {"oid": "0668b77643de5057a2faaa3baf28a181c8481970"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwNToyMzo0NVrOGgHPYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwNToyMzo0NVrOGgHPYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyNjI0Mw==", "bodyText": "Shouldn't this only check name? serviceName shouldn't be required.", "url": "https://github.com/line/armeria/pull/2780#discussion_r436326243", "createdAt": "2020-06-07T05:23:45Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -455,9 +460,10 @@ private void propagateRequestSideLog(RequestLogAccess child) {\n              .thenAccept(log -> serializationFormat(log.scheme().serializationFormat()));\n         child.whenAvailable(RequestLogProperty.NAME)\n              .thenAccept(log -> {\n+                 final String serviceName = log.serviceName();\n                  final String name = log.name();\n-                 if (name != null) {\n-                     name(name);\n+                 if (serviceName != null && name != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0668b77643de5057a2faaa3baf28a181c8481970"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1Nzg4MzE5", "url": "https://github.com/line/armeria/pull/2780#pullrequestreview-425788319", "createdAt": "2020-06-07T05:29:16Z", "commit": {"oid": "0668b77643de5057a2faaa3baf28a181c8481970"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwNToyOToxNlrOGgHQmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwNToyOToxNlrOGgHQmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyNjU1NQ==", "bodyText": "I notice serviceName is nullable in some places but not here which I guess is the most important. I think serviceName should not be required since not all requests model to having a service name, or users may not be interested (especially for a client, less so for server).", "url": "https://github.com/line/armeria/pull/2780#discussion_r436326555", "createdAt": "2020-06-07T05:29:16Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RequestLogBuilder.java", "diffHunk": "@@ -100,10 +101,15 @@ void session(@Nullable Channel channel, SessionProtocol sessionProtocol, @Nullab\n     void serializationFormat(SerializationFormat serializationFormat);\n \n     /**\n-     * Sets the human-readable name of the {@link Request}, such as RPC method name, annotated service method\n-     * name or HTTP method name. This property is often used as a meter tag or distributed trace's span name.\n+     * Sets the human-readable service name and method name of the {@link Request} such as:\n+     * <ul>\n+     *    <li>A service and method name for gRPC and Thrift</li>\n+     *    <li>An innermost class and method name for annotated service</li>\n+     *    <li>A path pattern and HTTP method name for {@link HttpService}</li>\n+     * </ul>\n+     * This property is often used as a meter tag or distributed trace's span name.\n      */\n-    void name(String name);\n+    void name(String serviceName, String name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0668b77643de5057a2faaa3baf28a181c8481970"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e39ed8710051735cec25452fd714989b05db53a", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/1e39ed8710051735cec25452fd714989b05db53a", "committedDate": "2020-06-08T09:16:27Z", "message": "Address comments by @anuraaga, @trustin + Fix broken tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db5f21ccf1b963273281497d34d6661dfa6117f8", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/db5f21ccf1b963273281497d34d6661dfa6117f8", "committedDate": "2020-06-08T10:39:21Z", "message": "Fix broken test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71e4aced178dc1effd4b1268601e4aea458799d6", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/71e4aced178dc1effd4b1268601e4aea458799d6", "committedDate": "2020-06-08T13:49:47Z", "message": "Clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a48e9aa0a5d1b5b82ffe9755b9d2e1d3b96b137", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/2a48e9aa0a5d1b5b82ffe9755b9d2e1d3b96b137", "committedDate": "2020-06-09T03:26:28Z", "message": "Use Class.getName()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2ODExNTUx", "url": "https://github.com/line/armeria/pull/2780#pullrequestreview-426811551", "createdAt": "2020-06-09T06:03:26Z", "commit": {"oid": "2a48e9aa0a5d1b5b82ffe9755b9d2e1d3b96b137"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjowMzoyNlrOGg57IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjoyMTowOFrOGg6T9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1NjY0MA==", "bodyText": "Could these two lines be merged for aesthetics?", "url": "https://github.com/line/armeria/pull/2780#discussion_r437156640", "createdAt": "2020-06-09T06:03:26Z", "author": {"login": "trustin"}, "path": "benchmarks/src/jmh/java/com/linecorp/armeria/server/RoutersBenchmark.java", "diffHunk": "@@ -43,13 +43,18 @@\n             RequestHeaders.of(HttpMethod.POST, \"/grpc.package.Service/Method1\");\n \n     static {\n+        final String defaultServiceName = null;\n+        final String defaultLogName = null;\n         SERVICES = ImmutableList.of(\n                 new ServiceConfig(Route.builder().exact(\"/grpc.package.Service/Method1\").build(),\n-                                  SERVICE, null, 0, 0, false, AccessLogWriter.disabled(), false),\n+                                  SERVICE, defaultServiceName, defaultLogName, 0, 0,\n+                                  false, AccessLogWriter.disabled(), false),\n                 new ServiceConfig(Route.builder().exact(\"/grpc.package.Service/Method2\").build(),\n-                                  SERVICE, null, 0, 0, false, AccessLogWriter.disabled(), false)\n+                                  SERVICE, defaultServiceName, defaultLogName, 0, 0,\n+                                  false, AccessLogWriter.disabled(), false)\n         );\n-        FALLBACK_SERVICE = new ServiceConfig(Route.ofCatchAll(), SERVICE, null, 0, 0, false,\n+        FALLBACK_SERVICE = new ServiceConfig(Route.ofCatchAll(), SERVICE, defaultServiceName, defaultLogName, 0,\n+                                             0, false,\n                                              AccessLogWriter.disabled(), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a48e9aa0a5d1b5b82ffe9755b9d2e1d3b96b137"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1NjkyNQ==", "bodyText": "if (name != null) {\n    if (serviceName != null) {\n        logBuilder.name(serviceName, name);\n    } else {\n        logBuilder.name(name);\n    }\n}", "url": "https://github.com/line/armeria/pull/2780#discussion_r437156925", "createdAt": "2020-06-09T06:04:22Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "diffHunk": "@@ -304,8 +304,11 @@ protected static ClientRequestContext newDerivedContext(ClientRequestContext ctx\n         // serializationFormat is always not null, so this is fine.\n         logBuilder.serializationFormat(partial.serializationFormat());\n         if (parentLog.isAvailable(RequestLogProperty.NAME)) {\n+            final String serviceName = partial.serviceName();\n             final String name = partial.name();\n-            if (name != null) {\n+            if (serviceName != null && name != null) {\n+                logBuilder.name(serviceName, name);\n+            } else if (name != null) {\n                 logBuilder.name(name);\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a48e9aa0a5d1b5b82ffe9755b9d2e1d3b96b137"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1NzMxMw==", "bodyText": "Ditto", "url": "https://github.com/line/armeria/pull/2780#discussion_r437157313", "createdAt": "2020-06-09T06:05:22Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -455,8 +460,11 @@ private void propagateRequestSideLog(RequestLogAccess child) {\n              .thenAccept(log -> serializationFormat(log.scheme().serializationFormat()));\n         child.whenAvailable(RequestLogProperty.NAME)\n              .thenAccept(log -> {\n+                 final String serviceName = log.serviceName();\n                  final String name = log.name();\n-                 if (name != null) {\n+                 if (serviceName != null && name != null) {\n+                     name(serviceName, name);\n+                 } else if (name != null) {\n                      name(name);\n                  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a48e9aa0a5d1b5b82ffe9755b9d2e1d3b96b137"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1ODczMA==", "bodyText": "Shouldn't this be out of if (name == null) block?\nWe need to distinguish between 'name-only' and 'serviceName-only' cases.", "url": "https://github.com/line/armeria/pull/2780#discussion_r437158730", "createdAt": "2020-06-09T06:09:24Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -918,19 +959,40 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa\n         }\n \n         if (name == null) {\n+            String newServiceName = null;\n             String newName = null;\n-            final RpcRequest rpcReq = ctx.rpcRequest();\n+            RpcRequest rpcReq = ctx.rpcRequest();\n+            if (rpcReq == null && requestContent instanceof RpcRequest) {\n+               rpcReq = (RpcRequest) requestContent;\n+            }\n+\n             if (rpcReq != null) {\n+                newServiceName = rpcReq.serviceType().getName();\n                 newName = rpcReq.method();\n-            } else if (requestContent instanceof RpcRequest) {\n-                newName = ((RpcRequest) requestContent).method();\n-            }\n+            } else if (ctx instanceof ServiceRequestContext) {\n+                final ServiceConfig config = ((ServiceRequestContext) ctx).config();\n+                newServiceName = config.defaultServiceName();\n+                if (newServiceName == null) {\n+                    newServiceName = config.route().meterTag();\n+                }\n \n-            if (newName == null && ctx instanceof ServiceRequestContext) {\n-                newName = ((ServiceRequestContext) ctx).config().defaultLogName();\n+                newName = config.defaultLogName();\n+                if (newName == null) {\n+                    newName = ctx.method().name();\n+                }\n             }\n \n+            serviceName = newServiceName;\n             name = newName;\n+            if (serviceName != null) {\n+                if (name != null) {\n+                    fullName = serviceName + '/' + name;\n+                } else {\n+                    fullName = serviceName;\n+                }\n+            } else {\n+                fullName = name;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a48e9aa0a5d1b5b82ffe9755b9d2e1d3b96b137"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1OTk5Nw==", "bodyText": "Should we set the fallback serviceName and name for the client side as well? Then we could make the two properties non-null.", "url": "https://github.com/line/armeria/pull/2780#discussion_r437159997", "createdAt": "2020-06-09T06:12:54Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -918,19 +959,40 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa\n         }\n \n         if (name == null) {\n+            String newServiceName = null;\n             String newName = null;\n-            final RpcRequest rpcReq = ctx.rpcRequest();\n+            RpcRequest rpcReq = ctx.rpcRequest();\n+            if (rpcReq == null && requestContent instanceof RpcRequest) {\n+               rpcReq = (RpcRequest) requestContent;\n+            }\n+\n             if (rpcReq != null) {\n+                newServiceName = rpcReq.serviceType().getName();\n                 newName = rpcReq.method();\n-            } else if (requestContent instanceof RpcRequest) {\n-                newName = ((RpcRequest) requestContent).method();\n-            }\n+            } else if (ctx instanceof ServiceRequestContext) {\n+                final ServiceConfig config = ((ServiceRequestContext) ctx).config();\n+                newServiceName = config.defaultServiceName();\n+                if (newServiceName == null) {\n+                    newServiceName = config.route().meterTag();\n+                }\n \n-            if (newName == null && ctx instanceof ServiceRequestContext) {\n-                newName = ((ServiceRequestContext) ctx).config().defaultLogName();\n+                newName = config.defaultLogName();\n+                if (newName == null) {\n+                    newName = ctx.method().name();\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a48e9aa0a5d1b5b82ffe9755b9d2e1d3b96b137"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2Mjk5OA==", "bodyText": "Should we now default serviceTagName to \"service\"? Or do we already?", "url": "https://github.com/line/armeria/pull/2780#discussion_r437162998", "createdAt": "2020-06-09T06:21:08Z", "author": {"login": "trustin"}, "path": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/RetrofitMeterIdPrefixFunction.java", "diffHunk": "@@ -107,7 +107,7 @@ private void buildTags(ImmutableList.Builder<Tag> tagListBuilder, RequestOnlyLog\n         if (invocation != null) {\n             if (serviceTagName != null) {\n                 final String service = firstNonNull(serviceName,\n-                                                    invocation.method().getDeclaringClass().getSimpleName());\n+                                                    invocation.method().getDeclaringClass().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a48e9aa0a5d1b5b82ffe9755b9d2e1d3b96b137"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffd133d7ba86901ab003ab0d592c693fd7a6a0bd", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/ffd133d7ba86901ab003ab0d592c693fd7a6a0bd", "committedDate": "2020-06-09T10:01:55Z", "message": "Address comments by @trustin\n\n- Merge RetrofitClassAwareMeterIdPrefixFunction into RetrofitMeterIdPrefixFunction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dce2678b64e2b5a088152be7101256058cdaa3b4", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/dce2678b64e2b5a088152be7101256058cdaa3b4", "committedDate": "2020-06-09T10:03:37Z", "message": "Clean up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NzM3MjU1", "url": "https://github.com/line/armeria/pull/2780#pullrequestreview-427737255", "createdAt": "2020-06-10T06:12:16Z", "commit": {"oid": "dce2678b64e2b5a088152be7101256058cdaa3b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjoxMjoxNlrOGhmLAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjoxMjoxNlrOGhmLAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MTYwMA==", "bodyText": "In retrospect, I thought the service tag could replace the route tag. However, a service can be bound to multiple paths. Do I need to revive the route tag?", "url": "https://github.com/line/armeria/pull/2780#discussion_r437881600", "createdAt": "2020-06-10T06:12:16Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/metric/MeterIdPrefixFunction.java", "diffHunk": "@@ -92,24 +92,22 @@ public MeterIdPrefix completeRequestPrefix(MeterRegistry registry, RequestLog lo\n             private void buildTags(ImmutableList.Builder<Tag> tagListBuilder, RequestOnlyLog log) {\n                 final RequestContext ctx = log.context();\n \n-                String methodName = log.name();\n-                if (methodName == null) {\n-                    final RequestHeaders requestHeaders = log.requestHeaders();\n-                    methodName = requestHeaders.method().name();\n-                }\n-\n                 if (ctx instanceof ServiceRequestContext) {\n                     final ServiceRequestContext sCtx = (ServiceRequestContext) ctx;\n                     tagListBuilder.add(Tag.of(Flags.useLegacyMeterNames() ? \"hostnamePattern\"\n                                                                           : \"hostname.pattern\",\n                                               sCtx.config().virtualHost().hostnamePattern()));\n                 }\n \n+                String methodName = log.name();\n+                if (methodName == null) {\n+                    final RequestHeaders requestHeaders = log.requestHeaders();\n+                    methodName = requestHeaders.method().name();\n+                }\n                 tagListBuilder.add(Tag.of(\"method\", methodName));\n-\n-                if (ctx instanceof ServiceRequestContext) {\n-                    final ServiceRequestContext sCtx = (ServiceRequestContext) ctx;\n-                    tagListBuilder.add(Tag.of(\"route\", sCtx.config().route().meterTag()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dce2678b64e2b5a088152be7101256058cdaa3b4"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d22dd7611a39f15e1e8940a8fbef542959ae28c", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/8d22dd7611a39f15e1e8940a8fbef542959ae28c", "committedDate": "2020-06-10T12:45:45Z", "message": "Address comments by @trustin\n\n- Remove RetrofitMeterIdPrefixFunctionBuilder\n- Refine logName in AccessLog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24b4ba795365f97282aef7b8d062ac25f08f89f7", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/24b4ba795365f97282aef7b8d062ac25f08f89f7", "committedDate": "2020-06-12T03:30:06Z", "message": "Clean up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NDY4Nzg3", "url": "https://github.com/line/armeria/pull/2780#pullrequestreview-429468787", "createdAt": "2020-06-12T05:25:09Z", "commit": {"oid": "24b4ba795365f97282aef7b8d062ac25f08f89f7"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNToyNTowOVrOGi3cIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNToyOTo1NFrOGi3g_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIxMzA5MQ==", "bodyText": "Could just append to the previous conditions?\nif (rpcReq != null) {\n    newName = ...\n} else if (ctx instanceof ServiceRequestContext) {\n    newName = ...\n} else {\n    newName = ctx.method().name();\n}", "url": "https://github.com/line/armeria/pull/2780#discussion_r439213091", "createdAt": "2020-06-12T05:25:09Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -918,19 +961,36 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa\n         }\n \n         if (name == null) {\n+            String newServiceName = null;\n             String newName = null;\n-            final RpcRequest rpcReq = ctx.rpcRequest();\n+            RpcRequest rpcReq = ctx.rpcRequest();\n+            if (rpcReq == null && requestContent instanceof RpcRequest) {\n+               rpcReq = (RpcRequest) requestContent;\n+            }\n+\n             if (rpcReq != null) {\n+                newServiceName = rpcReq.serviceType().getName();\n                 newName = rpcReq.method();\n-            } else if (requestContent instanceof RpcRequest) {\n-                newName = ((RpcRequest) requestContent).method();\n+            } else if (ctx instanceof ServiceRequestContext) {\n+                final ServiceConfig config = ((ServiceRequestContext) ctx).config();\n+                newServiceName = config.defaultServiceName();\n+                if (newServiceName == null) {\n+                    newServiceName = config.service().unwrap().getClass().getName();\n+                }\n+                newName = config.defaultLogName();\n             }\n \n-            if (newName == null && ctx instanceof ServiceRequestContext) {\n-                newName = ((ServiceRequestContext) ctx).config().defaultLogName();\n+            if (newName == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24b4ba795365f97282aef7b8d062ac25f08f89f7"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIxNDMzMw==", "bodyText": "Is there any chance that the requestContent is set after endRequest is called?", "url": "https://github.com/line/armeria/pull/2780#discussion_r439214333", "createdAt": "2020-06-12T05:29:54Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -918,19 +961,36 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa\n         }\n \n         if (name == null) {\n+            String newServiceName = null;\n             String newName = null;\n-            final RpcRequest rpcReq = ctx.rpcRequest();\n+            RpcRequest rpcReq = ctx.rpcRequest();\n+            if (rpcReq == null && requestContent instanceof RpcRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24b4ba795365f97282aef7b8d062ac25f08f89f7"}, "originalPosition": 99}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20787a1f3c9df8553ce3b1887b5af7c91bc0ad9d", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/20787a1f3c9df8553ce3b1887b5af7c91bc0ad9d", "committedDate": "2020-06-12T15:23:13Z", "message": "Fix flaky test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/5b8677fe576fcb86cc4967d267b8b32fa922e28b", "committedDate": "2020-06-15T08:30:51Z", "message": "Address comments by @minwoox / Lazily update name if requestContent is deferred"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNDc5MzE3", "url": "https://github.com/line/armeria/pull/2780#pullrequestreview-430479317", "createdAt": "2020-06-15T09:37:48Z", "commit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOTozNzo0OFrOGjqpvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOTozODozMFrOGjqrag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1MjE1Nw==", "bodyText": "Can't we just call setNamesIfAbsent() if name == null?", "url": "https://github.com/line/armeria/pull/2780#discussion_r440052157", "createdAt": "2020-06-15T09:37:48Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -783,13 +826,22 @@ public void requestContent(@Nullable Object requestContent, @Nullable Object raw\n             return;\n         }\n \n+        int requestCompletionFlags = RequestLogProperty.FLAGS_REQUEST_COMPLETE & ~deferredFlags;\n+        if (needToDeferName() && name == null) {\n+            requestCompletionFlags &= ~RequestLogProperty.NAME.flag();\n+        }\n+\n         this.requestContent = requestContent;\n         this.rawRequestContent = rawRequestContent;\n         updateFlags(RequestLogProperty.REQUEST_CONTENT);\n \n         if (requestContent instanceof RpcRequest && ctx.rpcRequest() == null) {\n             ctx.updateRpcRequest((RpcRequest) requestContent);\n         }\n+\n+        if (isAvailable(requestCompletionFlags)) {\n+            setNamesIfAbsent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1MjU4Ng==", "bodyText": "How about checking name == null first because it's cheaper?", "url": "https://github.com/line/armeria/pull/2780#discussion_r440052586", "createdAt": "2020-06-15T09:38:30Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -890,6 +942,10 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa\n         if (requestCause != null) {\n             flags = RequestLogProperty.FLAGS_REQUEST_COMPLETE;\n         } else {\n+            int deferredFlags = this.deferredFlags;\n+            if (needToDeferName() && name == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMzI4MTQ1", "url": "https://github.com/line/armeria/pull/2780#pullrequestreview-431328145", "createdAt": "2020-06-16T09:33:35Z", "commit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTozMzozNVrOGkTQkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo0OTo0MlrOGkT2Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxNzQ1OQ==", "bodyText": "Should we build the full name lazily?", "url": "https://github.com/line/armeria/pull/2780#discussion_r440717459", "createdAt": "2020-06-16T09:33:35Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -685,14 +702,40 @@ public String name() {\n     public void name(String name) {\n         requireNonNull(name, \"name\");\n         checkArgument(!name.isEmpty(), \"name is empty.\");\n+\n+        if (isAvailable(RequestLogProperty.NAME)) {\n+            return;\n+        }\n+\n+        this.name = name;\n+        fullName = name;\n+        updateFlags(RequestLogProperty.NAME);\n+    }\n+\n+    @Override\n+    public void name(String serviceName, String name) {\n+        requireNonNull(serviceName, \"serviceName\");\n+        checkArgument(!serviceName.isEmpty(), \"serviceName is empty.\");\n+        requireNonNull(name, \"name\");\n+        checkArgument(!name.isEmpty(), \"name is empty.\");\n+\n         if (isAvailable(RequestLogProperty.NAME)) {\n             return;\n         }\n \n+        this.serviceName = serviceName;\n         this.name = name;\n+        fullName = serviceName + '/' + name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxOTc3Ng==", "bodyText": ", which is the concatenation of ... and ... using /", "url": "https://github.com/line/armeria/pull/2780#discussion_r440719776", "createdAt": "2020-06-16T09:37:29Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RequestOnlyLog.java", "diffHunk": "@@ -174,13 +174,29 @@ default long requestDurationNanos() {\n      */\n     Scheme scheme();\n \n+    /**\n+     * Returns the human-readable service name of the {@link Request}, such as RPC service name or\n+     * innermost class name of annotated service. This property is often used as a meter tag or distributed\n+     * trace's span name.\n+     */\n+    @Nullable\n+    String serviceName();\n+\n     /**\n      * Returns the human-readable simple name of the {@link Request}, such as RPC method name or annotated\n      * service method name. This property is often used as a meter tag or distributed trace's span name.\n      */\n     @Nullable\n     String name();\n \n+    /**\n+     * Returns the human-readable full name, which is the combination of {@link #serviceName()} and\n+     * {@link #name()} concatenated with {@code '/'}, of the {@link Request}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMDI2NQ==", "bodyText": "How about just unwrapping once, so that the caller has more control?\nCould we describe what will be returned when this is the innermost?", "url": "https://github.com/line/armeria/pull/2780#discussion_r440720265", "createdAt": "2020-06-16T09:38:13Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/util/AbstractUnwrappable.java", "diffHunk": "@@ -47,6 +47,22 @@ protected AbstractUnwrappable(T delegate) {\n         return result != null ? result : delegate.as(type);\n     }\n \n+    /**\n+     * Unwraps this {@link AbstractUnwrappable} recursively and returns the innermost object being\n+     * decorated.\n+     */\n+    public Unwrappable unwrap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMTk4MQ==", "bodyText": "Ditto", "url": "https://github.com/line/armeria/pull/2780#discussion_r440721981", "createdAt": "2020-06-16T09:41:06Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/Service.java", "diffHunk": "@@ -76,6 +76,20 @@ default void serviceAdded(ServiceConfig cfg) throws Exception {}\n         return Unwrappable.super.as(type);\n     }\n \n+    /**\n+     * Unwraps this {@link Service} recursively and returns the innermost object being\n+     * decorated. For example:\n+     * <pre>{@code\n+     * HttpService service1 = new MyService();\n+     * HttpService service2 = service1.decorate(LoggingService.newDecorator())\n+     *                                .decorate(AuthService.newDecorator());\n+     * assert service2.unwrap() == service1;\n+     * }</pre>\n+     */\n+    default Service<? extends Request, ? extends Response> unwrap() {\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNDAxOA==", "bodyText": "Question: Should we mention that some service types such as annotated services and RPC services will set the serviceName/name property automatically even if a user doesn't set them?", "url": "https://github.com/line/armeria/pull/2780#discussion_r440724018", "createdAt": "2020-06-16T09:44:31Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServiceConfig.java", "diffHunk": "@@ -145,9 +150,20 @@ public HttpService service() {\n         return service;\n     }\n \n+    /**\n+     * Returns the default value of the {@link RequestLog#serviceName()} property which is used when\n+     * no service name was set via {@link RequestLogBuilder#name(String, String)}.\n+     * If {@code null}, the path pattern of the {@link #route()} will be used instead.\n+     */\n+    @Nullable\n+    public String defaultServiceName() {\n+        return defaultServiceName;\n+    }\n+\n     /**\n      * Returns the default value of the {@link RequestLog#name()} property which is used when no name was set\n-     * via {@link RequestLogBuilder#name(String)}. If {@code null}, HTTP method name will be used instead.\n+     * via {@link RequestLogBuilder#name(String, String)}. If {@code null}, HTTP method name will be used\n+     * instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNTUxOA==", "bodyText": "Should we also add req.serviceName?", "url": "https://github.com/line/armeria/pull/2780#discussion_r440725518", "createdAt": "2020-06-16T09:47:03Z", "author": {"login": "trustin"}, "path": "logback/src/test/java/com/linecorp/armeria/common/logback/RequestContextExportingAppenderTest.java", "diffHunk": "@@ -291,6 +291,7 @@ void testServiceContextWithMinimalLogs() throws Exception {\n                            .containsEntry(\"client.ip\", \"9.10.11.12\")\n                            .containsEntry(\"req.direction\", \"INBOUND\")\n                            .containsEntry(\"req.authority\", \"server.com:8080\")\n+                           .containsEntry(\"req.name\", \"GET\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNzA2Ng==", "bodyText": "So, we're not using a simple name, right?", "url": "https://github.com/line/armeria/pull/2780#discussion_r440727066", "createdAt": "2020-06-16T09:49:42Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -917,24 +973,53 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa\n             }\n         }\n \n+        if (!needToDeferName()) {\n+            setNamesIfAbsent();\n+        }\n+        this.requestEndTimeNanos = requestEndTimeNanos;\n+        this.requestCause = requestCause;\n+        updateFlags(flags);\n+    }\n+\n+    private void setNamesIfAbsent() {\n         if (name == null) {\n+            String newServiceName = null;\n             String newName = null;\n-            final RpcRequest rpcReq = ctx.rpcRequest();\n+            RpcRequest rpcReq = ctx.rpcRequest();\n+            if (rpcReq == null && requestContent instanceof RpcRequest) {\n+                rpcReq = (RpcRequest) requestContent;\n+            }\n+\n             if (rpcReq != null) {\n+                newServiceName = rpcReq.serviceType().getName();\n                 newName = rpcReq.method();\n-            } else if (requestContent instanceof RpcRequest) {\n-                newName = ((RpcRequest) requestContent).method();\n+            } else if (ctx instanceof ServiceRequestContext) {\n+                final ServiceConfig config = ((ServiceRequestContext) ctx).config();\n+                newServiceName = config.defaultServiceName();\n+                if (newServiceName == null) {\n+                    newServiceName = config.service().unwrap().getClass().getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8677fe576fcb86cc4967d267b8b32fa922e28b"}, "originalPosition": 156}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdb5d45b1182051e83146cfe427279fee5c5dfbd", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/bdb5d45b1182051e83146cfe427279fee5c5dfbd", "committedDate": "2020-06-17T05:12:34Z", "message": "Address comments @trustin, @minwoox / Add unwrap() to Unwrappable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9375e28ff7b67272434088ce93e5c88b14e2267f", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/9375e28ff7b67272434088ce93e5c88b14e2267f", "committedDate": "2020-06-17T05:44:49Z", "message": "Add 'req.serviceName'"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMDk3MDE0", "url": "https://github.com/line/armeria/pull/2780#pullrequestreview-432097014", "createdAt": "2020-06-17T06:35:34Z", "commit": {"oid": "9375e28ff7b67272434088ce93e5c88b14e2267f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fca062194ac03af6c152cbbe85e2928b56d0717", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/6fca062194ac03af6c152cbbe85e2928b56d0717", "committedDate": "2020-06-17T07:20:05Z", "message": "Update documentation and Fix broken test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55fa074b918fb986dd05bb2a0d129b44b48e7ea9", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/55fa074b918fb986dd05bb2a0d129b44b48e7ea9", "committedDate": "2020-06-17T07:34:24Z", "message": "Fix Javdoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4a2bc8608b1e360c2192446c9fc2cb0feb0a2ff", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/a4a2bc8608b1e360c2192446c9fc2cb0feb0a2ff", "committedDate": "2020-06-17T07:49:58Z", "message": "Clean up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMjAwMTE5", "url": "https://github.com/line/armeria/pull/2780#pullrequestreview-432200119", "createdAt": "2020-06-17T09:00:38Z", "commit": {"oid": "a4a2bc8608b1e360c2192446c9fc2cb0feb0a2ff"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMjUyMTM3", "url": "https://github.com/line/armeria/pull/2780#pullrequestreview-432252137", "createdAt": "2020-06-17T10:06:12Z", "commit": {"oid": "a4a2bc8608b1e360c2192446c9fc2cb0feb0a2ff"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDowNjoxMlrOGk--vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDoxMzowM1rOGk_OCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQzMzc5MQ==", "bodyText": "nit: service name?", "url": "https://github.com/line/armeria/pull/2780#discussion_r441433791", "createdAt": "2020-06-17T10:06:12Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/BuiltInProperty.java", "diffHunk": "@@ -167,10 +168,28 @@\n      */\n     REQ_METHOD(\"req.method\", log -> log.context().method().name()),\n     /**\n-     * {@code \"req.name\"} - the human-readable name of the request, such as RPC method name or annotated\n-     * service method name. This property is often used as a meter tag or distributed trace's span name.\n+     * {@code \"req.name\"} - the human-readable name of the request, such as:\n+     * <ul>\n+     *   <li>gRPC - A capitalized method name defined in {@code io.grpc.MethodDescriptor}\n+     *       (e.g, {@code GetItems})</li>\n+     *   <li>Thrift and annotated service - a method name (e.g, {@code getItems})</li>\n+     *   <li>{@link HttpService} - an HTTP method name</li>\n+     * </ul>\n+     * This property is often used as a meter tag or distributed trace's span name.\n      */\n     REQ_NAME(\"req.name\", log -> log.isAvailable(RequestLogProperty.NAME) ? log.name() : null),\n+    /**\n+     * {@code \"req.serviceName\"} - the human-readable name of the request, such as:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a2bc8608b1e360c2192446c9fc2cb0feb0a2ff"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQzNzcwNw==", "bodyText": "revert?", "url": "https://github.com/line/armeria/pull/2780#discussion_r441437707", "createdAt": "2020-06-17T10:13:03Z", "author": {"login": "minwoox"}, "path": "retrofit2/src/test/java/com/linecorp/armeria/client/retrofit2/RetrofitMeterIdPrefixFunctionTest.java", "diffHunk": "@@ -1,7 +1,7 @@\n /*\n  * Copyright 2019 LINE Corporation\n  *\n- * LINE Corporation licenses this file to you under the Apache License,\n+ * LINE Corporation licenses this file to you under the Apache License)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a2bc8608b1e360c2192446c9fc2cb0feb0a2ff"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3982e443cfae513c26caffb2393c27cbc5a0674", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/e3982e443cfae513c26caffb2393c27cbc5a0674", "committedDate": "2020-06-17T15:34:49Z", "message": "Clean up Javadoc and remove dead code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a034160ef26e2c0693b6d29108fd4c51aeee0ee4", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/a034160ef26e2c0693b6d29108fd4c51aeee0ee4", "committedDate": "2020-06-17T15:44:08Z", "message": "Clean Javadoc 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ca6c8137f23d0dea7c43ebed23db5984efff272", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/9ca6c8137f23d0dea7c43ebed23db5984efff272", "committedDate": "2020-06-18T06:06:33Z", "message": "Merge branch 'master' into service-name"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 183, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}