{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MzY0NTM2", "number": 2375, "title": "Remove onEnter() and onExit() from RequestContext", "bodyText": "Motivation:\nI think onEnter has two drawbacks:\n\nonEnter can't be invoked when the context is first pushed into the thread-local\n\nA user attaches the hook to the context which is already pushed.\n\n\nMost of the users do not know when onEnter is called. They just guessed. These are a few examples that I've recently heard and seen:\n\nA user tried to handle RequestTimeout using isTimedOut and onExit().\n\nI guided him to use setRequestTimeoutHandler\n\n\nA user puts a heavy initialization logic in onEnter and clearing logic in onExit\n\nHe could initialize once and clear it using RequestLogAvailability.COMPLETE\n\n\nA user tried to send a different HttpStatus than 200 in the Thrift service.\n\nWhat????\n\n\n\n\n\nThese APIs can give another option to users when they want to do something with a RequestContext. But most of the time, it's just confusing and no obsolete.\nI think we can do what we want to do without onEnter and onExit. Therefore, I hope to get rid of onEnter and onExit.\nAlso, after we support looking up attributes from the root, we don't need onChild anymore.\nModification:\n\nRemove those APIs\n\nResults:\n\n(Breaking)\n\nRequestContext.onEnter() is gone.\nRequestContext.onExit() is gone.\nRequestContext.onChild() is gone.\n\n\n(Deprecated)\n\nUse RequestContext.push() instead of RequestContext.push(runCallbacks) because you cannot attach callbacks to a RequestContext.", "createdAt": "2020-01-06T02:17:13Z", "url": "https://github.com/line/armeria/pull/2375", "merged": true, "mergeCommit": {"oid": "c8ada44b98598d0dc793e679097ecf9cfb829ffa"}, "closed": true, "closedAt": "2020-01-14T03:14:08Z", "author": {"login": "minwoox"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4ncRcAH2gAyMzU5MzY0NTM2OjhlMzIwMDJkOWY5OWMyODE5MTU5YWUxODg4NWJiZjZiNjJlNDg2ZWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb6IKA_gFqTM0MjI3MDY0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8e32002d9f99c2819159ae18885bbf6b62e486ea", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/8e32002d9f99c2819159ae18885bbf6b62e486ea", "committedDate": "2020-01-09T10:31:52Z", "message": "Remove onEnter() and onExit() from RequestContext\nMotivation:\nI think `onEnter` has two drawback:\n- `onEnter` can't be invoked when the context is first pushed into the thread-local\n  - A user attaches the hook to the context which is already pushed.\n- Most of the users do not know when `onEnter` is called. They just guessed. These are few examples that I've recently heard and seen:\n  - A user tried to handle `RequestTimeout` using `isTimedOut` and `onExit()`.\n    - I guided him to use `setRequestTimeoutHandler`\n  - A user puts a heavy initialization logic in `onEnter` and clearing logic in `onExit`\n    - He could itinitialze once and clear it using `RequestLogAvailability.COMPLET`\n  - A user tried to send an diffrent `HttpStatus` than `200` in the Thrift service.\n    - What????\n\nThese APIs can give another option to users when they want to do something with a `RequestContext`. But most of the time, it's just confusing and no obsolete.\nI think we can do what we want to do without `onEnter` and `onExit`. Therefore, I hope to get rid of `onEnter` and `onExit`."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/edde229b70c17028232811f96aaefc226ebc3cb1", "committedDate": "2020-01-10T07:56:27Z", "message": "Upadate"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dcaea14d67b1b85cbe53832667efb3e6e5efb961", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/dcaea14d67b1b85cbe53832667efb3e6e5efb961", "committedDate": "2020-01-06T02:15:04Z", "message": "Remove onEnter() and onExit() from RequestContext\nMotivation:\nI think `onEnter` has two drawback:\n- `onEnter` can't be invoked when the context is first pushed into the thread-local\n  - A user attaches the hook to the context which is already pushed.\n- Most of the users do not know when `onEnter` is called. They just guessed. These are few examples that I've recently heard and seen:\n  - A user tried to handle `RequestTimeout` using `isTimedOut` and `onExit()`.\n    - I guided him to use `setRequestTimeoutHandler`\n  - A user puts a heavy initialization logic in `onEnter` and clearing logic in `onExit`\n    - He could itinitialze once and clear it using `RequestLogAvailability.COMPLET`\n  - A user tried to send an diffrent `HttpStatus` than `200` in the Thrift service.\n    - What????\n\nThese APIs can give another option to users when they want to do something with a `RequestContext`. But most of the time, it's just confusing and no obsolete.\nI think we can do what we want to do without `onEnter` and `onExit`. Therefore, I hope to get rid of `onEnter` and `onExit`."}, "afterCommit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/edde229b70c17028232811f96aaefc226ebc3cb1", "committedDate": "2020-01-10T07:56:27Z", "message": "Upadate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMDAyNTI3", "url": "https://github.com/line/armeria/pull/2375#pullrequestreview-341002527", "createdAt": "2020-01-10T08:05:15Z", "commit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwODowNToxNVrOFcMn2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwODowNToxNVrOFcMn2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTExMTI1OQ==", "bodyText": "It's kinna difficult for me to show a proper example for this right now. Do you have any example recommended?\nOr can we remove this method as well? \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2375#discussion_r365111259", "createdAt": "2020-01-10T08:05:15Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java", "diffHunk": "@@ -242,8 +235,7 @@ default SafeCloseable push(boolean runCallbacks) {\n      * <pre>{@code\n      * ctx.onChild((curCtx, newCtx) -> {\n      *     assert ctx == curCtx && curCtx != newCtx;\n-     *     // Add a callback to the child context.\n-     *     newCtx.onExit(() -> { ... });\n+     *     ...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMTM5MDE2", "url": "https://github.com/line/armeria/pull/2375#pullrequestreview-341139016", "createdAt": "2020-01-10T12:43:52Z", "commit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMjo0Mzo1MlrOFcTEsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMjo1MToxNVrOFcTOIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIxNjk0NQ==", "bodyText": "If you're still struggling to", "url": "https://github.com/line/armeria/pull/2375#discussion_r365216945", "createdAt": "2020-01-10T12:43:52Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "diffHunk": "@@ -596,60 +588,61 @@ default Logger makeContextAware(Logger logger) {\n     }\n \n     /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * Do not use this method. The callback is never invoked.\n      *\n-     * @param callback a {@link Consumer} whose argument is this context\n-     */\n-    void onEnter(Consumer<? super RequestContext> callback);\n-\n-    /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * <p>This method has a limitation which is that the callback cannot be called when this\n+     * {@link RequestContext} is pushed first. So we decided to remove this method and provide\n+     * better API after 1.0. If you are using this, please find another way to achieve the same behavior.\n+     * Most of the cases, you might be able to just use {@link RequestLogListener}.\n+     * Also, you might follow this approach which is using your own thread-local.\n+     * https://github.com/SourceForgery/tachikoma/pull/191\n+     * If you're still struggle to replace this method, please come to our slack workspace and let us know.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIxNzEyMQ==", "bodyText": "How about just throwing UnsupportedOperationException with some message instead of adding a parameter?", "url": "https://github.com/line/armeria/pull/2375#discussion_r365217121", "createdAt": "2020-01-10T12:44:24Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "diffHunk": "@@ -596,60 +588,61 @@ default Logger makeContextAware(Logger logger) {\n     }\n \n     /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * Do not use this method. The callback is never invoked.\n      *\n-     * @param callback a {@link Consumer} whose argument is this context\n-     */\n-    void onEnter(Consumer<? super RequestContext> callback);\n-\n-    /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * <p>This method has a limitation which is that the callback cannot be called when this\n+     * {@link RequestContext} is pushed first. So we decided to remove this method and provide\n+     * better API after 1.0. If you are using this, please find another way to achieve the same behavior.\n+     * Most of the cases, you might be able to just use {@link RequestLogListener}.\n+     * Also, you might follow this approach which is using your own thread-local.\n+     * https://github.com/SourceForgery/tachikoma/pull/191\n+     * If you're still struggle to replace this method, please come to our slack workspace and let us know.\n+     * We might be a help to you.\n+     *\n+     * <p>Please check out https://github.com/line/armeria/pull/2375\n      *\n-     * @deprecated Use {@link #onEnter(Consumer)} instead.\n+     * @deprecated Do not use this method.\n      */\n     @Deprecated\n-    default void onEnter(Runnable callback) {\n-        onEnter(ctx -> callback.run());\n+    default void onEnter(Consumer<? super RequestContext> callback, String doNotUseThisMethod) {\n+        /* no-op */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIxOTM2MQ==", "bodyText": "I'm not sure if we can remove this method or not. It seems like it's not used anywhere in our code, though. Slightly in favor of removal.", "url": "https://github.com/line/armeria/pull/2375#discussion_r365219361", "createdAt": "2020-01-10T12:51:15Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java", "diffHunk": "@@ -242,8 +235,7 @@ default SafeCloseable push(boolean runCallbacks) {\n      * <pre>{@code\n      * ctx.onChild((curCtx, newCtx) -> {\n      *     assert ctx == curCtx && curCtx != newCtx;\n-     *     // Add a callback to the child context.\n-     *     newCtx.onExit(() -> { ... });\n+     *     ...", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTExMTI1OQ=="}, "originalCommit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNjI5ODQ4", "url": "https://github.com/line/armeria/pull/2375#pullrequestreview-341629848", "createdAt": "2020-01-13T03:37:33Z", "commit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwMzozNzozM1rOFcs3KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwMzo1MDoyNVrOFcs8Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzOTQ2NQ==", "bodyText": "UnsupportedOperationException is a good choice.\nOr how about making breaking changes in this case by removing these methods?\nBecause 1) I guess @minwoox added String doNotUseThisMethod for making breaking changes on purpose to produce compile errors and 2) Users can easily detect that it does not work anymore.", "url": "https://github.com/line/armeria/pull/2375#discussion_r365639465", "createdAt": "2020-01-13T03:37:33Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "diffHunk": "@@ -596,60 +588,61 @@ default Logger makeContextAware(Logger logger) {\n     }\n \n     /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * Do not use this method. The callback is never invoked.\n      *\n-     * @param callback a {@link Consumer} whose argument is this context\n-     */\n-    void onEnter(Consumer<? super RequestContext> callback);\n-\n-    /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * <p>This method has a limitation which is that the callback cannot be called when this\n+     * {@link RequestContext} is pushed first. So we decided to remove this method and provide\n+     * better API after 1.0. If you are using this, please find another way to achieve the same behavior.\n+     * Most of the cases, you might be able to just use {@link RequestLogListener}.\n+     * Also, you might follow this approach which is using your own thread-local.\n+     * https://github.com/SourceForgery/tachikoma/pull/191\n+     * If you're still struggle to replace this method, please come to our slack workspace and let us know.\n+     * We might be a help to you.\n+     *\n+     * <p>Please check out https://github.com/line/armeria/pull/2375\n      *\n-     * @deprecated Use {@link #onEnter(Consumer)} instead.\n+     * @deprecated Do not use this method.\n      */\n     @Deprecated\n-    default void onEnter(Runnable callback) {\n-        onEnter(ctx -> callback.run());\n+    default void onEnter(Consumer<? super RequestContext> callback, String doNotUseThisMethod) {\n+        /* no-op */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIxNzEyMQ=="}, "originalCommit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0MDcyMw==", "bodyText": "Remove this condition? if {@code runCallbacks} is {@code true}", "url": "https://github.com/line/armeria/pull/2375#discussion_r365640723", "createdAt": "2020-01-13T03:50:25Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java", "diffHunk": "@@ -37,54 +37,20 @@ public static SafeCloseable noopSafeCloseable() {\n         return noopSafeCloseable;\n     }\n \n-    /**\n-     * Runs callbacks if {@code runCallbacks} is {@code true} and returns the {@link SafeCloseable}\n-     * which will remove the current {@link RequestContext} in the thread-local when\n-     * {@link SafeCloseable#close()} is invoked.\n-     */\n-    public static SafeCloseable pushWithoutRootCtx(RequestContext currentCtx, boolean runCallbacks) {\n-        requireNonNull(currentCtx, \"currentCtx\");\n-        if (runCallbacks) {\n-            currentCtx.invokeOnEnterCallbacks();\n-            return () -> {\n-                currentCtx.invokeOnExitCallbacks();\n-                RequestContextThreadLocal.remove();\n-            };\n-        } else {\n-            return RequestContextThreadLocal::remove;\n-        }\n-    }\n-\n-    /**\n-     * Runs callbacks if {@code runCallbacks} is {@code true} and returns the {@link SafeCloseable}\n-     * which will set the root in the thread-local when {@link SafeCloseable#close()} is invoked.\n-     */\n-    public static SafeCloseable pushWithRootCtx(ClientRequestContext currentCtx, ServiceRequestContext root,\n-                                                boolean runCallbacks) {\n-        return pushWithRootAndOldCtx(currentCtx, root, root, runCallbacks);\n-    }\n-\n     /**\n      * Runs callbacks in {@code currentCtx} and {@code root} if {@code runCallbacks} is {@code true} and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNjQwOTkw", "url": "https://github.com/line/armeria/pull/2375#pullrequestreview-341640990", "createdAt": "2020-01-13T05:08:59Z", "commit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwNTowOTowMFrOFctbhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwNToxMjoxOFrOFctc_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0ODc3NQ==", "bodyText": "I guess it's opposite, uses RequestContext instead of own thread-local.\nMaybe looking at the PR is too confusing to make it worth linking to.", "url": "https://github.com/line/armeria/pull/2375#discussion_r365648775", "createdAt": "2020-01-13T05:09:00Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "diffHunk": "@@ -596,60 +588,61 @@ default Logger makeContextAware(Logger logger) {\n     }\n \n     /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * Do not use this method. The callback is never invoked.\n      *\n-     * @param callback a {@link Consumer} whose argument is this context\n-     */\n-    void onEnter(Consumer<? super RequestContext> callback);\n-\n-    /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * <p>This method has a limitation which is that the callback cannot be called when this\n+     * {@link RequestContext} is pushed first. So we decided to remove this method and provide\n+     * better API after 1.0. If you are using this, please find another way to achieve the same behavior.\n+     * Most of the cases, you might be able to just use {@link RequestLogListener}.\n+     * Also, you might follow this approach which is using your own thread-local.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0ODgyNA==", "bodyText": "We'll help you", "url": "https://github.com/line/armeria/pull/2375#discussion_r365648824", "createdAt": "2020-01-13T05:09:30Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "diffHunk": "@@ -596,60 +588,61 @@ default Logger makeContextAware(Logger logger) {\n     }\n \n     /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * Do not use this method. The callback is never invoked.\n      *\n-     * @param callback a {@link Consumer} whose argument is this context\n-     */\n-    void onEnter(Consumer<? super RequestContext> callback);\n-\n-    /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * <p>This method has a limitation which is that the callback cannot be called when this\n+     * {@link RequestContext} is pushed first. So we decided to remove this method and provide\n+     * better API after 1.0. If you are using this, please find another way to achieve the same behavior.\n+     * Most of the cases, you might be able to just use {@link RequestLogListener}.\n+     * Also, you might follow this approach which is using your own thread-local.\n+     * https://github.com/SourceForgery/tachikoma/pull/191\n+     * If you're still struggle to replace this method, please come to our slack workspace and let us know.\n+     * We might be a help to you.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0ODk4Mg==", "bodyText": "I agree that if making a behavior breaking change anyways it's better to just remove the API. We want to deprecate only where users will be able to continue to use their unmodified code.", "url": "https://github.com/line/armeria/pull/2375#discussion_r365648982", "createdAt": "2020-01-13T05:10:49Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "diffHunk": "@@ -596,60 +588,61 @@ default Logger makeContextAware(Logger logger) {\n     }\n \n     /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * Do not use this method. The callback is never invoked.\n      *\n-     * @param callback a {@link Consumer} whose argument is this context\n-     */\n-    void onEnter(Consumer<? super RequestContext> callback);\n-\n-    /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * <p>This method has a limitation which is that the callback cannot be called when this\n+     * {@link RequestContext} is pushed first. So we decided to remove this method and provide\n+     * better API after 1.0. If you are using this, please find another way to achieve the same behavior.\n+     * Most of the cases, you might be able to just use {@link RequestLogListener}.\n+     * Also, you might follow this approach which is using your own thread-local.\n+     * https://github.com/SourceForgery/tachikoma/pull/191\n+     * If you're still struggle to replace this method, please come to our slack workspace and let us know.\n+     * We might be a help to you.\n+     *\n+     * <p>Please check out https://github.com/line/armeria/pull/2375\n      *\n-     * @deprecated Use {@link #onEnter(Consumer)} instead.\n+     * @deprecated Do not use this method.\n      */\n     @Deprecated\n-    default void onEnter(Runnable callback) {\n-        onEnter(ctx -> callback.run());\n+    default void onEnter(Consumer<? super RequestContext> callback, String doNotUseThisMethod) {\n+        /* no-op */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIxNzEyMQ=="}, "originalCommit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0OTE0OA==", "bodyText": "We used it before adding attr lookup from root context only for copying attributes. I can't think of a good use case not better using the root lookup so in favor of removing", "url": "https://github.com/line/armeria/pull/2375#discussion_r365649148", "createdAt": "2020-01-13T05:12:18Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java", "diffHunk": "@@ -242,8 +235,7 @@ default SafeCloseable push(boolean runCallbacks) {\n      * <pre>{@code\n      * ctx.onChild((curCtx, newCtx) -> {\n      *     assert ctx == curCtx && curCtx != newCtx;\n-     *     // Add a callback to the child context.\n-     *     newCtx.onExit(() -> { ... });\n+     *     ...", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTExMTI1OQ=="}, "originalCommit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eb1a6908eb6fed84b2ce87ee63139647c1aa075", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/7eb1a6908eb6fed84b2ce87ee63139647c1aa075", "committedDate": "2020-01-14T01:39:10Z", "message": "Remove onEnter, onExit and onChild"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMjUxNzY3", "url": "https://github.com/line/armeria/pull/2375#pullrequestreview-342251767", "createdAt": "2020-01-14T01:55:28Z", "commit": {"oid": "7eb1a6908eb6fed84b2ce87ee63139647c1aa075"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMjcwNjQx", "url": "https://github.com/line/armeria/pull/2375#pullrequestreview-342270641", "createdAt": "2020-01-14T03:12:43Z", "commit": {"oid": "7eb1a6908eb6fed84b2ce87ee63139647c1aa075"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 819, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}