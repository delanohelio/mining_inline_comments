{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMjA1MjAw", "number": 2965, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjozNzowOFrOEU0pGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNTozNDo1NVrOEVrH3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjY5NDY3OnYy", "diffSide": "RIGHT", "path": "spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ReactiveWebServerLoadBalancerInteropTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjozNzowOFrOG7O9Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjozNzowOFrOG7O9Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2NDIwNw==", "bodyText": "I wanted to assert that HttpWebHandlerAdapter#handleUnresolvedError is never invoked due to CancelledSubscriptionException,\nbut couldn't find an appropriate way to test it...\n(I looked for a way to test logEvent of HttpWebHandlerAdapter's log, but failed to do that)\nIt would be very helpful if I can get some advices here", "url": "https://github.com/line/armeria/pull/2965#discussion_r464764207", "createdAt": "2020-08-04T02:37:08Z", "author": {"login": "eunchan-kim"}, "path": "spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ReactiveWebServerLoadBalancerInteropTest.java", "diffHunk": "@@ -46,46 +54,91 @@\n     static class TestConfiguration {\n         @RestController\n         static class TestController {\n-            @GetMapping(\"/api/ping\")\n+            @GetMapping(\"/controller/api/ping\")\n             Mono<String> ping() {\n                 return Mono.just(\"PONG\");\n             }\n         }\n+\n+        @Bean\n+        RouterFunction<ServerResponse> routerFunction() {\n+            return route(GET(\"/router/api/poke\"), request -> ok().build())\n+                    .and(route(HEAD(\"/router/api/poke\"), request -> ok().build()))\n+                    .and(route(HEAD(\"/router/api/ping\"), request -> ok().body(fromValue(\"PONG\"))));\n+        }\n     }\n \n     @LocalServerPort\n     int port;\n \n     @Test\n-    void get() throws Exception {\n-        try (Socket s = new Socket(NetUtil.LOCALHOST4, port)) {\n-            s.setSoTimeout(10000);\n-            final InputStream in = s.getInputStream();\n-            final OutputStream out = s.getOutputStream();\n-            out.write(\"GET /api/ping HTTP/1.0\\r\\n\\r\\n\".getBytes(StandardCharsets.US_ASCII));\n-\n-            // Should not be chunked.\n-            assertThat(new String(ByteStreams.toByteArray(in))).isEqualTo(\n-                    \"HTTP/1.1 200 OK\\r\\n\" +\n-                    \"content-type: text/plain;charset=UTF-8\\r\\n\" +\n-                    \"content-length: 4\\r\\n\\r\\n\" +\n-                    \"PONG\");\n-        }\n+    void getToController() throws Exception {\n+        // TODO: Need to assert that CancelledSubscriptionException is not propagated to HttpWebHandlerAdapter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b7f3cb48a0194ffa870531b1454a087e02d037"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjgyMTcyOnYy", "diffSide": "LEFT", "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzo1Mzo1MFrOG7QH9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzo0ODozNVrOG7VETg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4MzM1MQ==", "bodyText": "GET and HEAD request can have a body, although it's not used often, so this fix is not correct. We should perhaps touch the WebFlux side.", "url": "https://github.com/line/armeria/pull/2965#discussion_r464783351", "createdAt": "2020-08-04T03:53:50Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -155,9 +155,7 @@ public void onNext(HttpObject o) {\n                     }\n                     merged = headers;\n                 } else {\n-                    if (req.method() == HttpMethod.HEAD) {\n-                        endOfStream = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b7f3cb48a0194ffa870531b1454a087e02d037"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4NDM0NQ==", "bodyText": "Ah, never mind.", "url": "https://github.com/line/armeria/pull/2965#discussion_r464784345", "createdAt": "2020-08-04T03:57:49Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -155,9 +155,7 @@ public void onNext(HttpObject o) {\n                     }\n                     merged = headers;\n                 } else {\n-                    if (req.method() == HttpMethod.HEAD) {\n-                        endOfStream = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4MzM1MQ=="}, "originalCommit": {"oid": "a2b7f3cb48a0194ffa870531b1454a087e02d037"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgwNzA1NA==", "bodyText": "Oh I couldn't get the relation between\n\nGET and HEAD request can have a body\n\nand this fix...\nCould you explain about this a little bit more?\nI thought whether a HEAD request has a body or not does not matter\nbecause it's about handling response for HEAD - cancel subscription for response when response publishes body.\nOh I missed your new comment \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2965#discussion_r464807054", "createdAt": "2020-08-04T05:25:30Z", "author": {"login": "eunchan-kim"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -155,9 +155,7 @@ public void onNext(HttpObject o) {\n                     }\n                     merged = headers;\n                 } else {\n-                    if (req.method() == HttpMethod.HEAD) {\n-                        endOfStream = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4MzM1MQ=="}, "originalCommit": {"oid": "a2b7f3cb48a0194ffa870531b1454a087e02d037"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2NDMzNA==", "bodyText": "No worries. My bad \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2965#discussion_r464864334", "createdAt": "2020-08-04T07:48:35Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -155,9 +155,7 @@ public void onNext(HttpObject o) {\n                     }\n                     merged = headers;\n                 } else {\n-                    if (req.method() == HttpMethod.HEAD) {\n-                        endOfStream = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4MzM1MQ=="}, "originalCommit": {"oid": "a2b7f3cb48a0194ffa870531b1454a087e02d037"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODMxMzYwOnYy", "diffSide": "RIGHT", "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponse.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDo0MzoyNFrOG8EJVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMjo0MjoyNVrOG8hPhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNTY2OA==", "bodyText": "Don't we need to check ctx.request().method() == HttpMethod.HEAD?", "url": "https://github.com/line/armeria/pull/2965#discussion_r465635668", "createdAt": "2020-08-05T10:43:24Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponse.java", "diffHunk": "@@ -287,7 +287,18 @@ public HttpHeaders getHeaders() {\n         final HttpResponse response = HttpResponse.of(buildResponseHeaders());\n         future.complete(response);\n         logger.debug(\"{} Response future has been completed with an HttpResponse\", ctx);\n-        return Mono.fromFuture(response.whenComplete());\n+\n+        final CompletableFuture<Void> monoFuture = new CompletableFuture<>();\n+        response.whenComplete().handle((unused, cause1) -> {\n+            if (cause1 != null && !(cause1 instanceof CancelledSubscriptionException)) {\n+                monoFuture.completeExceptionally(cause1);\n+            } else {\n+                // ignore CancelledSubscriptionException created when handling HTTP HEAD request", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cfdf9ce11972a763669357d8ed96d4ea4ed9711"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY0MDU3NA==", "bodyText": "I will check HEAD too!", "url": "https://github.com/line/armeria/pull/2965#discussion_r465640574", "createdAt": "2020-08-05T10:53:38Z", "author": {"login": "eunchan-kim"}, "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponse.java", "diffHunk": "@@ -287,7 +287,18 @@ public HttpHeaders getHeaders() {\n         final HttpResponse response = HttpResponse.of(buildResponseHeaders());\n         future.complete(response);\n         logger.debug(\"{} Response future has been completed with an HttpResponse\", ctx);\n-        return Mono.fromFuture(response.whenComplete());\n+\n+        final CompletableFuture<Void> monoFuture = new CompletableFuture<>();\n+        response.whenComplete().handle((unused, cause1) -> {\n+            if (cause1 != null && !(cause1 instanceof CancelledSubscriptionException)) {\n+                monoFuture.completeExceptionally(cause1);\n+            } else {\n+                // ignore CancelledSubscriptionException created when handling HTTP HEAD request", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNTY2OA=="}, "originalCommit": {"oid": "6cfdf9ce11972a763669357d8ed96d4ea4ed9711"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA5NzAzNw==", "bodyText": "Had chat with @minwoox and I realized that HEAD is not to be checked here.\n@eunchan-kim Sorry for the wrong direction. Could you remove ctx.request().method() == HttpMethod.HEAD condition. \ud83d\ude47\u200d\u2642\ufe0f", "url": "https://github.com/line/armeria/pull/2965#discussion_r466097037", "createdAt": "2020-08-06T01:44:39Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponse.java", "diffHunk": "@@ -287,7 +287,18 @@ public HttpHeaders getHeaders() {\n         final HttpResponse response = HttpResponse.of(buildResponseHeaders());\n         future.complete(response);\n         logger.debug(\"{} Response future has been completed with an HttpResponse\", ctx);\n-        return Mono.fromFuture(response.whenComplete());\n+\n+        final CompletableFuture<Void> monoFuture = new CompletableFuture<>();\n+        response.whenComplete().handle((unused, cause1) -> {\n+            if (cause1 != null && !(cause1 instanceof CancelledSubscriptionException)) {\n+                monoFuture.completeExceptionally(cause1);\n+            } else {\n+                // ignore CancelledSubscriptionException created when handling HTTP HEAD request", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNTY2OA=="}, "originalCommit": {"oid": "6cfdf9ce11972a763669357d8ed96d4ea4ed9711"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA5OTMxOQ==", "bodyText": "No problem.\nBTW, could you share the backgrounds of this?\n\nI realized that HEAD is not to be checked here.\n\n(I think it would be same reason with that of not checking HEAD at write method...)", "url": "https://github.com/line/armeria/pull/2965#discussion_r466099319", "createdAt": "2020-08-06T01:53:40Z", "author": {"login": "eunchan-kim"}, "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponse.java", "diffHunk": "@@ -287,7 +287,18 @@ public HttpHeaders getHeaders() {\n         final HttpResponse response = HttpResponse.of(buildResponseHeaders());\n         future.complete(response);\n         logger.debug(\"{} Response future has been completed with an HttpResponse\", ctx);\n-        return Mono.fromFuture(response.whenComplete());\n+\n+        final CompletableFuture<Void> monoFuture = new CompletableFuture<>();\n+        response.whenComplete().handle((unused, cause1) -> {\n+            if (cause1 != null && !(cause1 instanceof CancelledSubscriptionException)) {\n+                monoFuture.completeExceptionally(cause1);\n+            } else {\n+                // ignore CancelledSubscriptionException created when handling HTTP HEAD request", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNTY2OA=="}, "originalCommit": {"oid": "6cfdf9ce11972a763669357d8ed96d4ea4ed9711"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjExMDQ1NA==", "bodyText": "The cancel signal is used when a Subscriber wants to clean up resources and it does not need data anymore. The publisher doesn't propagate a CancelledSubscriptionException to Subscribe.onError(Throwable). CancelledSubscriptionException is used internally to indicate that a stream has been cancelled via whenComplete().\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessage.java\n    \n    \n        Lines 279 to 282\n      in\n      0bb591d\n    \n    \n    \n    \n\n        \n          \n           if (subscription.notifyCancellation || !(cause instanceof CancelledSubscriptionException)) { \n        \n\n        \n          \n               subscriber.onError(cause); \n        \n\n        \n          \n           } \n        \n\n        \n          \n           completionFuture.completeExceptionally(cause); \n        \n    \n  \n\n\nSo the CancelledSubscriptionException from the whenComplete() could be ignored.", "url": "https://github.com/line/armeria/pull/2965#discussion_r466110454", "createdAt": "2020-08-06T02:35:16Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponse.java", "diffHunk": "@@ -287,7 +287,18 @@ public HttpHeaders getHeaders() {\n         final HttpResponse response = HttpResponse.of(buildResponseHeaders());\n         future.complete(response);\n         logger.debug(\"{} Response future has been completed with an HttpResponse\", ctx);\n-        return Mono.fromFuture(response.whenComplete());\n+\n+        final CompletableFuture<Void> monoFuture = new CompletableFuture<>();\n+        response.whenComplete().handle((unused, cause1) -> {\n+            if (cause1 != null && !(cause1 instanceof CancelledSubscriptionException)) {\n+                monoFuture.completeExceptionally(cause1);\n+            } else {\n+                // ignore CancelledSubscriptionException created when handling HTTP HEAD request", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNTY2OA=="}, "originalCommit": {"oid": "6cfdf9ce11972a763669357d8ed96d4ea4ed9711"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjExMjM4OA==", "bodyText": "thanks for explanation! \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/2965#discussion_r466112388", "createdAt": "2020-08-06T02:42:25Z", "author": {"login": "eunchan-kim"}, "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponse.java", "diffHunk": "@@ -287,7 +287,18 @@ public HttpHeaders getHeaders() {\n         final HttpResponse response = HttpResponse.of(buildResponseHeaders());\n         future.complete(response);\n         logger.debug(\"{} Response future has been completed with an HttpResponse\", ctx);\n-        return Mono.fromFuture(response.whenComplete());\n+\n+        final CompletableFuture<Void> monoFuture = new CompletableFuture<>();\n+        response.whenComplete().handle((unused, cause1) -> {\n+            if (cause1 != null && !(cause1 instanceof CancelledSubscriptionException)) {\n+                monoFuture.completeExceptionally(cause1);\n+            } else {\n+                // ignore CancelledSubscriptionException created when handling HTTP HEAD request", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNTY2OA=="}, "originalCommit": {"oid": "6cfdf9ce11972a763669357d8ed96d4ea4ed9711"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTM3NTkzOnYy", "diffSide": "RIGHT", "path": "spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponseTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzoxMjoyMlrOG8hsIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzoyOTowOFrOG8h8iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjExOTcxNQ==", "bodyText": "nit: extra space in { }.", "url": "https://github.com/line/armeria/pull/2965#discussion_r466119715", "createdAt": "2020-08-06T03:12:22Z", "author": {"login": "minwoox"}, "path": "spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponseTest.java", "diffHunk": "@@ -171,6 +172,30 @@ void returnHeadersAndBody() throws Exception {\n         await().until(() -> httpResponse.whenComplete().isDone());\n     }\n \n+    @Test\n+    void ignoreCancelledSubscriptionException() throws Exception {\n+        final ServiceRequestContext ctx = ServiceRequestContext.of(HttpRequest.of(HttpMethod.HEAD, \"/\"));\n+\n+        final CompletableFuture<HttpResponse> future = new CompletableFuture<>();\n+        final ArmeriaServerHttpResponse response = response(ctx, future);\n+\n+        response.setStatusCode(HttpStatus.OK);\n+        response.getHeaders().add(\"Armeria\", \"awesome\");\n+        assertThat(future.isDone()).isFalse();\n+\n+        StepVerifier.create(Mono.defer(response::setComplete))\n+                    .then(() -> {\n+                        try {\n+                            // throw CancelledSubscriptionException as HttpResponseSubscriber\n+                            // cancels subscription for HTTP HEAD\n+                            final HttpResponse httpResponse = future.get();\n+                            httpResponse.whenComplete()\n+                                        .completeExceptionally(CancelledSubscriptionException.get());\n+                        } catch (Throwable ignored) { }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e028eee0def72a380bac1ce16f27d4d2138bb6fc"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyMzY1Nw==", "bodyText": "when I make it as {} Checkstype fails with\n WhitespaceAround: '{' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3) [WhitespaceAround]\n\nlet me just make it as\n} catch (Throwable ignored) {\n}\n\n(or current way is fine?)", "url": "https://github.com/line/armeria/pull/2965#discussion_r466123657", "createdAt": "2020-08-06T03:28:09Z", "author": {"login": "eunchan-kim"}, "path": "spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponseTest.java", "diffHunk": "@@ -171,6 +172,30 @@ void returnHeadersAndBody() throws Exception {\n         await().until(() -> httpResponse.whenComplete().isDone());\n     }\n \n+    @Test\n+    void ignoreCancelledSubscriptionException() throws Exception {\n+        final ServiceRequestContext ctx = ServiceRequestContext.of(HttpRequest.of(HttpMethod.HEAD, \"/\"));\n+\n+        final CompletableFuture<HttpResponse> future = new CompletableFuture<>();\n+        final ArmeriaServerHttpResponse response = response(ctx, future);\n+\n+        response.setStatusCode(HttpStatus.OK);\n+        response.getHeaders().add(\"Armeria\", \"awesome\");\n+        assertThat(future.isDone()).isFalse();\n+\n+        StepVerifier.create(Mono.defer(response::setComplete))\n+                    .then(() -> {\n+                        try {\n+                            // throw CancelledSubscriptionException as HttpResponseSubscriber\n+                            // cancels subscription for HTTP HEAD\n+                            final HttpResponse httpResponse = future.get();\n+                            httpResponse.whenComplete()\n+                                        .completeExceptionally(CancelledSubscriptionException.get());\n+                        } catch (Throwable ignored) { }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjExOTcxNQ=="}, "originalCommit": {"oid": "e028eee0def72a380bac1ce16f27d4d2138bb6fc"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyMzkxMg==", "bodyText": "Oops, didn't know about it. \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2965#discussion_r466123912", "createdAt": "2020-08-06T03:29:08Z", "author": {"login": "minwoox"}, "path": "spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponseTest.java", "diffHunk": "@@ -171,6 +172,30 @@ void returnHeadersAndBody() throws Exception {\n         await().until(() -> httpResponse.whenComplete().isDone());\n     }\n \n+    @Test\n+    void ignoreCancelledSubscriptionException() throws Exception {\n+        final ServiceRequestContext ctx = ServiceRequestContext.of(HttpRequest.of(HttpMethod.HEAD, \"/\"));\n+\n+        final CompletableFuture<HttpResponse> future = new CompletableFuture<>();\n+        final ArmeriaServerHttpResponse response = response(ctx, future);\n+\n+        response.setStatusCode(HttpStatus.OK);\n+        response.getHeaders().add(\"Armeria\", \"awesome\");\n+        assertThat(future.isDone()).isFalse();\n+\n+        StepVerifier.create(Mono.defer(response::setComplete))\n+                    .then(() -> {\n+                        try {\n+                            // throw CancelledSubscriptionException as HttpResponseSubscriber\n+                            // cancels subscription for HTTP HEAD\n+                            final HttpResponse httpResponse = future.get();\n+                            httpResponse.whenComplete()\n+                                        .completeExceptionally(CancelledSubscriptionException.get());\n+                        } catch (Throwable ignored) { }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjExOTcxNQ=="}, "originalCommit": {"oid": "e028eee0def72a380bac1ce16f27d4d2138bb6fc"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTYwMjYxOnYy", "diffSide": "RIGHT", "path": "spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ReactiveWebServerLoadBalancerInteropTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNToyNTo1MVrOG8jxLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNToyNTo1MVrOG8jxLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1Mzc3Mg==", "bodyText": "nit: Could use HttpHeaderNames.CONTENT_LENGTH", "url": "https://github.com/line/armeria/pull/2965#discussion_r466153772", "createdAt": "2020-08-06T05:25:51Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ReactiveWebServerLoadBalancerInteropTest.java", "diffHunk": "@@ -46,46 +62,91 @@\n     static class TestConfiguration {\n         @RestController\n         static class TestController {\n-            @GetMapping(\"/api/ping\")\n+            @GetMapping(\"/controller/api/ping\")\n             Mono<String> ping() {\n                 return Mono.just(\"PONG\");\n             }\n         }\n+\n+        @Bean\n+        RouterFunction<ServerResponse> routerFunction() {\n+            return route(GET(\"/router/api/ping\"), request -> ok().body(fromValue(\"PONG\")))\n+                    .and(route(HEAD(\"/router/api/ping\"), request -> ok().body(fromValue(\"PONG\")))\n+                    .and(route(HEAD(\"/router/api/poke\"), request -> ok().build())));\n+        }\n     }\n \n     @LocalServerPort\n     int port;\n \n-    @Test\n-    void get() throws Exception {\n-        try (Socket s = new Socket(NetUtil.LOCALHOST4, port)) {\n-            s.setSoTimeout(10000);\n-            final InputStream in = s.getInputStream();\n-            final OutputStream out = s.getOutputStream();\n-            out.write(\"GET /api/ping HTTP/1.0\\r\\n\\r\\n\".getBytes(StandardCharsets.US_ASCII));\n-\n-            // Should not be chunked.\n-            assertThat(new String(ByteStreams.toByteArray(in))).isEqualTo(\n-                    \"HTTP/1.1 200 OK\\r\\n\" +\n-                    \"content-type: text/plain;charset=UTF-8\\r\\n\" +\n-                    \"content-length: 4\\r\\n\\r\\n\" +\n-                    \"PONG\");\n-        }\n+    Logger httpWebHandlerAdapterLogger;\n+    final ListAppender<ILoggingEvent> logAppender = new ListAppender<>();\n+\n+    @BeforeEach\n+    public void attachAppender() {\n+        httpWebHandlerAdapterLogger = (Logger) LoggerFactory.getLogger(HttpWebHandlerAdapter.class);\n+        logAppender.start();\n+        httpWebHandlerAdapterLogger.addAppender(logAppender);\n     }\n \n-    @Test\n-    void head() throws Exception {\n-        try (Socket s = new Socket(NetUtil.LOCALHOST4, port)) {\n-            s.setSoTimeout(10000);\n-            final InputStream in = s.getInputStream();\n-            final OutputStream out = s.getOutputStream();\n-            out.write(\"HEAD /api/ping HTTP/1.0\\r\\n\\r\\n\".getBytes(StandardCharsets.US_ASCII));\n-\n-            // Should neither be chunked nor have content.\n-            assertThat(new String(ByteStreams.toByteArray(in))).isEqualTo(\n-                    \"HTTP/1.1 200 OK\\r\\n\" +\n-                    \"content-type: text/plain;charset=UTF-8\\r\\n\" +\n-                    \"content-length: 4\\r\\n\\r\\n\");\n+    @AfterEach\n+    public void detachAppender() {\n+        httpWebHandlerAdapterLogger.detachAppender(logAppender);\n+        logAppender.list.clear();\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource({\n+            \"H1C, /controller/api/ping\",\n+            \"H2C, /router/api/ping\"\n+    })\n+    void testGet(SessionProtocol sessionProtocol, String path) {\n+        final String uri = sessionProtocol.uriText() + \"://127.0.0.1:\" + port;\n+        final WebClient webClient = WebClient.of(uri);\n+        final AggregatedHttpResponse res = webClient.get(path).aggregate().join();\n+\n+        assertThat(res.status()).isSameAs(HttpStatus.OK);\n+        assertThat(res.contentType()).isSameAs(MediaType.PLAIN_TEXT_UTF_8);\n+        assertThat(res.headers().get(\"content-length\")).isEqualTo(\"4\");\n+        assertThat(res.content().toStringUtf8()).isEqualTo(\"PONG\");\n+        assertNoErrorLogByHttpWebHandlerAdapter();\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource({\n+            \"H1C, /controller/api/ping, 4\",\n+            \"H2C, /controller/api/ping, 4\",\n+            \"H1C, /router/api/ping, 4\",\n+            \"H2C, /router/api/ping, 4\",\n+            \"H2C, /router/api/poke, 0\",\n+            \"H1C, /router/api/poke, 0\"\n+    })\n+    void testHead(SessionProtocol sessionProtocol, String path, int contentLength) {\n+        final String uri = sessionProtocol.uriText() + \"://127.0.0.1:\" + port;\n+        final WebClient webClient = WebClient.of(uri);\n+        final AggregatedHttpResponse res = webClient.head(path).aggregate().join();\n+\n+        assertThat(res.status()).isSameAs(HttpStatus.OK);\n+        assertThat(res.content().isEmpty()).isTrue();\n+\n+        if (contentLength > 0) {\n+            assertThat(res.contentType()).isSameAs(MediaType.PLAIN_TEXT_UTF_8);\n+            assertThat(res.headers().get(\"content-length\")).isEqualTo(String.valueOf(contentLength));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b65b3c956fdf34c7c6a5fa4a2cd5466b3d3bab81"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTYwNTcwOnYy", "diffSide": "RIGHT", "path": "spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ReactiveWebServerLoadBalancerInteropTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNToyNzozMlrOG8jy9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNToyNzozMlrOG8jy9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NDIzMQ==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .hasSize(0);\n          \n          \n            \n                            .isEmpty();", "url": "https://github.com/line/armeria/pull/2965#discussion_r466154231", "createdAt": "2020-08-06T05:27:32Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ReactiveWebServerLoadBalancerInteropTest.java", "diffHunk": "@@ -46,46 +62,91 @@\n     static class TestConfiguration {\n         @RestController\n         static class TestController {\n-            @GetMapping(\"/api/ping\")\n+            @GetMapping(\"/controller/api/ping\")\n             Mono<String> ping() {\n                 return Mono.just(\"PONG\");\n             }\n         }\n+\n+        @Bean\n+        RouterFunction<ServerResponse> routerFunction() {\n+            return route(GET(\"/router/api/ping\"), request -> ok().body(fromValue(\"PONG\")))\n+                    .and(route(HEAD(\"/router/api/ping\"), request -> ok().body(fromValue(\"PONG\")))\n+                    .and(route(HEAD(\"/router/api/poke\"), request -> ok().build())));\n+        }\n     }\n \n     @LocalServerPort\n     int port;\n \n-    @Test\n-    void get() throws Exception {\n-        try (Socket s = new Socket(NetUtil.LOCALHOST4, port)) {\n-            s.setSoTimeout(10000);\n-            final InputStream in = s.getInputStream();\n-            final OutputStream out = s.getOutputStream();\n-            out.write(\"GET /api/ping HTTP/1.0\\r\\n\\r\\n\".getBytes(StandardCharsets.US_ASCII));\n-\n-            // Should not be chunked.\n-            assertThat(new String(ByteStreams.toByteArray(in))).isEqualTo(\n-                    \"HTTP/1.1 200 OK\\r\\n\" +\n-                    \"content-type: text/plain;charset=UTF-8\\r\\n\" +\n-                    \"content-length: 4\\r\\n\\r\\n\" +\n-                    \"PONG\");\n-        }\n+    Logger httpWebHandlerAdapterLogger;\n+    final ListAppender<ILoggingEvent> logAppender = new ListAppender<>();\n+\n+    @BeforeEach\n+    public void attachAppender() {\n+        httpWebHandlerAdapterLogger = (Logger) LoggerFactory.getLogger(HttpWebHandlerAdapter.class);\n+        logAppender.start();\n+        httpWebHandlerAdapterLogger.addAppender(logAppender);\n     }\n \n-    @Test\n-    void head() throws Exception {\n-        try (Socket s = new Socket(NetUtil.LOCALHOST4, port)) {\n-            s.setSoTimeout(10000);\n-            final InputStream in = s.getInputStream();\n-            final OutputStream out = s.getOutputStream();\n-            out.write(\"HEAD /api/ping HTTP/1.0\\r\\n\\r\\n\".getBytes(StandardCharsets.US_ASCII));\n-\n-            // Should neither be chunked nor have content.\n-            assertThat(new String(ByteStreams.toByteArray(in))).isEqualTo(\n-                    \"HTTP/1.1 200 OK\\r\\n\" +\n-                    \"content-type: text/plain;charset=UTF-8\\r\\n\" +\n-                    \"content-length: 4\\r\\n\\r\\n\");\n+    @AfterEach\n+    public void detachAppender() {\n+        httpWebHandlerAdapterLogger.detachAppender(logAppender);\n+        logAppender.list.clear();\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource({\n+            \"H1C, /controller/api/ping\",\n+            \"H2C, /router/api/ping\"\n+    })\n+    void testGet(SessionProtocol sessionProtocol, String path) {\n+        final String uri = sessionProtocol.uriText() + \"://127.0.0.1:\" + port;\n+        final WebClient webClient = WebClient.of(uri);\n+        final AggregatedHttpResponse res = webClient.get(path).aggregate().join();\n+\n+        assertThat(res.status()).isSameAs(HttpStatus.OK);\n+        assertThat(res.contentType()).isSameAs(MediaType.PLAIN_TEXT_UTF_8);\n+        assertThat(res.headers().get(\"content-length\")).isEqualTo(\"4\");\n+        assertThat(res.content().toStringUtf8()).isEqualTo(\"PONG\");\n+        assertNoErrorLogByHttpWebHandlerAdapter();\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource({\n+            \"H1C, /controller/api/ping, 4\",\n+            \"H2C, /controller/api/ping, 4\",\n+            \"H1C, /router/api/ping, 4\",\n+            \"H2C, /router/api/ping, 4\",\n+            \"H2C, /router/api/poke, 0\",\n+            \"H1C, /router/api/poke, 0\"\n+    })\n+    void testHead(SessionProtocol sessionProtocol, String path, int contentLength) {\n+        final String uri = sessionProtocol.uriText() + \"://127.0.0.1:\" + port;\n+        final WebClient webClient = WebClient.of(uri);\n+        final AggregatedHttpResponse res = webClient.head(path).aggregate().join();\n+\n+        assertThat(res.status()).isSameAs(HttpStatus.OK);\n+        assertThat(res.content().isEmpty()).isTrue();\n+\n+        if (contentLength > 0) {\n+            assertThat(res.contentType()).isSameAs(MediaType.PLAIN_TEXT_UTF_8);\n+            assertThat(res.headers().get(\"content-length\")).isEqualTo(String.valueOf(contentLength));\n         }\n+        assertNoErrorLogByHttpWebHandlerAdapter();\n+    }\n+\n+    private void assertNoErrorLogByHttpWebHandlerAdapter() {\n+        // Example error log for CancelledSubscriptionException by HttpWebHandlerAdapter:\n+        //\n+        // Error [com.linecorp.armeria.common.stream.CancelledSubscriptionException] for\n+        // HTTP HEAD \"/router/api/poke\", but ServerHttpResponse already committed (200 OK)\n+        final String errorLogSubString =\n+                \"Error [com.linecorp.armeria.common.stream.CancelledSubscriptionException] for HTTP HEAD\";\n+        assertThat(logAppender.list\n+                           .stream()\n+                           .filter(event -> event.getFormattedMessage().contains(errorLogSubString))\n+                           .collect(Collectors.toList()))\n+                .hasSize(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77a5352d064068810aa13cc35653d869c0980f9e"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTYwODA3OnYy", "diffSide": "RIGHT", "path": "spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponseTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNToyODo0MFrOG8j0WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNToyODo0MFrOG8j0WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NDU4NA==", "bodyText": "Could simplify with:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(future.isDone()).isFalse();\n          \n          \n            \n                    assertThat(future).isNotDone();", "url": "https://github.com/line/armeria/pull/2965#discussion_r466154584", "createdAt": "2020-08-06T05:28:40Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponseTest.java", "diffHunk": "@@ -171,6 +172,31 @@ void returnHeadersAndBody() throws Exception {\n         await().until(() -> httpResponse.whenComplete().isDone());\n     }\n \n+    @Test\n+    void ignoreCancelledSubscriptionException() throws Exception {\n+        final ServiceRequestContext ctx = ServiceRequestContext.of(HttpRequest.of(HttpMethod.HEAD, \"/\"));\n+\n+        final CompletableFuture<HttpResponse> future = new CompletableFuture<>();\n+        final ArmeriaServerHttpResponse response = response(ctx, future);\n+\n+        response.setStatusCode(HttpStatus.OK);\n+        response.getHeaders().add(\"Armeria\", \"awesome\");\n+        assertThat(future.isDone()).isFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77a5352d064068810aa13cc35653d869c0980f9e"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTYyMDc4OnYy", "diffSide": "RIGHT", "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNTozNDo1NVrOG8j7ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNTozNDo1NVrOG8j7ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NjQ3NA==", "bodyText": "nit: Indent?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Mono.fromFuture(response.whenComplete())\n          \n          \n            \n                            .onErrorResume(CancelledSubscriptionException.class, e -> Mono.empty());\n          \n          \n            \n                    return Mono.fromFuture(response.whenComplete())\n          \n          \n            \n                               .onErrorResume(CancelledSubscriptionException.class, e -> Mono.empty());", "url": "https://github.com/line/armeria/pull/2965#discussion_r466156474", "createdAt": "2020-08-06T05:34:55Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponse.java", "diffHunk": "@@ -287,7 +287,9 @@ public HttpHeaders getHeaders() {\n         final HttpResponse response = HttpResponse.of(buildResponseHeaders());\n         future.complete(response);\n         logger.debug(\"{} Response future has been completed with an HttpResponse\", ctx);\n-        return Mono.fromFuture(response.whenComplete());\n+\n+        return Mono.fromFuture(response.whenComplete())\n+                .onErrorResume(CancelledSubscriptionException.class, e -> Mono.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77a5352d064068810aa13cc35653d869c0980f9e"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2180, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}