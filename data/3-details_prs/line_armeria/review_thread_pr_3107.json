{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNTgyOTUz", "number": 3107, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMjoyNjoyNlrOEs12pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMjoyNjoyNlrOEs12pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDU1MTQxOnYy", "diffSide": "RIGHT", "path": "spring/boot2-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationWithoutMeterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMjoyNjoyNlrOHgTK0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNDowMToxN1rOHgUlWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzMDU0NQ==", "bodyText": "Sometimes, it takes time to collect metrics by Micrometer and expose them.\nHow about using Awaitility?\nawait().untilAsserted(() -> {\n\tfinal AggregatedHttpResponse msg = WebClient.of(newUrl(\"h1c\"))\n    ...\n    assertThat(...)\n});", "url": "https://github.com/line/armeria/pull/3107#discussion_r503630545", "createdAt": "2020-10-13T02:26:26Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationWithoutMeterTest.java", "diffHunk": "@@ -72,16 +68,10 @@ private String newUrl(String scheme) {\n \n     @Test\n     public void test() {\n-        final AggregatedHttpResponse msg = WebClient.of(newUrl(\"h1c\"))\n-                                                    .get(\"/ok\")\n-                                                    .aggregate().join();\n-        assertThat(msg.status()).isEqualTo(HttpStatus.OK);\n-        assertThat(msg.contentUtf8()).isEqualTo(\"ok\");\n-\n         final String metricReport = WebClient.of(newUrl(\"http\"))\n                                              .get(\"/internal/metrics\")\n                                              .aggregate().join()\n                                              .contentUtf8();\n-        assertThat(metricReport).contains(\"# TYPE armeria_server_response_duration_seconds_max gauge\");\n+        assertThat(metricReport).contains(\"# TYPE armeria_server_connections gauge\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6660b0b11bb16a85aed3c7d53b50af5eff07e557"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1MzcyMg==", "bodyText": "Fixed \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3107#discussion_r503653722", "createdAt": "2020-10-13T04:01:17Z", "author": {"login": "heowc"}, "path": "spring/boot2-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationWithoutMeterTest.java", "diffHunk": "@@ -72,16 +68,10 @@ private String newUrl(String scheme) {\n \n     @Test\n     public void test() {\n-        final AggregatedHttpResponse msg = WebClient.of(newUrl(\"h1c\"))\n-                                                    .get(\"/ok\")\n-                                                    .aggregate().join();\n-        assertThat(msg.status()).isEqualTo(HttpStatus.OK);\n-        assertThat(msg.contentUtf8()).isEqualTo(\"ok\");\n-\n         final String metricReport = WebClient.of(newUrl(\"http\"))\n                                              .get(\"/internal/metrics\")\n                                              .aggregate().join()\n                                              .contentUtf8();\n-        assertThat(metricReport).contains(\"# TYPE armeria_server_response_duration_seconds_max gauge\");\n+        assertThat(metricReport).contains(\"# TYPE armeria_server_connections gauge\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzMDU0NQ=="}, "originalCommit": {"oid": "6660b0b11bb16a85aed3c7d53b50af5eff07e557"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1938, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}