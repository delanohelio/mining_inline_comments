{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NTM3MzQz", "number": 3059, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMToyMzoxNVrOEji3Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTo0NDowMVrOEpiOPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzA2Nzc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMToyMzoxNVrOHR9Ejw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMjozOTo0MlrOHR_xOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4ODQzMQ==", "bodyText": "Would recommend either requiring the redirect type or at least making the default temporary. If someone accidentally uses this for permanent redirect without knowing it could create an unrecoverable situation.", "url": "https://github.com/line/armeria/pull/3059#discussion_r488588431", "createdAt": "2020-09-15T11:23:15Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponse.java", "diffHunk": "@@ -390,6 +390,40 @@ static HttpResponse of(Publisher<? extends HttpObject> publisher) {\n         }\n     }\n \n+    /**\n+     * Creates a new HTTP response of the permanent redirect to specific location.\n+     */\n+    static HttpResponse ofRedirect(String location) {\n+        requireNonNull(location, \"location\");\n+        return of(ResponseHeaders.of(RedirectType.PERMANENT.toHttpStatus(), HttpHeaderNames.LOCATION, location));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c920bc8bcdc1934c4819c428f4d90696bdd1a8d"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYzMjYzMg==", "bodyText": "I fixed it to Temporary redirection when not requiring redirection type.\nThank you.", "url": "https://github.com/line/armeria/pull/3059#discussion_r488632632", "createdAt": "2020-09-15T12:39:42Z", "author": {"login": "cnabro"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponse.java", "diffHunk": "@@ -390,6 +390,40 @@ static HttpResponse of(Publisher<? extends HttpObject> publisher) {\n         }\n     }\n \n+    /**\n+     * Creates a new HTTP response of the permanent redirect to specific location.\n+     */\n+    static HttpResponse ofRedirect(String location) {\n+        requireNonNull(location, \"location\");\n+        return of(ResponseHeaders.of(RedirectType.PERMANENT.toHttpStatus(), HttpHeaderNames.LOCATION, location));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4ODQzMQ=="}, "originalCommit": {"oid": "6c920bc8bcdc1934c4819c428f4d90696bdd1a8d"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTU4OTUxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo0MTo1N1rOHbNvmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo0MTo1N1rOHbNvmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5ODc3OQ==", "bodyText": "Could instead forward the call to ofRedirect(RedirectType, ...).", "url": "https://github.com/line/armeria/pull/3059#discussion_r498298779", "createdAt": "2020-10-01T14:41:57Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponse.java", "diffHunk": "@@ -390,6 +390,43 @@ static HttpResponse of(Publisher<? extends HttpObject> publisher) {\n         }\n     }\n \n+    /**\n+     * Creates a new HTTP response of the temporary redirect to specific location.\n+     */\n+    static HttpResponse ofRedirect(String location) {\n+        requireNonNull(location, \"location\");\n+        return of(ResponseHeaders.of(RedirectType.TEMPORARY.toHttpStatus(), HttpHeaderNames.LOCATION,\n+            location));\n+    }\n+\n+    /**\n+     * Creates a new HTTP response of the temporary redirect to specific location using string format.\n+     */\n+    static HttpResponse ofRedirect(String format, Object... args) {\n+        requireNonNull(format, \"format\");\n+        return of(ResponseHeaders.of(RedirectType.TEMPORARY.toHttpStatus(), HttpHeaderNames.LOCATION,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0aac93d55a15e5379422986abbea81a9dfac0f6"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTU4OTk3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo0MjowNFrOHbNv3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo0MjowNFrOHbNv3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5ODg0NA==", "bodyText": "Could instead forward the call to ofRedirect(RedirectType, ...).", "url": "https://github.com/line/armeria/pull/3059#discussion_r498298844", "createdAt": "2020-10-01T14:42:04Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponse.java", "diffHunk": "@@ -390,6 +390,43 @@ static HttpResponse of(Publisher<? extends HttpObject> publisher) {\n         }\n     }\n \n+    /**\n+     * Creates a new HTTP response of the temporary redirect to specific location.\n+     */\n+    static HttpResponse ofRedirect(String location) {\n+        requireNonNull(location, \"location\");\n+        return of(ResponseHeaders.of(RedirectType.TEMPORARY.toHttpStatus(), HttpHeaderNames.LOCATION,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0aac93d55a15e5379422986abbea81a9dfac0f6"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTU5OTQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/RedirectType.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo0NDowOFrOHbN12w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTo0NDo1MlrOHbQlAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMDM3OQ==", "bodyText": "How about removing this and using HttpStatus instead? We could add the same validation we did in: https://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/server/RedirectService.java#L244-L247", "url": "https://github.com/line/armeria/pull/3059#discussion_r498300379", "createdAt": "2020-10-01T14:44:08Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/RedirectType.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+/**\n+ * RedirectType for simply redirection in {@link HttpResponse}.\n+ */\n+public final class RedirectType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0aac93d55a15e5379422986abbea81a9dfac0f6"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM0MTIyMQ==", "bodyText": "OK. I fixed this PR like RedirectService using HttpStatus. And refactored reusing ofRedirect method.", "url": "https://github.com/line/armeria/pull/3059#discussion_r498341221", "createdAt": "2020-10-01T15:39:12Z", "author": {"login": "cnabro"}, "path": "core/src/main/java/com/linecorp/armeria/common/RedirectType.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+/**\n+ * RedirectType for simply redirection in {@link HttpResponse}.\n+ */\n+public final class RedirectType {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMDM3OQ=="}, "originalCommit": {"oid": "f0aac93d55a15e5379422986abbea81a9dfac0f6"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM0NTIxNg==", "bodyText": "That was fast! Thank you, @cnabro \ud83d\ude47", "url": "https://github.com/line/armeria/pull/3059#discussion_r498345216", "createdAt": "2020-10-01T15:44:52Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/RedirectType.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+/**\n+ * RedirectType for simply redirection in {@link HttpResponse}.\n+ */\n+public final class RedirectType {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMDM3OQ=="}, "originalCommit": {"oid": "f0aac93d55a15e5379422986abbea81a9dfac0f6"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTg3MzM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTo0Mjo1N1rOHbQf7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjoxNTo0NFrOHbRyww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM0MzkxNw==", "bodyText": "Could also add requireNonNull for args", "url": "https://github.com/line/armeria/pull/3059#discussion_r498343917", "createdAt": "2020-10-01T15:42:57Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponse.java", "diffHunk": "@@ -390,6 +390,45 @@ static HttpResponse of(Publisher<? extends HttpObject> publisher) {\n         }\n     }\n \n+    /**\n+     * Creates a new HTTP response of the redirect to specific location.\n+     */\n+    static HttpResponse ofRedirect(HttpStatus redirectStatus, String location) {\n+        requireNonNull(redirectStatus, \"redirectStatus\");\n+        requireNonNull(location, \"location\");\n+        if (redirectStatus.compareTo(HttpStatus.MULTIPLE_CHOICES) < 0 ||\n+            redirectStatus.compareTo(HttpStatus.TEMPORARY_REDIRECT) > 0) {\n+            throw new IllegalArgumentException(\"redirectStatus: \" + redirectStatus + \" (expected: 300 .. 307)\");\n+        }\n+\n+        return of(ResponseHeaders.of(redirectStatus, HttpHeaderNames.LOCATION, location));\n+    }\n+\n+    /**\n+     * Creates a new HTTP response of the redirect to specific location using string format.\n+     */\n+    static HttpResponse ofRedirect(HttpStatus redirectStatus, String format, Object... args) {\n+        requireNonNull(format, \"format\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c03e7797d5583a88c80b96f82412e8a8caa1ac1"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2NTEyMw==", "bodyText": "Added args check and test cases more.", "url": "https://github.com/line/armeria/pull/3059#discussion_r498365123", "createdAt": "2020-10-01T16:15:44Z", "author": {"login": "cnabro"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponse.java", "diffHunk": "@@ -390,6 +390,45 @@ static HttpResponse of(Publisher<? extends HttpObject> publisher) {\n         }\n     }\n \n+    /**\n+     * Creates a new HTTP response of the redirect to specific location.\n+     */\n+    static HttpResponse ofRedirect(HttpStatus redirectStatus, String location) {\n+        requireNonNull(redirectStatus, \"redirectStatus\");\n+        requireNonNull(location, \"location\");\n+        if (redirectStatus.compareTo(HttpStatus.MULTIPLE_CHOICES) < 0 ||\n+            redirectStatus.compareTo(HttpStatus.TEMPORARY_REDIRECT) > 0) {\n+            throw new IllegalArgumentException(\"redirectStatus: \" + redirectStatus + \" (expected: 300 .. 307)\");\n+        }\n+\n+        return of(ResponseHeaders.of(redirectStatus, HttpHeaderNames.LOCATION, location));\n+    }\n+\n+    /**\n+     * Creates a new HTTP response of the redirect to specific location using string format.\n+     */\n+    static HttpResponse ofRedirect(HttpStatus redirectStatus, String format, Object... args) {\n+        requireNonNull(format, \"format\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM0MzkxNw=="}, "originalCommit": {"oid": "6c03e7797d5583a88c80b96f82412e8a8caa1ac1"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTg3NzcyOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/common/HttpResponseTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTo0NDowMVrOHbQiwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjoxNjo1MlrOHbR1ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM0NDY0Mg==", "bodyText": "Could add an assertion for headers as well", "url": "https://github.com/line/armeria/pull/3059#discussion_r498344642", "createdAt": "2020-10-01T15:44:01Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/HttpResponseTest.java", "diffHunk": "@@ -90,4 +90,17 @@ void statusOfResponseHeadersShouldNotBeInformational() {\n                                                  HttpData.ofUtf8(\"bob\")))\n                 .isInstanceOf(IllegalArgumentException.class).hasMessageContaining(\"non-1xx\");\n     }\n+\n+    @Test\n+    void ofRedirect() {\n+        final HttpResponse res = HttpResponse.ofRedirect(\"locationFor\");\n+        final AggregatedHttpResponse aggregatedRes = res.aggregate().join();\n+        assertThat(aggregatedRes.status()).isEqualTo(HttpStatus.TEMPORARY_REDIRECT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c03e7797d5583a88c80b96f82412e8a8caa1ac1"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2NTg1NA==", "bodyText": "Did you mean check location header?\nI added this like below.\nassertThat(aggregatedRes.headers().get(HttpHeaderNames.LOCATION)).isEqualTo(\"locationFor\");", "url": "https://github.com/line/armeria/pull/3059#discussion_r498365854", "createdAt": "2020-10-01T16:16:52Z", "author": {"login": "cnabro"}, "path": "core/src/test/java/com/linecorp/armeria/common/HttpResponseTest.java", "diffHunk": "@@ -90,4 +90,17 @@ void statusOfResponseHeadersShouldNotBeInformational() {\n                                                  HttpData.ofUtf8(\"bob\")))\n                 .isInstanceOf(IllegalArgumentException.class).hasMessageContaining(\"non-1xx\");\n     }\n+\n+    @Test\n+    void ofRedirect() {\n+        final HttpResponse res = HttpResponse.ofRedirect(\"locationFor\");\n+        final AggregatedHttpResponse aggregatedRes = res.aggregate().join();\n+        assertThat(aggregatedRes.status()).isEqualTo(HttpStatus.TEMPORARY_REDIRECT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM0NDY0Mg=="}, "originalCommit": {"oid": "6c03e7797d5583a88c80b96f82412e8a8caa1ac1"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1873, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}