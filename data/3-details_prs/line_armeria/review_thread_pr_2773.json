{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NjcwNzcw", "number": 2773, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODozMDowNlrOECdYQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODo1MDo1MFrOECd11w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDEzOTU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODozMDowNlrOGe7Unw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODo1NjozM1rOGe8SlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4MjM5OQ==", "bodyText": "\ud83d\ude06", "url": "https://github.com/line/armeria/pull/2773#discussion_r435082399", "createdAt": "2020-06-04T08:30:06Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "diffHunk": "@@ -1045,14 +1045,30 @@ private AnnotatedValueResolver build() {\n                     defaultValue = null;\n                 }\n             } else {\n-                shouldExist = !shouldWrapValueAsOptional;\n                 // Set the default value to null if it was not specified.\n                 defaultValue = null;\n+\n+                if (shouldWrapValueAsOptional) {\n+                    shouldExist = false;\n+                } else {\n+                    // Allow `null` if annotated with `@Nullable`.\n+                    boolean isNonNull = true;\n+                    for (Annotation a : annotatedElement.getAnnotations()) {\n+                        final String annotationTypeName = a.annotationType().getName();\n+                        System.err.println(annotationTypeName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5ODI2MQ==", "bodyText": "Oops!", "url": "https://github.com/line/armeria/pull/2773#discussion_r435098261", "createdAt": "2020-06-04T08:56:33Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "diffHunk": "@@ -1045,14 +1045,30 @@ private AnnotatedValueResolver build() {\n                     defaultValue = null;\n                 }\n             } else {\n-                shouldExist = !shouldWrapValueAsOptional;\n                 // Set the default value to null if it was not specified.\n                 defaultValue = null;\n+\n+                if (shouldWrapValueAsOptional) {\n+                    shouldExist = false;\n+                } else {\n+                    // Allow `null` if annotated with `@Nullable`.\n+                    boolean isNonNull = true;\n+                    for (Annotation a : annotatedElement.getAnnotations()) {\n+                        final String annotationTypeName = a.annotationType().getName();\n+                        System.err.println(annotationTypeName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4MjM5OQ=="}, "originalCommit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDE1NDk0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODozNDoxNFrOGe7eTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODozNDoxNFrOGe7eTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4NDg3Ng==", "bodyText": "\ud83d\ude05", "url": "https://github.com/line/armeria/pull/2773#discussion_r435084876", "createdAt": "2020-06-04T08:34:14Z", "author": {"login": "KarboniteKream"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "diffHunk": "@@ -1045,14 +1045,30 @@ private AnnotatedValueResolver build() {\n                     defaultValue = null;\n                 }\n             } else {\n-                shouldExist = !shouldWrapValueAsOptional;\n                 // Set the default value to null if it was not specified.\n                 defaultValue = null;\n+\n+                if (shouldWrapValueAsOptional) {\n+                    shouldExist = false;\n+                } else {\n+                    // Allow `null` if annotated with `@Nullable`.\n+                    boolean isNonNull = true;\n+                    for (Annotation a : annotatedElement.getAnnotations()) {\n+                        final String annotationTypeName = a.annotationType().getName();\n+                        System.err.println(annotationTypeName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDE1NTkwOnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODozNDoyOVrOGe7e5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODo1Njo0NFrOGe8S_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4NTAzMA==", "bodyText": "Grammar: packages -> package?", "url": "https://github.com/line/armeria/pull/2773#discussion_r435085030", "createdAt": "2020-06-04T08:34:29Z", "author": {"login": "KarboniteKream"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -259,6 +269,14 @@ public class MyAnnotatedService {\n }\n ```\n \n+<Tip>\n+\n+`@Nullable` annotation can be from *any* packages as long as its simple name is `Nullable`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5ODM2Ng==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2773#discussion_r435098366", "createdAt": "2020-06-04T08:56:44Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -259,6 +269,14 @@ public class MyAnnotatedService {\n }\n ```\n \n+<Tip>\n+\n+`@Nullable` annotation can be from *any* packages as long as its simple name is `Nullable`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4NTAzMA=="}, "originalCommit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDE2Mzg3OnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODozNjo0MFrOGe7j8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjoxNDowNVrOGfC4wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4NjMyMw==", "bodyText": "<type://@Default>, @Nullable annotation or Optional<?> class?", "url": "https://github.com/line/armeria/pull/2773#discussion_r435086323", "createdAt": "2020-06-04T08:36:40Z", "author": {"login": "minwoox"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -238,19 +238,29 @@ public class MyAnnotatedService {\n When the value of <type://@Param> annotation is not shown in the path pattern, it will be handled as a\n parameter name of the query string of the request. If you have a service class like the example below and\n a user sends an HTTP `GET` request with URI of `/hello1?name=armeria`, the service method will get `armeria`\n-as the value of parameter `name`. If there is no parameter named `name` in the query string, the parameter\n-`name` of the method would be `null`. If you want to avoid `null` in this case, you can use\n-<type://@Default> annotation or `Optional<?>` class, e.g. `hello2` and `hello3` methods below, respectively.\n+as the value of parameter `name`.\n+\n+If there is no parameter named `name` in the query string, the service method that requires it will not be\n+invoked, but the client will get a `400 Bad Request` response.  If you want to allow `null` to be injected,\n+you can use <type://@Default> or `@Nullable` annotation or `Optional<?>` class, like `hello2()`, `hello3()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5ODg1MQ==", "bodyText": "I meant (Default or Nullable) annotation or Optional class. What would be better, @KarboniteKream ?", "url": "https://github.com/line/armeria/pull/2773#discussion_r435098851", "createdAt": "2020-06-04T08:57:34Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -238,19 +238,29 @@ public class MyAnnotatedService {\n When the value of <type://@Param> annotation is not shown in the path pattern, it will be handled as a\n parameter name of the query string of the request. If you have a service class like the example below and\n a user sends an HTTP `GET` request with URI of `/hello1?name=armeria`, the service method will get `armeria`\n-as the value of parameter `name`. If there is no parameter named `name` in the query string, the parameter\n-`name` of the method would be `null`. If you want to avoid `null` in this case, you can use\n-<type://@Default> annotation or `Optional<?>` class, e.g. `hello2` and `hello3` methods below, respectively.\n+as the value of parameter `name`.\n+\n+If there is no parameter named `name` in the query string, the service method that requires it will not be\n+invoked, but the client will get a `400 Bad Request` response.  If you want to allow `null` to be injected,\n+you can use <type://@Default> or `@Nullable` annotation or `Optional<?>` class, like `hello2()`, `hello3()`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4NjMyMw=="}, "originalCommit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwMDQwNg==", "bodyText": "Ah, I missed that. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2773#discussion_r435100406", "createdAt": "2020-06-04T09:00:01Z", "author": {"login": "minwoox"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -238,19 +238,29 @@ public class MyAnnotatedService {\n When the value of <type://@Param> annotation is not shown in the path pattern, it will be handled as a\n parameter name of the query string of the request. If you have a service class like the example below and\n a user sends an HTTP `GET` request with URI of `/hello1?name=armeria`, the service method will get `armeria`\n-as the value of parameter `name`. If there is no parameter named `name` in the query string, the parameter\n-`name` of the method would be `null`. If you want to avoid `null` in this case, you can use\n-<type://@Default> annotation or `Optional<?>` class, e.g. `hello2` and `hello3` methods below, respectively.\n+as the value of parameter `name`.\n+\n+If there is no parameter named `name` in the query string, the service method that requires it will not be\n+invoked, but the client will get a `400 Bad Request` response.  If you want to allow `null` to be injected,\n+you can use <type://@Default> or `@Nullable` annotation or `Optional<?>` class, like `hello2()`, `hello3()`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4NjMyMw=="}, "originalCommit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2NjUxMg==", "bodyText": "Maybe something like you can use the @Default or @Nullable annotations or an Optional<?> class. A comma after annotation might also work. The suggestion by @minwoox is also good, I think.", "url": "https://github.com/line/armeria/pull/2773#discussion_r435166512", "createdAt": "2020-06-04T10:55:13Z", "author": {"login": "KarboniteKream"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -238,19 +238,29 @@ public class MyAnnotatedService {\n When the value of <type://@Param> annotation is not shown in the path pattern, it will be handled as a\n parameter name of the query string of the request. If you have a service class like the example below and\n a user sends an HTTP `GET` request with URI of `/hello1?name=armeria`, the service method will get `armeria`\n-as the value of parameter `name`. If there is no parameter named `name` in the query string, the parameter\n-`name` of the method would be `null`. If you want to avoid `null` in this case, you can use\n-<type://@Default> annotation or `Optional<?>` class, e.g. `hello2` and `hello3` methods below, respectively.\n+as the value of parameter `name`.\n+\n+If there is no parameter named `name` in the query string, the service method that requires it will not be\n+invoked, but the client will get a `400 Bad Request` response.  If you want to allow `null` to be injected,\n+you can use <type://@Default> or `@Nullable` annotation or `Optional<?>` class, like `hello2()`, `hello3()`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4NjMyMw=="}, "originalCommit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIwNjMzNw==", "bodyText": "Changed to:\nyou can use <type://@Default> annotation, `@Nullable` annotation\nor `Optional<?>` class, like demonstrated below in `hello2()`,\n`hello3()` and `hello4()` methods:", "url": "https://github.com/line/armeria/pull/2773#discussion_r435206337", "createdAt": "2020-06-04T12:14:05Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -238,19 +238,29 @@ public class MyAnnotatedService {\n When the value of <type://@Param> annotation is not shown in the path pattern, it will be handled as a\n parameter name of the query string of the request. If you have a service class like the example below and\n a user sends an HTTP `GET` request with URI of `/hello1?name=armeria`, the service method will get `armeria`\n-as the value of parameter `name`. If there is no parameter named `name` in the query string, the parameter\n-`name` of the method would be `null`. If you want to avoid `null` in this case, you can use\n-<type://@Default> annotation or `Optional<?>` class, e.g. `hello2` and `hello3` methods below, respectively.\n+as the value of parameter `name`.\n+\n+If there is no parameter named `name` in the query string, the service method that requires it will not be\n+invoked, but the client will get a `400 Bad Request` response.  If you want to allow `null` to be injected,\n+you can use <type://@Default> or `@Nullable` annotation or `Optional<?>` class, like `hello2()`, `hello3()`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4NjMyMw=="}, "originalCommit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDE2Njg4OnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODozNzoyMFrOGe7l4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODozNzoyMFrOGe7l4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4NjgxNg==", "bodyText": "hello4?", "url": "https://github.com/line/armeria/pull/2773#discussion_r435086816", "createdAt": "2020-06-04T08:37:20Z", "author": {"login": "minwoox"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -238,19 +238,29 @@ public class MyAnnotatedService {\n When the value of <type://@Param> annotation is not shown in the path pattern, it will be handled as a\n parameter name of the query string of the request. If you have a service class like the example below and\n a user sends an HTTP `GET` request with URI of `/hello1?name=armeria`, the service method will get `armeria`\n-as the value of parameter `name`. If there is no parameter named `name` in the query string, the parameter\n-`name` of the method would be `null`. If you want to avoid `null` in this case, you can use\n-<type://@Default> annotation or `Optional<?>` class, e.g. `hello2` and `hello3` methods below, respectively.\n+as the value of parameter `name`.\n+\n+If there is no parameter named `name` in the query string, the service method that requires it will not be\n+invoked, but the client will get a `400 Bad Request` response.  If you want to allow `null` to be injected,\n+you can use <type://@Default> or `@Nullable` annotation or `Optional<?>` class, like `hello2()`, `hello3()`\n+and `hello4()` methods below.\n \n ```java\n public class MyAnnotatedService {\n \n     @Get(\"/hello1\")\n+    // Not invoked when 'name' parameter is missing.\n     public HttpResponse hello1(@Param(\"name\") String name) { ... }\n \n     @Get(\"/hello2\")\n     public HttpResponse hello2(@Param(\"name\") @Default(\"armeria\") String name) { ... }\n \n+    @Get(\"/hello3\")\n+    public HttpResponse hello3(@Param(\"name\") @Nullable String name) {\n+        String clientName = name != null ? name : \"armeria\";\n+        // ...\n+    }\n+\n     @Get(\"/hello3\")\n     public HttpResponse hello3(@Param(\"name\") Optional<String> name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDIxNTI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODo1MDo1MFrOGe8FCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNTozNzoxMVrOGfL9Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5NDc5NQ==", "bodyText": "Could use Class.getSimpleName()?\n\"Nullable\".equals(a.annoatation.getSimpleName())", "url": "https://github.com/line/armeria/pull/2773#discussion_r435094795", "createdAt": "2020-06-04T08:50:50Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "diffHunk": "@@ -1045,14 +1045,30 @@ private AnnotatedValueResolver build() {\n                     defaultValue = null;\n                 }\n             } else {\n-                shouldExist = !shouldWrapValueAsOptional;\n                 // Set the default value to null if it was not specified.\n                 defaultValue = null;\n+\n+                if (shouldWrapValueAsOptional) {\n+                    shouldExist = false;\n+                } else {\n+                    // Allow `null` if annotated with `@Nullable`.\n+                    boolean isNonNull = true;\n+                    for (Annotation a : annotatedElement.getAnnotations()) {\n+                        final String annotationTypeName = a.annotationType().getName();\n+                        System.err.println(annotationTypeName);\n+                        if (annotationTypeName.endsWith(\".Nullable\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5OTM5NA==", "bodyText": "getSimpleName() creates a new string, so I wanted to avoid unnecessary overhead.", "url": "https://github.com/line/armeria/pull/2773#discussion_r435099394", "createdAt": "2020-06-04T08:58:25Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "diffHunk": "@@ -1045,14 +1045,30 @@ private AnnotatedValueResolver build() {\n                     defaultValue = null;\n                 }\n             } else {\n-                shouldExist = !shouldWrapValueAsOptional;\n                 // Set the default value to null if it was not specified.\n                 defaultValue = null;\n+\n+                if (shouldWrapValueAsOptional) {\n+                    shouldExist = false;\n+                } else {\n+                    // Allow `null` if annotated with `@Nullable`.\n+                    boolean isNonNull = true;\n+                    for (Annotation a : annotatedElement.getAnnotations()) {\n+                        final String annotationTypeName = a.annotationType().getName();\n+                        System.err.println(annotationTypeName);\n+                        if (annotationTypeName.endsWith(\".Nullable\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5NDc5NQ=="}, "originalCommit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1NDk2Ng==", "bodyText": "Good to know. \ud83d\ude47\u200d\u2642\ufe0f\nI investigated the related issues. The simpleName is cached since Java 11. But it looks still pretty expensive.\nhttps://stackoverflow.com/a/57630221/1736581\nhttps://bugs.openjdk.java.net/browse/JDK-8187123", "url": "https://github.com/line/armeria/pull/2773#discussion_r435354966", "createdAt": "2020-06-04T15:37:11Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "diffHunk": "@@ -1045,14 +1045,30 @@ private AnnotatedValueResolver build() {\n                     defaultValue = null;\n                 }\n             } else {\n-                shouldExist = !shouldWrapValueAsOptional;\n                 // Set the default value to null if it was not specified.\n                 defaultValue = null;\n+\n+                if (shouldWrapValueAsOptional) {\n+                    shouldExist = false;\n+                } else {\n+                    // Allow `null` if annotated with `@Nullable`.\n+                    boolean isNonNull = true;\n+                    for (Annotation a : annotatedElement.getAnnotations()) {\n+                        final String annotationTypeName = a.annotationType().getName();\n+                        System.err.println(annotationTypeName);\n+                        if (annotationTypeName.endsWith(\".Nullable\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5NDc5NQ=="}, "originalCommit": {"oid": "e1f27aad706ed51f9e7b75f108c1ea159aafd513"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2310, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}