{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MjE3MDYx", "number": 2881, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMTo0MDo1OFrOEMTJIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjo1NTo1MFrOEMT6ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzMyMDAxOnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/advanced-unit-testing.mdx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMTo0MDo1OFrOGuVJZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMzowNDozN1rOGuWcUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzNDE0OQ==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void setUp() {\n          \n          \n            \n                void setUp() {", "url": "https://github.com/line/armeria/pull/2881#discussion_r451234149", "createdAt": "2020-07-08T01:40:58Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/docs/advanced-unit-testing.mdx", "diffHunk": "@@ -9,28 +9,28 @@ A unit test of a client or a service will require you to prepare two objects:\n object easily:\n \n ```java\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpResponse;\n import com.linecorp.armeria.common.AggregatedHttpResponse;\n import com.linecorp.armeria.client.ClientRequestContext;\n import com.linecorp.armeria.server.ServiceRequestContext;\n \n-public class MyJUnit4Test {\n+class MyJUnit5Test {\n \n     private MyClient client;\n     private MyService service;\n \n-    @Before\n+    @BeforeEach\n     public void setUp() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14471543faa122313d9975a359a4a80c6d9caf04"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1NTM3OA==", "bodyText": "Fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2881#discussion_r451255378", "createdAt": "2020-07-08T03:04:37Z", "author": {"login": "minwoox"}, "path": "site/src/pages/docs/advanced-unit-testing.mdx", "diffHunk": "@@ -9,28 +9,28 @@ A unit test of a client or a service will require you to prepare two objects:\n object easily:\n \n ```java\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpResponse;\n import com.linecorp.armeria.common.AggregatedHttpResponse;\n import com.linecorp.armeria.client.ClientRequestContext;\n import com.linecorp.armeria.server.ServiceRequestContext;\n \n-public class MyJUnit4Test {\n+class MyJUnit5Test {\n \n     private MyClient client;\n     private MyService service;\n \n-    @Before\n+    @BeforeEach\n     public void setUp() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzNDE0OQ=="}, "originalCommit": {"oid": "14471543faa122313d9975a359a4a80c6d9caf04"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzMyMzc3OnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/advanced-unit-testing.mdx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMTo0MzoxOFrOGuVLxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMzowNTowNVrOGuWctQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzNDc1OQ==", "bodyText": "Could remove?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void testClient() throws Exception {\n          \n          \n            \n                void testClient() {", "url": "https://github.com/line/armeria/pull/2881#discussion_r451234759", "createdAt": "2020-07-08T01:43:18Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/docs/advanced-unit-testing.mdx", "diffHunk": "@@ -9,28 +9,28 @@ A unit test of a client or a service will require you to prepare two objects:\n object easily:\n \n ```java\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpResponse;\n import com.linecorp.armeria.common.AggregatedHttpResponse;\n import com.linecorp.armeria.client.ClientRequestContext;\n import com.linecorp.armeria.server.ServiceRequestContext;\n \n-public class MyJUnit4Test {\n+class MyJUnit5Test {\n \n     private MyClient client;\n     private MyService service;\n \n-    @Before\n+    @BeforeEach\n     public void setUp() {\n         client = ...;\n         service = ...;\n     }\n \n     @Test\n-    public void testClient() throws Exception {\n+    void testClient() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14471543faa122313d9975a359a4a80c6d9caf04"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1NTQ3Nw==", "bodyText": "Changed .get() to .join() and removed it. Thanks!", "url": "https://github.com/line/armeria/pull/2881#discussion_r451255477", "createdAt": "2020-07-08T03:05:05Z", "author": {"login": "minwoox"}, "path": "site/src/pages/docs/advanced-unit-testing.mdx", "diffHunk": "@@ -9,28 +9,28 @@ A unit test of a client or a service will require you to prepare two objects:\n object easily:\n \n ```java\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpResponse;\n import com.linecorp.armeria.common.AggregatedHttpResponse;\n import com.linecorp.armeria.client.ClientRequestContext;\n import com.linecorp.armeria.server.ServiceRequestContext;\n \n-public class MyJUnit4Test {\n+class MyJUnit5Test {\n \n     private MyClient client;\n     private MyService service;\n \n-    @Before\n+    @BeforeEach\n     public void setUp() {\n         client = ...;\n         service = ...;\n     }\n \n     @Test\n-    public void testClient() throws Exception {\n+    void testClient() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzNDc1OQ=="}, "originalCommit": {"oid": "14471543faa122313d9975a359a4a80c6d9caf04"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzMyNDEwOnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/advanced-unit-testing.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMTo0MzozMlrOGuVL-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMTo0MzozMlrOGuVL-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzNDgxMQ==", "bodyText": "Ditto", "url": "https://github.com/line/armeria/pull/2881#discussion_r451234811", "createdAt": "2020-07-08T01:43:32Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/docs/advanced-unit-testing.mdx", "diffHunk": "@@ -44,7 +44,7 @@ public class MyJUnit4Test {\n     }\n \n     @Test\n-    public void testService() throws Exception {\n+    void testService() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14471543faa122313d9975a359a4a80c6d9caf04"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzQ0NjE4OnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/advanced-dropwizard-integration.mdx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjo1NTo1MFrOGuWT2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMzowNjoxNlrOGuWd3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1MzIwOQ==", "bodyText": "following", "url": "https://github.com/line/armeria/pull/2881#discussion_r451253209", "createdAt": "2020-07-08T02:55:50Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/advanced-dropwizard-integration.mdx", "diffHunk": "@@ -271,7 +271,7 @@ passed to the <type://ArmeriaBundle>.\n ## Server Access Logs\n \n Armeria Server `Access Logging <server-access-log>` is enabled by default when using the Armeria Server.\n-The default <type://AccessLogWriter> is `AccessLogWriter.common()`, but this can be changed via the follow\n+The default <type://AccessLogWriter> is <type://AccessLogWriter#common()>, but this can be changed via the follow", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14471543faa122313d9975a359a4a80c6d9caf04"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1NTc3Mw==", "bodyText": "Fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2881#discussion_r451255773", "createdAt": "2020-07-08T03:06:16Z", "author": {"login": "minwoox"}, "path": "site/src/pages/docs/advanced-dropwizard-integration.mdx", "diffHunk": "@@ -271,7 +271,7 @@ passed to the <type://ArmeriaBundle>.\n ## Server Access Logs\n \n Armeria Server `Access Logging <server-access-log>` is enabled by default when using the Armeria Server.\n-The default <type://AccessLogWriter> is `AccessLogWriter.common()`, but this can be changed via the follow\n+The default <type://AccessLogWriter> is <type://AccessLogWriter#common()>, but this can be changed via the follow", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1MzIwOQ=="}, "originalCommit": {"oid": "14471543faa122313d9975a359a4a80c6d9caf04"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2493, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}