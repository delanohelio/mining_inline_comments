{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyOTU2ODk0", "number": 2623, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjoyMDo0MlrODqxDug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjozNToyNFrODrCu2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTcwNTU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/DnsTimeoutException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjoyMDo0MlrOF6trUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjoyMDo0MlrOF6trUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExMDA5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A {@link TimeoutException} raised when a response has not been received from a server within timeout.\n          \n          \n            \n             * A {@link TimeoutException} raised when a response has not been received from a DNS server within timeout.", "url": "https://github.com/line/armeria/pull/2623#discussion_r397110096", "createdAt": "2020-03-24T12:20:42Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/DnsTimeoutException.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.common.TimeoutException;\n+\n+/**\n+ * A {@link TimeoutException} raised when a response has not been received from a server within timeout.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5260955ca4380143ce38127efb5b9e954bcb5f86"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDQ0NTY4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMTowNzozOVrOF7Itbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMTowNzozOVrOF7Itbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1MzAwNw==", "bodyText": "I realized that the search domain query is not cancellable right now. I will send a PR to Netty to fix this.", "url": "https://github.com/line/armeria/pull/2623#discussion_r397553007", "createdAt": "2020-03-25T01:07:39Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "diffHunk": "@@ -103,10 +118,39 @@ public void operationComplete(Future<List<DnsRecord>> future) throws Exception {\n             }\n         };\n \n-        questions.forEach(q -> delegate.resolveAll(q).addListener(listener));\n+        final Builder<Promise<List<DnsRecord>>> promises =\n+                ImmutableList.builderWithExpectedSize(questions.size());\n+        questions.forEach(q -> {\n+            final Promise<List<DnsRecord>> promise = executor().newPromise();\n+            promises.add(promise);\n+            delegate.resolveAll(q, EMPTY_ADDITIONALS, promise);\n+            promise.addListener(listener);\n+        });\n+        configureTimeout(questions, logPrefix, aggregatedPromise, promises.build());\n         return aggregatedPromise;\n     }\n \n+    private void configureTimeout(List<DnsQuestion> questions, String logPrefix,\n+                                  Promise<List<DnsRecord>> result,\n+                                  List<Promise<List<DnsRecord>>> promises) {\n+        eventLoop.schedule(() -> {\n+            if (result.isDone()) {\n+                // Received a response before the query times out.\n+                return;\n+            }\n+            final DnsTimeoutException exception = new DnsTimeoutException(\n+                    '[' + logPrefix + \"] \" + questions + \" are timed out after \" +\n+                    queryTimeoutMillis + \" milliseconds.\");\n+            result.tryFailure(exception);\n+            promises.forEach(promise -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5260955ca4380143ce38127efb5b9e954bcb5f86"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDQ1NTkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMToxMzoxNVrOF7IzaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMToxMzoxNVrOF7IzaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1NDUzNg==", "bodyText": "isDone() check is redundant. cancel() does nothing when promise is done already.", "url": "https://github.com/line/armeria/pull/2623#discussion_r397554536", "createdAt": "2020-03-25T01:13:15Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "diffHunk": "@@ -103,10 +118,39 @@ public void operationComplete(Future<List<DnsRecord>> future) throws Exception {\n             }\n         };\n \n-        questions.forEach(q -> delegate.resolveAll(q).addListener(listener));\n+        final Builder<Promise<List<DnsRecord>>> promises =\n+                ImmutableList.builderWithExpectedSize(questions.size());\n+        questions.forEach(q -> {\n+            final Promise<List<DnsRecord>> promise = executor().newPromise();\n+            promises.add(promise);\n+            delegate.resolveAll(q, EMPTY_ADDITIONALS, promise);\n+            promise.addListener(listener);\n+        });\n+        configureTimeout(questions, logPrefix, aggregatedPromise, promises.build());\n         return aggregatedPromise;\n     }\n \n+    private void configureTimeout(List<DnsQuestion> questions, String logPrefix,\n+                                  Promise<List<DnsRecord>> result,\n+                                  List<Promise<List<DnsRecord>>> promises) {\n+        eventLoop.schedule(() -> {\n+            if (result.isDone()) {\n+                // Received a response before the query times out.\n+                return;\n+            }\n+            final DnsTimeoutException exception = new DnsTimeoutException(\n+                    '[' + logPrefix + \"] \" + questions + \" are timed out after \" +\n+                    queryTimeoutMillis + \" milliseconds.\");\n+            result.tryFailure(exception);\n+            promises.forEach(promise -> {\n+                if (promise.isDone()) {\n+                    return;\n+                }\n+                promise.cancel(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5260955ca4380143ce38127efb5b9e954bcb5f86"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDU5NDk3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjozMjowNlrOF7KEwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjo1NzoyMlrOF7Ke8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3NTM2MA==", "bodyText": "setFailure? I think we're not checking the return value since we don't expect the result to be completable since we own the event loop so may as well make that explicit.", "url": "https://github.com/line/armeria/pull/2623#discussion_r397575360", "createdAt": "2020-03-25T02:32:06Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "diffHunk": "@@ -103,10 +118,39 @@ public void operationComplete(Future<List<DnsRecord>> future) throws Exception {\n             }\n         };\n \n-        questions.forEach(q -> delegate.resolveAll(q).addListener(listener));\n+        final Builder<Promise<List<DnsRecord>>> promises =\n+                ImmutableList.builderWithExpectedSize(questions.size());\n+        questions.forEach(q -> {\n+            final Promise<List<DnsRecord>> promise = executor().newPromise();\n+            promises.add(promise);\n+            delegate.resolveAll(q, EMPTY_ADDITIONALS, promise);\n+            promise.addListener(listener);\n+        });\n+        configureTimeout(questions, logPrefix, aggregatedPromise, promises.build());\n         return aggregatedPromise;\n     }\n \n+    private void configureTimeout(List<DnsQuestion> questions, String logPrefix,\n+                                  Promise<List<DnsRecord>> result,\n+                                  List<Promise<List<DnsRecord>>> promises) {\n+        if (queryTimeoutMillis == 0) {\n+            return;\n+        }\n+        eventLoop.schedule(() -> {\n+            if (result.isDone()) {\n+                // Received a response before the query times out.\n+                return;\n+            }\n+            final DnsTimeoutException exception = new DnsTimeoutException(\n+                    '[' + logPrefix + \"] \" + questions + \" are timed out after \" +\n+                    queryTimeoutMillis + \" milliseconds.\");\n+            result.tryFailure(exception);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05898dd4d081ab9968e09db995e4152decf9af3f"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4MjA2Nw==", "bodyText": "Yeah, that makes sense. Fixed.", "url": "https://github.com/line/armeria/pull/2623#discussion_r397582067", "createdAt": "2020-03-25T02:57:22Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "diffHunk": "@@ -103,10 +118,39 @@ public void operationComplete(Future<List<DnsRecord>> future) throws Exception {\n             }\n         };\n \n-        questions.forEach(q -> delegate.resolveAll(q).addListener(listener));\n+        final Builder<Promise<List<DnsRecord>>> promises =\n+                ImmutableList.builderWithExpectedSize(questions.size());\n+        questions.forEach(q -> {\n+            final Promise<List<DnsRecord>> promise = executor().newPromise();\n+            promises.add(promise);\n+            delegate.resolveAll(q, EMPTY_ADDITIONALS, promise);\n+            promise.addListener(listener);\n+        });\n+        configureTimeout(questions, logPrefix, aggregatedPromise, promises.build());\n         return aggregatedPromise;\n     }\n \n+    private void configureTimeout(List<DnsQuestion> questions, String logPrefix,\n+                                  Promise<List<DnsRecord>> result,\n+                                  List<Promise<List<DnsRecord>>> promises) {\n+        if (queryTimeoutMillis == 0) {\n+            return;\n+        }\n+        eventLoop.schedule(() -> {\n+            if (result.isDone()) {\n+                // Received a response before the query times out.\n+                return;\n+            }\n+            final DnsTimeoutException exception = new DnsTimeoutException(\n+                    '[' + logPrefix + \"] \" + questions + \" are timed out after \" +\n+                    queryTimeoutMillis + \" milliseconds.\");\n+            result.tryFailure(exception);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3NTM2MA=="}, "originalCommit": {"oid": "05898dd4d081ab9968e09db995e4152decf9af3f"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDYwMTIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjozNToyNFrOF7KIPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjo1NzowOVrOF7Kesg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3NjI1NA==", "bodyText": "I think we should either use eventLoop here or executor() below when scheduling for consistency.", "url": "https://github.com/line/armeria/pull/2623#discussion_r397576254", "createdAt": "2020-03-25T02:35:24Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "diffHunk": "@@ -103,10 +118,39 @@ public void operationComplete(Future<List<DnsRecord>> future) throws Exception {\n             }\n         };\n \n-        questions.forEach(q -> delegate.resolveAll(q).addListener(listener));\n+        final Builder<Promise<List<DnsRecord>>> promises =\n+                ImmutableList.builderWithExpectedSize(questions.size());\n+        questions.forEach(q -> {\n+            final Promise<List<DnsRecord>> promise = executor().newPromise();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05898dd4d081ab9968e09db995e4152decf9af3f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4MjAwMg==", "bodyText": "Oops. I removed executor() completely. Thanks!", "url": "https://github.com/line/armeria/pull/2623#discussion_r397582002", "createdAt": "2020-03-25T02:57:09Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "diffHunk": "@@ -103,10 +118,39 @@ public void operationComplete(Future<List<DnsRecord>> future) throws Exception {\n             }\n         };\n \n-        questions.forEach(q -> delegate.resolveAll(q).addListener(listener));\n+        final Builder<Promise<List<DnsRecord>>> promises =\n+                ImmutableList.builderWithExpectedSize(questions.size());\n+        questions.forEach(q -> {\n+            final Promise<List<DnsRecord>> promise = executor().newPromise();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3NjI1NA=="}, "originalCommit": {"oid": "05898dd4d081ab9968e09db995e4152decf9af3f"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2811, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}