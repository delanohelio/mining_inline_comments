{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NTkxMTQ1", "number": 2889, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjo0Mjo1NVrOENs5tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjo0NDowMlrOENs6nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODAyNjE1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjo0Mjo1NVrOGwdPRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjo1ODoxNVrOGwde_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2Mzg3Ng==", "bodyText": "isEqualTo could be simplified with containsExactly(3, 2, 1)", "url": "https://github.com/line/armeria/pull/2889#discussion_r453463876", "createdAt": "2020-07-13T06:42:55Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java", "diffHunk": "@@ -126,6 +158,7 @@ void consumesAndProduces() throws IOException {\n                                            .aggregate().join();\n         assertThat(res.status()).isSameAs(HttpStatus.OK);\n         assertThat(res.contentUtf8()).isEqualTo(\"armeria\");\n+        assertThat(decoratorLog.stream().collect(Collectors.toList())).isEqualTo(Arrays.asList(3, 2, 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948d6d76287990c7cc5811ba4b07bbd17278b3be"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NzkwMQ==", "bodyText": "Thanks. Done.", "url": "https://github.com/line/armeria/pull/2889#discussion_r453467901", "createdAt": "2020-07-13T06:58:15Z", "author": {"login": "m50d"}, "path": "core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java", "diffHunk": "@@ -126,6 +158,7 @@ void consumesAndProduces() throws IOException {\n                                            .aggregate().join();\n         assertThat(res.status()).isSameAs(HttpStatus.OK);\n         assertThat(res.contentUtf8()).isEqualTo(\"armeria\");\n+        assertThat(decoratorLog.stream().collect(Collectors.toList())).isEqualTo(Arrays.asList(3, 2, 1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2Mzg3Ng=="}, "originalCommit": {"oid": "948d6d76287990c7cc5811ba4b07bbd17278b3be"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODAyNzY4OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjo0Mzo0NlrOGwdQOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDo0NDozNVrOGwjLZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NDEyMg==", "bodyText": "How about moving to the end of the file?", "url": "https://github.com/line/armeria/pull/2889#discussion_r453464122", "createdAt": "2020-07-13T06:43:46Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java", "diffHunk": "@@ -42,6 +47,27 @@\n \n     private static CountDownLatch accessLogWriterCheckLatch;\n     private static CountDownLatch propertyCheckLatch;\n+    private static final Queue<Integer> decoratorLog = new ArrayBlockingQueue<>(100);\n+\n+    private static final class LoggingDecorator implements Function<HttpService, HttpService> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948d6d76287990c7cc5811ba4b07bbd17278b3be"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NjQzMg==", "bodyText": "I generally like to put dependencies first and things that depend on them after? But happy to move it if that's this project's style.", "url": "https://github.com/line/armeria/pull/2889#discussion_r453466432", "createdAt": "2020-07-13T06:51:37Z", "author": {"login": "m50d"}, "path": "core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java", "diffHunk": "@@ -42,6 +47,27 @@\n \n     private static CountDownLatch accessLogWriterCheckLatch;\n     private static CountDownLatch propertyCheckLatch;\n+    private static final Queue<Integer> decoratorLog = new ArrayBlockingQueue<>(100);\n+\n+    private static final class LoggingDecorator implements Function<HttpService, HttpService> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NDEyMg=="}, "originalCommit": {"oid": "948d6d76287990c7cc5811ba4b07bbd17278b3be"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU2MTE5MA==", "bodyText": "We prefer top-down layout for methods and classes. Thanks in advance. \ud83d\ude47", "url": "https://github.com/line/armeria/pull/2889#discussion_r453561190", "createdAt": "2020-07-13T10:44:35Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java", "diffHunk": "@@ -42,6 +47,27 @@\n \n     private static CountDownLatch accessLogWriterCheckLatch;\n     private static CountDownLatch propertyCheckLatch;\n+    private static final Queue<Integer> decoratorLog = new ArrayBlockingQueue<>(100);\n+\n+    private static final class LoggingDecorator implements Function<HttpService, HttpService> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NDEyMg=="}, "originalCommit": {"oid": "948d6d76287990c7cc5811ba4b07bbd17278b3be"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODAyODQ3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjo0NDowMlrOGwdQoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMTo0OTo1NFrOGxA-qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NDIyNQ==", "bodyText": "nit: LinkedTransferQueue, which is unbounded? (Just in case we are blocked indefinitely)", "url": "https://github.com/line/armeria/pull/2889#discussion_r453464225", "createdAt": "2020-07-13T06:44:02Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java", "diffHunk": "@@ -42,6 +47,27 @@\n \n     private static CountDownLatch accessLogWriterCheckLatch;\n     private static CountDownLatch propertyCheckLatch;\n+    private static final Queue<Integer> decoratorLog = new ArrayBlockingQueue<>(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948d6d76287990c7cc5811ba4b07bbd17278b3be"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NzE3Ng==", "bodyText": "My reading of the docs is that add should throw IllegalStateException if we exceed the capacity?", "url": "https://github.com/line/armeria/pull/2889#discussion_r453467176", "createdAt": "2020-07-13T06:54:38Z", "author": {"login": "m50d"}, "path": "core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java", "diffHunk": "@@ -42,6 +47,27 @@\n \n     private static CountDownLatch accessLogWriterCheckLatch;\n     private static CountDownLatch propertyCheckLatch;\n+    private static final Queue<Integer> decoratorLog = new ArrayBlockingQueue<>(100);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NDIyNQ=="}, "originalCommit": {"oid": "948d6d76287990c7cc5811ba4b07bbd17278b3be"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU2MTczNg==", "bodyText": "Ah, I was rather concerned about consuming side, but yeah, I guess it doesn't matter anyway. Maybe I just find the magic number 100 somewhat unnatural.", "url": "https://github.com/line/armeria/pull/2889#discussion_r453561736", "createdAt": "2020-07-13T10:45:34Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java", "diffHunk": "@@ -42,6 +47,27 @@\n \n     private static CountDownLatch accessLogWriterCheckLatch;\n     private static CountDownLatch propertyCheckLatch;\n+    private static final Queue<Integer> decoratorLog = new ArrayBlockingQueue<>(100);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NDIyNQ=="}, "originalCommit": {"oid": "948d6d76287990c7cc5811ba4b07bbd17278b3be"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA0OTQ0OA==", "bodyText": "It's certainly arbitrary. My thinking was that it would be better to hit an exception from hitting the limit than to grow without bound and then OOM. (In practice I doubt either would happen though).", "url": "https://github.com/line/armeria/pull/2889#discussion_r454049448", "createdAt": "2020-07-14T01:49:54Z", "author": {"login": "m50d"}, "path": "core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java", "diffHunk": "@@ -42,6 +47,27 @@\n \n     private static CountDownLatch accessLogWriterCheckLatch;\n     private static CountDownLatch propertyCheckLatch;\n+    private static final Queue<Integer> decoratorLog = new ArrayBlockingQueue<>(100);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NDIyNQ=="}, "originalCommit": {"oid": "948d6d76287990c7cc5811ba4b07bbd17278b3be"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2080, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}