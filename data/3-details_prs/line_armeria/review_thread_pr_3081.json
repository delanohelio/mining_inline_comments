{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMTc1ODE5", "number": 3081, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjozOTo1MlrOEm5SLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTo1MToyN1rOE7AhSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjE5ODg2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjozOTo1MlrOHXLwhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjozOTo1MlrOHXLwhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA3MTk0MA==", "bodyText": "How about:\n... whether the request and response handled by this {@link PrometheusExpositionService} are logged ...?", "url": "https://github.com/line/armeria/pull/3081#discussion_r494071940", "createdAt": "2020-09-24T06:39:52Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionService.java", "diffHunk": "@@ -35,20 +38,50 @@\n  * Exposes Prometheus metrics in <a href=\"https://prometheus.io/docs/instrumenting/exposition_formats/\">text\n  * format 0.0.4</a>.\n  */\n-public final class PrometheusExpositionService extends AbstractHttpService {\n+public final class PrometheusExpositionService extends AbstractHttpService implements TransientHttpService {\n \n     private static final MediaType CONTENT_TYPE_004 = MediaType.parse(TextFormat.CONTENT_TYPE_004);\n \n+    /**\n+     * Returns a new {@link PrometheusExpositionService} that exposes Prometheus metrics from the specified\n+     * {@link CollectorRegistry}.\n+     */\n+    public static PrometheusExpositionService of(CollectorRegistry collectorRegistry) {\n+        return new PrometheusExpositionService(collectorRegistry, false);\n+    }\n+\n+    /**\n+     * Returns a new {@link PrometheusExpositionService} that exposes Prometheus metrics from the specified\n+     * {@link CollectorRegistry}.\n+     *\n+     * @param shouldLogRequest tells whether the request and response are logged or recorded by", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b50d2dc28dd5a2cf570010ec54f0be68295a7663"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjIyMjM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/Service.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjo0NzoxNFrOHXL99w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjo0NzoxNFrOHXL99w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA3NTM4Mw==", "bodyText": "How about removing this method and checking by?:\nif (service instanceof TransientService && ((TransientService) service).shouldLogRequest()) {\n   ...\n  \n}", "url": "https://github.com/line/armeria/pull/3081#discussion_r494075383", "createdAt": "2020-09-24T06:47:14Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/Service.java", "diffHunk": "@@ -103,4 +106,12 @@ default void serviceAdded(ServiceConfig cfg) throws Exception {}\n     default boolean shouldCachePath(String path, @Nullable String query, Route route) {\n         return route.pathType() == RoutePathType.EXACT && query == null;\n     }\n+\n+    /**\n+     * Returns whether the request and response are logged or recorded by\n+     * {@link LoggingService}, {@link MetricCollectingService} and {@link AccessLogWriter}.\n+     */\n+    default boolean shouldLogRequest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b50d2dc28dd5a2cf570010ec54f0be68295a7663"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjY5MjA2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNjoyNDo1OFrOHX2hAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNjoyNDo1OFrOHX2hAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc3MjQ4Mg==", "bodyText": "We should only check ServiceConfig.transientService() and set true to it when service.as(TransientService.class) != null and a user did not override it with transientService(false).", "url": "https://github.com/line/armeria/pull/3081#discussion_r494772482", "createdAt": "2020-09-25T06:24:58Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java", "diffHunk": "@@ -405,7 +405,8 @@ private void handleRequest(ChannelHandlerContext ctx, DecodedHttpRequest req) th\n \n             // Keep track of the number of unfinished requests and\n             // clean up the request stream when response stream ends.\n-            final boolean isTransient = service.as(TransientService.class) != null;\n+            final boolean isTransient = service.as(TransientService.class) != null ||\n+                                        serviceCfg.transientService();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f69a93bf01defc8065ce1fe0142c2243eae322"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTMwMDA2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODoxODozMFrOHtNNZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTowMToxOVrOHvkwUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2NDM4OQ==", "bodyText": "Can use varags by removing enable from parameters?\nenableTransientServiceAction(ActionType... actionTypes);", "url": "https://github.com/line/armeria/pull/3081#discussion_r517164389", "createdAt": "2020-11-04T08:18:30Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceBuilder.java", "diffHunk": "@@ -250,13 +259,23 @@ public HealthCheckServiceBuilder updatable(HealthCheckUpdateHandler updateHandle\n         return this;\n     }\n \n+    /**\n+     * Sets whether the specified {@link ActionType} is enabled or not for the\n+     * {@link #build() HealthCheckService}. All {@link ActionType}s are disabled by default.\n+     */\n+    public HealthCheckServiceBuilder transientServiceAction(ActionType actionType, boolean enable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e949d768098cd72a52257aebb24f4774a23af04"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgwMjQ0OQ==", "bodyText": "Had a chat with @ikhoon and we decided to leave it as it is because the default value might be changed in the future.", "url": "https://github.com/line/armeria/pull/3081#discussion_r517802449", "createdAt": "2020-11-05T05:35:55Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceBuilder.java", "diffHunk": "@@ -250,13 +259,23 @@ public HealthCheckServiceBuilder updatable(HealthCheckUpdateHandler updateHandle\n         return this;\n     }\n \n+    /**\n+     * Sets whether the specified {@link ActionType} is enabled or not for the\n+     * {@link #build() HealthCheckService}. All {@link ActionType}s are disabled by default.\n+     */\n+    public HealthCheckServiceBuilder transientServiceAction(ActionType actionType, boolean enable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2NDM4OQ=="}, "originalCommit": {"oid": "2e949d768098cd72a52257aebb24f4774a23af04"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NzMxNA==", "bodyText": "How about this:\n\nIf transientServiceActions() is not invoked at all, use the default settings.\nIf invoked at least once, use the specified ones.", "url": "https://github.com/line/armeria/pull/3081#discussion_r519647314", "createdAt": "2020-11-09T09:01:19Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceBuilder.java", "diffHunk": "@@ -250,13 +259,23 @@ public HealthCheckServiceBuilder updatable(HealthCheckUpdateHandler updateHandle\n         return this;\n     }\n \n+    /**\n+     * Sets whether the specified {@link ActionType} is enabled or not for the\n+     * {@link #build() HealthCheckService}. All {@link ActionType}s are disabled by default.\n+     */\n+    public HealthCheckServiceBuilder transientServiceAction(ActionType actionType, boolean enable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2NDM4OQ=="}, "originalCommit": {"oid": "2e949d768098cd72a52257aebb24f4774a23af04"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTMwNTg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/logging/LoggingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODoyMDoxNFrOHtNRAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNTozODowNVrOHt0L_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2NTMxMw==", "bodyText": "nit: Merge two if conditions?", "url": "https://github.com/line/armeria/pull/3081#discussion_r517165313", "createdAt": "2020-11-04T08:20:14Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/logging/LoggingService.java", "diffHunk": "@@ -121,8 +123,10 @@ public static LoggingServiceBuilder builder() {\n \n     @Override\n     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {\n-        if (sampler.isSampled(ctx)) {\n-            logWhenComplete(logger, ctx, requestLogger, responseLogger);\n+        if (TransientServiceUtil.countFor(ctx, ActionType.LOGGING)) {\n+            if (sampler.isSampled(ctx)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e949d768098cd72a52257aebb24f4774a23af04"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgwMzAwNw==", "bodyText": "Fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/3081#discussion_r517803007", "createdAt": "2020-11-05T05:38:05Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/logging/LoggingService.java", "diffHunk": "@@ -121,8 +123,10 @@ public static LoggingServiceBuilder builder() {\n \n     @Override\n     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {\n-        if (sampler.isSampled(ctx)) {\n-            logWhenComplete(logger, ctx, requestLogger, responseLogger);\n+        if (TransientServiceUtil.countFor(ctx, ActionType.LOGGING)) {\n+            if (sampler.isSampled(ctx)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2NTMxMw=="}, "originalCommit": {"oid": "2e949d768098cd72a52257aebb24f4774a23af04"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTMxMzkzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionServiceBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODoyMjo0M1rOHtNWAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODoyMjo0M1rOHtNWAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2NjU5Mw==", "bodyText": "Ditto.", "url": "https://github.com/line/armeria/pull/3081#discussion_r517166593", "createdAt": "2020-11-04T08:22:43Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionServiceBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.metric;\n+\n+import static com.linecorp.armeria.internal.server.TransientServiceUtil.defaultTransientServiceActions;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.EnumMap;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+\n+import com.linecorp.armeria.server.TransientService.ActionType;\n+\n+import io.prometheus.client.CollectorRegistry;\n+\n+/**\n+ * Builds a {@link PrometheusExpositionService}.\n+ */\n+public final class PrometheusExpositionServiceBuilder {\n+\n+    private final CollectorRegistry collectorRegistry;\n+\n+    private final EnumMap<ActionType, Boolean> transientServiceActions;\n+\n+    PrometheusExpositionServiceBuilder(CollectorRegistry collectorRegistry) {\n+        this.collectorRegistry = requireNonNull(collectorRegistry, \"collectorRegistry\");\n+        transientServiceActions = new EnumMap<>(ActionType.class);\n+        transientServiceActions.putAll(defaultTransientServiceActions());\n+    }\n+\n+    /**\n+     * Sets whether the specified {@link ActionType} is enabled or not for the\n+     * {@link #build() PrometheusExpositionService}. All {@link ActionType}s are disabled by default.\n+     */\n+    public PrometheusExpositionServiceBuilder transientServiceAction(ActionType actionType, boolean enable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e949d768098cd72a52257aebb24f4774a23af04"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTUwMjc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNjozMTozN1rOHt1KUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODowNTo1OVrOHvi57Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgxODk2MQ==", "bodyText": "Could use Maps.immutableEnumMap(...)?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                  Maps.newEnumMap(ImmutableMap.copyOf(transientServiceActions)));\n          \n          \n            \n                                                  Maps.immutableEnumMap(transientServiceActions));", "url": "https://github.com/line/armeria/pull/3081#discussion_r517818961", "createdAt": "2020-11-05T06:31:37Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceBuilder.java", "diffHunk": "@@ -250,13 +259,23 @@ public HealthCheckServiceBuilder updatable(HealthCheckUpdateHandler updateHandle\n         return this;\n     }\n \n+    /**\n+     * Sets whether the specified {@link ActionType} is enabled or not for the\n+     * {@link #build() HealthCheckService}. All {@link ActionType}s are disabled by default.\n+     */\n+    public HealthCheckServiceBuilder transientServiceAction(ActionType actionType, boolean enable) {\n+        transientServiceActions.put(requireNonNull(actionType, \"actionType\"), enable);\n+        return this;\n+    }\n+\n     /**\n      * Returns a newly created {@link HealthCheckService} built from the properties specified so far.\n      */\n     public HealthCheckService build() {\n         return new HealthCheckService(healthCheckers.build(),\n                                       healthyResponse, unhealthyResponse,\n                                       maxLongPollingTimeoutMillis, longPollingTimeoutJitterRate,\n-                                      pingIntervalMillis, updateHandler);\n+                                      pingIntervalMillis, updateHandler,\n+                                      Maps.newEnumMap(ImmutableMap.copyOf(transientServiceActions)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b114177aee0677d7a49acfae4a9822271c94f18b"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxNzAwNQ==", "bodyText": "This is only used for the builder. It doesn't create many objects. You can ignore this review. :-)", "url": "https://github.com/line/armeria/pull/3081#discussion_r519617005", "createdAt": "2020-11-09T08:05:59Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceBuilder.java", "diffHunk": "@@ -250,13 +259,23 @@ public HealthCheckServiceBuilder updatable(HealthCheckUpdateHandler updateHandle\n         return this;\n     }\n \n+    /**\n+     * Sets whether the specified {@link ActionType} is enabled or not for the\n+     * {@link #build() HealthCheckService}. All {@link ActionType}s are disabled by default.\n+     */\n+    public HealthCheckServiceBuilder transientServiceAction(ActionType actionType, boolean enable) {\n+        transientServiceActions.put(requireNonNull(actionType, \"actionType\"), enable);\n+        return this;\n+    }\n+\n     /**\n      * Returns a newly created {@link HealthCheckService} built from the properties specified so far.\n      */\n     public HealthCheckService build() {\n         return new HealthCheckService(healthCheckers.build(),\n                                       healthyResponse, unhealthyResponse,\n                                       maxLongPollingTimeoutMillis, longPollingTimeoutJitterRate,\n-                                      pingIntervalMillis, updateHandler);\n+                                      pingIntervalMillis, updateHandler,\n+                                      Maps.newEnumMap(ImmutableMap.copyOf(transientServiceActions)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgxODk2MQ=="}, "originalCommit": {"oid": "b114177aee0677d7a49acfae4a9822271c94f18b"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTUwODYzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNjozNDozOFrOHt1N9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNjozNDozOFrOHt1N9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgxOTg5NQ==", "bodyText": "Could use Maps.immutableEnumMap() to avoid addtional copies?\nhttps://github.com/google/guava/blob/7ef9f97cad23efee4cc18c63b5f3c90ca320f131/guava/src/com/google/common/collect/Maps.java#L148-L152", "url": "https://github.com/line/armeria/pull/3081#discussion_r517819895", "createdAt": "2020-11-05T06:34:38Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionService.java", "diffHunk": "@@ -35,20 +41,45 @@\n  * Exposes Prometheus metrics in <a href=\"https://prometheus.io/docs/instrumenting/exposition_formats/\">text\n  * format 0.0.4</a>.\n  */\n-public final class PrometheusExpositionService extends AbstractHttpService {\n+public final class PrometheusExpositionService extends AbstractHttpService implements TransientHttpService {\n \n     private static final MediaType CONTENT_TYPE_004 = MediaType.parse(TextFormat.CONTENT_TYPE_004);\n \n+    /**\n+     * Returns a new {@link PrometheusExpositionService} that exposes Prometheus metrics from the specified\n+     * {@link CollectorRegistry}.\n+     */\n+    public static PrometheusExpositionService of(CollectorRegistry collectorRegistry) {\n+        return new PrometheusExpositionService(collectorRegistry, defaultTransientServiceActions());\n+    }\n+\n+    /**\n+     * Returns a new {@link PrometheusExpositionServiceBuilder} created with the specified\n+     * {@link CollectorRegistry}.\n+     */\n+    public static PrometheusExpositionServiceBuilder builder(CollectorRegistry collectorRegistry) {\n+        return new PrometheusExpositionServiceBuilder(collectorRegistry);\n+    }\n+\n     private final CollectorRegistry collectorRegistry;\n+    private final Map<ActionType, Boolean> transientServiceActions;\n \n     /**\n      * Creates a new instance.\n      *\n      * @param collectorRegistry Prometheus registry\n+     *\n+     * @deprecated Use {@link #of(CollectorRegistry)}.\n      */\n+    @Deprecated\n     public PrometheusExpositionService(CollectorRegistry collectorRegistry) {\n-        requireNonNull(collectorRegistry, \"collectorRegistry\");\n-        this.collectorRegistry = collectorRegistry;\n+        this(collectorRegistry, defaultTransientServiceActions());\n+    }\n+\n+    PrometheusExpositionService(CollectorRegistry collectorRegistry,\n+                                EnumMap<ActionType, Boolean> transientServiceActions) {\n+        this.collectorRegistry = requireNonNull(collectorRegistry, \"collectorRegistry\");\n+        this.transientServiceActions = ImmutableMap.copyOf(transientServiceActions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b114177aee0677d7a49acfae4a9822271c94f18b"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTUwOTI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionServiceBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNjozNDo1NlrOHt1OXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNjozNDo1NlrOHt1OXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgxOTk5Nw==", "bodyText": "Ditto", "url": "https://github.com/line/armeria/pull/3081#discussion_r517819997", "createdAt": "2020-11-05T06:34:56Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionServiceBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.metric;\n+\n+import static com.linecorp.armeria.internal.server.TransientServiceUtil.defaultTransientServiceActions;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.EnumMap;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+\n+import com.linecorp.armeria.server.TransientService.ActionType;\n+\n+import io.prometheus.client.CollectorRegistry;\n+\n+/**\n+ * Builds a {@link PrometheusExpositionService}.\n+ */\n+public final class PrometheusExpositionServiceBuilder {\n+\n+    private final CollectorRegistry collectorRegistry;\n+\n+    private final EnumMap<ActionType, Boolean> transientServiceActions;\n+\n+    PrometheusExpositionServiceBuilder(CollectorRegistry collectorRegistry) {\n+        this.collectorRegistry = requireNonNull(collectorRegistry, \"collectorRegistry\");\n+        transientServiceActions = new EnumMap<>(ActionType.class);\n+        transientServiceActions.putAll(defaultTransientServiceActions());\n+    }\n+\n+    /**\n+     * Sets whether the specified {@link ActionType} is enabled or not for the\n+     * {@link #build() PrometheusExpositionService}. All {@link ActionType}s are disabled by default.\n+     */\n+    public PrometheusExpositionServiceBuilder transientServiceAction(ActionType actionType, boolean enable) {\n+        transientServiceActions.put(requireNonNull(actionType, \"actionType\"), enable);\n+        return this;\n+    }\n+\n+    /**\n+     * Returns a newly-created {@link PrometheusExpositionService} based on the properties of this builder.\n+     */\n+    public PrometheusExpositionService build() {\n+        return new PrometheusExpositionService(collectorRegistry,\n+                                               Maps.newEnumMap(ImmutableMap.copyOf(transientServiceActions)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b114177aee0677d7a49acfae4a9822271c94f18b"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzUyNTMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/TransientService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1Mjo1NVrOHvkcvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1Mjo1NVrOHvkcvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0MjMwMA==", "bodyText": "G -> g", "url": "https://github.com/line/armeria/pull/3081#discussion_r519642300", "createdAt": "2020-11-09T08:52:55Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/TransientService.java", "diffHunk": "@@ -27,4 +30,41 @@\n  */\n @FunctionalInterface\n public interface TransientService<I extends Request, O extends Response> extends Service<I, O> {\n+\n+    /**\n+     * Tells whether the specified {@link ActionType} is enabled for this {@link TransientService}.\n+     */\n+    default boolean countFor(ActionType type) {\n+        return false;\n+    }\n+\n+    /**\n+     * The type of actions that is used in {@link TransientService#countFor(ActionType)}.\n+     */\n+    enum ActionType {\n+\n+        /**\n+         * Whether Graceful shutdown counts the requests to the {@link TransientService} as processing requests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b114177aee0677d7a49acfae4a9822271c94f18b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzUzMjA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/TransientService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1NDo0M1rOHvkg6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1NDo0M1rOHvkg6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0MzM3MA==", "bodyText": "Should this be dynamic or static? If static, I guess we can just have this:\ndefault Set<ActionType> countedActionTypes() {\n    return ALL_ACTION_TYPES;\n}\n.. and expose it in ServiceConfig for faster retrieval, because it will be queried very often.", "url": "https://github.com/line/armeria/pull/3081#discussion_r519643370", "createdAt": "2020-11-09T08:54:43Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/TransientService.java", "diffHunk": "@@ -27,4 +30,41 @@\n  */\n @FunctionalInterface\n public interface TransientService<I extends Request, O extends Response> extends Service<I, O> {\n+\n+    /**\n+     * Tells whether the specified {@link ActionType} is enabled for this {@link TransientService}.\n+     */\n+    default boolean countFor(ActionType type) {\n+        return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b114177aee0677d7a49acfae4a9822271c94f18b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzUzNjY4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/TransientServiceUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1NTo1OVrOHvkjsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1NTo1OVrOHvkjsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NDA4Mw==", "bodyText": "Could use an immutable EnumSet and EnumSet.contains()? It's O(1) anyways.\nFlags?", "url": "https://github.com/line/armeria/pull/3081#discussion_r519644083", "createdAt": "2020-11-09T08:55:59Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/TransientServiceUtil.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.server;\n+\n+import static com.linecorp.armeria.server.TransientService.ActionType.ACCESS_LOGGING;\n+import static com.linecorp.armeria.server.TransientService.ActionType.GRACEFUL_SHUTDOWN;\n+import static com.linecorp.armeria.server.TransientService.ActionType.LOGGING;\n+import static com.linecorp.armeria.server.TransientService.ActionType.METRIC_COLLECTION;\n+\n+import java.util.EnumMap;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+\n+import com.linecorp.armeria.server.Service;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.TransientService;\n+import com.linecorp.armeria.server.TransientService.ActionType;\n+\n+public final class TransientServiceUtil {\n+\n+    private static final EnumMap<ActionType, Boolean> defaultTransientServiceActions =\n+            Maps.newEnumMap(ImmutableMap.of(GRACEFUL_SHUTDOWN, false,\n+                                            METRIC_COLLECTION, false,\n+                                            LOGGING, false,\n+                                            ACCESS_LOGGING, false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b114177aee0677d7a49acfae4a9822271c94f18b"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MjA2NzQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwODoyNTo0NlrOHxvhJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMzoxMDoxM1rOHyYIxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyMDgwNg==", "bodyText": "requireNonNull?", "url": "https://github.com/line/armeria/pull/3081#discussion_r521920806", "createdAt": "2020-11-12T08:25:46Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceBuilder.java", "diffHunk": "@@ -250,13 +258,34 @@ public HealthCheckServiceBuilder updatable(HealthCheckUpdateHandler updateHandle\n         return this;\n     }\n \n+    @Override\n+    public HealthCheckServiceBuilder optOutFeatures(OptOutFeature... optOutFeatures) {\n+        return optOutFeatures(ImmutableSet.copyOf(requireNonNull(optOutFeatures, \"optOutFeatures\")));\n+    }\n+\n+    @Override\n+    public HealthCheckServiceBuilder optOutFeatures(Iterable<OptOutFeature> optOutFeatures) {\n+        if (this.optOutFeatures == null) {\n+            this.optOutFeatures = EnumSet.noneOf(OptOutFeature.class);\n+        }\n+        this.optOutFeatures.addAll(ImmutableSet.copyOf(optOutFeatures));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c76e1f39a49df5fc9fa0acdd1eedc8e4577994be"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU4NjMxMQ==", "bodyText": "Oops thanks fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/3081#discussion_r522586311", "createdAt": "2020-11-13T03:10:13Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceBuilder.java", "diffHunk": "@@ -250,13 +258,34 @@ public HealthCheckServiceBuilder updatable(HealthCheckUpdateHandler updateHandle\n         return this;\n     }\n \n+    @Override\n+    public HealthCheckServiceBuilder optOutFeatures(OptOutFeature... optOutFeatures) {\n+        return optOutFeatures(ImmutableSet.copyOf(requireNonNull(optOutFeatures, \"optOutFeatures\")));\n+    }\n+\n+    @Override\n+    public HealthCheckServiceBuilder optOutFeatures(Iterable<OptOutFeature> optOutFeatures) {\n+        if (this.optOutFeatures == null) {\n+            this.optOutFeatures = EnumSet.noneOf(OptOutFeature.class);\n+        }\n+        this.optOutFeatures.addAll(ImmutableSet.copyOf(optOutFeatures));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyMDgwNg=="}, "originalCommit": {"oid": "c76e1f39a49df5fc9fa0acdd1eedc8e4577994be"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MjA4OTcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionServiceBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwODozMToxMFrOHxvuYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwODozMToxMFrOHxvuYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkyNDE5Mg==", "bodyText": "requireNonNull?", "url": "https://github.com/line/armeria/pull/3081#discussion_r521924192", "createdAt": "2020-11-12T08:31:10Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionServiceBuilder.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.metric;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.server.OptOutFeature;\n+import com.linecorp.armeria.server.TransientServiceBuilder;\n+\n+import io.prometheus.client.CollectorRegistry;\n+\n+/**\n+ * Builds a {@link PrometheusExpositionService}.\n+ */\n+public final class PrometheusExpositionServiceBuilder implements TransientServiceBuilder {\n+\n+    private final CollectorRegistry collectorRegistry;\n+\n+    @Nullable\n+    private Set<OptOutFeature> optOutFeatures;\n+\n+    PrometheusExpositionServiceBuilder(CollectorRegistry collectorRegistry) {\n+        this.collectorRegistry = requireNonNull(collectorRegistry, \"collectorRegistry\");\n+    }\n+\n+    @Override\n+    public PrometheusExpositionServiceBuilder optOutFeatures(OptOutFeature... optOutFeatures) {\n+        return optOutFeatures(ImmutableSet.copyOf(requireNonNull(optOutFeatures, \"optOutFeatures\")));\n+    }\n+\n+    @Override\n+    public PrometheusExpositionServiceBuilder optOutFeatures(Iterable<OptOutFeature> optOutFeatures) {\n+        requireNonNull(optOutFeatures, \"optOutFeatures\");\n+        if (this.optOutFeatures == null) {\n+            this.optOutFeatures = EnumSet.noneOf(OptOutFeature.class);\n+        }\n+        this.optOutFeatures.addAll(ImmutableSet.copyOf(optOutFeatures));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c76e1f39a49df5fc9fa0acdd1eedc8e4577994be"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTQ2Njg0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODo1Njo1N1rOHztmEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODo1Njo1N1rOHztmEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk4NjQ1MA==", "bodyText": "Ascii.toUpperCase()?", "url": "https://github.com/line/armeria/pull/3081#discussion_r523986450", "createdAt": "2020-11-16T08:56:57Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -372,6 +377,19 @@\n \n     private static final boolean VALIDATE_HEADERS = getBoolean(\"validateHeaders\", true);\n \n+    private static final String DEFAULT_OPT_OUT_FEATURES =\n+            \"GRACEFUL_SHUTDOWN,METRIC_COLLECTION,LOGGING,ACCESS_LOGGING\";\n+    private static final Set<OptOutFeature> OPT_OUT_FEATURES =\n+            Streams.stream(CSV_SPLITTER.split(getNormalized(\"optOutFeatures\", DEFAULT_OPT_OUT_FEATURES, val -> {\n+                try {\n+                    Streams.stream(CSV_SPLITTER.split(val))\n+                           .forEach(feature -> OptOutFeature.valueOf(feature.toUpperCase()));\n+                    return true;\n+                } catch (Exception e) {\n+                    return false;\n+                }\n+            }))).map(feature -> OptOutFeature.valueOf(feature.toUpperCase())).collect(toImmutableSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba15981d85c4ac4f6daf290c04e580fd433b25e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTQ3ODUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODo1ODo0NVrOHzttjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODo1ODo0NVrOHzttjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk4ODM2NQ==", "bodyText": "Global nit: Extract reqCtx.config() into a local variable?", "url": "https://github.com/line/armeria/pull/3081#discussion_r523988365", "createdAt": "2020-11-16T08:58:45Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -328,7 +328,9 @@ private void fail(Throwable cause) {\n         if (tryComplete()) {\n             setDone(true);\n             logBuilder().endResponse(cause);\n-            reqCtx.log().whenComplete().thenAccept(reqCtx.config().accessLogWriter()::log);\n+            if (!reqCtx.config().optOutFeatures().contains(OptOutFeature.ACCESS_LOGGING)) {\n+                reqCtx.log().whenComplete().thenAccept(reqCtx.config().accessLogWriter()::log);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba15981d85c4ac4f6daf290c04e580fd433b25e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTQ4OTcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/OptOutFeature.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTowMDoyMFrOHzt0qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTowMDoyMFrOHzt0qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk5MDE4Nw==", "bodyText": "How about:\nSpecifies which feature should be disabled for a {@link TransientService}.\n\n..?\nCould we also add a simple example that involves a builder?", "url": "https://github.com/line/armeria/pull/3081#discussion_r523990187", "createdAt": "2020-11-16T09:00:20Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/OptOutFeature.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server;\n+\n+import com.linecorp.armeria.server.logging.AccessLogWriter;\n+import com.linecorp.armeria.server.logging.LoggingService;\n+import com.linecorp.armeria.server.metric.MetricCollectingService;\n+\n+/**\n+ * The opt-out features that are disabled for a {@link TransientService}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba15981d85c4ac4f6daf290c04e580fd433b25e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTUwMDAxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/OptOutFeature.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTowMTo1OFrOHzt7Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTowMTo1OFrOHzt7Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk5MTg5OQ==", "bodyText": "For all enum values: The Javadoc needs an update. For example:\nPrevents a {@link Server} from counting the requests to ...", "url": "https://github.com/line/armeria/pull/3081#discussion_r523991899", "createdAt": "2020-11-16T09:01:58Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/OptOutFeature.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server;\n+\n+import com.linecorp.armeria.server.logging.AccessLogWriter;\n+import com.linecorp.armeria.server.logging.LoggingService;\n+import com.linecorp.armeria.server.metric.MetricCollectingService;\n+\n+/**\n+ * The opt-out features that are disabled for a {@link TransientService}.\n+ */\n+public enum OptOutFeature {\n+\n+    /**\n+     * Whether graceful shutdown counts the requests to the {@link TransientService} as processing requests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba15981d85c4ac4f6daf290c04e580fd433b25e"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTUyMzYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/ServiceConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTowNToyOFrOHzuKhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTowNToyOFrOHzuKhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk5NTc4Mg==", "bodyText": "Could we also add:\nThis method always returns an empty {@link Set} for a non-{@link TransientService},\nbecause only a {@link TransientService} can opt out from {@link OptOutFeature}s.", "url": "https://github.com/line/armeria/pull/3081#discussion_r523995782", "createdAt": "2020-11-16T09:05:28Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServiceConfig.java", "diffHunk": "@@ -230,6 +248,13 @@ public boolean shutdownAccessLogWriterOnStop() {\n         return shutdownAccessLogWriterOnStop;\n     }\n \n+    /**\n+     * Returns the {@link Set} of {@link OptOutFeature}s that are disabled for the {@link #service()}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba15981d85c4ac4f6daf290c04e580fd433b25e"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTUzNDMyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionServiceBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTowNzowN1rOHzuRPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTowNzowN1rOHzuRPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk5NzUwMw==", "bodyText": "Could we deduplicate this, perhaps extracting to an internal utility?\ne.g.\npublic final class MyBuilder implements TransientServiceBuilder {\n    private final OptOutFeaturesBuilder optOutFeaturesBuilder = new OptOutFeaturesBuilder();\n\n    public MyBuilder optOutFeatures(...) {\n        optOutFeaturesBuilder.add(...);\n        return this;\n    }\n\n    public MySomething build() {\n        Set<OptOutFeature> optOutFeatures = optOutFeaturesBuilder.build();\n        ...\n    }\n}", "url": "https://github.com/line/armeria/pull/3081#discussion_r523997503", "createdAt": "2020-11-16T09:07:07Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionServiceBuilder.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.metric;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.server.OptOutFeature;\n+import com.linecorp.armeria.server.TransientServiceBuilder;\n+\n+import io.prometheus.client.CollectorRegistry;\n+\n+/**\n+ * Builds a {@link PrometheusExpositionService}.\n+ */\n+public final class PrometheusExpositionServiceBuilder implements TransientServiceBuilder {\n+\n+    private final CollectorRegistry collectorRegistry;\n+\n+    @Nullable\n+    private Set<OptOutFeature> optOutFeatures;\n+\n+    PrometheusExpositionServiceBuilder(CollectorRegistry collectorRegistry) {\n+        this.collectorRegistry = requireNonNull(collectorRegistry, \"collectorRegistry\");\n+    }\n+\n+    @Override\n+    public PrometheusExpositionServiceBuilder optOutFeatures(OptOutFeature... optOutFeatures) {\n+        return optOutFeatures(ImmutableSet.copyOf(requireNonNull(optOutFeatures, \"optOutFeatures\")));\n+    }\n+\n+    @Override\n+    public PrometheusExpositionServiceBuilder optOutFeatures(Iterable<OptOutFeature> optOutFeatures) {\n+        requireNonNull(optOutFeatures, \"optOutFeatures\");\n+        if (this.optOutFeatures == null) {\n+            this.optOutFeatures = EnumSet.noneOf(OptOutFeature.class);\n+        }\n+        this.optOutFeatures.addAll(ImmutableSet.copyOf(requireNonNull(optOutFeatures, \"optOutFeatures\")));\n+        return this;\n+    }\n+\n+    /**\n+     * Returns a newly-created {@link PrometheusExpositionService} based on the properties of this builder.\n+     */\n+    public PrometheusExpositionService build() {\n+        final Set<OptOutFeature> optOutFeatures;\n+        if (this.optOutFeatures == null) {\n+            optOutFeatures = Flags.optOutFeatures();\n+        } else {\n+            optOutFeatures = ImmutableSet.copyOf(this.optOutFeatures);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba15981d85c4ac4f6daf290c04e580fd433b25e"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTEzMjQxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/OptOutFeature.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNjoyNjo0M1rOH0l_YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNjozNToyOVrOH0mLQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkxMDQzMw==", "bodyText": "HealthCheckService or LoggingService? \ud83d\ude06", "url": "https://github.com/line/armeria/pull/3081#discussion_r524910433", "createdAt": "2020-11-17T06:26:43Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/OptOutFeature.java", "diffHunk": "@@ -20,30 +20,41 @@\n import com.linecorp.armeria.server.metric.MetricCollectingService;\n \n /**\n- * The opt-out features that are disabled for a {@link TransientService}.\n+ * Specifies which features should be disabled for a {@link TransientService}.\n+ * For example, if you do:\n+ * <pre>{@code\n+ * ServerBuilder sb = Server.builder();\n+ * sb.service(\"/health\", HealthCheckService.builder() // A TransientService\n+ *                                         .optOutFeatures(OptOutFeature.GRACEFUL_SHUTDOWN,\n+ *                                                         OptOutFeature.ACCESS_LOGGING,\n+ *                                                         OptOutFeature.METRIC_COLLECTION)\n+ *                                         .build());\n+ * }</pre>\n+ * then, every feature is opted out except logging from {@link LoggingService}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12643b692be2062a63fa73be7779ce2e9f235516"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkxMzQ3Mg==", "bodyText": "Fixed. \ud83d\ude06", "url": "https://github.com/line/armeria/pull/3081#discussion_r524913472", "createdAt": "2020-11-17T06:35:29Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/OptOutFeature.java", "diffHunk": "@@ -20,30 +20,41 @@\n import com.linecorp.armeria.server.metric.MetricCollectingService;\n \n /**\n- * The opt-out features that are disabled for a {@link TransientService}.\n+ * Specifies which features should be disabled for a {@link TransientService}.\n+ * For example, if you do:\n+ * <pre>{@code\n+ * ServerBuilder sb = Server.builder();\n+ * sb.service(\"/health\", HealthCheckService.builder() // A TransientService\n+ *                                         .optOutFeatures(OptOutFeature.GRACEFUL_SHUTDOWN,\n+ *                                                         OptOutFeature.ACCESS_LOGGING,\n+ *                                                         OptOutFeature.METRIC_COLLECTION)\n+ *                                         .build());\n+ * }</pre>\n+ * then, every feature is opted out except logging from {@link LoggingService}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkxMDQzMw=="}, "originalCommit": {"oid": "12643b692be2062a63fa73be7779ce2e9f235516"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTEzNDUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/OptOutFeaturesBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNjoyNzozM1rOH0mAlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNjozMTo1NVrOH0mGOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkxMDc0MA==", "bodyText": "Maybe just build()?", "url": "https://github.com/line/armeria/pull/3081#discussion_r524910740", "createdAt": "2020-11-17T06:27:33Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/OptOutFeaturesBuilder.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.server.OptOutFeature;\n+import com.linecorp.armeria.server.TransientServiceBuilder;\n+\n+/**\n+ * A Builder for {@link OptOutFeature}.\n+ */\n+public final class OptOutFeaturesBuilder implements TransientServiceBuilder {\n+\n+    @Nullable\n+    private Set<OptOutFeature> optOutFeatures;\n+\n+    @Override\n+    public OptOutFeaturesBuilder optOutFeatures(OptOutFeature... optOutFeatures) {\n+        return optOutFeatures(ImmutableSet.copyOf(requireNonNull(optOutFeatures, \"optOutFeatures\")));\n+    }\n+\n+    @Override\n+    public OptOutFeaturesBuilder optOutFeatures(Iterable<OptOutFeature> optOutFeatures) {\n+        if (this.optOutFeatures == null) {\n+            this.optOutFeatures = EnumSet.noneOf(OptOutFeature.class);\n+        }\n+        this.optOutFeatures.addAll(ImmutableSet.copyOf(requireNonNull(optOutFeatures, \"optOutFeatures\")));\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the {@link Set} of {@link OptOutFeature}s set so far. {@link Flags#optOutFeatures()} if not set.\n+     */\n+    public Set<OptOutFeature> optOutFeatures() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12643b692be2062a63fa73be7779ce2e9f235516"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkxMjE4NA==", "bodyText": "That's a good idea. \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/3081#discussion_r524912184", "createdAt": "2020-11-17T06:31:55Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/OptOutFeaturesBuilder.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.server.OptOutFeature;\n+import com.linecorp.armeria.server.TransientServiceBuilder;\n+\n+/**\n+ * A Builder for {@link OptOutFeature}.\n+ */\n+public final class OptOutFeaturesBuilder implements TransientServiceBuilder {\n+\n+    @Nullable\n+    private Set<OptOutFeature> optOutFeatures;\n+\n+    @Override\n+    public OptOutFeaturesBuilder optOutFeatures(OptOutFeature... optOutFeatures) {\n+        return optOutFeatures(ImmutableSet.copyOf(requireNonNull(optOutFeatures, \"optOutFeatures\")));\n+    }\n+\n+    @Override\n+    public OptOutFeaturesBuilder optOutFeatures(Iterable<OptOutFeature> optOutFeatures) {\n+        if (this.optOutFeatures == null) {\n+            this.optOutFeatures = EnumSet.noneOf(OptOutFeature.class);\n+        }\n+        this.optOutFeatures.addAll(ImmutableSet.copyOf(requireNonNull(optOutFeatures, \"optOutFeatures\")));\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the {@link Set} of {@link OptOutFeature}s set so far. {@link Flags#optOutFeatures()} if not set.\n+     */\n+    public Set<OptOutFeature> optOutFeatures() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkxMDc0MA=="}, "originalCommit": {"oid": "12643b692be2062a63fa73be7779ce2e9f235516"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTk1OTU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/TransientServiceOptionsBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNjo1MTo0MlrOH2O_AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNjo1MTo0MlrOH2O_AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYzMDY1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (this.transientServiceOptions == null) {\n          \n          \n            \n                        this.transientServiceOptions = EnumSet.noneOf(TransientServiceOption.class);\n          \n          \n            \n                    }\n          \n          \n            \n                    this.transientServiceOptions.addAll(\n          \n          \n            \n                            ImmutableSet.copyOf(requireNonNull(transientServiceOptions, \"transientServiceOptions\")));\n          \n          \n            \n                    requireNonNull(transientServiceOptions, \"transientServiceOptions\");\n          \n          \n            \n                    if (this.transientServiceOptions == null) {\n          \n          \n            \n                        this.transientServiceOptions = EnumSet.noneOf(TransientServiceOption.class);\n          \n          \n            \n                    }\n          \n          \n            \n                    transientServiceOptions.forEach(this.transientServiceOptions::add);", "url": "https://github.com/line/armeria/pull/3081#discussion_r526630657", "createdAt": "2020-11-19T06:51:42Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/TransientServiceOptionsBuilder.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.server.TransientServiceBuilder;\n+import com.linecorp.armeria.server.TransientServiceOption;\n+\n+/**\n+ * A Builder for {@link TransientServiceOption}.\n+ */\n+public final class TransientServiceOptionsBuilder implements TransientServiceBuilder {\n+\n+    @Nullable\n+    private Set<TransientServiceOption> transientServiceOptions;\n+\n+    @Override\n+    public TransientServiceOptionsBuilder transientServiceOptions(\n+            TransientServiceOption... transientServiceOptions) {\n+        return transientServiceOptions(\n+                ImmutableSet.copyOf(requireNonNull(transientServiceOptions, \"transientServiceOptions\")));\n+    }\n+\n+    @Override\n+    public TransientServiceOptionsBuilder transientServiceOptions(\n+            Iterable<TransientServiceOption> transientServiceOptions) {\n+        if (this.transientServiceOptions == null) {\n+            this.transientServiceOptions = EnumSet.noneOf(TransientServiceOption.class);\n+        }\n+        this.transientServiceOptions.addAll(\n+                ImmutableSet.copyOf(requireNonNull(transientServiceOptions, \"transientServiceOptions\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a2de6400088f3e8f8f2c307171fcd9da0f13cda"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTk2MTYyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNjo1MjozNVrOH2PAQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMToyNDo1NFrOH2Y2TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYzMDk3Ng==", "bodyText": "Could we make this an immutable enum set? Otherwise, TransientServiceOptionsBuilder.build() will sometimes return an immutable enum set and sometimes not.", "url": "https://github.com/line/armeria/pull/3081#discussion_r526630976", "createdAt": "2020-11-19T06:52:35Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -372,6 +377,18 @@\n \n     private static final boolean VALIDATE_HEADERS = getBoolean(\"validateHeaders\", true);\n \n+    private static final Set<TransientServiceOption> TRANSIENT_SERVICE_OPTIONS =\n+            Streams.stream(CSV_SPLITTER.split(getNormalized(\"transientServiceOptions\", \"\", val -> {\n+                try {\n+                    Streams.stream(CSV_SPLITTER.split(val))\n+                           .forEach(feature -> TransientServiceOption.valueOf(Ascii.toUpperCase(feature)));\n+                    return true;\n+                } catch (Exception e) {\n+                    return false;\n+                }\n+            }))).map(feature -> TransientServiceOption.valueOf(Ascii.toUpperCase(feature)))\n+                   .collect(toImmutableSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a2de6400088f3e8f8f2c307171fcd9da0f13cda"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MjI2OA==", "bodyText": "That's a good suggestion. Fixed \ud83d\ude09", "url": "https://github.com/line/armeria/pull/3081#discussion_r526792268", "createdAt": "2020-11-19T11:24:54Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -372,6 +377,18 @@\n \n     private static final boolean VALIDATE_HEADERS = getBoolean(\"validateHeaders\", true);\n \n+    private static final Set<TransientServiceOption> TRANSIENT_SERVICE_OPTIONS =\n+            Streams.stream(CSV_SPLITTER.split(getNormalized(\"transientServiceOptions\", \"\", val -> {\n+                try {\n+                    Streams.stream(CSV_SPLITTER.split(val))\n+                           .forEach(feature -> TransientServiceOption.valueOf(Ascii.toUpperCase(feature)));\n+                    return true;\n+                } catch (Exception e) {\n+                    return false;\n+                }\n+            }))).map(feature -> TransientServiceOption.valueOf(Ascii.toUpperCase(feature)))\n+                   .collect(toImmutableSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYzMDk3Ng=="}, "originalCommit": {"oid": "6a2de6400088f3e8f8f2c307171fcd9da0f13cda"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTk3MDE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/TransientServiceOption.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNjo1NjoyNFrOH2PFVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNjo1NjoyNFrOH2PFVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYzMjI3OA==", "bodyText": "Ditto - use an immutable enum set.", "url": "https://github.com/line/armeria/pull/3081#discussion_r526632278", "createdAt": "2020-11-19T06:56:24Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/TransientServiceOption.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server;\n+\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.server.healthcheck.HealthCheckService;\n+import com.linecorp.armeria.server.logging.AccessLogWriter;\n+import com.linecorp.armeria.server.logging.LoggingService;\n+import com.linecorp.armeria.server.metric.MetricCollectingService;\n+\n+/**\n+ * Specifies which features should be enabled for a {@link TransientService}.\n+ * For example, if you do:\n+ * <pre>{@code\n+ * ServerBuilder sb = Server.builder();\n+ * sb.service(\"/health\", HealthCheckService.builder() // A TransientService\n+ *                                         .transientServiceOptions(\n+ *                                                 TransientServiceOption.WITH_METRIC_COLLECTION,\n+ *                                                 TransientServiceOption.WITH_ACCESS_LOGGING)\n+ *                                         .build());\n+ * }</pre>\n+ * then, the metric is collected by {@link MetricCollectingService} and access logs are produced by\n+ * {@link AccessLogWriter} for the {@link HealthCheckService}.\n+ */\n+public enum TransientServiceOption {\n+\n+    /**\n+     * Enables {@link MetricCollectingService} to collect the metrics of the requests to the\n+     * {@link TransientService}.\n+     */\n+    WITH_METRIC_COLLECTION,\n+\n+    /**\n+     * Enables {@link LoggingService} to log the requests to the {@link TransientService}.\n+     */\n+    WITH_LOGGING,\n+\n+    /**\n+     * Enables {@link AccessLogWriter} to produce the access logs of the requests to the\n+     * {@link TransientService}.\n+     */\n+    WITH_ACCESS_LOGGING;\n+\n+    private static final Set<TransientServiceOption> allOf = ImmutableSet.of(WITH_METRIC_COLLECTION,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a2de6400088f3e8f8f2c307171fcd9da0f13cda"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzA5NjU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/TransientService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTo1MDozNVrOH2Zwjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMzozMzo1NlrOH2enCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwNzE4Mg==", "bodyText": "Should we rename this to transientServiceOptions(), just in case a user wants to use the method name option, since it's fairly generic?", "url": "https://github.com/line/armeria/pull/3081#discussion_r526807182", "createdAt": "2020-11-19T11:50:35Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/TransientService.java", "diffHunk": "@@ -27,4 +30,15 @@\n  */\n @FunctionalInterface\n public interface TransientService<I extends Request, O extends Response> extends Service<I, O> {\n+\n+    /**\n+     * Returns the {@link Set} of {@link TransientServiceOption}s that are enabled for this\n+     * {@link TransientService}. This returns {@link Flags#transientServiceOptions()} if you didn't\n+     * specify any {@link TransientServiceOption}s using\n+     * {@link TransientServiceBuilder#transientServiceOptions(TransientServiceOption...)} when you create\n+     * this {@link TransientService}.\n+     */\n+    default Set<TransientServiceOption> options() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4e5e5f7e32c759a6e56db943c6b490f6077a084"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg4NjY2Nw==", "bodyText": "No objection. \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/3081#discussion_r526886667", "createdAt": "2020-11-19T13:33:56Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/TransientService.java", "diffHunk": "@@ -27,4 +30,15 @@\n  */\n @FunctionalInterface\n public interface TransientService<I extends Request, O extends Response> extends Service<I, O> {\n+\n+    /**\n+     * Returns the {@link Set} of {@link TransientServiceOption}s that are enabled for this\n+     * {@link TransientService}. This returns {@link Flags#transientServiceOptions()} if you didn't\n+     * specify any {@link TransientServiceOption}s using\n+     * {@link TransientServiceBuilder#transientServiceOptions(TransientServiceOption...)} when you create\n+     * this {@link TransientService}.\n+     */\n+    default Set<TransientServiceOption> options() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwNzE4Mg=="}, "originalCommit": {"oid": "b4e5e5f7e32c759a6e56db943c6b490f6077a084"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzA5OTYwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/TransientServiceOption.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTo1MToyN1rOH2ZycQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMzozMzo0N1rOH2emNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwNzY2NQ==", "bodyText": "Would WITH_SERVICE_LOGGING be better? \ud83e\udd14", "url": "https://github.com/line/armeria/pull/3081#discussion_r526807665", "createdAt": "2020-11-19T11:51:27Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/TransientServiceOption.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server;\n+\n+import java.util.Set;\n+\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.server.healthcheck.HealthCheckService;\n+import com.linecorp.armeria.server.logging.AccessLogWriter;\n+import com.linecorp.armeria.server.logging.LoggingService;\n+import com.linecorp.armeria.server.metric.MetricCollectingService;\n+\n+/**\n+ * Specifies which features should be enabled for a {@link TransientService}.\n+ * For example, if you do:\n+ * <pre>{@code\n+ * ServerBuilder sb = Server.builder();\n+ * sb.service(\"/health\", HealthCheckService.builder() // A TransientService\n+ *                                         .transientServiceOptions(\n+ *                                                 TransientServiceOption.WITH_METRIC_COLLECTION,\n+ *                                                 TransientServiceOption.WITH_ACCESS_LOGGING)\n+ *                                         .build());\n+ * }</pre>\n+ * then, the metric is collected by {@link MetricCollectingService} and access logs are produced by\n+ * {@link AccessLogWriter} for the {@link HealthCheckService}.\n+ */\n+public enum TransientServiceOption {\n+\n+    /**\n+     * Enables {@link MetricCollectingService} to collect the metrics of the requests to the\n+     * {@link TransientService}.\n+     */\n+    WITH_METRIC_COLLECTION,\n+\n+    /**\n+     * Enables {@link LoggingService} to log the requests to the {@link TransientService}.\n+     */\n+    WITH_LOGGING,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4e5e5f7e32c759a6e56db943c6b490f6077a084"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg4NjQ1Mg==", "bodyText": "That's better. \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/3081#discussion_r526886452", "createdAt": "2020-11-19T13:33:47Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/TransientServiceOption.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server;\n+\n+import java.util.Set;\n+\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.server.healthcheck.HealthCheckService;\n+import com.linecorp.armeria.server.logging.AccessLogWriter;\n+import com.linecorp.armeria.server.logging.LoggingService;\n+import com.linecorp.armeria.server.metric.MetricCollectingService;\n+\n+/**\n+ * Specifies which features should be enabled for a {@link TransientService}.\n+ * For example, if you do:\n+ * <pre>{@code\n+ * ServerBuilder sb = Server.builder();\n+ * sb.service(\"/health\", HealthCheckService.builder() // A TransientService\n+ *                                         .transientServiceOptions(\n+ *                                                 TransientServiceOption.WITH_METRIC_COLLECTION,\n+ *                                                 TransientServiceOption.WITH_ACCESS_LOGGING)\n+ *                                         .build());\n+ * }</pre>\n+ * then, the metric is collected by {@link MetricCollectingService} and access logs are produced by\n+ * {@link AccessLogWriter} for the {@link HealthCheckService}.\n+ */\n+public enum TransientServiceOption {\n+\n+    /**\n+     * Enables {@link MetricCollectingService} to collect the metrics of the requests to the\n+     * {@link TransientService}.\n+     */\n+    WITH_METRIC_COLLECTION,\n+\n+    /**\n+     * Enables {@link LoggingService} to log the requests to the {@link TransientService}.\n+     */\n+    WITH_LOGGING,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwNzY2NQ=="}, "originalCommit": {"oid": "b4e5e5f7e32c759a6e56db943c6b490f6077a084"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1908, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}