{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNzY0OTM2", "number": 2610, "title": "Provide a way to customize context propagation using its own storage", "bodyText": "Motivation:\nRelated #2375 (comment)\nIt will be good if we provide a way to customize the context storage so that a user can do the scope management by him/herself.\nModifications:\n\nAdd RequestContextStorage.\nAdd RequestContextStorageProvier so that a user customizes the ContextStorage using Java SPI\n\nResult:\n\nYou can, now, create your own storage to store RequestContext.\nClose #2514", "createdAt": "2020-03-19T02:39:58Z", "url": "https://github.com/line/armeria/pull/2610", "merged": true, "mergeCommit": {"oid": "b297e73f968e7e36350c66c0cefbf5148560b278"}, "closed": true, "closedAt": "2020-03-25T01:06:20Z", "author": {"login": "minwoox"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPCli9AH2gAyMzkwNzY0OTM2OjU0ODhlZDAxNzRmYWQzOGNiYzRlNTcxNzE1NTUxNWU3ODlkNTU0Mzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQUwfOAH2gAyMzkwNzY0OTM2OmNjZjQyN2E0YmM5NmY4YTAyNWZlY2I5M2I0NzM4Y2QyOWYzOTdkZmQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5488ed0174fad38cbc4e5717155515e789d55438", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/5488ed0174fad38cbc4e5717155515e789d55438", "committedDate": "2020-03-19T02:35:46Z", "message": "Provide a way to customize context propagation using its own storage\nMotivation:\n\nModifications:\n- Add `ContextStorage` and its default implementation `ContextStorageThreadLocal`.\n- Add `ContextStorageProvier` so that a user customizes the `ContextStorage` using Java SPI\n\nResult:"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3Mzk0NTQ4", "url": "https://github.com/line/armeria/pull/2610#pullrequestreview-377394548", "createdAt": "2020-03-19T03:09:38Z", "commit": {"oid": "5488ed0174fad38cbc4e5717155515e789d55438"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMzowOTozOFrOF4eo5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMzoyNzo0NVrOF4e4WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2NjU2Ng==", "bodyText": "Asserts are often disabled, it's better to make it more explicit I think - can add an init method and call it in a static initializer instead.", "url": "https://github.com/line/armeria/pull/2610#discussion_r394766566", "createdAt": "2020-03-19T03:09:38Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -560,6 +561,8 @@ private ClientFactoryOptions buildOptions() {\n      * Returns a newly-created {@link ClientFactory} based on the properties of this builder.\n      */\n     public ClientFactory build() {\n+        // To initialize the context storage when the factory is built not the first request is sent.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5488ed0174fad38cbc4e5717155515e789d55438"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2NjkyMQ==", "bodyText": "Not sure if it's better but RequestContextUtil could still expose the same static API as before without returning ContextStorage", "url": "https://github.com/line/armeria/pull/2610#discussion_r394766921", "createdAt": "2020-03-19T03:11:18Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java", "diffHunk": "@@ -322,24 +323,25 @@ static ClientRequestContextBuilder builder(RpcRequest request, URI uri) {\n      */\n     @Override\n     default SafeCloseable push() {\n-        final RequestContext oldCtx = RequestContextThreadLocal.getAndSet(this);\n+        final ContextStorage contextStorage = RequestContextUtil.storage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5488ed0174fad38cbc4e5717155515e789d55438"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2NzgzOA==", "bodyText": "Think this is fine as is but for reference I notice grpc accepts a reference to the current context as well, maybe it helps catch bugs.\nhttps://grpc.github.io/grpc-java/javadoc/io/grpc/Context.Storage.html#detach-io.grpc.Context-io.grpc.Context-", "url": "https://github.com/line/armeria/pull/2610#discussion_r394767838", "createdAt": "2020-03-19T03:15:21Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/ContextStorage.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+/**\n+ * Storage.\n+ */\n+@UnstableApi\n+public interface ContextStorage {\n+\n+    /**\n+     * Push.\n+     */\n+    @Nullable\n+    <T extends RequestContext> T push(RequestContext toPush);\n+\n+    /**\n+     * Pop.\n+     */\n+    void pop(@Nullable RequestContext toRestore);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5488ed0174fad38cbc4e5717155515e789d55438"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2ODAxMA==", "bodyText": "Usually type of implementation is an adjective so ThreadLocalContextStorage", "url": "https://github.com/line/armeria/pull/2610#discussion_r394768010", "createdAt": "2020-03-19T03:16:08Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/ContextStorageThreadLocal.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+import io.netty.util.concurrent.FastThreadLocal;\n+import io.netty.util.internal.InternalThreadLocalMap;\n+\n+/**\n+ * A {@link ContextStorage} that uses thread-local to store {@link RequestContext}.\n+ * Override this.\n+ */\n+@UnstableApi\n+public class ContextStorageThreadLocal implements ContextStorage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5488ed0174fad38cbc4e5717155515e789d55438"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2ODQyNg==", "bodyText": "Instead of exposing this class let's return it from static ContextStorage ofDefault(). A user can hook by implementing a storage that delegates to the default.", "url": "https://github.com/line/armeria/pull/2610#discussion_r394768426", "createdAt": "2020-03-19T03:18:12Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/ContextStorageThreadLocal.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+import io.netty.util.concurrent.FastThreadLocal;\n+import io.netty.util.internal.InternalThreadLocalMap;\n+\n+/**\n+ * A {@link ContextStorage} that uses thread-local to store {@link RequestContext}.\n+ * Override this.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5488ed0174fad38cbc4e5717155515e789d55438"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2OTM0OA==", "bodyText": "ImmutableList.copyOf", "url": "https://github.com/line/armeria/pull/2610#discussion_r394769348", "createdAt": "2020-03-19T03:22:15Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java", "diffHunk": "@@ -48,13 +55,45 @@\n     private static final Set<Thread> REPORTED_THREADS =\n             Collections.newSetFromMap(new MapMaker().weakKeys().makeMap());\n \n+    private static final ContextStorage contextStorage;\n+\n+    static {\n+        final List<ContextStorageProvider> providers = Streams.stream(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5488ed0174fad38cbc4e5717155515e789d55438"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2OTYwNA==", "bodyText": "I think it's helpful to have a flag to to set the desired implementation class name to help with this situation without needing to hack with the jar", "url": "https://github.com/line/armeria/pull/2610#discussion_r394769604", "createdAt": "2020-03-19T03:23:19Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java", "diffHunk": "@@ -48,13 +55,45 @@\n     private static final Set<Thread> REPORTED_THREADS =\n             Collections.newSetFromMap(new MapMaker().weakKeys().makeMap());\n \n+    private static final ContextStorage contextStorage;\n+\n+    static {\n+        final List<ContextStorageProvider> providers = Streams.stream(\n+                ServiceLoader.load(ContextStorageProvider.class)).collect(toImmutableList());\n+\n+        if (providers.isEmpty()) {\n+            contextStorage = new ContextStorageThreadLocal();\n+        } else {\n+            final ContextStorageProvider provider = providers.get(0);\n+            if (providers.size() > 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5488ed0174fad38cbc4e5717155515e789d55438"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc3MDE3NQ==", "bodyText": "Actually maybe it's fine to crash instead of warn too since it's so dangerous to use a wrong storage.", "url": "https://github.com/line/armeria/pull/2610#discussion_r394770175", "createdAt": "2020-03-19T03:26:11Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java", "diffHunk": "@@ -48,13 +55,45 @@\n     private static final Set<Thread> REPORTED_THREADS =\n             Collections.newSetFromMap(new MapMaker().weakKeys().makeMap());\n \n+    private static final ContextStorage contextStorage;\n+\n+    static {\n+        final List<ContextStorageProvider> providers = Streams.stream(\n+                ServiceLoader.load(ContextStorageProvider.class)).collect(toImmutableList());\n+\n+        if (providers.isEmpty()) {\n+            contextStorage = new ContextStorageThreadLocal();\n+        } else {\n+            final ContextStorageProvider provider = providers.get(0);\n+            if (providers.size() > 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2OTYwNA=="}, "originalCommit": {"oid": "5488ed0174fad38cbc4e5717155515e789d55438"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc3MDUyMA==", "bodyText": "Think it's better to crash than fallback. As long as there is a flag to set the storage class (so could set it to default if really desired) it seems safer than a possibly ignored warning.", "url": "https://github.com/line/armeria/pull/2610#discussion_r394770520", "createdAt": "2020-03-19T03:27:45Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java", "diffHunk": "@@ -48,13 +55,45 @@\n     private static final Set<Thread> REPORTED_THREADS =\n             Collections.newSetFromMap(new MapMaker().weakKeys().makeMap());\n \n+    private static final ContextStorage contextStorage;\n+\n+    static {\n+        final List<ContextStorageProvider> providers = Streams.stream(\n+                ServiceLoader.load(ContextStorageProvider.class)).collect(toImmutableList());\n+\n+        if (providers.isEmpty()) {\n+            contextStorage = new ContextStorageThreadLocal();\n+        } else {\n+            final ContextStorageProvider provider = providers.get(0);\n+            if (providers.size() > 1) {\n+                logger.warn(\"Found more than one {}. Only the first provider is used: {}, providers: {}\",\n+                            ContextStorageProvider.class.getSimpleName(), provider, providers);\n+            }\n+            ContextStorage temp;\n+            try {\n+                temp = provider.newContextStorage();\n+            } catch (Throwable t) {\n+                logger.warn(\"Failed to create context storage. provider: {}\", provider, t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5488ed0174fad38cbc4e5717155515e789d55438"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NDI4MTY2", "url": "https://github.com/line/armeria/pull/2610#pullrequestreview-377428166", "createdAt": "2020-03-19T05:10:42Z", "commit": {"oid": "5488ed0174fad38cbc4e5717155515e789d55438"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNToxMDo0M1rOF4gUrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNToxMDo0M1rOF4gUrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NDE1OQ==", "bodyText": "assert -> explicit initialization call", "url": "https://github.com/line/armeria/pull/2610#discussion_r394794159", "createdAt": "2020-03-19T05:10:43Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java", "diffHunk": "@@ -1476,6 +1477,8 @@ public Server build() {\n                 enableServerHeader, enableDateHeader, requestIdGenerator), sslContexts);\n \n         serverListeners.forEach(server::addListener);\n+        // To initialize the context storage at the server start time not when the first request is received.\n+        assert RequestContextUtil.storage() != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5488ed0174fad38cbc4e5717155515e789d55438"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9c59b6f858b65563a2f86856999cf911c919886", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/b9c59b6f858b65563a2f86856999cf911c919886", "committedDate": "2020-03-19T07:59:05Z", "message": "Address comments by @anuraaga and @trustin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1897d23ede0573e80a7545f4e0413c7c048d210e", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/1897d23ede0573e80a7545f4e0413c7c048d210e", "committedDate": "2020-03-19T07:58:13Z", "message": "Address comments by @anuraaga and @trustin"}, "afterCommit": {"oid": "b9c59b6f858b65563a2f86856999cf911c919886", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/b9c59b6f858b65563a2f86856999cf911c919886", "committedDate": "2020-03-19T07:59:05Z", "message": "Address comments by @anuraaga and @trustin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34728111e05bddd1cc024200642fb94caaebe076", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/34728111e05bddd1cc024200642fb94caaebe076", "committedDate": "2020-03-19T08:01:43Z", "message": "Remove useless method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NTM1NDU4", "url": "https://github.com/line/armeria/pull/2610#pullrequestreview-377535458", "createdAt": "2020-03-19T09:09:43Z", "commit": {"oid": "34728111e05bddd1cc024200642fb94caaebe076"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOTowOTo0M1rOF4lnhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOToxMzoyOFrOF4lv4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4MDkwMw==", "bodyText": "I'd put this in a static block in this class instead of here. Mostly same affect but clearer it's a one-time initialization", "url": "https://github.com/line/armeria/pull/2610#discussion_r394880903", "createdAt": "2020-03-19T09:09:43Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -560,6 +561,7 @@ private ClientFactoryOptions buildOptions() {\n      * Returns a newly-created {@link ClientFactory} based on the properties of this builder.\n      */\n     public ClientFactory build() {\n+        RequestContextUtil.init();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34728111e05bddd1cc024200642fb94caaebe076"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4MzA0Mg==", "bodyText": "Ah I was thinking instead of loading directly from the flag, we'd use the flag to disambiguate among the different providers in this case. I guess we can do both though", "url": "https://github.com/line/armeria/pull/2610#discussion_r394883042", "createdAt": "2020-03-19T09:13:28Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java", "diffHunk": "@@ -48,6 +58,57 @@\n     private static final Set<Thread> REPORTED_THREADS =\n             Collections.newSetFromMap(new MapMaker().weakKeys().makeMap());\n \n+    /**\n+     * The default {@link ContextStorage} which stores the {@link RequestContext} in {@link FastThreadLocal}.\n+     */\n+    public static final ContextStorage defaultContextStorage = new ThreadLocalContextStorage();\n+\n+    private static final ContextStorage contextStorage;\n+\n+    static {\n+        final List<ContextStorageProvider> providers = ImmutableList.copyOf(\n+                ServiceLoader.load(ContextStorageProvider.class));\n+        final String contextStorageFqcn = Flags.contextStorage();\n+        if (!providers.isEmpty()) {\n+            if (providers.size() > 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34728111e05bddd1cc024200642fb94caaebe076"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NTM2NTUy", "url": "https://github.com/line/armeria/pull/2610#pullrequestreview-377536552", "createdAt": "2020-03-19T09:11:13Z", "commit": {"oid": "34728111e05bddd1cc024200642fb94caaebe076"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOToxMToxM1rOF4lqzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOToxOTowMVrOF4l8MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4MTc0Mw==", "bodyText": "Should this be RequestContextStorage?", "url": "https://github.com/line/armeria/pull/2610#discussion_r394881743", "createdAt": "2020-03-19T09:11:13Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/ContextStorage.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.internal.common.RequestContextUtil.defaultContextStorage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+/**\n+ * The storage for storing {@link RequestContext}.\n+ *\n+ * <p>If you want to implement your own storage or add some hooks when a {@link RequestContext} is pushed\n+ * and popped, you should use {@link ContextStorageProvider} or {@link Flags#contextStorage()}.\n+ * Here's an example that sets MDC before {@link RequestContext} is pushed:\n+ *\n+ * <pre>{@code\n+ * > public class MyStorage implements ContextStorageProvider {\n+ * >     @Override\n+ * >     public ContextStorage newContextStorage() {\n+ * >         ContextStorage storage = ContextStorage.ofDefault();\n+ * >         return new ContextStorage() {\n+ * >\n+ * >             @Nullable\n+ * >             @Override\n+ * >             @SuppressWarnings(\"unchecked\")\n+ * >             public <T extends RequestContext> T push(RequestContext toPush) {\n+ * >                 setMDC(...); // using toPush\n+ * >                 return storage.push(toPush);\n+ * >             }\n+ * >\n+ * >             @Override\n+ * >             public void pop(RequestContext current, @Nullable RequestContext toRestore) {\n+ * >                 if (toRestore != null) {\n+ * >                     setMDC(...); // using toRestore\n+ * >                 }\n+ * >                 storage.pop(current, toRestore);\n+ * >             }\n+ * >             ...\n+ * >      }\n+ * > }\n+ * }</pre>\n+ */\n+@UnstableApi\n+public interface ContextStorage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34728111e05bddd1cc024200642fb94caaebe076"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4MjUyMg==", "bodyText": "Maybe threadLocal(), because the default storage changes based on flag/SPI?", "url": "https://github.com/line/armeria/pull/2610#discussion_r394882522", "createdAt": "2020-03-19T09:12:35Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/ContextStorage.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.internal.common.RequestContextUtil.defaultContextStorage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+/**\n+ * The storage for storing {@link RequestContext}.\n+ *\n+ * <p>If you want to implement your own storage or add some hooks when a {@link RequestContext} is pushed\n+ * and popped, you should use {@link ContextStorageProvider} or {@link Flags#contextStorage()}.\n+ * Here's an example that sets MDC before {@link RequestContext} is pushed:\n+ *\n+ * <pre>{@code\n+ * > public class MyStorage implements ContextStorageProvider {\n+ * >     @Override\n+ * >     public ContextStorage newContextStorage() {\n+ * >         ContextStorage storage = ContextStorage.ofDefault();\n+ * >         return new ContextStorage() {\n+ * >\n+ * >             @Nullable\n+ * >             @Override\n+ * >             @SuppressWarnings(\"unchecked\")\n+ * >             public <T extends RequestContext> T push(RequestContext toPush) {\n+ * >                 setMDC(...); // using toPush\n+ * >                 return storage.push(toPush);\n+ * >             }\n+ * >\n+ * >             @Override\n+ * >             public void pop(RequestContext current, @Nullable RequestContext toRestore) {\n+ * >                 if (toRestore != null) {\n+ * >                     setMDC(...); // using toRestore\n+ * >                 }\n+ * >                 storage.pop(current, toRestore);\n+ * >             }\n+ * >             ...\n+ * >      }\n+ * > }\n+ * }</pre>\n+ */\n+@UnstableApi\n+public interface ContextStorage {\n+\n+    /**\n+     * Returns the default {@link ContextStorage} which stores the {@link RequestContext} in the thread-local.\n+     */\n+    static ContextStorage ofDefault() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34728111e05bddd1cc024200642fb94caaebe076"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4MzQyNQ==", "bodyText": "Shouldn't we always prefer what's specified in the flag? How about also logging the actual storage provider type?", "url": "https://github.com/line/armeria/pull/2610#discussion_r394883425", "createdAt": "2020-03-19T09:14:06Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java", "diffHunk": "@@ -48,6 +58,57 @@\n     private static final Set<Thread> REPORTED_THREADS =\n             Collections.newSetFromMap(new MapMaker().weakKeys().makeMap());\n \n+    /**\n+     * The default {@link ContextStorage} which stores the {@link RequestContext} in {@link FastThreadLocal}.\n+     */\n+    public static final ContextStorage defaultContextStorage = new ThreadLocalContextStorage();\n+\n+    private static final ContextStorage contextStorage;\n+\n+    static {\n+        final List<ContextStorageProvider> providers = ImmutableList.copyOf(\n+                ServiceLoader.load(ContextStorageProvider.class));\n+        final String contextStorageFqcn = Flags.contextStorage();\n+        if (!providers.isEmpty()) {\n+            if (providers.size() > 1) {\n+                throw new IllegalStateException(\"Found more than one \" +\n+                                                ContextStorageProvider.class.getSimpleName() + \". providers:\" +\n+                                                providers);\n+            }\n+\n+            final ContextStorageProvider provider = providers.get(0);\n+            if (!contextStorageFqcn.isEmpty()) {\n+                throw new IllegalStateException(\"Found \" + provider + \" and \" + contextStorageFqcn +\n+                                                \". Which one do you want to use?\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34728111e05bddd1cc024200642fb94caaebe076"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4NDAyMQ==", "bodyText": "final?", "url": "https://github.com/line/armeria/pull/2610#discussion_r394884021", "createdAt": "2020-03-19T09:15:12Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/ThreadLocalContextStorage.java", "diffHunk": "@@ -16,67 +16,46 @@\n \n package com.linecorp.armeria.internal.common;\n \n+import static com.linecorp.armeria.internal.common.RequestContextUtil.newIllegalContextPoppingException;\n import static java.util.Objects.requireNonNull;\n \n import javax.annotation.Nullable;\n \n+import com.linecorp.armeria.common.ContextStorage;\n import com.linecorp.armeria.common.RequestContext;\n \n import io.netty.util.concurrent.FastThreadLocal;\n import io.netty.util.internal.InternalThreadLocalMap;\n \n-public final class RequestContextThreadLocal {\n+class ThreadLocalContextStorage implements ContextStorage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34728111e05bddd1cc024200642fb94caaebe076"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4NjE5Mg==", "bodyText": "implementation", "url": "https://github.com/line/armeria/pull/2610#discussion_r394886192", "createdAt": "2020-03-19T09:19:01Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -414,6 +416,18 @@ public static boolean verboseResponses() {\n         return VERBOSE_RESPONSES;\n     }\n \n+    /**\n+     * Returns the fully qualified class name of {@link ContextStorage}.\n+     *\n+     * <p>The default value of this flag is an empty string, which means {@link ContextStorage#ofDefault()}\n+     * is used. Specify the {@code -Dcom.linecorp.armeria.contextStorage=<FQCN>} JVM option where\n+     * {@code FQCN} is the impletation of {@link ContextStorage} (e.g. {@code com.mycom.CustomContextStorage})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34728111e05bddd1cc024200642fb94caaebe076"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf3dd190f01b0e18244a445f8ea83fa41f333d9b", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/cf3dd190f01b0e18244a445f8ea83fa41f333d9b", "committedDate": "2020-03-19T12:52:14Z", "message": "Address comment by @anuraaga and @trustin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10dab886555d3aa97434cafcf2a986403f010307", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/10dab886555d3aa97434cafcf2a986403f010307", "committedDate": "2020-03-19T12:55:42Z", "message": "Fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "530e2d584b2f4a6c14943648b92248ffca81d2ca", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/530e2d584b2f4a6c14943648b92248ffca81d2ca", "committedDate": "2020-03-19T12:59:59Z", "message": "Fix 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fd12e5c21031b8d7ed7f2694748aa872e19a3a1", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/9fd12e5c21031b8d7ed7f2694748aa872e19a3a1", "committedDate": "2020-03-19T13:15:10Z", "message": "Address the comment by @trustin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NzIxMDMz", "url": "https://github.com/line/armeria/pull/2610#pullrequestreview-377721033", "createdAt": "2020-03-19T13:32:52Z", "commit": {"oid": "9fd12e5c21031b8d7ed7f2694748aa872e19a3a1"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzozMjo1M1rOF4uhPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzozNjoyMVrOF4uqLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyNjc1MQ==", "bodyText": "I think ThreadLocalContextStorage could be moved to this package to avoid importing / exposing", "url": "https://github.com/line/armeria/pull/2610#discussion_r395026751", "createdAt": "2020-03-19T13:32:53Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/RequestContextStorage.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.internal.common.RequestContextUtil.threadLocalRequestContextStorage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd12e5c21031b8d7ed7f2694748aa872e19a3a1"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyOTAzNw==", "bodyText": "Think you can optimize a but getting the map for both get / set like above.", "url": "https://github.com/line/armeria/pull/2610#discussion_r395029037", "createdAt": "2020-03-19T13:36:21Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/ThreadLocalRequestContextStorage.java", "diffHunk": "@@ -16,67 +16,46 @@\n \n package com.linecorp.armeria.internal.common;\n \n+import static com.linecorp.armeria.internal.common.RequestContextUtil.newIllegalContextPoppingException;\n import static java.util.Objects.requireNonNull;\n \n import javax.annotation.Nullable;\n \n import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.RequestContextStorage;\n \n import io.netty.util.concurrent.FastThreadLocal;\n import io.netty.util.internal.InternalThreadLocalMap;\n \n-public final class RequestContextThreadLocal {\n+final class ThreadLocalRequestContextStorage implements RequestContextStorage {\n \n     private static final FastThreadLocal<RequestContext> context = new FastThreadLocal<>();\n \n-    /**\n-     * Returns the current {@link RequestContext} in the thread-local.\n-     */\n     @Nullable\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n-    public static <T extends RequestContext> T get() {\n-        return (T) context.get();\n-    }\n-\n-    /**\n-     * Sets the specified {@link RequestContext} in the thread-local and returns the old {@link RequestContext}.\n-     */\n-    @Nullable\n-    @SuppressWarnings(\"unchecked\")\n-    public static <T extends RequestContext> T getAndSet(RequestContext ctx) {\n-        requireNonNull(ctx, \"ctx\");\n-        final InternalThreadLocalMap map = InternalThreadLocalMap.get();\n-        final RequestContext oldCtx = context.get(map);\n-        context.set(map, ctx);\n-        return (T) oldCtx;\n-    }\n-\n-    /**\n-     * Removes the {@link RequestContext} in the thread-local and returns it.\n-     */\n-    @Nullable\n-    @SuppressWarnings(\"unchecked\")\n-    public static <T extends RequestContext> T getAndRemove() {\n+    public <T extends RequestContext> T push(RequestContext toPush) {\n+        requireNonNull(toPush, \"toPush\");\n         final InternalThreadLocalMap map = InternalThreadLocalMap.get();\n         final RequestContext oldCtx = context.get(map);\n-        context.remove();\n+        context.set(map, toPush);\n         return (T) oldCtx;\n     }\n \n-    /**\n-     * Sets the specified {@link RequestContext} in the thread-local.\n-     */\n-    public static void set(RequestContext ctx) {\n-        requireNonNull(ctx, \"ctx\");\n-        context.set(ctx);\n+    @Override\n+    public void pop(RequestContext current, @Nullable RequestContext toRestore) {\n+        requireNonNull(current, \"current\");\n+        final RequestContext contextInThreadLocal = context.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd12e5c21031b8d7ed7f2694748aa872e19a3a1"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3ODQ5ODkw", "url": "https://github.com/line/armeria/pull/2610#pullrequestreview-377849890", "createdAt": "2020-03-19T15:46:57Z", "commit": {"oid": "9fd12e5c21031b8d7ed7f2694748aa872e19a3a1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTo0Njo1N1rOF40rEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTo1MDo0MlrOF4015w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyNzU3MA==", "bodyText": "I wonder if returning null makes more sense when no provider is specified.", "url": "https://github.com/line/armeria/pull/2610#discussion_r395127570", "createdAt": "2020-03-19T15:46:57Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -414,6 +417,19 @@ public static boolean verboseResponses() {\n         return VERBOSE_RESPONSES;\n     }\n \n+    /**\n+     * Returns the fully qualified class name of {@link RequestContextStorageProvider} that is used to choose\n+     * when multiple {@link RequestContextStorageProvider}s exist.\n+     *\n+     * <p>The default value of this flag is an empty string, which means only one\n+     * {@link RequestContextStorageProvider} must be found via Java SPI. If there are more than one,\n+     * specify the {@code -Dcom.linecorp.armeria.requestContextStorageProvider=<FQCN>} JVM option to\n+     * choose the {@link RequestContextStorageProvider}.\n+     */\n+    public static String requestContextStorageProvider() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd12e5c21031b8d7ed7f2694748aa872e19a3a1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEzMDM0Mw==", "bodyText": "Could you log the type of the provider in this branch, so that what custom provider was chosen? For other branches, Flag will log.", "url": "https://github.com/line/armeria/pull/2610#discussion_r395130343", "createdAt": "2020-03-19T15:50:42Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java", "diffHunk": "@@ -48,6 +58,66 @@\n     private static final Set<Thread> REPORTED_THREADS =\n             Collections.newSetFromMap(new MapMaker().weakKeys().makeMap());\n \n+    /**\n+     * The default {@link RequestContextStorage} which stores the {@link RequestContext} in\n+     * {@link FastThreadLocal}.\n+     */\n+    public static final RequestContextStorage\n+            threadLocalRequestContextStorage = new ThreadLocalRequestContextStorage();\n+\n+    private static final RequestContextStorage requestContextStorage;\n+\n+    static {\n+        final List<RequestContextStorageProvider> providers = ImmutableList.copyOf(\n+                ServiceLoader.load(RequestContextStorageProvider.class));\n+        final String providerFqcn = Flags.requestContextStorageProvider();\n+        if (!providers.isEmpty()) {\n+\n+            RequestContextStorageProvider provider = null;\n+            if (providers.size() > 1) {\n+                if (providerFqcn.isEmpty()) {\n+                    throw new IllegalStateException(\n+                            \"Found more than one \" + RequestContextStorageProvider.class.getSimpleName() +\n+                            \". You must specify -Dcom.linecorp.armeria.requestContextStorageProvider=<FQCN>.\" +\n+                            \" providers: \" + providers);\n+                }\n+\n+                for (RequestContextStorageProvider candidate : providers) {\n+                    if (candidate.getClass().getName().equals(providerFqcn)) {\n+                        if (provider != null) {\n+                            throw new IllegalStateException(\n+                                    providerFqcn + \" matches more than one \" +\n+                                    RequestContextStorageProvider.class.getSimpleName() + \". providers: \" +\n+                                    providers);\n+                        } else {\n+                            provider = candidate;\n+                        }\n+                    }\n+                }\n+                if (provider == null) {\n+                    throw new IllegalStateException(\n+                            providerFqcn + \" does not match any \" +\n+                            RequestContextStorageProvider.class.getSimpleName() + \". providers: \" + providers);\n+                }\n+            } else {\n+                provider = providers.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd12e5c21031b8d7ed7f2694748aa872e19a3a1"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f57707179085a02c7bc66a5c03e959e83624d26", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/1f57707179085a02c7bc66a5c03e959e83624d26", "committedDate": "2020-03-20T05:34:55Z", "message": "Address comments by @anuraaga and @trustin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MjUwOTkw", "url": "https://github.com/line/armeria/pull/2610#pullrequestreview-378250990", "createdAt": "2020-03-20T06:19:41Z", "commit": {"oid": "1f57707179085a02c7bc66a5c03e959e83624d26"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNjoxOTo0MlrOF5ImNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNjoxOTo0MlrOF5ImNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1NDAwNQ==", "bodyText": "How about renaming this pop to replace? Because It is hart to predict the behavior when I saw pop method with arguments.\nrequestContextStorage.pop(current, toRestore)\nHowever when I think this method name is replace, then I can understand the effect of the API.\nrequestContextStorage.replace(current, toRestore)", "url": "https://github.com/line/armeria/pull/2610#discussion_r395454005", "createdAt": "2020-03-20T06:19:42Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java", "diffHunk": "@@ -74,21 +138,69 @@ public static IllegalStateException newIllegalContextPushingException(\n     }\n \n     /**\n-     * Removes the {@link RequestContext} in the thread-local if exists and returns {@link SafeCloseable} which\n-     * pushes the {@link RequestContext} back to the thread-local.\n+     * Returns an {@link IllegalStateException} which is raised when popping a context from\n+     * the unexpected thread or forgetting to close the previous context.\n+     */\n+    public static IllegalStateException newIllegalContextPoppingException(\n+            RequestContext currentCtx, RequestContext contextInStorage) {\n+        requireNonNull(currentCtx, \"currentCtx\");\n+        requireNonNull(contextInStorage, \"contextInStorage\");\n+        final IllegalStateException ex = new IllegalStateException(\n+                \"The currentCtx \" + currentCtx + \" is not the same as the context in the storage: \" +\n+                contextInStorage + \". This means the callback was called from \" +\n+                \"unexpected thread or forgetting to close previous context.\");\n+        if (REPORTED_THREADS.add(Thread.currentThread())) {\n+            logger.warn(\"An error occurred while popping a context\", ex);\n+        }\n+        return ex;\n+    }\n+\n+    /**\n+     * Returns the current {@link RequestContext} in the {@link RequestContextStorage}.\n+     */\n+    @Nullable\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T extends RequestContext> T get() {\n+        return (T) requestContextStorage.currentOrNull();\n+    }\n+\n+    /**\n+     * Sets the specified {@link RequestContext} in the {@link RequestContextStorage} and\n+     * returns the old {@link RequestContext}.\n+     */\n+    @Nullable\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T extends RequestContext> T getAndSet(RequestContext ctx) {\n+        requireNonNull(ctx, \"ctx\");\n+        return (T) requestContextStorage.push(ctx);\n+    }\n+\n+    /**\n+     * Removes the {@link RequestContext} in the {@link RequestContextStorage} if exists and returns\n+     * {@link SafeCloseable} which pushes the {@link RequestContext} back to the {@link RequestContextStorage}.\n      *\n      * <p>Because this method pops the {@link RequestContext} arbitrarily, it shouldn't be used in\n      * most cases. One of the examples this can be used is in {@link ChannelFutureListener}.\n      * The {@link ChannelFuture} can be complete when the eventloop handles the different request. The\n-     * eventloop might have the wrong {@link RequestContext} in the thread-local, so we should pop it.\n+     * eventloop might have the wrong {@link RequestContext} in the {@link RequestContextStorage},\n+     * so we should pop it.\n      */\n     public static SafeCloseable pop() {\n-        final RequestContext oldCtx = RequestContextThreadLocal.getAndRemove();\n+        final RequestContext oldCtx = requestContextStorage.currentOrNull();\n         if (oldCtx == null) {\n             return noopSafeCloseable();\n         }\n \n-        return () -> RequestContextThreadLocal.set(oldCtx);\n+        pop(oldCtx, null);\n+        return () -> requestContextStorage.push(oldCtx);\n+    }\n+\n+    /**\n+     * Pops the current {@link RequestContext} in the storage and pushes back the specified {@code toRestore}.\n+     */\n+    public static void pop(RequestContext current, @Nullable RequestContext toRestore) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f57707179085a02c7bc66a5c03e959e83624d26"}, "originalPosition": 155}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MjY5MTEx", "url": "https://github.com/line/armeria/pull/2610#pullrequestreview-378269111", "createdAt": "2020-03-20T07:22:05Z", "commit": {"oid": "1f57707179085a02c7bc66a5c03e959e83624d26"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MjcxNDQw", "url": "https://github.com/line/armeria/pull/2610#pullrequestreview-378271440", "createdAt": "2020-03-20T07:28:26Z", "commit": {"oid": "1f57707179085a02c7bc66a5c03e959e83624d26"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNzoyODoyNlrOF5JoGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNzoyODoyNlrOF5JoGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ3MDg3NA==", "bodyText": "Think you could use enum Singleton pattern if you want.", "url": "https://github.com/line/armeria/pull/2610#discussion_r395470874", "createdAt": "2020-03-20T07:28:26Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/ThreadLocalRequestContextStorage.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.internal.common.RequestContextUtil.newIllegalContextPoppingException;\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import io.netty.util.concurrent.FastThreadLocal;\n+import io.netty.util.internal.InternalThreadLocalMap;\n+\n+final class ThreadLocalRequestContextStorage implements RequestContextStorage {\n+\n+    private static final FastThreadLocal<RequestContext> context = new FastThreadLocal<>();\n+\n+    static final ThreadLocalRequestContextStorage INSTANCE = new ThreadLocalRequestContextStorage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f57707179085a02c7bc66a5c03e959e83624d26"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdec6692e22af1ed2779b2fea681208b5ed4e244", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/cdec6692e22af1ed2779b2fea681208b5ed4e244", "committedDate": "2020-03-20T07:39:05Z", "message": "enum singleton"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e415d9682ac56af932a48a0dd142f9409811373", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/6e415d9682ac56af932a48a0dd142f9409811373", "committedDate": "2020-03-20T11:54:35Z", "message": "Fix Javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NDk4MzIw", "url": "https://github.com/line/armeria/pull/2610#pullrequestreview-378498320", "createdAt": "2020-03-20T13:49:49Z", "commit": {"oid": "6e415d9682ac56af932a48a0dd142f9409811373"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzo0OTo0OVrOF5Udgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzo0OTo0OVrOF5Udgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0ODM4Ng==", "bodyText": "I actually meant not logging when:\n\nusing the default provider (because it may be noisy.)\nspecified via the flag (because it's logged there already.)\n\ni.e. we can log in the else {} block above.", "url": "https://github.com/line/armeria/pull/2610#discussion_r395648386", "createdAt": "2020-03-20T13:49:49Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java", "diffHunk": "@@ -48,6 +57,61 @@\n     private static final Set<Thread> REPORTED_THREADS =\n             Collections.newSetFromMap(new MapMaker().weakKeys().makeMap());\n \n+    private static final RequestContextStorage requestContextStorage;\n+\n+    static {\n+        final List<RequestContextStorageProvider> providers = ImmutableList.copyOf(\n+                ServiceLoader.load(RequestContextStorageProvider.class));\n+        final String providerFqcn = Flags.requestContextStorageProvider();\n+        if (!providers.isEmpty()) {\n+\n+            RequestContextStorageProvider provider = null;\n+            if (providers.size() > 1) {\n+                if (providerFqcn.isEmpty()) {\n+                    throw new IllegalStateException(\n+                            \"Found more than one \" + RequestContextStorageProvider.class.getSimpleName() +\n+                            \". You must specify -Dcom.linecorp.armeria.requestContextStorageProvider=<FQCN>.\" +\n+                            \" providers: \" + providers);\n+                }\n+\n+                for (RequestContextStorageProvider candidate : providers) {\n+                    if (candidate.getClass().getName().equals(providerFqcn)) {\n+                        if (provider != null) {\n+                            throw new IllegalStateException(\n+                                    providerFqcn + \" matches more than one \" +\n+                                    RequestContextStorageProvider.class.getSimpleName() + \". providers: \" +\n+                                    providers);\n+                        } else {\n+                            provider = candidate;\n+                        }\n+                    }\n+                }\n+                if (provider == null) {\n+                    throw new IllegalStateException(\n+                            providerFqcn + \" does not match any \" +\n+                            RequestContextStorageProvider.class.getSimpleName() + \". providers: \" + providers);\n+                }\n+            } else {\n+                provider = providers.get(0);\n+            }\n+\n+            try {\n+                requestContextStorage = provider.newStorage();\n+            } catch (Throwable t) {\n+                throw new IllegalStateException(\"Failed to create context storage. provider: \" + provider, t);\n+            }\n+            logger.info(\"{} is used to create the request context storage: {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e415d9682ac56af932a48a0dd142f9409811373"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b9b64af6bf0209258f37cfdf83460186b76b3b5", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/9b9b64af6bf0209258f37cfdf83460186b76b3b5", "committedDate": "2020-03-20T14:25:41Z", "message": "Fix logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63ffc150a03b780ed7b73a69fa79a2c5315126d0", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/63ffc150a03b780ed7b73a69fa79a2c5315126d0", "committedDate": "2020-03-23T02:03:21Z", "message": "Update RequestContextUtil.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MDk1NDE4", "url": "https://github.com/line/armeria/pull/2610#pullrequestreview-379095418", "createdAt": "2020-03-23T02:06:39Z", "commit": {"oid": "63ffc150a03b780ed7b73a69fa79a2c5315126d0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccf427a4bc96f8a025fecb93b4738cd29f397dfd", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/ccf427a4bc96f8a025fecb93b4738cd29f397dfd", "committedDate": "2020-03-23T02:19:56Z", "message": "Update RequestContextUtil.java"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 715, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}