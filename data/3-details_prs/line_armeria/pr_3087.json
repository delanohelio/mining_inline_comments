{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzOTk3ODE5", "number": 3087, "title": "Enable to receive compressed request from client", "bodyText": "Motivation:\nMost of servers can send compressed response to client. But can't receive compressed request from client.\nIn this PR. armeria can receive compressed(gzip or deflate) request from client with Content-Encoding header\nModifications:\n\nAdd DecodingService and HttpDecodedRequest\n\nResult:\n\nYou can receive compressed request from client", "createdAt": "2020-09-28T09:06:12Z", "url": "https://github.com/line/armeria/pull/3087", "merged": true, "mergeCommit": {"oid": "e729261fc0357937edf52989988a1df2456e5977"}, "closed": true, "closedAt": "2020-10-16T07:29:51Z", "author": {"login": "joonhaeng"}, "timelineItems": {"totalCount": 45, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNPgZogH2gAyNDkzOTk3ODE5OmI0ZTk0NGEwODBmZGQyNjIxYTM4OTU4YjMwZDY5MDg4N2FjZDYyYTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdS_GhggFqTUxMDA3NjcwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b4e944a080fdd2621a38958b30d690887acd62a0", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/b4e944a080fdd2621a38958b30d690887acd62a0", "committedDate": "2020-09-28T08:42:13Z", "message": "add package-info.java for new package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87435ea0f849c942a4734add98c1f72fde8d7bc3", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/87435ea0f849c942a4734add98c1f72fde8d7bc3", "committedDate": "2020-09-28T08:45:24Z", "message": "add HttpDecodedRequest for decoding gzipped(or deflate) content from client(similar to HttpDecodedResponse)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d82738daab993bb770cf633746dd7a2710137b7", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/3d82738daab993bb770cf633746dd7a2710137b7", "committedDate": "2020-09-28T08:46:17Z", "message": "decorating service for decode gzipped(or deflate) content from client with using HttpDecodedRequest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb5bb9e74a70af7bab37f331fa285ee29a36488b", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/cb5bb9e74a70af7bab37f331fa285ee29a36488b", "committedDate": "2020-09-28T08:46:46Z", "message": "add DecodingServiceTest for test DecodingService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dd3c3041b02cb5596cf03853660cb7e6f5ed713", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/8dd3c3041b02cb5596cf03853660cb7e6f5ed713", "committedDate": "2020-09-28T08:47:16Z", "message": "add HttpDecodedRequestTest for testing HttpDecodedRequest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3Mzg2MjE5", "url": "https://github.com/line/armeria/pull/3087#pullrequestreview-497386219", "createdAt": "2020-09-28T10:33:57Z", "commit": {"oid": "8dd3c3041b02cb5596cf03853660cb7e6f5ed713"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMDozMzo1OFrOHY328g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMDo0MjoyMFrOHY4Hpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0MzA1OA==", "bodyText": "Oops... this is client module. \ud83d\ude31 \ud83e\udd14\nIt is not natural to use client-side code on server-side.", "url": "https://github.com/line/armeria/pull/3087#discussion_r495843058", "createdAt": "2020-09-28T10:33:58Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.decoding;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.client.encoding.StreamDecoderFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dd3c3041b02cb5596cf03853660cb7e6f5ed713"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0NDA4MA==", "bodyText": "Could remove public and add final?", "url": "https://github.com/line/armeria/pull/3087#discussion_r495844080", "createdAt": "2020-09-28T10:35:59Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/decoding/HttpDecodedRequest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.decoding;\n+\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+\n+import com.google.common.base.Ascii;\n+\n+import com.linecorp.armeria.client.encoding.StreamDecoder;\n+import com.linecorp.armeria.client.encoding.StreamDecoderFactory;\n+import com.linecorp.armeria.common.FilteredHttpRequest;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpRequest;\n+\n+import io.netty.buffer.ByteBufAllocator;\n+\n+/**\n+ * A {@link FilteredHttpRequest} that applies HTTP decoding to {@link HttpObject}s as they are published.\n+ */\n+public class HttpDecodedRequest extends FilteredHttpRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dd3c3041b02cb5596cf03853660cb7e6f5ed713"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0NDUxNQ==", "bodyText": "Add final?", "url": "https://github.com/line/armeria/pull/3087#discussion_r495844515", "createdAt": "2020-09-28T10:36:53Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.decoding;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.client.encoding.StreamDecoderFactory;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.DecoratingService;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n+\n+/**\n+ * A {@link DecoratingService} that requests and decodes HTTP encoding (e.g., gzip) that has been applied to the\n+ * content of an {@link HttpRequest}.\n+ */\n+public class DecodingService extends SimpleDecoratingHttpService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dd3c3041b02cb5596cf03853660cb7e6f5ed713"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0NTExOA==", "bodyText": "Could be private?", "url": "https://github.com/line/armeria/pull/3087#discussion_r495845118", "createdAt": "2020-09-28T10:38:10Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.decoding;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.client.encoding.StreamDecoderFactory;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.DecoratingService;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n+\n+/**\n+ * A {@link DecoratingService} that requests and decodes HTTP encoding (e.g., gzip) that has been applied to the\n+ * content of an {@link HttpRequest}.\n+ */\n+public class DecodingService extends SimpleDecoratingHttpService {\n+\n+    /**\n+     * Creates a new {@link DecodingService} decorator with the default encodings of 'gzip' and 'deflate'.\n+     */\n+    public static Function<? super HttpService, DecodingService> newDecorator() {\n+        return delegate -> new DecodingService(delegate, ImmutableList\n+                .of(StreamDecoderFactory.gzip(), StreamDecoderFactory.deflate()));\n+    }\n+\n+    private final Map<String, StreamDecoderFactory> decoderFactories;\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpService} with the provided decoders.\n+     */\n+    protected DecodingService(HttpService delegate, Iterable<? extends StreamDecoderFactory> decoderFactories) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dd3c3041b02cb5596cf03853660cb7e6f5ed713"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0NzMzNA==", "bodyText": "Users might want to customize StreamDecoderFactorys.\nThe following factories would be useful for that case.\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/client/encoding/DecodingClient.java\n    \n    \n        Lines 51 to 62\n      in\n      eb33d2b\n    \n    \n    \n    \n\n        \n          \n               public static Function<? super HttpClient, DecodingClient> \n        \n\n        \n          \n               newDecorator(StreamDecoderFactory... decoderFactories) { \n        \n\n        \n          \n                   return newDecorator(ImmutableList.copyOf(decoderFactories)); \n        \n\n        \n          \n               } \n        \n\n        \n          \n            \n        \n\n        \n          \n               /** \n        \n\n        \n          \n                * Creates a new {@link DecodingClient} decorator with the specified {@link StreamDecoderFactory}s. \n        \n\n        \n          \n                */ \n        \n\n        \n          \n               public static Function<? super HttpClient, DecodingClient> newDecorator( \n        \n\n        \n          \n                       Iterable<? extends StreamDecoderFactory> decoderFactories) { \n        \n\n        \n          \n                   return client -> new DecodingClient(client, decoderFactories); \n        \n\n        \n          \n               } \n        \n    \n  \n\n\nBy the way, We need to discuss StreamDecoderFactory issue before going further.", "url": "https://github.com/line/armeria/pull/3087#discussion_r495847334", "createdAt": "2020-09-28T10:42:20Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.decoding;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.client.encoding.StreamDecoderFactory;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.DecoratingService;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n+\n+/**\n+ * A {@link DecoratingService} that requests and decodes HTTP encoding (e.g., gzip) that has been applied to the\n+ * content of an {@link HttpRequest}.\n+ */\n+public class DecodingService extends SimpleDecoratingHttpService {\n+\n+    /**\n+     * Creates a new {@link DecodingService} decorator with the default encodings of 'gzip' and 'deflate'.\n+     */\n+    public static Function<? super HttpService, DecodingService> newDecorator() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dd3c3041b02cb5596cf03853660cb7e6f5ed713"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbec60339003d13fa16b612eeedef3af8e279b3d", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/cbec60339003d13fa16b612eeedef3af8e279b3d", "committedDate": "2020-09-28T10:50:02Z", "message": "fix: from public to final"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "499e93fdc955e82188ee1a1b9514ea49ba841c61", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/499e93fdc955e82188ee1a1b9514ea49ba841c61", "committedDate": "2020-09-28T11:35:27Z", "message": "fix: add newDecorator(args...) method to customize DecodingService"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MDE0NDM0", "url": "https://github.com/line/armeria/pull/3087#pullrequestreview-498014434", "createdAt": "2020-09-29T02:05:12Z", "commit": {"oid": "499e93fdc955e82188ee1a1b9514ea49ba841c61"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMjowNToxMlrOHZV7gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMjowNToxMlrOHZV7gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMzNTc0Nw==", "bodyText": "And how about adding EncodingClient for the completing data flow - compressing by client and decompressing by server?\nYou can do that this PR or in the following PR. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/3087#discussion_r496335747", "createdAt": "2020-09-29T02:05:12Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/server/decoding/DecodingServiceTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.decoding;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.zip.DeflaterOutputStream;\n+import java.util.zip.GZIPOutputStream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.testing.junit5.server.ServerExtension;\n+\n+class DecodingServiceTest {\n+\n+    @RegisterExtension\n+    static final ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            final HttpService httpService = (ctx, req) -> HttpResponse.from(\n+                    req.aggregate()\n+                       .thenApply(aggregated -> {\n+                           final ResponseHeaders responseHeaders =\n+                                   ResponseHeaders.of(HttpStatus.OK,\n+                                                      HttpHeaderNames.CONTENT_TYPE, MediaType.PLAIN_TEXT_UTF_8);\n+                           return HttpResponse.of(responseHeaders,\n+                                                  HttpData.ofUtf8(\"Hello \" + aggregated.contentUtf8() + '!'));\n+                       }));\n+            sb.decorator(\"/decodeTest\", DecodingService.newDecorator());\n+            sb.service(\"/decodeTest\", httpService);\n+\n+            sb.decoratorUnder(\"/\", (delegate, ctx, req) -> {\n+                return delegate.serve(ctx, req);\n+            });\n+        }\n+    };\n+\n+    @Test\n+    void decodingGzippedPayloadFromClient() throws IOException {\n+\n+        final WebClient client = WebClient.builder(server.httpUri()).build();\n+        final RequestHeaders headers = RequestHeaders.of(HttpMethod.POST, \"/decodeTest\",\n+                                                         HttpHeaderNames.CONTENT_ENCODING, \"gzip\");\n+        final ByteArrayOutputStream encodedStream = new ByteArrayOutputStream();\n+        final DeflaterOutputStream encodingStream = new GZIPOutputStream(encodedStream, true);\n+\n+        final byte[] testByteArray = \"Armeria Gzip Test\".getBytes(StandardCharsets.UTF_8);\n+        encodingStream.write(testByteArray);\n+        encodingStream.flush();\n+\n+        assertThat(client.execute(headers, HttpData.wrap(encodedStream.toByteArray())).aggregate().join()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499e93fdc955e82188ee1a1b9514ea49ba841c61"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08f72bfe2b9d6e69da93a1f055a59a8359d04d4d", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/08f72bfe2b9d6e69da93a1f055a59a8359d04d4d", "committedDate": "2020-09-29T05:40:56Z", "message": "create new package that copy from com.line.armeria.client.encoding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bc47f8377075437e6849df4c8f4d64319761fd8", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/1bc47f8377075437e6849df4c8f4d64319761fd8", "committedDate": "2020-09-29T05:41:35Z", "message": "copy from com.line.armeria.client.encoding.StreamDecoder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56a5fddce86ddad97084b35c283831b600cf73a4", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/56a5fddce86ddad97084b35c283831b600cf73a4", "committedDate": "2020-09-29T05:42:26Z", "message": "copy from com.line.armeria.client.encoding.StreamDecoderFactories"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b996887af7d849b1648eed9b54af2c042ab902ea", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/b996887af7d849b1648eed9b54af2c042ab902ea", "committedDate": "2020-09-29T05:42:52Z", "message": "copy from com.line.armeria.client.encoding.StreamDecoderFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d406cc4082eebc8b05bc926b94796a5daf7ae94f", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/d406cc4082eebc8b05bc926b94796a5daf7ae94f", "committedDate": "2020-09-29T05:43:17Z", "message": "copy from com.line.armeria.client.encoding.ZlibStreamDecoder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f179a17898776fd8f9059d0d5cc35829b59cd6d3", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/f179a17898776fd8f9059d0d5cc35829b59cd6d3", "committedDate": "2020-09-29T05:47:06Z", "message": "change import path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bbaa3fdc8046c8c8f58603ae9133c2401e90a4b", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/9bbaa3fdc8046c8c8f58603ae9133c2401e90a4b", "committedDate": "2020-09-29T05:49:55Z", "message": "marked as deprecated(use com.linecorp.armeria.common.encoding.* instead)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MTYxNTM5", "url": "https://github.com/line/armeria/pull/3087#pullrequestreview-498161539", "createdAt": "2020-09-29T07:19:36Z", "commit": {"oid": "9bbaa3fdc8046c8c8f58603ae9133c2401e90a4b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNzoxOTozNlrOHZeL8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMTo1MToyMlrOHZpYFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ3MTAyNg==", "bodyText": "We should update the request. \ud83d\ude04\nctx.updateRequest(decodedRequest);", "url": "https://github.com/line/armeria/pull/3087#discussion_r496471026", "createdAt": "2020-09-29T07:19:36Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.decoding;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.encoding.StreamDecoderFactory;\n+import com.linecorp.armeria.server.DecoratingService;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n+\n+/**\n+ * A {@link DecoratingService} that requests and decodes HTTP encoding (e.g., gzip) that has been applied to the\n+ * content of an {@link HttpRequest}.\n+ */\n+public final class DecodingService extends SimpleDecoratingHttpService {\n+\n+    /**\n+     * Creates a new {@link DecodingService} decorator with the default encodings of 'gzip' and 'deflate'.\n+     */\n+    public static Function<? super HttpService, DecodingService> newDecorator() {\n+        return newDecorator(ImmutableList.of(StreamDecoderFactory.gzip(), StreamDecoderFactory.deflate()));\n+    }\n+\n+    /**\n+     * Creates a new {@link DecodingService} decorator with the specified {@link StreamDecoderFactory}s.\n+     */\n+    public static Function<? super HttpService, DecodingService> newDecorator(\n+            StreamDecoderFactory... decoderFactories) {\n+        return newDecorator(ImmutableList.copyOf(decoderFactories));\n+    }\n+\n+    /**\n+     * Creates a new {@link DecodingService} decorator with the specified {@link StreamDecoderFactory}s.\n+     */\n+    public static Function<? super HttpService, DecodingService> newDecorator(\n+            Iterable<? extends StreamDecoderFactory> decoderFactories) {\n+        return delegate -> new DecodingService(delegate, decoderFactories);\n+    }\n+\n+    private final Map<String, StreamDecoderFactory> decoderFactories;\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpService} with the provided decoders.\n+     */\n+    private DecodingService(HttpService delegate, Iterable<? extends StreamDecoderFactory> decoderFactories) {\n+        super(delegate);\n+        this.decoderFactories = Streams.stream(decoderFactories)\n+                                       .collect(toImmutableMap(StreamDecoderFactory::encodingHeaderValue,\n+                                                               Function.identity()));\n+    }\n+\n+    @Override\n+    public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {\n+        final HttpDecodedRequest decodedRequest = new HttpDecodedRequest(req, decoderFactories, ctx.alloc());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bbaa3fdc8046c8c8f58603ae9133c2401e90a4b"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY1NDM1OQ==", "bodyText": "I think we can do this only once when this request is created because HttpRequest always has a header when it's created. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3087#discussion_r496654359", "createdAt": "2020-09-29T11:51:22Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/decoding/HttpDecodedRequest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.decoding;\n+\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+\n+import com.google.common.base.Ascii;\n+\n+import com.linecorp.armeria.common.FilteredHttpRequest;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.encoding.StreamDecoder;\n+import com.linecorp.armeria.common.encoding.StreamDecoderFactory;\n+\n+import io.netty.buffer.ByteBufAllocator;\n+\n+/**\n+ * A {@link FilteredHttpRequest} that applies HTTP decoding to {@link HttpObject}s as they are published.\n+ */\n+final class HttpDecodedRequest extends FilteredHttpRequest {\n+\n+    private final Map<String, StreamDecoderFactory> availableDecoders;\n+    private final ByteBufAllocator alloc;\n+\n+    @Nullable\n+    private StreamDecoder responseDecoder;\n+\n+    HttpDecodedRequest(HttpRequest delegate, Map<String, StreamDecoderFactory> availableDecoders,\n+                       ByteBufAllocator alloc) {\n+        super(delegate);\n+        this.availableDecoders = availableDecoders;\n+        this.alloc = alloc;\n+    }\n+\n+    @Override\n+    protected HttpObject filter(HttpObject obj) {\n+        if (obj instanceof HttpData) {\n+            final String contentEncoding = headers().get(HttpHeaderNames.CONTENT_ENCODING);\n+            if (contentEncoding != null) {\n+                final StreamDecoderFactory decoderFactory =\n+                        availableDecoders.get(Ascii.toLowerCase(contentEncoding));\n+                // If the client sent an encoding we don't support, decoding will be skipped which is ok.\n+                if (decoderFactory != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bbaa3fdc8046c8c8f58603ae9133c2401e90a4b"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NDc3Nzkw", "url": "https://github.com/line/armeria/pull/3087#pullrequestreview-498477790", "createdAt": "2020-09-29T13:38:01Z", "commit": {"oid": "9bbaa3fdc8046c8c8f58603ae9133c2401e90a4b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzozODowMVrOHZtmIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzozOTo1MlrOHZtr6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMzQ4OQ==", "bodyText": "Provides the common classes for HTTP content encoding and decoding?", "url": "https://github.com/line/armeria/pull/3087#discussion_r496723489", "createdAt": "2020-09-29T13:38:01Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/encoding/package-info.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * HTTP content decoding class.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bbaa3fdc8046c8c8f58603ae9133c2401e90a4b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyNDExNw==", "bodyText": "requireNonNull(decoderFactories, \"decoderFactories\")?", "url": "https://github.com/line/armeria/pull/3087#discussion_r496724117", "createdAt": "2020-09-29T13:38:49Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.decoding;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.encoding.StreamDecoderFactory;\n+import com.linecorp.armeria.server.DecoratingService;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n+\n+/**\n+ * A {@link DecoratingService} that requests and decodes HTTP encoding (e.g., gzip) that has been applied to the\n+ * content of an {@link HttpRequest}.\n+ */\n+public final class DecodingService extends SimpleDecoratingHttpService {\n+\n+    /**\n+     * Creates a new {@link DecodingService} decorator with the default encodings of 'gzip' and 'deflate'.\n+     */\n+    public static Function<? super HttpService, DecodingService> newDecorator() {\n+        return newDecorator(ImmutableList.of(StreamDecoderFactory.gzip(), StreamDecoderFactory.deflate()));\n+    }\n+\n+    /**\n+     * Creates a new {@link DecodingService} decorator with the specified {@link StreamDecoderFactory}s.\n+     */\n+    public static Function<? super HttpService, DecodingService> newDecorator(\n+            StreamDecoderFactory... decoderFactories) {\n+        return newDecorator(ImmutableList.copyOf(decoderFactories));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bbaa3fdc8046c8c8f58603ae9133c2401e90a4b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyNDk2OQ==", "bodyText": "Need to make an immutable copy with requireNonNull() check outside of the lambda expression first, so that any modifications to decoderFactories before Function.apply() does not affect the resulting service.", "url": "https://github.com/line/armeria/pull/3087#discussion_r496724969", "createdAt": "2020-09-29T13:39:52Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.decoding;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.encoding.StreamDecoderFactory;\n+import com.linecorp.armeria.server.DecoratingService;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n+\n+/**\n+ * A {@link DecoratingService} that requests and decodes HTTP encoding (e.g., gzip) that has been applied to the\n+ * content of an {@link HttpRequest}.\n+ */\n+public final class DecodingService extends SimpleDecoratingHttpService {\n+\n+    /**\n+     * Creates a new {@link DecodingService} decorator with the default encodings of 'gzip' and 'deflate'.\n+     */\n+    public static Function<? super HttpService, DecodingService> newDecorator() {\n+        return newDecorator(ImmutableList.of(StreamDecoderFactory.gzip(), StreamDecoderFactory.deflate()));\n+    }\n+\n+    /**\n+     * Creates a new {@link DecodingService} decorator with the specified {@link StreamDecoderFactory}s.\n+     */\n+    public static Function<? super HttpService, DecodingService> newDecorator(\n+            StreamDecoderFactory... decoderFactories) {\n+        return newDecorator(ImmutableList.copyOf(decoderFactories));\n+    }\n+\n+    /**\n+     * Creates a new {@link DecodingService} decorator with the specified {@link StreamDecoderFactory}s.\n+     */\n+    public static Function<? super HttpService, DecodingService> newDecorator(\n+            Iterable<? extends StreamDecoderFactory> decoderFactories) {\n+        return delegate -> new DecodingService(delegate, decoderFactories);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bbaa3fdc8046c8c8f58603ae9133c2401e90a4b"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc9501ed367f9fbadaf371d0f3cd6720f6d9fd32", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/cc9501ed367f9fbadaf371d0f3cd6720f6d9fd32", "committedDate": "2020-09-29T17:13:22Z", "message": "add ctx.updateRequest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25b5ca60f71c9f9f4871c19500b6a1d09be120ab", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/25b5ca60f71c9f9f4871c19500b6a1d09be120ab", "committedDate": "2020-09-29T18:23:33Z", "message": "add decoderCheck for prevent checking decoder many times"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73dcd2777925ce622f4554b0c9fd04c61c244951", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/73dcd2777925ce622f4554b0c9fd04c61c244951", "committedDate": "2020-09-29T18:37:30Z", "message": "fix javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf79aec1006df73d2a6a3a023b6a8ae899ee4631", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/cf79aec1006df73d2a6a3a023b6a8ae899ee4631", "committedDate": "2020-09-29T18:39:13Z", "message": "add requireNonNull and make immutable copy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MDAyOTg5", "url": "https://github.com/line/armeria/pull/3087#pullrequestreview-499002989", "createdAt": "2020-09-29T23:58:48Z", "commit": {"oid": "25b5ca60f71c9f9f4871c19500b6a1d09be120ab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMzo1ODo0OVrOHaILWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMzo1ODo0OVrOHaILWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE1OTAwMw==", "bodyText": "filteredFirstData, handledFirstData or initializedDecoder?", "url": "https://github.com/line/armeria/pull/3087#discussion_r497159003", "createdAt": "2020-09-29T23:58:49Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/decoding/HttpDecodedRequest.java", "diffHunk": "@@ -45,6 +45,8 @@\n     @Nullable\n     private StreamDecoder responseDecoder;\n \n+    private boolean decoderCheck;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25b5ca60f71c9f9f4871c19500b6a1d09be120ab"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MDAzNzk4", "url": "https://github.com/line/armeria/pull/3087#pullrequestreview-499003798", "createdAt": "2020-09-30T00:01:29Z", "commit": {"oid": "cf79aec1006df73d2a6a3a023b6a8ae899ee4631"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDowMToyOVrOHaISVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDowMToyOVrOHaISVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE2MDc5MA==", "bodyText": "How about just using List<...>?\nThe constructor could require an ImmutableList to statically ensure the constructor will always get an immutable list (i.e. a dev will be sure he/she doesn't need to worry about immutability of the given list).", "url": "https://github.com/line/armeria/pull/3087#discussion_r497160790", "createdAt": "2020-09-30T00:01:29Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/decoding/DecodingService.java", "diffHunk": "@@ -58,7 +60,10 @@\n      */\n     public static Function<? super HttpService, DecodingService> newDecorator(\n             Iterable<? extends StreamDecoderFactory> decoderFactories) {\n-        return delegate -> new DecodingService(delegate, decoderFactories);\n+        requireNonNull(decoderFactories, \"decoderFactories\");\n+        final Iterable<? extends StreamDecoderFactory> immutableDecoderFactories =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf79aec1006df73d2a6a3a023b6a8ae899ee4631"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16593b5f4fddff0ead303b51dcec531cd906a132", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/16593b5f4fddff0ead303b51dcec531cd906a132", "committedDate": "2020-09-30T05:42:48Z", "message": "change name decoderCheck -> initializedDecoder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fea0bc886d4dddf20ed4b4865bae243e27eb9dcd", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/fea0bc886d4dddf20ed4b4865bae243e27eb9dcd", "committedDate": "2020-09-30T05:43:38Z", "message": "change Iterable -> List"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09342ef1987f0bef9e0fd25376437fd69b11e9bc", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/09342ef1987f0bef9e0fd25376437fd69b11e9bc", "committedDate": "2020-09-30T12:10:13Z", "message": "add requireNonNull and ImmutableList"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83a035cada4e3e631f42a694d0d1de35325b1643", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/83a035cada4e3e631f42a694d0d1de35325b1643", "committedDate": "2020-10-01T09:26:42Z", "message": "add test for `com.linecorp.armeria.common.encoding`\n- copy from `com.linecorp.armeria.client.encoding`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMzk5MDM1", "url": "https://github.com/line/armeria/pull/3087#pullrequestreview-500399035", "createdAt": "2020-10-01T14:20:37Z", "commit": {"oid": "83a035cada4e3e631f42a694d0d1de35325b1643"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDoyMDozN1rOHbMvag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDoyMTozMFrOHbMx7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4MjM0Ng==", "bodyText": "nit: probably OK without public?", "url": "https://github.com/line/armeria/pull/3087#discussion_r498282346", "createdAt": "2020-10-01T14:20:37Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/encoding/ZlibStreamDecoderTest.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.encoding;\n+\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.handler.codec.compression.ZlibWrapper;\n+\n+public class ZlibStreamDecoderTest extends AbstractStreamDecoderTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a035cada4e3e631f42a694d0d1de35325b1643"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4Mjc2Nw==", "bodyText": "Awesome, @joonhaeng. Looking forward to the follow-up PR. \u2764\ufe0f", "url": "https://github.com/line/armeria/pull/3087#discussion_r498282767", "createdAt": "2020-10-01T14:21:10Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/decoding/DecodingServiceTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.decoding;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.zip.DeflaterOutputStream;\n+import java.util.zip.GZIPOutputStream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.testing.junit5.server.ServerExtension;\n+\n+class DecodingServiceTest {\n+\n+    @RegisterExtension\n+    static final ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            final HttpService httpService = (ctx, req) -> HttpResponse.from(\n+                    req.aggregate()\n+                       .thenApply(aggregated -> {\n+                           final ResponseHeaders responseHeaders =\n+                                   ResponseHeaders.of(HttpStatus.OK,\n+                                                      HttpHeaderNames.CONTENT_TYPE, MediaType.PLAIN_TEXT_UTF_8);\n+                           return HttpResponse.of(responseHeaders,\n+                                                  HttpData.ofUtf8(\"Hello \" + aggregated.contentUtf8() + '!'));\n+                       }));\n+            sb.decorator(\"/decodeTest\", DecodingService.newDecorator());\n+            sb.service(\"/decodeTest\", httpService);\n+\n+            sb.decoratorUnder(\"/\", (delegate, ctx, req) -> {\n+                return delegate.serve(ctx, req);\n+            });\n+        }\n+    };\n+\n+    @Test\n+    void decodingGzippedPayloadFromClient() throws IOException {\n+\n+        final WebClient client = WebClient.builder(server.httpUri()).build();\n+        final RequestHeaders headers = RequestHeaders.of(HttpMethod.POST, \"/decodeTest\",\n+                                                         HttpHeaderNames.CONTENT_ENCODING, \"gzip\");\n+        final ByteArrayOutputStream encodedStream = new ByteArrayOutputStream();\n+        final DeflaterOutputStream encodingStream = new GZIPOutputStream(encodedStream, true);\n+\n+        final byte[] testByteArray = \"Armeria Gzip Test\".getBytes(StandardCharsets.UTF_8);\n+        encodingStream.write(testByteArray);\n+        encodingStream.flush();\n+\n+        assertThat(client.execute(headers, HttpData.wrap(encodedStream.toByteArray())).aggregate().join()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMzNTc0Nw=="}, "originalCommit": {"oid": "499e93fdc955e82188ee1a1b9514ea49ba841c61"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4Mjk4OA==", "bodyText": "Ditto - public could be omitted", "url": "https://github.com/line/armeria/pull/3087#discussion_r498282988", "createdAt": "2020-10-01T14:21:30Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/decoding/HttpDecodedRequestTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.decoding;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.zip.GZIPOutputStream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.encoding.StreamDecoderFactory;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+\n+public class HttpDecodedRequestTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a035cada4e3e631f42a694d0d1de35325b1643"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "935180774b6a6b2956269095dea869d4f0b45e83", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/935180774b6a6b2956269095dea869d4f0b45e83", "committedDate": "2020-10-01T16:24:17Z", "message": "remove `public`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3db769c5d6dc2bbffec002da528eb599f1b86cc9", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/3db769c5d6dc2bbffec002da528eb599f1b86cc9", "committedDate": "2020-10-01T17:49:41Z", "message": "finding appropriate decoder before create `HttpDecodedRequest`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be1750742c4b8a729a9d1c7d7ee376d740ec81f7", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/be1750742c4b8a729a9d1c7d7ee376d740ec81f7", "committedDate": "2020-10-01T19:02:42Z", "message": "extend deprecated class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0341e11e2c1e32ca8107f6f4776a2bc5663fa6dc", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/0341e11e2c1e32ca8107f6f4776a2bc5663fa6dc", "committedDate": "2020-10-01T19:07:24Z", "message": "test for check DecodingClient can accept both of old/new decoder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNzU2NzA3", "url": "https://github.com/line/armeria/pull/3087#pullrequestreview-501756707", "createdAt": "2020-10-05T06:43:01Z", "commit": {"oid": "0341e11e2c1e32ca8107f6f4776a2bc5663fa6dc"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNjo0MzowMlrOHcPTig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNjo0OTowMFrOHcPb-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3MjkzOA==", "bodyText": "nit: Remove and decoding? \ud83d\ude06", "url": "https://github.com/line/armeria/pull/3087#discussion_r499372938", "createdAt": "2020-10-05T06:43:02Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/encoding/package-info.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Provides the common classes for HTTP content encoding and decoding.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0341e11e2c1e32ca8107f6f4776a2bc5663fa6dc"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3NTA5Nw==", "bodyText": "You don't need to specify the default ClientFactory. It is used by default.", "url": "https://github.com/line/armeria/pull/3087#discussion_r499375097", "createdAt": "2020-10-05T06:49:00Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/common/encoding/StreamDecoderCompatibleTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.encoding;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.linecorp.armeria.client.ClientFactory;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.encoding.DecodingClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.server.AbstractHttpService;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.encoding.EncodingService;\n+import com.linecorp.armeria.testing.junit5.server.ServerExtension;\n+\n+class StreamDecoderCompatibleTest {\n+\n+    @RegisterExtension\n+    static final ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.service(\"/encoding-test\", new AbstractHttpService() {\n+                @Override\n+                protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)\n+                        throws Exception {\n+                    return HttpResponse.of(\n+                            ResponseHeaders.of(HttpStatus.OK),\n+                            HttpData.ofUtf8(\"some content to compress \"),\n+                            HttpData.ofUtf8(\"more content to compress\"));\n+                }\n+            }.decorate(EncodingService.newDecorator()));\n+        }\n+    };\n+\n+    private static final ClientFactory clientFactory = ClientFactory.ofDefault();\n+\n+    @Test\n+    void httpDecodingWithNewDecoder() throws Exception {\n+        final WebClient client = WebClient.builder(server.httpUri())\n+                                          .factory(clientFactory)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0341e11e2c1e32ca8107f6f4776a2bc5663fa6dc"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "131bc3596a3d2f188c10290fbcf274001744e10d", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/131bc3596a3d2f188c10290fbcf274001744e10d", "committedDate": "2020-10-05T16:16:15Z", "message": "remove defaultClientFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80874bb959b6bb7ac2beff03a551c7583e77ed7d", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/80874bb959b6bb7ac2beff03a551c7583e77ed7d", "committedDate": "2020-10-05T16:22:02Z", "message": "refine comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0NjE2ODgw", "url": "https://github.com/line/armeria/pull/3087#pullrequestreview-504616880", "createdAt": "2020-10-08T09:55:44Z", "commit": {"oid": "80874bb959b6bb7ac2beff03a551c7583e77ed7d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwOTo1NTo0NFrOHeW4vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwOTo1NTo0NFrOHeW4vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU5NDMwMA==", "bodyText": "How about renaming this class into DecodingClientTest and adding the tests for both deprecated and non-deprecated stream decoders? I'm just not sure why we don't have DecodingClientTest already. \ud83d\ude05", "url": "https://github.com/line/armeria/pull/3087#discussion_r501594300", "createdAt": "2020-10-08T09:55:44Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/encoding/StreamDecoderCompatibleTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.encoding;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.encoding.DecodingClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.server.AbstractHttpService;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.encoding.EncodingService;\n+import com.linecorp.armeria.testing.junit5.server.ServerExtension;\n+\n+class StreamDecoderCompatibleTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80874bb959b6bb7ac2beff03a551c7583e77ed7d"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1eb993f9b129d112a124dff02948c6b558f91dc", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/d1eb993f9b129d112a124dff02948c6b558f91dc", "committedDate": "2020-10-08T17:18:49Z", "message": "move package, change name, add some test case for enlarging coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7d9b4457a1469471b0999bbc11bbe7d665845bf", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/f7d9b4457a1469471b0999bbc11bbe7d665845bf", "committedDate": "2020-10-08T17:19:40Z", "message": "add new/old decoder compatible test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MTI3NzEw", "url": "https://github.com/line/armeria/pull/3087#pullrequestreview-507127710", "createdAt": "2020-10-13T07:09:22Z", "commit": {"oid": "f7d9b4457a1469471b0999bbc11bbe7d665845bf"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzowOToyM1rOHgYSzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzowOToyM1rOHgYSzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNDUwOQ==", "bodyText": "How about merging this package into server.encoding?", "url": "https://github.com/line/armeria/pull/3087#discussion_r503714509", "createdAt": "2020-10-13T07:09:23Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/decoding/package-info.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/**\n+ * HTTP content decoding service.\n+ */\n+@NonNullByDefault\n+package com.linecorp.armeria.server.decoding;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7d9b4457a1469471b0999bbc11bbe7d665845bf"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dae2a224d3bf38087dd008d8c1ce97c6f7ef3081", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/dae2a224d3bf38087dd008d8c1ce97c6f7ef3081", "committedDate": "2020-10-13T07:32:29Z", "message": "move package from server.decoding to server.encoding"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MzI2MTM4", "url": "https://github.com/line/armeria/pull/3087#pullrequestreview-507326138", "createdAt": "2020-10-13T11:17:37Z", "commit": {"oid": "dae2a224d3bf38087dd008d8c1ce97c6f7ef3081"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MzUwMDc0", "url": "https://github.com/line/armeria/pull/3087#pullrequestreview-507350074", "createdAt": "2020-10-13T11:51:36Z", "commit": {"oid": "dae2a224d3bf38087dd008d8c1ce97c6f7ef3081"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4Mzk3MTMx", "url": "https://github.com/line/armeria/pull/3087#pullrequestreview-508397131", "createdAt": "2020-10-14T14:18:12Z", "commit": {"oid": "dae2a224d3bf38087dd008d8c1ce97c6f7ef3081"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoxODoxMlrOHhVZZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoxODoxMlrOHhVZZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxNTYyMQ==", "bodyText": "Is there any reason that we are doing this instead of\npackage com.linecorp.armeria.client.encoding;\n\npublic interface StreamDecoderFactory extends com.linecorp.armeria.common.encoding.StreamDecoderFactory {\nIt looks weird this new interface extends the deprecated one. \ud83e\udd14", "url": "https://github.com/line/armeria/pull/3087#discussion_r504715621", "createdAt": "2020-10-14T14:18:12Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/encoding/StreamDecoderFactory.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.encoding;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+\n+import io.netty.buffer.ByteBufAllocator;\n+\n+/**\n+ * An interface that constructs a new {@link StreamDecoder} for a given Content-Encoding header value.\n+ * A new decoder is valid for the lifetime of an {@link HttpResponse}.\n+ */\n+public interface StreamDecoderFactory extends com.linecorp.armeria.client.encoding.StreamDecoderFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dae2a224d3bf38087dd008d8c1ce97c6f7ef3081"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMDc2NzA0", "url": "https://github.com/line/armeria/pull/3087#pullrequestreview-510076704", "createdAt": "2020-10-16T04:59:01Z", "commit": {"oid": "dae2a224d3bf38087dd008d8c1ce97c6f7ef3081"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4704, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}