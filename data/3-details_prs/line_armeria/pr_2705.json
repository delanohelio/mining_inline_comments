{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2ODM0MTQ4", "number": 2705, "title": "Handle h1c retry failure correctly for proxy requests", "bodyText": "Related to #2698\nMotivation\nIf needsRetryWithH1C=true with ProxyConfig, the retry attempts to eventually connect to the proxyAddress instead of destinationAddress. Fix this\nModifications\n\nRemember proxyDestinationAddress from a successfulProxyConnectionEvent.\nUse proxyDestinationAddress for retryWithH1C\nAdd tests for http/2 upgrade, preface request retries", "createdAt": "2020-05-12T16:25:24Z", "url": "https://github.com/line/armeria/pull/2705", "merged": true, "mergeCommit": {"oid": "70cc16b9794c1adef07710847b11d1f3bdb0a329"}, "closed": true, "closedAt": "2020-05-14T04:37:24Z", "author": {"login": "jrhee17"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgmfDPAH2gAyNDE2ODM0MTQ4Ojg0NTFjYzNmMDU1YzZhNTg5ZmQ4NTMxMTNlYjJiZTc1Y2QzM2IwZWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchFvNAAFqTQxMTQ1NjA2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8451cc3f055c6a589fd853113eb2be75cd33b0ec", "author": {"user": {"login": "jrhee17", "name": "jrhee17"}}, "url": "https://github.com/line/armeria/commit/8451cc3f055c6a589fd853113eb2be75cd33b0ec", "committedDate": "2020-05-12T16:01:58Z", "message": "add a failing case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17248a9653a8b1c466f5836af0b84b05e1ffe0fe", "author": {"user": {"login": "jrhee17", "name": "jrhee17"}}, "url": "https://github.com/line/armeria/commit/17248a9653a8b1c466f5836af0b84b05e1ffe0fe", "committedDate": "2020-05-12T16:19:10Z", "message": "very naive fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8a96fd14c00b536d85b2c24e13556f2662babae", "author": {"user": {"login": "jrhee17", "name": "jrhee17"}}, "url": "https://github.com/line/armeria/commit/c8a96fd14c00b536d85b2c24e13556f2662babae", "committedDate": "2020-05-13T11:54:38Z", "message": "separate test for preface and upgrade\n\nrename to proxyDestinationAddress"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3c909a76830b14eb0fd56a818ec084bf622b9e8", "author": {"user": {"login": "jrhee17", "name": "jrhee17"}}, "url": "https://github.com/line/armeria/commit/b3c909a76830b14eb0fd56a818ec084bf622b9e8", "committedDate": "2020-05-13T14:54:56Z", "message": "checkstyle newline, nullable annotation, consistent casting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDA2NzQ4", "url": "https://github.com/line/armeria/pull/2705#pullrequestreview-411406748", "createdAt": "2020-05-14T01:32:38Z", "commit": {"oid": "b3c909a76830b14eb0fd56a818ec084bf622b9e8"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMTozMjozOFrOGVJD9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMTozNDo1NlrOGVJGHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgyMTc0OA==", "bodyText": "This needs to be cleaned up.", "url": "https://github.com/line/armeria/pull/2705#discussion_r424821748", "createdAt": "2020-05-14T01:32:38Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java", "diffHunk": "@@ -218,6 +241,75 @@ void testHttpProxyBasicCase() throws Exception {\n         assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n     }\n \n+    @Test\n+    void testHttpProxyUpgradeRequestFailure() throws Exception {\n+        DYNAMIC_HANDLER.setChannelReadCustomizer((ctx, msg) -> {\n+            if (!(msg instanceof FullHttpRequest)) {\n+                ctx.close();\n+            }\n+            final HttpRequest request = (HttpRequest) msg;\n+            final DefaultFullHttpResponse response;\n+            if (\"h2c\".equals(request.headers().get(HttpHeaderNames.UPGRADE))) {\n+                // reject http2 upgrade requests\n+                final HttpHeaders headers = new DefaultHttpHeaders().add(CONNECTION, \"close\");\n+                response = new DefaultFullHttpResponse(HTTP_1_1, NOT_IMPLEMENTED, EMPTY_BUFFER,\n+                                                       headers, EmptyHttpHeaders.INSTANCE);\n+            } else {\n+                response = new DefaultFullHttpResponse(HTTP_1_1, HttpResponseStatus.OK,\n+                                                       copiedBuffer(\"success\", US_ASCII));\n+            }\n+            ctx.writeAndFlush(response);\n+            ctx.close();\n+        });\n+\n+        final ClientFactory clientFactory =\n+                ClientFactory.builder().proxyConfig(ProxyConfig.connect(httpProxyServer.address()))\n+                             .useHttp2Preface(false).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3c909a76830b14eb0fd56a818ec084bf622b9e8"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgyMTgxNw==", "bodyText": "Ditto - needs cleanup", "url": "https://github.com/line/armeria/pull/2705#discussion_r424821817", "createdAt": "2020-05-14T01:32:52Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java", "diffHunk": "@@ -218,6 +241,75 @@ void testHttpProxyBasicCase() throws Exception {\n         assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n     }\n \n+    @Test\n+    void testHttpProxyUpgradeRequestFailure() throws Exception {\n+        DYNAMIC_HANDLER.setChannelReadCustomizer((ctx, msg) -> {\n+            if (!(msg instanceof FullHttpRequest)) {\n+                ctx.close();\n+            }\n+            final HttpRequest request = (HttpRequest) msg;\n+            final DefaultFullHttpResponse response;\n+            if (\"h2c\".equals(request.headers().get(HttpHeaderNames.UPGRADE))) {\n+                // reject http2 upgrade requests\n+                final HttpHeaders headers = new DefaultHttpHeaders().add(CONNECTION, \"close\");\n+                response = new DefaultFullHttpResponse(HTTP_1_1, NOT_IMPLEMENTED, EMPTY_BUFFER,\n+                                                       headers, EmptyHttpHeaders.INSTANCE);\n+            } else {\n+                response = new DefaultFullHttpResponse(HTTP_1_1, HttpResponseStatus.OK,\n+                                                       copiedBuffer(\"success\", US_ASCII));\n+            }\n+            ctx.writeAndFlush(response);\n+            ctx.close();\n+        });\n+\n+        final ClientFactory clientFactory =\n+                ClientFactory.builder().proxyConfig(ProxyConfig.connect(httpProxyServer.address()))\n+                             .useHttp2Preface(false).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.HTTP, http1Server.endpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        final AggregatedHttpResponse response = responseFuture.join();\n+        assertThat(response.status()).isEqualByComparingTo(OK);\n+        assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n+    }\n+\n+    @Test\n+    void testHttpProxyPrefaceFailure() throws Exception {\n+        DYNAMIC_HANDLER.setChannelReadCustomizer((ctx, msg) -> {\n+            if (!(msg instanceof FullHttpRequest)) {\n+                ctx.close();\n+            }\n+            final HttpRequest request = (HttpRequest) msg;\n+            final DefaultFullHttpResponse response;\n+            if (HttpMethod.valueOf(\"PRI\").equals(request.method())) {\n+                // reject http2 preface\n+                final HttpHeaders headers = new DefaultHttpHeaders().add(CONNECTION, \"close\");\n+                response = new DefaultFullHttpResponse(\n+                        HTTP_1_1, NOT_IMPLEMENTED, EMPTY_BUFFER, headers, EmptyHttpHeaders.INSTANCE);\n+            } else {\n+                response = new DefaultFullHttpResponse(HTTP_1_1, HttpResponseStatus.OK,\n+                                                       copiedBuffer(\"success\", US_ASCII));\n+            }\n+            ctx.writeAndFlush(response);\n+            ctx.close();\n+        });\n+\n+        final ClientFactory clientFactory =\n+                ClientFactory.builder().proxyConfig(ProxyConfig.connect(httpProxyServer.address())).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3c909a76830b14eb0fd56a818ec084bf622b9e8"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgyMjE3NA==", "bodyText": "Could we also check if the client retried a CONNECT request, instead of GET? For example, you could send a response content that contains the request method instead of success above.", "url": "https://github.com/line/armeria/pull/2705#discussion_r424822174", "createdAt": "2020-05-14T01:34:33Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java", "diffHunk": "@@ -218,6 +241,75 @@ void testHttpProxyBasicCase() throws Exception {\n         assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n     }\n \n+    @Test\n+    void testHttpProxyUpgradeRequestFailure() throws Exception {\n+        DYNAMIC_HANDLER.setChannelReadCustomizer((ctx, msg) -> {\n+            if (!(msg instanceof FullHttpRequest)) {\n+                ctx.close();\n+            }\n+            final HttpRequest request = (HttpRequest) msg;\n+            final DefaultFullHttpResponse response;\n+            if (\"h2c\".equals(request.headers().get(HttpHeaderNames.UPGRADE))) {\n+                // reject http2 upgrade requests\n+                final HttpHeaders headers = new DefaultHttpHeaders().add(CONNECTION, \"close\");\n+                response = new DefaultFullHttpResponse(HTTP_1_1, NOT_IMPLEMENTED, EMPTY_BUFFER,\n+                                                       headers, EmptyHttpHeaders.INSTANCE);\n+            } else {\n+                response = new DefaultFullHttpResponse(HTTP_1_1, HttpResponseStatus.OK,\n+                                                       copiedBuffer(\"success\", US_ASCII));\n+            }\n+            ctx.writeAndFlush(response);\n+            ctx.close();\n+        });\n+\n+        final ClientFactory clientFactory =\n+                ClientFactory.builder().proxyConfig(ProxyConfig.connect(httpProxyServer.address()))\n+                             .useHttp2Preface(false).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.HTTP, http1Server.endpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        final AggregatedHttpResponse response = responseFuture.join();\n+        assertThat(response.status()).isEqualByComparingTo(OK);\n+        assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3c909a76830b14eb0fd56a818ec084bf622b9e8"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgyMjMwMg==", "bodyText": "Ditto - needs to ensure CONNECT request was sent", "url": "https://github.com/line/armeria/pull/2705#discussion_r424822302", "createdAt": "2020-05-14T01:34:56Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java", "diffHunk": "@@ -218,6 +241,75 @@ void testHttpProxyBasicCase() throws Exception {\n         assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n     }\n \n+    @Test\n+    void testHttpProxyUpgradeRequestFailure() throws Exception {\n+        DYNAMIC_HANDLER.setChannelReadCustomizer((ctx, msg) -> {\n+            if (!(msg instanceof FullHttpRequest)) {\n+                ctx.close();\n+            }\n+            final HttpRequest request = (HttpRequest) msg;\n+            final DefaultFullHttpResponse response;\n+            if (\"h2c\".equals(request.headers().get(HttpHeaderNames.UPGRADE))) {\n+                // reject http2 upgrade requests\n+                final HttpHeaders headers = new DefaultHttpHeaders().add(CONNECTION, \"close\");\n+                response = new DefaultFullHttpResponse(HTTP_1_1, NOT_IMPLEMENTED, EMPTY_BUFFER,\n+                                                       headers, EmptyHttpHeaders.INSTANCE);\n+            } else {\n+                response = new DefaultFullHttpResponse(HTTP_1_1, HttpResponseStatus.OK,\n+                                                       copiedBuffer(\"success\", US_ASCII));\n+            }\n+            ctx.writeAndFlush(response);\n+            ctx.close();\n+        });\n+\n+        final ClientFactory clientFactory =\n+                ClientFactory.builder().proxyConfig(ProxyConfig.connect(httpProxyServer.address()))\n+                             .useHttp2Preface(false).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.HTTP, http1Server.endpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        final AggregatedHttpResponse response = responseFuture.join();\n+        assertThat(response.status()).isEqualByComparingTo(OK);\n+        assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n+    }\n+\n+    @Test\n+    void testHttpProxyPrefaceFailure() throws Exception {\n+        DYNAMIC_HANDLER.setChannelReadCustomizer((ctx, msg) -> {\n+            if (!(msg instanceof FullHttpRequest)) {\n+                ctx.close();\n+            }\n+            final HttpRequest request = (HttpRequest) msg;\n+            final DefaultFullHttpResponse response;\n+            if (HttpMethod.valueOf(\"PRI\").equals(request.method())) {\n+                // reject http2 preface\n+                final HttpHeaders headers = new DefaultHttpHeaders().add(CONNECTION, \"close\");\n+                response = new DefaultFullHttpResponse(\n+                        HTTP_1_1, NOT_IMPLEMENTED, EMPTY_BUFFER, headers, EmptyHttpHeaders.INSTANCE);\n+            } else {\n+                response = new DefaultFullHttpResponse(HTTP_1_1, HttpResponseStatus.OK,\n+                                                       copiedBuffer(\"success\", US_ASCII));\n+            }\n+            ctx.writeAndFlush(response);\n+            ctx.close();\n+        });\n+\n+        final ClientFactory clientFactory =\n+                ClientFactory.builder().proxyConfig(ProxyConfig.connect(httpProxyServer.address())).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.HTTP, http1Server.endpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        final AggregatedHttpResponse response = responseFuture.join();\n+        assertThat(response.status()).isEqualByComparingTo(OK);\n+        assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3c909a76830b14eb0fd56a818ec084bf622b9e8"}, "originalPosition": 151}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c83096f9b4b574d8b37d492369e359ba2b44130", "author": {"user": {"login": "jrhee17", "name": "jrhee17"}}, "url": "https://github.com/line/armeria/commit/5c83096f9b4b574d8b37d492369e359ba2b44130", "committedDate": "2020-05-14T02:35:30Z", "message": "clean up clientFactories in test, more detailed test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7389c7e0bb44d64e13ba5a09b93d8645e083c75", "author": {"user": {"login": "jrhee17", "name": "jrhee17"}}, "url": "https://github.com/line/armeria/commit/b7389c7e0bb44d64e13ba5a09b93d8645e083c75", "committedDate": "2020-05-14T02:32:51Z", "message": "clean up clientFactories in test, more detailed test"}, "afterCommit": {"oid": "5c83096f9b4b574d8b37d492369e359ba2b44130", "author": {"user": {"login": "jrhee17", "name": "jrhee17"}}, "url": "https://github.com/line/armeria/commit/5c83096f9b4b574d8b37d492369e359ba2b44130", "committedDate": "2020-05-14T02:35:30Z", "message": "clean up clientFactories in test, more detailed test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be10aed4312a2ccdae272a0b3434d773c607340e", "author": {"user": {"login": "jrhee17", "name": "jrhee17"}}, "url": "https://github.com/line/armeria/commit/be10aed4312a2ccdae272a0b3434d773c607340e", "committedDate": "2020-05-14T02:58:41Z", "message": "test also check number of successful proxy requests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDUwMjY3", "url": "https://github.com/line/armeria/pull/2705#pullrequestreview-411450267", "createdAt": "2020-05-14T04:04:22Z", "commit": {"oid": "be10aed4312a2ccdae272a0b3434d773c607340e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNDowNDoyM1rOGVLT6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNDowNDoyM1rOGVLT6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg1ODYwMg==", "bodyText": "This needs Javadoc.", "url": "https://github.com/line/armeria/pull/2705#discussion_r424858602", "createdAt": "2020-05-14T04:04:23Z", "author": {"login": "trustin"}, "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/NettyServerExtension.java", "diffHunk": "@@ -50,6 +51,10 @@ public final InetSocketAddress address() {\n         return (InetSocketAddress) channel.localAddress();\n     }\n \n+    public final Endpoint endpoint() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be10aed4312a2ccdae272a0b3434d773c607340e"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDUwOTM0", "url": "https://github.com/line/armeria/pull/2705#pullrequestreview-411450934", "createdAt": "2020-05-14T04:07:03Z", "commit": {"oid": "be10aed4312a2ccdae272a0b3434d773c607340e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNDowNzowM1rOGVLV7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNDowNzowM1rOGVLV7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg1OTExOQ==", "bodyText": "isEqualTo() ?", "url": "https://github.com/line/armeria/pull/2705#discussion_r424859119", "createdAt": "2020-05-14T04:07:03Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java", "diffHunk": "@@ -216,6 +248,81 @@ void testHttpProxyBasicCase() throws Exception {\n         final AggregatedHttpResponse response = responseFuture.join();\n         assertThat(response.status()).isEqualByComparingTo(OK);\n         assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n+        assertThat(numSuccessfulProxyRequests).isEqualTo(1);\n+        clientFactory.close();\n+    }\n+\n+    @Test\n+    void testHttpProxyUpgradeRequestFailure() throws Exception {\n+        DYNAMIC_HANDLER.setChannelReadCustomizer((ctx, msg) -> {\n+            if (!(msg instanceof FullHttpRequest)) {\n+                ctx.close();\n+            }\n+            final HttpRequest request = (HttpRequest) msg;\n+            final DefaultFullHttpResponse response;\n+            if (\"h2c\".equals(request.headers().get(HttpHeaderNames.UPGRADE))) {\n+                // reject http2 upgrade requests\n+                final HttpHeaders headers = new DefaultHttpHeaders().add(CONNECTION, \"close\");\n+                response = new DefaultFullHttpResponse(HTTP_1_1, NOT_IMPLEMENTED, EMPTY_BUFFER,\n+                                                       headers, EmptyHttpHeaders.INSTANCE);\n+            } else {\n+                response = new DefaultFullHttpResponse(HTTP_1_1, HttpResponseStatus.OK,\n+                                                       copiedBuffer(request.method().name(), US_ASCII));\n+            }\n+            ctx.writeAndFlush(response);\n+            ctx.close();\n+        });\n+\n+        final ClientFactory clientFactory =\n+                ClientFactory.builder().proxyConfig(ProxyConfig.connect(httpProxyServer.address()))\n+                             .useHttp2Preface(false).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.HTTP, http1Server.endpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        final AggregatedHttpResponse response = responseFuture.join();\n+        assertThat(response.status()).isEqualByComparingTo(OK);\n+        assertThat(response.contentUtf8()).isEqualTo(GET.name());\n+        assertThat(numSuccessfulProxyRequests).isEqualTo(2);\n+        clientFactory.close();\n+    }\n+\n+    @Test\n+    void testHttpProxyPrefaceFailure() throws Exception {\n+        DYNAMIC_HANDLER.setChannelReadCustomizer((ctx, msg) -> {\n+            if (!(msg instanceof FullHttpRequest)) {\n+                ctx.close();\n+            }\n+            final HttpRequest request = (HttpRequest) msg;\n+            final DefaultFullHttpResponse response;\n+            if (HttpMethod.valueOf(\"PRI\").equals(request.method())) {\n+                // reject http2 preface\n+                final HttpHeaders headers = new DefaultHttpHeaders().add(CONNECTION, \"close\");\n+                response = new DefaultFullHttpResponse(\n+                        HTTP_1_1, NOT_IMPLEMENTED, EMPTY_BUFFER, headers, EmptyHttpHeaders.INSTANCE);\n+            } else {\n+                response = new DefaultFullHttpResponse(HTTP_1_1, HttpResponseStatus.OK,\n+                                                       copiedBuffer(request.method().name(), US_ASCII));\n+            }\n+            ctx.writeAndFlush(response);\n+            ctx.close();\n+        });\n+\n+        final ClientFactory clientFactory =\n+                ClientFactory.builder().proxyConfig(ProxyConfig.connect(httpProxyServer.address())).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.HTTP, http1Server.endpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        final AggregatedHttpResponse response = responseFuture.join();\n+        assertThat(response.status()).isEqualByComparingTo(OK);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be10aed4312a2ccdae272a0b3434d773c607340e"}, "originalPosition": 182}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDUxMjIw", "url": "https://github.com/line/armeria/pull/2705#pullrequestreview-411451220", "createdAt": "2020-05-14T04:07:59Z", "commit": {"oid": "be10aed4312a2ccdae272a0b3434d773c607340e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNDowNzo1OVrOGVLW_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNDowNzo1OVrOGVLW_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg1OTM5MA==", "bodyText": "isEqualTo() will do.", "url": "https://github.com/line/armeria/pull/2705#discussion_r424859390", "createdAt": "2020-05-14T04:07:59Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java", "diffHunk": "@@ -216,6 +248,81 @@ void testHttpProxyBasicCase() throws Exception {\n         final AggregatedHttpResponse response = responseFuture.join();\n         assertThat(response.status()).isEqualByComparingTo(OK);\n         assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n+        assertThat(numSuccessfulProxyRequests).isEqualTo(1);\n+        clientFactory.close();\n+    }\n+\n+    @Test\n+    void testHttpProxyUpgradeRequestFailure() throws Exception {\n+        DYNAMIC_HANDLER.setChannelReadCustomizer((ctx, msg) -> {\n+            if (!(msg instanceof FullHttpRequest)) {\n+                ctx.close();\n+            }\n+            final HttpRequest request = (HttpRequest) msg;\n+            final DefaultFullHttpResponse response;\n+            if (\"h2c\".equals(request.headers().get(HttpHeaderNames.UPGRADE))) {\n+                // reject http2 upgrade requests\n+                final HttpHeaders headers = new DefaultHttpHeaders().add(CONNECTION, \"close\");\n+                response = new DefaultFullHttpResponse(HTTP_1_1, NOT_IMPLEMENTED, EMPTY_BUFFER,\n+                                                       headers, EmptyHttpHeaders.INSTANCE);\n+            } else {\n+                response = new DefaultFullHttpResponse(HTTP_1_1, HttpResponseStatus.OK,\n+                                                       copiedBuffer(request.method().name(), US_ASCII));\n+            }\n+            ctx.writeAndFlush(response);\n+            ctx.close();\n+        });\n+\n+        final ClientFactory clientFactory =\n+                ClientFactory.builder().proxyConfig(ProxyConfig.connect(httpProxyServer.address()))\n+                             .useHttp2Preface(false).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.HTTP, http1Server.endpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        final AggregatedHttpResponse response = responseFuture.join();\n+        assertThat(response.status()).isEqualByComparingTo(OK);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be10aed4312a2ccdae272a0b3434d773c607340e"}, "originalPosition": 146}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97dadca54e6eb1ebcfbc401f907bd704695487bf", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/97dadca54e6eb1ebcfbc401f907bd704695487bf", "committedDate": "2020-05-14T04:11:03Z", "message": "Update ProxyClientIntegrationTest.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDUyNTgz", "url": "https://github.com/line/armeria/pull/2705#pullrequestreview-411452583", "createdAt": "2020-05-14T04:13:18Z", "commit": {"oid": "be10aed4312a2ccdae272a0b3434d773c607340e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDU0Nzk3", "url": "https://github.com/line/armeria/pull/2705#pullrequestreview-411454797", "createdAt": "2020-05-14T04:21:53Z", "commit": {"oid": "97dadca54e6eb1ebcfbc401f907bd704695487bf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDU2MDY2", "url": "https://github.com/line/armeria/pull/2705#pullrequestreview-411456066", "createdAt": "2020-05-14T04:26:40Z", "commit": {"oid": "97dadca54e6eb1ebcfbc401f907bd704695487bf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 471, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}