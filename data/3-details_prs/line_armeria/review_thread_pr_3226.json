{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMTk0Mjkz", "number": 3226, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzowODo0NlrOFGCWgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNToyNDo0OFrOFI1pFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODc0MzA3OnYy", "diffSide": "RIGHT", "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzowODo0NlrOIG2lkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzowODo0NlrOIG2lkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1NjcyMg==", "bodyText": "missing final?\nShouldn't we move this class to the internal package because a user does not use this class?", "url": "https://github.com/line/armeria/pull/3226#discussion_r544056722", "createdAt": "2020-12-16T07:08:46Z", "author": {"login": "minwoox"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.SmartLifecycle;\n+\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Make Armeria Server utilize spring's SmartLifecycle feature.\n+ * So Armeria will shutdown before other web servers and beans in the context.\n+ */\n+public class ArmeriaServerGracefulShutdownLifecycle implements SmartLifecycle {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d18186cd3a25e7746c6f85bf8d52ca73841c57c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODc0NDEwOnYy", "diffSide": "RIGHT", "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzowODo1OFrOIG2mPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzowODo1OFrOIG2mPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1Njg5Mw==", "bodyText": "Could remove this?", "url": "https://github.com/line/armeria/pull/3226#discussion_r544056893", "createdAt": "2020-12-16T07:08:58Z", "author": {"login": "minwoox"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.SmartLifecycle;\n+\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Make Armeria Server utilize spring's SmartLifecycle feature.\n+ * So Armeria will shutdown before other web servers and beans in the context.\n+ */\n+public class ArmeriaServerGracefulShutdownLifecycle implements SmartLifecycle {\n+    /**\n+     * {@link Server} created by {@link ArmeriaAutoConfiguration}. .\n+     */\n+    private final Server server;\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    public ArmeriaServerGracefulShutdownLifecycle(Server server) {\n+        this.server = server;\n+    }\n+\n+    /**\n+     * Return the created {@link Server}.\n+     */\n+    public Server getServer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d18186cd3a25e7746c6f85bf8d52ca73841c57c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODc5Njk0OnYy", "diffSide": "RIGHT", "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "isResolved": false, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzoxODo1N1rOIG3H1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwODoyNzo1N1rOIL0HjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2NTQ5NQ==", "bodyText": "question: Should we put the logic for building a server in AbstractArmeriaAutoConfiguration.armeriaServer() {...} in this method?", "url": "https://github.com/line/armeria/pull/3226#discussion_r544065495", "createdAt": "2020-12-16T07:18:57Z", "author": {"login": "minwoox"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.SmartLifecycle;\n+\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Make Armeria Server utilize spring's SmartLifecycle feature.\n+ * So Armeria will shutdown before other web servers and beans in the context.\n+ */\n+public class ArmeriaServerGracefulShutdownLifecycle implements SmartLifecycle {\n+    /**\n+     * {@link Server} created by {@link ArmeriaAutoConfiguration}. .\n+     */\n+    private final Server server;\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    public ArmeriaServerGracefulShutdownLifecycle(Server server) {\n+        this.server = server;\n+    }\n+\n+    /**\n+     * Return the created {@link Server}.\n+     */\n+    public Server getServer() {\n+        return server;\n+    }\n+\n+    /**\n+     * Start this component.\n+     * Currently AbstractArmeriaAutoConfiguration help starting the server.\n+     */\n+    @Override\n+    public void start() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d18186cd3a25e7746c6f85bf8d52ca73841c57c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg4MjExOA==", "bodyText": "I think you mean to start the server part. Both are ok for me.  Make isAutoStartup return true & put Server#start here or  Make isAutoStartup return false & leave this empty.", "url": "https://github.com/line/armeria/pull/3226#discussion_r544882118", "createdAt": "2020-12-17T07:58:11Z", "author": {"login": "kojilin"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.SmartLifecycle;\n+\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Make Armeria Server utilize spring's SmartLifecycle feature.\n+ * So Armeria will shutdown before other web servers and beans in the context.\n+ */\n+public class ArmeriaServerGracefulShutdownLifecycle implements SmartLifecycle {\n+    /**\n+     * {@link Server} created by {@link ArmeriaAutoConfiguration}. .\n+     */\n+    private final Server server;\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    public ArmeriaServerGracefulShutdownLifecycle(Server server) {\n+        this.server = server;\n+    }\n+\n+    /**\n+     * Return the created {@link Server}.\n+     */\n+    public Server getServer() {\n+        return server;\n+    }\n+\n+    /**\n+     * Start this component.\n+     * Currently AbstractArmeriaAutoConfiguration help starting the server.\n+     */\n+    @Override\n+    public void start() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2NTQ5NQ=="}, "originalCommit": {"oid": "6d18186cd3a25e7746c6f85bf8d52ca73841c57c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkwNjEyMA==", "bodyText": "Because the server is stopped from the stop() method in this class, I think it's good to have the start logic in start() method to make it symmetrical. \ud83e\udd14", "url": "https://github.com/line/armeria/pull/3226#discussion_r544906120", "createdAt": "2020-12-17T08:39:52Z", "author": {"login": "minwoox"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.SmartLifecycle;\n+\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Make Armeria Server utilize spring's SmartLifecycle feature.\n+ * So Armeria will shutdown before other web servers and beans in the context.\n+ */\n+public class ArmeriaServerGracefulShutdownLifecycle implements SmartLifecycle {\n+    /**\n+     * {@link Server} created by {@link ArmeriaAutoConfiguration}. .\n+     */\n+    private final Server server;\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    public ArmeriaServerGracefulShutdownLifecycle(Server server) {\n+        this.server = server;\n+    }\n+\n+    /**\n+     * Return the created {@link Server}.\n+     */\n+    public Server getServer() {\n+        return server;\n+    }\n+\n+    /**\n+     * Start this component.\n+     * Currently AbstractArmeriaAutoConfiguration help starting the server.\n+     */\n+    @Override\n+    public void start() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2NTQ5NQ=="}, "originalCommit": {"oid": "6d18186cd3a25e7746c6f85bf8d52ca73841c57c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA0ODgyNw==", "bodyText": "The test failure reminds maybe we should not change the behavior? Like some places where need to inject Server may think it's already started.  Do we have this concern?\nThe current failure is Server -> AbstractArmeriaBeanPostProcessor -> Then start. So maybe it's not possible to let Server#start at SmartLifeCycle start phase.", "url": "https://github.com/line/armeria/pull/3226#discussion_r545048827", "createdAt": "2020-12-17T12:22:26Z", "author": {"login": "kojilin"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.SmartLifecycle;\n+\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Make Armeria Server utilize spring's SmartLifecycle feature.\n+ * So Armeria will shutdown before other web servers and beans in the context.\n+ */\n+public class ArmeriaServerGracefulShutdownLifecycle implements SmartLifecycle {\n+    /**\n+     * {@link Server} created by {@link ArmeriaAutoConfiguration}. .\n+     */\n+    private final Server server;\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    public ArmeriaServerGracefulShutdownLifecycle(Server server) {\n+        this.server = server;\n+    }\n+\n+    /**\n+     * Return the created {@link Server}.\n+     */\n+    public Server getServer() {\n+        return server;\n+    }\n+\n+    /**\n+     * Start this component.\n+     * Currently AbstractArmeriaAutoConfiguration help starting the server.\n+     */\n+    @Override\n+    public void start() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2NTQ5NQ=="}, "originalCommit": {"oid": "6d18186cd3a25e7746c6f85bf8d52ca73841c57c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY0MjgzMw==", "bodyText": "I don't have any idea how to make it work at the moment. \ud83d\ude05 So I guess it's fine as it is. I might try later to figure that out.", "url": "https://github.com/line/armeria/pull/3226#discussion_r545642833", "createdAt": "2020-12-18T08:22:46Z", "author": {"login": "minwoox"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.SmartLifecycle;\n+\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Make Armeria Server utilize spring's SmartLifecycle feature.\n+ * So Armeria will shutdown before other web servers and beans in the context.\n+ */\n+public class ArmeriaServerGracefulShutdownLifecycle implements SmartLifecycle {\n+    /**\n+     * {@link Server} created by {@link ArmeriaAutoConfiguration}. .\n+     */\n+    private final Server server;\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    public ArmeriaServerGracefulShutdownLifecycle(Server server) {\n+        this.server = server;\n+    }\n+\n+    /**\n+     * Return the created {@link Server}.\n+     */\n+    public Server getServer() {\n+        return server;\n+    }\n+\n+    /**\n+     * Start this component.\n+     * Currently AbstractArmeriaAutoConfiguration help starting the server.\n+     */\n+    @Override\n+    public void start() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2NTQ5NQ=="}, "originalCommit": {"oid": "6d18186cd3a25e7746c6f85bf8d52ca73841c57c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIwNzA1Mg==", "bodyText": "In the current structure, SmartLifeCycle is handled after bean injection by Spring. I also want this to be, but I don't come up with a clear idea. \ud83d\ude2d", "url": "https://github.com/line/armeria/pull/3226#discussion_r546207052", "createdAt": "2020-12-19T07:45:32Z", "author": {"login": "heowc"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.SmartLifecycle;\n+\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Make Armeria Server utilize spring's SmartLifecycle feature.\n+ * So Armeria will shutdown before other web servers and beans in the context.\n+ */\n+public class ArmeriaServerGracefulShutdownLifecycle implements SmartLifecycle {\n+    /**\n+     * {@link Server} created by {@link ArmeriaAutoConfiguration}. .\n+     */\n+    private final Server server;\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    public ArmeriaServerGracefulShutdownLifecycle(Server server) {\n+        this.server = server;\n+    }\n+\n+    /**\n+     * Return the created {@link Server}.\n+     */\n+    public Server getServer() {\n+        return server;\n+    }\n+\n+    /**\n+     * Start this component.\n+     * Currently AbstractArmeriaAutoConfiguration help starting the server.\n+     */\n+    @Override\n+    public void start() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2NTQ5NQ=="}, "originalCommit": {"oid": "6d18186cd3a25e7746c6f85bf8d52ca73841c57c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTEyMDM4MA==", "bodyText": "I made another PR(#3245).\nI think we can fix this by modifying this. There was some misunderstanding when I added this feature. \ud83d\ude05", "url": "https://github.com/line/armeria/pull/3226#discussion_r549120380", "createdAt": "2020-12-27T14:33:46Z", "author": {"login": "heowc"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.SmartLifecycle;\n+\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Make Armeria Server utilize spring's SmartLifecycle feature.\n+ * So Armeria will shutdown before other web servers and beans in the context.\n+ */\n+public class ArmeriaServerGracefulShutdownLifecycle implements SmartLifecycle {\n+    /**\n+     * {@link Server} created by {@link ArmeriaAutoConfiguration}. .\n+     */\n+    private final Server server;\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    public ArmeriaServerGracefulShutdownLifecycle(Server server) {\n+        this.server = server;\n+    }\n+\n+    /**\n+     * Return the created {@link Server}.\n+     */\n+    public Server getServer() {\n+        return server;\n+    }\n+\n+    /**\n+     * Start this component.\n+     * Currently AbstractArmeriaAutoConfiguration help starting the server.\n+     */\n+    @Override\n+    public void start() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2NTQ5NQ=="}, "originalCommit": {"oid": "6d18186cd3a25e7746c6f85bf8d52ca73841c57c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE4NDk5NA==", "bodyText": "Maybe the problem is AbstractArmeriaBeanPostProcessor provides a port after the server start. So even we fix the test, still we can't inject/create all the beans which need port before the server starts?\nOr we can change the AbstractArmeriaBeanPostProcessor inject ports from config but not server's activePorts?", "url": "https://github.com/line/armeria/pull/3226#discussion_r549184994", "createdAt": "2020-12-28T01:12:00Z", "author": {"login": "kojilin"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.SmartLifecycle;\n+\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Make Armeria Server utilize spring's SmartLifecycle feature.\n+ * So Armeria will shutdown before other web servers and beans in the context.\n+ */\n+public class ArmeriaServerGracefulShutdownLifecycle implements SmartLifecycle {\n+    /**\n+     * {@link Server} created by {@link ArmeriaAutoConfiguration}. .\n+     */\n+    private final Server server;\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    public ArmeriaServerGracefulShutdownLifecycle(Server server) {\n+        this.server = server;\n+    }\n+\n+    /**\n+     * Return the created {@link Server}.\n+     */\n+    public Server getServer() {\n+        return server;\n+    }\n+\n+    /**\n+     * Start this component.\n+     * Currently AbstractArmeriaAutoConfiguration help starting the server.\n+     */\n+    @Override\n+    public void start() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2NTQ5NQ=="}, "originalCommit": {"oid": "6d18186cd3a25e7746c6f85bf8d52ca73841c57c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIwMTE3NQ==", "bodyText": "Hmmm... I think we don't have to provide this.\nSpring's @LocalServerPort also throws an exception when injected into the bean. WDYT?\n@SpringBootApplication\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n\n    @Configuration\n    static class Config {\n\n        @LocalServerPort\n        private Integer port;\n\n        public Integer port() {\n            return port;\n        }\n    }\n}\njava.lang.IllegalStateException: Failed to load ApplicationContext\n\n\tat org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:132)\n\tat org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:123)\n\tat org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)\n\tat org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)\n\tat org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)\n\tat org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:244)\n\tat org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:98)\n\tat org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$5(ClassBasedTestDescriptor.java:341)\n\tat org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:346)\n\tat org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$6(ClassBasedTestDescriptor.java:341)\n\tat java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)\n\tat java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)\n\tat java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)\n\tat java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)\n\tat java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)\n\tat java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:313)\n\tat java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:743)\n\tat java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:742)\n\tat java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:647)\n\tat org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:340)\n\tat org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:263)\n\tat org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$2(ClassBasedTestDescriptor.java:256)\n\tat java.util.Optional.orElseGet(Optional.java:267)\n\tat org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$3(ClassBasedTestDescriptor.java:255)\n\tat org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:29)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:108)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:107)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:71)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$1(NodeTestTask.java:107)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:107)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:75)\n\tat java.util.ArrayList.forEach(ArrayList.java:1257)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)\n\tat java.util.ArrayList.forEach(ArrayList.java:1257)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:248)\n\tat org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$5(DefaultLauncher.java:211)\n\tat org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:226)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:199)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:132)\n\tat com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'springTempApplication.Config': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'local.server.port' in value \"${local.server.port}\"\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:405)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:895)\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143)\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)\n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315)\n\tat org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:120)\n\tat org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)\n\tat org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)\n\t... 64 more\nCaused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'local.server.port' in value \"${local.server.port}\"\n\tat org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:178)\n\tat org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:124)\n\tat org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:236)\n\tat org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:210)\n\tat org.springframework.context.support.PropertySourcesPlaceholderConfigurer.lambda$processProperties$0(PropertySourcesPlaceholderConfigurer.java:175)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(AbstractBeanFactory.java:912)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1247)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1226)\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)", "url": "https://github.com/line/armeria/pull/3226#discussion_r549201175", "createdAt": "2020-12-28T03:19:13Z", "author": {"login": "heowc"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.SmartLifecycle;\n+\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Make Armeria Server utilize spring's SmartLifecycle feature.\n+ * So Armeria will shutdown before other web servers and beans in the context.\n+ */\n+public class ArmeriaServerGracefulShutdownLifecycle implements SmartLifecycle {\n+    /**\n+     * {@link Server} created by {@link ArmeriaAutoConfiguration}. .\n+     */\n+    private final Server server;\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    public ArmeriaServerGracefulShutdownLifecycle(Server server) {\n+        this.server = server;\n+    }\n+\n+    /**\n+     * Return the created {@link Server}.\n+     */\n+    public Server getServer() {\n+        return server;\n+    }\n+\n+    /**\n+     * Start this component.\n+     * Currently AbstractArmeriaAutoConfiguration help starting the server.\n+     */\n+    @Override\n+    public void start() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2NTQ5NQ=="}, "originalCommit": {"oid": "6d18186cd3a25e7746c6f85bf8d52ca73841c57c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIyMDc3Ng==", "bodyText": "Does it mean we don't need to support the production environment(@LocalServerPort and @LocalArmeriaPort is for testing)?\nBut if test code using the AbstractArmeriaAutoConfiguration, it means we can't inject still. e.g. LocalArmeriaPortHttpsTest.", "url": "https://github.com/line/armeria/pull/3226#discussion_r549220776", "createdAt": "2020-12-28T05:33:31Z", "author": {"login": "kojilin"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.SmartLifecycle;\n+\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Make Armeria Server utilize spring's SmartLifecycle feature.\n+ * So Armeria will shutdown before other web servers and beans in the context.\n+ */\n+public class ArmeriaServerGracefulShutdownLifecycle implements SmartLifecycle {\n+    /**\n+     * {@link Server} created by {@link ArmeriaAutoConfiguration}. .\n+     */\n+    private final Server server;\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    public ArmeriaServerGracefulShutdownLifecycle(Server server) {\n+        this.server = server;\n+    }\n+\n+    /**\n+     * Return the created {@link Server}.\n+     */\n+    public Server getServer() {\n+        return server;\n+    }\n+\n+    /**\n+     * Start this component.\n+     * Currently AbstractArmeriaAutoConfiguration help starting the server.\n+     */\n+    @Override\n+    public void start() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2NTQ5NQ=="}, "originalCommit": {"oid": "6d18186cd3a25e7746c6f85bf8d52ca73841c57c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI0OTMwMg==", "bodyText": "Does it mean we don't need to support the production environment(@LocalServerPort and @LocalArmeriaPort is for testing)?\n\nYes, that's right.\nFrom what I've been looking for, the injection way is slightly different.\nCreating a bean and injecting an object occurs in the process of refreshing the context.\nInjecting the object in the test is injected by the DependencyInjectionTestExecutionListener after the context is created. I don't think this is a problem because the webserver is running and injected.\nIf we want to do this, we need to modify the ArmeriaServerGracefulShutdownLifecycle a bit.", "url": "https://github.com/line/armeria/pull/3226#discussion_r549249302", "createdAt": "2020-12-28T07:51:34Z", "author": {"login": "heowc"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.SmartLifecycle;\n+\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Make Armeria Server utilize spring's SmartLifecycle feature.\n+ * So Armeria will shutdown before other web servers and beans in the context.\n+ */\n+public class ArmeriaServerGracefulShutdownLifecycle implements SmartLifecycle {\n+    /**\n+     * {@link Server} created by {@link ArmeriaAutoConfiguration}. .\n+     */\n+    private final Server server;\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    public ArmeriaServerGracefulShutdownLifecycle(Server server) {\n+        this.server = server;\n+    }\n+\n+    /**\n+     * Return the created {@link Server}.\n+     */\n+    public Server getServer() {\n+        return server;\n+    }\n+\n+    /**\n+     * Start this component.\n+     * Currently AbstractArmeriaAutoConfiguration help starting the server.\n+     */\n+    @Override\n+    public void start() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2NTQ5NQ=="}, "originalCommit": {"oid": "6d18186cd3a25e7746c6f85bf8d52ca73841c57c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI1OTE0OA==", "bodyText": "I simply changed the code. \ud83e\udd14", "url": "https://github.com/line/armeria/pull/3226#discussion_r549259148", "createdAt": "2020-12-28T08:27:57Z", "author": {"login": "heowc"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.SmartLifecycle;\n+\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Make Armeria Server utilize spring's SmartLifecycle feature.\n+ * So Armeria will shutdown before other web servers and beans in the context.\n+ */\n+public class ArmeriaServerGracefulShutdownLifecycle implements SmartLifecycle {\n+    /**\n+     * {@link Server} created by {@link ArmeriaAutoConfiguration}. .\n+     */\n+    private final Server server;\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    public ArmeriaServerGracefulShutdownLifecycle(Server server) {\n+        this.server = server;\n+    }\n+\n+    /**\n+     * Return the created {@link Server}.\n+     */\n+    public Server getServer() {\n+        return server;\n+    }\n+\n+    /**\n+     * Start this component.\n+     * Currently AbstractArmeriaAutoConfiguration help starting the server.\n+     */\n+    @Override\n+    public void start() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2NTQ5NQ=="}, "originalCommit": {"oid": "6d18186cd3a25e7746c6f85bf8d52ca73841c57c"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDAxOTQwOnYy", "diffSide": "RIGHT", "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/AbstractArmeriaAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNjowMTo1MFrOIHl_1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNjowMTo1MFrOIHl_1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzMzQ5NQ==", "bodyText": "nit: Wraps {@link Server}", "url": "https://github.com/line/armeria/pull/3226#discussion_r544833495", "createdAt": "2020-12-17T06:01:50Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/AbstractArmeriaAutoConfiguration.java", "diffHunk": "@@ -128,6 +129,14 @@ public Server armeriaServer(\n         return server;\n     }\n \n+    /**\n+     * Wrap server with {@link SmartLifecycle}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d18186cd3a25e7746c6f85bf8d52ca73841c57c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDAyODcwOnYy", "diffSide": "RIGHT", "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNjowNTozM1rOIHmEvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNjowNTozM1rOIHmEvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzNDc1MQ==", "bodyText": "nit: final?\nCould move to internal package?", "url": "https://github.com/line/armeria/pull/3226#discussion_r544834751", "createdAt": "2020-12-17T06:05:33Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.SmartLifecycle;\n+\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Make Armeria Server utilize spring's SmartLifecycle feature.\n+ * So Armeria will shutdown before other web servers and beans in the context.\n+ */\n+public class ArmeriaServerGracefulShutdownLifecycle implements SmartLifecycle {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d18186cd3a25e7746c6f85bf8d52ca73841c57c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDAyOTM3OnYy", "diffSide": "RIGHT", "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNjowNTo1MFrOIHmFHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNjowNTo1MFrOIHmFHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzNDg0NQ==", "bodyText": "nit: {@link Server}?", "url": "https://github.com/line/armeria/pull/3226#discussion_r544834845", "createdAt": "2020-12-17T06:05:50Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.SmartLifecycle;\n+\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Make Armeria Server utilize spring's SmartLifecycle feature.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d18186cd3a25e7746c6f85bf8d52ca73841c57c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDAzMzg3OnYy", "diffSide": "RIGHT", "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNjowNzoyNlrOIHmHaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNjowNzoyNlrOIHmHaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzNTQzMg==", "bodyText": "This method looks like dead code. Could be removed?", "url": "https://github.com/line/armeria/pull/3226#discussion_r544835432", "createdAt": "2020-12-17T06:07:26Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.SmartLifecycle;\n+\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Make Armeria Server utilize spring's SmartLifecycle feature.\n+ * So Armeria will shutdown before other web servers and beans in the context.\n+ */\n+public class ArmeriaServerGracefulShutdownLifecycle implements SmartLifecycle {\n+    /**\n+     * {@link Server} created by {@link ArmeriaAutoConfiguration}. .\n+     */\n+    private final Server server;\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    public ArmeriaServerGracefulShutdownLifecycle(Server server) {\n+        this.server = server;\n+    }\n+\n+    /**\n+     * Return the created {@link Server}.\n+     */\n+    public Server getServer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d18186cd3a25e7746c6f85bf8d52ca73841c57c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDA1MDUzOnYy", "diffSide": "RIGHT", "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNjoxNDowNlrOIHmQTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNzo0MzoxMVrOIHofRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzNzcxMQ==", "bodyText": "This is not called frequently. JFYI, (AFAIK) the performance of whenComplete() in Java8 is poorer than handle().", "url": "https://github.com/line/armeria/pull/3226#discussion_r544837711", "createdAt": "2020-12-17T06:14:06Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.SmartLifecycle;\n+\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Make Armeria Server utilize spring's SmartLifecycle feature.\n+ * So Armeria will shutdown before other web servers and beans in the context.\n+ */\n+public class ArmeriaServerGracefulShutdownLifecycle implements SmartLifecycle {\n+    /**\n+     * {@link Server} created by {@link ArmeriaAutoConfiguration}. .\n+     */\n+    private final Server server;\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    public ArmeriaServerGracefulShutdownLifecycle(Server server) {\n+        this.server = server;\n+    }\n+\n+    /**\n+     * Return the created {@link Server}.\n+     */\n+    public Server getServer() {\n+        return server;\n+    }\n+\n+    /**\n+     * Start this component.\n+     * Currently AbstractArmeriaAutoConfiguration help starting the server.\n+     */\n+    @Override\n+    public void start() {\n+    }\n+\n+    /**\n+     * Stop this component. This class implements {@link SmartLifecycle}, so don't need to support sync stop.\n+     */\n+    @Override\n+    public void stop() {\n+        throw new UnsupportedOperationException(\"Stop must not be invoked directly\");\n+    }\n+\n+    /**\n+     * Stop this component.\n+     */\n+    @Override\n+    public void stop(Runnable callback) {\n+        server.stop().whenComplete((unused, throwable) -> callback.run());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d18186cd3a25e7746c6f85bf8d52ca73841c57c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg3NDMwOQ==", "bodyText": "I see, due to not frequently, maybe let me keep whenComplete for just calling callback without returning/rethrow.", "url": "https://github.com/line/armeria/pull/3226#discussion_r544874309", "createdAt": "2020-12-17T07:43:11Z", "author": {"login": "kojilin"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.SmartLifecycle;\n+\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Make Armeria Server utilize spring's SmartLifecycle feature.\n+ * So Armeria will shutdown before other web servers and beans in the context.\n+ */\n+public class ArmeriaServerGracefulShutdownLifecycle implements SmartLifecycle {\n+    /**\n+     * {@link Server} created by {@link ArmeriaAutoConfiguration}. .\n+     */\n+    private final Server server;\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    public ArmeriaServerGracefulShutdownLifecycle(Server server) {\n+        this.server = server;\n+    }\n+\n+    /**\n+     * Return the created {@link Server}.\n+     */\n+    public Server getServer() {\n+        return server;\n+    }\n+\n+    /**\n+     * Start this component.\n+     * Currently AbstractArmeriaAutoConfiguration help starting the server.\n+     */\n+    @Override\n+    public void start() {\n+    }\n+\n+    /**\n+     * Stop this component. This class implements {@link SmartLifecycle}, so don't need to support sync stop.\n+     */\n+    @Override\n+    public void stop() {\n+        throw new UnsupportedOperationException(\"Stop must not be invoked directly\");\n+    }\n+\n+    /**\n+     * Stop this component.\n+     */\n+    @Override\n+    public void stop(Runnable callback) {\n+        server.stop().whenComplete((unused, throwable) -> callback.run());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzNzcxMQ=="}, "originalCommit": {"oid": "6d18186cd3a25e7746c6f85bf8d52ca73841c57c"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDA1NTM3OnYy", "diffSide": "RIGHT", "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNjoxNTo0NlrOIHmS9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNjoxNTo0NlrOIHmS9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgzODM4OA==", "bodyText": "Returns?", "url": "https://github.com/line/armeria/pull/3226#discussion_r544838388", "createdAt": "2020-12-17T06:15:46Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.SmartLifecycle;\n+\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Make Armeria Server utilize spring's SmartLifecycle feature.\n+ * So Armeria will shutdown before other web servers and beans in the context.\n+ */\n+public class ArmeriaServerGracefulShutdownLifecycle implements SmartLifecycle {\n+    /**\n+     * {@link Server} created by {@link ArmeriaAutoConfiguration}. .\n+     */\n+    private final Server server;\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    public ArmeriaServerGracefulShutdownLifecycle(Server server) {\n+        this.server = server;\n+    }\n+\n+    /**\n+     * Return the created {@link Server}.\n+     */\n+    public Server getServer() {\n+        return server;\n+    }\n+\n+    /**\n+     * Start this component.\n+     * Currently AbstractArmeriaAutoConfiguration help starting the server.\n+     */\n+    @Override\n+    public void start() {\n+    }\n+\n+    /**\n+     * Stop this component. This class implements {@link SmartLifecycle}, so don't need to support sync stop.\n+     */\n+    @Override\n+    public void stop() {\n+        throw new UnsupportedOperationException(\"Stop must not be invoked directly\");\n+    }\n+\n+    /**\n+     * Stop this component.\n+     */\n+    @Override\n+    public void stop(Runnable callback) {\n+        server.stop().whenComplete((unused, throwable) -> callback.run());\n+    }\n+\n+    /**\n+     * Return the phase that this lifecycle object is supposed to run in.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d18186cd3a25e7746c6f85bf8d52ca73841c57c"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTUyOTA0OnYy", "diffSide": "RIGHT", "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/ArmeriaServerGracefulShutdownLifecycle.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwODoyMTo0NFrOIIXXMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwODoyMTo0NFrOIIXXMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY0MjI5MA==", "bodyText": "I realized that we could just move this class to com.linecorp.armeria.spring package and make it package-private. \ud83d\ude05  Sorry about it.", "url": "https://github.com/line/armeria/pull/3226#discussion_r545642290", "createdAt": "2020-12-18T08:21:44Z", "author": {"login": "minwoox"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/ArmeriaServerGracefulShutdownLifecycle.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.spring;\n+\n+import org.springframework.context.SmartLifecycle;\n+\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.spring.ArmeriaAutoConfiguration;\n+\n+/**\n+ * Make Armeria {@link Server} utilize spring's SmartLifecycle feature.\n+ * So Armeria will shutdown before other web servers and beans in the context.\n+ */\n+public final class ArmeriaServerGracefulShutdownLifecycle implements SmartLifecycle {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24a0719fa100da3f6d773131be5c8ede020be2e8"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDAwMjg4OnYy", "diffSide": "RIGHT", "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/AbstractArmeriaAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTo0Mjo1OFrOIIb3zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTo0Mjo1OFrOIIb3zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNjE3NQ==", "bodyText": "I think this should be SmartLifecycle. \ud83e\udd14", "url": "https://github.com/line/armeria/pull/3226#discussion_r545716175", "createdAt": "2020-12-18T09:42:58Z", "author": {"login": "minwoox"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/AbstractArmeriaAutoConfiguration.java", "diffHunk": "@@ -134,7 +133,7 @@ public Server armeriaServer(\n      * Wrap {@link Server} with {@link SmartLifecycle}.\n      */\n     @Bean\n-    public SmartLifecycle armeriaServerGracefulShutdownLifecycle(Server server) {\n+    public ArmeriaServerGracefulShutdownLifecycle armeriaServerGracefulShutdownLifecycle(Server server) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef898d9310fd27836ec98057045fb17e2a46e0d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0ODExNzk2OnYy", "diffSide": "RIGHT", "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNToyNDo0OFrOIK-63g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzo0NToxNlrOILBtuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM4NzU1MA==", "bodyText": "Let's remove all Javadocs for the field and methods because it's a package-private class now. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3226#discussion_r548387550", "createdAt": "2020-12-24T05:24:48Z", "author": {"login": "minwoox"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.SmartLifecycle;\n+\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Make Armeria {@link Server} utilize spring's SmartLifecycle feature.\n+ * So Armeria will shutdown before other web servers and beans in the context.\n+ */\n+final class ArmeriaServerGracefulShutdownLifecycle implements SmartLifecycle {\n+    /**\n+     * {@link Server} created by {@link ArmeriaAutoConfiguration}. .\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6a966a84652fa95da226d515ac1a6273b2d5a9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzMzMzOQ==", "bodyText": "I find the class Javadoc, stop(), start(), getPhase() and isAutoStartup() useful, so maybe better removing only what's already specified in SmartLifecycle.", "url": "https://github.com/line/armeria/pull/3226#discussion_r548433339", "createdAt": "2020-12-24T07:45:16Z", "author": {"login": "trustin"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerGracefulShutdownLifecycle.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.SmartLifecycle;\n+\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Make Armeria {@link Server} utilize spring's SmartLifecycle feature.\n+ * So Armeria will shutdown before other web servers and beans in the context.\n+ */\n+final class ArmeriaServerGracefulShutdownLifecycle implements SmartLifecycle {\n+    /**\n+     * {@link Server} created by {@link ArmeriaAutoConfiguration}. .\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM4NzU1MA=="}, "originalCommit": {"oid": "fd6a966a84652fa95da226d515ac1a6273b2d5a9"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1807, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}