{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NTg4MTEz", "number": 2381, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwMzozNTowNFrODWbjlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwMDoxMjo1NVrODXZ6Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODQ2NzQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwMzozNTowNFrOFbL9NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwMzozNTowNFrOFbL9NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA1MTc2NQ==", "bodyText": "nit: Can revert? \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2381#discussion_r364051765", "createdAt": "2020-01-08T03:35:04Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientBuilder.java", "diffHunk": "@@ -94,41 +96,41 @@ public ClientBuilder(URI uri) {\n      * Creates a new {@link ClientBuilder} that builds the client that connects to the specified\n      * {@link Endpoint} with the {@code scheme}.\n      *\n-     * @deprecated Use {@link Clients#builder(String, Endpoint)}.\n+     * @deprecated Use {@link Clients#builder(String, EndpointGroup)}.\n      */\n     @Deprecated\n-    public ClientBuilder(String scheme, Endpoint endpoint) {\n-        this(Scheme.parse(requireNonNull(scheme, \"scheme\")), requireNonNull(endpoint, \"endpoint\"));\n+    public ClientBuilder(String scheme, Endpoint endpointGroup) {\n+        this(Scheme.parse(requireNonNull(scheme, \"scheme\")), requireNonNull(endpointGroup, \"endpoint\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e55aa3891f2a733c926b6f165007efec0a62d6d"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODU5NTExOnYy", "diffSide": "RIGHT", "path": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaRetrofitBuilder.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwNTo0MjowNFrOFbNJHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNTozNTowNlrOFbaryw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA3MTE5Nw==", "bodyText": "I'm not quite understanding, why do we need to map URL to endpoint group instead of just accepting a single endpoint group used for the retrofit client, similar to the normal web client?", "url": "https://github.com/line/armeria/pull/2381#discussion_r364071197", "createdAt": "2020-01-08T05:42:04Z", "author": {"login": "anuraaga"}, "path": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaRetrofitBuilder.java", "diffHunk": "@@ -77,91 +84,47 @@\n     private static final String SLASH = \"/\";\n \n     private final Retrofit.Builder retrofitBuilder;\n-    private final ClientFactory clientFactory;\n-    @Nullable\n-    private String baseUrl;\n+    private final ImmutableMap.Builder<String, EndpointGroup> endpointGroups = ImmutableMap.builder();\n+\n     private boolean streaming;\n     private Executor callbackExecutor = CommonPools.blockingTaskExecutor();\n-    private BiFunction<String, ? super ClientOptionsBuilder, ClientOptionsBuilder> configurator =\n-            DEFAULT_CONFIGURATOR;\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the default {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder() {\n-        this(ClientFactory.ofDefault());\n-    }\n+    private Function<? super HttpUrl, ? extends EndpointGroup> endpointGroupMapping =\n+            url -> Endpoint.of(url.host(), url.port());\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the specified {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder(ClientFactory clientFactory) {\n-        this.clientFactory = requireNonNull(clientFactory, \"clientFactory\");\n-        retrofitBuilder = new Retrofit.Builder();\n-    }\n+    // FIXME(trustin): Do some caching.\n+    private BiFunction<? super EndpointGroup, ? super HttpUrl, ? extends WebClient> webClientMapping =\n+            (endpointGroup, url) -> WebClient.of(url.isHttps() ? SessionProtocol.HTTPS : SessionProtocol.HTTP,\n+                                                 endpointGroup);\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(String baseUrl) {\n-        return baseUrl(URI.create(requireNonNull(baseUrl, \"baseUrl\")));\n+    ArmeriaRetrofitBuilder(HttpUrl baseUrl) {\n+        retrofitBuilder = new Retrofit.Builder().baseUrl(baseUrl);\n     }\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(URI baseUrl) {\n-        requireNonNull(baseUrl, \"baseUrl\");\n-        checkArgument(SessionProtocol.find(baseUrl.getScheme()) != null,\n-                      \"baseUrl must have an HTTP scheme: %s\", baseUrl);\n-        final String path = baseUrl.getPath();\n-        if (!path.isEmpty() && !SLASH.equals(path.substring(path.length() - 1))) {\n-            throw new IllegalArgumentException(\"baseUrl must end with /: \" + baseUrl);\n-        }\n-        this.baseUrl = baseUrl.toString();\n+    public ArmeriaRetrofitBuilder endpointGroup(\n+            Function<? super HttpUrl, ? extends EndpointGroup> endpointGroupMapping) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e116a7ccdb2993a1364d5529fb72132aba094808"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA4MTc5MA==", "bodyText": "Retrofit has an interesting annotation called @Url which allows a user to send a request to an arbitrary URL, and a user should be able to choose an EndpointGroup in that case, too. See ArmeriaCallFactoryTest.urlAnnotation*() for examples.", "url": "https://github.com/line/armeria/pull/2381#discussion_r364081790", "createdAt": "2020-01-08T06:38:23Z", "author": {"login": "trustin"}, "path": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaRetrofitBuilder.java", "diffHunk": "@@ -77,91 +84,47 @@\n     private static final String SLASH = \"/\";\n \n     private final Retrofit.Builder retrofitBuilder;\n-    private final ClientFactory clientFactory;\n-    @Nullable\n-    private String baseUrl;\n+    private final ImmutableMap.Builder<String, EndpointGroup> endpointGroups = ImmutableMap.builder();\n+\n     private boolean streaming;\n     private Executor callbackExecutor = CommonPools.blockingTaskExecutor();\n-    private BiFunction<String, ? super ClientOptionsBuilder, ClientOptionsBuilder> configurator =\n-            DEFAULT_CONFIGURATOR;\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the default {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder() {\n-        this(ClientFactory.ofDefault());\n-    }\n+    private Function<? super HttpUrl, ? extends EndpointGroup> endpointGroupMapping =\n+            url -> Endpoint.of(url.host(), url.port());\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the specified {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder(ClientFactory clientFactory) {\n-        this.clientFactory = requireNonNull(clientFactory, \"clientFactory\");\n-        retrofitBuilder = new Retrofit.Builder();\n-    }\n+    // FIXME(trustin): Do some caching.\n+    private BiFunction<? super EndpointGroup, ? super HttpUrl, ? extends WebClient> webClientMapping =\n+            (endpointGroup, url) -> WebClient.of(url.isHttps() ? SessionProtocol.HTTPS : SessionProtocol.HTTP,\n+                                                 endpointGroup);\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(String baseUrl) {\n-        return baseUrl(URI.create(requireNonNull(baseUrl, \"baseUrl\")));\n+    ArmeriaRetrofitBuilder(HttpUrl baseUrl) {\n+        retrofitBuilder = new Retrofit.Builder().baseUrl(baseUrl);\n     }\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(URI baseUrl) {\n-        requireNonNull(baseUrl, \"baseUrl\");\n-        checkArgument(SessionProtocol.find(baseUrl.getScheme()) != null,\n-                      \"baseUrl must have an HTTP scheme: %s\", baseUrl);\n-        final String path = baseUrl.getPath();\n-        if (!path.isEmpty() && !SLASH.equals(path.substring(path.length() - 1))) {\n-            throw new IllegalArgumentException(\"baseUrl must end with /: \" + baseUrl);\n-        }\n-        this.baseUrl = baseUrl.toString();\n+    public ArmeriaRetrofitBuilder endpointGroup(\n+            Function<? super HttpUrl, ? extends EndpointGroup> endpointGroupMapping) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA3MTE5Nw=="}, "originalCommit": {"oid": "e116a7ccdb2993a1364d5529fb72132aba094808"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA4NTE4Ng==", "bodyText": "I think it's similar to webclient as well when issuing a request to absolute URL. I guess it would still send to the registered endpoint group and just change the host header. I don't know if we really need to allow @Url to resolve to an endpoint group - if the client has no endpoint group registered the URL can be resolved dynamically, if it does we just send to the registered endpoint group changing the host header. This seems simpler than using a mapping and I think preserves retrofit behavior well in the case of no endpoint group.", "url": "https://github.com/line/armeria/pull/2381#discussion_r364085186", "createdAt": "2020-01-08T06:55:37Z", "author": {"login": "anuraaga"}, "path": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaRetrofitBuilder.java", "diffHunk": "@@ -77,91 +84,47 @@\n     private static final String SLASH = \"/\";\n \n     private final Retrofit.Builder retrofitBuilder;\n-    private final ClientFactory clientFactory;\n-    @Nullable\n-    private String baseUrl;\n+    private final ImmutableMap.Builder<String, EndpointGroup> endpointGroups = ImmutableMap.builder();\n+\n     private boolean streaming;\n     private Executor callbackExecutor = CommonPools.blockingTaskExecutor();\n-    private BiFunction<String, ? super ClientOptionsBuilder, ClientOptionsBuilder> configurator =\n-            DEFAULT_CONFIGURATOR;\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the default {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder() {\n-        this(ClientFactory.ofDefault());\n-    }\n+    private Function<? super HttpUrl, ? extends EndpointGroup> endpointGroupMapping =\n+            url -> Endpoint.of(url.host(), url.port());\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the specified {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder(ClientFactory clientFactory) {\n-        this.clientFactory = requireNonNull(clientFactory, \"clientFactory\");\n-        retrofitBuilder = new Retrofit.Builder();\n-    }\n+    // FIXME(trustin): Do some caching.\n+    private BiFunction<? super EndpointGroup, ? super HttpUrl, ? extends WebClient> webClientMapping =\n+            (endpointGroup, url) -> WebClient.of(url.isHttps() ? SessionProtocol.HTTPS : SessionProtocol.HTTP,\n+                                                 endpointGroup);\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(String baseUrl) {\n-        return baseUrl(URI.create(requireNonNull(baseUrl, \"baseUrl\")));\n+    ArmeriaRetrofitBuilder(HttpUrl baseUrl) {\n+        retrofitBuilder = new Retrofit.Builder().baseUrl(baseUrl);\n     }\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(URI baseUrl) {\n-        requireNonNull(baseUrl, \"baseUrl\");\n-        checkArgument(SessionProtocol.find(baseUrl.getScheme()) != null,\n-                      \"baseUrl must have an HTTP scheme: %s\", baseUrl);\n-        final String path = baseUrl.getPath();\n-        if (!path.isEmpty() && !SLASH.equals(path.substring(path.length() - 1))) {\n-            throw new IllegalArgumentException(\"baseUrl must end with /: \" + baseUrl);\n-        }\n-        this.baseUrl = baseUrl.toString();\n+    public ArmeriaRetrofitBuilder endpointGroup(\n+            Function<? super HttpUrl, ? extends EndpointGroup> endpointGroupMapping) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA3MTE5Nw=="}, "originalCommit": {"oid": "e116a7ccdb2993a1364d5529fb72132aba094808"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA5NDEzNQ==", "bodyText": "Not sure I understood what you suggest. Could you elaborate?", "url": "https://github.com/line/armeria/pull/2381#discussion_r364094135", "createdAt": "2020-01-08T07:32:46Z", "author": {"login": "trustin"}, "path": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaRetrofitBuilder.java", "diffHunk": "@@ -77,91 +84,47 @@\n     private static final String SLASH = \"/\";\n \n     private final Retrofit.Builder retrofitBuilder;\n-    private final ClientFactory clientFactory;\n-    @Nullable\n-    private String baseUrl;\n+    private final ImmutableMap.Builder<String, EndpointGroup> endpointGroups = ImmutableMap.builder();\n+\n     private boolean streaming;\n     private Executor callbackExecutor = CommonPools.blockingTaskExecutor();\n-    private BiFunction<String, ? super ClientOptionsBuilder, ClientOptionsBuilder> configurator =\n-            DEFAULT_CONFIGURATOR;\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the default {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder() {\n-        this(ClientFactory.ofDefault());\n-    }\n+    private Function<? super HttpUrl, ? extends EndpointGroup> endpointGroupMapping =\n+            url -> Endpoint.of(url.host(), url.port());\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the specified {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder(ClientFactory clientFactory) {\n-        this.clientFactory = requireNonNull(clientFactory, \"clientFactory\");\n-        retrofitBuilder = new Retrofit.Builder();\n-    }\n+    // FIXME(trustin): Do some caching.\n+    private BiFunction<? super EndpointGroup, ? super HttpUrl, ? extends WebClient> webClientMapping =\n+            (endpointGroup, url) -> WebClient.of(url.isHttps() ? SessionProtocol.HTTPS : SessionProtocol.HTTP,\n+                                                 endpointGroup);\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(String baseUrl) {\n-        return baseUrl(URI.create(requireNonNull(baseUrl, \"baseUrl\")));\n+    ArmeriaRetrofitBuilder(HttpUrl baseUrl) {\n+        retrofitBuilder = new Retrofit.Builder().baseUrl(baseUrl);\n     }\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(URI baseUrl) {\n-        requireNonNull(baseUrl, \"baseUrl\");\n-        checkArgument(SessionProtocol.find(baseUrl.getScheme()) != null,\n-                      \"baseUrl must have an HTTP scheme: %s\", baseUrl);\n-        final String path = baseUrl.getPath();\n-        if (!path.isEmpty() && !SLASH.equals(path.substring(path.length() - 1))) {\n-            throw new IllegalArgumentException(\"baseUrl must end with /: \" + baseUrl);\n-        }\n-        this.baseUrl = baseUrl.toString();\n+    public ArmeriaRetrofitBuilder endpointGroup(\n+            Function<? super HttpUrl, ? extends EndpointGroup> endpointGroupMapping) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA3MTE5Nw=="}, "originalCommit": {"oid": "e116a7ccdb2993a1364d5529fb72132aba094808"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA5OTY5Ng==", "bodyText": "if the client has no endpoint group registered, the URL can be resolved dynamically, if it does, we just send to the registered endpoint group changing the host header.\n\nThere can be more than one EndpointGroup involved here, so some kind of mapping is inevitable:\nEndpointGroup groupA = ...;\nEndpointGroup groupB = ...;\n\nArmeriaRetrofit.builder(\"https://group-a/\")\n               .endpointGroup(url -> {\n                   switch(url.host()) {\n                       case \"group-a\": return groupA;\n                       case \"group-b\": return groupB;\n                       default: Endpoint.of(url.host(), url.port());\n                   }\n               })\n               .build();\n\nservice.fullUrl(\"https://group-b/foo\");", "url": "https://github.com/line/armeria/pull/2381#discussion_r364099696", "createdAt": "2020-01-08T07:52:11Z", "author": {"login": "trustin"}, "path": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaRetrofitBuilder.java", "diffHunk": "@@ -77,91 +84,47 @@\n     private static final String SLASH = \"/\";\n \n     private final Retrofit.Builder retrofitBuilder;\n-    private final ClientFactory clientFactory;\n-    @Nullable\n-    private String baseUrl;\n+    private final ImmutableMap.Builder<String, EndpointGroup> endpointGroups = ImmutableMap.builder();\n+\n     private boolean streaming;\n     private Executor callbackExecutor = CommonPools.blockingTaskExecutor();\n-    private BiFunction<String, ? super ClientOptionsBuilder, ClientOptionsBuilder> configurator =\n-            DEFAULT_CONFIGURATOR;\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the default {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder() {\n-        this(ClientFactory.ofDefault());\n-    }\n+    private Function<? super HttpUrl, ? extends EndpointGroup> endpointGroupMapping =\n+            url -> Endpoint.of(url.host(), url.port());\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the specified {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder(ClientFactory clientFactory) {\n-        this.clientFactory = requireNonNull(clientFactory, \"clientFactory\");\n-        retrofitBuilder = new Retrofit.Builder();\n-    }\n+    // FIXME(trustin): Do some caching.\n+    private BiFunction<? super EndpointGroup, ? super HttpUrl, ? extends WebClient> webClientMapping =\n+            (endpointGroup, url) -> WebClient.of(url.isHttps() ? SessionProtocol.HTTPS : SessionProtocol.HTTP,\n+                                                 endpointGroup);\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(String baseUrl) {\n-        return baseUrl(URI.create(requireNonNull(baseUrl, \"baseUrl\")));\n+    ArmeriaRetrofitBuilder(HttpUrl baseUrl) {\n+        retrofitBuilder = new Retrofit.Builder().baseUrl(baseUrl);\n     }\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(URI baseUrl) {\n-        requireNonNull(baseUrl, \"baseUrl\");\n-        checkArgument(SessionProtocol.find(baseUrl.getScheme()) != null,\n-                      \"baseUrl must have an HTTP scheme: %s\", baseUrl);\n-        final String path = baseUrl.getPath();\n-        if (!path.isEmpty() && !SLASH.equals(path.substring(path.length() - 1))) {\n-            throw new IllegalArgumentException(\"baseUrl must end with /: \" + baseUrl);\n-        }\n-        this.baseUrl = baseUrl.toString();\n+    public ArmeriaRetrofitBuilder endpointGroup(\n+            Function<? super HttpUrl, ? extends EndpointGroup> endpointGroupMapping) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA3MTE5Nw=="}, "originalCommit": {"oid": "e116a7ccdb2993a1364d5529fb72132aba094808"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDEwMjM4Ng==", "bodyText": "I think I can simplify this at least for the case when no @Url annotation is used, like making it unnecessary to call .endpointGroup() at all.", "url": "https://github.com/line/armeria/pull/2381#discussion_r364102386", "createdAt": "2020-01-08T08:01:52Z", "author": {"login": "trustin"}, "path": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaRetrofitBuilder.java", "diffHunk": "@@ -77,91 +84,47 @@\n     private static final String SLASH = \"/\";\n \n     private final Retrofit.Builder retrofitBuilder;\n-    private final ClientFactory clientFactory;\n-    @Nullable\n-    private String baseUrl;\n+    private final ImmutableMap.Builder<String, EndpointGroup> endpointGroups = ImmutableMap.builder();\n+\n     private boolean streaming;\n     private Executor callbackExecutor = CommonPools.blockingTaskExecutor();\n-    private BiFunction<String, ? super ClientOptionsBuilder, ClientOptionsBuilder> configurator =\n-            DEFAULT_CONFIGURATOR;\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the default {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder() {\n-        this(ClientFactory.ofDefault());\n-    }\n+    private Function<? super HttpUrl, ? extends EndpointGroup> endpointGroupMapping =\n+            url -> Endpoint.of(url.host(), url.port());\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the specified {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder(ClientFactory clientFactory) {\n-        this.clientFactory = requireNonNull(clientFactory, \"clientFactory\");\n-        retrofitBuilder = new Retrofit.Builder();\n-    }\n+    // FIXME(trustin): Do some caching.\n+    private BiFunction<? super EndpointGroup, ? super HttpUrl, ? extends WebClient> webClientMapping =\n+            (endpointGroup, url) -> WebClient.of(url.isHttps() ? SessionProtocol.HTTPS : SessionProtocol.HTTP,\n+                                                 endpointGroup);\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(String baseUrl) {\n-        return baseUrl(URI.create(requireNonNull(baseUrl, \"baseUrl\")));\n+    ArmeriaRetrofitBuilder(HttpUrl baseUrl) {\n+        retrofitBuilder = new Retrofit.Builder().baseUrl(baseUrl);\n     }\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(URI baseUrl) {\n-        requireNonNull(baseUrl, \"baseUrl\");\n-        checkArgument(SessionProtocol.find(baseUrl.getScheme()) != null,\n-                      \"baseUrl must have an HTTP scheme: %s\", baseUrl);\n-        final String path = baseUrl.getPath();\n-        if (!path.isEmpty() && !SLASH.equals(path.substring(path.length() - 1))) {\n-            throw new IllegalArgumentException(\"baseUrl must end with /: \" + baseUrl);\n-        }\n-        this.baseUrl = baseUrl.toString();\n+    public ArmeriaRetrofitBuilder endpointGroup(\n+            Function<? super HttpUrl, ? extends EndpointGroup> endpointGroupMapping) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA3MTE5Nw=="}, "originalCommit": {"oid": "e116a7ccdb2993a1364d5529fb72132aba094808"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDEwMzcyMw==", "bodyText": "Alternatively, we could provide a WebClient wrapper which intercepts a request and translates a certain host to an EndpointGroup, instead of providing this functionality only in armeria-retrofit. However, I'm not sure if it's a good idea. Maybe an overkill?", "url": "https://github.com/line/armeria/pull/2381#discussion_r364103723", "createdAt": "2020-01-08T08:06:19Z", "author": {"login": "trustin"}, "path": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaRetrofitBuilder.java", "diffHunk": "@@ -77,91 +84,47 @@\n     private static final String SLASH = \"/\";\n \n     private final Retrofit.Builder retrofitBuilder;\n-    private final ClientFactory clientFactory;\n-    @Nullable\n-    private String baseUrl;\n+    private final ImmutableMap.Builder<String, EndpointGroup> endpointGroups = ImmutableMap.builder();\n+\n     private boolean streaming;\n     private Executor callbackExecutor = CommonPools.blockingTaskExecutor();\n-    private BiFunction<String, ? super ClientOptionsBuilder, ClientOptionsBuilder> configurator =\n-            DEFAULT_CONFIGURATOR;\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the default {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder() {\n-        this(ClientFactory.ofDefault());\n-    }\n+    private Function<? super HttpUrl, ? extends EndpointGroup> endpointGroupMapping =\n+            url -> Endpoint.of(url.host(), url.port());\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the specified {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder(ClientFactory clientFactory) {\n-        this.clientFactory = requireNonNull(clientFactory, \"clientFactory\");\n-        retrofitBuilder = new Retrofit.Builder();\n-    }\n+    // FIXME(trustin): Do some caching.\n+    private BiFunction<? super EndpointGroup, ? super HttpUrl, ? extends WebClient> webClientMapping =\n+            (endpointGroup, url) -> WebClient.of(url.isHttps() ? SessionProtocol.HTTPS : SessionProtocol.HTTP,\n+                                                 endpointGroup);\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(String baseUrl) {\n-        return baseUrl(URI.create(requireNonNull(baseUrl, \"baseUrl\")));\n+    ArmeriaRetrofitBuilder(HttpUrl baseUrl) {\n+        retrofitBuilder = new Retrofit.Builder().baseUrl(baseUrl);\n     }\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(URI baseUrl) {\n-        requireNonNull(baseUrl, \"baseUrl\");\n-        checkArgument(SessionProtocol.find(baseUrl.getScheme()) != null,\n-                      \"baseUrl must have an HTTP scheme: %s\", baseUrl);\n-        final String path = baseUrl.getPath();\n-        if (!path.isEmpty() && !SLASH.equals(path.substring(path.length() - 1))) {\n-            throw new IllegalArgumentException(\"baseUrl must end with /: \" + baseUrl);\n-        }\n-        this.baseUrl = baseUrl.toString();\n+    public ArmeriaRetrofitBuilder endpointGroup(\n+            Function<? super HttpUrl, ? extends EndpointGroup> endpointGroupMapping) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA3MTE5Nw=="}, "originalCommit": {"oid": "e116a7ccdb2993a1364d5529fb72132aba094808"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDEyODc3Ng==", "bodyText": "I'm still finding that having multiple endpoint groups at this layer seems like overkill. URLs are basically host header / TLS but are somewhat independent from endpoint group - we resolve them to an endpoint when a user doesn't provide their own, but otherwise should just use the user specified endpoint independent of host. I think in common usage it will almost always be one endpoint group per client, and worse case a user can make multiple clients.\nAlso realized that it seems like if a user really needs host-aware endpoint selection, it could be fairly simply implemented as an endpoint selector that delegates to group selectors based on host?", "url": "https://github.com/line/armeria/pull/2381#discussion_r364128776", "createdAt": "2020-01-08T09:14:20Z", "author": {"login": "anuraaga"}, "path": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaRetrofitBuilder.java", "diffHunk": "@@ -77,91 +84,47 @@\n     private static final String SLASH = \"/\";\n \n     private final Retrofit.Builder retrofitBuilder;\n-    private final ClientFactory clientFactory;\n-    @Nullable\n-    private String baseUrl;\n+    private final ImmutableMap.Builder<String, EndpointGroup> endpointGroups = ImmutableMap.builder();\n+\n     private boolean streaming;\n     private Executor callbackExecutor = CommonPools.blockingTaskExecutor();\n-    private BiFunction<String, ? super ClientOptionsBuilder, ClientOptionsBuilder> configurator =\n-            DEFAULT_CONFIGURATOR;\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the default {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder() {\n-        this(ClientFactory.ofDefault());\n-    }\n+    private Function<? super HttpUrl, ? extends EndpointGroup> endpointGroupMapping =\n+            url -> Endpoint.of(url.host(), url.port());\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the specified {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder(ClientFactory clientFactory) {\n-        this.clientFactory = requireNonNull(clientFactory, \"clientFactory\");\n-        retrofitBuilder = new Retrofit.Builder();\n-    }\n+    // FIXME(trustin): Do some caching.\n+    private BiFunction<? super EndpointGroup, ? super HttpUrl, ? extends WebClient> webClientMapping =\n+            (endpointGroup, url) -> WebClient.of(url.isHttps() ? SessionProtocol.HTTPS : SessionProtocol.HTTP,\n+                                                 endpointGroup);\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(String baseUrl) {\n-        return baseUrl(URI.create(requireNonNull(baseUrl, \"baseUrl\")));\n+    ArmeriaRetrofitBuilder(HttpUrl baseUrl) {\n+        retrofitBuilder = new Retrofit.Builder().baseUrl(baseUrl);\n     }\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(URI baseUrl) {\n-        requireNonNull(baseUrl, \"baseUrl\");\n-        checkArgument(SessionProtocol.find(baseUrl.getScheme()) != null,\n-                      \"baseUrl must have an HTTP scheme: %s\", baseUrl);\n-        final String path = baseUrl.getPath();\n-        if (!path.isEmpty() && !SLASH.equals(path.substring(path.length() - 1))) {\n-            throw new IllegalArgumentException(\"baseUrl must end with /: \" + baseUrl);\n-        }\n-        this.baseUrl = baseUrl.toString();\n+    public ArmeriaRetrofitBuilder endpointGroup(\n+            Function<? super HttpUrl, ? extends EndpointGroup> endpointGroupMapping) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA3MTE5Nw=="}, "originalCommit": {"oid": "e116a7ccdb2993a1364d5529fb72132aba094808"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI5MzA2Nw==", "bodyText": "It should look somewhat better now. What do you think?\n\nA user can now specify the base WebClient when building Retrofit with ArmeriaRetrofit.\n\nIn most cases, a user can specify a customized WebClient here.\n\n\nRemoved ArmeriaRetrofitBuilder.endpointGroup()\nReplaced ArmeriaRetrofitBuilder.webClient() with nonBaseWebClientFactory().\n\nThe biggest difference from the previous version is that it is used only for non-base URLs, i.e. a user does not need to call this in most cases.\nA user can still replace a certain host with an EndpointGroup to leverage client-side load-balancing for non-base URLs. (See the example in nonBaseClientFactory() Javadoc)", "url": "https://github.com/line/armeria/pull/2381#discussion_r364293067", "createdAt": "2020-01-08T15:35:06Z", "author": {"login": "trustin"}, "path": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaRetrofitBuilder.java", "diffHunk": "@@ -77,91 +84,47 @@\n     private static final String SLASH = \"/\";\n \n     private final Retrofit.Builder retrofitBuilder;\n-    private final ClientFactory clientFactory;\n-    @Nullable\n-    private String baseUrl;\n+    private final ImmutableMap.Builder<String, EndpointGroup> endpointGroups = ImmutableMap.builder();\n+\n     private boolean streaming;\n     private Executor callbackExecutor = CommonPools.blockingTaskExecutor();\n-    private BiFunction<String, ? super ClientOptionsBuilder, ClientOptionsBuilder> configurator =\n-            DEFAULT_CONFIGURATOR;\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the default {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder() {\n-        this(ClientFactory.ofDefault());\n-    }\n+    private Function<? super HttpUrl, ? extends EndpointGroup> endpointGroupMapping =\n+            url -> Endpoint.of(url.host(), url.port());\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the specified {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder(ClientFactory clientFactory) {\n-        this.clientFactory = requireNonNull(clientFactory, \"clientFactory\");\n-        retrofitBuilder = new Retrofit.Builder();\n-    }\n+    // FIXME(trustin): Do some caching.\n+    private BiFunction<? super EndpointGroup, ? super HttpUrl, ? extends WebClient> webClientMapping =\n+            (endpointGroup, url) -> WebClient.of(url.isHttps() ? SessionProtocol.HTTPS : SessionProtocol.HTTP,\n+                                                 endpointGroup);\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(String baseUrl) {\n-        return baseUrl(URI.create(requireNonNull(baseUrl, \"baseUrl\")));\n+    ArmeriaRetrofitBuilder(HttpUrl baseUrl) {\n+        retrofitBuilder = new Retrofit.Builder().baseUrl(baseUrl);\n     }\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(URI baseUrl) {\n-        requireNonNull(baseUrl, \"baseUrl\");\n-        checkArgument(SessionProtocol.find(baseUrl.getScheme()) != null,\n-                      \"baseUrl must have an HTTP scheme: %s\", baseUrl);\n-        final String path = baseUrl.getPath();\n-        if (!path.isEmpty() && !SLASH.equals(path.substring(path.length() - 1))) {\n-            throw new IllegalArgumentException(\"baseUrl must end with /: \" + baseUrl);\n-        }\n-        this.baseUrl = baseUrl.toString();\n+    public ArmeriaRetrofitBuilder endpointGroup(\n+            Function<? super HttpUrl, ? extends EndpointGroup> endpointGroupMapping) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA3MTE5Nw=="}, "originalCommit": {"oid": "e116a7ccdb2993a1364d5529fb72132aba094808"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODkwNjM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/DecoratingClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwODo1MDoyNlrOFbQDXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwOTowMjoyOVrOFbu0Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDExODg3Ng==", "bodyText": "nit: delegate().newClient( -> newClient(", "url": "https://github.com/line/armeria/pull/2381#discussion_r364118876", "createdAt": "2020-01-08T08:50:26Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/DecoratingClientFactory.java", "diffHunk": "@@ -49,10 +49,28 @@ protected DecoratingClientFactory(ClientFactory delegate) {\n     /**\n      * Returns the delegate {@link ClientFactory}.\n      */\n-    protected ClientFactory delegate() {\n+    protected final ClientFactory delegate() {\n         return delegate;\n     }\n \n+    /**\n+     * Creates a new {@link HttpClient} which uses the same {@link SessionProtocol}, {@link EndpointGroup} and\n+     * {@link ClientOptions} with the specified {@link ClientBuilderParams}. Note that {@code path} and\n+     * {@link SerializationFormat} are always {@code \"/\"} and {@link SerializationFormat#NONE}.\n+     */\n+    protected final HttpClient newHttpClientDelegate(ClientBuilderParams params) {\n+        final URI uri = params.uri();\n+        if (Clients.isUndefinedUri(uri)) {\n+            return (HttpClient) delegate().newClient(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49f25836b8460fd9e3a92a2f9fbc797c77adb07"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYyMjg1MA==", "bodyText": "I think delegate() is correct because a DecoratingClientFactory usually has HttpClientFactory as its delegate. It's not very clear, though. Let me make this method require a ClientFactory explicitly.", "url": "https://github.com/line/armeria/pull/2381#discussion_r364622850", "createdAt": "2020-01-09T09:02:29Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/DecoratingClientFactory.java", "diffHunk": "@@ -49,10 +49,28 @@ protected DecoratingClientFactory(ClientFactory delegate) {\n     /**\n      * Returns the delegate {@link ClientFactory}.\n      */\n-    protected ClientFactory delegate() {\n+    protected final ClientFactory delegate() {\n         return delegate;\n     }\n \n+    /**\n+     * Creates a new {@link HttpClient} which uses the same {@link SessionProtocol}, {@link EndpointGroup} and\n+     * {@link ClientOptions} with the specified {@link ClientBuilderParams}. Note that {@code path} and\n+     * {@link SerializationFormat} are always {@code \"/\"} and {@link SerializationFormat#NONE}.\n+     */\n+    protected final HttpClient newHttpClientDelegate(ClientBuilderParams params) {\n+        final URI uri = params.uri();\n+        if (Clients.isUndefinedUri(uri)) {\n+            return (HttpClient) delegate().newClient(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDExODg3Ng=="}, "originalCommit": {"oid": "d49f25836b8460fd9e3a92a2f9fbc797c77adb07"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODkwNjY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/DecoratingClientFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwODo1MDozNFrOFbQDjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwODo1MDozNFrOFbQDjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDExODkyNg==", "bodyText": "ditto", "url": "https://github.com/line/armeria/pull/2381#discussion_r364118926", "createdAt": "2020-01-08T08:50:34Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/DecoratingClientFactory.java", "diffHunk": "@@ -49,10 +49,28 @@ protected DecoratingClientFactory(ClientFactory delegate) {\n     /**\n      * Returns the delegate {@link ClientFactory}.\n      */\n-    protected ClientFactory delegate() {\n+    protected final ClientFactory delegate() {\n         return delegate;\n     }\n \n+    /**\n+     * Creates a new {@link HttpClient} which uses the same {@link SessionProtocol}, {@link EndpointGroup} and\n+     * {@link ClientOptions} with the specified {@link ClientBuilderParams}. Note that {@code path} and\n+     * {@link SerializationFormat} are always {@code \"/\"} and {@link SerializationFormat#NONE}.\n+     */\n+    protected final HttpClient newHttpClientDelegate(ClientBuilderParams params) {\n+        final URI uri = params.uri();\n+        if (Clients.isUndefinedUri(uri)) {\n+            return (HttpClient) delegate().newClient(\n+                    ClientBuilderParams.of(delegate(), uri, HttpClient.class, params.options()));\n+        }\n+\n+        final Scheme newScheme = Scheme.of(SerializationFormat.NONE, params.scheme().sessionProtocol());\n+        return (HttpClient) delegate().newClient(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49f25836b8460fd9e3a92a2f9fbc797c77adb07"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODkyMTgyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientBuilderParams.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwODo1NjowNVrOFbQMdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwODo1NjowNVrOFbQMdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDEyMTIwNA==", "bodyText": "Perhaps, it's good to check the path is absolute by checking the first character?", "url": "https://github.com/line/armeria/pull/2381#discussion_r364121204", "createdAt": "2020-01-08T08:56:05Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientBuilderParams.java", "diffHunk": "@@ -43,16 +54,80 @@\n     public DefaultClientBuilderParams(ClientFactory factory, URI uri, Class<?> type,\n                                       ClientOptions options) {\n         this.factory = requireNonNull(factory, \"factory\");\n-        this.uri = requireNonNull(uri, \"uri\");\n+        this.uri = factory.validateUri(uri);\n+        this.type = requireNonNull(type, \"type\");\n+        this.options = requireNonNull(options, \"options\");\n+\n+        scheme = factory.validateScheme(Scheme.parse(uri.getScheme()));\n+        endpointGroup = Endpoint.parse(uri.getRawAuthority());\n+\n+        final StringBuilder buf = TemporaryThreadLocals.get().stringBuilder();\n+        buf.append(nullOrEmptyToSlash(uri.getRawPath()));\n+        if (uri.getRawQuery() != null) {\n+            buf.append('?').append(uri.getRawQuery());\n+        }\n+        if (uri.getRawFragment() != null) {\n+            buf.append('#').append(uri.getRawFragment());\n+        }\n+        absolutePathRef = buf.toString();\n+    }\n+\n+    DefaultClientBuilderParams(ClientFactory factory, Scheme scheme, EndpointGroup endpointGroup,\n+                               @Nullable String absolutePathRef,\n+                               Class<?> type, ClientOptions options) {\n+        this.factory = requireNonNull(factory, \"factory\");\n+        this.scheme = factory.validateScheme(scheme);\n+        this.endpointGroup = requireNonNull(endpointGroup, \"endpointGroup\");\n         this.type = requireNonNull(type, \"type\");\n         this.options = requireNonNull(options, \"options\");\n+\n+        final String schemeStr;\n+        if (scheme.serializationFormat() == SerializationFormat.NONE) {\n+            schemeStr = scheme.sessionProtocol().uriText();\n+        } else {\n+            schemeStr = scheme.uriText();\n+        }\n+\n+        final String normalizedAbsolutePathRef = nullOrEmptyToSlash(absolutePathRef);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49f25836b8460fd9e3a92a2f9fbc797c77adb07"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODk4Mjc3OnYy", "diffSide": "LEFT", "path": "core/src/main/java/com/linecorp/armeria/client/Endpoint.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwOToxODo1OFrOFbQxiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwOToxODo1OFrOFbQxiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDEzMDY5Nw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/line/armeria/pull/2381#discussion_r364130697", "createdAt": "2020-01-08T09:18:58Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/Endpoint.java", "diffHunk": "@@ -165,93 +148,55 @@ private static Endpoint create(String host, int port) {\n         IPv6_ONLY\n     }\n \n-    @Nullable\n-    private final String groupName;\n-    @Nullable\n     private final String host;\n     @Nullable\n     private final String ipAddr;\n     private final int port;\n     private final int weight;\n     private final List<Endpoint> endpoints;\n-    @Nullable // null if this endpoint is a group.\n     private final HostType hostType;\n     @Nullable\n     private String authority;\n \n-    private Endpoint(String groupName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49f25836b8460fd9e3a92a2f9fbc797c77adb07"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTgyMTA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNjozNTowM1rOFbsCeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNjozNTowM1rOFbsCeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3NzQwMQ==", "bodyText": "How about expected: an absolute path starting with /? Actually I misunderstood at first and in a quick search found a couple other places that use the word absolute path to refer to an absolute url (starting with host)\nhttp://www.geeksengine.com/article/absolute-relative-path.html\nhttps://www.coffeecup.com/help/articles/absolute-vs-relative-pathslinks/", "url": "https://github.com/line/armeria/pull/2381#discussion_r364577401", "createdAt": "2020-01-09T06:35:03Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientBuilder.java", "diffHunk": "@@ -143,17 +145,18 @@ public ClientBuilder factory(ClientFactory factory) {\n      * Sets the {@code path} of the client.\n      */\n     public ClientBuilder path(String path) {\n-        ensureEndpoint();\n-\n-        this.path = requireNonNull(path, \"path\");\n+        ensureEndpointGroup();\n+        requireNonNull(path, \"path\");\n+        checkArgument(path.startsWith(\"/\"), \"path: %s (expected: an absolute path)\", path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e9410b21a3fbc3793432b3ec887126bc1a11a74"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTgyMjg2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientBuilder.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNjozNjoyNFrOFbsDnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMjo1OToxMFrOFcTYnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3NzY5Mg==", "bodyText": "Maybe overkill but had a thought there is probably a compile-time way of ensuring this (UriClientBuilder vs EndpointClientBuilder interfaces)", "url": "https://github.com/line/armeria/pull/2381#discussion_r364577692", "createdAt": "2020-01-09T06:36:24Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientBuilder.java", "diffHunk": "@@ -173,24 +176,29 @@ public ClientBuilder serializationFormat(SerializationFormat format) {\n     public <T> T build(Class<T> clientType) {\n         requireNonNull(clientType, \"clientType\");\n \n+        final Object client;\n         if (uri != null) {\n-            return factory.newClient(uri, clientType, buildOptions());\n-        } else if (path != null) {\n-            return factory.newClient(scheme(), endpoint, path, clientType, buildOptions());\n+            client = factory.newClient(ClientBuilderParams.of(factory, uri, clientType, buildOptions()));\n         } else {\n-            return factory.newClient(scheme(), endpoint, clientType, buildOptions());\n+            assert endpointGroup != null;\n+            client = factory.newClient(ClientBuilderParams.of(factory, scheme(), endpointGroup,\n+                                                              path, clientType, buildOptions()));\n         }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        final T cast = (T) client;\n+        return cast;\n     }\n \n     private Scheme scheme() {\n         return scheme == null ? Scheme.of(format, protocol) : scheme;\n     }\n \n-    private void ensureEndpoint() {\n-        if (endpoint == null) {\n+    private void ensureEndpointGroup() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e9410b21a3fbc3793432b3ec887126bc1a11a74"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1NDQwMg==", "bodyText": "Good point. We will also need the same for WebClientBuilder. Maybe it's too much? \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2381#discussion_r364754402", "createdAt": "2020-01-09T14:04:10Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientBuilder.java", "diffHunk": "@@ -173,24 +176,29 @@ public ClientBuilder serializationFormat(SerializationFormat format) {\n     public <T> T build(Class<T> clientType) {\n         requireNonNull(clientType, \"clientType\");\n \n+        final Object client;\n         if (uri != null) {\n-            return factory.newClient(uri, clientType, buildOptions());\n-        } else if (path != null) {\n-            return factory.newClient(scheme(), endpoint, path, clientType, buildOptions());\n+            client = factory.newClient(ClientBuilderParams.of(factory, uri, clientType, buildOptions()));\n         } else {\n-            return factory.newClient(scheme(), endpoint, clientType, buildOptions());\n+            assert endpointGroup != null;\n+            client = factory.newClient(ClientBuilderParams.of(factory, scheme(), endpointGroup,\n+                                                              path, clientType, buildOptions()));\n         }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        final T cast = (T) client;\n+        return cast;\n     }\n \n     private Scheme scheme() {\n         return scheme == null ? Scheme.of(format, protocol) : scheme;\n     }\n \n-    private void ensureEndpoint() {\n-        if (endpoint == null) {\n+    private void ensureEndpointGroup() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3NzY5Mg=="}, "originalCommit": {"oid": "0e9410b21a3fbc3793432b3ec887126bc1a11a74"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTExNTI4MA==", "bodyText": "So are we doing this or not? \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2381#discussion_r365115280", "createdAt": "2020-01-10T08:19:08Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientBuilder.java", "diffHunk": "@@ -173,24 +176,29 @@ public ClientBuilder serializationFormat(SerializationFormat format) {\n     public <T> T build(Class<T> clientType) {\n         requireNonNull(clientType, \"clientType\");\n \n+        final Object client;\n         if (uri != null) {\n-            return factory.newClient(uri, clientType, buildOptions());\n-        } else if (path != null) {\n-            return factory.newClient(scheme(), endpoint, path, clientType, buildOptions());\n+            client = factory.newClient(ClientBuilderParams.of(factory, uri, clientType, buildOptions()));\n         } else {\n-            return factory.newClient(scheme(), endpoint, clientType, buildOptions());\n+            assert endpointGroup != null;\n+            client = factory.newClient(ClientBuilderParams.of(factory, scheme(), endpointGroup,\n+                                                              path, clientType, buildOptions()));\n         }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        final T cast = (T) client;\n+        return cast;\n     }\n \n     private Scheme scheme() {\n         return scheme == null ? Scheme.of(format, protocol) : scheme;\n     }\n \n-    private void ensureEndpoint() {\n-        if (endpoint == null) {\n+    private void ensureEndpointGroup() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3NzY5Mg=="}, "originalCommit": {"oid": "0e9410b21a3fbc3793432b3ec887126bc1a11a74"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIyMjA0Nw==", "bodyText": "Not? \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2381#discussion_r365222047", "createdAt": "2020-01-10T12:59:10Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientBuilder.java", "diffHunk": "@@ -173,24 +176,29 @@ public ClientBuilder serializationFormat(SerializationFormat format) {\n     public <T> T build(Class<T> clientType) {\n         requireNonNull(clientType, \"clientType\");\n \n+        final Object client;\n         if (uri != null) {\n-            return factory.newClient(uri, clientType, buildOptions());\n-        } else if (path != null) {\n-            return factory.newClient(scheme(), endpoint, path, clientType, buildOptions());\n+            client = factory.newClient(ClientBuilderParams.of(factory, uri, clientType, buildOptions()));\n         } else {\n-            return factory.newClient(scheme(), endpoint, clientType, buildOptions());\n+            assert endpointGroup != null;\n+            client = factory.newClient(ClientBuilderParams.of(factory, scheme(), endpointGroup,\n+                                                              path, clientType, buildOptions()));\n         }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        final T cast = (T) client;\n+        return cast;\n     }\n \n     private Scheme scheme() {\n         return scheme == null ? Scheme.of(format, protocol) : scheme;\n     }\n \n-    private void ensureEndpoint() {\n-        if (endpoint == null) {\n+    private void ensureEndpointGroup() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3NzY5Mg=="}, "originalCommit": {"oid": "0e9410b21a3fbc3793432b3ec887126bc1a11a74"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTg0ODE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/DefaultWebClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNjo1MzowN1rOFbsSJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwODo1OTowNVrOFbuuzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU4MTQxMw==", "bodyText": "So I guess here if the request is to an absolute URI, there's no way to make it use an endpoint group. This seems fine to me since endpoint groups are generally well known anyways and users can have a client for each. Why do we support endpoint group resolution of @Url for retrofit, but not here?", "url": "https://github.com/line/armeria/pull/2381#discussion_r364581413", "createdAt": "2020-01-09T06:53:07Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/DefaultWebClient.java", "diffHunk": "@@ -69,7 +67,7 @@ public HttpResponse execute(HttpRequest req) {\n             return execute(endpoint, newReq);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e9410b21a3fbc3793432b3ec887126bc1a11a74"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU5ODI4OQ==", "bodyText": "Yeah, I thought about this briefly but wasn't sure which is a better place. Let me play with this idea.", "url": "https://github.com/line/armeria/pull/2381#discussion_r364598289", "createdAt": "2020-01-09T07:56:17Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/DefaultWebClient.java", "diffHunk": "@@ -69,7 +67,7 @@ public HttpResponse execute(HttpRequest req) {\n             return execute(endpoint, newReq);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU4MTQxMw=="}, "originalCommit": {"oid": "0e9410b21a3fbc3793432b3ec887126bc1a11a74"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYyMTUxNg==", "bodyText": "Added WebClientOptions.ENDPOINT_REMAPPER and moved endpoint remapping to DeaultWebClient.", "url": "https://github.com/line/armeria/pull/2381#discussion_r364621516", "createdAt": "2020-01-09T08:59:05Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/DefaultWebClient.java", "diffHunk": "@@ -69,7 +67,7 @@ public HttpResponse execute(HttpRequest req) {\n             return execute(endpoint, newReq);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU4MTQxMw=="}, "originalCommit": {"oid": "0e9410b21a3fbc3793432b3ec887126bc1a11a74"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTg1NTU3OnYy", "diffSide": "LEFT", "path": "core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNjo1Nzo1NlrOFbsWcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNjo1Nzo1NlrOFbsWcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU4MjUxNA==", "bodyText": "Nice cleanup :)", "url": "https://github.com/line/armeria/pull/2381#discussion_r364582514", "createdAt": "2020-01-09T06:57:56Z", "author": {"login": "anuraaga"}, "path": "core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java", "diffHunk": "@@ -420,20 +418,14 @@ void testUnresolvedEndpointWithAlternateAuthority() throws Exception {\n     }\n \n     private static void testEndpointWithAlternateAuthority(EndpointGroup group) {\n-        final String groupName = \"testEndpointWithAlternateAuthority\";\n-        EndpointGroupRegistry.register(groupName, group, EndpointSelectionStrategy.ROUND_ROBIN);\n-        try {\n-            final WebClient client = WebClient.builder(\"http://group:\" + groupName)\n-                                              .setHttpHeader(HttpHeaderNames.AUTHORITY,\n-                                                             \"255.255.255.255.xip.io\")\n-                                              .build();\n-\n-            final AggregatedHttpResponse res = client.get(\"/hello/world\").aggregate().join();\n-            assertThat(res.status()).isEqualTo(HttpStatus.OK);\n-            assertThat(res.contentUtf8()).isEqualTo(\"success\");\n-        } finally {\n-            EndpointGroupRegistry.unregister(groupName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e9410b21a3fbc3793432b3ec887126bc1a11a74"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTg3MzgxOnYy", "diffSide": "RIGHT", "path": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaRetrofitBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNzowOTozM1rOFbshFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwOTowMDoxN1rOFbuwjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU4NTIzNw==", "bodyText": "Since normal usage doesn't need to worry about this, I guess it's ok. But doesn't it seem like too advanced functionality? The asymmetry vs WebClient (the one I pointed to above) seems unnatural too - if we really want this functionality, we could move it to a ClientOption so it applies to both?\nAnd while it doesn't actually solve the asymmetry problem by itself, I'm wondering whether we could just let the EndpointSelector layer take care of it, it seems simpler to reason about and don't even need to worry about a client cache\nclass HostAwareEndpointGroup implements EndpointGroup {\n  public Endpoint select(ClientRequestContext ctx) {\n    switch (ctx.request().authority()) {\n      case \"group-bar\":\n        return groupBarEndpointGroup.select(ctx);\n      ...", "url": "https://github.com/line/armeria/pull/2381#discussion_r364585237", "createdAt": "2020-01-09T07:09:33Z", "author": {"login": "anuraaga"}, "path": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaRetrofitBuilder.java", "diffHunk": "@@ -41,127 +39,118 @@\n import retrofit2.Callback;\n import retrofit2.Converter;\n import retrofit2.Retrofit;\n-import retrofit2.Retrofit.Builder;\n import retrofit2.http.Streaming;\n \n /**\n- * A helper class for creating a new {@link Retrofit} instance with {@link ArmeriaCallFactory}.\n- * For example,\n- *\n- * <pre>{@code\n- * Retrofit retrofit = new ArmeriaRetrofitBuilder()\n- *     .baseUrl(\"http://localhost:8080/\")\n- *     .build();\n- *\n- * MyApi api = retrofit.create(MyApi.class);\n- * Response<User> user = api.getUser().execute();\n- * }</pre>\n- *\n- * <p>{@link ArmeriaRetrofitBuilder} even supports {@link EndpointGroup}, so you can create {@link Retrofit}\n- * like below,\n+ * A builder that creates a {@link Retrofit} which uses {@link WebClient} for sending requests.\n  *\n- * <pre>{@code\n- * EndpointGroupRegistry.register(\"foo\",\n- *                                new StaticEndpointGroup(Endpoint.of(\"127.0.0.1\", 8080)),\n- *                                ROUND_ROBIN);\n- *\n- * Retrofit retrofit = new ArmeriaRetrofitBuilder()\n- *     .baseUrl(\"http://group:foo/\")\n- *     .build();\n- * }</pre>\n+ * @see ArmeriaRetrofit\n  */\n public final class ArmeriaRetrofitBuilder {\n \n-    private static final BiFunction<String, ? super ClientOptionsBuilder, ClientOptionsBuilder>\n-            DEFAULT_CONFIGURATOR = (url, optionsBuilder) -> optionsBuilder;\n-    private static final String SLASH = \"/\";\n-\n     private final Retrofit.Builder retrofitBuilder;\n-    private final ClientFactory clientFactory;\n-    @Nullable\n-    private String baseUrl;\n+    private final String baseWebClientHost;\n+    private final int baseWebClientPort;\n+    private final WebClient baseWebClient;\n+\n     private boolean streaming;\n     private Executor callbackExecutor = CommonPools.blockingTaskExecutor();\n-    private BiFunction<String, ? super ClientOptionsBuilder, ClientOptionsBuilder> configurator =\n-            DEFAULT_CONFIGURATOR;\n+    private BiFunction<? super SessionProtocol, ? super HttpUrl, ? extends WebClient> nonBaseClientFactory;\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the default {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder() {\n-        this(ClientFactory.ofDefault());\n-    }\n+    ArmeriaRetrofitBuilder(WebClient webClient) {\n+        final URI uri = webClient.uri();\n+        final SessionProtocol protocol = webClient.scheme().sessionProtocol();\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the specified {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder(ClientFactory clientFactory) {\n-        this.clientFactory = requireNonNull(clientFactory, \"clientFactory\");\n-        retrofitBuilder = new Retrofit.Builder();\n-    }\n+        // Build a baseUrl that will pass Retrofit's validation.\n+        final HttpUrl baseUrl = HttpUrl.get((protocol.isTls() ? \"https\" : \"http\") +\n+                                            uri.toString().substring(protocol.uriText().length()));\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(String baseUrl) {\n-        return baseUrl(URI.create(requireNonNull(baseUrl, \"baseUrl\")));\n-    }\n+        retrofitBuilder = new Retrofit.Builder().baseUrl(baseUrl);\n+        baseWebClientHost = baseUrl.host();\n+        baseWebClientPort = baseUrl.port();\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(URI baseUrl) {\n-        requireNonNull(baseUrl, \"baseUrl\");\n-        checkArgument(SessionProtocol.find(baseUrl.getScheme()) != null,\n-                      \"baseUrl must have an HTTP scheme: %s\", baseUrl);\n-        final String path = baseUrl.getPath();\n-        if (!path.isEmpty() && !SLASH.equals(path.substring(path.length() - 1))) {\n-            throw new IllegalArgumentException(\"baseUrl must end with /: \" + baseUrl);\n-        }\n-        this.baseUrl = baseUrl.toString();\n-        return this;\n-    }\n+        // Re-create the base client without a path, because Retrofit will always provide a full path.\n+        baseWebClient = WebClient.builder(protocol,\n+                                          webClient.endpointGroup())\n+                                 .factory(webClient.factory())\n+                                 .options(webClient.options())\n+                                 .build();\n \n-    /**\n-     * Sets the {@link ClientOptions} that customizes the underlying {@link WebClient}.\n-     * This method can be useful if you already have an Armeria client and want to reuse its configuration,\n-     * such as using the same decorators.\n-     * <pre>{@code\n-     * WebClient myClient = ...;\n-     * // Use the same settings and decorators with `myClient` when sending requests.\n-     * builder.clientOptions(myClient.options());\n-     * }</pre>\n-     */\n-    public ArmeriaRetrofitBuilder clientOptions(ClientOptions clientOptions) {\n-        requireNonNull(clientOptions, \"clientOptions\");\n-        return withClientOptions((uri, b) -> b.options(clientOptions));\n+        nonBaseClientFactory = (p, url) -> WebClient.builder(p, Endpoint.of(url.host(), url.port()))\n+                                                    .factory(baseWebClient.factory())\n+                                                    .options(baseWebClient.options())\n+                                                    .build();\n     }\n \n     /**\n-     * Sets the {@link BiFunction} that customizes the underlying {@link WebClient}.\n+     * Specifies the {@link BiFunction} that creates a new non-base {@link WebClient}, which is used for\n+     * sending requests to other authorities than that of base URL. If not specified, the non-base\n+     * {@link WebClient} will have the same options with the base {@link WebClient}, which was specified\n+     * with {@link ArmeriaRetrofit#of(WebClient)} or {@link ArmeriaRetrofit#builder(WebClient)}.\n+     *\n+     * <p>To avoid the overhead of repetitive instantiation of {@link WebClient}s, the {@link WebClient}s\n+     * returned by the specified {@link BiFunction} will be cached for each combination of:\n+     * <ul>\n+     *   <li>Whether the connection is secured (HTTPS or HTTPS)</li>\n+     *   <li>Host name</li>\n+     *   <li>Port number</li>\n+     * </ul></p>\n+     *\n+     * <p>You can use this method to create a customized non-base {@link WebClient}, for example to send\n+     * an additional header, override the timeout, enforce HTTP/1 or even override the target host:\n      * <pre>{@code\n-     * builder.withClientOptions((uri, b) -> {\n-     *     if (uri.startsWith(\"https://foo.com/\")) {\n-     *         return b.setHttpHeader(HttpHeaders.AUTHORIZATION,\n-     *                                \"bearer my-access-token\")\n-     *                 .responseTimeout(Duration.ofSeconds(3));\n-     *     } else {\n-     *         return b;\n-     *     }\n-     * });\n-     * }</pre>\n+     * EndpointGroup groupFoo = EndpointGroup.of(Endpoint.of(\"node-1.foo.com\"),\n+     *                                           Endpoint.of(\"node-2.foo.com\"));\n+     * EndpointGroup groupBar = EndpointGroup.of(Endpoint.of(\"node-1.bar.com\"),\n+     *                                           Endpoint.of(\"node-2.bar.com\"));\n+     *\n+     * WebClient defaultWebClient = WebClient.of(SessionProtocol.HTTP, groupFoo);\n+     *\n+     * ArmeriaRetrofit.builder(defaultWebClient)\n+     *                .nonBaseClientFactory((protocol, url) -> {\n+     *                    // Enforce HTTP/1.\n+     *                    final SessionProtocol actualProtocol =\n+     *                            protocol.isTls() ? SessionProtocol.H1 : SessionProtocol.H1C;\n+     *\n+     *                    final EndpointGroup actualEndpointGroup;\n+     *                    if (\"group-bar\".equals(url.host())) {\n+     *                        // Client-side load-balancing:\n+     *                        // - Make the request go to 'node-1.bar.com' or 'node-2.bar.com'\n+     *                        //   if the target host is 'group-bar'.\n+     *                        actualEndpointGroup = groupBar;\n+     *                    } else {\n+     *                        // Use the given host and port otherwise.\n+     *                        actualEndpointGroup = Endpoint.of(url.host(), url.port());\n+     *                    }\n      *\n-     * @param configurator a {@link BiFunction} whose first argument is the the URI of the server endpoint and\n-     *                     whose second argument is the {@link ClientOptionsBuilder} with default options of\n-     *                     the new derived client\n+     *                    return WebClient.builder(actualProtocol, actualEndpointGroup)\n+     *                                    // Derive most settings from 'defaultWebClient'.\n+     *                                    .factory(defaultWebClient.factory())\n+     *                                    .options(defaultWebClient.options())\n+     *                                    // Set a custom header.\n+     *                                    .setHttpHeader(HttpHeaderNames.AUTHORIZATION,\n+     *                                                   \"bearer my-access-token\")\n+     *                                    // Override the timeout.\n+     *                                    .responseTimeout(Duration.ofSeconds(30))\n+     *                                    .build();\n+     *                })\n+     *                .build();\n+     * }</pre></p>\n+     *\n+     * <p>Note that the specified {@link BiFunction} is not used for sending requests to the base URL's\n+     * authority. The default {@link WebClient} specified with {@link ArmeriaRetrofit#of(WebClient)} or\n+     * {@link ArmeriaRetrofit#builder(WebClient)} will be used instead for such requests:\n+     * <pre>{@code\n+     * // No need to use 'nonBaseClientFactory()' method.\n+     * ArmeriaRetrofit.of(WebClient.builder(\"http://example.com/\")\n+     *                             .setHttpHeader(HttpHeaderNames.AUTHORIZATION,\n+     *                                            \"bearer my-access-token\")\n+     *                             .build());\n+     * }</pre></p>\n      */\n-    public ArmeriaRetrofitBuilder withClientOptions(\n-            BiFunction<String, ? super ClientOptionsBuilder, ClientOptionsBuilder> configurator) {\n-        this.configurator = requireNonNull(configurator, \"configurator\");\n+    public ArmeriaRetrofitBuilder nonBaseClientFactory(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e9410b21a3fbc3793432b3ec887126bc1a11a74"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYyMTk2Ng==", "bodyText": "I think ENDPOINT_REMAPPER option handles this better. What do you think?", "url": "https://github.com/line/armeria/pull/2381#discussion_r364621966", "createdAt": "2020-01-09T09:00:17Z", "author": {"login": "trustin"}, "path": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaRetrofitBuilder.java", "diffHunk": "@@ -41,127 +39,118 @@\n import retrofit2.Callback;\n import retrofit2.Converter;\n import retrofit2.Retrofit;\n-import retrofit2.Retrofit.Builder;\n import retrofit2.http.Streaming;\n \n /**\n- * A helper class for creating a new {@link Retrofit} instance with {@link ArmeriaCallFactory}.\n- * For example,\n- *\n- * <pre>{@code\n- * Retrofit retrofit = new ArmeriaRetrofitBuilder()\n- *     .baseUrl(\"http://localhost:8080/\")\n- *     .build();\n- *\n- * MyApi api = retrofit.create(MyApi.class);\n- * Response<User> user = api.getUser().execute();\n- * }</pre>\n- *\n- * <p>{@link ArmeriaRetrofitBuilder} even supports {@link EndpointGroup}, so you can create {@link Retrofit}\n- * like below,\n+ * A builder that creates a {@link Retrofit} which uses {@link WebClient} for sending requests.\n  *\n- * <pre>{@code\n- * EndpointGroupRegistry.register(\"foo\",\n- *                                new StaticEndpointGroup(Endpoint.of(\"127.0.0.1\", 8080)),\n- *                                ROUND_ROBIN);\n- *\n- * Retrofit retrofit = new ArmeriaRetrofitBuilder()\n- *     .baseUrl(\"http://group:foo/\")\n- *     .build();\n- * }</pre>\n+ * @see ArmeriaRetrofit\n  */\n public final class ArmeriaRetrofitBuilder {\n \n-    private static final BiFunction<String, ? super ClientOptionsBuilder, ClientOptionsBuilder>\n-            DEFAULT_CONFIGURATOR = (url, optionsBuilder) -> optionsBuilder;\n-    private static final String SLASH = \"/\";\n-\n     private final Retrofit.Builder retrofitBuilder;\n-    private final ClientFactory clientFactory;\n-    @Nullable\n-    private String baseUrl;\n+    private final String baseWebClientHost;\n+    private final int baseWebClientPort;\n+    private final WebClient baseWebClient;\n+\n     private boolean streaming;\n     private Executor callbackExecutor = CommonPools.blockingTaskExecutor();\n-    private BiFunction<String, ? super ClientOptionsBuilder, ClientOptionsBuilder> configurator =\n-            DEFAULT_CONFIGURATOR;\n+    private BiFunction<? super SessionProtocol, ? super HttpUrl, ? extends WebClient> nonBaseClientFactory;\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the default {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder() {\n-        this(ClientFactory.ofDefault());\n-    }\n+    ArmeriaRetrofitBuilder(WebClient webClient) {\n+        final URI uri = webClient.uri();\n+        final SessionProtocol protocol = webClient.scheme().sessionProtocol();\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the specified {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder(ClientFactory clientFactory) {\n-        this.clientFactory = requireNonNull(clientFactory, \"clientFactory\");\n-        retrofitBuilder = new Retrofit.Builder();\n-    }\n+        // Build a baseUrl that will pass Retrofit's validation.\n+        final HttpUrl baseUrl = HttpUrl.get((protocol.isTls() ? \"https\" : \"http\") +\n+                                            uri.toString().substring(protocol.uriText().length()));\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(String baseUrl) {\n-        return baseUrl(URI.create(requireNonNull(baseUrl, \"baseUrl\")));\n-    }\n+        retrofitBuilder = new Retrofit.Builder().baseUrl(baseUrl);\n+        baseWebClientHost = baseUrl.host();\n+        baseWebClientPort = baseUrl.port();\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(URI baseUrl) {\n-        requireNonNull(baseUrl, \"baseUrl\");\n-        checkArgument(SessionProtocol.find(baseUrl.getScheme()) != null,\n-                      \"baseUrl must have an HTTP scheme: %s\", baseUrl);\n-        final String path = baseUrl.getPath();\n-        if (!path.isEmpty() && !SLASH.equals(path.substring(path.length() - 1))) {\n-            throw new IllegalArgumentException(\"baseUrl must end with /: \" + baseUrl);\n-        }\n-        this.baseUrl = baseUrl.toString();\n-        return this;\n-    }\n+        // Re-create the base client without a path, because Retrofit will always provide a full path.\n+        baseWebClient = WebClient.builder(protocol,\n+                                          webClient.endpointGroup())\n+                                 .factory(webClient.factory())\n+                                 .options(webClient.options())\n+                                 .build();\n \n-    /**\n-     * Sets the {@link ClientOptions} that customizes the underlying {@link WebClient}.\n-     * This method can be useful if you already have an Armeria client and want to reuse its configuration,\n-     * such as using the same decorators.\n-     * <pre>{@code\n-     * WebClient myClient = ...;\n-     * // Use the same settings and decorators with `myClient` when sending requests.\n-     * builder.clientOptions(myClient.options());\n-     * }</pre>\n-     */\n-    public ArmeriaRetrofitBuilder clientOptions(ClientOptions clientOptions) {\n-        requireNonNull(clientOptions, \"clientOptions\");\n-        return withClientOptions((uri, b) -> b.options(clientOptions));\n+        nonBaseClientFactory = (p, url) -> WebClient.builder(p, Endpoint.of(url.host(), url.port()))\n+                                                    .factory(baseWebClient.factory())\n+                                                    .options(baseWebClient.options())\n+                                                    .build();\n     }\n \n     /**\n-     * Sets the {@link BiFunction} that customizes the underlying {@link WebClient}.\n+     * Specifies the {@link BiFunction} that creates a new non-base {@link WebClient}, which is used for\n+     * sending requests to other authorities than that of base URL. If not specified, the non-base\n+     * {@link WebClient} will have the same options with the base {@link WebClient}, which was specified\n+     * with {@link ArmeriaRetrofit#of(WebClient)} or {@link ArmeriaRetrofit#builder(WebClient)}.\n+     *\n+     * <p>To avoid the overhead of repetitive instantiation of {@link WebClient}s, the {@link WebClient}s\n+     * returned by the specified {@link BiFunction} will be cached for each combination of:\n+     * <ul>\n+     *   <li>Whether the connection is secured (HTTPS or HTTPS)</li>\n+     *   <li>Host name</li>\n+     *   <li>Port number</li>\n+     * </ul></p>\n+     *\n+     * <p>You can use this method to create a customized non-base {@link WebClient}, for example to send\n+     * an additional header, override the timeout, enforce HTTP/1 or even override the target host:\n      * <pre>{@code\n-     * builder.withClientOptions((uri, b) -> {\n-     *     if (uri.startsWith(\"https://foo.com/\")) {\n-     *         return b.setHttpHeader(HttpHeaders.AUTHORIZATION,\n-     *                                \"bearer my-access-token\")\n-     *                 .responseTimeout(Duration.ofSeconds(3));\n-     *     } else {\n-     *         return b;\n-     *     }\n-     * });\n-     * }</pre>\n+     * EndpointGroup groupFoo = EndpointGroup.of(Endpoint.of(\"node-1.foo.com\"),\n+     *                                           Endpoint.of(\"node-2.foo.com\"));\n+     * EndpointGroup groupBar = EndpointGroup.of(Endpoint.of(\"node-1.bar.com\"),\n+     *                                           Endpoint.of(\"node-2.bar.com\"));\n+     *\n+     * WebClient defaultWebClient = WebClient.of(SessionProtocol.HTTP, groupFoo);\n+     *\n+     * ArmeriaRetrofit.builder(defaultWebClient)\n+     *                .nonBaseClientFactory((protocol, url) -> {\n+     *                    // Enforce HTTP/1.\n+     *                    final SessionProtocol actualProtocol =\n+     *                            protocol.isTls() ? SessionProtocol.H1 : SessionProtocol.H1C;\n+     *\n+     *                    final EndpointGroup actualEndpointGroup;\n+     *                    if (\"group-bar\".equals(url.host())) {\n+     *                        // Client-side load-balancing:\n+     *                        // - Make the request go to 'node-1.bar.com' or 'node-2.bar.com'\n+     *                        //   if the target host is 'group-bar'.\n+     *                        actualEndpointGroup = groupBar;\n+     *                    } else {\n+     *                        // Use the given host and port otherwise.\n+     *                        actualEndpointGroup = Endpoint.of(url.host(), url.port());\n+     *                    }\n      *\n-     * @param configurator a {@link BiFunction} whose first argument is the the URI of the server endpoint and\n-     *                     whose second argument is the {@link ClientOptionsBuilder} with default options of\n-     *                     the new derived client\n+     *                    return WebClient.builder(actualProtocol, actualEndpointGroup)\n+     *                                    // Derive most settings from 'defaultWebClient'.\n+     *                                    .factory(defaultWebClient.factory())\n+     *                                    .options(defaultWebClient.options())\n+     *                                    // Set a custom header.\n+     *                                    .setHttpHeader(HttpHeaderNames.AUTHORIZATION,\n+     *                                                   \"bearer my-access-token\")\n+     *                                    // Override the timeout.\n+     *                                    .responseTimeout(Duration.ofSeconds(30))\n+     *                                    .build();\n+     *                })\n+     *                .build();\n+     * }</pre></p>\n+     *\n+     * <p>Note that the specified {@link BiFunction} is not used for sending requests to the base URL's\n+     * authority. The default {@link WebClient} specified with {@link ArmeriaRetrofit#of(WebClient)} or\n+     * {@link ArmeriaRetrofit#builder(WebClient)} will be used instead for such requests:\n+     * <pre>{@code\n+     * // No need to use 'nonBaseClientFactory()' method.\n+     * ArmeriaRetrofit.of(WebClient.builder(\"http://example.com/\")\n+     *                             .setHttpHeader(HttpHeaderNames.AUTHORIZATION,\n+     *                                            \"bearer my-access-token\")\n+     *                             .build());\n+     * }</pre></p>\n      */\n-    public ArmeriaRetrofitBuilder withClientOptions(\n-            BiFunction<String, ? super ClientOptionsBuilder, ClientOptionsBuilder> configurator) {\n-        this.configurator = requireNonNull(configurator, \"configurator\");\n+    public ArmeriaRetrofitBuilder nonBaseClientFactory(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU4NTIzNw=="}, "originalCommit": {"oid": "0e9410b21a3fbc3793432b3ec887126bc1a11a74"}, "originalPosition": 242}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTg4MDE1OnYy", "diffSide": "RIGHT", "path": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaRetrofitBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNzoxMzozOVrOFbsksg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwODo1ODowNFrOFbutHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU4NjE2Mg==", "bodyText": "If this is the cache key, I guess it should only be these three fields that are passed to the callback, not HttpUrl - it's possible to create a broken callback if inspecting other fields of HttpUrl.", "url": "https://github.com/line/armeria/pull/2381#discussion_r364586162", "createdAt": "2020-01-09T07:13:39Z", "author": {"login": "anuraaga"}, "path": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaRetrofitBuilder.java", "diffHunk": "@@ -41,127 +39,118 @@\n import retrofit2.Callback;\n import retrofit2.Converter;\n import retrofit2.Retrofit;\n-import retrofit2.Retrofit.Builder;\n import retrofit2.http.Streaming;\n \n /**\n- * A helper class for creating a new {@link Retrofit} instance with {@link ArmeriaCallFactory}.\n- * For example,\n- *\n- * <pre>{@code\n- * Retrofit retrofit = new ArmeriaRetrofitBuilder()\n- *     .baseUrl(\"http://localhost:8080/\")\n- *     .build();\n- *\n- * MyApi api = retrofit.create(MyApi.class);\n- * Response<User> user = api.getUser().execute();\n- * }</pre>\n- *\n- * <p>{@link ArmeriaRetrofitBuilder} even supports {@link EndpointGroup}, so you can create {@link Retrofit}\n- * like below,\n+ * A builder that creates a {@link Retrofit} which uses {@link WebClient} for sending requests.\n  *\n- * <pre>{@code\n- * EndpointGroupRegistry.register(\"foo\",\n- *                                new StaticEndpointGroup(Endpoint.of(\"127.0.0.1\", 8080)),\n- *                                ROUND_ROBIN);\n- *\n- * Retrofit retrofit = new ArmeriaRetrofitBuilder()\n- *     .baseUrl(\"http://group:foo/\")\n- *     .build();\n- * }</pre>\n+ * @see ArmeriaRetrofit\n  */\n public final class ArmeriaRetrofitBuilder {\n \n-    private static final BiFunction<String, ? super ClientOptionsBuilder, ClientOptionsBuilder>\n-            DEFAULT_CONFIGURATOR = (url, optionsBuilder) -> optionsBuilder;\n-    private static final String SLASH = \"/\";\n-\n     private final Retrofit.Builder retrofitBuilder;\n-    private final ClientFactory clientFactory;\n-    @Nullable\n-    private String baseUrl;\n+    private final String baseWebClientHost;\n+    private final int baseWebClientPort;\n+    private final WebClient baseWebClient;\n+\n     private boolean streaming;\n     private Executor callbackExecutor = CommonPools.blockingTaskExecutor();\n-    private BiFunction<String, ? super ClientOptionsBuilder, ClientOptionsBuilder> configurator =\n-            DEFAULT_CONFIGURATOR;\n+    private BiFunction<? super SessionProtocol, ? super HttpUrl, ? extends WebClient> nonBaseClientFactory;\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the default {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder() {\n-        this(ClientFactory.ofDefault());\n-    }\n+    ArmeriaRetrofitBuilder(WebClient webClient) {\n+        final URI uri = webClient.uri();\n+        final SessionProtocol protocol = webClient.scheme().sessionProtocol();\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the specified {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder(ClientFactory clientFactory) {\n-        this.clientFactory = requireNonNull(clientFactory, \"clientFactory\");\n-        retrofitBuilder = new Retrofit.Builder();\n-    }\n+        // Build a baseUrl that will pass Retrofit's validation.\n+        final HttpUrl baseUrl = HttpUrl.get((protocol.isTls() ? \"https\" : \"http\") +\n+                                            uri.toString().substring(protocol.uriText().length()));\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(String baseUrl) {\n-        return baseUrl(URI.create(requireNonNull(baseUrl, \"baseUrl\")));\n-    }\n+        retrofitBuilder = new Retrofit.Builder().baseUrl(baseUrl);\n+        baseWebClientHost = baseUrl.host();\n+        baseWebClientPort = baseUrl.port();\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(URI baseUrl) {\n-        requireNonNull(baseUrl, \"baseUrl\");\n-        checkArgument(SessionProtocol.find(baseUrl.getScheme()) != null,\n-                      \"baseUrl must have an HTTP scheme: %s\", baseUrl);\n-        final String path = baseUrl.getPath();\n-        if (!path.isEmpty() && !SLASH.equals(path.substring(path.length() - 1))) {\n-            throw new IllegalArgumentException(\"baseUrl must end with /: \" + baseUrl);\n-        }\n-        this.baseUrl = baseUrl.toString();\n-        return this;\n-    }\n+        // Re-create the base client without a path, because Retrofit will always provide a full path.\n+        baseWebClient = WebClient.builder(protocol,\n+                                          webClient.endpointGroup())\n+                                 .factory(webClient.factory())\n+                                 .options(webClient.options())\n+                                 .build();\n \n-    /**\n-     * Sets the {@link ClientOptions} that customizes the underlying {@link WebClient}.\n-     * This method can be useful if you already have an Armeria client and want to reuse its configuration,\n-     * such as using the same decorators.\n-     * <pre>{@code\n-     * WebClient myClient = ...;\n-     * // Use the same settings and decorators with `myClient` when sending requests.\n-     * builder.clientOptions(myClient.options());\n-     * }</pre>\n-     */\n-    public ArmeriaRetrofitBuilder clientOptions(ClientOptions clientOptions) {\n-        requireNonNull(clientOptions, \"clientOptions\");\n-        return withClientOptions((uri, b) -> b.options(clientOptions));\n+        nonBaseClientFactory = (p, url) -> WebClient.builder(p, Endpoint.of(url.host(), url.port()))\n+                                                    .factory(baseWebClient.factory())\n+                                                    .options(baseWebClient.options())\n+                                                    .build();\n     }\n \n     /**\n-     * Sets the {@link BiFunction} that customizes the underlying {@link WebClient}.\n+     * Specifies the {@link BiFunction} that creates a new non-base {@link WebClient}, which is used for\n+     * sending requests to other authorities than that of base URL. If not specified, the non-base\n+     * {@link WebClient} will have the same options with the base {@link WebClient}, which was specified\n+     * with {@link ArmeriaRetrofit#of(WebClient)} or {@link ArmeriaRetrofit#builder(WebClient)}.\n+     *\n+     * <p>To avoid the overhead of repetitive instantiation of {@link WebClient}s, the {@link WebClient}s\n+     * returned by the specified {@link BiFunction} will be cached for each combination of:\n+     * <ul>\n+     *   <li>Whether the connection is secured (HTTPS or HTTPS)</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e9410b21a3fbc3793432b3ec887126bc1a11a74"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU5OTAwMg==", "bodyText": "I didn't want to bother adding a factory interface, so... \ud83d\ude06 Let me try to clean it up.", "url": "https://github.com/line/armeria/pull/2381#discussion_r364599002", "createdAt": "2020-01-09T07:58:31Z", "author": {"login": "trustin"}, "path": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaRetrofitBuilder.java", "diffHunk": "@@ -41,127 +39,118 @@\n import retrofit2.Callback;\n import retrofit2.Converter;\n import retrofit2.Retrofit;\n-import retrofit2.Retrofit.Builder;\n import retrofit2.http.Streaming;\n \n /**\n- * A helper class for creating a new {@link Retrofit} instance with {@link ArmeriaCallFactory}.\n- * For example,\n- *\n- * <pre>{@code\n- * Retrofit retrofit = new ArmeriaRetrofitBuilder()\n- *     .baseUrl(\"http://localhost:8080/\")\n- *     .build();\n- *\n- * MyApi api = retrofit.create(MyApi.class);\n- * Response<User> user = api.getUser().execute();\n- * }</pre>\n- *\n- * <p>{@link ArmeriaRetrofitBuilder} even supports {@link EndpointGroup}, so you can create {@link Retrofit}\n- * like below,\n+ * A builder that creates a {@link Retrofit} which uses {@link WebClient} for sending requests.\n  *\n- * <pre>{@code\n- * EndpointGroupRegistry.register(\"foo\",\n- *                                new StaticEndpointGroup(Endpoint.of(\"127.0.0.1\", 8080)),\n- *                                ROUND_ROBIN);\n- *\n- * Retrofit retrofit = new ArmeriaRetrofitBuilder()\n- *     .baseUrl(\"http://group:foo/\")\n- *     .build();\n- * }</pre>\n+ * @see ArmeriaRetrofit\n  */\n public final class ArmeriaRetrofitBuilder {\n \n-    private static final BiFunction<String, ? super ClientOptionsBuilder, ClientOptionsBuilder>\n-            DEFAULT_CONFIGURATOR = (url, optionsBuilder) -> optionsBuilder;\n-    private static final String SLASH = \"/\";\n-\n     private final Retrofit.Builder retrofitBuilder;\n-    private final ClientFactory clientFactory;\n-    @Nullable\n-    private String baseUrl;\n+    private final String baseWebClientHost;\n+    private final int baseWebClientPort;\n+    private final WebClient baseWebClient;\n+\n     private boolean streaming;\n     private Executor callbackExecutor = CommonPools.blockingTaskExecutor();\n-    private BiFunction<String, ? super ClientOptionsBuilder, ClientOptionsBuilder> configurator =\n-            DEFAULT_CONFIGURATOR;\n+    private BiFunction<? super SessionProtocol, ? super HttpUrl, ? extends WebClient> nonBaseClientFactory;\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the default {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder() {\n-        this(ClientFactory.ofDefault());\n-    }\n+    ArmeriaRetrofitBuilder(WebClient webClient) {\n+        final URI uri = webClient.uri();\n+        final SessionProtocol protocol = webClient.scheme().sessionProtocol();\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the specified {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder(ClientFactory clientFactory) {\n-        this.clientFactory = requireNonNull(clientFactory, \"clientFactory\");\n-        retrofitBuilder = new Retrofit.Builder();\n-    }\n+        // Build a baseUrl that will pass Retrofit's validation.\n+        final HttpUrl baseUrl = HttpUrl.get((protocol.isTls() ? \"https\" : \"http\") +\n+                                            uri.toString().substring(protocol.uriText().length()));\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(String baseUrl) {\n-        return baseUrl(URI.create(requireNonNull(baseUrl, \"baseUrl\")));\n-    }\n+        retrofitBuilder = new Retrofit.Builder().baseUrl(baseUrl);\n+        baseWebClientHost = baseUrl.host();\n+        baseWebClientPort = baseUrl.port();\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(URI baseUrl) {\n-        requireNonNull(baseUrl, \"baseUrl\");\n-        checkArgument(SessionProtocol.find(baseUrl.getScheme()) != null,\n-                      \"baseUrl must have an HTTP scheme: %s\", baseUrl);\n-        final String path = baseUrl.getPath();\n-        if (!path.isEmpty() && !SLASH.equals(path.substring(path.length() - 1))) {\n-            throw new IllegalArgumentException(\"baseUrl must end with /: \" + baseUrl);\n-        }\n-        this.baseUrl = baseUrl.toString();\n-        return this;\n-    }\n+        // Re-create the base client without a path, because Retrofit will always provide a full path.\n+        baseWebClient = WebClient.builder(protocol,\n+                                          webClient.endpointGroup())\n+                                 .factory(webClient.factory())\n+                                 .options(webClient.options())\n+                                 .build();\n \n-    /**\n-     * Sets the {@link ClientOptions} that customizes the underlying {@link WebClient}.\n-     * This method can be useful if you already have an Armeria client and want to reuse its configuration,\n-     * such as using the same decorators.\n-     * <pre>{@code\n-     * WebClient myClient = ...;\n-     * // Use the same settings and decorators with `myClient` when sending requests.\n-     * builder.clientOptions(myClient.options());\n-     * }</pre>\n-     */\n-    public ArmeriaRetrofitBuilder clientOptions(ClientOptions clientOptions) {\n-        requireNonNull(clientOptions, \"clientOptions\");\n-        return withClientOptions((uri, b) -> b.options(clientOptions));\n+        nonBaseClientFactory = (p, url) -> WebClient.builder(p, Endpoint.of(url.host(), url.port()))\n+                                                    .factory(baseWebClient.factory())\n+                                                    .options(baseWebClient.options())\n+                                                    .build();\n     }\n \n     /**\n-     * Sets the {@link BiFunction} that customizes the underlying {@link WebClient}.\n+     * Specifies the {@link BiFunction} that creates a new non-base {@link WebClient}, which is used for\n+     * sending requests to other authorities than that of base URL. If not specified, the non-base\n+     * {@link WebClient} will have the same options with the base {@link WebClient}, which was specified\n+     * with {@link ArmeriaRetrofit#of(WebClient)} or {@link ArmeriaRetrofit#builder(WebClient)}.\n+     *\n+     * <p>To avoid the overhead of repetitive instantiation of {@link WebClient}s, the {@link WebClient}s\n+     * returned by the specified {@link BiFunction} will be cached for each combination of:\n+     * <ul>\n+     *   <li>Whether the connection is secured (HTTPS or HTTPS)</li>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU4NjE2Mg=="}, "originalCommit": {"oid": "0e9410b21a3fbc3793432b3ec887126bc1a11a74"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYyMTA4NA==", "bodyText": "Just fixed by passing Endpoint instead of HttpUrl.", "url": "https://github.com/line/armeria/pull/2381#discussion_r364621084", "createdAt": "2020-01-09T08:58:04Z", "author": {"login": "trustin"}, "path": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaRetrofitBuilder.java", "diffHunk": "@@ -41,127 +39,118 @@\n import retrofit2.Callback;\n import retrofit2.Converter;\n import retrofit2.Retrofit;\n-import retrofit2.Retrofit.Builder;\n import retrofit2.http.Streaming;\n \n /**\n- * A helper class for creating a new {@link Retrofit} instance with {@link ArmeriaCallFactory}.\n- * For example,\n- *\n- * <pre>{@code\n- * Retrofit retrofit = new ArmeriaRetrofitBuilder()\n- *     .baseUrl(\"http://localhost:8080/\")\n- *     .build();\n- *\n- * MyApi api = retrofit.create(MyApi.class);\n- * Response<User> user = api.getUser().execute();\n- * }</pre>\n- *\n- * <p>{@link ArmeriaRetrofitBuilder} even supports {@link EndpointGroup}, so you can create {@link Retrofit}\n- * like below,\n+ * A builder that creates a {@link Retrofit} which uses {@link WebClient} for sending requests.\n  *\n- * <pre>{@code\n- * EndpointGroupRegistry.register(\"foo\",\n- *                                new StaticEndpointGroup(Endpoint.of(\"127.0.0.1\", 8080)),\n- *                                ROUND_ROBIN);\n- *\n- * Retrofit retrofit = new ArmeriaRetrofitBuilder()\n- *     .baseUrl(\"http://group:foo/\")\n- *     .build();\n- * }</pre>\n+ * @see ArmeriaRetrofit\n  */\n public final class ArmeriaRetrofitBuilder {\n \n-    private static final BiFunction<String, ? super ClientOptionsBuilder, ClientOptionsBuilder>\n-            DEFAULT_CONFIGURATOR = (url, optionsBuilder) -> optionsBuilder;\n-    private static final String SLASH = \"/\";\n-\n     private final Retrofit.Builder retrofitBuilder;\n-    private final ClientFactory clientFactory;\n-    @Nullable\n-    private String baseUrl;\n+    private final String baseWebClientHost;\n+    private final int baseWebClientPort;\n+    private final WebClient baseWebClient;\n+\n     private boolean streaming;\n     private Executor callbackExecutor = CommonPools.blockingTaskExecutor();\n-    private BiFunction<String, ? super ClientOptionsBuilder, ClientOptionsBuilder> configurator =\n-            DEFAULT_CONFIGURATOR;\n+    private BiFunction<? super SessionProtocol, ? super HttpUrl, ? extends WebClient> nonBaseClientFactory;\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the default {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder() {\n-        this(ClientFactory.ofDefault());\n-    }\n+    ArmeriaRetrofitBuilder(WebClient webClient) {\n+        final URI uri = webClient.uri();\n+        final SessionProtocol protocol = webClient.scheme().sessionProtocol();\n \n-    /**\n-     * Creates a {@link ArmeriaRetrofitBuilder} with the specified {@link ClientFactory}.\n-     */\n-    public ArmeriaRetrofitBuilder(ClientFactory clientFactory) {\n-        this.clientFactory = requireNonNull(clientFactory, \"clientFactory\");\n-        retrofitBuilder = new Retrofit.Builder();\n-    }\n+        // Build a baseUrl that will pass Retrofit's validation.\n+        final HttpUrl baseUrl = HttpUrl.get((protocol.isTls() ? \"https\" : \"http\") +\n+                                            uri.toString().substring(protocol.uriText().length()));\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(String baseUrl) {\n-        return baseUrl(URI.create(requireNonNull(baseUrl, \"baseUrl\")));\n-    }\n+        retrofitBuilder = new Retrofit.Builder().baseUrl(baseUrl);\n+        baseWebClientHost = baseUrl.host();\n+        baseWebClientPort = baseUrl.port();\n \n-    /**\n-     * Sets the API base URL.\n-     *\n-     * @see Builder#baseUrl(String)\n-     */\n-    public ArmeriaRetrofitBuilder baseUrl(URI baseUrl) {\n-        requireNonNull(baseUrl, \"baseUrl\");\n-        checkArgument(SessionProtocol.find(baseUrl.getScheme()) != null,\n-                      \"baseUrl must have an HTTP scheme: %s\", baseUrl);\n-        final String path = baseUrl.getPath();\n-        if (!path.isEmpty() && !SLASH.equals(path.substring(path.length() - 1))) {\n-            throw new IllegalArgumentException(\"baseUrl must end with /: \" + baseUrl);\n-        }\n-        this.baseUrl = baseUrl.toString();\n-        return this;\n-    }\n+        // Re-create the base client without a path, because Retrofit will always provide a full path.\n+        baseWebClient = WebClient.builder(protocol,\n+                                          webClient.endpointGroup())\n+                                 .factory(webClient.factory())\n+                                 .options(webClient.options())\n+                                 .build();\n \n-    /**\n-     * Sets the {@link ClientOptions} that customizes the underlying {@link WebClient}.\n-     * This method can be useful if you already have an Armeria client and want to reuse its configuration,\n-     * such as using the same decorators.\n-     * <pre>{@code\n-     * WebClient myClient = ...;\n-     * // Use the same settings and decorators with `myClient` when sending requests.\n-     * builder.clientOptions(myClient.options());\n-     * }</pre>\n-     */\n-    public ArmeriaRetrofitBuilder clientOptions(ClientOptions clientOptions) {\n-        requireNonNull(clientOptions, \"clientOptions\");\n-        return withClientOptions((uri, b) -> b.options(clientOptions));\n+        nonBaseClientFactory = (p, url) -> WebClient.builder(p, Endpoint.of(url.host(), url.port()))\n+                                                    .factory(baseWebClient.factory())\n+                                                    .options(baseWebClient.options())\n+                                                    .build();\n     }\n \n     /**\n-     * Sets the {@link BiFunction} that customizes the underlying {@link WebClient}.\n+     * Specifies the {@link BiFunction} that creates a new non-base {@link WebClient}, which is used for\n+     * sending requests to other authorities than that of base URL. If not specified, the non-base\n+     * {@link WebClient} will have the same options with the base {@link WebClient}, which was specified\n+     * with {@link ArmeriaRetrofit#of(WebClient)} or {@link ArmeriaRetrofit#builder(WebClient)}.\n+     *\n+     * <p>To avoid the overhead of repetitive instantiation of {@link WebClient}s, the {@link WebClient}s\n+     * returned by the specified {@link BiFunction} will be cached for each combination of:\n+     * <ul>\n+     *   <li>Whether the connection is secured (HTTPS or HTTPS)</li>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU4NjE2Mg=="}, "originalCommit": {"oid": "0e9410b21a3fbc3793432b3ec887126bc1a11a74"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTAyOTA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientBuilderParams.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNTozNjowMFrOFcKqAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNTozNjowMFrOFcKqAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA3OTA0Mw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/line/armeria/pull/2381#discussion_r365079043", "createdAt": "2020-01-10T05:36:00Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientBuilderParams.java", "diffHunk": "@@ -37,13 +42,41 @@ static ClientBuilderParams of(ClientFactory factory, URI uri, Class<?> type,\n         return new DefaultClientBuilderParams(factory, uri, type, options);\n     }\n \n+    /**\n+     * Returns a newly created {@link ClientBuilderParams} from the specified properties.\n+     */\n+    static ClientBuilderParams of(ClientFactory factory, Scheme scheme, EndpointGroup endpointGroup,\n+                                  @Nullable String path, Class<?> type, ClientOptions options) {\n+        requireNonNull(factory, \"factory\");\n+        requireNonNull(scheme, \"scheme\");\n+        requireNonNull(endpointGroup, \"endpointGroup\");\n+        requireNonNull(type, \"type\");\n+        requireNonNull(options, \"options\");\n+        return new DefaultClientBuilderParams(factory, scheme, endpointGroup, path, type, options);\n+    }\n+\n     /**\n      * Returns the {@link ClientFactory} who created the client.\n      */\n     ClientFactory factory();\n \n     /**\n-     * Returns the endpoint URI of the client.\n+     * Returns the {@link Scheme} of the client.\n+     */\n+    Scheme scheme();\n+\n+    /**\n+     * Returns the {@link EndpointGroup} of the client.\n+     */\n+    EndpointGroup endpointGroup();\n+\n+    /**\n+     * Returns the {@link String} that consists of path, query string and fragment.\n+     */\n+    String absolutePathRef(); // Name inspired by https://stackoverflow.com/a/47545070/55808", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf5e41b63c44bf548f82a0b27bfa4c72c1744a1"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTA0MzYzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/WebClientOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNTo0ODo1OVrOFcKy7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNTo0ODo1OVrOFcKy7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA4MTMyNQ==", "bodyText": "Looks nice", "url": "https://github.com/line/armeria/pull/2381#discussion_r365081325", "createdAt": "2020-01-10T05:48:59Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/WebClientOptions.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.endpoint.EndpointGroup;\n+\n+/**\n+ * {@link ClientOption}s to control {@link WebClient}-specific behavior.\n+ */\n+public final class WebClientOptions {\n+\n+    /**\n+     * A {@link Function} that remaps an {@link Endpoint} or an absolute URL's authority into", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf5e41b63c44bf548f82a0b27bfa4c72c1744a1"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTA0NTI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/endpoint/EndpointSelectionStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNTo1MDozMVrOFcKz6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNTo1MDozMVrOFcKz6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA4MTU3Nw==", "bodyText": "I think it's fine to be roundRobin and weightedRoundRobin, I don't know if I commonly hear the word unweighted round robin", "url": "https://github.com/line/armeria/pull/2381#discussion_r365081577", "createdAt": "2020-01-10T05:50:31Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/endpoint/EndpointSelectionStrategy.java", "diffHunk": "@@ -26,13 +26,37 @@\n \n     /**\n      * Simple round-robin strategy.\n+     *\n+     * @deprecated Use {@link #unweightedRoundRobin()}.\n      */\n-    EndpointSelectionStrategy ROUND_ROBIN = new RoundRobinStrategy();\n+    @Deprecated\n+    EndpointSelectionStrategy ROUND_ROBIN = RoundRobinStrategy.INSTANCE;\n \n     /**\n      * Weighted round-robin strategy.\n+     *\n+     * @deprecated Use {@link #weightedRoundRobin()}.\n      */\n-    EndpointSelectionStrategy WEIGHTED_ROUND_ROBIN = new WeightedRoundRobinStrategy();\n+    @Deprecated\n+    EndpointSelectionStrategy WEIGHTED_ROUND_ROBIN = WeightedRoundRobinStrategy.INSTANCE;\n+\n+    /**\n+     * Returns a weighted round-robin strategy.\n+     *\n+     * @see #unweightedRoundRobin()\n+     */\n+    static EndpointSelectionStrategy weightedRoundRobin() {\n+        return WeightedRoundRobinStrategy.INSTANCE;\n+    }\n+\n+    /**\n+     * Returns an unweighted round-robin strategy, which ignores {@link Endpoint#weight()}.\n+     *\n+     * @see #weightedRoundRobin()\n+     */\n+    static EndpointSelectionStrategy unweightedRoundRobin() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf5e41b63c44bf548f82a0b27bfa4c72c1744a1"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTA0ODQ0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNTo1MzoxNlrOFcK10w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNTo1MzoxNlrOFcK10w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA4MjA2Nw==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public boolean init(EndpointGroup endpoint) {\n          \n          \n            \n                public boolean init(EndpointGroup endpointGroup) {", "url": "https://github.com/line/armeria/pull/2381#discussion_r365082067", "createdAt": "2020-01-10T05:53:16Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java", "diffHunk": "@@ -203,31 +200,23 @@ private static ServiceRequestContext serviceRequestContext() {\n      *         {@code false} if the initialization has failed and this context's {@link RequestLog} has been\n      *         completed with the cause of the failure.\n      */\n-    public boolean init(Endpoint endpoint) {\n+    public boolean init(EndpointGroup endpoint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf5e41b63c44bf548f82a0b27bfa4c72c1744a1"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTI3MjI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientBuilderParams.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwODoyMToyMlrOFcM6Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwODoyMToyMlrOFcM6Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTExNTk5NQ==", "bodyText": "nit: Returns the endpoint URI of the client.", "url": "https://github.com/line/armeria/pull/2381#discussion_r365115995", "createdAt": "2020-01-10T08:21:22Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientBuilderParams.java", "diffHunk": "@@ -37,13 +42,41 @@ static ClientBuilderParams of(ClientFactory factory, URI uri, Class<?> type,\n         return new DefaultClientBuilderParams(factory, uri, type, options);\n     }\n \n+    /**\n+     * Returns a newly created {@link ClientBuilderParams} from the specified properties.\n+     */\n+    static ClientBuilderParams of(ClientFactory factory, Scheme scheme, EndpointGroup endpointGroup,\n+                                  @Nullable String path, Class<?> type, ClientOptions options) {\n+        requireNonNull(factory, \"factory\");\n+        requireNonNull(scheme, \"scheme\");\n+        requireNonNull(endpointGroup, \"endpointGroup\");\n+        requireNonNull(type, \"type\");\n+        requireNonNull(options, \"options\");\n+        return new DefaultClientBuilderParams(factory, scheme, endpointGroup, path, type, options);\n+    }\n+\n     /**\n      * Returns the {@link ClientFactory} who created the client.\n      */\n     ClientFactory factory();\n \n     /**\n-     * Returns the endpoint URI of the client.\n+     * Returns the {@link Scheme} of the client.\n+     */\n+    Scheme scheme();\n+\n+    /**\n+     * Returns the {@link EndpointGroup} of the client.\n+     */\n+    EndpointGroup endpointGroup();\n+\n+    /**\n+     * Returns the {@link String} that consists of path, query string and fragment.\n+     */\n+    String absolutePathRef(); // Name inspired by https://stackoverflow.com/a/47545070/55808\n+\n+    /**\n+     * Returns the URI of endpoint URI of the client.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf5e41b63c44bf548f82a0b27bfa4c72c1744a1"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTMxOTU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientBuilderParams.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwODo0MTo0MVrOFcNV0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwODo0MTo0MVrOFcNV0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEyMzAyNA==", "bodyText": "nit: endpointGroup because the name of the getter is also endpointGroup?", "url": "https://github.com/line/armeria/pull/2381#discussion_r365123024", "createdAt": "2020-01-10T08:41:41Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientBuilderParams.java", "diffHunk": "@@ -72,7 +154,9 @@ public ClientOptions options() {\n     public String toString() {\n         return MoreObjects.toStringHelper(this)\n                           .add(\"factory\", factory)\n-                          .add(\"uri\", uri)\n+                          .add(\"scheme\", scheme)\n+                          .add(\"endpoint\", endpointGroup)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf5e41b63c44bf548f82a0b27bfa4c72c1744a1"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTMyNjgyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwODo0NDoyNFrOFcNaBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwODo0NDoyNFrOFcNaBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEyNDEwMg==", "bodyText": "nit: validated \ud83d\ude06", "url": "https://github.com/line/armeria/pull/2381#discussion_r365124102", "createdAt": "2020-01-10T08:44:24Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientFactory.java", "diffHunk": "@@ -142,23 +136,18 @@ public ClientFactoryOptions options() {\n     }\n \n     @Override\n-    public <T> T newClient(URI uri, Class<T> clientType, ClientOptions options) {\n-        final Scheme scheme = validateScheme(uri);\n-        uri = normalizeUri(uri, scheme);\n-        return clientFactories.get(scheme).newClient(uri, clientType, options);\n-    }\n-\n-    @Override\n-    public <T> T newClient(Scheme scheme, Endpoint endpoint, @Nullable String path, Class<T> clientType,\n-                           ClientOptions options) {\n-        final Scheme validatedScheme = validateScheme(scheme);\n-        return clientFactories.get(validatedScheme)\n-                              .newClient(validatedScheme, endpoint, path, clientType, options);\n+    public Object newClient(ClientBuilderParams params) {\n+        validateParams(params);\n+        final Scheme scheme = params.scheme();\n+        // `factory` must be non-null because we validates params.scheme() with validateParams().", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf5e41b63c44bf548f82a0b27bfa4c72c1744a1"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTMzODU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwODo0ODozNlrOFcNgjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwMTo0NzowOFrOFcsPWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEyNTc3Mw==", "bodyText": "Can ClientBuilderParams have a type parameter for the client type so that wrong ClientBuilderParams cannot be passed as a parameter? \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2381#discussion_r365125773", "createdAt": "2020-01-10T08:48:36Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactory.java", "diffHunk": "@@ -153,86 +156,10 @@ static void disableShutdownHook() {\n     ClientFactoryOptions options();\n \n     /**\n-     * Creates a new client that connects to the specified {@code uri}.\n-     *\n-     * @param uri the URI of the server endpoint\n-     * @param clientType the type of the new client\n-     * @param options the {@link ClientOptionValue}s\n-     */\n-    <T> T newClient(String uri, Class<T> clientType, ClientOptionValue<?>... options);\n-\n-    /**\n-     * Creates a new client that connects to the specified {@code uri}.\n-     *\n-     * @param uri the URI of the server endpoint\n-     * @param clientType the type of the new client\n-     * @param options the {@link ClientOptions}\n-     */\n-    <T> T newClient(String uri, Class<T> clientType, ClientOptions options);\n-\n-    /**\n-     * Creates a new client that connects to the specified {@link URI}.\n-     *\n-     * @param uri the URI of the server endpoint\n-     * @param clientType the type of the new client\n-     * @param options the {@link ClientOptionValue}s\n-     */\n-    <T> T newClient(URI uri, Class<T> clientType, ClientOptionValue<?>... options);\n-\n-    /**\n-     * Creates a new client that connects to the specified {@link URI}.\n-     *\n-     * @param uri the URI of the server endpoint\n-     * @param clientType the type of the new client\n-     * @param options the {@link ClientOptions}\n-     */\n-    <T> T newClient(URI uri, Class<T> clientType, ClientOptions options);\n-\n-    /**\n-     * Creates a new client that connects to the specified {@link Endpoint} with the {@link Scheme}.\n-     *\n-     * @param scheme the {@link Scheme} for the {@code endpoint}\n-     * @param endpoint the server {@link Endpoint}\n-     * @param clientType the type of the new client\n-     * @param options the {@link ClientOptionValue}s\n+     * Creates a new client with the specified {@link ClientBuilderParams}. The client instance returned\n+     * by this method must be an instance of {@link ClientBuilderParams#clientType()}.\n      */\n-    <T> T newClient(Scheme scheme, Endpoint endpoint, Class<T> clientType, ClientOptionValue<?>... options);\n-\n-    /**\n-     * Creates a new client that connects to the specified {@link Endpoint} with the {@link Scheme}.\n-     *\n-     * @param scheme the {@link Scheme} for the {@code endpoint}\n-     * @param endpoint the server {@link Endpoint}\n-     * @param clientType the type of the new client\n-     * @param options the {@link ClientOptions}\n-     */\n-    <T> T newClient(Scheme scheme, Endpoint endpoint, Class<T> clientType, ClientOptions options);\n-\n-    /**\n-     * Creates a new client that connects to the specified {@link Endpoint} with the {@link Scheme}\n-     * and {@code path}.\n-     *\n-     * @param scheme the {@link Scheme} for the {@code endpoint}\n-     * @param endpoint the server {@link Endpoint}\n-     * @param path the service {@code path}\n-     * @param clientType the type of the new client\n-     * @param options the {@link ClientOptionValue}s\n-     */\n-    <T> T newClient(Scheme scheme, Endpoint endpoint, @Nullable String path, Class<T> clientType,\n-                    ClientOptionValue<?>... options);\n-\n-    /**\n-     * Creates a new client that connects to the specified {@link Endpoint} with the {@link Scheme}\n-     * and {@code path}.\n-     *\n-     * @param scheme the {@link Scheme} for the {@code endpoint}\n-     * @param endpoint the server {@link Endpoint}\n-     * @param path the service {@code path}\n-     * @param clientType the type of the new client\n-     * @param options the {@link ClientOptions}\n-     */\n-    <T> T newClient(Scheme scheme, Endpoint endpoint, @Nullable String path, Class<T> clientType,\n-                    ClientOptions options);\n+    Object newClient(ClientBuilderParams params);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf5e41b63c44bf548f82a0b27bfa4c72c1744a1"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI0Njg0Mg==", "bodyText": "I tried but it seems to make the overall type signature more complex without much gain, like adding another type parameter to UserClient.\nPerhaps it's not worth it given a user is not supposed to create a client using a ClientBuilderParams?", "url": "https://github.com/line/armeria/pull/2381#discussion_r365246842", "createdAt": "2020-01-10T14:02:11Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactory.java", "diffHunk": "@@ -153,86 +156,10 @@ static void disableShutdownHook() {\n     ClientFactoryOptions options();\n \n     /**\n-     * Creates a new client that connects to the specified {@code uri}.\n-     *\n-     * @param uri the URI of the server endpoint\n-     * @param clientType the type of the new client\n-     * @param options the {@link ClientOptionValue}s\n-     */\n-    <T> T newClient(String uri, Class<T> clientType, ClientOptionValue<?>... options);\n-\n-    /**\n-     * Creates a new client that connects to the specified {@code uri}.\n-     *\n-     * @param uri the URI of the server endpoint\n-     * @param clientType the type of the new client\n-     * @param options the {@link ClientOptions}\n-     */\n-    <T> T newClient(String uri, Class<T> clientType, ClientOptions options);\n-\n-    /**\n-     * Creates a new client that connects to the specified {@link URI}.\n-     *\n-     * @param uri the URI of the server endpoint\n-     * @param clientType the type of the new client\n-     * @param options the {@link ClientOptionValue}s\n-     */\n-    <T> T newClient(URI uri, Class<T> clientType, ClientOptionValue<?>... options);\n-\n-    /**\n-     * Creates a new client that connects to the specified {@link URI}.\n-     *\n-     * @param uri the URI of the server endpoint\n-     * @param clientType the type of the new client\n-     * @param options the {@link ClientOptions}\n-     */\n-    <T> T newClient(URI uri, Class<T> clientType, ClientOptions options);\n-\n-    /**\n-     * Creates a new client that connects to the specified {@link Endpoint} with the {@link Scheme}.\n-     *\n-     * @param scheme the {@link Scheme} for the {@code endpoint}\n-     * @param endpoint the server {@link Endpoint}\n-     * @param clientType the type of the new client\n-     * @param options the {@link ClientOptionValue}s\n+     * Creates a new client with the specified {@link ClientBuilderParams}. The client instance returned\n+     * by this method must be an instance of {@link ClientBuilderParams#clientType()}.\n      */\n-    <T> T newClient(Scheme scheme, Endpoint endpoint, Class<T> clientType, ClientOptionValue<?>... options);\n-\n-    /**\n-     * Creates a new client that connects to the specified {@link Endpoint} with the {@link Scheme}.\n-     *\n-     * @param scheme the {@link Scheme} for the {@code endpoint}\n-     * @param endpoint the server {@link Endpoint}\n-     * @param clientType the type of the new client\n-     * @param options the {@link ClientOptions}\n-     */\n-    <T> T newClient(Scheme scheme, Endpoint endpoint, Class<T> clientType, ClientOptions options);\n-\n-    /**\n-     * Creates a new client that connects to the specified {@link Endpoint} with the {@link Scheme}\n-     * and {@code path}.\n-     *\n-     * @param scheme the {@link Scheme} for the {@code endpoint}\n-     * @param endpoint the server {@link Endpoint}\n-     * @param path the service {@code path}\n-     * @param clientType the type of the new client\n-     * @param options the {@link ClientOptionValue}s\n-     */\n-    <T> T newClient(Scheme scheme, Endpoint endpoint, @Nullable String path, Class<T> clientType,\n-                    ClientOptionValue<?>... options);\n-\n-    /**\n-     * Creates a new client that connects to the specified {@link Endpoint} with the {@link Scheme}\n-     * and {@code path}.\n-     *\n-     * @param scheme the {@link Scheme} for the {@code endpoint}\n-     * @param endpoint the server {@link Endpoint}\n-     * @param path the service {@code path}\n-     * @param clientType the type of the new client\n-     * @param options the {@link ClientOptions}\n-     */\n-    <T> T newClient(Scheme scheme, Endpoint endpoint, @Nullable String path, Class<T> clientType,\n-                    ClientOptions options);\n+    Object newClient(ClientBuilderParams params);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEyNTc3Mw=="}, "originalCommit": {"oid": "ecf5e41b63c44bf548f82a0b27bfa4c72c1744a1"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYyOTI3NQ==", "bodyText": "Ah, thanks! It's fine as it is. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2381#discussion_r365629275", "createdAt": "2020-01-13T01:47:08Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactory.java", "diffHunk": "@@ -153,86 +156,10 @@ static void disableShutdownHook() {\n     ClientFactoryOptions options();\n \n     /**\n-     * Creates a new client that connects to the specified {@code uri}.\n-     *\n-     * @param uri the URI of the server endpoint\n-     * @param clientType the type of the new client\n-     * @param options the {@link ClientOptionValue}s\n-     */\n-    <T> T newClient(String uri, Class<T> clientType, ClientOptionValue<?>... options);\n-\n-    /**\n-     * Creates a new client that connects to the specified {@code uri}.\n-     *\n-     * @param uri the URI of the server endpoint\n-     * @param clientType the type of the new client\n-     * @param options the {@link ClientOptions}\n-     */\n-    <T> T newClient(String uri, Class<T> clientType, ClientOptions options);\n-\n-    /**\n-     * Creates a new client that connects to the specified {@link URI}.\n-     *\n-     * @param uri the URI of the server endpoint\n-     * @param clientType the type of the new client\n-     * @param options the {@link ClientOptionValue}s\n-     */\n-    <T> T newClient(URI uri, Class<T> clientType, ClientOptionValue<?>... options);\n-\n-    /**\n-     * Creates a new client that connects to the specified {@link URI}.\n-     *\n-     * @param uri the URI of the server endpoint\n-     * @param clientType the type of the new client\n-     * @param options the {@link ClientOptions}\n-     */\n-    <T> T newClient(URI uri, Class<T> clientType, ClientOptions options);\n-\n-    /**\n-     * Creates a new client that connects to the specified {@link Endpoint} with the {@link Scheme}.\n-     *\n-     * @param scheme the {@link Scheme} for the {@code endpoint}\n-     * @param endpoint the server {@link Endpoint}\n-     * @param clientType the type of the new client\n-     * @param options the {@link ClientOptionValue}s\n+     * Creates a new client with the specified {@link ClientBuilderParams}. The client instance returned\n+     * by this method must be an instance of {@link ClientBuilderParams#clientType()}.\n      */\n-    <T> T newClient(Scheme scheme, Endpoint endpoint, Class<T> clientType, ClientOptionValue<?>... options);\n-\n-    /**\n-     * Creates a new client that connects to the specified {@link Endpoint} with the {@link Scheme}.\n-     *\n-     * @param scheme the {@link Scheme} for the {@code endpoint}\n-     * @param endpoint the server {@link Endpoint}\n-     * @param clientType the type of the new client\n-     * @param options the {@link ClientOptions}\n-     */\n-    <T> T newClient(Scheme scheme, Endpoint endpoint, Class<T> clientType, ClientOptions options);\n-\n-    /**\n-     * Creates a new client that connects to the specified {@link Endpoint} with the {@link Scheme}\n-     * and {@code path}.\n-     *\n-     * @param scheme the {@link Scheme} for the {@code endpoint}\n-     * @param endpoint the server {@link Endpoint}\n-     * @param path the service {@code path}\n-     * @param clientType the type of the new client\n-     * @param options the {@link ClientOptionValue}s\n-     */\n-    <T> T newClient(Scheme scheme, Endpoint endpoint, @Nullable String path, Class<T> clientType,\n-                    ClientOptionValue<?>... options);\n-\n-    /**\n-     * Creates a new client that connects to the specified {@link Endpoint} with the {@link Scheme}\n-     * and {@code path}.\n-     *\n-     * @param scheme the {@link Scheme} for the {@code endpoint}\n-     * @param endpoint the server {@link Endpoint}\n-     * @param path the service {@code path}\n-     * @param clientType the type of the new client\n-     * @param options the {@link ClientOptions}\n-     */\n-    <T> T newClient(Scheme scheme, Endpoint endpoint, @Nullable String path, Class<T> clientType,\n-                    ClientOptions options);\n+    Object newClient(ClientBuilderParams params);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEyNTc3Mw=="}, "originalCommit": {"oid": "ecf5e41b63c44bf548f82a0b27bfa4c72c1744a1"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTM2OTgwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/DefaultWebClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwOTowMDozOVrOFcNy-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMzoyMDoyOVrOFckE1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEzMDQ4OA==", "bodyText": "Can we just set this to ClientOptions.DEFAULT_OPTIONS so that we don't have to call this method?", "url": "https://github.com/line/armeria/pull/2381#discussion_r365130488", "createdAt": "2020-01-10T09:00:39Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/DefaultWebClient.java", "diffHunk": "@@ -40,9 +41,29 @@\n \n     static final WebClient DEFAULT = new WebClientBuilder().build();\n \n-    DefaultWebClient(ClientBuilderParams params, HttpClient delegate,\n-                     MeterRegistry meterRegistry, SessionProtocol sessionProtocol, Endpoint endpoint) {\n-        super(params, delegate, meterRegistry, sessionProtocol, endpoint);\n+    private final Function<? super Endpoint, ? extends EndpointGroup> endpointRemapper;\n+\n+    DefaultWebClient(ClientBuilderParams params, HttpClient delegate, MeterRegistry meterRegistry) {\n+        super(fillDefaultOptions(params), delegate, meterRegistry);\n+        endpointRemapper = options().get(WebClientOptions.ENDPOINT_REMAPPER);\n+    }\n+\n+    private static ClientBuilderParams fillDefaultOptions(ClientBuilderParams params) {\n+        final ClientOptions options = params.options();\n+        if (options.getOrNull(WebClientOptions.ENDPOINT_REMAPPER) != null) {\n+            return params;\n+        }\n+\n+        final ClientOptionsBuilder optionsBuilder = options.toBuilder();\n+        optionsBuilder.option(WebClientOptions.ENDPOINT_REMAPPER, Function.identity());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf5e41b63c44bf548f82a0b27bfa4c72c1744a1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIyMzQ1Ng==", "bodyText": "This option is applicable only to WebClient, so I think it doesn't belong there, like gRPC options are not there.", "url": "https://github.com/line/armeria/pull/2381#discussion_r365223456", "createdAt": "2020-01-10T13:03:06Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/DefaultWebClient.java", "diffHunk": "@@ -40,9 +41,29 @@\n \n     static final WebClient DEFAULT = new WebClientBuilder().build();\n \n-    DefaultWebClient(ClientBuilderParams params, HttpClient delegate,\n-                     MeterRegistry meterRegistry, SessionProtocol sessionProtocol, Endpoint endpoint) {\n-        super(params, delegate, meterRegistry, sessionProtocol, endpoint);\n+    private final Function<? super Endpoint, ? extends EndpointGroup> endpointRemapper;\n+\n+    DefaultWebClient(ClientBuilderParams params, HttpClient delegate, MeterRegistry meterRegistry) {\n+        super(fillDefaultOptions(params), delegate, meterRegistry);\n+        endpointRemapper = options().get(WebClientOptions.ENDPOINT_REMAPPER);\n+    }\n+\n+    private static ClientBuilderParams fillDefaultOptions(ClientBuilderParams params) {\n+        final ClientOptions options = params.options();\n+        if (options.getOrNull(WebClientOptions.ENDPOINT_REMAPPER) != null) {\n+            return params;\n+        }\n+\n+        final ClientOptionsBuilder optionsBuilder = options.toBuilder();\n+        optionsBuilder.option(WebClientOptions.ENDPOINT_REMAPPER, Function.identity());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEzMDQ4OA=="}, "originalCommit": {"oid": "ecf5e41b63c44bf548f82a0b27bfa4c72c1744a1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI1OTg4Mg==", "bodyText": "Just realized this option might be applicable for any clients. Let me play with this idea a little bit.", "url": "https://github.com/line/armeria/pull/2381#discussion_r365259882", "createdAt": "2020-01-10T14:30:37Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/DefaultWebClient.java", "diffHunk": "@@ -40,9 +41,29 @@\n \n     static final WebClient DEFAULT = new WebClientBuilder().build();\n \n-    DefaultWebClient(ClientBuilderParams params, HttpClient delegate,\n-                     MeterRegistry meterRegistry, SessionProtocol sessionProtocol, Endpoint endpoint) {\n-        super(params, delegate, meterRegistry, sessionProtocol, endpoint);\n+    private final Function<? super Endpoint, ? extends EndpointGroup> endpointRemapper;\n+\n+    DefaultWebClient(ClientBuilderParams params, HttpClient delegate, MeterRegistry meterRegistry) {\n+        super(fillDefaultOptions(params), delegate, meterRegistry);\n+        endpointRemapper = options().get(WebClientOptions.ENDPOINT_REMAPPER);\n+    }\n+\n+    private static ClientBuilderParams fillDefaultOptions(ClientBuilderParams params) {\n+        final ClientOptions options = params.options();\n+        if (options.getOrNull(WebClientOptions.ENDPOINT_REMAPPER) != null) {\n+            return params;\n+        }\n+\n+        final ClientOptionsBuilder optionsBuilder = options.toBuilder();\n+        optionsBuilder.option(WebClientOptions.ENDPOINT_REMAPPER, Function.identity());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEzMDQ4OA=="}, "originalCommit": {"oid": "ecf5e41b63c44bf548f82a0b27bfa4c72c1744a1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5NTUwOA==", "bodyText": "Moved ENDPOINT_MAPPER to ClientOptions and it looks better. This will be useful to non-WebClients when:\n\nA user is given with a client that talks to a single Endpoint and wants to override that.\nWe provide a way to send a request to an arbitrary Endpoint by using a single client instance in the future.", "url": "https://github.com/line/armeria/pull/2381#discussion_r365495508", "createdAt": "2020-01-11T03:20:29Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/DefaultWebClient.java", "diffHunk": "@@ -40,9 +41,29 @@\n \n     static final WebClient DEFAULT = new WebClientBuilder().build();\n \n-    DefaultWebClient(ClientBuilderParams params, HttpClient delegate,\n-                     MeterRegistry meterRegistry, SessionProtocol sessionProtocol, Endpoint endpoint) {\n-        super(params, delegate, meterRegistry, sessionProtocol, endpoint);\n+    private final Function<? super Endpoint, ? extends EndpointGroup> endpointRemapper;\n+\n+    DefaultWebClient(ClientBuilderParams params, HttpClient delegate, MeterRegistry meterRegistry) {\n+        super(fillDefaultOptions(params), delegate, meterRegistry);\n+        endpointRemapper = options().get(WebClientOptions.ENDPOINT_REMAPPER);\n+    }\n+\n+    private static ClientBuilderParams fillDefaultOptions(ClientBuilderParams params) {\n+        final ClientOptions options = params.options();\n+        if (options.getOrNull(WebClientOptions.ENDPOINT_REMAPPER) != null) {\n+            return params;\n+        }\n+\n+        final ClientOptionsBuilder optionsBuilder = options.toBuilder();\n+        optionsBuilder.option(WebClientOptions.ENDPOINT_REMAPPER, Function.identity());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEzMDQ4OA=="}, "originalCommit": {"oid": "ecf5e41b63c44bf548f82a0b27bfa4c72c1744a1"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTM4NTUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/endpoint/EmptyEndpointGroupException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwOTowNzoyM1rOFcN8aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMzowMzozMFrOFcTezw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEzMjkwNA==", "bodyText": "\ud83d\ude06", "url": "https://github.com/line/armeria/pull/2381#discussion_r365132904", "createdAt": "2020-01-10T09:07:23Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/endpoint/EmptyEndpointGroupException.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2016 LINE Corporation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf5e41b63c44bf548f82a0b27bfa4c72c1744a1"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIyMzYzMQ==", "bodyText": "\ud83d\ude31", "url": "https://github.com/line/armeria/pull/2381#discussion_r365223631", "createdAt": "2020-01-10T13:03:30Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/endpoint/EmptyEndpointGroupException.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2016 LINE Corporation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEzMjkwNA=="}, "originalCommit": {"oid": "ecf5e41b63c44bf548f82a0b27bfa4c72c1744a1"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTM4NjE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/endpoint/EmptyEndpointGroupException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwOTowNzo0NFrOFcN82w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwOTowNzo0NFrOFcN82w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEzMzAxOQ==", "bodyText": "nit: two dots.", "url": "https://github.com/line/armeria/pull/2381#discussion_r365133019", "createdAt": "2020-01-10T09:07:44Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/endpoint/EmptyEndpointGroupException.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.endpoint;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.Flags;\n+\n+/**\n+ * An {@link EndpointGroupException} raised when the resolution of an {@link EndpointGroup} fails\n+ * because there are no {@link Endpoint}s in the {@link EndpointGroup}..", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf5e41b63c44bf548f82a0b27bfa4c72c1744a1"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODY4Mjk1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/endpoint/EmptyEndpointGroupException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwMDoxMjo1NVrOFcr10Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwMDoxMjo1NVrOFcr10Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYyMjczNw==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns a {@link EmptyEndpointGroupException} which may be a singleton or a new instance, depending on\n          \n          \n            \n                 * Returns an {@link EmptyEndpointGroupException} which may be a singleton or a new instance, depending on", "url": "https://github.com/line/armeria/pull/2381#discussion_r365622737", "createdAt": "2020-01-13T00:12:55Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/endpoint/EmptyEndpointGroupException.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.endpoint;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.Flags;\n+\n+/**\n+ * An {@link EndpointGroupException} raised when the resolution of an {@link EndpointGroup} fails\n+ * because there are no {@link Endpoint}s in the {@link EndpointGroup}.\n+ */\n+public final class EmptyEndpointGroupException extends EndpointGroupException {\n+\n+    private static final long serialVersionUID = 7595286618131200852L;\n+\n+    static final EmptyEndpointGroupException INSTANCE = new EmptyEndpointGroupException(false);\n+\n+    /**\n+     * Returns a {@link EmptyEndpointGroupException} which may be a singleton or a new instance, depending on", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3218ab04b311890f7831080a69e3ca363219bb4"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2885, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}