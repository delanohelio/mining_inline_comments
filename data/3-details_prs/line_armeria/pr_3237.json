{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyNDg0Njg0", "number": 3237, "title": "HttpResponse.of(ResponseHeaders,Publisher<HttpObject>)", "bodyText": "Motivation:\nProvide an easy way to build a HttpResponse with ResponseHeaders and a Publisher<HttpObject>.\nModifications:\nAdded PrependingPublisher that can prepend an object to a Publisher of the same type.\nResult:\nCloses #3089", "createdAt": "2020-12-18T11:27:31Z", "url": "https://github.com/line/armeria/pull/3237", "merged": true, "mergeCommit": {"oid": "4d0aa3317fd88363370f430b91fcaae2dfa0310e"}, "closed": true, "closedAt": "2021-02-01T06:04:44Z", "author": {"login": "tumile"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnWTlVgH2gAyNTQyNDg0Njg0OmFhMDcxMzcxMTBiNjQyN2RjM2VjNmMwZjJkM2ExZGI1MTFjZjU1YTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd1slkogFqTU3OTk2MTA1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "aa07137110b6427dc3ec6c0f2d3a1db511cf55a9", "author": {"user": {"login": "tumile", "name": "Tuan Le"}}, "url": "https://github.com/line/armeria/commit/aa07137110b6427dc3ec6c0f2d3a1db511cf55a9", "committedDate": "2020-12-18T11:19:35Z", "message": "Build response from headers and HttpData publisher"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4Mzk1MjI3", "url": "https://github.com/line/armeria/pull/3237#pullrequestreview-558395227", "createdAt": "2020-12-24T07:57:29Z", "commit": {"oid": "aa07137110b6427dc3ec6c0f2d3a1db511cf55a9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzo1NzoyOVrOILB7PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzo1Nzo1MFrOILB7pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzNjc5Ng==", "bodyText": "<HttpData> -> <? extends HttpData> ?", "url": "https://github.com/line/armeria/pull/3237#discussion_r548436796", "createdAt": "2020-12-24T07:57:29Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponse.java", "diffHunk": "@@ -392,6 +392,16 @@ static HttpResponse of(Publisher<? extends HttpObject> publisher) {\n         }\n     }\n \n+    /**\n+     * Creates a new HTTP response of the specified headers whose content is produced from an existing\n+     * {@link Publisher}.\n+     */\n+    static HttpResponse of(ResponseHeaders headers, Publisher<HttpData> contentPublisher) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa07137110b6427dc3ec6c0f2d3a1db511cf55a9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzNjkwMg==", "bodyText": "Ditto <HttpData> -> <? extends HttpData>", "url": "https://github.com/line/armeria/pull/3237#discussion_r548436902", "createdAt": "2020-12-24T07:57:50Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/PublisherBasedHttpResponse.java", "diffHunk": "@@ -25,4 +30,76 @@\n     PublisherBasedHttpResponse(Publisher<? extends HttpObject> publisher) {\n         super(publisher);\n     }\n+\n+    static PublisherBasedHttpResponse from(ResponseHeaders headers, Publisher<HttpData> contentPublisher) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa07137110b6427dc3ec6c0f2d3a1db511cf55a9"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73ae26836b21045463a5b2a953e4f1bd40305c86", "author": {"user": {"login": "tumile", "name": "Tuan Le"}}, "url": "https://github.com/line/armeria/commit/73ae26836b21045463a5b2a953e4f1bd40305c86", "committedDate": "2020-12-26T09:13:37Z", "message": "Address reviews"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4OTc2NDM2", "url": "https://github.com/line/armeria/pull/3237#pullrequestreview-558976436", "createdAt": "2020-12-28T02:22:53Z", "commit": {"oid": "73ae26836b21045463a5b2a953e4f1bd40305c86"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MTM0NDc5", "url": "https://github.com/line/armeria/pull/3237#pullrequestreview-559134479", "createdAt": "2020-12-28T12:57:52Z", "commit": {"oid": "73ae26836b21045463a5b2a953e4f1bd40305c86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMjo1Nzo1MlrOIL4_HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMjo1Nzo1MlrOIL4_HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMzODkwOQ==", "bodyText": "This doesn't work:\nfinal HttpResponse res = HttpResponse.of(ResponseHeaders.of(200), Mono.empty());\nres.aggregate().join();\nHow about subscribing to contentPublisher after PublisherBasedHttpResponse.subscribe(...) is called?", "url": "https://github.com/line/armeria/pull/3237#discussion_r549338909", "createdAt": "2020-12-28T12:57:52Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/PublisherBasedHttpResponse.java", "diffHunk": "@@ -25,4 +30,77 @@\n     PublisherBasedHttpResponse(Publisher<? extends HttpObject> publisher) {\n         super(publisher);\n     }\n+\n+    static PublisherBasedHttpResponse from(ResponseHeaders headers,\n+                                           Publisher<? extends HttpData> contentPublisher) {\n+        return new PublisherBasedHttpResponse(new HeadersAndContentProcessor(headers, contentPublisher));\n+    }\n+\n+    static final class HeadersAndContentProcessor implements Processor<HttpData, HttpObject> {\n+\n+        private final ResponseHeaders headers;\n+        @Nullable\n+        private Subscriber<? super HttpObject> subscriber;\n+        @Nullable\n+        private Subscription contentSubscription;\n+\n+        HeadersAndContentProcessor(ResponseHeaders headers, Publisher<? extends HttpData> contentPublisher) {\n+            this.headers = headers;\n+            contentPublisher.subscribe(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73ae26836b21045463a5b2a953e4f1bd40305c86"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5ce1953e1a5a97d32def7e343a5eb57d8ecd4a1", "author": {"user": {"login": "tumile", "name": "Tuan Le"}}, "url": "https://github.com/line/armeria/commit/c5ce1953e1a5a97d32def7e343a5eb57d8ecd4a1", "committedDate": "2020-12-30T16:05:54Z", "message": "Fix onComplete called before subscribed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMjQ2NDM0", "url": "https://github.com/line/armeria/pull/3237#pullrequestreview-560246434", "createdAt": "2020-12-31T02:02:14Z", "commit": {"oid": "c5ce1953e1a5a97d32def7e343a5eb57d8ecd4a1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwMjowMjoxNFrOIM4SrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwMjozMTo0M1rOIM4gig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM3NjEwOQ==", "bodyText": "I figured the problem was for Mono.empty, onComplete is called immediately after subscribing, hence subscriber is null\n\nThis bug was made by my previous work.\nI added a fix to https://github.com/line/armeria/pull/3254/files#diff-d397601b7ec794ee0cac14520792616a29132a6118e337975c86ad5d896b032cR141-R144", "url": "https://github.com/line/armeria/pull/3237#discussion_r550376109", "createdAt": "2020-12-31T02:02:14Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/PublisherBasedHttpResponse.java", "diffHunk": "@@ -25,4 +30,77 @@\n     PublisherBasedHttpResponse(Publisher<? extends HttpObject> publisher) {\n         super(publisher);\n     }\n+\n+    static PublisherBasedHttpResponse from(ResponseHeaders headers,\n+                                           Publisher<? extends HttpData> contentPublisher) {\n+        return new PublisherBasedHttpResponse(new HeadersAndContentProcessor(headers, contentPublisher));\n+    }\n+\n+    static final class HeadersAndContentProcessor implements Processor<HttpData, HttpObject> {\n+\n+        private final ResponseHeaders headers;\n+        @Nullable\n+        private Subscriber<? super HttpObject> subscriber;\n+        @Nullable\n+        private Subscription contentSubscription;\n+\n+        HeadersAndContentProcessor(ResponseHeaders headers, Publisher<? extends HttpData> contentPublisher) {\n+            this.headers = headers;\n+            contentPublisher.subscribe(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMzODkwOQ=="}, "originalCommit": {"oid": "73ae26836b21045463a5b2a953e4f1bd40305c86"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM3OTY1OA==", "bodyText": "How about generalizing this class such as PrependingPublisher? (could be in internal.common.stream)\nclass PrependingPublisher<T> implements Publisher<T> {\n\n    PrependingPublisher(T first, Publisher<? extends T> publisher) {\n        ...\n    }\n}\n\n\nIt would be better to replace Processor with Publisher if we generalize it.\n\n\nThe Subscriber interface could move to HeadersAndContentSubscription (perhaps we need a better name)\n\nBy moving Subscriber to SubscriptionImpl, we don't need to care if subscriber is null\nclass SubscriptionImpl implements Subscriber<T>, Subscription {\n\n    // This is non-null always.\n    private final Subscriber<T> subscriber;\n\n    SubscriptionImpl (Subscriber<T> subscriber) {\n    \n   }\n}\n\n\n\n\nLet's add Reactive Streams TCK for the PrependingPublisher.", "url": "https://github.com/line/armeria/pull/3237#discussion_r550379658", "createdAt": "2020-12-31T02:31:43Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/PublisherBasedHttpResponse.java", "diffHunk": "@@ -25,4 +30,86 @@\n     PublisherBasedHttpResponse(Publisher<? extends HttpObject> publisher) {\n         super(publisher);\n     }\n+\n+    static PublisherBasedHttpResponse from(ResponseHeaders headers,\n+                                           Publisher<? extends HttpData> contentPublisher) {\n+        return new PublisherBasedHttpResponse(new HeadersAndContentProcessor(headers, contentPublisher));\n+    }\n+\n+    static final class HeadersAndContentProcessor implements Processor<HttpData, HttpObject> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ce1953e1a5a97d32def7e343a5eb57d8ecd4a1"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3838c27b95ac9925b98eb4ca4eb56a252c3e4df8", "author": {"user": {"login": "tumile", "name": "Tuan Le"}}, "url": "https://github.com/line/armeria/commit/3838c27b95ac9925b98eb4ca4eb56a252c3e4df8", "committedDate": "2020-12-31T09:27:15Z", "message": "Add PrependingPublisher"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNzUyOTIx", "url": "https://github.com/line/armeria/pull/3237#pullrequestreview-560752921", "createdAt": "2021-01-04T02:24:59Z", "commit": {"oid": "3838c27b95ac9925b98eb4ca4eb56a252c3e4df8"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwMjoyNDo1OVrOINj75g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwMjoyODo0MlrOINj-iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA5MTE3NA==", "bodyText": "A non-positive request is illegal. Should send IllegalArgumentException to the subscriber via onError https://github.com/reactive-streams/reactive-streams-jvm#3.9", "url": "https://github.com/line/armeria/pull/3237#discussion_r551091174", "createdAt": "2021-01-04T02:24:59Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/PrependingPublisher.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+public final class PrependingPublisher<T> implements Publisher<T> {\n+\n+    private final T first;\n+    private final Publisher<? extends T> rest;\n+\n+    public PrependingPublisher(T first, Publisher<? extends T> rest) {\n+        this.first = first;\n+        this.rest = rest;\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        final RestSubscriber restSubscriber = new RestSubscriber(subscriber);\n+        rest.subscribe(restSubscriber);\n+    }\n+\n+    final class RestSubscriber implements Subscriber<T>, Subscription {\n+\n+        private final Subscriber<? super T> subscriber;\n+        @Nullable\n+        private volatile Subscription subscription;\n+        @Nullable\n+        private volatile Throwable cause;\n+        private volatile boolean completed;\n+        private volatile boolean firstSent;\n+\n+        RestSubscriber(Subscriber<? super T> subscriber) {\n+            this.subscriber = subscriber;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            this.subscription = subscription;\n+            subscriber.onSubscribe(this);\n+        }\n+\n+        @Override\n+        public void onNext(T t) {\n+            subscriber.onNext(t);\n+        }\n+\n+        @Override\n+        public void onError(Throwable t) {\n+            // delay onError until the first piece is sent\n+            if (!firstSent) {\n+                cause = t;\n+            } else {\n+                subscriber.onError(t);\n+            }\n+        }\n+\n+        @Override\n+        public void onComplete() {\n+            // delay onComplete until the first piece is sent\n+            if (!firstSent) {\n+                completed = true;\n+            } else {\n+                subscriber.onComplete();\n+            }\n+        }\n+\n+        @Override\n+        public void request(long n) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3838c27b95ac9925b98eb4ca4eb56a252c3e4df8"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA5MTQxNQ==", "bodyText": "We should not decrease the n value if it is Long.MAX_VALUE", "url": "https://github.com/line/armeria/pull/3237#discussion_r551091415", "createdAt": "2021-01-04T02:26:13Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/PrependingPublisher.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+public final class PrependingPublisher<T> implements Publisher<T> {\n+\n+    private final T first;\n+    private final Publisher<? extends T> rest;\n+\n+    public PrependingPublisher(T first, Publisher<? extends T> rest) {\n+        this.first = first;\n+        this.rest = rest;\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        final RestSubscriber restSubscriber = new RestSubscriber(subscriber);\n+        rest.subscribe(restSubscriber);\n+    }\n+\n+    final class RestSubscriber implements Subscriber<T>, Subscription {\n+\n+        private final Subscriber<? super T> subscriber;\n+        @Nullable\n+        private volatile Subscription subscription;\n+        @Nullable\n+        private volatile Throwable cause;\n+        private volatile boolean completed;\n+        private volatile boolean firstSent;\n+\n+        RestSubscriber(Subscriber<? super T> subscriber) {\n+            this.subscriber = subscriber;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            this.subscription = subscription;\n+            subscriber.onSubscribe(this);\n+        }\n+\n+        @Override\n+        public void onNext(T t) {\n+            subscriber.onNext(t);\n+        }\n+\n+        @Override\n+        public void onError(Throwable t) {\n+            // delay onError until the first piece is sent\n+            if (!firstSent) {\n+                cause = t;\n+            } else {\n+                subscriber.onError(t);\n+            }\n+        }\n+\n+        @Override\n+        public void onComplete() {\n+            // delay onComplete until the first piece is sent\n+            if (!firstSent) {\n+                completed = true;\n+            } else {\n+                subscriber.onComplete();\n+            }\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (!firstSent) {\n+                subscriber.onNext(first);\n+                n--;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3838c27b95ac9925b98eb4ca4eb56a252c3e4df8"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA5MTg1MQ==", "bodyText": "If cancel() is called, this publisher should drop the subscriber reference to be garbage-collected. https://github.com/reactive-streams/reactive-streams-jvm#3.13", "url": "https://github.com/line/armeria/pull/3237#discussion_r551091851", "createdAt": "2021-01-04T02:28:42Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/PrependingPublisher.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+public final class PrependingPublisher<T> implements Publisher<T> {\n+\n+    private final T first;\n+    private final Publisher<? extends T> rest;\n+\n+    public PrependingPublisher(T first, Publisher<? extends T> rest) {\n+        this.first = first;\n+        this.rest = rest;\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        final RestSubscriber restSubscriber = new RestSubscriber(subscriber);\n+        rest.subscribe(restSubscriber);\n+    }\n+\n+    final class RestSubscriber implements Subscriber<T>, Subscription {\n+\n+        private final Subscriber<? super T> subscriber;\n+        @Nullable\n+        private volatile Subscription subscription;\n+        @Nullable\n+        private volatile Throwable cause;\n+        private volatile boolean completed;\n+        private volatile boolean firstSent;\n+\n+        RestSubscriber(Subscriber<? super T> subscriber) {\n+            this.subscriber = subscriber;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            this.subscription = subscription;\n+            subscriber.onSubscribe(this);\n+        }\n+\n+        @Override\n+        public void onNext(T t) {\n+            subscriber.onNext(t);\n+        }\n+\n+        @Override\n+        public void onError(Throwable t) {\n+            // delay onError until the first piece is sent\n+            if (!firstSent) {\n+                cause = t;\n+            } else {\n+                subscriber.onError(t);\n+            }\n+        }\n+\n+        @Override\n+        public void onComplete() {\n+            // delay onComplete until the first piece is sent\n+            if (!firstSent) {\n+                completed = true;\n+            } else {\n+                subscriber.onComplete();\n+            }\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (!firstSent) {\n+                subscriber.onNext(first);\n+                n--;\n+                firstSent = true;\n+            }\n+            if (n > 0) {\n+                if (cause != null) {\n+                    subscriber.onError(cause);\n+                } else if (completed) {\n+                    subscriber.onComplete();\n+                } else {\n+                    subscription.request(n);\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public void cancel() {\n+            subscription.cancel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3838c27b95ac9925b98eb4ca4eb56a252c3e4df8"}, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afd7938b14681af8941a1cd450d25b9904372d56", "author": {"user": {"login": "tumile", "name": "Tuan Le"}}, "url": "https://github.com/line/armeria/commit/afd7938b14681af8941a1cd450d25b9904372d56", "committedDate": "2021-01-05T17:16:18Z", "message": "Add PrependingPublisherTckTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMzQxMzcx", "url": "https://github.com/line/armeria/pull/3237#pullrequestreview-562341371", "createdAt": "2021-01-06T05:52:43Z", "commit": {"oid": "afd7938b14681af8941a1cd450d25b9904372d56"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNTo1Mjo0M1rOIOy0OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNjoyMjozOFrOIOzUOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM4MzU0NA==", "bodyText": "This publisher only manages first internally. Can we specially handle first and remove demand?", "url": "https://github.com/line/armeria/pull/3237#discussion_r552383544", "createdAt": "2021-01-06T05:52:43Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/PrependingPublisher.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+public final class PrependingPublisher<T> implements Publisher<T> {\n+\n+    private final T first;\n+    private final Publisher<? extends T> rest;\n+\n+    public PrependingPublisher(T first, Publisher<? extends T> rest) {\n+        this.first = first;\n+        this.rest = rest;\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        final RestSubscriber restSubscriber = new RestSubscriber(subscriber);\n+        rest.subscribe(restSubscriber);\n+    }\n+\n+    final class RestSubscriber implements Subscriber<T>, Subscription {\n+\n+        private Subscriber<? super T> downstream;\n+        private final AtomicLong demand = new AtomicLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd7938b14681af8941a1cd450d25b9904372d56"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM4NTQzOQ==", "bodyText": "Replace with NoopSubscriber.get()?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        downstream = null;\n          \n          \n            \n                        downstream = NoopSubscriber.get();", "url": "https://github.com/line/armeria/pull/3237#discussion_r552385439", "createdAt": "2021-01-06T05:59:32Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/PrependingPublisher.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+public final class PrependingPublisher<T> implements Publisher<T> {\n+\n+    private final T first;\n+    private final Publisher<? extends T> rest;\n+\n+    public PrependingPublisher(T first, Publisher<? extends T> rest) {\n+        this.first = first;\n+        this.rest = rest;\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        final RestSubscriber restSubscriber = new RestSubscriber(subscriber);\n+        rest.subscribe(restSubscriber);\n+    }\n+\n+    final class RestSubscriber implements Subscriber<T>, Subscription {\n+\n+        private Subscriber<? super T> downstream;\n+        private final AtomicLong demand = new AtomicLong();\n+        @Nullable\n+        private volatile Subscription upstream;\n+        @Nullable\n+        private volatile Throwable upstreamCause;\n+        private volatile boolean upstreamCompleted;\n+        private volatile boolean completed;\n+        private volatile boolean firstSent;\n+\n+        RestSubscriber(Subscriber<? super T> downstream) {\n+            this.downstream = downstream;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            this.upstream = subscription;\n+            downstream.onSubscribe(this);\n+        }\n+\n+        @Override\n+        public void onNext(T t) {\n+            demand.decrementAndGet();\n+            downstream.onNext(t);\n+        }\n+\n+        @Override\n+        public void onError(Throwable t) {\n+            // delay onError until the first piece is sent\n+            if (!firstSent) {\n+                upstreamCause = t;\n+            } else {\n+                downstream.onError(t);\n+            }\n+        }\n+\n+        @Override\n+        public void onComplete() {\n+            // delay onComplete until the first piece is sent\n+            if (!firstSent) {\n+                upstreamCompleted = true;\n+            } else {\n+                downstream.onComplete();\n+            }\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (n <= 0) {\n+                downstream.onError(new IllegalArgumentException(\"non-positive request signals are illegal\"));\n+                return;\n+            }\n+            if (completed) {\n+                return;\n+            }\n+            if (demand.getAndAdd(n) > 0) {\n+                return;\n+            }\n+            if (!firstSent) {\n+                firstSent = true;\n+                downstream.onNext(first);\n+                if (n < Long.MAX_VALUE) {\n+                    demand.decrementAndGet();\n+                }\n+            }\n+            if (demand.get() > 0) {\n+                if (upstreamCause != null) {\n+                    downstream.onError(upstreamCause);\n+                } else if (upstreamCompleted) {\n+                    completed = true;\n+                    downstream.onComplete();\n+                } else {\n+                    upstream.request(demand.get());\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public void cancel() {\n+            if (completed) {\n+                return;\n+            }\n+            completed = true;\n+            downstream = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd7938b14681af8941a1cd450d25b9904372d56"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM4NTgwOA==", "bodyText": "requireNonNull?\nhttps://github.com/reactive-streams/reactive-streams-jvm#2.13", "url": "https://github.com/line/armeria/pull/3237#discussion_r552385808", "createdAt": "2021-01-06T06:00:50Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/PrependingPublisher.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+public final class PrependingPublisher<T> implements Publisher<T> {\n+\n+    private final T first;\n+    private final Publisher<? extends T> rest;\n+\n+    public PrependingPublisher(T first, Publisher<? extends T> rest) {\n+        this.first = first;\n+        this.rest = rest;\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        final RestSubscriber restSubscriber = new RestSubscriber(subscriber);\n+        rest.subscribe(restSubscriber);\n+    }\n+\n+    final class RestSubscriber implements Subscriber<T>, Subscription {\n+\n+        private Subscriber<? super T> downstream;\n+        private final AtomicLong demand = new AtomicLong();\n+        @Nullable\n+        private volatile Subscription upstream;\n+        @Nullable\n+        private volatile Throwable upstreamCause;\n+        private volatile boolean upstreamCompleted;\n+        private volatile boolean completed;\n+        private volatile boolean firstSent;\n+\n+        RestSubscriber(Subscriber<? super T> downstream) {\n+            this.downstream = downstream;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            this.upstream = subscription;\n+            downstream.onSubscribe(this);\n+        }\n+\n+        @Override\n+        public void onNext(T t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd7938b14681af8941a1cd450d25b9904372d56"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM4NTgyOQ==", "bodyText": "requireNonNull?\nhttps://github.com/reactive-streams/reactive-streams-jvm#2.13", "url": "https://github.com/line/armeria/pull/3237#discussion_r552385829", "createdAt": "2021-01-06T06:00:58Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/PrependingPublisher.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+public final class PrependingPublisher<T> implements Publisher<T> {\n+\n+    private final T first;\n+    private final Publisher<? extends T> rest;\n+\n+    public PrependingPublisher(T first, Publisher<? extends T> rest) {\n+        this.first = first;\n+        this.rest = rest;\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        final RestSubscriber restSubscriber = new RestSubscriber(subscriber);\n+        rest.subscribe(restSubscriber);\n+    }\n+\n+    final class RestSubscriber implements Subscriber<T>, Subscription {\n+\n+        private Subscriber<? super T> downstream;\n+        private final AtomicLong demand = new AtomicLong();\n+        @Nullable\n+        private volatile Subscription upstream;\n+        @Nullable\n+        private volatile Throwable upstreamCause;\n+        private volatile boolean upstreamCompleted;\n+        private volatile boolean completed;\n+        private volatile boolean firstSent;\n+\n+        RestSubscriber(Subscriber<? super T> downstream) {\n+            this.downstream = downstream;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            this.upstream = subscription;\n+            downstream.onSubscribe(this);\n+        }\n+\n+        @Override\n+        public void onNext(T t) {\n+            demand.decrementAndGet();\n+            downstream.onNext(t);\n+        }\n+\n+        @Override\n+        public void onError(Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd7938b14681af8941a1cd450d25b9904372d56"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM4NjkyNA==", "bodyText": "How about introducing a local variable for upstreamCause to avoid accessing the volatile variable twice?", "url": "https://github.com/line/armeria/pull/3237#discussion_r552386924", "createdAt": "2021-01-06T06:05:09Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/PrependingPublisher.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+public final class PrependingPublisher<T> implements Publisher<T> {\n+\n+    private final T first;\n+    private final Publisher<? extends T> rest;\n+\n+    public PrependingPublisher(T first, Publisher<? extends T> rest) {\n+        this.first = first;\n+        this.rest = rest;\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        final RestSubscriber restSubscriber = new RestSubscriber(subscriber);\n+        rest.subscribe(restSubscriber);\n+    }\n+\n+    final class RestSubscriber implements Subscriber<T>, Subscription {\n+\n+        private Subscriber<? super T> downstream;\n+        private final AtomicLong demand = new AtomicLong();\n+        @Nullable\n+        private volatile Subscription upstream;\n+        @Nullable\n+        private volatile Throwable upstreamCause;\n+        private volatile boolean upstreamCompleted;\n+        private volatile boolean completed;\n+        private volatile boolean firstSent;\n+\n+        RestSubscriber(Subscriber<? super T> downstream) {\n+            this.downstream = downstream;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            this.upstream = subscription;\n+            downstream.onSubscribe(this);\n+        }\n+\n+        @Override\n+        public void onNext(T t) {\n+            demand.decrementAndGet();\n+            downstream.onNext(t);\n+        }\n+\n+        @Override\n+        public void onError(Throwable t) {\n+            // delay onError until the first piece is sent\n+            if (!firstSent) {\n+                upstreamCause = t;\n+            } else {\n+                downstream.onError(t);\n+            }\n+        }\n+\n+        @Override\n+        public void onComplete() {\n+            // delay onComplete until the first piece is sent\n+            if (!firstSent) {\n+                upstreamCompleted = true;\n+            } else {\n+                downstream.onComplete();\n+            }\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (n <= 0) {\n+                downstream.onError(new IllegalArgumentException(\"non-positive request signals are illegal\"));\n+                return;\n+            }\n+            if (completed) {\n+                return;\n+            }\n+            if (demand.getAndAdd(n) > 0) {\n+                return;\n+            }\n+            if (!firstSent) {\n+                firstSent = true;\n+                downstream.onNext(first);\n+                if (n < Long.MAX_VALUE) {\n+                    demand.decrementAndGet();\n+                }\n+            }\n+            if (demand.get() > 0) {\n+                if (upstreamCause != null) {\n+                    downstream.onError(upstreamCause);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd7938b14681af8941a1cd450d25b9904372d56"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM4ODA3Mw==", "bodyText": "Don't we need to pass the request signal to upstream if the previous demand is 0?", "url": "https://github.com/line/armeria/pull/3237#discussion_r552388073", "createdAt": "2021-01-06T06:09:08Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/PrependingPublisher.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+public final class PrependingPublisher<T> implements Publisher<T> {\n+\n+    private final T first;\n+    private final Publisher<? extends T> rest;\n+\n+    public PrependingPublisher(T first, Publisher<? extends T> rest) {\n+        this.first = first;\n+        this.rest = rest;\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        final RestSubscriber restSubscriber = new RestSubscriber(subscriber);\n+        rest.subscribe(restSubscriber);\n+    }\n+\n+    final class RestSubscriber implements Subscriber<T>, Subscription {\n+\n+        private Subscriber<? super T> downstream;\n+        private final AtomicLong demand = new AtomicLong();\n+        @Nullable\n+        private volatile Subscription upstream;\n+        @Nullable\n+        private volatile Throwable upstreamCause;\n+        private volatile boolean upstreamCompleted;\n+        private volatile boolean completed;\n+        private volatile boolean firstSent;\n+\n+        RestSubscriber(Subscriber<? super T> downstream) {\n+            this.downstream = downstream;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            this.upstream = subscription;\n+            downstream.onSubscribe(this);\n+        }\n+\n+        @Override\n+        public void onNext(T t) {\n+            demand.decrementAndGet();\n+            downstream.onNext(t);\n+        }\n+\n+        @Override\n+        public void onError(Throwable t) {\n+            // delay onError until the first piece is sent\n+            if (!firstSent) {\n+                upstreamCause = t;\n+            } else {\n+                downstream.onError(t);\n+            }\n+        }\n+\n+        @Override\n+        public void onComplete() {\n+            // delay onComplete until the first piece is sent\n+            if (!firstSent) {\n+                upstreamCompleted = true;\n+            } else {\n+                downstream.onComplete();\n+            }\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (n <= 0) {\n+                downstream.onError(new IllegalArgumentException(\"non-positive request signals are illegal\"));\n+                return;\n+            }\n+            if (completed) {\n+                return;\n+            }\n+            if (demand.getAndAdd(n) > 0) {\n+                return;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd7938b14681af8941a1cd450d25b9904372d56"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM4ODE5NA==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        this.upstream = subscription;\n          \n          \n            \n                        upstream = subscription;", "url": "https://github.com/line/armeria/pull/3237#discussion_r552388194", "createdAt": "2021-01-06T06:09:41Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/PrependingPublisher.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+public final class PrependingPublisher<T> implements Publisher<T> {\n+\n+    private final T first;\n+    private final Publisher<? extends T> rest;\n+\n+    public PrependingPublisher(T first, Publisher<? extends T> rest) {\n+        this.first = first;\n+        this.rest = rest;\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        final RestSubscriber restSubscriber = new RestSubscriber(subscriber);\n+        rest.subscribe(restSubscriber);\n+    }\n+\n+    final class RestSubscriber implements Subscriber<T>, Subscription {\n+\n+        private Subscriber<? super T> downstream;\n+        private final AtomicLong demand = new AtomicLong();\n+        @Nullable\n+        private volatile Subscription upstream;\n+        @Nullable\n+        private volatile Throwable upstreamCause;\n+        private volatile boolean upstreamCompleted;\n+        private volatile boolean completed;\n+        private volatile boolean firstSent;\n+\n+        RestSubscriber(Subscriber<? super T> downstream) {\n+            this.downstream = downstream;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            this.upstream = subscription;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd7938b14681af8941a1cd450d25b9904372d56"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM5MTczNw==", "bodyText": "How about adding an assertion for always receiving the first element from the failed publisher?", "url": "https://github.com/line/armeria/pull/3237#discussion_r552391737", "createdAt": "2021-01-06T06:22:38Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/internal/common/stream/PrependingPublisherTckTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import java.util.stream.LongStream;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscription;\n+import org.reactivestreams.tck.PublisherVerification;\n+import org.reactivestreams.tck.TestEnvironment;\n+import org.reactivestreams.tck.flow.support.PublisherVerificationRules;\n+import org.testng.SkipException;\n+import org.testng.annotations.Test;\n+\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+@SuppressWarnings(\"checkstyle:LineLength\")\n+public class PrependingPublisherTckTest extends PublisherVerification<Object> {\n+\n+    public PrependingPublisherTckTest() {\n+        super(new TestEnvironment(200));\n+    }\n+\n+    @Override\n+    public Publisher<Object> createPublisher(long elements) {\n+        if (elements == 0) {\n+            return Mono.empty();\n+        }\n+        return new PrependingPublisher<>(\"Hello\", Flux.fromStream(LongStream.range(0, elements - 1).boxed()));\n+    }\n+\n+    /**\n+     * Rule 1.4 and 1.9 ensure a Publisher's ability to signal error to the Subscriber, however the\n+     * implementation expects such error to occur immediately after subscribing, i.e. {@code onError()} is\n+     * called after {@code onSubscribe()}. The {@link PrependingPublisher} however always serves at least one\n+     * element before failing, therefore for the error to be signaled, we must make requests first.\n+     *\n+     * {@link PublisherVerificationRules#optional_spec104_mustSignalOnErrorWhenFails()} and\n+     * {@link PublisherVerificationRules#required_spec109_mayRejectCallsToSubscribeIfPublisherIsUnableOrUnwillingToServeThemRejectionMustTriggerOnErrorAfterOnSubscribe()}\n+     * are overridden below to call {@link Subscription#request(long)} after subscribing.\n+     */\n+    @Override\n+    public Publisher<Object> createFailedPublisher() {\n+        return new PrependingPublisher<>(\"Hello\", Mono.error(new RuntimeException()));\n+    }\n+\n+    @Test\n+    @Override\n+    public void optional_spec104_mustSignalOnErrorWhenFails() {\n+        try {\n+            final TestEnvironment env = new TestEnvironment(200);\n+            whenHasErrorPublisherTest(pub -> {\n+                final TestEnvironment.Latch onErrorLatch = new TestEnvironment.Latch(env);\n+                final TestEnvironment.Latch onSubscribeLatch = new TestEnvironment.Latch(env);\n+                pub.subscribe(new TestEnvironment.TestSubscriber<Object>(env) {\n+                    @Override\n+                    public void onSubscribe(Subscription subs) {\n+                        onSubscribeLatch.assertOpen(\"Only one onSubscribe call expected\");\n+                        onSubscribeLatch.close();\n+                        subs.request(Long.MAX_VALUE);\n+                    }\n+\n+                    @Override\n+                    public void onNext(Object element) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd7938b14681af8941a1cd450d25b9904372d56"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bddfd66c903f7a705ebe60db315db65c61d3cb81", "author": {"user": {"login": "tumile", "name": "Tuan Le"}}, "url": "https://github.com/line/armeria/commit/bddfd66c903f7a705ebe60db315db65c61d3cb81", "committedDate": "2021-01-15T06:23:35Z", "message": "Address reviews by @ikhoon"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5MTgyNTUx", "url": "https://github.com/line/armeria/pull/3237#pullrequestreview-569182551", "createdAt": "2021-01-15T11:33:45Z", "commit": {"oid": "bddfd66c903f7a705ebe60db315db65c61d3cb81"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMTozMzo0NVrOIUY0Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMTo0NToxMVrOIUZJRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI0OTAzMA==", "bodyText": "nit: Please declare static fields before member fields.\nhttps://armeria.dev/community/developer-guide#organize", "url": "https://github.com/line/armeria/pull/3237#discussion_r558249030", "createdAt": "2021-01-15T11:33:45Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/PrependingPublisher.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+\n+public final class PrependingPublisher<T> implements Publisher<T> {\n+\n+    private final T first;\n+    private final Publisher<? extends T> rest;\n+\n+    public PrependingPublisher(T first, Publisher<? extends T> rest) {\n+        this.first = first;\n+        this.rest = rest;\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        final RestSubscriber<T> restSubscriber = new RestSubscriber<>(first, subscriber);\n+        rest.subscribe(restSubscriber);\n+    }\n+\n+    static final class RestSubscriber<T> implements Subscriber<T>, Subscription {\n+\n+        private final T first;\n+        private volatile boolean firstSent;\n+\n+        private Subscriber<? super T> downstream;\n+        private volatile long demand;\n+        private static final AtomicLongFieldUpdater<RestSubscriber> demandUpdater =\n+                AtomicLongFieldUpdater.newUpdater(RestSubscriber.class, \"demand\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bddfd66c903f7a705ebe60db315db65c61d3cb81"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI1NDQwNA==", "bodyText": "Don't we need to accept a trailer here?\nWhich is better:\n// May produce a `trailers` at the end of streams\n// We need to check whether an HttpObject is an instance of HttpData before receiving a `trailers` at runtime. \nHttpResponse of(ResponseHeaders headers, Publisher<? extends HttpObject> contentPublisher) {\n}\n\n// Or separately take `tailers`?\n// This is type-safe but the signature is a bit verbose.\nHttpResponse of(ResponseHeaders headers, Publisher<? extends HttpData> contentPublisher, CompletableFuture<HttpHeaders> trailers) {\n}", "url": "https://github.com/line/armeria/pull/3237#discussion_r558254404", "createdAt": "2021-01-15T11:45:11Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponse.java", "diffHunk": "@@ -392,6 +392,16 @@ static HttpResponse of(Publisher<? extends HttpObject> publisher) {\n         }\n     }\n \n+    /**\n+     * Creates a new HTTP response of the specified headers whose content is produced from an existing\n+     * {@link Publisher}.\n+     */\n+    static HttpResponse of(ResponseHeaders headers, Publisher<? extends HttpData> contentPublisher) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bddfd66c903f7a705ebe60db315db65c61d3cb81"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15f571191972e787b6046399039df0fb01092d55", "author": {"user": {"login": "tumile", "name": "Tuan Le"}}, "url": "https://github.com/line/armeria/commit/15f571191972e787b6046399039df0fb01092d55", "committedDate": "2021-01-19T13:57:15Z", "message": "Address reviews"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwNDQ4NjMz", "url": "https://github.com/line/armeria/pull/3237#pullrequestreview-570448633", "createdAt": "2021-01-18T12:33:43Z", "commit": {"oid": "bddfd66c903f7a705ebe60db315db65c61d3cb81"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxMjozMzo0M1rOIVnVGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwMzowMToyNlrOIWq6sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTUzNTM4NA==", "bodyText": "+1 for Publisher<? extends HttpObject>\nAlso, we should rename the contentPublisher to just publisher because it might contain trailers.", "url": "https://github.com/line/armeria/pull/3237#discussion_r559535384", "createdAt": "2021-01-18T12:33:43Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpResponse.java", "diffHunk": "@@ -392,6 +392,16 @@ static HttpResponse of(Publisher<? extends HttpObject> publisher) {\n         }\n     }\n \n+    /**\n+     * Creates a new HTTP response of the specified headers whose content is produced from an existing\n+     * {@link Publisher}.\n+     */\n+    static HttpResponse of(ResponseHeaders headers, Publisher<? extends HttpData> contentPublisher) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI1NDQwNA=="}, "originalCommit": {"oid": "bddfd66c903f7a705ebe60db315db65c61d3cb81"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTUzNzE2Ng==", "bodyText": "Could you move this static factory method on to the constructor?", "url": "https://github.com/line/armeria/pull/3237#discussion_r559537166", "createdAt": "2021-01-18T12:36:58Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/PublisherBasedHttpResponse.java", "diffHunk": "@@ -19,10 +19,16 @@\n import org.reactivestreams.Publisher;\n \n import com.linecorp.armeria.common.stream.PublisherBasedStreamMessage;\n+import com.linecorp.armeria.internal.common.stream.PrependingPublisher;\n \n final class PublisherBasedHttpResponse extends PublisherBasedStreamMessage<HttpObject> implements HttpResponse {\n \n     PublisherBasedHttpResponse(Publisher<? extends HttpObject> publisher) {\n         super(publisher);\n     }\n+\n+    static PublisherBasedHttpResponse from(ResponseHeaders headers,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bddfd66c903f7a705ebe60db315db65c61d3cb81"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDY0MDYxNw==", "bodyText": "I think we have to handle the overflow case such as calling with 2 and Long.MAX_VALUE subsequently.\nWe can use for loop and you might want to refer https://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java#L243", "url": "https://github.com/line/armeria/pull/3237#discussion_r560640617", "createdAt": "2021-01-20T02:55:04Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/PrependingPublisher.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+\n+public final class PrependingPublisher<T> implements Publisher<T> {\n+\n+    private final T first;\n+    private final Publisher<? extends T> rest;\n+\n+    public PrependingPublisher(T first, Publisher<? extends T> rest) {\n+        this.first = first;\n+        this.rest = rest;\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        final RestSubscriber<T> restSubscriber = new RestSubscriber<>(first, subscriber);\n+        rest.subscribe(restSubscriber);\n+    }\n+\n+    static final class RestSubscriber<T> implements Subscriber<T>, Subscription {\n+\n+        private static final AtomicLongFieldUpdater<RestSubscriber> demandUpdater =\n+                AtomicLongFieldUpdater.newUpdater(RestSubscriber.class, \"demand\");\n+        private final T first;\n+        private volatile boolean firstSent;\n+        private Subscriber<? super T> downstream;\n+        private volatile long demand;\n+        @Nullable\n+        private volatile Subscription upstream;\n+        @Nullable\n+        private volatile Throwable upstreamCause;\n+        private volatile boolean upstreamCompleted;\n+        private volatile boolean completed;\n+\n+        RestSubscriber(T first, Subscriber<? super T> downstream) {\n+            this.first = first;\n+            this.downstream = downstream;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            upstream = subscription;\n+            downstream.onSubscribe(this);\n+        }\n+\n+        @Override\n+        public void onNext(T t) {\n+            requireNonNull(t, \"element\");\n+            demandUpdater.decrementAndGet(this);\n+            downstream.onNext(t);\n+        }\n+\n+        @Override\n+        public void onError(Throwable t) {\n+            requireNonNull(t, \"throwable\");\n+            // delay onError until the first piece is sent\n+            if (!firstSent) {\n+                upstreamCause = t;\n+            } else {\n+                downstream.onError(t);\n+            }\n+        }\n+\n+        @Override\n+        public void onComplete() {\n+            // delay onComplete until the first piece is sent\n+            if (!firstSent) {\n+                upstreamCompleted = true;\n+            } else {\n+                downstream.onComplete();\n+            }\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (n <= 0) {\n+                downstream.onError(new IllegalArgumentException(\"non-positive request signals are illegal\"));\n+                return;\n+            }\n+            if (completed) {\n+                return;\n+            }\n+            if (demandUpdater.getAndAdd(this, n) > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f571191972e787b6046399039df0fb01092d55"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDY0MjQzOQ==", "bodyText": "We don't decrement when the demand is Long.MAX_VALUE.", "url": "https://github.com/line/armeria/pull/3237#discussion_r560642439", "createdAt": "2021-01-20T03:00:20Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/PrependingPublisher.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+\n+public final class PrependingPublisher<T> implements Publisher<T> {\n+\n+    private final T first;\n+    private final Publisher<? extends T> rest;\n+\n+    public PrependingPublisher(T first, Publisher<? extends T> rest) {\n+        this.first = first;\n+        this.rest = rest;\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        final RestSubscriber<T> restSubscriber = new RestSubscriber<>(first, subscriber);\n+        rest.subscribe(restSubscriber);\n+    }\n+\n+    static final class RestSubscriber<T> implements Subscriber<T>, Subscription {\n+\n+        private static final AtomicLongFieldUpdater<RestSubscriber> demandUpdater =\n+                AtomicLongFieldUpdater.newUpdater(RestSubscriber.class, \"demand\");\n+        private final T first;\n+        private volatile boolean firstSent;\n+        private Subscriber<? super T> downstream;\n+        private volatile long demand;\n+        @Nullable\n+        private volatile Subscription upstream;\n+        @Nullable\n+        private volatile Throwable upstreamCause;\n+        private volatile boolean upstreamCompleted;\n+        private volatile boolean completed;\n+\n+        RestSubscriber(T first, Subscriber<? super T> downstream) {\n+            this.first = first;\n+            this.downstream = downstream;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            upstream = subscription;\n+            downstream.onSubscribe(this);\n+        }\n+\n+        @Override\n+        public void onNext(T t) {\n+            requireNonNull(t, \"element\");\n+            demandUpdater.decrementAndGet(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f571191972e787b6046399039df0fb01092d55"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDY0MjczNg==", "bodyText": "I think this is not thread-safe.\nLet's say thread A executes line 85 and just before executing line 86.\nAnd thread B executes 115~130. Then we are going to miss this onError event.\nTo solve this simply, I think we can just call downstream.onNext(first) in onNext() or onComplete() of RestSubscriber. (in onError() I think we don't pass the first)\nThe request(...) method will just handle adding up the demand.\nI realized that it's not working. \ud83d\ude05 Let me get back to this later.", "url": "https://github.com/line/armeria/pull/3237#discussion_r560642736", "createdAt": "2021-01-20T03:01:26Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/PrependingPublisher.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+\n+public final class PrependingPublisher<T> implements Publisher<T> {\n+\n+    private final T first;\n+    private final Publisher<? extends T> rest;\n+\n+    public PrependingPublisher(T first, Publisher<? extends T> rest) {\n+        this.first = first;\n+        this.rest = rest;\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        final RestSubscriber<T> restSubscriber = new RestSubscriber<>(first, subscriber);\n+        rest.subscribe(restSubscriber);\n+    }\n+\n+    static final class RestSubscriber<T> implements Subscriber<T>, Subscription {\n+\n+        private static final AtomicLongFieldUpdater<RestSubscriber> demandUpdater =\n+                AtomicLongFieldUpdater.newUpdater(RestSubscriber.class, \"demand\");\n+        private final T first;\n+        private volatile boolean firstSent;\n+        private Subscriber<? super T> downstream;\n+        private volatile long demand;\n+        @Nullable\n+        private volatile Subscription upstream;\n+        @Nullable\n+        private volatile Throwable upstreamCause;\n+        private volatile boolean upstreamCompleted;\n+        private volatile boolean completed;\n+\n+        RestSubscriber(T first, Subscriber<? super T> downstream) {\n+            this.first = first;\n+            this.downstream = downstream;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            upstream = subscription;\n+            downstream.onSubscribe(this);\n+        }\n+\n+        @Override\n+        public void onNext(T t) {\n+            requireNonNull(t, \"element\");\n+            demandUpdater.decrementAndGet(this);\n+            downstream.onNext(t);\n+        }\n+\n+        @Override\n+        public void onError(Throwable t) {\n+            requireNonNull(t, \"throwable\");\n+            // delay onError until the first piece is sent\n+            if (!firstSent) {\n+                upstreamCause = t;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f571191972e787b6046399039df0fb01092d55"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyMDAyNzQ5", "url": "https://github.com/line/armeria/pull/3237#pullrequestreview-572002749", "createdAt": "2021-01-20T09:01:12Z", "commit": {"oid": "15f571191972e787b6046399039df0fb01092d55"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c64f69803bf84b4a3cb2850adf3060fc09b37b1b", "author": {"user": {"login": "tumile", "name": "Tuan Le"}}, "url": "https://github.com/line/armeria/commit/c64f69803bf84b4a3cb2850adf3060fc09b37b1b", "committedDate": "2021-01-24T16:16:04Z", "message": "Address reviews by @minwoox"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc1MDQ5Nzgz", "url": "https://github.com/line/armeria/pull/3237#pullrequestreview-575049783", "createdAt": "2021-01-25T03:45:45Z", "commit": {"oid": "c64f69803bf84b4a3cb2850adf3060fc09b37b1b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQwMzo0NTo0NVrOIZWJoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQwMzo0NTo0NVrOIZWJoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzQ0ODIyNQ==", "bodyText": "nit: Use LongMath.saturatedAdd(demand, n)?", "url": "https://github.com/line/armeria/pull/3237#discussion_r563448225", "createdAt": "2021-01-25T03:45:45Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/PrependingPublisher.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+\n+public final class PrependingPublisher<T> implements Publisher<T> {\n+\n+    private final T first;\n+    private final Publisher<? extends T> rest;\n+\n+    public PrependingPublisher(T first, Publisher<? extends T> rest) {\n+        this.first = first;\n+        this.rest = rest;\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        final RestSubscriber<T> restSubscriber = new RestSubscriber<>(first, rest, subscriber);\n+        subscriber.onSubscribe(restSubscriber);\n+    }\n+\n+    static final class RestSubscriber<T> implements Subscriber<T>, Subscription {\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicLongFieldUpdater<RestSubscriber> demandUpdater =\n+                AtomicLongFieldUpdater.newUpdater(RestSubscriber.class, \"demand\");\n+\n+        private final T first;\n+        private final Publisher<? extends T> rest;\n+        private Subscriber<? super T> downstream;\n+        @Nullable\n+        private volatile Subscription upstream;\n+        private volatile long demand;\n+        private volatile boolean firstSent;\n+        private volatile boolean subscribed;\n+        private volatile boolean cancelled;\n+\n+        RestSubscriber(T first, Publisher<? extends T> rest, Subscriber<? super T> downstream) {\n+            this.first = first;\n+            this.rest = rest;\n+            this.downstream = downstream;\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (n <= 0) {\n+                downstream.onError(new IllegalArgumentException(\"non-positive request signals are illegal\"));\n+                return;\n+            }\n+            if (cancelled) {\n+                return;\n+            }\n+            for (;;) {\n+                final long demand = this.demand;\n+                final long newDemand = demand >= Long.MAX_VALUE - n ? Long.MAX_VALUE : demand + n;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c64f69803bf84b4a3cb2850adf3060fc09b37b1b"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc1MDUxNjc0", "url": "https://github.com/line/armeria/pull/3237#pullrequestreview-575051674", "createdAt": "2021-01-25T03:54:16Z", "commit": {"oid": "c64f69803bf84b4a3cb2850adf3060fc09b37b1b"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQwMzo1NDoxNlrOIZWQGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQwMzo1ODo1N1rOIZWUDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzQ0OTg4Mw==", "bodyText": "I think we don't have to check cancelled here because the subscriber will not call request after it calls cancel().\nPlease forget about this comment. \ud83d\ude05\n#3299 (comment)", "url": "https://github.com/line/armeria/pull/3237#discussion_r563449883", "createdAt": "2021-01-25T03:54:16Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/PrependingPublisher.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+\n+public final class PrependingPublisher<T> implements Publisher<T> {\n+\n+    private final T first;\n+    private final Publisher<? extends T> rest;\n+\n+    public PrependingPublisher(T first, Publisher<? extends T> rest) {\n+        this.first = first;\n+        this.rest = rest;\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        final RestSubscriber<T> restSubscriber = new RestSubscriber<>(first, rest, subscriber);\n+        subscriber.onSubscribe(restSubscriber);\n+    }\n+\n+    static final class RestSubscriber<T> implements Subscriber<T>, Subscription {\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicLongFieldUpdater<RestSubscriber> demandUpdater =\n+                AtomicLongFieldUpdater.newUpdater(RestSubscriber.class, \"demand\");\n+\n+        private final T first;\n+        private final Publisher<? extends T> rest;\n+        private Subscriber<? super T> downstream;\n+        @Nullable\n+        private volatile Subscription upstream;\n+        private volatile long demand;\n+        private volatile boolean firstSent;\n+        private volatile boolean subscribed;\n+        private volatile boolean cancelled;\n+\n+        RestSubscriber(T first, Publisher<? extends T> rest, Subscriber<? super T> downstream) {\n+            this.first = first;\n+            this.rest = rest;\n+            this.downstream = downstream;\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (n <= 0) {\n+                downstream.onError(new IllegalArgumentException(\"non-positive request signals are illegal\"));\n+                return;\n+            }\n+            if (cancelled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c64f69803bf84b4a3cb2850adf3060fc09b37b1b"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzQ1MDA0Mg==", "bodyText": "I think we can remove volatile from firstSent and subscribed because there are accessed only by the subscriber thread.", "url": "https://github.com/line/armeria/pull/3237#discussion_r563450042", "createdAt": "2021-01-25T03:55:05Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/PrependingPublisher.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+\n+public final class PrependingPublisher<T> implements Publisher<T> {\n+\n+    private final T first;\n+    private final Publisher<? extends T> rest;\n+\n+    public PrependingPublisher(T first, Publisher<? extends T> rest) {\n+        this.first = first;\n+        this.rest = rest;\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        final RestSubscriber<T> restSubscriber = new RestSubscriber<>(first, rest, subscriber);\n+        subscriber.onSubscribe(restSubscriber);\n+    }\n+\n+    static final class RestSubscriber<T> implements Subscriber<T>, Subscription {\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicLongFieldUpdater<RestSubscriber> demandUpdater =\n+                AtomicLongFieldUpdater.newUpdater(RestSubscriber.class, \"demand\");\n+\n+        private final T first;\n+        private final Publisher<? extends T> rest;\n+        private Subscriber<? super T> downstream;\n+        @Nullable\n+        private volatile Subscription upstream;\n+        private volatile long demand;\n+        private volatile boolean firstSent;\n+        private volatile boolean subscribed;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c64f69803bf84b4a3cb2850adf3060fc09b37b1b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzQ1MDQwOA==", "bodyText": "Shouldn't we just remove this condition?", "url": "https://github.com/line/armeria/pull/3237#discussion_r563450408", "createdAt": "2021-01-25T03:56:50Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/PrependingPublisher.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+\n+public final class PrependingPublisher<T> implements Publisher<T> {\n+\n+    private final T first;\n+    private final Publisher<? extends T> rest;\n+\n+    public PrependingPublisher(T first, Publisher<? extends T> rest) {\n+        this.first = first;\n+        this.rest = rest;\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        final RestSubscriber<T> restSubscriber = new RestSubscriber<>(first, rest, subscriber);\n+        subscriber.onSubscribe(restSubscriber);\n+    }\n+\n+    static final class RestSubscriber<T> implements Subscriber<T>, Subscription {\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicLongFieldUpdater<RestSubscriber> demandUpdater =\n+                AtomicLongFieldUpdater.newUpdater(RestSubscriber.class, \"demand\");\n+\n+        private final T first;\n+        private final Publisher<? extends T> rest;\n+        private Subscriber<? super T> downstream;\n+        @Nullable\n+        private volatile Subscription upstream;\n+        private volatile long demand;\n+        private volatile boolean firstSent;\n+        private volatile boolean subscribed;\n+        private volatile boolean cancelled;\n+\n+        RestSubscriber(T first, Publisher<? extends T> rest, Subscriber<? super T> downstream) {\n+            this.first = first;\n+            this.rest = rest;\n+            this.downstream = downstream;\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (n <= 0) {\n+                downstream.onError(new IllegalArgumentException(\"non-positive request signals are illegal\"));\n+                return;\n+            }\n+            if (cancelled) {\n+                return;\n+            }\n+            for (;;) {\n+                final long demand = this.demand;\n+                final long newDemand = demand >= Long.MAX_VALUE - n ? Long.MAX_VALUE : demand + n;\n+                if (demandUpdater.compareAndSet(this, demand, newDemand)) {\n+                    if (demand > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c64f69803bf84b4a3cb2850adf3060fc09b37b1b"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzQ1MDY0Ng==", "bodyText": "If the oldDemand is Long.MAX_VALUE, we don't have to call this method.", "url": "https://github.com/line/armeria/pull/3237#discussion_r563450646", "createdAt": "2021-01-25T03:57:49Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/PrependingPublisher.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+\n+public final class PrependingPublisher<T> implements Publisher<T> {\n+\n+    private final T first;\n+    private final Publisher<? extends T> rest;\n+\n+    public PrependingPublisher(T first, Publisher<? extends T> rest) {\n+        this.first = first;\n+        this.rest = rest;\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        final RestSubscriber<T> restSubscriber = new RestSubscriber<>(first, rest, subscriber);\n+        subscriber.onSubscribe(restSubscriber);\n+    }\n+\n+    static final class RestSubscriber<T> implements Subscriber<T>, Subscription {\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicLongFieldUpdater<RestSubscriber> demandUpdater =\n+                AtomicLongFieldUpdater.newUpdater(RestSubscriber.class, \"demand\");\n+\n+        private final T first;\n+        private final Publisher<? extends T> rest;\n+        private Subscriber<? super T> downstream;\n+        @Nullable\n+        private volatile Subscription upstream;\n+        private volatile long demand;\n+        private volatile boolean firstSent;\n+        private volatile boolean subscribed;\n+        private volatile boolean cancelled;\n+\n+        RestSubscriber(T first, Publisher<? extends T> rest, Subscriber<? super T> downstream) {\n+            this.first = first;\n+            this.rest = rest;\n+            this.downstream = downstream;\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (n <= 0) {\n+                downstream.onError(new IllegalArgumentException(\"non-positive request signals are illegal\"));\n+                return;\n+            }\n+            if (cancelled) {\n+                return;\n+            }\n+            for (;;) {\n+                final long demand = this.demand;\n+                final long newDemand = demand >= Long.MAX_VALUE - n ? Long.MAX_VALUE : demand + n;\n+                if (demandUpdater.compareAndSet(this, demand, newDemand)) {\n+                    if (demand > 0) {\n+                        return;\n+                    }\n+                    break;\n+                }\n+            }\n+            if (!firstSent) {\n+                firstSent = true;\n+                downstream.onNext(first);\n+                demandUpdater.getAndUpdate(this, oldDemand -> oldDemand == Long.MAX_VALUE ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c64f69803bf84b4a3cb2850adf3060fc09b37b1b"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzQ1MDg5Mw==", "bodyText": "how about returning early?\nif (!subscribed) {\n    subscribed = true;\n    rest.subscribe(this);\n}\nif (demand == 0) {\n    return;\n}\n...\nAlso we should subscribe no matter the demand is 0 or not.", "url": "https://github.com/line/armeria/pull/3237#discussion_r563450893", "createdAt": "2021-01-25T03:58:57Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/PrependingPublisher.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+\n+public final class PrependingPublisher<T> implements Publisher<T> {\n+\n+    private final T first;\n+    private final Publisher<? extends T> rest;\n+\n+    public PrependingPublisher(T first, Publisher<? extends T> rest) {\n+        this.first = first;\n+        this.rest = rest;\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        final RestSubscriber<T> restSubscriber = new RestSubscriber<>(first, rest, subscriber);\n+        subscriber.onSubscribe(restSubscriber);\n+    }\n+\n+    static final class RestSubscriber<T> implements Subscriber<T>, Subscription {\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicLongFieldUpdater<RestSubscriber> demandUpdater =\n+                AtomicLongFieldUpdater.newUpdater(RestSubscriber.class, \"demand\");\n+\n+        private final T first;\n+        private final Publisher<? extends T> rest;\n+        private Subscriber<? super T> downstream;\n+        @Nullable\n+        private volatile Subscription upstream;\n+        private volatile long demand;\n+        private volatile boolean firstSent;\n+        private volatile boolean subscribed;\n+        private volatile boolean cancelled;\n+\n+        RestSubscriber(T first, Publisher<? extends T> rest, Subscriber<? super T> downstream) {\n+            this.first = first;\n+            this.rest = rest;\n+            this.downstream = downstream;\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (n <= 0) {\n+                downstream.onError(new IllegalArgumentException(\"non-positive request signals are illegal\"));\n+                return;\n+            }\n+            if (cancelled) {\n+                return;\n+            }\n+            for (;;) {\n+                final long demand = this.demand;\n+                final long newDemand = demand >= Long.MAX_VALUE - n ? Long.MAX_VALUE : demand + n;\n+                if (demandUpdater.compareAndSet(this, demand, newDemand)) {\n+                    if (demand > 0) {\n+                        return;\n+                    }\n+                    break;\n+                }\n+            }\n+            if (!firstSent) {\n+                firstSent = true;\n+                downstream.onNext(first);\n+                demandUpdater.getAndUpdate(this, oldDemand -> oldDemand == Long.MAX_VALUE ?\n+                                                              oldDemand : oldDemand - 1);\n+            }\n+            if (demand > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c64f69803bf84b4a3cb2850adf3060fc09b37b1b"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f458106e8b84a73a1b9a3266e3fda06ad62cf23e", "author": {"user": {"login": "tumile", "name": "Tuan Le"}}, "url": "https://github.com/line/armeria/commit/f458106e8b84a73a1b9a3266e3fda06ad62cf23e", "committedDate": "2021-01-25T14:56:23Z", "message": "Finishing up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39302b849362e2f0f04b7e1ebc52b2ea1da372a5", "author": {"user": {"login": "tumile", "name": "Tuan Le"}}, "url": "https://github.com/line/armeria/commit/39302b849362e2f0f04b7e1ebc52b2ea1da372a5", "committedDate": "2021-01-29T10:39:42Z", "message": "Fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc5OTYxMDU5", "url": "https://github.com/line/armeria/pull/3237#pullrequestreview-579961059", "createdAt": "2021-02-01T01:12:05Z", "commit": {"oid": "39302b849362e2f0f04b7e1ebc52b2ea1da372a5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4560, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}