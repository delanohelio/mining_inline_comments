{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2Mzg0Mzk1", "number": 2816, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzoyOToyOVrOEGwDYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMTozNjoyN1rOEG9pJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTE0MjA5OnYy", "diffSide": "LEFT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzoyOToyOVrOGlvVog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzoyOToyOVrOGlvVog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyNjA4Mg==", "bodyText": "\ud83d\ude05", "url": "https://github.com/line/armeria/pull/2816#discussion_r442226082", "createdAt": "2020-06-18T13:29:29Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleUtil.java", "diffHunk": "@@ -146,10 +225,22 @@ static CircuitBreakerRule orElse(CircuitBreakerRule first, CircuitBreakerRule se\n     }\n \n     private static CircuitBreakerRuleWithContent<HttpResponse>\n-    withDuplicator(CircuitBreakerRuleWithContent<HttpResponse> retryRuleWithContent,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "251033226809c71ce0cc56f192842415df45489c"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzM2ODY5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMTozNjoyN1rOGmFSYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMjo0Njo0M1rOGmGTsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU4NTY5Nw==", "bodyText": "I think we should pass HttpResponse.ofFailure(cause) instead of response.\nIf the rule does not retry on the exception, then the response will be scribed twice.", "url": "https://github.com/line/armeria/pull/2816#discussion_r442585697", "createdAt": "2020-06-19T01:36:27Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java", "diffHunk": "@@ -247,7 +251,26 @@ private void doExecute0(ClientRequestContext ctx, HttpRequestDuplicator rootReqD\n         final HttpResponse response = executeWithFallback(delegate(), derivedCtx,\n                                                           (context, cause) -> HttpResponse.ofFailure(cause));\n \n-        derivedCtx.log().whenAvailable(RequestLogProperty.RESPONSE_HEADERS).thenAccept(log -> {\n+        if (requiresResponseTrailers) {\n+            response.aggregate().handle((aggregated, cause) -> {\n+                handleResponse(ctx, rootReqDuplicator, originalReq, returnedRes, future, derivedCtx,\n+                               cause != null ? response : aggregated.toHttpResponse());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "251033226809c71ce0cc56f192842415df45489c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYwMjQxNg==", "bodyText": "Nice catch! Fixed.", "url": "https://github.com/line/armeria/pull/2816#discussion_r442602416", "createdAt": "2020-06-19T02:46:43Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java", "diffHunk": "@@ -247,7 +251,26 @@ private void doExecute0(ClientRequestContext ctx, HttpRequestDuplicator rootReqD\n         final HttpResponse response = executeWithFallback(delegate(), derivedCtx,\n                                                           (context, cause) -> HttpResponse.ofFailure(cause));\n \n-        derivedCtx.log().whenAvailable(RequestLogProperty.RESPONSE_HEADERS).thenAccept(log -> {\n+        if (requiresResponseTrailers) {\n+            response.aggregate().handle((aggregated, cause) -> {\n+                handleResponse(ctx, rootReqDuplicator, originalReq, returnedRes, future, derivedCtx,\n+                               cause != null ? response : aggregated.toHttpResponse());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU4NTY5Nw=="}, "originalCommit": {"oid": "251033226809c71ce0cc56f192842415df45489c"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2368, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}