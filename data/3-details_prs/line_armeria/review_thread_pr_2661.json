{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMDYyNzQx", "number": 2661, "reviewThreads": {"totalCount": 57, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOToxNTo0M1rODxjiWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjozMzo1MlrOD77VwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjg5MDQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/HttpStatusBasedRetryStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOToxNTo0M1rOGFFkKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOToxNTo0M1rOGFFkKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4NzI0MQ==", "bodyText": "It's not part of the public API no you can just delete it when it becomes unused.", "url": "https://github.com/line/armeria/pull/2661#discussion_r407987241", "createdAt": "2020-04-14T09:15:43Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/HttpStatusBasedRetryStrategy.java", "diffHunk": "@@ -32,7 +32,10 @@\n /**\n  * Provides a {@link RetryStrategy} that decides to retry the request based on the {@link HttpStatus} of\n  * its response or the {@link Exception} raised while processing the {@link HttpResponse}.\n+ *\n+ * @deprecated Use {@link RetryStrategy#builder()}\n  */\n+@Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dd6aac0b7ba909a6af17e961d0cdcf6ebcac816"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjg5Mzk4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOToxNjozMlrOGFFmMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOToxNjozMlrOGFFmMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4Nzc2Mw==", "bodyText": "How about:\n\nretaining the old behavior\nand deprecating\n\n..?", "url": "https://github.com/line/armeria/pull/2661#discussion_r407987763", "createdAt": "2020-04-14T09:16:32Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategy.java", "diffHunk": "@@ -87,35 +98,33 @@ static RetryStrategy onException(Function<? super Throwable, ? extends Backoff>\n \n     /**\n      * Returns a {@link RetryStrategy} that retries with the {@link Backoff#ofDefault()}\n-     * when the response status is 5xx (server error) or an {@link Exception} is raised.\n+     * when the response status is 5xx (server error).\n      */\n     static RetryStrategy onServerErrorStatus() {\n         return onServerErrorStatus(Backoff.ofDefault());\n     }\n \n     /**\n      * Returns the {@link RetryStrategy} that retries the request with the specified {@code backoff}\n-     * when the response status is 5xx (server error) or an {@link Exception} is raised.\n+     * when the response status is 5xx (server error).\n      */\n     static RetryStrategy onServerErrorStatus(Backoff backoff) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dd6aac0b7ba909a6af17e961d0cdcf6ebcac816"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjkwMjk5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategyBindingBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOToxODo0MlrOGFFrvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOToxODo0MlrOGFFrvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4OTE4Mw==", "bodyText": "How about also adding a variant that accepts Predicate<? super HttpStatus>?", "url": "https://github.com/line/armeria/pull/2661#discussion_r407989183", "createdAt": "2020-04-14T09:18:42Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategyBindingBuilder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.linecorp.armeria.client.retry.RetryStrategyBuilder.NULL_BACKOFF;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+\n+/**\n+ * A builder class for binding a {@link RetryStrategy} fluently.\n+ */\n+public class RetryStrategyBindingBuilder {\n+\n+    private static final Set<HttpMethod> IDEMPOTENT_METHODS =\n+            ImmutableSet.of(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.PUT, HttpMethod.DELETE);\n+\n+    private final RetryStrategyBuilder retryStrategyBuilder;\n+    private final ImmutableSet.Builder<HttpStatusClass> statusClassesBuilder = ImmutableSet.builder();\n+    private final ImmutableSet.Builder<HttpStatus> statusesBuilder = ImmutableSet.builder();\n+\n+    private Set<HttpMethod> methods = HttpMethod.knownMethods();\n+    private boolean isMethodsSet;\n+\n+    @Nullable\n+    private Predicate<Throwable> exceptionFilter;\n+\n+    RetryStrategyBindingBuilder(RetryStrategyBuilder retryStrategyBuilder) {\n+        this.retryStrategyBuilder = retryStrategyBuilder;\n+    }\n+\n+    /**\n+     * Adds the idempotent HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is idempotent.\n+     */\n+    public RetryStrategyBindingBuilder idempotentMethods() {\n+        return methods(IDEMPOTENT_METHODS);\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryStrategyBindingBuilder methods(HttpMethod... methods) {\n+        return methods(ImmutableSet.copyOf(requireNonNull(methods, \"methods\")));\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryStrategyBindingBuilder methods(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        checkArgument(!Iterables.isEmpty(methods), \"methods can't be empty\");\n+\n+        if (isMethodsSet) {\n+            Iterables.addAll(this.methods, methods);\n+        } else {\n+            this.methods = Sets.newEnumSet(methods, HttpMethod.class);\n+            isMethodsSet = true;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryStrategy} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryStrategyBindingBuilder onStatusClass(HttpStatusClass... statusClasses) {\n+        return onStatusClass(ImmutableSet.copyOf(requireNonNull(statusClasses, \"statusClasses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryStrategy} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryStrategyBindingBuilder onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        requireNonNull(statusClasses, \"statusClasses\");\n+        checkArgument(!Iterables.isEmpty(statusClasses), \"statusClasses can't be empty\");\n+\n+        statusClassesBuilder.addAll(statusClasses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryStrategy} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryStrategyBindingBuilder onStatus(HttpStatus... statuses) {\n+        return onStatus(ImmutableSet.copyOf(requireNonNull(statuses, \"statuses\")));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dd6aac0b7ba909a6af17e961d0cdcf6ebcac816"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjkzNjYyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategyBindingBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOToyNjo1NVrOGFGAxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjoxOTo0MlrOGFrRow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5NDU2Nw==", "bodyText": "I think a user will want to specify different backoff for different situation, rather than using a single Backoff.\nHow about using a fluent API like this: (Just a draft)\nRetryStrategy.builder()\n             .on().idempotentMethod()\n                    .then(someBackoff)\n             .on()....then(otherBackoff)\n             .on()....thenStop()\n             .on()....thenImmediately()\n             .build();\nIf no conditions match, could skip retrying.", "url": "https://github.com/line/armeria/pull/2661#discussion_r407994567", "createdAt": "2020-04-14T09:26:55Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategyBindingBuilder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.linecorp.armeria.client.retry.RetryStrategyBuilder.NULL_BACKOFF;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+\n+/**\n+ * A builder class for binding a {@link RetryStrategy} fluently.\n+ */\n+public class RetryStrategyBindingBuilder {\n+\n+    private static final Set<HttpMethod> IDEMPOTENT_METHODS =\n+            ImmutableSet.of(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.PUT, HttpMethod.DELETE);\n+\n+    private final RetryStrategyBuilder retryStrategyBuilder;\n+    private final ImmutableSet.Builder<HttpStatusClass> statusClassesBuilder = ImmutableSet.builder();\n+    private final ImmutableSet.Builder<HttpStatus> statusesBuilder = ImmutableSet.builder();\n+\n+    private Set<HttpMethod> methods = HttpMethod.knownMethods();\n+    private boolean isMethodsSet;\n+\n+    @Nullable\n+    private Predicate<Throwable> exceptionFilter;\n+\n+    RetryStrategyBindingBuilder(RetryStrategyBuilder retryStrategyBuilder) {\n+        this.retryStrategyBuilder = retryStrategyBuilder;\n+    }\n+\n+    /**\n+     * Adds the idempotent HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is idempotent.\n+     */\n+    public RetryStrategyBindingBuilder idempotentMethods() {\n+        return methods(IDEMPOTENT_METHODS);\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryStrategyBindingBuilder methods(HttpMethod... methods) {\n+        return methods(ImmutableSet.copyOf(requireNonNull(methods, \"methods\")));\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryStrategyBindingBuilder methods(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        checkArgument(!Iterables.isEmpty(methods), \"methods can't be empty\");\n+\n+        if (isMethodsSet) {\n+            Iterables.addAll(this.methods, methods);\n+        } else {\n+            this.methods = Sets.newEnumSet(methods, HttpMethod.class);\n+            isMethodsSet = true;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryStrategy} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryStrategyBindingBuilder onStatusClass(HttpStatusClass... statusClasses) {\n+        return onStatusClass(ImmutableSet.copyOf(requireNonNull(statusClasses, \"statusClasses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryStrategy} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryStrategyBindingBuilder onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        requireNonNull(statusClasses, \"statusClasses\");\n+        checkArgument(!Iterables.isEmpty(statusClasses), \"statusClasses can't be empty\");\n+\n+        statusClassesBuilder.addAll(statusClasses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryStrategy} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryStrategyBindingBuilder onStatus(HttpStatus... statuses) {\n+        return onStatus(ImmutableSet.copyOf(requireNonNull(statuses, \"statuses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryStrategy} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryStrategyBindingBuilder onStatus(Iterable<HttpStatus> statuses) {\n+        requireNonNull(statuses, \"statuses\");\n+        checkArgument(!Iterables.isEmpty(statuses), \"statuses can't be empty\");\n+\n+        statusesBuilder.addAll(statuses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified exception type for a {@link RetryStrategy} which will retry\n+     * if an {@link Exception} is raised and that is instance of the specified {@code exception}.\n+     */\n+    public RetryStrategyBindingBuilder onException(Class<? extends Throwable> exception) {\n+        requireNonNull(exception, \"exception\");\n+        return onException(exception::isInstance);\n+    }\n+\n+    /**\n+     * Adds the specified {@code exceptionFilter} for a {@link RetryStrategy} which will retry\n+     * if an {@link Exception} is raised and the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    public RetryStrategyBindingBuilder onException(Predicate<? super Throwable> exceptionFilter) {\n+        requireNonNull(exceptionFilter, \"exceptionFilter\");\n+        if (this.exceptionFilter != null) {\n+            this.exceptionFilter = this.exceptionFilter.or(exceptionFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<Throwable> cast = (Predicate<Throwable>) exceptionFilter;\n+            this.exceptionFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified {@link Backoff} and returns the {@link RetryStrategyBuilder} that this\n+     * {@link RetryStrategyBindingBuilder} was created from.\n+     *\n+     * @throws IllegalStateException if none of {@link HttpStatus}, {@link HttpStatusClass} or\n+     *                               an expected {@code exception} type is specified\n+     */\n+    public RetryStrategyBuilder build(Backoff backoff) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dd6aac0b7ba909a6af17e961d0cdcf6ebcac816"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU2MTU4NA==", "bodyText": "I think a user will want to specify different backoff for different situation\n\nOh. That sounds good. Let me improve the API \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/2661#discussion_r408561584", "createdAt": "2020-04-15T03:37:13Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategyBindingBuilder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.linecorp.armeria.client.retry.RetryStrategyBuilder.NULL_BACKOFF;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+\n+/**\n+ * A builder class for binding a {@link RetryStrategy} fluently.\n+ */\n+public class RetryStrategyBindingBuilder {\n+\n+    private static final Set<HttpMethod> IDEMPOTENT_METHODS =\n+            ImmutableSet.of(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.PUT, HttpMethod.DELETE);\n+\n+    private final RetryStrategyBuilder retryStrategyBuilder;\n+    private final ImmutableSet.Builder<HttpStatusClass> statusClassesBuilder = ImmutableSet.builder();\n+    private final ImmutableSet.Builder<HttpStatus> statusesBuilder = ImmutableSet.builder();\n+\n+    private Set<HttpMethod> methods = HttpMethod.knownMethods();\n+    private boolean isMethodsSet;\n+\n+    @Nullable\n+    private Predicate<Throwable> exceptionFilter;\n+\n+    RetryStrategyBindingBuilder(RetryStrategyBuilder retryStrategyBuilder) {\n+        this.retryStrategyBuilder = retryStrategyBuilder;\n+    }\n+\n+    /**\n+     * Adds the idempotent HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is idempotent.\n+     */\n+    public RetryStrategyBindingBuilder idempotentMethods() {\n+        return methods(IDEMPOTENT_METHODS);\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryStrategyBindingBuilder methods(HttpMethod... methods) {\n+        return methods(ImmutableSet.copyOf(requireNonNull(methods, \"methods\")));\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryStrategyBindingBuilder methods(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        checkArgument(!Iterables.isEmpty(methods), \"methods can't be empty\");\n+\n+        if (isMethodsSet) {\n+            Iterables.addAll(this.methods, methods);\n+        } else {\n+            this.methods = Sets.newEnumSet(methods, HttpMethod.class);\n+            isMethodsSet = true;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryStrategy} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryStrategyBindingBuilder onStatusClass(HttpStatusClass... statusClasses) {\n+        return onStatusClass(ImmutableSet.copyOf(requireNonNull(statusClasses, \"statusClasses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryStrategy} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryStrategyBindingBuilder onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        requireNonNull(statusClasses, \"statusClasses\");\n+        checkArgument(!Iterables.isEmpty(statusClasses), \"statusClasses can't be empty\");\n+\n+        statusClassesBuilder.addAll(statusClasses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryStrategy} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryStrategyBindingBuilder onStatus(HttpStatus... statuses) {\n+        return onStatus(ImmutableSet.copyOf(requireNonNull(statuses, \"statuses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryStrategy} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryStrategyBindingBuilder onStatus(Iterable<HttpStatus> statuses) {\n+        requireNonNull(statuses, \"statuses\");\n+        checkArgument(!Iterables.isEmpty(statuses), \"statuses can't be empty\");\n+\n+        statusesBuilder.addAll(statuses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified exception type for a {@link RetryStrategy} which will retry\n+     * if an {@link Exception} is raised and that is instance of the specified {@code exception}.\n+     */\n+    public RetryStrategyBindingBuilder onException(Class<? extends Throwable> exception) {\n+        requireNonNull(exception, \"exception\");\n+        return onException(exception::isInstance);\n+    }\n+\n+    /**\n+     * Adds the specified {@code exceptionFilter} for a {@link RetryStrategy} which will retry\n+     * if an {@link Exception} is raised and the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    public RetryStrategyBindingBuilder onException(Predicate<? super Throwable> exceptionFilter) {\n+        requireNonNull(exceptionFilter, \"exceptionFilter\");\n+        if (this.exceptionFilter != null) {\n+            this.exceptionFilter = this.exceptionFilter.or(exceptionFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<Throwable> cast = (Predicate<Throwable>) exceptionFilter;\n+            this.exceptionFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified {@link Backoff} and returns the {@link RetryStrategyBuilder} that this\n+     * {@link RetryStrategyBindingBuilder} was created from.\n+     *\n+     * @throws IllegalStateException if none of {@link HttpStatus}, {@link HttpStatusClass} or\n+     *                               an expected {@code exception} type is specified\n+     */\n+    public RetryStrategyBuilder build(Backoff backoff) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5NDU2Nw=="}, "originalCommit": {"oid": "2dd6aac0b7ba909a6af17e961d0cdcf6ebcac816"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwNTA5MQ==", "bodyText": "Or could accept a customizer?\nRetryStrategy.builder()\n             .on(retryOnError ->\n                 retryOnError.idempotentMethods()\n                             .exception(ResponseTimeoutException.class)\n                             .then(Backoff))\n             .on(noRetry -> \n                 noRetry.status(HttpStatus.BAD_REQUEST)\n                        .thenStop())\n             .on(retryOnStatus ->\n                 retryOnStatus.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                              .exception(ex -> ex instanceof ClosedSessionException)\n                              .method(HttpMethod.GET)\n                              .thenNoDelay())\n             .build()", "url": "https://github.com/line/armeria/pull/2661#discussion_r408605091", "createdAt": "2020-04-15T06:19:42Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategyBindingBuilder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.linecorp.armeria.client.retry.RetryStrategyBuilder.NULL_BACKOFF;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+\n+/**\n+ * A builder class for binding a {@link RetryStrategy} fluently.\n+ */\n+public class RetryStrategyBindingBuilder {\n+\n+    private static final Set<HttpMethod> IDEMPOTENT_METHODS =\n+            ImmutableSet.of(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.PUT, HttpMethod.DELETE);\n+\n+    private final RetryStrategyBuilder retryStrategyBuilder;\n+    private final ImmutableSet.Builder<HttpStatusClass> statusClassesBuilder = ImmutableSet.builder();\n+    private final ImmutableSet.Builder<HttpStatus> statusesBuilder = ImmutableSet.builder();\n+\n+    private Set<HttpMethod> methods = HttpMethod.knownMethods();\n+    private boolean isMethodsSet;\n+\n+    @Nullable\n+    private Predicate<Throwable> exceptionFilter;\n+\n+    RetryStrategyBindingBuilder(RetryStrategyBuilder retryStrategyBuilder) {\n+        this.retryStrategyBuilder = retryStrategyBuilder;\n+    }\n+\n+    /**\n+     * Adds the idempotent HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is idempotent.\n+     */\n+    public RetryStrategyBindingBuilder idempotentMethods() {\n+        return methods(IDEMPOTENT_METHODS);\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryStrategyBindingBuilder methods(HttpMethod... methods) {\n+        return methods(ImmutableSet.copyOf(requireNonNull(methods, \"methods\")));\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryStrategyBindingBuilder methods(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        checkArgument(!Iterables.isEmpty(methods), \"methods can't be empty\");\n+\n+        if (isMethodsSet) {\n+            Iterables.addAll(this.methods, methods);\n+        } else {\n+            this.methods = Sets.newEnumSet(methods, HttpMethod.class);\n+            isMethodsSet = true;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryStrategy} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryStrategyBindingBuilder onStatusClass(HttpStatusClass... statusClasses) {\n+        return onStatusClass(ImmutableSet.copyOf(requireNonNull(statusClasses, \"statusClasses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryStrategy} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryStrategyBindingBuilder onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        requireNonNull(statusClasses, \"statusClasses\");\n+        checkArgument(!Iterables.isEmpty(statusClasses), \"statusClasses can't be empty\");\n+\n+        statusClassesBuilder.addAll(statusClasses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryStrategy} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryStrategyBindingBuilder onStatus(HttpStatus... statuses) {\n+        return onStatus(ImmutableSet.copyOf(requireNonNull(statuses, \"statuses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryStrategy} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryStrategyBindingBuilder onStatus(Iterable<HttpStatus> statuses) {\n+        requireNonNull(statuses, \"statuses\");\n+        checkArgument(!Iterables.isEmpty(statuses), \"statuses can't be empty\");\n+\n+        statusesBuilder.addAll(statuses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified exception type for a {@link RetryStrategy} which will retry\n+     * if an {@link Exception} is raised and that is instance of the specified {@code exception}.\n+     */\n+    public RetryStrategyBindingBuilder onException(Class<? extends Throwable> exception) {\n+        requireNonNull(exception, \"exception\");\n+        return onException(exception::isInstance);\n+    }\n+\n+    /**\n+     * Adds the specified {@code exceptionFilter} for a {@link RetryStrategy} which will retry\n+     * if an {@link Exception} is raised and the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    public RetryStrategyBindingBuilder onException(Predicate<? super Throwable> exceptionFilter) {\n+        requireNonNull(exceptionFilter, \"exceptionFilter\");\n+        if (this.exceptionFilter != null) {\n+            this.exceptionFilter = this.exceptionFilter.or(exceptionFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<Throwable> cast = (Predicate<Throwable>) exceptionFilter;\n+            this.exceptionFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified {@link Backoff} and returns the {@link RetryStrategyBuilder} that this\n+     * {@link RetryStrategyBindingBuilder} was created from.\n+     *\n+     * @throws IllegalStateException if none of {@link HttpStatus}, {@link HttpStatusClass} or\n+     *                               an expected {@code exception} type is specified\n+     */\n+    public RetryStrategyBuilder build(Backoff backoff) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5NDU2Nw=="}, "originalCommit": {"oid": "2dd6aac0b7ba909a6af17e961d0cdcf6ebcac816"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTAwNTAyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzozMDowNVrOGLExHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzo0NDowN1rOGLFCRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2NTYyOQ==", "bodyText": "unProcessed -> unprocessed everywhere", "url": "https://github.com/line/armeria/pull/2661#discussion_r414265629", "createdAt": "2020-04-24T03:30:05Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.Set;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+\n+/**\n+ * A rule for {@link RetryStrategy}.\n+ */\n+public final class RetryRule {\n+\n+    /**\n+     * Adds the idempotent HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is idempotent.\n+     */\n+    public static RetryRuleBuilder onIdempotentMethods() {\n+        return newRuleBuilder().onIdempotentMethods();\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public static RetryRuleBuilder onMethods(HttpMethod... methods) {\n+        return newRuleBuilder().onMethods(methods);\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public static RetryRuleBuilder onMethods(Iterable<HttpMethod> methods) {\n+        return newRuleBuilder().onMethods(methods);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryStrategy} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public static RetryRuleBuilder onStatusClass(HttpStatusClass... statusClasses) {\n+        return newRuleBuilder().onStatusClass(statusClasses);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryStrategy} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public static RetryRuleBuilder onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        return newRuleBuilder().onStatusClass(statusClasses);\n+    }\n+\n+    /**\n+     * Adds the {@link HttpStatusClass#SERVER_ERROR} for a {@link RetryStrategy} which will retry\n+     * if the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    public static RetryRuleBuilder onServerErrorStatus() {\n+        return newRuleBuilder().onServerErrorStatus();\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryStrategy} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public static RetryRuleBuilder onStatus(HttpStatus... statuses) {\n+        return newRuleBuilder().onStatus(statuses);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryStrategy} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public static RetryRuleBuilder onStatus(Iterable<HttpStatus> statuses) {\n+        return newRuleBuilder().onStatus(statuses);\n+    }\n+\n+    /**\n+     * Adds the specified {@code statusFilter} for a {@link RetryStrategy} which will retry\n+     * if the response status matches the specified {@code statusFilter}.\n+     */\n+    public static RetryRuleBuilder onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        return newRuleBuilder().onStatus(statusFilter);\n+    }\n+\n+    /**\n+     * Adds the specified exception type for a {@link RetryStrategy} which will retry\n+     * if an {@link Exception} is raised and that is instance of the specified {@code exception}.\n+     */\n+    public static RetryRuleBuilder onException(Class<? extends Throwable> exception) {\n+        return newRuleBuilder().onException(exception);\n+    }\n+\n+    /**\n+     * Adds the specified {@code exceptionFilter} for a {@link RetryStrategy} which will retry\n+     * if an {@link Exception} is raised and the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    public static RetryRuleBuilder onException(Predicate<? super Throwable> exceptionFilter) {\n+        return newRuleBuilder().onException(exceptionFilter);\n+    }\n+\n+    /**\n+     * Makes a {@link RetryStrategy} retry on any {@link Exception}.\n+     */\n+    public static RetryRuleBuilder onException() {\n+        return newRuleBuilder().onException();\n+    }\n+\n+    /**\n+     * Makes a {@link RetryStrategy} retry on an {@link UnprocessedRequestException}.\n+     */\n+    public static RetryRuleBuilder onUnProcessed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5046cbcea379b8ab5c2950e695ff1243aff05f"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI3MDAyMw==", "bodyText": "Oops... \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2661#discussion_r414270023", "createdAt": "2020-04-24T03:44:07Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.Set;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+\n+/**\n+ * A rule for {@link RetryStrategy}.\n+ */\n+public final class RetryRule {\n+\n+    /**\n+     * Adds the idempotent HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is idempotent.\n+     */\n+    public static RetryRuleBuilder onIdempotentMethods() {\n+        return newRuleBuilder().onIdempotentMethods();\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public static RetryRuleBuilder onMethods(HttpMethod... methods) {\n+        return newRuleBuilder().onMethods(methods);\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public static RetryRuleBuilder onMethods(Iterable<HttpMethod> methods) {\n+        return newRuleBuilder().onMethods(methods);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryStrategy} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public static RetryRuleBuilder onStatusClass(HttpStatusClass... statusClasses) {\n+        return newRuleBuilder().onStatusClass(statusClasses);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryStrategy} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public static RetryRuleBuilder onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        return newRuleBuilder().onStatusClass(statusClasses);\n+    }\n+\n+    /**\n+     * Adds the {@link HttpStatusClass#SERVER_ERROR} for a {@link RetryStrategy} which will retry\n+     * if the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    public static RetryRuleBuilder onServerErrorStatus() {\n+        return newRuleBuilder().onServerErrorStatus();\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryStrategy} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public static RetryRuleBuilder onStatus(HttpStatus... statuses) {\n+        return newRuleBuilder().onStatus(statuses);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryStrategy} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public static RetryRuleBuilder onStatus(Iterable<HttpStatus> statuses) {\n+        return newRuleBuilder().onStatus(statuses);\n+    }\n+\n+    /**\n+     * Adds the specified {@code statusFilter} for a {@link RetryStrategy} which will retry\n+     * if the response status matches the specified {@code statusFilter}.\n+     */\n+    public static RetryRuleBuilder onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        return newRuleBuilder().onStatus(statusFilter);\n+    }\n+\n+    /**\n+     * Adds the specified exception type for a {@link RetryStrategy} which will retry\n+     * if an {@link Exception} is raised and that is instance of the specified {@code exception}.\n+     */\n+    public static RetryRuleBuilder onException(Class<? extends Throwable> exception) {\n+        return newRuleBuilder().onException(exception);\n+    }\n+\n+    /**\n+     * Adds the specified {@code exceptionFilter} for a {@link RetryStrategy} which will retry\n+     * if an {@link Exception} is raised and the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    public static RetryRuleBuilder onException(Predicate<? super Throwable> exceptionFilter) {\n+        return newRuleBuilder().onException(exceptionFilter);\n+    }\n+\n+    /**\n+     * Makes a {@link RetryStrategy} retry on any {@link Exception}.\n+     */\n+    public static RetryRuleBuilder onException() {\n+        return newRuleBuilder().onException();\n+    }\n+\n+    /**\n+     * Makes a {@link RetryStrategy} retry on an {@link UnprocessedRequestException}.\n+     */\n+    public static RetryRuleBuilder onUnProcessed() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2NTYyOQ=="}, "originalCommit": {"oid": "ed5046cbcea379b8ab5c2950e695ff1243aff05f"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTAwNjE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzozMDo0M1rOGLEx1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzo0MzozNVrOGLFBpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2NTgxNQ==", "bodyText": "Could you add a test case that ensures the static methods in this class and member methods in RetryRuleBuilder are same, using reflection?", "url": "https://github.com/line/armeria/pull/2661#discussion_r414265815", "createdAt": "2020-04-24T03:30:43Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.Set;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+\n+/**\n+ * A rule for {@link RetryStrategy}.\n+ */\n+public final class RetryRule {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5046cbcea379b8ab5c2950e695ff1243aff05f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2OTg2MA==", "bodyText": "Oh, nice idea. \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/2661#discussion_r414269860", "createdAt": "2020-04-24T03:43:35Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.Set;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+\n+/**\n+ * A rule for {@link RetryStrategy}.\n+ */\n+public final class RetryRule {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2NTgxNQ=="}, "originalCommit": {"oid": "ed5046cbcea379b8ab5c2950e695ff1243aff05f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTAwOTIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzozMTo0NFrOGLEzWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzozMTo0NFrOGLEzWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2NjIwMA==", "bodyText": "How about just thenBackoff()?", "url": "https://github.com/line/armeria/pull/2661#discussion_r414266200", "createdAt": "2020-04-24T03:31:44Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleBuilder.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+\n+/**\n+ * A builder which creates a {@link RetryRule} used for building {@link RetryStrategy}.\n+ *\n+ * @see RetryStrategyBuilder#on(RetryRule)\n+ */\n+public final class RetryRuleBuilder extends AbstractRetryStrategyBindingBuilder {\n+\n+    private static final Backoff NO_RETRY = numAttemptsSoFar -> -1;\n+\n+    private static final Set<HttpMethod> IDEMPOTENT_METHODS =\n+            ImmutableSet.of(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.PUT, HttpMethod.DELETE);\n+\n+    private final ImmutableSet.Builder<HttpStatusClass> statusClassesBuilder = ImmutableSet.builder();\n+    private final ImmutableSet.Builder<HttpStatus> statusesBuilder = ImmutableSet.builder();\n+\n+    private Set<HttpMethod> methods = HttpMethod.knownMethods();\n+    private boolean isMethodsSet;\n+\n+    @Nullable\n+    private Predicate<HttpStatus> statusFilter;\n+    @Nullable\n+    private Predicate<Throwable> exceptionFilter;\n+\n+    @Override\n+    public RetryRuleBuilder onIdempotentMethods() {\n+        return onMethods(IDEMPOTENT_METHODS);\n+    }\n+\n+    @Override\n+    public RetryRuleBuilder onMethods(HttpMethod... methods) {\n+        return onMethods(ImmutableSet.copyOf(requireNonNull(methods, \"methods\")));\n+    }\n+\n+    @Override\n+    public RetryRuleBuilder onMethods(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        checkArgument(!Iterables.isEmpty(methods), \"methods can't be empty\");\n+\n+        if (isMethodsSet) {\n+            Iterables.addAll(this.methods, methods);\n+        } else {\n+            this.methods = Sets.newEnumSet(methods, HttpMethod.class);\n+            isMethodsSet = true;\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public RetryRuleBuilder onStatusClass(HttpStatusClass... statusClasses) {\n+        return onStatusClass(ImmutableSet.copyOf(requireNonNull(statusClasses, \"statusClasses\")));\n+    }\n+\n+    @Override\n+    public RetryRuleBuilder onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        requireNonNull(statusClasses, \"statusClasses\");\n+        checkArgument(!Iterables.isEmpty(statusClasses), \"statusClasses can't be empty\");\n+\n+        statusClassesBuilder.addAll(statusClasses);\n+        return this;\n+    }\n+\n+    @Override\n+    public RetryRuleBuilder onServerErrorStatus() {\n+        return onStatusClass(HttpStatusClass.SERVER_ERROR);\n+    }\n+\n+    @Override\n+    public RetryRuleBuilder onStatus(HttpStatus... statuses) {\n+        return onStatus(ImmutableSet.copyOf(requireNonNull(statuses, \"statuses\")));\n+    }\n+\n+    @Override\n+    public RetryRuleBuilder onStatus(Iterable<HttpStatus> statuses) {\n+        requireNonNull(statuses, \"statuses\");\n+        checkArgument(!Iterables.isEmpty(statuses), \"statuses can't be empty\");\n+\n+        statusesBuilder.addAll(statuses);\n+        return this;\n+    }\n+\n+    @Override\n+    public RetryRuleBuilder onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        requireNonNull(statusFilter, \"statuses\");\n+        if (this.statusFilter != null) {\n+            this.statusFilter = this.statusFilter.or(statusFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<HttpStatus> cast = (Predicate<HttpStatus>) statusFilter;\n+            this.statusFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public RetryRuleBuilder onException(Class<? extends Throwable> exception) {\n+        requireNonNull(exception, \"exception\");\n+        return onException(exception::isInstance);\n+    }\n+\n+    @Override\n+    public RetryRuleBuilder onException(Predicate<? super Throwable> exceptionFilter) {\n+        requireNonNull(exceptionFilter, \"exceptionFilter\");\n+        if (this.exceptionFilter != null) {\n+            this.exceptionFilter = this.exceptionFilter.or(exceptionFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<Throwable> cast = (Predicate<Throwable>) exceptionFilter;\n+            this.exceptionFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public RetryRuleBuilder onException() {\n+        return onException(unused -> true);\n+    }\n+\n+    @Override\n+    public RetryRuleBuilder onUnProcessed() {\n+        return onException(UnprocessedRequestException.class);\n+    }\n+\n+    /**\n+     * Sets the {@linkplain Backoff#ofDefault() default backoff} and returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenDefaultBackoff() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5046cbcea379b8ab5c2950e695ff1243aff05f"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTAxMDg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzozMjozN1rOGLE0RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzozMjozN1rOGLE0RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2NjQzNg==", "bodyText": "toString()?", "url": "https://github.com/line/armeria/pull/2661#discussion_r414266436", "createdAt": "2020-04-24T03:32:37Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleBuilder.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+\n+/**\n+ * A builder which creates a {@link RetryRule} used for building {@link RetryStrategy}.\n+ *\n+ * @see RetryStrategyBuilder#on(RetryRule)\n+ */\n+public final class RetryRuleBuilder extends AbstractRetryStrategyBindingBuilder {\n+\n+    private static final Backoff NO_RETRY = numAttemptsSoFar -> -1;\n+\n+    private static final Set<HttpMethod> IDEMPOTENT_METHODS =\n+            ImmutableSet.of(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.PUT, HttpMethod.DELETE);\n+\n+    private final ImmutableSet.Builder<HttpStatusClass> statusClassesBuilder = ImmutableSet.builder();\n+    private final ImmutableSet.Builder<HttpStatus> statusesBuilder = ImmutableSet.builder();\n+\n+    private Set<HttpMethod> methods = HttpMethod.knownMethods();\n+    private boolean isMethodsSet;\n+\n+    @Nullable\n+    private Predicate<HttpStatus> statusFilter;\n+    @Nullable\n+    private Predicate<Throwable> exceptionFilter;\n+\n+    @Override\n+    public RetryRuleBuilder onIdempotentMethods() {\n+        return onMethods(IDEMPOTENT_METHODS);\n+    }\n+\n+    @Override\n+    public RetryRuleBuilder onMethods(HttpMethod... methods) {\n+        return onMethods(ImmutableSet.copyOf(requireNonNull(methods, \"methods\")));\n+    }\n+\n+    @Override\n+    public RetryRuleBuilder onMethods(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        checkArgument(!Iterables.isEmpty(methods), \"methods can't be empty\");\n+\n+        if (isMethodsSet) {\n+            Iterables.addAll(this.methods, methods);\n+        } else {\n+            this.methods = Sets.newEnumSet(methods, HttpMethod.class);\n+            isMethodsSet = true;\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public RetryRuleBuilder onStatusClass(HttpStatusClass... statusClasses) {\n+        return onStatusClass(ImmutableSet.copyOf(requireNonNull(statusClasses, \"statusClasses\")));\n+    }\n+\n+    @Override\n+    public RetryRuleBuilder onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        requireNonNull(statusClasses, \"statusClasses\");\n+        checkArgument(!Iterables.isEmpty(statusClasses), \"statusClasses can't be empty\");\n+\n+        statusClassesBuilder.addAll(statusClasses);\n+        return this;\n+    }\n+\n+    @Override\n+    public RetryRuleBuilder onServerErrorStatus() {\n+        return onStatusClass(HttpStatusClass.SERVER_ERROR);\n+    }\n+\n+    @Override\n+    public RetryRuleBuilder onStatus(HttpStatus... statuses) {\n+        return onStatus(ImmutableSet.copyOf(requireNonNull(statuses, \"statuses\")));\n+    }\n+\n+    @Override\n+    public RetryRuleBuilder onStatus(Iterable<HttpStatus> statuses) {\n+        requireNonNull(statuses, \"statuses\");\n+        checkArgument(!Iterables.isEmpty(statuses), \"statuses can't be empty\");\n+\n+        statusesBuilder.addAll(statuses);\n+        return this;\n+    }\n+\n+    @Override\n+    public RetryRuleBuilder onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        requireNonNull(statusFilter, \"statuses\");\n+        if (this.statusFilter != null) {\n+            this.statusFilter = this.statusFilter.or(statusFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<HttpStatus> cast = (Predicate<HttpStatus>) statusFilter;\n+            this.statusFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public RetryRuleBuilder onException(Class<? extends Throwable> exception) {\n+        requireNonNull(exception, \"exception\");\n+        return onException(exception::isInstance);\n+    }\n+\n+    @Override\n+    public RetryRuleBuilder onException(Predicate<? super Throwable> exceptionFilter) {\n+        requireNonNull(exceptionFilter, \"exceptionFilter\");\n+        if (this.exceptionFilter != null) {\n+            this.exceptionFilter = this.exceptionFilter.or(exceptionFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<Throwable> cast = (Predicate<Throwable>) exceptionFilter;\n+            this.exceptionFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public RetryRuleBuilder onException() {\n+        return onException(unused -> true);\n+    }\n+\n+    @Override\n+    public RetryRuleBuilder onUnProcessed() {\n+        return onException(UnprocessedRequestException.class);\n+    }\n+\n+    /**\n+     * Sets the {@linkplain Backoff#ofDefault() default backoff} and returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenDefaultBackoff() {\n+        return thenBackoff(Backoff.ofDefault());\n+    }\n+\n+    /**\n+     * Sets the specified {@link Backoff} and returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenBackoff(Backoff backoff) {\n+        requireNonNull(backoff, \"backoff\");\n+        return build(backoff);\n+    }\n+\n+    /**\n+     * Sets a {@link Backoff} which limits the number of attempts up to the specified value and\n+     * never waits between attempts. Returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenImmediately(int maxAttempts) {\n+        checkArgument(maxAttempts > 0, \"maxAttempts: %s (expected: > 0)\", maxAttempts);\n+        final Backoff backOff = Backoff.withoutDelay().withMaxAttempts(maxAttempts);\n+        return build(backOff);\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that never retries.\n+     */\n+    public RetryRule thenStop() {\n+        return build(NO_RETRY);\n+    }\n+\n+    private RetryRule build(Backoff backoff) {\n+        final Set<HttpMethod> methods = Sets.immutableEnumSet(this.methods);\n+        final Set<HttpStatusClass> statusClasses = Sets.immutableEnumSet(statusClassesBuilder.build());\n+        final Set<HttpStatus> statuses = statusesBuilder.build();\n+        final Predicate<HttpStatus> statusFilter = this.statusFilter;\n+        final Predicate<Throwable> exceptionFilter = this.exceptionFilter;\n+\n+        if (backoff != NO_RETRY && exceptionFilter == null && statusFilter == null &&\n+            statuses.isEmpty() && statusClasses.isEmpty()) {\n+            throw new IllegalStateException(\n+                    \"Should set at least one of status, status class and an expected exception type \" +\n+                    \"if a backoff was set.\");\n+        }\n+\n+        return new RetryRule(methods, statusClasses, statuses, backoff, statusFilter, exceptionFilter);\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5046cbcea379b8ab5c2950e695ff1243aff05f"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTAxNzUyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategyBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzozNTozN1rOGLE32A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzo1OTo0NVrOGLLeBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2NzM1Mg==", "bodyText": "For simplicity, how about:\n\nRemoving the on*() methods in this class\n\nWe will be able to merge AbstractRetryStretegyBindingBuilder into RetryRuleBuilder.\n\n\nRenaming this method to something like rule()\n\n..?", "url": "https://github.com/line/armeria/pull/2661#discussion_r414267352", "createdAt": "2020-04-24T03:35:37Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategyBuilder.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * A builder which creates a {@link RetryStrategy}.\n+ */\n+public final class RetryStrategyBuilder extends AbstractRetryStrategyBindingBuilder {\n+\n+    private static final CompletableFuture<Backoff> NULL_BACKOFF = CompletableFuture.completedFuture(null);\n+    private static final RetryStrategy[] EMPTY_RETRY_STRATEGIES = new RetryStrategy[0];\n+\n+    private final ImmutableList.Builder<RetryStrategy> retryStrategiesBuilder = ImmutableList.builder();\n+\n+    RetryStrategyBuilder() {}\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onIdempotentMethods() {\n+        return newBindingBuilder().onIdempotentMethods();\n+    }\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onMethods(HttpMethod... methods) {\n+        return newBindingBuilder().onMethods(methods);\n+    }\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onMethods(Iterable<HttpMethod> methods) {\n+        return newBindingBuilder().onMethods(methods);\n+    }\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onStatusClass(HttpStatusClass... statusClasses) {\n+        return newBindingBuilder().onStatusClass(statusClasses);\n+    }\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        return newBindingBuilder().onStatusClass(statusClasses);\n+    }\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onServerErrorStatus() {\n+        return newBindingBuilder().onServerErrorStatus();\n+    }\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onStatus(HttpStatus... statuses) {\n+        return newBindingBuilder().onStatus(statuses);\n+    }\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onStatus(Iterable<HttpStatus> statuses) {\n+        return newBindingBuilder().onStatus(statuses);\n+    }\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        return newBindingBuilder().onStatus(statusFilter);\n+    }\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onException(Class<? extends Throwable> exception) {\n+        return newBindingBuilder().onException(exception);\n+    }\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onException(Predicate<? super Throwable> exceptionFilter) {\n+        return newBindingBuilder().onException(exceptionFilter);\n+    }\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onException() {\n+        return newBindingBuilder().onException();\n+    }\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onUnProcessed() {\n+        return newBindingBuilder().onUnProcessed();\n+    }\n+\n+    /**\n+     * Adds a {@link RetryStrategy}.\n+     */\n+    public RetryStrategyBuilder add(RetryStrategy retryStrategy) {\n+        retryStrategiesBuilder.add(requireNonNull(retryStrategy, \"retryStrategy\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Adds a {@link RetryRule}.\n+     *\n+     * <p><pre>{@code\n+     * RetryStrategy.builder()\n+     *              .on(RetryRule.onStatus(HttpStatus.SERVICE_UNAVAILABLE)\n+     *                           .onException(ex -> ex instanceof ClosedSessionException)\n+     *                           .onMethod(HttpMethod.GET)\n+     *                           .thenBackOff(myBackoff))\n+     *              .build();\n+     * }</pre>\n+     */\n+    RetryStrategyBuilder on(RetryRule retryRule) {\n+        return add(build(requireNonNull(retryRule, \"retryRule\")));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5046cbcea379b8ab5c2950e695ff1243aff05f"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM3NTQyOA==", "bodyText": "That's good. I removed and simplified a lot.", "url": "https://github.com/line/armeria/pull/2661#discussion_r414375428", "createdAt": "2020-04-24T07:59:45Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategyBuilder.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * A builder which creates a {@link RetryStrategy}.\n+ */\n+public final class RetryStrategyBuilder extends AbstractRetryStrategyBindingBuilder {\n+\n+    private static final CompletableFuture<Backoff> NULL_BACKOFF = CompletableFuture.completedFuture(null);\n+    private static final RetryStrategy[] EMPTY_RETRY_STRATEGIES = new RetryStrategy[0];\n+\n+    private final ImmutableList.Builder<RetryStrategy> retryStrategiesBuilder = ImmutableList.builder();\n+\n+    RetryStrategyBuilder() {}\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onIdempotentMethods() {\n+        return newBindingBuilder().onIdempotentMethods();\n+    }\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onMethods(HttpMethod... methods) {\n+        return newBindingBuilder().onMethods(methods);\n+    }\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onMethods(Iterable<HttpMethod> methods) {\n+        return newBindingBuilder().onMethods(methods);\n+    }\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onStatusClass(HttpStatusClass... statusClasses) {\n+        return newBindingBuilder().onStatusClass(statusClasses);\n+    }\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        return newBindingBuilder().onStatusClass(statusClasses);\n+    }\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onServerErrorStatus() {\n+        return newBindingBuilder().onServerErrorStatus();\n+    }\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onStatus(HttpStatus... statuses) {\n+        return newBindingBuilder().onStatus(statuses);\n+    }\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onStatus(Iterable<HttpStatus> statuses) {\n+        return newBindingBuilder().onStatus(statuses);\n+    }\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        return newBindingBuilder().onStatus(statusFilter);\n+    }\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onException(Class<? extends Throwable> exception) {\n+        return newBindingBuilder().onException(exception);\n+    }\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onException(Predicate<? super Throwable> exceptionFilter) {\n+        return newBindingBuilder().onException(exceptionFilter);\n+    }\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onException() {\n+        return newBindingBuilder().onException();\n+    }\n+\n+    @Override\n+    public RetryStrategyBindingBuilder onUnProcessed() {\n+        return newBindingBuilder().onUnProcessed();\n+    }\n+\n+    /**\n+     * Adds a {@link RetryStrategy}.\n+     */\n+    public RetryStrategyBuilder add(RetryStrategy retryStrategy) {\n+        retryStrategiesBuilder.add(requireNonNull(retryStrategy, \"retryStrategy\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Adds a {@link RetryRule}.\n+     *\n+     * <p><pre>{@code\n+     * RetryStrategy.builder()\n+     *              .on(RetryRule.onStatus(HttpStatus.SERVICE_UNAVAILABLE)\n+     *                           .onException(ex -> ex instanceof ClosedSessionException)\n+     *                           .onMethod(HttpMethod.GET)\n+     *                           .thenBackOff(myBackoff))\n+     *              .build();\n+     * }</pre>\n+     */\n+    RetryStrategyBuilder on(RetryRule retryRule) {\n+        return add(build(requireNonNull(retryRule, \"retryRule\")));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2NzM1Mg=="}, "originalCommit": {"oid": "ed5046cbcea379b8ab5c2950e695ff1243aff05f"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTk0NTQ0OnYy", "diffSide": "RIGHT", "path": "site/src/sphinx/client-retry.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODozODoxMlrOGLM6bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMjo1NjozNVrOGNAR9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM5OTA4NQ==", "bodyText": "Two code blocks \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2661#discussion_r414399085", "createdAt": "2020-04-24T08:38:12Z", "author": {"login": "minwoox"}, "path": "site/src/sphinx/client-retry.rst", "diffHunk": "@@ -46,15 +46,30 @@ an exception is raised.\n ``RetryStrategy``\n -----------------\n \n-You can customize the ``strategy`` by implementing :api:`RetryStrategy`.\n+You can fluently build your own :api:`RetryStrategy`.\n+\n+.. code-block:: java\n \n .. code-block:: java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f01618fc01d318fdba40e155deade9e32f3f32ec"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI4OTI2OA==", "bodyText": "Oops \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2661#discussion_r416289268", "createdAt": "2020-04-28T02:56:35Z", "author": {"login": "ikhoon"}, "path": "site/src/sphinx/client-retry.rst", "diffHunk": "@@ -46,15 +46,30 @@ an exception is raised.\n ``RetryStrategy``\n -----------------\n \n-You can customize the ``strategy`` by implementing :api:`RetryStrategy`.\n+You can fluently build your own :api:`RetryStrategy`.\n+\n+.. code-block:: java\n \n .. code-block:: java", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM5OTA4NQ=="}, "originalCommit": {"oid": "f01618fc01d318fdba40e155deade9e32f3f32ec"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTk2MzU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODo0MjoxOVrOGLNFPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODo0MjoxOVrOGLNFPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQwMTg1NA==", "bodyText": "How about changing ClosedSessionException to UnprocessedRequestException because a user could use this example imprudently, and come across the idempotent issue?", "url": "https://github.com/line/armeria/pull/2661#discussion_r414401854", "createdAt": "2020-04-24T08:42:19Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategy.java", "diffHunk": "@@ -59,22 +67,33 @@ static RetryStrategy onUnprocessed() {\n      */\n     static RetryStrategy onUnprocessed(Backoff backoff) {\n         requireNonNull(backoff, \"backoff\");\n-        return onException(cause -> cause instanceof UnprocessedRequestException ? backoff : null);\n+        return builder().rule(RetryRule.onUnprocessed().thenBackoff(backoff)).build();\n     }\n \n     /**\n      * Returns a {@link RetryStrategy} that retries with {@link Backoff#ofDefault()} on any {@link Exception}.\n      */\n     static RetryStrategy onException() {\n-        return onException(cause -> Backoff.ofDefault());\n+        return builder().rule(RetryRule.onException().thenBackoff()).build();\n     }\n \n     /**\n      * Returns a {@link RetryStrategy} that decides to retry using the specified {@code backoffFunction}.\n      *\n      * @param backoffFunction A {@link Function} that returns the {@link Backoff} or {@code null} (no retry)\n      *                        according to the given {@link Throwable}\n+     *\n+     * @deprecated Use {@link #builder()} with {@link RetryStrategyBuilder#rule(RetryRule)}\n+     *             and {@link RetryRuleBuilder#onException(Predicate)}}.\n+     *             For example:\n+     *             <pre>{@code\n+     *             RetryStrategy.builder()\n+     *                          .rule(RetryRule.onException(ex -> ex instanceof ClosedSessionException)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f01618fc01d318fdba40e155deade9e32f3f32ec"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTk3MDI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODo0Mzo0OVrOGLNJLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMjozNjozMFrOGM_5pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQwMjg2MQ==", "bodyText": "It's not related to this PR but how about adding a warning to the Javadoc about idempotent with the link?", "url": "https://github.com/line/armeria/pull/2661#discussion_r414402861", "createdAt": "2020-04-24T08:43:49Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategy.java", "diffHunk": "@@ -59,22 +67,33 @@ static RetryStrategy onUnprocessed() {\n      */\n     static RetryStrategy onUnprocessed(Backoff backoff) {\n         requireNonNull(backoff, \"backoff\");\n-        return onException(cause -> cause instanceof UnprocessedRequestException ? backoff : null);\n+        return builder().rule(RetryRule.onUnprocessed().thenBackoff(backoff)).build();\n     }\n \n     /**\n      * Returns a {@link RetryStrategy} that retries with {@link Backoff#ofDefault()} on any {@link Exception}.\n      */\n     static RetryStrategy onException() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f01618fc01d318fdba40e155deade9e32f3f32ec"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI4MzA0NQ==", "bodyText": "Now, this interface is deprecated. Let me add the idempotent link to RetryRule.\ud83d\ude00", "url": "https://github.com/line/armeria/pull/2661#discussion_r416283045", "createdAt": "2020-04-28T02:36:30Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategy.java", "diffHunk": "@@ -59,22 +67,33 @@ static RetryStrategy onUnprocessed() {\n      */\n     static RetryStrategy onUnprocessed(Backoff backoff) {\n         requireNonNull(backoff, \"backoff\");\n-        return onException(cause -> cause instanceof UnprocessedRequestException ? backoff : null);\n+        return builder().rule(RetryRule.onUnprocessed().thenBackoff(backoff)).build();\n     }\n \n     /**\n      * Returns a {@link RetryStrategy} that retries with {@link Backoff#ofDefault()} on any {@link Exception}.\n      */\n     static RetryStrategy onException() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQwMjg2MQ=="}, "originalCommit": {"oid": "f01618fc01d318fdba40e155deade9e32f3f32ec"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NjA2NTE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategyBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOTowNToxM1rOGLN_ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMDowODowMVrOGLQc5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQxNjc5OA==", "bodyText": "I think this will not work because:\n\nthe customized strategy cannot return NULL_BACKOFF\nthe second strategy might return valid backoff meanwhile the first strategy completes the future with null\nHow about using allOf?\n\nfinal List<RetryStrategy> retryStrategies = retryStrategiesBuilder.build();\ncheckState(!retryStrategies.isEmpty(), \"at least one retry strategy should be set\");\n\nif (retryStrategies.size() == 1) {\n    return retryStrategies.get(0);\n}\n\nreturn (ctx, cause) -> {\n    final List<CompletionStage<Backoff>> futures = new ArrayList<>(retryStrategies.size());\n    final CompletableFuture<Void> allOfFuture = CompletableFuture.allOf(\n            retryStrategies.stream()\n                           .map(retryStrategy -> {\n                               final CompletionStage<Backoff> future =\n                                       retryStrategy.shouldRetry(ctx, cause);\n                               futures.add(future);\n                               return future;\n                           })\n                           .toArray(CompletableFuture[]::new));\n    return allOfFuture.handle((unused, unused1) -> {\n        for (CompletionStage<Backoff> future : futures) {\n            // Perhaps is it time to change the return type of shouldRetry to CompletableFuture?\n            final Backoff backoff = future.toCompletableFuture().join();\n            if (backoff != null) {\n                return backoff;\n            }\n        }\n        return null;\n    });\n};", "url": "https://github.com/line/armeria/pull/2661#discussion_r414416798", "createdAt": "2020-04-24T09:05:13Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategyBuilder.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * A builder which creates a {@link RetryStrategy}.\n+ */\n+public final class RetryStrategyBuilder {\n+\n+    private static final CompletableFuture<Backoff> NULL_BACKOFF = CompletableFuture.completedFuture(null);\n+    private static final RetryStrategy[] EMPTY_RETRY_STRATEGIES = new RetryStrategy[0];\n+\n+    private final ImmutableList.Builder<RetryStrategy> retryStrategiesBuilder = ImmutableList.builder();\n+\n+    RetryStrategyBuilder() {}\n+\n+    /**\n+     * Adds a {@link RetryStrategy}.\n+     */\n+    public RetryStrategyBuilder add(RetryStrategy retryStrategy) {\n+        retryStrategiesBuilder.add(requireNonNull(retryStrategy, \"retryStrategy\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Adds a {@link RetryRule}.\n+     *\n+     * <p><pre>{@code\n+     * RetryStrategy.builder()\n+     *              .rule(RetryRule.onStatus(HttpStatus.SERVICE_UNAVAILABLE)\n+     *                             .onException(ex -> ex instanceof ClosedSessionException)\n+     *                             .onMethod(HttpMethod.GET)\n+     *                             .thenBackOff(myBackoff))\n+     *              .build();\n+     * }</pre>\n+     */\n+    public RetryStrategyBuilder rule(RetryRule retryRule) {\n+        return add(build(requireNonNull(retryRule, \"retryRule\")));\n+    }\n+\n+    /**\n+     * Returns a newly-created {@link RetryStrategy} based on the strategies set so far.\n+     */\n+    public RetryStrategy build() {\n+        final RetryStrategy[] retryStrategies = retryStrategiesBuilder.build().toArray(EMPTY_RETRY_STRATEGIES);\n+        checkState(retryStrategies.length > 0, \"at least one retry strategy should be set\");\n+\n+        if (retryStrategies.length == 1) {\n+            return retryStrategies[0];\n+        }\n+\n+        return (ctx, cause) -> {\n+            for (RetryStrategy retryStrategy : retryStrategies) {\n+                final CompletionStage<Backoff> backoff = retryStrategy.shouldRetry(ctx, cause);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f01618fc01d318fdba40e155deade9e32f3f32ec"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQyMTI2Mg==", "bodyText": "Or perhaps we can implement anyOfNonNull(futures...).", "url": "https://github.com/line/armeria/pull/2661#discussion_r414421262", "createdAt": "2020-04-24T09:11:55Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategyBuilder.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * A builder which creates a {@link RetryStrategy}.\n+ */\n+public final class RetryStrategyBuilder {\n+\n+    private static final CompletableFuture<Backoff> NULL_BACKOFF = CompletableFuture.completedFuture(null);\n+    private static final RetryStrategy[] EMPTY_RETRY_STRATEGIES = new RetryStrategy[0];\n+\n+    private final ImmutableList.Builder<RetryStrategy> retryStrategiesBuilder = ImmutableList.builder();\n+\n+    RetryStrategyBuilder() {}\n+\n+    /**\n+     * Adds a {@link RetryStrategy}.\n+     */\n+    public RetryStrategyBuilder add(RetryStrategy retryStrategy) {\n+        retryStrategiesBuilder.add(requireNonNull(retryStrategy, \"retryStrategy\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Adds a {@link RetryRule}.\n+     *\n+     * <p><pre>{@code\n+     * RetryStrategy.builder()\n+     *              .rule(RetryRule.onStatus(HttpStatus.SERVICE_UNAVAILABLE)\n+     *                             .onException(ex -> ex instanceof ClosedSessionException)\n+     *                             .onMethod(HttpMethod.GET)\n+     *                             .thenBackOff(myBackoff))\n+     *              .build();\n+     * }</pre>\n+     */\n+    public RetryStrategyBuilder rule(RetryRule retryRule) {\n+        return add(build(requireNonNull(retryRule, \"retryRule\")));\n+    }\n+\n+    /**\n+     * Returns a newly-created {@link RetryStrategy} based on the strategies set so far.\n+     */\n+    public RetryStrategy build() {\n+        final RetryStrategy[] retryStrategies = retryStrategiesBuilder.build().toArray(EMPTY_RETRY_STRATEGIES);\n+        checkState(retryStrategies.length > 0, \"at least one retry strategy should be set\");\n+\n+        if (retryStrategies.length == 1) {\n+            return retryStrategies[0];\n+        }\n+\n+        return (ctx, cause) -> {\n+            for (RetryStrategy retryStrategy : retryStrategies) {\n+                final CompletionStage<Backoff> backoff = retryStrategy.shouldRetry(ctx, cause);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQxNjc5OA=="}, "originalCommit": {"oid": "f01618fc01d318fdba40e155deade9e32f3f32ec"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ1NzA2MQ==", "bodyText": "the customized strategy cannot return NULL_BACKOFF\n\nOops... thank!\n\nHow about using allOf?\n\nI don't think we can use allOf here. Since it invokes all shouldRetry. If a user adds some side effect such as retry metric, allOf will cause a problem.\nLet me get backoffs lazily.", "url": "https://github.com/line/armeria/pull/2661#discussion_r414457061", "createdAt": "2020-04-24T10:08:01Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategyBuilder.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * A builder which creates a {@link RetryStrategy}.\n+ */\n+public final class RetryStrategyBuilder {\n+\n+    private static final CompletableFuture<Backoff> NULL_BACKOFF = CompletableFuture.completedFuture(null);\n+    private static final RetryStrategy[] EMPTY_RETRY_STRATEGIES = new RetryStrategy[0];\n+\n+    private final ImmutableList.Builder<RetryStrategy> retryStrategiesBuilder = ImmutableList.builder();\n+\n+    RetryStrategyBuilder() {}\n+\n+    /**\n+     * Adds a {@link RetryStrategy}.\n+     */\n+    public RetryStrategyBuilder add(RetryStrategy retryStrategy) {\n+        retryStrategiesBuilder.add(requireNonNull(retryStrategy, \"retryStrategy\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Adds a {@link RetryRule}.\n+     *\n+     * <p><pre>{@code\n+     * RetryStrategy.builder()\n+     *              .rule(RetryRule.onStatus(HttpStatus.SERVICE_UNAVAILABLE)\n+     *                             .onException(ex -> ex instanceof ClosedSessionException)\n+     *                             .onMethod(HttpMethod.GET)\n+     *                             .thenBackOff(myBackoff))\n+     *              .build();\n+     * }</pre>\n+     */\n+    public RetryStrategyBuilder rule(RetryRule retryRule) {\n+        return add(build(requireNonNull(retryRule, \"retryRule\")));\n+    }\n+\n+    /**\n+     * Returns a newly-created {@link RetryStrategy} based on the strategies set so far.\n+     */\n+    public RetryStrategy build() {\n+        final RetryStrategy[] retryStrategies = retryStrategiesBuilder.build().toArray(EMPTY_RETRY_STRATEGIES);\n+        checkState(retryStrategies.length > 0, \"at least one retry strategy should be set\");\n+\n+        if (retryStrategies.length == 1) {\n+            return retryStrategies[0];\n+        }\n+\n+        return (ctx, cause) -> {\n+            for (RetryStrategy retryStrategy : retryStrategies) {\n+                final CompletionStage<Backoff> backoff = retryStrategy.shouldRetry(ctx, cause);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQxNjc5OA=="}, "originalCommit": {"oid": "f01618fc01d318fdba40e155deade9e32f3f32ec"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDUwNzIyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "isResolved": true, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNjo1Nzo1NFrOGNFefA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMzozMTo1OVrOGNumWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NDM5Ng==", "bodyText": "I think we usually return a complete object from a factory, or just have one method for builder(). Should these all be returning RetryRule instead of builder? Anyways, would probably recommend two methods to keep the API simple, default() that returns idempotent().onServerError().onException().withBackoff(default) and builder().", "url": "https://github.com/line/armeria/pull/2661#discussion_r416374396", "createdAt": "2020-04-28T06:57:54Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * A rule for {@link RetryStrategy}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Adds the idempotent HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is idempotent.\n+     */\n+    static RetryRuleBuilder onIdempotentMethods() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44b1f1b2f9ecf875ea2856bbde6800811b2f63b5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwMjk0Ng==", "bodyText": "default() that returns idempotent().onServerError().onException().withBackoff(default)\n\nI agree with adding default() method.\nI'd like to make the default more conservative and safer to avoid unexpected retry and traffic.\nHow about retrying only with UnprocessedRequestException?\nstatic RetryRule ofDefault() {\n  return onUnprocessed().thenBackoff(default);\n}", "url": "https://github.com/line/armeria/pull/2661#discussion_r416402946", "createdAt": "2020-04-28T07:48:40Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * A rule for {@link RetryStrategy}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Adds the idempotent HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is idempotent.\n+     */\n+    static RetryRuleBuilder onIdempotentMethods() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NDM5Ng=="}, "originalCommit": {"oid": "44b1f1b2f9ecf875ea2856bbde6800811b2f63b5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwNjkyNg==", "bodyText": "Yeah that seems like a good default too.", "url": "https://github.com/line/armeria/pull/2661#discussion_r416406926", "createdAt": "2020-04-28T07:55:03Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * A rule for {@link RetryStrategy}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Adds the idempotent HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is idempotent.\n+     */\n+    static RetryRuleBuilder onIdempotentMethods() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NDM5Ng=="}, "originalCommit": {"oid": "44b1f1b2f9ecf875ea2856bbde6800811b2f63b5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwNzMwNA==", "bodyText": "Let's add .onServerError() as well. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2661#discussion_r416407304", "createdAt": "2020-04-28T07:55:39Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * A rule for {@link RetryStrategy}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Adds the idempotent HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is idempotent.\n+     */\n+    static RetryRuleBuilder onIdempotentMethods() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NDM5Ng=="}, "originalCommit": {"oid": "44b1f1b2f9ecf875ea2856bbde6800811b2f63b5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQxMDAxNQ==", "bodyText": "For me, this one is the most sensible default:\nstatic RetryRule ofDefault() {\n  return onIdempotentMethods().thenBackoff(default).or(RetryRule.onServerError().onUnprocessed().thenBackoff(default));\n}", "url": "https://github.com/line/armeria/pull/2661#discussion_r416410015", "createdAt": "2020-04-28T07:59:52Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * A rule for {@link RetryStrategy}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Adds the idempotent HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is idempotent.\n+     */\n+    static RetryRuleBuilder onIdempotentMethods() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NDM5Ng=="}, "originalCommit": {"oid": "44b1f1b2f9ecf875ea2856bbde6800811b2f63b5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUyODc2MA==", "bodyText": "Had chat internally on the default() method, we could not decide which rule is good for default. And there are other issues as well.\n\nA RetryRule could not be overridden by other rules. We can combine RetryRule using OR operation. That means there is no way to override the default behavior, unlike other defaults.\nWhich is a safe default rule for users? It will depend on the situation. It makes sense that they create an empty rule and add safe rules by their requirements.\n\nSo how about just adding a builder() method with an empty rule?", "url": "https://github.com/line/armeria/pull/2661#discussion_r416528760", "createdAt": "2020-04-28T11:11:21Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * A rule for {@link RetryStrategy}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Adds the idempotent HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is idempotent.\n+     */\n+    static RetryRuleBuilder onIdempotentMethods() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NDM5Ng=="}, "originalCommit": {"oid": "44b1f1b2f9ecf875ea2856bbde6800811b2f63b5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUzNzE1Mg==", "bodyText": "I personally liked having a one-liner like the previous onServerErrorStatus for generic clients, maybe default is a bad word but a simple (for lack of better word) retry rule that works for many cases and avoids having to go through a huge API seems useful.\nBy the way, are you planning on keeping all these factories?", "url": "https://github.com/line/armeria/pull/2661#discussion_r416537152", "createdAt": "2020-04-28T11:26:54Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * A rule for {@link RetryStrategy}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Adds the idempotent HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is idempotent.\n+     */\n+    static RetryRuleBuilder onIdempotentMethods() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NDM5Ng=="}, "originalCommit": {"oid": "44b1f1b2f9ecf875ea2856bbde6800811b2f63b5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0NjI4OA==", "bodyText": "a simple (for lack of better word) retry rule that works for many cases and avoids having to go through a huge API seems useful.\n\nOops, I misrepresented the talk. \ud83d\ude05 Our internal users also want to add a rule that is safe and easy to use, but not default. Let me think about what is good name for it.  \ud83e\udd14\n\nBy the way, are you planning on keeping all these factories?\n\nYes. as you commented, I am changing the return type of the factory methods to RetryRule.\nFor example:\nRetryRule rule = RetryRule.onServerErrorStatus();", "url": "https://github.com/line/armeria/pull/2661#discussion_r416546288", "createdAt": "2020-04-28T11:43:42Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * A rule for {@link RetryStrategy}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Adds the idempotent HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is idempotent.\n+     */\n+    static RetryRuleBuilder onIdempotentMethods() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NDM5Ng=="}, "originalCommit": {"oid": "44b1f1b2f9ecf875ea2856bbde6800811b2f63b5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0OTE1Ng==", "bodyText": "Cool - if the factories return rules that's also helpful for finding a simple one :)", "url": "https://github.com/line/armeria/pull/2661#discussion_r416549156", "createdAt": "2020-04-28T11:49:01Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * A rule for {@link RetryStrategy}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Adds the idempotent HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is idempotent.\n+     */\n+    static RetryRuleBuilder onIdempotentMethods() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NDM5Ng=="}, "originalCommit": {"oid": "44b1f1b2f9ecf875ea2856bbde6800811b2f63b5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0ODE1Mg==", "bodyText": "The sensible default method named failsafe() is added. :-)", "url": "https://github.com/line/armeria/pull/2661#discussion_r417048152", "createdAt": "2020-04-29T03:31:59Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * A rule for {@link RetryStrategy}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Adds the idempotent HTTP methods for a {@link RetryStrategy} which will retry\n+     * if the request HTTP method is idempotent.\n+     */\n+    static RetryRuleBuilder onIdempotentMethods() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NDM5Ng=="}, "originalCommit": {"oid": "44b1f1b2f9ecf875ea2856bbde6800811b2f63b5"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDUyMjcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleDecision.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzowMjowNVrOGNFnRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMjowOToyN1rOGNtb7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NjY0Ng==", "bodyText": "Instead of stop, noRetry?", "url": "https://github.com/line/armeria/pull/2661#discussion_r416376646", "createdAt": "2020-04-28T07:02:05Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleDecision.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A {@link RetryRuleDecision} that determines whether a {@link RetryRule} is applied or not.\n+ */\n+public final class RetryRuleDecision {\n+\n+    private static final RetryRuleDecision STOP = new RetryRuleDecision(null);\n+    private static final RetryRuleDecision NEXT = new RetryRuleDecision(null);\n+\n+    /**\n+     * Returns a {@link RetryRuleDecision} that retries with the specified {@link Backoff}.\n+     */\n+    public static RetryRuleDecision retry(Backoff backoff) {\n+        return new RetryRuleDecision(backoff);\n+    }\n+\n+    /**\n+     * Returns a {@link RetryRuleDecision} that never retries.\n+     */\n+    public static RetryRuleDecision stop() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44b1f1b2f9ecf875ea2856bbde6800811b2f63b5"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAyOTEwMw==", "bodyText": "noRetry seems more explicit and stop can keep consistency because other decision factory methods consist of a single word.\nAnyway, I prefer an obvious method name.", "url": "https://github.com/line/armeria/pull/2661#discussion_r417029103", "createdAt": "2020-04-29T02:09:27Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleDecision.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A {@link RetryRuleDecision} that determines whether a {@link RetryRule} is applied or not.\n+ */\n+public final class RetryRuleDecision {\n+\n+    private static final RetryRuleDecision STOP = new RetryRuleDecision(null);\n+    private static final RetryRuleDecision NEXT = new RetryRuleDecision(null);\n+\n+    /**\n+     * Returns a {@link RetryRuleDecision} that retries with the specified {@link Backoff}.\n+     */\n+    public static RetryRuleDecision retry(Backoff backoff) {\n+        return new RetryRuleDecision(backoff);\n+    }\n+\n+    /**\n+     * Returns a {@link RetryRuleDecision} that never retries.\n+     */\n+    public static RetryRuleDecision stop() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NjY0Ng=="}, "originalCommit": {"oid": "44b1f1b2f9ecf875ea2856bbde6800811b2f63b5"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDU4NTI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzoyMDo0MFrOGNGMzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzoyMDo0MFrOGNGMzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM4NjI1Mg==", "bodyText": "I think most of the builder factories aren't so useful, but having an equivalent factory in the new class that returns a very common RetryRule will be great.", "url": "https://github.com/line/armeria/pull/2661#discussion_r416386252", "createdAt": "2020-04-28T07:20:40Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategy.java", "diffHunk": "@@ -88,15 +102,35 @@ static RetryStrategy onException(Function<? super Throwable, ? extends Backoff>\n     /**\n      * Returns a {@link RetryStrategy} that retries with the {@link Backoff#ofDefault()}\n      * when the response status is 5xx (server error) or an {@link Exception} is raised.\n+     *\n+     * @deprecated Use {@link RetryRuleBuilder#onServerErrorStatus()}}, {@link RetryRuleBuilder#onException()}\n+     *             and {@link RetryRuleBuilder#thenBackoff()}.\n+     *             For example:\n+     *             <pre>{@code\n+     *             RetryRule.onServerErrorStatus()\n+     *                      .onException()\n+     *                      .thenBackoff();\n+     *             }</pre>\n      */\n+    @Deprecated\n     static RetryStrategy onServerErrorStatus() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44b1f1b2f9ecf875ea2856bbde6800811b2f63b5"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDYwNzY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzoyNjozMlrOGNGaTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzo1NTowMVrOGNHdfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM4OTcwOA==", "bodyText": "If RetryStrategy is deprecated, I don't think we need to mention toRetryRule() in the deprecation message", "url": "https://github.com/line/armeria/pull/2661#discussion_r416389708", "createdAt": "2020-04-28T07:26:32Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategy.java", "diffHunk": "@@ -34,7 +35,11 @@\n /**\n  * Determines whether a failed request should be retried.\n  * If you need to determine by looking into the {@link Response}, use {@link RetryStrategyWithContent}.\n+ *\n+ * @deprecated Use {@link RetryRule} directly or convert the existing {@link RetryStrategy} to {@link RetryRule}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44b1f1b2f9ecf875ea2856bbde6800811b2f63b5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwNjkwOA==", "bodyText": "Yeap, let me move toRetryRule() to internal.", "url": "https://github.com/line/armeria/pull/2661#discussion_r416406908", "createdAt": "2020-04-28T07:55:01Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategy.java", "diffHunk": "@@ -34,7 +35,11 @@\n /**\n  * Determines whether a failed request should be retried.\n  * If you need to determine by looking into the {@link Response}, use {@link RetryStrategyWithContent}.\n+ *\n+ * @deprecated Use {@link RetryRule} directly or convert the existing {@link RetryStrategy} to {@link RetryRule}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM4OTcwOA=="}, "originalCommit": {"oid": "44b1f1b2f9ecf875ea2856bbde6800811b2f63b5"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDYxMDY5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzoyNzoxN1rOGNGcCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzoyNzoxN1rOGNGcCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM5MDE1NA==", "bodyText": "Instead of adding this to a deprecated type, just convert with an internal helper in RetryingClientBuilder", "url": "https://github.com/line/armeria/pull/2661#discussion_r416390154", "createdAt": "2020-04-28T07:27:17Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategy.java", "diffHunk": "@@ -112,13 +146,30 @@ static RetryStrategy onServerErrorStatus(Backoff backoff) {\n      *\n      * @param backoffFunction A {@link BiFunction} that returns the {@link Backoff} or {@code null} (no retry)\n      *                        according to the given {@link HttpStatus} and {@link Throwable}\n+     *\n+     * @deprecated Use {@link RetryRuleBuilder#onStatus(Predicate)},\n+     *             {@link RetryRuleBuilder#onException(Predicate)} and\n+     *             {@link RetryRuleBuilder#thenBackoff(Backoff)}.\n+     *             For example:\n+     *             <pre>{@code\n+     *             RetryRule.onStatus(HttpStatus.TOO_MANY_REQUESTS)\n+     *                      .onException(ex -> ex instanceof ClosedStreamException)\n+     *                      .thenBackoff(myBackoff);\n+     *             }</pre>\n      */\n+    @Deprecated\n     static RetryStrategy onStatus(\n             BiFunction<? super HttpStatus, ? super Throwable, ? extends Backoff> backoffFunction) {\n-        // TODO(trustin): Apply a different backoff for UnprocessedRequestException.\n         return new HttpStatusBasedRetryStrategy(backoffFunction);\n     }\n \n+    /**\n+     * Converts a {@link RetryStrategy} to a {@link RetryRule}.\n+     */\n+    default RetryRule toRetryRule() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44b1f1b2f9ecf875ea2856bbde6800811b2f63b5"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDc1NjMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMjo0Njo0NlrOGNt-iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMzo1NzoyNFrOGNu7bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAzNzk2MA==", "bodyText": "default backoff", "url": "https://github.com/line/armeria/pull/2661#discussion_r417037960", "createdAt": "2020-04-29T02:46:46Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a failed request should be retried.\n+ * If you need to determine by looking into the {@link Response}, use {@link RetryRuleWithContent}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Returns a newly created {@link RetryRuleBuilder}.\n+     */\n+    static RetryRuleBuilder builder() {\n+        return new RetryRuleBuilder();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the specified {@link Backoff}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30980776043906b07699c635cdf059472d2b3a11"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0MDUwMw==", "bodyText": "Few of those throughout. Maybe the javadoc copy-paste errors are an indication of too many factories? :) Would consider not having the ones that take backoff, using the builder hardly adds many characters but makes the API much easier to read through on a javadoc for example.", "url": "https://github.com/line/armeria/pull/2661#discussion_r417040503", "createdAt": "2020-04-29T02:58:16Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a failed request should be retried.\n+ * If you need to determine by looking into the {@link Response}, use {@link RetryRuleWithContent}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Returns a newly created {@link RetryRuleBuilder}.\n+     */\n+    static RetryRuleBuilder builder() {\n+        return new RetryRuleBuilder();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the specified {@link Backoff}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAzNzk2MA=="}, "originalCommit": {"oid": "30980776043906b07699c635cdf059472d2b3a11"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA1MzU0OQ==", "bodyText": "Yeah, RetryRule has too many factories. Let me remove factories that take backoff.", "url": "https://github.com/line/armeria/pull/2661#discussion_r417053549", "createdAt": "2020-04-29T03:57:24Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a failed request should be retried.\n+ * If you need to determine by looking into the {@link Response}, use {@link RetryRuleWithContent}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Returns a newly created {@link RetryRuleBuilder}.\n+     */\n+    static RetryRuleBuilder builder() {\n+        return new RetryRuleBuilder();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the specified {@link Backoff}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAzNzk2MA=="}, "originalCommit": {"oid": "30980776043906b07699c635cdf059472d2b3a11"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDc2ODYyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMjo1NDozMFrOGNuFOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMjo1NDozMFrOGNuFOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAzOTY3Mw==", "bodyText": "Instead of stop trying further something like to not retry. noRetry is the opposite of retry, not next so the wording should be similar to that one", "url": "https://github.com/line/armeria/pull/2661#discussion_r417039673", "createdAt": "2020-04-29T02:54:30Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a failed request should be retried.\n+ * If you need to determine by looking into the {@link Response}, use {@link RetryRuleWithContent}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Returns a newly created {@link RetryRuleBuilder}.\n+     */\n+    static RetryRuleBuilder builder() {\n+        return new RetryRuleBuilder();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the specified {@link Backoff}\n+     * if the class of the response status is the specified {@link HttpStatusClass}.\n+     */\n+    static RetryRule onStatusClass(HttpStatusClass statusClass) {\n+        return onStatusClass(statusClass, Backoff.ofDefault());\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the specified {@link Backoff}\n+     * if the class of the response status is the specified {@link HttpStatusClass}.\n+     */\n+    static RetryRule onStatusClass(HttpStatusClass statusClass, Backoff backoff) {\n+        return builder().onStatusClass(statusClass).thenBackoff(backoff);\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the specified {@link Backoff}\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    static RetryRule onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        return onStatusClass(statusClasses, Backoff.ofDefault());\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the specified {@link Backoff}\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    static RetryRule onStatusClass(Iterable<HttpStatusClass> statusClasses, Backoff backoff) {\n+        return builder().onStatusClass(statusClasses).thenBackoff(backoff);\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@linkplain Backoff#ofDefault() default backoff}\n+     * if the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    static RetryRule onServerErrorStatus() {\n+        return onServerErrorStatus(Backoff.ofDefault());\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the specified {@link Backoff}\n+     * if the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    static RetryRule onServerErrorStatus(Backoff backoff) {\n+        return builder().onServerErrorStatus().thenBackoff(backoff);\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@link Backoff#ofDefault() default backoff} if an {@link Exception} is raised and\n+     * the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     *\n+     * <p>This method is shortcut for:\n+     * <pre>{@code\n+     * RetryRule.builder()\n+     *          .onServerErrorStatus()\n+     *          .onException()\n+     *          .thenBackoff();\n+     * }</pre>\n+     */\n+    static RetryRule onServerError() {\n+        return onServerError(Backoff.ofDefault());\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the specified {@link Backoff}\n+     * if an {@link Exception} is raised and the class of the response status is\n+     * {@link HttpStatusClass#SERVER_ERROR}.\n+     *\n+     * <p>This method is shortcut for:\n+     * <pre>{@code\n+     * Backoff myBackoff = ...;\n+     * RetryRule.builder()\n+     *          .onServerErrorStatus()\n+     *          .onException()\n+     *          .thenBackoff(myBackoff);\n+     * }</pre>\n+     */\n+    static RetryRule onServerError(Backoff backoff) {\n+        return builder().onServerErrorStatus().onException().thenBackoff(backoff);\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@linkplain Backoff#ofDefault() default backoff} if the response status is\n+     * the specified {@link HttpStatus}.\n+     */\n+    static RetryRule onStatus(HttpStatus status) {\n+        return onStatus(status, Backoff.ofDefault());\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the specified {@link Backoff}\n+     * if the response status is the specified {@link HttpStatus}.\n+     */\n+    static RetryRule onStatus(HttpStatus status, Backoff backoff) {\n+        return builder().onStatus(status).thenBackoff(backoff);\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@linkplain Backoff#ofDefault() default backoff} if the response status is one of\n+     * the specified {@link HttpStatus}es.\n+     */\n+    static RetryRule onStatus(Iterable<HttpStatus> statuses) {\n+        return onStatus(statuses, Backoff.ofDefault());\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the specified {@link Backoff}\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    static RetryRule onStatus(Iterable<HttpStatus> statuses, Backoff backoff) {\n+        return builder().onStatus(statuses).thenBackoff(backoff);\n+    }\n+\n+    /**\n+     * Returns a newly created a {@link RetryRule} that will retry with the\n+     * {@linkplain Backoff#ofDefault() default backoff} if the response status matches\n+     * the specified {@code statusFilter}.\n+     */\n+    static RetryRule onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        return onStatus(statusFilter, Backoff.ofDefault());\n+    }\n+\n+    /**\n+     * Returns a newly created a {@link RetryRule} that will retry with the specified {@link Backoff}\n+     * if the response status matches the specified {@code statusFilter}.\n+     */\n+    static RetryRule onStatus(Predicate<? super HttpStatus> statusFilter, Backoff backoff) {\n+        return builder().onStatus(statusFilter).thenBackoff(backoff);\n+    }\n+\n+    /**\n+     * Returns a newly created a {@link RetryRule} that will retry with\n+     * the {@linkplain Backoff#ofDefault() default backoff} if an {@link Exception} is raised and\n+     * that is instance of the specified {@code exception}.\n+     */\n+    static RetryRule onException(Class<? extends Throwable> exception) {\n+        return onException(exception, Backoff.ofDefault());\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the specified {@link Backoff}\n+     * if an {@link Exception} is raised and that is instance of the specified {@code exception}.\n+     */\n+    static RetryRule onException(Class<? extends Throwable> exception, Backoff backoff) {\n+        return builder().onException(exception).thenBackoff(backoff);\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry if an {@link Exception} is raised and\n+     * the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    static RetryRule onException(Predicate<? super Throwable> exceptionFilter) {\n+        return onException(exceptionFilter, Backoff.ofDefault());\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry if an {@link Exception} is raised and\n+     * the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    static RetryRule onException(Predicate<? super Throwable> exceptionFilter, Backoff backoff) {\n+        return builder().onException(exceptionFilter).thenBackoff(backoff);\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that retries on any {@link Exception}.\n+     */\n+    static RetryRule onException() {\n+        return onException(Backoff.ofDefault());\n+    }\n+\n+    /**\n+     * Returns a newly-created {@link RetryRule} that retries with the specified {@link Backoff} on any {@link Exception}.\n+     */\n+    static RetryRule onException(Backoff backoff) {\n+        return builder().onException().thenBackoff(backoff);\n+    }\n+\n+    /**\n+     * Returns a {@link RetryRule} that retries on an {@link UnprocessedRequestException} which means that\n+     * the request has not been processed by the server. Therefore, you can safely retry the request without\n+     * worrying about the idempotency of the request.\n+     */\n+    static RetryRule onUnprocessed() {\n+        return builder().onUnprocessed().thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a {@link RetryRule} that retries with the specified {@link Backoff} on\n+     * an {@link UnprocessedRequestException} which means that the request has not been processed by the server.\n+     * Therefore, you can safely retry the request without worrying about the idempotency of the request.\n+     */\n+    static RetryRule onUnprocessed(Backoff backoff) {\n+        return builder().onUnprocessed().thenBackoff(backoff);\n+    }\n+\n+    /**\n+     * Returns composed {@link RetryRule} that represents a logical OR of this {@link RetryRule} and another.\n+     * If this {@link RetryRule} completes with {@link RetryRuleDecision#retry(Backoff)} or\n+     * {@link RetryRuleDecision#noRetry()}, then other {@link RetryRule} is not evaluated.\n+     */\n+    default RetryRule or(RetryRule other) {\n+        return (ctx, cause) -> {\n+            final CompletionStage<RetryRuleDecision> decisionFuture = shouldRetry(ctx, cause);\n+            return decisionFuture.thenCompose(decision -> {\n+                if (decision != RetryRuleDecision.next()) {\n+                    return decisionFuture;\n+                } else {\n+                    return other.shouldRetry(ctx, cause);\n+                }\n+            });\n+        };\n+    }\n+\n+    /**\n+     * Tells whether the request sent with the specified {@link ClientRequestContext} requires a retry or not.\n+     * Implement this method to return a {@link CompletionStage} and to complete it with a desired\n+     * {@link RetryRuleDecision#retry(Backoff)}.\n+     * To stop trying further, complete it with {@link RetryRuleDecision#noRetry()}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30980776043906b07699c635cdf059472d2b3a11"}, "originalPosition": 267}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTE1NTE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNjozNjoxN1rOGNxcaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMjoxMDo1MFrOGRB2ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5NDc2MA==", "bodyText": "I think @minwoox's suggestion of using or between unprocessed and idempotent.serverErrorStatus makes sense. For this rule, is it even possible to retry? I guess an unprocessed request should never have a server error status since it didn't make it to the server?", "url": "https://github.com/line/armeria/pull/2661#discussion_r417094760", "createdAt": "2020-04-29T06:36:17Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a failed request should be retried.\n+ * If you need to determine by looking into the {@link Response}, use {@link RetryRuleWithContent}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@link Backoff#ofDefault() default backoff} if the request HTTP method is\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * and an {@link UnprocessedRequestException} is raised or the class of the response status is\n+     * {@link HttpStatusClass#SERVER_ERROR}.\n+     *\n+     * <p>Note that a client can safely retry a failed request with this rule if an endpoint service produces\n+     * the same result (no side effects) on idempotent HTTP methods.\n+     *\n+     * <p>This method is shortcut for:\n+     * <pre>{@code\n+     * RetryRule.builder()\n+     *          .onIdempotentMethods()\n+     *          .onServerErrorStatus()\n+     *          .onUnprocessed()\n+     *          .thenBackoff();\n+     * }</pre>\n+     */\n+    static RetryRule failsafe() {\n+        return builder().onIdempotentMethods().onServerErrorStatus().onUnprocessed().thenBackoff();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbe305f15310445337ce42e7bf6ad40ffb3219c1"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5NTYyMA==", "bodyText": "Wondering maybe we can just remove onUnprocessed and have RetryingClient always retry on unprocessed regardless of rule. Is there any conceivable case not to retry on unprocessed (from what I understand unprocessed means not sent to the server, but the only reason clients exist in the first place is solely to send something to the server and should always want to IMO). Putting it this way, I wonder if we even should require RetryingClient to retry unprocessed or just do it natively.", "url": "https://github.com/line/armeria/pull/2661#discussion_r417095620", "createdAt": "2020-04-29T06:38:31Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a failed request should be retried.\n+ * If you need to determine by looking into the {@link Response}, use {@link RetryRuleWithContent}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@link Backoff#ofDefault() default backoff} if the request HTTP method is\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * and an {@link UnprocessedRequestException} is raised or the class of the response status is\n+     * {@link HttpStatusClass#SERVER_ERROR}.\n+     *\n+     * <p>Note that a client can safely retry a failed request with this rule if an endpoint service produces\n+     * the same result (no side effects) on idempotent HTTP methods.\n+     *\n+     * <p>This method is shortcut for:\n+     * <pre>{@code\n+     * RetryRule.builder()\n+     *          .onIdempotentMethods()\n+     *          .onServerErrorStatus()\n+     *          .onUnprocessed()\n+     *          .thenBackoff();\n+     * }</pre>\n+     */\n+    static RetryRule failsafe() {\n+        return builder().onIdempotentMethods().onServerErrorStatus().onUnprocessed().thenBackoff();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5NDc2MA=="}, "originalCommit": {"oid": "fbe305f15310445337ce42e7bf6ad40ffb3219c1"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExNzMzNA==", "bodyText": "I guess an unprocessed request should never have a server error status since it didn't make it to the server?\n\non* methods in RetryRuleBuilder is OR expression except on*Methods.\nbuilder().onIdempotentMethods().onServerErrorStatus().onUnprocessed().thenBackoff() means\nrule = request method is idempotent && \n       (response status is 5xx || cause is UnprocessedRequestException)\n\nDoes this make you confused? Hmm...\nThe main reason why I add or() method is to allow a user configuring different backoff for different errors.\n\nWondering maybe we can just remove onUnprocessed and have RetryingClient always retry on unprocessed regardless of rule.\n\nThat makes sense, but we maybe need a discussion for this topic. Let me file an issue soon.", "url": "https://github.com/line/armeria/pull/2661#discussion_r417117334", "createdAt": "2020-04-29T07:28:33Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a failed request should be retried.\n+ * If you need to determine by looking into the {@link Response}, use {@link RetryRuleWithContent}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@link Backoff#ofDefault() default backoff} if the request HTTP method is\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * and an {@link UnprocessedRequestException} is raised or the class of the response status is\n+     * {@link HttpStatusClass#SERVER_ERROR}.\n+     *\n+     * <p>Note that a client can safely retry a failed request with this rule if an endpoint service produces\n+     * the same result (no side effects) on idempotent HTTP methods.\n+     *\n+     * <p>This method is shortcut for:\n+     * <pre>{@code\n+     * RetryRule.builder()\n+     *          .onIdempotentMethods()\n+     *          .onServerErrorStatus()\n+     *          .onUnprocessed()\n+     *          .thenBackoff();\n+     * }</pre>\n+     */\n+    static RetryRule failsafe() {\n+        return builder().onIdempotentMethods().onServerErrorStatus().onUnprocessed().thenBackoff();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5NDc2MA=="}, "originalCommit": {"oid": "fbe305f15310445337ce42e7bf6ad40ffb3219c1"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyMTM3MA==", "bodyText": "Hmm - yeah same type of methods having different or / and behavior seems confusing, you really need to know this API to be able to reason about such code. I'm reviewing the PR and didn't realize ;) Can't come up with a good idea, which is the main reason for the suggestion of just always retrying unprocessed.", "url": "https://github.com/line/armeria/pull/2661#discussion_r417121370", "createdAt": "2020-04-29T07:36:47Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a failed request should be retried.\n+ * If you need to determine by looking into the {@link Response}, use {@link RetryRuleWithContent}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@link Backoff#ofDefault() default backoff} if the request HTTP method is\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * and an {@link UnprocessedRequestException} is raised or the class of the response status is\n+     * {@link HttpStatusClass#SERVER_ERROR}.\n+     *\n+     * <p>Note that a client can safely retry a failed request with this rule if an endpoint service produces\n+     * the same result (no side effects) on idempotent HTTP methods.\n+     *\n+     * <p>This method is shortcut for:\n+     * <pre>{@code\n+     * RetryRule.builder()\n+     *          .onIdempotentMethods()\n+     *          .onServerErrorStatus()\n+     *          .onUnprocessed()\n+     *          .thenBackoff();\n+     * }</pre>\n+     */\n+    static RetryRule failsafe() {\n+        return builder().onIdempotentMethods().onServerErrorStatus().onUnprocessed().thenBackoff();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5NDc2MA=="}, "originalCommit": {"oid": "fbe305f15310445337ce42e7bf6ad40ffb3219c1"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1NDUyMA==", "bodyText": "I don't think AND operation in builder makes sense for a response status or an exception.\nHow about changing onIdempotentMethods() to ifIdempotentMethods()?\nRetryRule.builder()\n         .ifIdempotentMethods()\n         .onServerErrorStatus()\n         .onUnprocessed()\n         .thenBackoff()\n         .or(RetryRule.onStatus(HttpStatus.TOO_MANY_REQUESTS));\nor just give up changing on* methods and\nWe can change the return type builder methods to select only one on* methods.\nclass RetryRuleBuilder {\n    public RetryRuleBuilder onIdempotentMethods() {\n        ...\n        return this;\n    }\n    public RetryBackoffBuilder onServerErrorStatus() { \n        return new RetryBackoffBuilder(this); \n    }\n}\nclass RetryBackoffBuilder {\n\n   public RetryRule thenBackoff(Backoff backoff) { \n       ...\n   } \n}", "url": "https://github.com/line/armeria/pull/2661#discussion_r417154520", "createdAt": "2020-04-29T08:38:52Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a failed request should be retried.\n+ * If you need to determine by looking into the {@link Response}, use {@link RetryRuleWithContent}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@link Backoff#ofDefault() default backoff} if the request HTTP method is\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * and an {@link UnprocessedRequestException} is raised or the class of the response status is\n+     * {@link HttpStatusClass#SERVER_ERROR}.\n+     *\n+     * <p>Note that a client can safely retry a failed request with this rule if an endpoint service produces\n+     * the same result (no side effects) on idempotent HTTP methods.\n+     *\n+     * <p>This method is shortcut for:\n+     * <pre>{@code\n+     * RetryRule.builder()\n+     *          .onIdempotentMethods()\n+     *          .onServerErrorStatus()\n+     *          .onUnprocessed()\n+     *          .thenBackoff();\n+     * }</pre>\n+     */\n+    static RetryRule failsafe() {\n+        return builder().onIdempotentMethods().onServerErrorStatus().onUnprocessed().thenBackoff();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5NDc2MA=="}, "originalCommit": {"oid": "fbe305f15310445337ce42e7bf6ad40ffb3219c1"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0MjU5Ng==", "bodyText": "If is a little better, but if some user code is on, if, on, it looks a bit weird.\nMaybe we can make methods a constructor parameter / factory parameter for the builder? Then it's clearer they're special", "url": "https://github.com/line/armeria/pull/2661#discussion_r417242596", "createdAt": "2020-04-29T11:24:17Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a failed request should be retried.\n+ * If you need to determine by looking into the {@link Response}, use {@link RetryRuleWithContent}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@link Backoff#ofDefault() default backoff} if the request HTTP method is\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * and an {@link UnprocessedRequestException} is raised or the class of the response status is\n+     * {@link HttpStatusClass#SERVER_ERROR}.\n+     *\n+     * <p>Note that a client can safely retry a failed request with this rule if an endpoint service produces\n+     * the same result (no side effects) on idempotent HTTP methods.\n+     *\n+     * <p>This method is shortcut for:\n+     * <pre>{@code\n+     * RetryRule.builder()\n+     *          .onIdempotentMethods()\n+     *          .onServerErrorStatus()\n+     *          .onUnprocessed()\n+     *          .thenBackoff();\n+     * }</pre>\n+     */\n+    static RetryRule failsafe() {\n+        return builder().onIdempotentMethods().onServerErrorStatus().onUnprocessed().thenBackoff();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5NDc2MA=="}, "originalCommit": {"oid": "fbe305f15310445337ce42e7bf6ad40ffb3219c1"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI1NzcwNw==", "bodyText": "It sounds good mostly but can't offer special method set such as idempotentMethods().\nThen probably need a special builder method?\nRetryRule.builder()\n         .onServerErrorStatus()...\n\nRetryRule.builder(HttpMethod.GET)\n         .onServerErrorStatus()...\n\nRetryRule.builderWithIdempotentMethods()\n         .onServerErrorStatus()...", "url": "https://github.com/line/armeria/pull/2661#discussion_r417257707", "createdAt": "2020-04-29T11:54:15Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a failed request should be retried.\n+ * If you need to determine by looking into the {@link Response}, use {@link RetryRuleWithContent}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@link Backoff#ofDefault() default backoff} if the request HTTP method is\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * and an {@link UnprocessedRequestException} is raised or the class of the response status is\n+     * {@link HttpStatusClass#SERVER_ERROR}.\n+     *\n+     * <p>Note that a client can safely retry a failed request with this rule if an endpoint service produces\n+     * the same result (no side effects) on idempotent HTTP methods.\n+     *\n+     * <p>This method is shortcut for:\n+     * <pre>{@code\n+     * RetryRule.builder()\n+     *          .onIdempotentMethods()\n+     *          .onServerErrorStatus()\n+     *          .onUnprocessed()\n+     *          .thenBackoff();\n+     * }</pre>\n+     */\n+    static RetryRule failsafe() {\n+        return builder().onIdempotentMethods().onServerErrorStatus().onUnprocessed().thenBackoff();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5NDc2MA=="}, "originalCommit": {"oid": "fbe305f15310445337ce42e7bf6ad40ffb3219c1"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI2MDM0Ng==", "bodyText": "Yeah that's what I was thinking", "url": "https://github.com/line/armeria/pull/2661#discussion_r417260346", "createdAt": "2020-04-29T11:59:30Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a failed request should be retried.\n+ * If you need to determine by looking into the {@link Response}, use {@link RetryRuleWithContent}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@link Backoff#ofDefault() default backoff} if the request HTTP method is\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * and an {@link UnprocessedRequestException} is raised or the class of the response status is\n+     * {@link HttpStatusClass#SERVER_ERROR}.\n+     *\n+     * <p>Note that a client can safely retry a failed request with this rule if an endpoint service produces\n+     * the same result (no side effects) on idempotent HTTP methods.\n+     *\n+     * <p>This method is shortcut for:\n+     * <pre>{@code\n+     * RetryRule.builder()\n+     *          .onIdempotentMethods()\n+     *          .onServerErrorStatus()\n+     *          .onUnprocessed()\n+     *          .thenBackoff();\n+     * }</pre>\n+     */\n+    static RetryRule failsafe() {\n+        return builder().onIdempotentMethods().onServerErrorStatus().onUnprocessed().thenBackoff();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5NDc2MA=="}, "originalCommit": {"oid": "fbe305f15310445337ce42e7bf6ad40ffb3219c1"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwOTM3OQ==", "bodyText": "How about RetryRule.builder(HttpMethod.idempotentMethods())?", "url": "https://github.com/line/armeria/pull/2661#discussion_r420509379", "createdAt": "2020-05-06T02:10:50Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a failed request should be retried.\n+ * If you need to determine by looking into the {@link Response}, use {@link RetryRuleWithContent}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@link Backoff#ofDefault() default backoff} if the request HTTP method is\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * and an {@link UnprocessedRequestException} is raised or the class of the response status is\n+     * {@link HttpStatusClass#SERVER_ERROR}.\n+     *\n+     * <p>Note that a client can safely retry a failed request with this rule if an endpoint service produces\n+     * the same result (no side effects) on idempotent HTTP methods.\n+     *\n+     * <p>This method is shortcut for:\n+     * <pre>{@code\n+     * RetryRule.builder()\n+     *          .onIdempotentMethods()\n+     *          .onServerErrorStatus()\n+     *          .onUnprocessed()\n+     *          .thenBackoff();\n+     * }</pre>\n+     */\n+    static RetryRule failsafe() {\n+        return builder().onIdempotentMethods().onServerErrorStatus().onUnprocessed().thenBackoff();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5NDc2MA=="}, "originalCommit": {"oid": "fbe305f15310445337ce42e7bf6ad40ffb3219c1"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTE2Nzc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNjo0MTowNVrOGNxjfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzo1MDozOFrOGNzgdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5NjU3Mw==", "bodyText": "Having a retrying client without backoff is such a bad practice in almost every situation that recommend not having a shortcut, if someone really wants this bad behavior they can pass spend the couple of lines of code to pass Backoff to thenBackoff", "url": "https://github.com/line/armeria/pull/2661#discussion_r417096573", "createdAt": "2020-04-29T06:41:05Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleBuilder.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * A builder which creates a {@link RetryRule}.\n+ */\n+public final class RetryRuleBuilder {\n+\n+    private static final CompletableFuture<RetryRuleDecision> NEXT =\n+            CompletableFuture.completedFuture(RetryRuleDecision.next());\n+\n+    private static final Set<HttpMethod> IDEMPOTENT_METHODS =\n+            ImmutableSet.of(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.PUT, HttpMethod.DELETE);\n+\n+    private final ImmutableSet.Builder<HttpStatusClass> statusClassesBuilder = ImmutableSet.builder();\n+    private final ImmutableSet.Builder<HttpStatus> statusesBuilder = ImmutableSet.builder();\n+\n+    private Set<HttpMethod> methods = HttpMethod.knownMethods();\n+    private boolean isMethodsSet;\n+\n+    @Nullable\n+    private Predicate<HttpStatus> statusFilter;\n+    @Nullable\n+    private Predicate<Throwable> exceptionFilter;\n+\n+    RetryRuleBuilder() {}\n+\n+    /**\n+     * Adds the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * HTTP methods, which should not have any side-effects (except for keeping statistics),\n+     * for a {@link RetryRule} which will retry if the request HTTP method is idempotent.\n+     */\n+    public RetryRuleBuilder onIdempotentMethods() {\n+        return onMethods(IDEMPOTENT_METHODS);\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryRule} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryRuleBuilder onMethods(HttpMethod... methods) {\n+        return onMethods(ImmutableSet.copyOf(requireNonNull(methods, \"methods\")));\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryRule} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryRuleBuilder onMethods(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        checkArgument(!Iterables.isEmpty(methods), \"methods can't be empty\");\n+\n+        if (isMethodsSet) {\n+            Iterables.addAll(this.methods, methods);\n+        } else {\n+            this.methods = Sets.newEnumSet(methods, HttpMethod.class);\n+            isMethodsSet = true;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryRule} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryRuleBuilder onStatusClass(HttpStatusClass... statusClasses) {\n+        return onStatusClass(ImmutableSet.copyOf(requireNonNull(statusClasses, \"statusClasses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryRule} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryRuleBuilder onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        requireNonNull(statusClasses, \"statusClasses\");\n+        checkArgument(!Iterables.isEmpty(statusClasses), \"statusClasses can't be empty\");\n+\n+        statusClassesBuilder.addAll(statusClasses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the {@link HttpStatusClass#SERVER_ERROR} for a {@link RetryRule} which will retry\n+     * if the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    public RetryRuleBuilder onServerErrorStatus() {\n+        return onStatusClass(HttpStatusClass.SERVER_ERROR);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryRule} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryRuleBuilder onStatus(HttpStatus... statuses) {\n+        return onStatus(ImmutableSet.copyOf(requireNonNull(statuses, \"statuses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryRule} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryRuleBuilder onStatus(Iterable<HttpStatus> statuses) {\n+        requireNonNull(statuses, \"statuses\");\n+        checkArgument(!Iterables.isEmpty(statuses), \"statuses can't be empty\");\n+\n+        statusesBuilder.addAll(statuses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@code statusFilter} for a {@link RetryRule} which will retry\n+     * if the response status matches the specified {@code statusFilter}.\n+     */\n+    public RetryRuleBuilder onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        requireNonNull(statusFilter, \"statusFilter\");\n+        if (this.statusFilter != null) {\n+            this.statusFilter = this.statusFilter.or(statusFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<HttpStatus> cast = (Predicate<HttpStatus>) statusFilter;\n+            this.statusFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified exception type for a {@link RetryRule} which will retry\n+     * if an {@link Exception} is raised and that is instance of the specified {@code exception}.\n+     */\n+    public RetryRuleBuilder onException(Class<? extends Throwable> exception) {\n+        requireNonNull(exception, \"exception\");\n+        return onException(exception::isInstance);\n+    }\n+\n+    /**\n+     * Adds the specified {@code exceptionFilter} for a {@link RetryRule} which will retry\n+     * if an {@link Exception} is raised and the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    public RetryRuleBuilder onException(Predicate<? super Throwable> exceptionFilter) {\n+        requireNonNull(exceptionFilter, \"exceptionFilter\");\n+        if (this.exceptionFilter != null) {\n+            this.exceptionFilter = this.exceptionFilter.or(exceptionFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<Throwable> cast = (Predicate<Throwable>) exceptionFilter;\n+            this.exceptionFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Makes a {@link RetryRule} retry on any {@link Exception}.\n+     */\n+    public RetryRuleBuilder onException() {\n+        return onException(unused -> true);\n+    }\n+\n+    /**\n+     * Makes a {@link RetryRule} retry on an {@link UnprocessedRequestException} which means that the request\n+     * has not been processed by the server. Therefore, you can safely retry the request without worrying about\n+     * the idempotency of the request.\n+     */\n+    public RetryRuleBuilder onUnprocessed() {\n+        return onException(UnprocessedRequestException.class);\n+    }\n+\n+    /**\n+     * Sets the {@linkplain Backoff#ofDefault() default backoff} and returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenBackoff() {\n+        return thenBackoff(Backoff.ofDefault());\n+    }\n+\n+    /**\n+     * Sets the specified {@link Backoff} and returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenBackoff(Backoff backoff) {\n+        requireNonNull(backoff, \"backoff\");\n+        return build(RetryRuleDecision.retry(backoff));\n+    }\n+\n+    /**\n+     * Sets a {@link Backoff} which limits the number of attempts up to the specified value and\n+     * never waits between attempts. Returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenImmediately(int maxAttempts) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbe305f15310445337ce42e7bf6ad40ffb3219c1"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyODU2Nw==", "bodyText": "This method is dangerous in most cases. Let's remove this shortcut. \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/2661#discussion_r417128567", "createdAt": "2020-04-29T07:50:38Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleBuilder.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * A builder which creates a {@link RetryRule}.\n+ */\n+public final class RetryRuleBuilder {\n+\n+    private static final CompletableFuture<RetryRuleDecision> NEXT =\n+            CompletableFuture.completedFuture(RetryRuleDecision.next());\n+\n+    private static final Set<HttpMethod> IDEMPOTENT_METHODS =\n+            ImmutableSet.of(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.PUT, HttpMethod.DELETE);\n+\n+    private final ImmutableSet.Builder<HttpStatusClass> statusClassesBuilder = ImmutableSet.builder();\n+    private final ImmutableSet.Builder<HttpStatus> statusesBuilder = ImmutableSet.builder();\n+\n+    private Set<HttpMethod> methods = HttpMethod.knownMethods();\n+    private boolean isMethodsSet;\n+\n+    @Nullable\n+    private Predicate<HttpStatus> statusFilter;\n+    @Nullable\n+    private Predicate<Throwable> exceptionFilter;\n+\n+    RetryRuleBuilder() {}\n+\n+    /**\n+     * Adds the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * HTTP methods, which should not have any side-effects (except for keeping statistics),\n+     * for a {@link RetryRule} which will retry if the request HTTP method is idempotent.\n+     */\n+    public RetryRuleBuilder onIdempotentMethods() {\n+        return onMethods(IDEMPOTENT_METHODS);\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryRule} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryRuleBuilder onMethods(HttpMethod... methods) {\n+        return onMethods(ImmutableSet.copyOf(requireNonNull(methods, \"methods\")));\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryRule} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryRuleBuilder onMethods(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        checkArgument(!Iterables.isEmpty(methods), \"methods can't be empty\");\n+\n+        if (isMethodsSet) {\n+            Iterables.addAll(this.methods, methods);\n+        } else {\n+            this.methods = Sets.newEnumSet(methods, HttpMethod.class);\n+            isMethodsSet = true;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryRule} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryRuleBuilder onStatusClass(HttpStatusClass... statusClasses) {\n+        return onStatusClass(ImmutableSet.copyOf(requireNonNull(statusClasses, \"statusClasses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryRule} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryRuleBuilder onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        requireNonNull(statusClasses, \"statusClasses\");\n+        checkArgument(!Iterables.isEmpty(statusClasses), \"statusClasses can't be empty\");\n+\n+        statusClassesBuilder.addAll(statusClasses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the {@link HttpStatusClass#SERVER_ERROR} for a {@link RetryRule} which will retry\n+     * if the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    public RetryRuleBuilder onServerErrorStatus() {\n+        return onStatusClass(HttpStatusClass.SERVER_ERROR);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryRule} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryRuleBuilder onStatus(HttpStatus... statuses) {\n+        return onStatus(ImmutableSet.copyOf(requireNonNull(statuses, \"statuses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryRule} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryRuleBuilder onStatus(Iterable<HttpStatus> statuses) {\n+        requireNonNull(statuses, \"statuses\");\n+        checkArgument(!Iterables.isEmpty(statuses), \"statuses can't be empty\");\n+\n+        statusesBuilder.addAll(statuses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@code statusFilter} for a {@link RetryRule} which will retry\n+     * if the response status matches the specified {@code statusFilter}.\n+     */\n+    public RetryRuleBuilder onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        requireNonNull(statusFilter, \"statusFilter\");\n+        if (this.statusFilter != null) {\n+            this.statusFilter = this.statusFilter.or(statusFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<HttpStatus> cast = (Predicate<HttpStatus>) statusFilter;\n+            this.statusFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified exception type for a {@link RetryRule} which will retry\n+     * if an {@link Exception} is raised and that is instance of the specified {@code exception}.\n+     */\n+    public RetryRuleBuilder onException(Class<? extends Throwable> exception) {\n+        requireNonNull(exception, \"exception\");\n+        return onException(exception::isInstance);\n+    }\n+\n+    /**\n+     * Adds the specified {@code exceptionFilter} for a {@link RetryRule} which will retry\n+     * if an {@link Exception} is raised and the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    public RetryRuleBuilder onException(Predicate<? super Throwable> exceptionFilter) {\n+        requireNonNull(exceptionFilter, \"exceptionFilter\");\n+        if (this.exceptionFilter != null) {\n+            this.exceptionFilter = this.exceptionFilter.or(exceptionFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<Throwable> cast = (Predicate<Throwable>) exceptionFilter;\n+            this.exceptionFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Makes a {@link RetryRule} retry on any {@link Exception}.\n+     */\n+    public RetryRuleBuilder onException() {\n+        return onException(unused -> true);\n+    }\n+\n+    /**\n+     * Makes a {@link RetryRule} retry on an {@link UnprocessedRequestException} which means that the request\n+     * has not been processed by the server. Therefore, you can safely retry the request without worrying about\n+     * the idempotency of the request.\n+     */\n+    public RetryRuleBuilder onUnprocessed() {\n+        return onException(UnprocessedRequestException.class);\n+    }\n+\n+    /**\n+     * Sets the {@linkplain Backoff#ofDefault() default backoff} and returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenBackoff() {\n+        return thenBackoff(Backoff.ofDefault());\n+    }\n+\n+    /**\n+     * Sets the specified {@link Backoff} and returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenBackoff(Backoff backoff) {\n+        requireNonNull(backoff, \"backoff\");\n+        return build(RetryRuleDecision.retry(backoff));\n+    }\n+\n+    /**\n+     * Sets a {@link Backoff} which limits the number of attempts up to the specified value and\n+     * never waits between attempts. Returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenImmediately(int maxAttempts) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5NjU3Mw=="}, "originalCommit": {"oid": "fbe305f15310445337ce42e7bf6ad40ffb3219c1"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTE3MTY2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNjo0MjozNFrOGNxlqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNjo0MjozNFrOGNxlqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5NzEzMA==", "bodyText": "Lets document what happens when they are all next", "url": "https://github.com/line/armeria/pull/2661#discussion_r417097130", "createdAt": "2020-04-29T06:42:34Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a failed request should be retried.\n+ * If you need to determine by looking into the {@link Response}, use {@link RetryRuleWithContent}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@link Backoff#ofDefault() default backoff} if the request HTTP method is\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * and an {@link UnprocessedRequestException} is raised or the class of the response status is\n+     * {@link HttpStatusClass#SERVER_ERROR}.\n+     *\n+     * <p>Note that a client can safely retry a failed request with this rule if an endpoint service produces\n+     * the same result (no side effects) on idempotent HTTP methods.\n+     *\n+     * <p>This method is shortcut for:\n+     * <pre>{@code\n+     * RetryRule.builder()\n+     *          .onIdempotentMethods()\n+     *          .onServerErrorStatus()\n+     *          .onUnprocessed()\n+     *          .thenBackoff();\n+     * }</pre>\n+     */\n+    static RetryRule failsafe() {\n+        return builder().onIdempotentMethods().onServerErrorStatus().onUnprocessed().thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with\n+     * the {@linkplain Backoff#ofDefault() default backoff} if the class of the response status is\n+     * the specified {@link HttpStatusClass}.\n+     */\n+    static RetryRule onStatusClass(HttpStatusClass statusClass) {\n+        return builder().onStatusClass(statusClass).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with\n+     * the {@linkplain Backoff#ofDefault() defalut backoff} if the class of the response status is\n+     * one of the specified {@link HttpStatusClass}es.\n+     */\n+    static RetryRule onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        return builder().onStatusClass(statusClasses).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@linkplain Backoff#ofDefault() default backoff}\n+     * if the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    static RetryRule onServerErrorStatus() {\n+        return builder().onServerErrorStatus().thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@linkplain Backoff#ofDefault() default backoff} if the response status is one of\n+     * the specified {@link HttpStatus}es.\n+     */\n+    static RetryRule onStatus(HttpStatus... statuses) {\n+        return builder().onStatus(statuses).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@linkplain Backoff#ofDefault() default backoff} if the response status is one of\n+     * the specified {@link HttpStatus}es.\n+     */\n+    static RetryRule onStatus(Iterable<HttpStatus> statuses) {\n+        return builder().onStatus(statuses).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created a {@link RetryRule} that will retry with the\n+     * {@linkplain Backoff#ofDefault() default backoff} if the response status matches\n+     * the specified {@code statusFilter}.\n+     */\n+    static RetryRule onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        return builder().onStatus(statusFilter).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created a {@link RetryRule} that will retry with\n+     * the {@linkplain Backoff#ofDefault() default backoff} if an {@link Exception} is raised and\n+     * that is instance of the specified {@code exception}.\n+     */\n+    static RetryRule onException(Class<? extends Throwable> exception) {\n+        return builder().onException(exception).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@linkplain Backoff#ofDefault() default backoff} if an {@link Exception} is raised and\n+     * the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    static RetryRule onException(Predicate<? super Throwable> exceptionFilter) {\n+        return builder().onException(exceptionFilter).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that retries with\n+     * {@linkplain Backoff#ofDefault() default backoff} on any {@link Exception}.\n+     * Note that this rule should be used carefully because it reties regardless of\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotency</a>.\n+     */\n+    static RetryRule onException() {\n+        return builder().onException().thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a {@link RetryRule} that retries with the {@linkplain Backoff#ofDefault() default backoff}\n+     * on an {@link UnprocessedRequestException} which means that the request has not been processed by\n+     * the server. Therefore, you can safely retry the request without worrying about the idempotency of\n+     * the request.\n+     */\n+    static RetryRule onUnprocessed() {\n+        return builder().onUnprocessed().thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRuleBuilder}.\n+     */\n+    static RetryRuleBuilder builder() {\n+        return new RetryRuleBuilder();\n+    }\n+\n+    /**\n+     * Returns a composed {@link RetryRule} that represents a logical OR of this {@link RetryRule} and another.\n+     * If this {@link RetryRule} completes with {@link RetryRuleDecision#next()}, then other {@link RetryRule}\n+     * is evaluated.\n+     */\n+    default RetryRule or(RetryRule other) {\n+        return (ctx, cause) -> {\n+            final CompletionStage<RetryRuleDecision> decisionFuture = shouldRetry(ctx, cause);\n+            return decisionFuture.thenCompose(decision -> {\n+                if (decision != RetryRuleDecision.next()) {\n+                    return decisionFuture;\n+                } else {\n+                    return other.shouldRetry(ctx, cause);\n+                }\n+            });\n+        };\n+    }\n+\n+    /**\n+     * Tells whether the request sent with the specified {@link ClientRequestContext} requires a retry or not.\n+     * Implement this method to return a {@link CompletionStage} and to complete it with a desired\n+     * {@link RetryRuleDecision#retry(Backoff)}.\n+     * To not retry, complete it with {@link RetryRuleDecision#noRetry()}.\n+     * To skip this {@link RetryRule} and find other {@link RetryRule}, complete it with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbe305f15310445337ce42e7bf6ad40ffb3219c1"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTE4NzQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNjo0ODo0OFrOGNxu1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzo1NjowNVrOGNzrog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5OTQ3Nw==", "bodyText": "Think you can move this out of the lambda instead of creating every time, similar to how NEXT is cached. Could also consider having a completed future created in the RetryRuleDecision constructor itself.", "url": "https://github.com/line/armeria/pull/2661#discussion_r417099477", "createdAt": "2020-04-29T06:48:48Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleBuilder.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * A builder which creates a {@link RetryRule}.\n+ */\n+public final class RetryRuleBuilder {\n+\n+    private static final CompletableFuture<RetryRuleDecision> NEXT =\n+            CompletableFuture.completedFuture(RetryRuleDecision.next());\n+\n+    private static final Set<HttpMethod> IDEMPOTENT_METHODS =\n+            ImmutableSet.of(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.PUT, HttpMethod.DELETE);\n+\n+    private final ImmutableSet.Builder<HttpStatusClass> statusClassesBuilder = ImmutableSet.builder();\n+    private final ImmutableSet.Builder<HttpStatus> statusesBuilder = ImmutableSet.builder();\n+\n+    private Set<HttpMethod> methods = HttpMethod.knownMethods();\n+    private boolean isMethodsSet;\n+\n+    @Nullable\n+    private Predicate<HttpStatus> statusFilter;\n+    @Nullable\n+    private Predicate<Throwable> exceptionFilter;\n+\n+    RetryRuleBuilder() {}\n+\n+    /**\n+     * Adds the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * HTTP methods, which should not have any side-effects (except for keeping statistics),\n+     * for a {@link RetryRule} which will retry if the request HTTP method is idempotent.\n+     */\n+    public RetryRuleBuilder onIdempotentMethods() {\n+        return onMethods(IDEMPOTENT_METHODS);\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryRule} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryRuleBuilder onMethods(HttpMethod... methods) {\n+        return onMethods(ImmutableSet.copyOf(requireNonNull(methods, \"methods\")));\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryRule} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryRuleBuilder onMethods(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        checkArgument(!Iterables.isEmpty(methods), \"methods can't be empty\");\n+\n+        if (isMethodsSet) {\n+            Iterables.addAll(this.methods, methods);\n+        } else {\n+            this.methods = Sets.newEnumSet(methods, HttpMethod.class);\n+            isMethodsSet = true;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryRule} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryRuleBuilder onStatusClass(HttpStatusClass... statusClasses) {\n+        return onStatusClass(ImmutableSet.copyOf(requireNonNull(statusClasses, \"statusClasses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryRule} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryRuleBuilder onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        requireNonNull(statusClasses, \"statusClasses\");\n+        checkArgument(!Iterables.isEmpty(statusClasses), \"statusClasses can't be empty\");\n+\n+        statusClassesBuilder.addAll(statusClasses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the {@link HttpStatusClass#SERVER_ERROR} for a {@link RetryRule} which will retry\n+     * if the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    public RetryRuleBuilder onServerErrorStatus() {\n+        return onStatusClass(HttpStatusClass.SERVER_ERROR);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryRule} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryRuleBuilder onStatus(HttpStatus... statuses) {\n+        return onStatus(ImmutableSet.copyOf(requireNonNull(statuses, \"statuses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryRule} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryRuleBuilder onStatus(Iterable<HttpStatus> statuses) {\n+        requireNonNull(statuses, \"statuses\");\n+        checkArgument(!Iterables.isEmpty(statuses), \"statuses can't be empty\");\n+\n+        statusesBuilder.addAll(statuses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@code statusFilter} for a {@link RetryRule} which will retry\n+     * if the response status matches the specified {@code statusFilter}.\n+     */\n+    public RetryRuleBuilder onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        requireNonNull(statusFilter, \"statusFilter\");\n+        if (this.statusFilter != null) {\n+            this.statusFilter = this.statusFilter.or(statusFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<HttpStatus> cast = (Predicate<HttpStatus>) statusFilter;\n+            this.statusFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified exception type for a {@link RetryRule} which will retry\n+     * if an {@link Exception} is raised and that is instance of the specified {@code exception}.\n+     */\n+    public RetryRuleBuilder onException(Class<? extends Throwable> exception) {\n+        requireNonNull(exception, \"exception\");\n+        return onException(exception::isInstance);\n+    }\n+\n+    /**\n+     * Adds the specified {@code exceptionFilter} for a {@link RetryRule} which will retry\n+     * if an {@link Exception} is raised and the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    public RetryRuleBuilder onException(Predicate<? super Throwable> exceptionFilter) {\n+        requireNonNull(exceptionFilter, \"exceptionFilter\");\n+        if (this.exceptionFilter != null) {\n+            this.exceptionFilter = this.exceptionFilter.or(exceptionFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<Throwable> cast = (Predicate<Throwable>) exceptionFilter;\n+            this.exceptionFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Makes a {@link RetryRule} retry on any {@link Exception}.\n+     */\n+    public RetryRuleBuilder onException() {\n+        return onException(unused -> true);\n+    }\n+\n+    /**\n+     * Makes a {@link RetryRule} retry on an {@link UnprocessedRequestException} which means that the request\n+     * has not been processed by the server. Therefore, you can safely retry the request without worrying about\n+     * the idempotency of the request.\n+     */\n+    public RetryRuleBuilder onUnprocessed() {\n+        return onException(UnprocessedRequestException.class);\n+    }\n+\n+    /**\n+     * Sets the {@linkplain Backoff#ofDefault() default backoff} and returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenBackoff() {\n+        return thenBackoff(Backoff.ofDefault());\n+    }\n+\n+    /**\n+     * Sets the specified {@link Backoff} and returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenBackoff(Backoff backoff) {\n+        requireNonNull(backoff, \"backoff\");\n+        return build(RetryRuleDecision.retry(backoff));\n+    }\n+\n+    /**\n+     * Sets a {@link Backoff} which limits the number of attempts up to the specified value and\n+     * never waits between attempts. Returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenImmediately(int maxAttempts) {\n+        checkArgument(maxAttempts > 0, \"maxAttempts: %s (expected: > 0)\", maxAttempts);\n+        final Backoff backOff = Backoff.withoutDelay().withMaxAttempts(maxAttempts);\n+        return build(RetryRuleDecision.retry(backOff));\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that never retries.\n+     */\n+    public RetryRule thenNoRetry() {\n+        return build(RetryRuleDecision.noRetry());\n+    }\n+\n+    private RetryRule build(RetryRuleDecision decision) {\n+        final Set<HttpMethod> methods = Sets.immutableEnumSet(this.methods);\n+        final Set<HttpStatusClass> statusClasses = Sets.immutableEnumSet(statusClassesBuilder.build());\n+        final Set<HttpStatus> statuses = statusesBuilder.build();\n+        final Predicate<HttpStatus> statusFilter = this.statusFilter;\n+        final Predicate<Throwable> exceptionFilter = this.exceptionFilter;\n+\n+        if (decision != RetryRuleDecision.noRetry() && exceptionFilter == null && statusFilter == null &&\n+            statuses.isEmpty() && statusClasses.isEmpty()) {\n+            throw new IllegalStateException(\n+                    \"Should set at least one of status, status class and an expected exception type \" +\n+                    \"if a backoff was set.\");\n+        }\n+\n+        return (ctx, cause) -> {\n+            if (!methods.contains(ctx.request().method())) {\n+                return NEXT;\n+            }\n+\n+            if (cause != null && exceptionFilter != null && exceptionFilter.test(Exceptions.peel(cause))) {\n+                return CompletableFuture.completedFuture(decision);\n+            }\n+\n+            if (ctx.log().isAvailable(RequestLogProperty.RESPONSE_HEADERS)) {\n+                final HttpStatus responseStatus = ctx.log().partial().responseHeaders().status();\n+                if (statusClasses != null && statusClasses.contains(responseStatus.codeClass())) {\n+                    return CompletableFuture.completedFuture(decision);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbe305f15310445337ce42e7bf6ad40ffb3219c1"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyMjY1OQ==", "bodyText": "Think you can move this out of the lambda instead of creating every time\n\nGood idea.\n\nCould also consider having a completed future created in the RetryRuleDecision constructor itself.\n\nI couldn't follow this review for a custom RetryRule. A user might want to lazily complete the decision to decide a rule.", "url": "https://github.com/line/armeria/pull/2661#discussion_r417122659", "createdAt": "2020-04-29T07:39:29Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleBuilder.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * A builder which creates a {@link RetryRule}.\n+ */\n+public final class RetryRuleBuilder {\n+\n+    private static final CompletableFuture<RetryRuleDecision> NEXT =\n+            CompletableFuture.completedFuture(RetryRuleDecision.next());\n+\n+    private static final Set<HttpMethod> IDEMPOTENT_METHODS =\n+            ImmutableSet.of(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.PUT, HttpMethod.DELETE);\n+\n+    private final ImmutableSet.Builder<HttpStatusClass> statusClassesBuilder = ImmutableSet.builder();\n+    private final ImmutableSet.Builder<HttpStatus> statusesBuilder = ImmutableSet.builder();\n+\n+    private Set<HttpMethod> methods = HttpMethod.knownMethods();\n+    private boolean isMethodsSet;\n+\n+    @Nullable\n+    private Predicate<HttpStatus> statusFilter;\n+    @Nullable\n+    private Predicate<Throwable> exceptionFilter;\n+\n+    RetryRuleBuilder() {}\n+\n+    /**\n+     * Adds the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * HTTP methods, which should not have any side-effects (except for keeping statistics),\n+     * for a {@link RetryRule} which will retry if the request HTTP method is idempotent.\n+     */\n+    public RetryRuleBuilder onIdempotentMethods() {\n+        return onMethods(IDEMPOTENT_METHODS);\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryRule} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryRuleBuilder onMethods(HttpMethod... methods) {\n+        return onMethods(ImmutableSet.copyOf(requireNonNull(methods, \"methods\")));\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryRule} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryRuleBuilder onMethods(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        checkArgument(!Iterables.isEmpty(methods), \"methods can't be empty\");\n+\n+        if (isMethodsSet) {\n+            Iterables.addAll(this.methods, methods);\n+        } else {\n+            this.methods = Sets.newEnumSet(methods, HttpMethod.class);\n+            isMethodsSet = true;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryRule} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryRuleBuilder onStatusClass(HttpStatusClass... statusClasses) {\n+        return onStatusClass(ImmutableSet.copyOf(requireNonNull(statusClasses, \"statusClasses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryRule} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryRuleBuilder onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        requireNonNull(statusClasses, \"statusClasses\");\n+        checkArgument(!Iterables.isEmpty(statusClasses), \"statusClasses can't be empty\");\n+\n+        statusClassesBuilder.addAll(statusClasses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the {@link HttpStatusClass#SERVER_ERROR} for a {@link RetryRule} which will retry\n+     * if the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    public RetryRuleBuilder onServerErrorStatus() {\n+        return onStatusClass(HttpStatusClass.SERVER_ERROR);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryRule} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryRuleBuilder onStatus(HttpStatus... statuses) {\n+        return onStatus(ImmutableSet.copyOf(requireNonNull(statuses, \"statuses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryRule} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryRuleBuilder onStatus(Iterable<HttpStatus> statuses) {\n+        requireNonNull(statuses, \"statuses\");\n+        checkArgument(!Iterables.isEmpty(statuses), \"statuses can't be empty\");\n+\n+        statusesBuilder.addAll(statuses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@code statusFilter} for a {@link RetryRule} which will retry\n+     * if the response status matches the specified {@code statusFilter}.\n+     */\n+    public RetryRuleBuilder onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        requireNonNull(statusFilter, \"statusFilter\");\n+        if (this.statusFilter != null) {\n+            this.statusFilter = this.statusFilter.or(statusFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<HttpStatus> cast = (Predicate<HttpStatus>) statusFilter;\n+            this.statusFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified exception type for a {@link RetryRule} which will retry\n+     * if an {@link Exception} is raised and that is instance of the specified {@code exception}.\n+     */\n+    public RetryRuleBuilder onException(Class<? extends Throwable> exception) {\n+        requireNonNull(exception, \"exception\");\n+        return onException(exception::isInstance);\n+    }\n+\n+    /**\n+     * Adds the specified {@code exceptionFilter} for a {@link RetryRule} which will retry\n+     * if an {@link Exception} is raised and the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    public RetryRuleBuilder onException(Predicate<? super Throwable> exceptionFilter) {\n+        requireNonNull(exceptionFilter, \"exceptionFilter\");\n+        if (this.exceptionFilter != null) {\n+            this.exceptionFilter = this.exceptionFilter.or(exceptionFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<Throwable> cast = (Predicate<Throwable>) exceptionFilter;\n+            this.exceptionFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Makes a {@link RetryRule} retry on any {@link Exception}.\n+     */\n+    public RetryRuleBuilder onException() {\n+        return onException(unused -> true);\n+    }\n+\n+    /**\n+     * Makes a {@link RetryRule} retry on an {@link UnprocessedRequestException} which means that the request\n+     * has not been processed by the server. Therefore, you can safely retry the request without worrying about\n+     * the idempotency of the request.\n+     */\n+    public RetryRuleBuilder onUnprocessed() {\n+        return onException(UnprocessedRequestException.class);\n+    }\n+\n+    /**\n+     * Sets the {@linkplain Backoff#ofDefault() default backoff} and returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenBackoff() {\n+        return thenBackoff(Backoff.ofDefault());\n+    }\n+\n+    /**\n+     * Sets the specified {@link Backoff} and returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenBackoff(Backoff backoff) {\n+        requireNonNull(backoff, \"backoff\");\n+        return build(RetryRuleDecision.retry(backoff));\n+    }\n+\n+    /**\n+     * Sets a {@link Backoff} which limits the number of attempts up to the specified value and\n+     * never waits between attempts. Returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenImmediately(int maxAttempts) {\n+        checkArgument(maxAttempts > 0, \"maxAttempts: %s (expected: > 0)\", maxAttempts);\n+        final Backoff backOff = Backoff.withoutDelay().withMaxAttempts(maxAttempts);\n+        return build(RetryRuleDecision.retry(backOff));\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that never retries.\n+     */\n+    public RetryRule thenNoRetry() {\n+        return build(RetryRuleDecision.noRetry());\n+    }\n+\n+    private RetryRule build(RetryRuleDecision decision) {\n+        final Set<HttpMethod> methods = Sets.immutableEnumSet(this.methods);\n+        final Set<HttpStatusClass> statusClasses = Sets.immutableEnumSet(statusClassesBuilder.build());\n+        final Set<HttpStatus> statuses = statusesBuilder.build();\n+        final Predicate<HttpStatus> statusFilter = this.statusFilter;\n+        final Predicate<Throwable> exceptionFilter = this.exceptionFilter;\n+\n+        if (decision != RetryRuleDecision.noRetry() && exceptionFilter == null && statusFilter == null &&\n+            statuses.isEmpty() && statusClasses.isEmpty()) {\n+            throw new IllegalStateException(\n+                    \"Should set at least one of status, status class and an expected exception type \" +\n+                    \"if a backoff was set.\");\n+        }\n+\n+        return (ctx, cause) -> {\n+            if (!methods.contains(ctx.request().method())) {\n+                return NEXT;\n+            }\n+\n+            if (cause != null && exceptionFilter != null && exceptionFilter.test(Exceptions.peel(cause))) {\n+                return CompletableFuture.completedFuture(decision);\n+            }\n+\n+            if (ctx.log().isAvailable(RequestLogProperty.RESPONSE_HEADERS)) {\n+                final HttpStatus responseStatus = ctx.log().partial().responseHeaders().status();\n+                if (statusClasses != null && statusClasses.contains(responseStatus.codeClass())) {\n+                    return CompletableFuture.completedFuture(decision);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5OTQ3Nw=="}, "originalCommit": {"oid": "fbe305f15310445337ce42e7bf6ad40ffb3219c1"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzMTQyNg==", "bodyText": "On seconds thought, I can add singleton CompletableFuture<RetryRuleDecision> for the default backoff.", "url": "https://github.com/line/armeria/pull/2661#discussion_r417131426", "createdAt": "2020-04-29T07:56:05Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleBuilder.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * A builder which creates a {@link RetryRule}.\n+ */\n+public final class RetryRuleBuilder {\n+\n+    private static final CompletableFuture<RetryRuleDecision> NEXT =\n+            CompletableFuture.completedFuture(RetryRuleDecision.next());\n+\n+    private static final Set<HttpMethod> IDEMPOTENT_METHODS =\n+            ImmutableSet.of(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.PUT, HttpMethod.DELETE);\n+\n+    private final ImmutableSet.Builder<HttpStatusClass> statusClassesBuilder = ImmutableSet.builder();\n+    private final ImmutableSet.Builder<HttpStatus> statusesBuilder = ImmutableSet.builder();\n+\n+    private Set<HttpMethod> methods = HttpMethod.knownMethods();\n+    private boolean isMethodsSet;\n+\n+    @Nullable\n+    private Predicate<HttpStatus> statusFilter;\n+    @Nullable\n+    private Predicate<Throwable> exceptionFilter;\n+\n+    RetryRuleBuilder() {}\n+\n+    /**\n+     * Adds the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * HTTP methods, which should not have any side-effects (except for keeping statistics),\n+     * for a {@link RetryRule} which will retry if the request HTTP method is idempotent.\n+     */\n+    public RetryRuleBuilder onIdempotentMethods() {\n+        return onMethods(IDEMPOTENT_METHODS);\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryRule} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryRuleBuilder onMethods(HttpMethod... methods) {\n+        return onMethods(ImmutableSet.copyOf(requireNonNull(methods, \"methods\")));\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryRule} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryRuleBuilder onMethods(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        checkArgument(!Iterables.isEmpty(methods), \"methods can't be empty\");\n+\n+        if (isMethodsSet) {\n+            Iterables.addAll(this.methods, methods);\n+        } else {\n+            this.methods = Sets.newEnumSet(methods, HttpMethod.class);\n+            isMethodsSet = true;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryRule} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryRuleBuilder onStatusClass(HttpStatusClass... statusClasses) {\n+        return onStatusClass(ImmutableSet.copyOf(requireNonNull(statusClasses, \"statusClasses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryRule} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryRuleBuilder onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        requireNonNull(statusClasses, \"statusClasses\");\n+        checkArgument(!Iterables.isEmpty(statusClasses), \"statusClasses can't be empty\");\n+\n+        statusClassesBuilder.addAll(statusClasses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the {@link HttpStatusClass#SERVER_ERROR} for a {@link RetryRule} which will retry\n+     * if the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    public RetryRuleBuilder onServerErrorStatus() {\n+        return onStatusClass(HttpStatusClass.SERVER_ERROR);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryRule} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryRuleBuilder onStatus(HttpStatus... statuses) {\n+        return onStatus(ImmutableSet.copyOf(requireNonNull(statuses, \"statuses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryRule} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryRuleBuilder onStatus(Iterable<HttpStatus> statuses) {\n+        requireNonNull(statuses, \"statuses\");\n+        checkArgument(!Iterables.isEmpty(statuses), \"statuses can't be empty\");\n+\n+        statusesBuilder.addAll(statuses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@code statusFilter} for a {@link RetryRule} which will retry\n+     * if the response status matches the specified {@code statusFilter}.\n+     */\n+    public RetryRuleBuilder onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        requireNonNull(statusFilter, \"statusFilter\");\n+        if (this.statusFilter != null) {\n+            this.statusFilter = this.statusFilter.or(statusFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<HttpStatus> cast = (Predicate<HttpStatus>) statusFilter;\n+            this.statusFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified exception type for a {@link RetryRule} which will retry\n+     * if an {@link Exception} is raised and that is instance of the specified {@code exception}.\n+     */\n+    public RetryRuleBuilder onException(Class<? extends Throwable> exception) {\n+        requireNonNull(exception, \"exception\");\n+        return onException(exception::isInstance);\n+    }\n+\n+    /**\n+     * Adds the specified {@code exceptionFilter} for a {@link RetryRule} which will retry\n+     * if an {@link Exception} is raised and the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    public RetryRuleBuilder onException(Predicate<? super Throwable> exceptionFilter) {\n+        requireNonNull(exceptionFilter, \"exceptionFilter\");\n+        if (this.exceptionFilter != null) {\n+            this.exceptionFilter = this.exceptionFilter.or(exceptionFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<Throwable> cast = (Predicate<Throwable>) exceptionFilter;\n+            this.exceptionFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Makes a {@link RetryRule} retry on any {@link Exception}.\n+     */\n+    public RetryRuleBuilder onException() {\n+        return onException(unused -> true);\n+    }\n+\n+    /**\n+     * Makes a {@link RetryRule} retry on an {@link UnprocessedRequestException} which means that the request\n+     * has not been processed by the server. Therefore, you can safely retry the request without worrying about\n+     * the idempotency of the request.\n+     */\n+    public RetryRuleBuilder onUnprocessed() {\n+        return onException(UnprocessedRequestException.class);\n+    }\n+\n+    /**\n+     * Sets the {@linkplain Backoff#ofDefault() default backoff} and returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenBackoff() {\n+        return thenBackoff(Backoff.ofDefault());\n+    }\n+\n+    /**\n+     * Sets the specified {@link Backoff} and returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenBackoff(Backoff backoff) {\n+        requireNonNull(backoff, \"backoff\");\n+        return build(RetryRuleDecision.retry(backoff));\n+    }\n+\n+    /**\n+     * Sets a {@link Backoff} which limits the number of attempts up to the specified value and\n+     * never waits between attempts. Returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenImmediately(int maxAttempts) {\n+        checkArgument(maxAttempts > 0, \"maxAttempts: %s (expected: > 0)\", maxAttempts);\n+        final Backoff backOff = Backoff.withoutDelay().withMaxAttempts(maxAttempts);\n+        return build(RetryRuleDecision.retry(backOff));\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that never retries.\n+     */\n+    public RetryRule thenNoRetry() {\n+        return build(RetryRuleDecision.noRetry());\n+    }\n+\n+    private RetryRule build(RetryRuleDecision decision) {\n+        final Set<HttpMethod> methods = Sets.immutableEnumSet(this.methods);\n+        final Set<HttpStatusClass> statusClasses = Sets.immutableEnumSet(statusClassesBuilder.build());\n+        final Set<HttpStatus> statuses = statusesBuilder.build();\n+        final Predicate<HttpStatus> statusFilter = this.statusFilter;\n+        final Predicate<Throwable> exceptionFilter = this.exceptionFilter;\n+\n+        if (decision != RetryRuleDecision.noRetry() && exceptionFilter == null && statusFilter == null &&\n+            statuses.isEmpty() && statusClasses.isEmpty()) {\n+            throw new IllegalStateException(\n+                    \"Should set at least one of status, status class and an expected exception type \" +\n+                    \"if a backoff was set.\");\n+        }\n+\n+        return (ctx, cause) -> {\n+            if (!methods.contains(ctx.request().method())) {\n+                return NEXT;\n+            }\n+\n+            if (cause != null && exceptionFilter != null && exceptionFilter.test(Exceptions.peel(cause))) {\n+                return CompletableFuture.completedFuture(decision);\n+            }\n+\n+            if (ctx.log().isAvailable(RequestLogProperty.RESPONSE_HEADERS)) {\n+                final HttpStatus responseStatus = ctx.log().partial().responseHeaders().status();\n+                if (statusClasses != null && statusClasses.contains(responseStatus.codeClass())) {\n+                    return CompletableFuture.completedFuture(decision);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5OTQ3Nw=="}, "originalCommit": {"oid": "fbe305f15310445337ce42e7bf6ad40ffb3219c1"}, "originalPosition": 261}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDA3MzMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleUtil.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwOTozNTozNVrOGP5EIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMzozODozNlrOGRDAvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMxNjc2OA==", "bodyText": "strategy.shouldRetry(ctx, req) could return null, so I think we should handle that.", "url": "https://github.com/line/armeria/pull/2661#discussion_r419316768", "createdAt": "2020-05-04T09:35:35Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleUtil.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+final class RetryRuleUtil {\n+\n+    static RetryStrategy toRetryStrategy(RetryRule rule) {\n+        return (ctx, cause) -> rule.shouldRetry(ctx, cause).thenApply(RetryRuleDecision::backoff);\n+    }\n+\n+    static RetryRule fromRetryStrategy(RetryStrategy strategy) {\n+        return (ctx, req) -> strategy.shouldRetry(ctx, req).thenApply(RetryRuleDecision::retry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20dcdbfcd30f5cded1dad1681047afb33b93a7a5"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1NjMyNg==", "bodyText": "RetryClient does not check null of the return value. So I thought RetryStrategy.shouldRetry(...) must not return null value.\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java\n    \n    \n        Lines 214 to 215\n      in\n      a9544c2\n    \n    \n    \n    \n\n        \n          \n           retryStrategyWithContent().shouldRetry(derivedCtx, contentPreviewResponse) \n        \n\n        \n          \n                                     .handle(handleBackoff(ctx, derivedCtx, rootReqDuplicator, \n        \n    \n  \n\n\nDo I need to update RetryClient too? \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2661#discussion_r419356326", "createdAt": "2020-05-04T10:58:04Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleUtil.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+final class RetryRuleUtil {\n+\n+    static RetryStrategy toRetryStrategy(RetryRule rule) {\n+        return (ctx, cause) -> rule.shouldRetry(ctx, cause).thenApply(RetryRuleDecision::backoff);\n+    }\n+\n+    static RetryRule fromRetryStrategy(RetryStrategy strategy) {\n+        return (ctx, req) -> strategy.shouldRetry(ctx, req).thenApply(RetryRuleDecision::retry);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMxNjc2OA=="}, "originalCommit": {"oid": "20dcdbfcd30f5cded1dad1681047afb33b93a7a5"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNjAzMA==", "bodyText": "What I meant was when the backoff is null: \n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java\n    \n    \n         Line 255\n      in\n      a9544c2\n    \n    \n    \n    \n\n        \n          \n           if (backoff != null) { \n        \n    \n  \n\n\nIf it's null, then NPE is raised here: https://github.com/line/armeria/pull/2661/files#diff-b84a9cb0a39bd7bd59e96e1a4e2b5c83R39\nRight?", "url": "https://github.com/line/armeria/pull/2661#discussion_r420506030", "createdAt": "2020-05-06T01:55:49Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleUtil.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+final class RetryRuleUtil {\n+\n+    static RetryStrategy toRetryStrategy(RetryRule rule) {\n+        return (ctx, cause) -> rule.shouldRetry(ctx, cause).thenApply(RetryRuleDecision::backoff);\n+    }\n+\n+    static RetryRule fromRetryStrategy(RetryStrategy strategy) {\n+        return (ctx, req) -> strategy.shouldRetry(ctx, req).thenApply(RetryRuleDecision::retry);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMxNjc2OA=="}, "originalCommit": {"oid": "20dcdbfcd30f5cded1dad1681047afb33b93a7a5"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUyODMxNw==", "bodyText": "I see. \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2661#discussion_r420528317", "createdAt": "2020-05-06T03:38:36Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleUtil.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+final class RetryRuleUtil {\n+\n+    static RetryStrategy toRetryStrategy(RetryRule rule) {\n+        return (ctx, cause) -> rule.shouldRetry(ctx, cause).thenApply(RetryRuleDecision::backoff);\n+    }\n+\n+    static RetryRule fromRetryStrategy(RetryStrategy strategy) {\n+        return (ctx, req) -> strategy.shouldRetry(ctx, req).thenApply(RetryRuleDecision::retry);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMxNjc2OA=="}, "originalCommit": {"oid": "20dcdbfcd30f5cded1dad1681047afb33b93a7a5"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDA3NTI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwOTozNjowOVrOGP5FYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwOTozNjowOVrOGP5FYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMxNzA4OA==", "bodyText": "We usually add .omitNullValues() right after toStringHelper(this).", "url": "https://github.com/line/armeria/pull/2661#discussion_r419317088", "createdAt": "2020-05-04T09:36:09Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleBuilder.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * A builder which creates a {@link RetryRule}.\n+ */\n+public final class RetryRuleBuilder {\n+\n+    private static final CompletableFuture<RetryRuleDecision> NEXT =\n+            CompletableFuture.completedFuture(RetryRuleDecision.next());\n+    private static final CompletableFuture<RetryRuleDecision> DEFAULT_DECISION =\n+           CompletableFuture.completedFuture(RetryRuleDecision.DEFAULT);\n+\n+    private static final Set<HttpMethod> IDEMPOTENT_METHODS =\n+            ImmutableSet.of(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.PUT, HttpMethod.DELETE);\n+\n+    private final ImmutableSet.Builder<HttpStatusClass> statusClassesBuilder = ImmutableSet.builder();\n+    private final ImmutableSet.Builder<HttpStatus> statusesBuilder = ImmutableSet.builder();\n+\n+    private Set<HttpMethod> methods = HttpMethod.knownMethods();\n+    private boolean isMethodsSet;\n+\n+    @Nullable\n+    private Predicate<HttpStatus> statusFilter;\n+    @Nullable\n+    private Predicate<Throwable> exceptionFilter;\n+\n+    RetryRuleBuilder() {}\n+\n+    /**\n+     * Adds the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * HTTP methods, which should not have any side-effects (except for keeping statistics),\n+     * for a {@link RetryRule} which will retry if the request HTTP method is idempotent.\n+     */\n+    public RetryRuleBuilder onIdempotentMethods() {\n+        return onMethods(IDEMPOTENT_METHODS);\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryRule} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryRuleBuilder onMethods(HttpMethod... methods) {\n+        return onMethods(ImmutableSet.copyOf(requireNonNull(methods, \"methods\")));\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryRule} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryRuleBuilder onMethods(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        checkArgument(!Iterables.isEmpty(methods), \"methods can't be empty\");\n+\n+        if (isMethodsSet) {\n+            Iterables.addAll(this.methods, methods);\n+        } else {\n+            this.methods = Sets.newEnumSet(methods, HttpMethod.class);\n+            isMethodsSet = true;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryRule} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryRuleBuilder onStatusClass(HttpStatusClass... statusClasses) {\n+        return onStatusClass(ImmutableSet.copyOf(requireNonNull(statusClasses, \"statusClasses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryRule} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryRuleBuilder onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        requireNonNull(statusClasses, \"statusClasses\");\n+        checkArgument(!Iterables.isEmpty(statusClasses), \"statusClasses can't be empty\");\n+\n+        statusClassesBuilder.addAll(statusClasses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the {@link HttpStatusClass#SERVER_ERROR} for a {@link RetryRule} which will retry\n+     * if the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    public RetryRuleBuilder onServerErrorStatus() {\n+        return onStatusClass(HttpStatusClass.SERVER_ERROR);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryRule} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryRuleBuilder onStatus(HttpStatus... statuses) {\n+        return onStatus(ImmutableSet.copyOf(requireNonNull(statuses, \"statuses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryRule} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryRuleBuilder onStatus(Iterable<HttpStatus> statuses) {\n+        requireNonNull(statuses, \"statuses\");\n+        checkArgument(!Iterables.isEmpty(statuses), \"statuses can't be empty\");\n+\n+        statusesBuilder.addAll(statuses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@code statusFilter} for a {@link RetryRule} which will retry\n+     * if the response status matches the specified {@code statusFilter}.\n+     */\n+    public RetryRuleBuilder onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        requireNonNull(statusFilter, \"statusFilter\");\n+        if (this.statusFilter != null) {\n+            this.statusFilter = this.statusFilter.or(statusFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<HttpStatus> cast = (Predicate<HttpStatus>) statusFilter;\n+            this.statusFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified exception type for a {@link RetryRule} which will retry\n+     * if an {@link Exception} is raised and that is instance of the specified {@code exception}.\n+     */\n+    public RetryRuleBuilder onException(Class<? extends Throwable> exception) {\n+        requireNonNull(exception, \"exception\");\n+        return onException(exception::isInstance);\n+    }\n+\n+    /**\n+     * Adds the specified {@code exceptionFilter} for a {@link RetryRule} which will retry\n+     * if an {@link Exception} is raised and the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    public RetryRuleBuilder onException(Predicate<? super Throwable> exceptionFilter) {\n+        requireNonNull(exceptionFilter, \"exceptionFilter\");\n+        if (this.exceptionFilter != null) {\n+            this.exceptionFilter = this.exceptionFilter.or(exceptionFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<Throwable> cast = (Predicate<Throwable>) exceptionFilter;\n+            this.exceptionFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Makes a {@link RetryRule} retry on any {@link Exception}.\n+     */\n+    public RetryRuleBuilder onException() {\n+        return onException(unused -> true);\n+    }\n+\n+    /**\n+     * Makes a {@link RetryRule} retry on an {@link UnprocessedRequestException} which means that the request\n+     * has not been processed by the server. Therefore, you can safely retry the request without worrying about\n+     * the idempotency of the request.\n+     */\n+    public RetryRuleBuilder onUnprocessed() {\n+        return onException(UnprocessedRequestException.class);\n+    }\n+\n+    /**\n+     * Sets the {@linkplain Backoff#ofDefault() default backoff} and returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenBackoff() {\n+        return thenBackoff(Backoff.ofDefault());\n+    }\n+\n+    /**\n+     * Sets the specified {@link Backoff} and returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenBackoff(Backoff backoff) {\n+        requireNonNull(backoff, \"backoff\");\n+        return build(RetryRuleDecision.retry(backoff));\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that never retries.\n+     */\n+    public RetryRule thenNoRetry() {\n+        return build(RetryRuleDecision.noRetry());\n+    }\n+\n+    private RetryRule build(RetryRuleDecision decision) {\n+        final Set<HttpMethod> methods = Sets.immutableEnumSet(this.methods);\n+        final Set<HttpStatusClass> statusClasses = Sets.immutableEnumSet(statusClassesBuilder.build());\n+        final Set<HttpStatus> statuses = statusesBuilder.build();\n+        final Predicate<HttpStatus> statusFilter = this.statusFilter;\n+        final Predicate<Throwable> exceptionFilter = this.exceptionFilter;\n+\n+        if (decision != RetryRuleDecision.noRetry() && exceptionFilter == null && statusFilter == null &&\n+            statuses.isEmpty() && statusClasses.isEmpty()) {\n+            throw new IllegalStateException(\n+                    \"Should set at least one of status, status class and an expected exception type \" +\n+                    \"if a backoff was set.\");\n+        }\n+        final CompletableFuture<RetryRuleDecision> decisionFuture;\n+        if (decision == RetryRuleDecision.DEFAULT) {\n+           decisionFuture = DEFAULT_DECISION;\n+        } else {\n+            decisionFuture = CompletableFuture.completedFuture(decision);\n+        }\n+        return (ctx, cause) -> {\n+            if (!methods.contains(ctx.request().method())) {\n+                return NEXT;\n+            }\n+\n+            if (cause != null && exceptionFilter != null && exceptionFilter.test(Exceptions.peel(cause))) {\n+                return decisionFuture;\n+            }\n+\n+            if (ctx.log().isAvailable(RequestLogProperty.RESPONSE_HEADERS)) {\n+                final HttpStatus responseStatus = ctx.log().partial().responseHeaders().status();\n+                if (statusClasses != null && statusClasses.contains(responseStatus.codeClass())) {\n+                    return decisionFuture;\n+                }\n+\n+                if ((statuses != null && statuses.contains(responseStatus)) ||\n+                    (statusFilter != null && statusFilter.test(responseStatus))) {\n+                    return decisionFuture;\n+                }\n+            }\n+\n+            return NEXT;\n+        };\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return MoreObjects.toStringHelper(this)\n+                .add(\"statusClasses\", statusClassesBuilder.build())\n+                .add(\"statuses\", statusesBuilder.build())\n+                .add(\"methods\", methods)\n+                .add(\"statusFilter\", statusFilter)\n+                .add(\"exceptionFilter\", exceptionFilter)\n+                .omitNullValues()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20dcdbfcd30f5cded1dad1681047afb33b93a7a5"}, "originalPosition": 279}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDA3NTU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwOTozNjoxNlrOGP5FjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMTo0OTozMVrOGRBj4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMxNzEzMw==", "bodyText": "nit: indentation?", "url": "https://github.com/line/armeria/pull/2661#discussion_r419317133", "createdAt": "2020-05-04T09:36:16Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleBuilder.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * A builder which creates a {@link RetryRule}.\n+ */\n+public final class RetryRuleBuilder {\n+\n+    private static final CompletableFuture<RetryRuleDecision> NEXT =\n+            CompletableFuture.completedFuture(RetryRuleDecision.next());\n+    private static final CompletableFuture<RetryRuleDecision> DEFAULT_DECISION =\n+           CompletableFuture.completedFuture(RetryRuleDecision.DEFAULT);\n+\n+    private static final Set<HttpMethod> IDEMPOTENT_METHODS =\n+            ImmutableSet.of(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.PUT, HttpMethod.DELETE);\n+\n+    private final ImmutableSet.Builder<HttpStatusClass> statusClassesBuilder = ImmutableSet.builder();\n+    private final ImmutableSet.Builder<HttpStatus> statusesBuilder = ImmutableSet.builder();\n+\n+    private Set<HttpMethod> methods = HttpMethod.knownMethods();\n+    private boolean isMethodsSet;\n+\n+    @Nullable\n+    private Predicate<HttpStatus> statusFilter;\n+    @Nullable\n+    private Predicate<Throwable> exceptionFilter;\n+\n+    RetryRuleBuilder() {}\n+\n+    /**\n+     * Adds the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * HTTP methods, which should not have any side-effects (except for keeping statistics),\n+     * for a {@link RetryRule} which will retry if the request HTTP method is idempotent.\n+     */\n+    public RetryRuleBuilder onIdempotentMethods() {\n+        return onMethods(IDEMPOTENT_METHODS);\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryRule} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryRuleBuilder onMethods(HttpMethod... methods) {\n+        return onMethods(ImmutableSet.copyOf(requireNonNull(methods, \"methods\")));\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryRule} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryRuleBuilder onMethods(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        checkArgument(!Iterables.isEmpty(methods), \"methods can't be empty\");\n+\n+        if (isMethodsSet) {\n+            Iterables.addAll(this.methods, methods);\n+        } else {\n+            this.methods = Sets.newEnumSet(methods, HttpMethod.class);\n+            isMethodsSet = true;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryRule} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryRuleBuilder onStatusClass(HttpStatusClass... statusClasses) {\n+        return onStatusClass(ImmutableSet.copyOf(requireNonNull(statusClasses, \"statusClasses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryRule} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryRuleBuilder onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        requireNonNull(statusClasses, \"statusClasses\");\n+        checkArgument(!Iterables.isEmpty(statusClasses), \"statusClasses can't be empty\");\n+\n+        statusClassesBuilder.addAll(statusClasses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the {@link HttpStatusClass#SERVER_ERROR} for a {@link RetryRule} which will retry\n+     * if the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    public RetryRuleBuilder onServerErrorStatus() {\n+        return onStatusClass(HttpStatusClass.SERVER_ERROR);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryRule} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryRuleBuilder onStatus(HttpStatus... statuses) {\n+        return onStatus(ImmutableSet.copyOf(requireNonNull(statuses, \"statuses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryRule} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryRuleBuilder onStatus(Iterable<HttpStatus> statuses) {\n+        requireNonNull(statuses, \"statuses\");\n+        checkArgument(!Iterables.isEmpty(statuses), \"statuses can't be empty\");\n+\n+        statusesBuilder.addAll(statuses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@code statusFilter} for a {@link RetryRule} which will retry\n+     * if the response status matches the specified {@code statusFilter}.\n+     */\n+    public RetryRuleBuilder onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        requireNonNull(statusFilter, \"statusFilter\");\n+        if (this.statusFilter != null) {\n+            this.statusFilter = this.statusFilter.or(statusFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<HttpStatus> cast = (Predicate<HttpStatus>) statusFilter;\n+            this.statusFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified exception type for a {@link RetryRule} which will retry\n+     * if an {@link Exception} is raised and that is instance of the specified {@code exception}.\n+     */\n+    public RetryRuleBuilder onException(Class<? extends Throwable> exception) {\n+        requireNonNull(exception, \"exception\");\n+        return onException(exception::isInstance);\n+    }\n+\n+    /**\n+     * Adds the specified {@code exceptionFilter} for a {@link RetryRule} which will retry\n+     * if an {@link Exception} is raised and the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    public RetryRuleBuilder onException(Predicate<? super Throwable> exceptionFilter) {\n+        requireNonNull(exceptionFilter, \"exceptionFilter\");\n+        if (this.exceptionFilter != null) {\n+            this.exceptionFilter = this.exceptionFilter.or(exceptionFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<Throwable> cast = (Predicate<Throwable>) exceptionFilter;\n+            this.exceptionFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Makes a {@link RetryRule} retry on any {@link Exception}.\n+     */\n+    public RetryRuleBuilder onException() {\n+        return onException(unused -> true);\n+    }\n+\n+    /**\n+     * Makes a {@link RetryRule} retry on an {@link UnprocessedRequestException} which means that the request\n+     * has not been processed by the server. Therefore, you can safely retry the request without worrying about\n+     * the idempotency of the request.\n+     */\n+    public RetryRuleBuilder onUnprocessed() {\n+        return onException(UnprocessedRequestException.class);\n+    }\n+\n+    /**\n+     * Sets the {@linkplain Backoff#ofDefault() default backoff} and returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenBackoff() {\n+        return thenBackoff(Backoff.ofDefault());\n+    }\n+\n+    /**\n+     * Sets the specified {@link Backoff} and returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenBackoff(Backoff backoff) {\n+        requireNonNull(backoff, \"backoff\");\n+        return build(RetryRuleDecision.retry(backoff));\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that never retries.\n+     */\n+    public RetryRule thenNoRetry() {\n+        return build(RetryRuleDecision.noRetry());\n+    }\n+\n+    private RetryRule build(RetryRuleDecision decision) {\n+        final Set<HttpMethod> methods = Sets.immutableEnumSet(this.methods);\n+        final Set<HttpStatusClass> statusClasses = Sets.immutableEnumSet(statusClassesBuilder.build());\n+        final Set<HttpStatus> statuses = statusesBuilder.build();\n+        final Predicate<HttpStatus> statusFilter = this.statusFilter;\n+        final Predicate<Throwable> exceptionFilter = this.exceptionFilter;\n+\n+        if (decision != RetryRuleDecision.noRetry() && exceptionFilter == null && statusFilter == null &&\n+            statuses.isEmpty() && statusClasses.isEmpty()) {\n+            throw new IllegalStateException(\n+                    \"Should set at least one of status, status class and an expected exception type \" +\n+                    \"if a backoff was set.\");\n+        }\n+        final CompletableFuture<RetryRuleDecision> decisionFuture;\n+        if (decision == RetryRuleDecision.DEFAULT) {\n+           decisionFuture = DEFAULT_DECISION;\n+        } else {\n+            decisionFuture = CompletableFuture.completedFuture(decision);\n+        }\n+        return (ctx, cause) -> {\n+            if (!methods.contains(ctx.request().method())) {\n+                return NEXT;\n+            }\n+\n+            if (cause != null && exceptionFilter != null && exceptionFilter.test(Exceptions.peel(cause))) {\n+                return decisionFuture;\n+            }\n+\n+            if (ctx.log().isAvailable(RequestLogProperty.RESPONSE_HEADERS)) {\n+                final HttpStatus responseStatus = ctx.log().partial().responseHeaders().status();\n+                if (statusClasses != null && statusClasses.contains(responseStatus.codeClass())) {\n+                    return decisionFuture;\n+                }\n+\n+                if ((statuses != null && statuses.contains(responseStatus)) ||\n+                    (statusFilter != null && statusFilter.test(responseStatus))) {\n+                    return decisionFuture;\n+                }\n+            }\n+\n+            return NEXT;\n+        };\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return MoreObjects.toStringHelper(this)\n+                .add(\"statusClasses\", statusClassesBuilder.build())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20dcdbfcd30f5cded1dad1681047afb33b93a7a5"}, "originalPosition": 274}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNDU0NQ==", "bodyText": "Fixed. Chaining methods are not aligned vertically in IntelliJ IDEA 2020.1. \ud83d\ude2d", "url": "https://github.com/line/armeria/pull/2661#discussion_r420504545", "createdAt": "2020-05-06T01:49:31Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleBuilder.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * A builder which creates a {@link RetryRule}.\n+ */\n+public final class RetryRuleBuilder {\n+\n+    private static final CompletableFuture<RetryRuleDecision> NEXT =\n+            CompletableFuture.completedFuture(RetryRuleDecision.next());\n+    private static final CompletableFuture<RetryRuleDecision> DEFAULT_DECISION =\n+           CompletableFuture.completedFuture(RetryRuleDecision.DEFAULT);\n+\n+    private static final Set<HttpMethod> IDEMPOTENT_METHODS =\n+            ImmutableSet.of(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.PUT, HttpMethod.DELETE);\n+\n+    private final ImmutableSet.Builder<HttpStatusClass> statusClassesBuilder = ImmutableSet.builder();\n+    private final ImmutableSet.Builder<HttpStatus> statusesBuilder = ImmutableSet.builder();\n+\n+    private Set<HttpMethod> methods = HttpMethod.knownMethods();\n+    private boolean isMethodsSet;\n+\n+    @Nullable\n+    private Predicate<HttpStatus> statusFilter;\n+    @Nullable\n+    private Predicate<Throwable> exceptionFilter;\n+\n+    RetryRuleBuilder() {}\n+\n+    /**\n+     * Adds the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * HTTP methods, which should not have any side-effects (except for keeping statistics),\n+     * for a {@link RetryRule} which will retry if the request HTTP method is idempotent.\n+     */\n+    public RetryRuleBuilder onIdempotentMethods() {\n+        return onMethods(IDEMPOTENT_METHODS);\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryRule} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryRuleBuilder onMethods(HttpMethod... methods) {\n+        return onMethods(ImmutableSet.copyOf(requireNonNull(methods, \"methods\")));\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryRule} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryRuleBuilder onMethods(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        checkArgument(!Iterables.isEmpty(methods), \"methods can't be empty\");\n+\n+        if (isMethodsSet) {\n+            Iterables.addAll(this.methods, methods);\n+        } else {\n+            this.methods = Sets.newEnumSet(methods, HttpMethod.class);\n+            isMethodsSet = true;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryRule} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryRuleBuilder onStatusClass(HttpStatusClass... statusClasses) {\n+        return onStatusClass(ImmutableSet.copyOf(requireNonNull(statusClasses, \"statusClasses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryRule} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryRuleBuilder onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        requireNonNull(statusClasses, \"statusClasses\");\n+        checkArgument(!Iterables.isEmpty(statusClasses), \"statusClasses can't be empty\");\n+\n+        statusClassesBuilder.addAll(statusClasses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the {@link HttpStatusClass#SERVER_ERROR} for a {@link RetryRule} which will retry\n+     * if the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    public RetryRuleBuilder onServerErrorStatus() {\n+        return onStatusClass(HttpStatusClass.SERVER_ERROR);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryRule} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryRuleBuilder onStatus(HttpStatus... statuses) {\n+        return onStatus(ImmutableSet.copyOf(requireNonNull(statuses, \"statuses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryRule} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryRuleBuilder onStatus(Iterable<HttpStatus> statuses) {\n+        requireNonNull(statuses, \"statuses\");\n+        checkArgument(!Iterables.isEmpty(statuses), \"statuses can't be empty\");\n+\n+        statusesBuilder.addAll(statuses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@code statusFilter} for a {@link RetryRule} which will retry\n+     * if the response status matches the specified {@code statusFilter}.\n+     */\n+    public RetryRuleBuilder onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        requireNonNull(statusFilter, \"statusFilter\");\n+        if (this.statusFilter != null) {\n+            this.statusFilter = this.statusFilter.or(statusFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<HttpStatus> cast = (Predicate<HttpStatus>) statusFilter;\n+            this.statusFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified exception type for a {@link RetryRule} which will retry\n+     * if an {@link Exception} is raised and that is instance of the specified {@code exception}.\n+     */\n+    public RetryRuleBuilder onException(Class<? extends Throwable> exception) {\n+        requireNonNull(exception, \"exception\");\n+        return onException(exception::isInstance);\n+    }\n+\n+    /**\n+     * Adds the specified {@code exceptionFilter} for a {@link RetryRule} which will retry\n+     * if an {@link Exception} is raised and the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    public RetryRuleBuilder onException(Predicate<? super Throwable> exceptionFilter) {\n+        requireNonNull(exceptionFilter, \"exceptionFilter\");\n+        if (this.exceptionFilter != null) {\n+            this.exceptionFilter = this.exceptionFilter.or(exceptionFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<Throwable> cast = (Predicate<Throwable>) exceptionFilter;\n+            this.exceptionFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Makes a {@link RetryRule} retry on any {@link Exception}.\n+     */\n+    public RetryRuleBuilder onException() {\n+        return onException(unused -> true);\n+    }\n+\n+    /**\n+     * Makes a {@link RetryRule} retry on an {@link UnprocessedRequestException} which means that the request\n+     * has not been processed by the server. Therefore, you can safely retry the request without worrying about\n+     * the idempotency of the request.\n+     */\n+    public RetryRuleBuilder onUnprocessed() {\n+        return onException(UnprocessedRequestException.class);\n+    }\n+\n+    /**\n+     * Sets the {@linkplain Backoff#ofDefault() default backoff} and returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenBackoff() {\n+        return thenBackoff(Backoff.ofDefault());\n+    }\n+\n+    /**\n+     * Sets the specified {@link Backoff} and returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenBackoff(Backoff backoff) {\n+        requireNonNull(backoff, \"backoff\");\n+        return build(RetryRuleDecision.retry(backoff));\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that never retries.\n+     */\n+    public RetryRule thenNoRetry() {\n+        return build(RetryRuleDecision.noRetry());\n+    }\n+\n+    private RetryRule build(RetryRuleDecision decision) {\n+        final Set<HttpMethod> methods = Sets.immutableEnumSet(this.methods);\n+        final Set<HttpStatusClass> statusClasses = Sets.immutableEnumSet(statusClassesBuilder.build());\n+        final Set<HttpStatus> statuses = statusesBuilder.build();\n+        final Predicate<HttpStatus> statusFilter = this.statusFilter;\n+        final Predicate<Throwable> exceptionFilter = this.exceptionFilter;\n+\n+        if (decision != RetryRuleDecision.noRetry() && exceptionFilter == null && statusFilter == null &&\n+            statuses.isEmpty() && statusClasses.isEmpty()) {\n+            throw new IllegalStateException(\n+                    \"Should set at least one of status, status class and an expected exception type \" +\n+                    \"if a backoff was set.\");\n+        }\n+        final CompletableFuture<RetryRuleDecision> decisionFuture;\n+        if (decision == RetryRuleDecision.DEFAULT) {\n+           decisionFuture = DEFAULT_DECISION;\n+        } else {\n+            decisionFuture = CompletableFuture.completedFuture(decision);\n+        }\n+        return (ctx, cause) -> {\n+            if (!methods.contains(ctx.request().method())) {\n+                return NEXT;\n+            }\n+\n+            if (cause != null && exceptionFilter != null && exceptionFilter.test(Exceptions.peel(cause))) {\n+                return decisionFuture;\n+            }\n+\n+            if (ctx.log().isAvailable(RequestLogProperty.RESPONSE_HEADERS)) {\n+                final HttpStatus responseStatus = ctx.log().partial().responseHeaders().status();\n+                if (statusClasses != null && statusClasses.contains(responseStatus.codeClass())) {\n+                    return decisionFuture;\n+                }\n+\n+                if ((statuses != null && statuses.contains(responseStatus)) ||\n+                    (statusFilter != null && statusFilter.test(responseStatus))) {\n+                    return decisionFuture;\n+                }\n+            }\n+\n+            return NEXT;\n+        };\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return MoreObjects.toStringHelper(this)\n+                .add(\"statusClasses\", statusClassesBuilder.build())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMxNzEzMw=="}, "originalCommit": {"oid": "20dcdbfcd30f5cded1dad1681047afb33b93a7a5"}, "originalPosition": 274}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDA4MzM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwOTozODozMVrOGP5KWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMDowNjo1MFrOGP6Cpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMxODM2Mg==", "bodyText": "Perhaps thenDefaultBackoff?", "url": "https://github.com/line/armeria/pull/2661#discussion_r419318362", "createdAt": "2020-05-04T09:38:31Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleBuilder.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * A builder which creates a {@link RetryRule}.\n+ */\n+public final class RetryRuleBuilder {\n+\n+    private static final CompletableFuture<RetryRuleDecision> NEXT =\n+            CompletableFuture.completedFuture(RetryRuleDecision.next());\n+    private static final CompletableFuture<RetryRuleDecision> DEFAULT_DECISION =\n+           CompletableFuture.completedFuture(RetryRuleDecision.DEFAULT);\n+\n+    private static final Set<HttpMethod> IDEMPOTENT_METHODS =\n+            ImmutableSet.of(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.PUT, HttpMethod.DELETE);\n+\n+    private final ImmutableSet.Builder<HttpStatusClass> statusClassesBuilder = ImmutableSet.builder();\n+    private final ImmutableSet.Builder<HttpStatus> statusesBuilder = ImmutableSet.builder();\n+\n+    private Set<HttpMethod> methods = HttpMethod.knownMethods();\n+    private boolean isMethodsSet;\n+\n+    @Nullable\n+    private Predicate<HttpStatus> statusFilter;\n+    @Nullable\n+    private Predicate<Throwable> exceptionFilter;\n+\n+    RetryRuleBuilder() {}\n+\n+    /**\n+     * Adds the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * HTTP methods, which should not have any side-effects (except for keeping statistics),\n+     * for a {@link RetryRule} which will retry if the request HTTP method is idempotent.\n+     */\n+    public RetryRuleBuilder onIdempotentMethods() {\n+        return onMethods(IDEMPOTENT_METHODS);\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryRule} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryRuleBuilder onMethods(HttpMethod... methods) {\n+        return onMethods(ImmutableSet.copyOf(requireNonNull(methods, \"methods\")));\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryRule} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryRuleBuilder onMethods(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        checkArgument(!Iterables.isEmpty(methods), \"methods can't be empty\");\n+\n+        if (isMethodsSet) {\n+            Iterables.addAll(this.methods, methods);\n+        } else {\n+            this.methods = Sets.newEnumSet(methods, HttpMethod.class);\n+            isMethodsSet = true;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryRule} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryRuleBuilder onStatusClass(HttpStatusClass... statusClasses) {\n+        return onStatusClass(ImmutableSet.copyOf(requireNonNull(statusClasses, \"statusClasses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryRule} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryRuleBuilder onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        requireNonNull(statusClasses, \"statusClasses\");\n+        checkArgument(!Iterables.isEmpty(statusClasses), \"statusClasses can't be empty\");\n+\n+        statusClassesBuilder.addAll(statusClasses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the {@link HttpStatusClass#SERVER_ERROR} for a {@link RetryRule} which will retry\n+     * if the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    public RetryRuleBuilder onServerErrorStatus() {\n+        return onStatusClass(HttpStatusClass.SERVER_ERROR);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryRule} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryRuleBuilder onStatus(HttpStatus... statuses) {\n+        return onStatus(ImmutableSet.copyOf(requireNonNull(statuses, \"statuses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryRule} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryRuleBuilder onStatus(Iterable<HttpStatus> statuses) {\n+        requireNonNull(statuses, \"statuses\");\n+        checkArgument(!Iterables.isEmpty(statuses), \"statuses can't be empty\");\n+\n+        statusesBuilder.addAll(statuses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@code statusFilter} for a {@link RetryRule} which will retry\n+     * if the response status matches the specified {@code statusFilter}.\n+     */\n+    public RetryRuleBuilder onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        requireNonNull(statusFilter, \"statusFilter\");\n+        if (this.statusFilter != null) {\n+            this.statusFilter = this.statusFilter.or(statusFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<HttpStatus> cast = (Predicate<HttpStatus>) statusFilter;\n+            this.statusFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified exception type for a {@link RetryRule} which will retry\n+     * if an {@link Exception} is raised and that is instance of the specified {@code exception}.\n+     */\n+    public RetryRuleBuilder onException(Class<? extends Throwable> exception) {\n+        requireNonNull(exception, \"exception\");\n+        return onException(exception::isInstance);\n+    }\n+\n+    /**\n+     * Adds the specified {@code exceptionFilter} for a {@link RetryRule} which will retry\n+     * if an {@link Exception} is raised and the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    public RetryRuleBuilder onException(Predicate<? super Throwable> exceptionFilter) {\n+        requireNonNull(exceptionFilter, \"exceptionFilter\");\n+        if (this.exceptionFilter != null) {\n+            this.exceptionFilter = this.exceptionFilter.or(exceptionFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<Throwable> cast = (Predicate<Throwable>) exceptionFilter;\n+            this.exceptionFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Makes a {@link RetryRule} retry on any {@link Exception}.\n+     */\n+    public RetryRuleBuilder onException() {\n+        return onException(unused -> true);\n+    }\n+\n+    /**\n+     * Makes a {@link RetryRule} retry on an {@link UnprocessedRequestException} which means that the request\n+     * has not been processed by the server. Therefore, you can safely retry the request without worrying about\n+     * the idempotency of the request.\n+     */\n+    public RetryRuleBuilder onUnprocessed() {\n+        return onException(UnprocessedRequestException.class);\n+    }\n+\n+    /**\n+     * Sets the {@linkplain Backoff#ofDefault() default backoff} and returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenBackoff() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20dcdbfcd30f5cded1dad1681047afb33b93a7a5"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMzMDkzMA==", "bodyText": "It was thenDefaultBackoff() originally. but changed here #2661 (comment)", "url": "https://github.com/line/armeria/pull/2661#discussion_r419330930", "createdAt": "2020-05-04T10:02:59Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleBuilder.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * A builder which creates a {@link RetryRule}.\n+ */\n+public final class RetryRuleBuilder {\n+\n+    private static final CompletableFuture<RetryRuleDecision> NEXT =\n+            CompletableFuture.completedFuture(RetryRuleDecision.next());\n+    private static final CompletableFuture<RetryRuleDecision> DEFAULT_DECISION =\n+           CompletableFuture.completedFuture(RetryRuleDecision.DEFAULT);\n+\n+    private static final Set<HttpMethod> IDEMPOTENT_METHODS =\n+            ImmutableSet.of(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.PUT, HttpMethod.DELETE);\n+\n+    private final ImmutableSet.Builder<HttpStatusClass> statusClassesBuilder = ImmutableSet.builder();\n+    private final ImmutableSet.Builder<HttpStatus> statusesBuilder = ImmutableSet.builder();\n+\n+    private Set<HttpMethod> methods = HttpMethod.knownMethods();\n+    private boolean isMethodsSet;\n+\n+    @Nullable\n+    private Predicate<HttpStatus> statusFilter;\n+    @Nullable\n+    private Predicate<Throwable> exceptionFilter;\n+\n+    RetryRuleBuilder() {}\n+\n+    /**\n+     * Adds the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * HTTP methods, which should not have any side-effects (except for keeping statistics),\n+     * for a {@link RetryRule} which will retry if the request HTTP method is idempotent.\n+     */\n+    public RetryRuleBuilder onIdempotentMethods() {\n+        return onMethods(IDEMPOTENT_METHODS);\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryRule} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryRuleBuilder onMethods(HttpMethod... methods) {\n+        return onMethods(ImmutableSet.copyOf(requireNonNull(methods, \"methods\")));\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryRule} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryRuleBuilder onMethods(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        checkArgument(!Iterables.isEmpty(methods), \"methods can't be empty\");\n+\n+        if (isMethodsSet) {\n+            Iterables.addAll(this.methods, methods);\n+        } else {\n+            this.methods = Sets.newEnumSet(methods, HttpMethod.class);\n+            isMethodsSet = true;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryRule} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryRuleBuilder onStatusClass(HttpStatusClass... statusClasses) {\n+        return onStatusClass(ImmutableSet.copyOf(requireNonNull(statusClasses, \"statusClasses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryRule} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryRuleBuilder onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        requireNonNull(statusClasses, \"statusClasses\");\n+        checkArgument(!Iterables.isEmpty(statusClasses), \"statusClasses can't be empty\");\n+\n+        statusClassesBuilder.addAll(statusClasses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the {@link HttpStatusClass#SERVER_ERROR} for a {@link RetryRule} which will retry\n+     * if the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    public RetryRuleBuilder onServerErrorStatus() {\n+        return onStatusClass(HttpStatusClass.SERVER_ERROR);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryRule} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryRuleBuilder onStatus(HttpStatus... statuses) {\n+        return onStatus(ImmutableSet.copyOf(requireNonNull(statuses, \"statuses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryRule} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryRuleBuilder onStatus(Iterable<HttpStatus> statuses) {\n+        requireNonNull(statuses, \"statuses\");\n+        checkArgument(!Iterables.isEmpty(statuses), \"statuses can't be empty\");\n+\n+        statusesBuilder.addAll(statuses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@code statusFilter} for a {@link RetryRule} which will retry\n+     * if the response status matches the specified {@code statusFilter}.\n+     */\n+    public RetryRuleBuilder onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        requireNonNull(statusFilter, \"statusFilter\");\n+        if (this.statusFilter != null) {\n+            this.statusFilter = this.statusFilter.or(statusFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<HttpStatus> cast = (Predicate<HttpStatus>) statusFilter;\n+            this.statusFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified exception type for a {@link RetryRule} which will retry\n+     * if an {@link Exception} is raised and that is instance of the specified {@code exception}.\n+     */\n+    public RetryRuleBuilder onException(Class<? extends Throwable> exception) {\n+        requireNonNull(exception, \"exception\");\n+        return onException(exception::isInstance);\n+    }\n+\n+    /**\n+     * Adds the specified {@code exceptionFilter} for a {@link RetryRule} which will retry\n+     * if an {@link Exception} is raised and the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    public RetryRuleBuilder onException(Predicate<? super Throwable> exceptionFilter) {\n+        requireNonNull(exceptionFilter, \"exceptionFilter\");\n+        if (this.exceptionFilter != null) {\n+            this.exceptionFilter = this.exceptionFilter.or(exceptionFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<Throwable> cast = (Predicate<Throwable>) exceptionFilter;\n+            this.exceptionFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Makes a {@link RetryRule} retry on any {@link Exception}.\n+     */\n+    public RetryRuleBuilder onException() {\n+        return onException(unused -> true);\n+    }\n+\n+    /**\n+     * Makes a {@link RetryRule} retry on an {@link UnprocessedRequestException} which means that the request\n+     * has not been processed by the server. Therefore, you can safely retry the request without worrying about\n+     * the idempotency of the request.\n+     */\n+    public RetryRuleBuilder onUnprocessed() {\n+        return onException(UnprocessedRequestException.class);\n+    }\n+\n+    /**\n+     * Sets the {@linkplain Backoff#ofDefault() default backoff} and returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenBackoff() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMxODM2Mg=="}, "originalCommit": {"oid": "20dcdbfcd30f5cded1dad1681047afb33b93a7a5"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMzMjc3NA==", "bodyText": "Oh I missed that. \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2661#discussion_r419332774", "createdAt": "2020-05-04T10:06:50Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleBuilder.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * A builder which creates a {@link RetryRule}.\n+ */\n+public final class RetryRuleBuilder {\n+\n+    private static final CompletableFuture<RetryRuleDecision> NEXT =\n+            CompletableFuture.completedFuture(RetryRuleDecision.next());\n+    private static final CompletableFuture<RetryRuleDecision> DEFAULT_DECISION =\n+           CompletableFuture.completedFuture(RetryRuleDecision.DEFAULT);\n+\n+    private static final Set<HttpMethod> IDEMPOTENT_METHODS =\n+            ImmutableSet.of(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.PUT, HttpMethod.DELETE);\n+\n+    private final ImmutableSet.Builder<HttpStatusClass> statusClassesBuilder = ImmutableSet.builder();\n+    private final ImmutableSet.Builder<HttpStatus> statusesBuilder = ImmutableSet.builder();\n+\n+    private Set<HttpMethod> methods = HttpMethod.knownMethods();\n+    private boolean isMethodsSet;\n+\n+    @Nullable\n+    private Predicate<HttpStatus> statusFilter;\n+    @Nullable\n+    private Predicate<Throwable> exceptionFilter;\n+\n+    RetryRuleBuilder() {}\n+\n+    /**\n+     * Adds the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * HTTP methods, which should not have any side-effects (except for keeping statistics),\n+     * for a {@link RetryRule} which will retry if the request HTTP method is idempotent.\n+     */\n+    public RetryRuleBuilder onIdempotentMethods() {\n+        return onMethods(IDEMPOTENT_METHODS);\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryRule} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryRuleBuilder onMethods(HttpMethod... methods) {\n+        return onMethods(ImmutableSet.copyOf(requireNonNull(methods, \"methods\")));\n+    }\n+\n+    /**\n+     * Adds the specified HTTP methods for a {@link RetryRule} which will retry\n+     * if the request HTTP method is one of the specified HTTP methods.\n+     */\n+    public RetryRuleBuilder onMethods(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        checkArgument(!Iterables.isEmpty(methods), \"methods can't be empty\");\n+\n+        if (isMethodsSet) {\n+            Iterables.addAll(this.methods, methods);\n+        } else {\n+            this.methods = Sets.newEnumSet(methods, HttpMethod.class);\n+            isMethodsSet = true;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryRule} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryRuleBuilder onStatusClass(HttpStatusClass... statusClasses) {\n+        return onStatusClass(ImmutableSet.copyOf(requireNonNull(statusClasses, \"statusClasses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link RetryRule} which will retry\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    public RetryRuleBuilder onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        requireNonNull(statusClasses, \"statusClasses\");\n+        checkArgument(!Iterables.isEmpty(statusClasses), \"statusClasses can't be empty\");\n+\n+        statusClassesBuilder.addAll(statusClasses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the {@link HttpStatusClass#SERVER_ERROR} for a {@link RetryRule} which will retry\n+     * if the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    public RetryRuleBuilder onServerErrorStatus() {\n+        return onStatusClass(HttpStatusClass.SERVER_ERROR);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryRule} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryRuleBuilder onStatus(HttpStatus... statuses) {\n+        return onStatus(ImmutableSet.copyOf(requireNonNull(statuses, \"statuses\")));\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link RetryRule} which will retry\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    public RetryRuleBuilder onStatus(Iterable<HttpStatus> statuses) {\n+        requireNonNull(statuses, \"statuses\");\n+        checkArgument(!Iterables.isEmpty(statuses), \"statuses can't be empty\");\n+\n+        statusesBuilder.addAll(statuses);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified {@code statusFilter} for a {@link RetryRule} which will retry\n+     * if the response status matches the specified {@code statusFilter}.\n+     */\n+    public RetryRuleBuilder onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        requireNonNull(statusFilter, \"statusFilter\");\n+        if (this.statusFilter != null) {\n+            this.statusFilter = this.statusFilter.or(statusFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<HttpStatus> cast = (Predicate<HttpStatus>) statusFilter;\n+            this.statusFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified exception type for a {@link RetryRule} which will retry\n+     * if an {@link Exception} is raised and that is instance of the specified {@code exception}.\n+     */\n+    public RetryRuleBuilder onException(Class<? extends Throwable> exception) {\n+        requireNonNull(exception, \"exception\");\n+        return onException(exception::isInstance);\n+    }\n+\n+    /**\n+     * Adds the specified {@code exceptionFilter} for a {@link RetryRule} which will retry\n+     * if an {@link Exception} is raised and the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    public RetryRuleBuilder onException(Predicate<? super Throwable> exceptionFilter) {\n+        requireNonNull(exceptionFilter, \"exceptionFilter\");\n+        if (this.exceptionFilter != null) {\n+            this.exceptionFilter = this.exceptionFilter.or(exceptionFilter);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            final Predicate<Throwable> cast = (Predicate<Throwable>) exceptionFilter;\n+            this.exceptionFilter = cast;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Makes a {@link RetryRule} retry on any {@link Exception}.\n+     */\n+    public RetryRuleBuilder onException() {\n+        return onException(unused -> true);\n+    }\n+\n+    /**\n+     * Makes a {@link RetryRule} retry on an {@link UnprocessedRequestException} which means that the request\n+     * has not been processed by the server. Therefore, you can safely retry the request without worrying about\n+     * the idempotency of the request.\n+     */\n+    public RetryRuleBuilder onUnprocessed() {\n+        return onException(UnprocessedRequestException.class);\n+    }\n+\n+    /**\n+     * Sets the {@linkplain Backoff#ofDefault() default backoff} and returns a newly created {@link RetryRule}.\n+     */\n+    public RetryRule thenBackoff() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMxODM2Mg=="}, "originalCommit": {"oid": "20dcdbfcd30f5cded1dad1681047afb33b93a7a5"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDA5NzIyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwOTo0Mjo1NFrOGP5TDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwOTo0Mjo1NFrOGP5TDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMyMDU5MQ==", "bodyText": "nit: requireNonNull(other, \"other\");", "url": "https://github.com/line/armeria/pull/2661#discussion_r419320591", "createdAt": "2020-05-04T09:42:54Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a failed request should be retried.\n+ * If you need to determine by looking into the {@link Response}, use {@link RetryRuleWithContent}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@link Backoff#ofDefault() default backoff} if the request HTTP method is\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * and an {@link UnprocessedRequestException} is raised or the class of the response status is\n+     * {@link HttpStatusClass#SERVER_ERROR}.\n+     *\n+     * <p>Note that a client can safely retry a failed request with this rule if an endpoint service produces\n+     * the same result (no side effects) on idempotent HTTP methods.\n+     *\n+     * <p>This method is shortcut for:\n+     * <pre>{@code\n+     * RetryRule.builder()\n+     *          .onIdempotentMethods()\n+     *          .onServerErrorStatus()\n+     *          .onUnprocessed()\n+     *          .thenBackoff();\n+     * }</pre>\n+     */\n+    static RetryRule failsafe() {\n+        return builder().onIdempotentMethods().onServerErrorStatus().onUnprocessed().thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with\n+     * the {@linkplain Backoff#ofDefault() default backoff} if the class of the response status is\n+     * the specified {@link HttpStatusClass}.\n+     */\n+    static RetryRule onStatusClass(HttpStatusClass statusClass) {\n+        return builder().onStatusClass(statusClass).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with\n+     * the {@linkplain Backoff#ofDefault() defalut backoff} if the class of the response status is\n+     * one of the specified {@link HttpStatusClass}es.\n+     */\n+    static RetryRule onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        return builder().onStatusClass(statusClasses).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@linkplain Backoff#ofDefault() default backoff}\n+     * if the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    static RetryRule onServerErrorStatus() {\n+        return builder().onServerErrorStatus().thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@linkplain Backoff#ofDefault() default backoff} if the response status is one of\n+     * the specified {@link HttpStatus}es.\n+     */\n+    static RetryRule onStatus(HttpStatus... statuses) {\n+        return builder().onStatus(statuses).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@linkplain Backoff#ofDefault() default backoff} if the response status is one of\n+     * the specified {@link HttpStatus}es.\n+     */\n+    static RetryRule onStatus(Iterable<HttpStatus> statuses) {\n+        return builder().onStatus(statuses).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created a {@link RetryRule} that will retry with the\n+     * {@linkplain Backoff#ofDefault() default backoff} if the response status matches\n+     * the specified {@code statusFilter}.\n+     */\n+    static RetryRule onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        return builder().onStatus(statusFilter).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created a {@link RetryRule} that will retry with\n+     * the {@linkplain Backoff#ofDefault() default backoff} if an {@link Exception} is raised and\n+     * that is instance of the specified {@code exception}.\n+     */\n+    static RetryRule onException(Class<? extends Throwable> exception) {\n+        return builder().onException(exception).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@linkplain Backoff#ofDefault() default backoff} if an {@link Exception} is raised and\n+     * the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    static RetryRule onException(Predicate<? super Throwable> exceptionFilter) {\n+        return builder().onException(exceptionFilter).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that retries with\n+     * {@linkplain Backoff#ofDefault() default backoff} on any {@link Exception}.\n+     * Note that this rule should be used carefully because it reties regardless of\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotency</a>.\n+     */\n+    static RetryRule onException() {\n+        return builder().onException().thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a {@link RetryRule} that retries with the {@linkplain Backoff#ofDefault() default backoff}\n+     * on an {@link UnprocessedRequestException} which means that the request has not been processed by\n+     * the server. Therefore, you can safely retry the request without worrying about the idempotency of\n+     * the request.\n+     */\n+    static RetryRule onUnprocessed() {\n+        return builder().onUnprocessed().thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRuleBuilder}.\n+     */\n+    static RetryRuleBuilder builder() {\n+        return new RetryRuleBuilder();\n+    }\n+\n+    /**\n+     * Returns a composed {@link RetryRule} that represents a logical OR of this {@link RetryRule} and another.\n+     * If this {@link RetryRule} completes with {@link RetryRuleDecision#next()}, then other {@link RetryRule}\n+     * is evaluated.\n+     */\n+    default RetryRule or(RetryRule other) {\n+        return (ctx, cause) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20dcdbfcd30f5cded1dad1681047afb33b93a7a5"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzcxODY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMjoxMjozNVrOGRB4RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMzo0MzoyM1rOGRDEyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwOTc2NQ==", "bodyText": "Could we also add static RetryRule of(RetryRule...) and static RetryRule of(Iterable<? extneds RetryRule>), which yield prettier indentation?", "url": "https://github.com/line/armeria/pull/2661#discussion_r420509765", "createdAt": "2020-05-06T02:12:35Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a failed request should be retried.\n+ * If you need to determine by looking into the {@link Response}, use {@link RetryRuleWithContent}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@link Backoff#ofDefault() default backoff} if the request HTTP method is\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * and an {@link UnprocessedRequestException} is raised or the class of the response status is\n+     * {@link HttpStatusClass#SERVER_ERROR}.\n+     *\n+     * <p>Note that a client can safely retry a failed request with this rule if an endpoint service produces\n+     * the same result (no side effects) on idempotent HTTP methods.\n+     *\n+     * <p>This method is shortcut for:\n+     * <pre>{@code\n+     * RetryRule.builder()\n+     *          .onIdempotentMethods()\n+     *          .onServerErrorStatus()\n+     *          .onUnprocessed()\n+     *          .thenBackoff();\n+     * }</pre>\n+     */\n+    static RetryRule failsafe() {\n+        return builder().onIdempotentMethods().onServerErrorStatus().onUnprocessed().thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with\n+     * the {@linkplain Backoff#ofDefault() default backoff} if the class of the response status is\n+     * the specified {@link HttpStatusClass}.\n+     */\n+    static RetryRule onStatusClass(HttpStatusClass statusClass) {\n+        return builder().onStatusClass(statusClass).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with\n+     * the {@linkplain Backoff#ofDefault() defalut backoff} if the class of the response status is\n+     * one of the specified {@link HttpStatusClass}es.\n+     */\n+    static RetryRule onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        return builder().onStatusClass(statusClasses).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@linkplain Backoff#ofDefault() default backoff}\n+     * if the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    static RetryRule onServerErrorStatus() {\n+        return builder().onServerErrorStatus().thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@linkplain Backoff#ofDefault() default backoff} if the response status is one of\n+     * the specified {@link HttpStatus}es.\n+     */\n+    static RetryRule onStatus(HttpStatus... statuses) {\n+        return builder().onStatus(statuses).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@linkplain Backoff#ofDefault() default backoff} if the response status is one of\n+     * the specified {@link HttpStatus}es.\n+     */\n+    static RetryRule onStatus(Iterable<HttpStatus> statuses) {\n+        return builder().onStatus(statuses).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created a {@link RetryRule} that will retry with the\n+     * {@linkplain Backoff#ofDefault() default backoff} if the response status matches\n+     * the specified {@code statusFilter}.\n+     */\n+    static RetryRule onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        return builder().onStatus(statusFilter).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created a {@link RetryRule} that will retry with\n+     * the {@linkplain Backoff#ofDefault() default backoff} if an {@link Exception} is raised and\n+     * that is instance of the specified {@code exception}.\n+     */\n+    static RetryRule onException(Class<? extends Throwable> exception) {\n+        return builder().onException(exception).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@linkplain Backoff#ofDefault() default backoff} if an {@link Exception} is raised and\n+     * the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    static RetryRule onException(Predicate<? super Throwable> exceptionFilter) {\n+        return builder().onException(exceptionFilter).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that retries with\n+     * {@linkplain Backoff#ofDefault() default backoff} on any {@link Exception}.\n+     * Note that this rule should be used carefully because it reties regardless of\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotency</a>.\n+     */\n+    static RetryRule onException() {\n+        return builder().onException().thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a {@link RetryRule} that retries with the {@linkplain Backoff#ofDefault() default backoff}\n+     * on an {@link UnprocessedRequestException} which means that the request has not been processed by\n+     * the server. Therefore, you can safely retry the request without worrying about the idempotency of\n+     * the request.\n+     */\n+    static RetryRule onUnprocessed() {\n+        return builder().onUnprocessed().thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRuleBuilder}.\n+     */\n+    static RetryRuleBuilder builder() {\n+        return new RetryRuleBuilder();\n+    }\n+\n+    /**\n+     * Returns a composed {@link RetryRule} that represents a logical OR of this {@link RetryRule} and another.\n+     * If this {@link RetryRule} completes with {@link RetryRuleDecision#next()}, then other {@link RetryRule}\n+     * is evaluated.\n+     */\n+    default RetryRule or(RetryRule other) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c18efb1cd40b54167ded2ac08e4328fdac412c5"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUyOTM1NQ==", "bodyText": "SGTM!", "url": "https://github.com/line/armeria/pull/2661#discussion_r420529355", "createdAt": "2020-05-06T03:43:23Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a failed request should be retried.\n+ * If you need to determine by looking into the {@link Response}, use {@link RetryRuleWithContent}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@link Backoff#ofDefault() default backoff} if the request HTTP method is\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * and an {@link UnprocessedRequestException} is raised or the class of the response status is\n+     * {@link HttpStatusClass#SERVER_ERROR}.\n+     *\n+     * <p>Note that a client can safely retry a failed request with this rule if an endpoint service produces\n+     * the same result (no side effects) on idempotent HTTP methods.\n+     *\n+     * <p>This method is shortcut for:\n+     * <pre>{@code\n+     * RetryRule.builder()\n+     *          .onIdempotentMethods()\n+     *          .onServerErrorStatus()\n+     *          .onUnprocessed()\n+     *          .thenBackoff();\n+     * }</pre>\n+     */\n+    static RetryRule failsafe() {\n+        return builder().onIdempotentMethods().onServerErrorStatus().onUnprocessed().thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with\n+     * the {@linkplain Backoff#ofDefault() default backoff} if the class of the response status is\n+     * the specified {@link HttpStatusClass}.\n+     */\n+    static RetryRule onStatusClass(HttpStatusClass statusClass) {\n+        return builder().onStatusClass(statusClass).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with\n+     * the {@linkplain Backoff#ofDefault() defalut backoff} if the class of the response status is\n+     * one of the specified {@link HttpStatusClass}es.\n+     */\n+    static RetryRule onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        return builder().onStatusClass(statusClasses).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@linkplain Backoff#ofDefault() default backoff}\n+     * if the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    static RetryRule onServerErrorStatus() {\n+        return builder().onServerErrorStatus().thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@linkplain Backoff#ofDefault() default backoff} if the response status is one of\n+     * the specified {@link HttpStatus}es.\n+     */\n+    static RetryRule onStatus(HttpStatus... statuses) {\n+        return builder().onStatus(statuses).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@linkplain Backoff#ofDefault() default backoff} if the response status is one of\n+     * the specified {@link HttpStatus}es.\n+     */\n+    static RetryRule onStatus(Iterable<HttpStatus> statuses) {\n+        return builder().onStatus(statuses).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created a {@link RetryRule} that will retry with the\n+     * {@linkplain Backoff#ofDefault() default backoff} if the response status matches\n+     * the specified {@code statusFilter}.\n+     */\n+    static RetryRule onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        return builder().onStatus(statusFilter).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created a {@link RetryRule} that will retry with\n+     * the {@linkplain Backoff#ofDefault() default backoff} if an {@link Exception} is raised and\n+     * that is instance of the specified {@code exception}.\n+     */\n+    static RetryRule onException(Class<? extends Throwable> exception) {\n+        return builder().onException(exception).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@linkplain Backoff#ofDefault() default backoff} if an {@link Exception} is raised and\n+     * the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    static RetryRule onException(Predicate<? super Throwable> exceptionFilter) {\n+        return builder().onException(exceptionFilter).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that retries with\n+     * {@linkplain Backoff#ofDefault() default backoff} on any {@link Exception}.\n+     * Note that this rule should be used carefully because it reties regardless of\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotency</a>.\n+     */\n+    static RetryRule onException() {\n+        return builder().onException().thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a {@link RetryRule} that retries with the {@linkplain Backoff#ofDefault() default backoff}\n+     * on an {@link UnprocessedRequestException} which means that the request has not been processed by\n+     * the server. Therefore, you can safely retry the request without worrying about the idempotency of\n+     * the request.\n+     */\n+    static RetryRule onUnprocessed() {\n+        return builder().onUnprocessed().thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRuleBuilder}.\n+     */\n+    static RetryRuleBuilder builder() {\n+        return new RetryRuleBuilder();\n+    }\n+\n+    /**\n+     * Returns a composed {@link RetryRule} that represents a logical OR of this {@link RetryRule} and another.\n+     * If this {@link RetryRule} completes with {@link RetryRuleDecision#next()}, then other {@link RetryRule}\n+     * is evaluated.\n+     */\n+    default RetryRule or(RetryRule other) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwOTc2NQ=="}, "originalCommit": {"oid": "5c18efb1cd40b54167ded2ac08e4328fdac412c5"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzcyMjQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleDecision.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMjoxNDo0OFrOGRB6XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMzozNzoxNFrOGRC_xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxMDMwMQ==", "bodyText": "(NO_RETRY)?", "url": "https://github.com/line/armeria/pull/2661#discussion_r420510301", "createdAt": "2020-05-06T02:14:48Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleDecision.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A {@link RetryRuleDecision} that determines whether a {@link RetryRule} retries with a {@link Backoff},\n+ * skips the current {@link RetryRule} or no retries.\n+ */\n+public final class RetryRuleDecision {\n+\n+    private static final RetryRuleDecision NO_RETRY = new RetryRuleDecision(null);\n+    private static final RetryRuleDecision NEXT = new RetryRuleDecision(null);\n+    static final RetryRuleDecision DEFAULT = new RetryRuleDecision(Backoff.ofDefault());\n+\n+    /**\n+     * Returns a {@link RetryRuleDecision} that retries with the specified {@link Backoff}.\n+     */\n+    public static RetryRuleDecision retry(Backoff backoff) {\n+        if (backoff == Backoff.ofDefault()) {\n+            return DEFAULT;\n+        }\n+        return new RetryRuleDecision(requireNonNull(backoff, \"backoff\"));\n+    }\n+\n+    /**\n+     * Returns a {@link RetryRuleDecision} that never retries.\n+     */\n+    public static RetryRuleDecision noRetry() {\n+        return NO_RETRY;\n+    }\n+\n+    /**\n+     * Returns a {@link RetryRuleDecision} that skips the current {@link RetryRule} and\n+     * tries to retry with the next {@link RetryRule}.\n+     */\n+    public static RetryRuleDecision next() {\n+        return NEXT;\n+    }\n+\n+    @Nullable\n+    private final Backoff backoff;\n+\n+    private RetryRuleDecision(@Nullable Backoff backoff) {\n+        this.backoff = backoff;\n+    }\n+\n+    @Nullable\n+    Backoff backoff() {\n+        return backoff;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        if (this == NO_RETRY) {\n+            return \"RetryRuleDecision(STOP)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c18efb1cd40b54167ded2ac08e4328fdac412c5"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUyODA3MQ==", "bodyText": "Oops...", "url": "https://github.com/line/armeria/pull/2661#discussion_r420528071", "createdAt": "2020-05-06T03:37:14Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleDecision.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A {@link RetryRuleDecision} that determines whether a {@link RetryRule} retries with a {@link Backoff},\n+ * skips the current {@link RetryRule} or no retries.\n+ */\n+public final class RetryRuleDecision {\n+\n+    private static final RetryRuleDecision NO_RETRY = new RetryRuleDecision(null);\n+    private static final RetryRuleDecision NEXT = new RetryRuleDecision(null);\n+    static final RetryRuleDecision DEFAULT = new RetryRuleDecision(Backoff.ofDefault());\n+\n+    /**\n+     * Returns a {@link RetryRuleDecision} that retries with the specified {@link Backoff}.\n+     */\n+    public static RetryRuleDecision retry(Backoff backoff) {\n+        if (backoff == Backoff.ofDefault()) {\n+            return DEFAULT;\n+        }\n+        return new RetryRuleDecision(requireNonNull(backoff, \"backoff\"));\n+    }\n+\n+    /**\n+     * Returns a {@link RetryRuleDecision} that never retries.\n+     */\n+    public static RetryRuleDecision noRetry() {\n+        return NO_RETRY;\n+    }\n+\n+    /**\n+     * Returns a {@link RetryRuleDecision} that skips the current {@link RetryRule} and\n+     * tries to retry with the next {@link RetryRule}.\n+     */\n+    public static RetryRuleDecision next() {\n+        return NEXT;\n+    }\n+\n+    @Nullable\n+    private final Backoff backoff;\n+\n+    private RetryRuleDecision(@Nullable Backoff backoff) {\n+        this.backoff = backoff;\n+    }\n+\n+    @Nullable\n+    Backoff backoff() {\n+        return backoff;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        if (this == NO_RETRY) {\n+            return \"RetryRuleDecision(STOP)\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxMDMwMQ=="}, "originalCommit": {"oid": "5c18efb1cd40b54167ded2ac08e4328fdac412c5"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzcyNTczOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/client/HttpClientUnwrapTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMjoxNjo1MFrOGRB8IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMzo1Mjo1MFrOGRDMVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxMDc1Mg==", "bodyText": "Question - Should we add RetryRule.never()?", "url": "https://github.com/line/armeria/pull/2661#discussion_r420510752", "createdAt": "2020-05-06T02:16:50Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/client/HttpClientUnwrapTest.java", "diffHunk": "@@ -32,7 +32,7 @@ void test() {\n         final WebClient client =\n                 WebClient.builder()\n                          .decorator(LoggingClient.newDecorator())\n-                         .decorator(RetryingClient.newDecorator(RetryStrategy.never()))\n+                         .decorator(RetryingClient.newDecorator(RetryRule.builder().thenNoRetry()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c18efb1cd40b54167ded2ac08e4328fdac412c5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUzMTI4Nw==", "bodyText": "RetryRule.never() seems not to be used often, so removed it from factories.\nI thought that if a user doesn't want to retry failed requests, he/she can just remove RetryClient from decorators.", "url": "https://github.com/line/armeria/pull/2661#discussion_r420531287", "createdAt": "2020-05-06T03:52:50Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/client/HttpClientUnwrapTest.java", "diffHunk": "@@ -32,7 +32,7 @@ void test() {\n         final WebClient client =\n                 WebClient.builder()\n                          .decorator(LoggingClient.newDecorator())\n-                         .decorator(RetryingClient.newDecorator(RetryStrategy.never()))\n+                         .decorator(RetryingClient.newDecorator(RetryRule.builder().thenNoRetry()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxMDc1Mg=="}, "originalCommit": {"oid": "5c18efb1cd40b54167ded2ac08e4328fdac412c5"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzIyOTA1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjoyMjoxNlrOGT3o5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjoyMjoxNlrOGT3o5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4NzcxOA==", "bodyText": "nit: a shortcut", "url": "https://github.com/line/armeria/pull/2661#discussion_r423487718", "createdAt": "2020-05-12T06:22:16Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -41,23 +50,28 @@\n      * Returns a newly created {@link RetryRule} that will retry with the\n      * {@link Backoff#ofDefault() default backoff} if the request HTTP method is\n      * <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n-     * and an {@link UnprocessedRequestException} is raised or the class of the response status is\n+     * and an {@link Exception} is raised or the class of the response status is\n      * {@link HttpStatusClass#SERVER_ERROR}.\n+     * Or an {@link UnprocessedRequestException} is raised regardless of the request HTTP method.\n      *\n      * <p>Note that a client can safely retry a failed request with this rule if an endpoint service produces\n-     * the same result (no side effects) on idempotent HTTP methods.\n+     * the same result (no side effects) on idempotent HTTP methods or {@link UnprocessedRequestException}.\n      *\n      * <p>This method is shortcut for:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431f0ed38dfaa5c9ca364b6e5b462aee710e557f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzIyOTU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjoyMjozMFrOGT3pOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjoyMjozMFrOGT3pOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4NzgwMA==", "bodyText": "Otherwise, an ..", "url": "https://github.com/line/armeria/pull/2661#discussion_r423487800", "createdAt": "2020-05-12T06:22:30Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -41,23 +50,28 @@\n      * Returns a newly created {@link RetryRule} that will retry with the\n      * {@link Backoff#ofDefault() default backoff} if the request HTTP method is\n      * <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n-     * and an {@link UnprocessedRequestException} is raised or the class of the response status is\n+     * and an {@link Exception} is raised or the class of the response status is\n      * {@link HttpStatusClass#SERVER_ERROR}.\n+     * Or an {@link UnprocessedRequestException} is raised regardless of the request HTTP method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431f0ed38dfaa5c9ca364b6e5b462aee710e557f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzIzMzU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjoyNDowMFrOGT3ryQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjoyNDowMFrOGT3ryQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4ODQ1Nw==", "bodyText": "Probably better rejecting when methods is empty?", "url": "https://github.com/line/armeria/pull/2661#discussion_r423488457", "createdAt": "2020-05-12T06:24:00Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -156,26 +170,74 @@ static RetryRule onUnprocessed() {\n      * Returns a newly created {@link RetryRuleBuilder}.\n      */\n     static RetryRuleBuilder builder() {\n-        return new RetryRuleBuilder();\n+        return builder(HttpMethod.knownMethods());\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRuleBuilder} with the specified {@link HttpMethod}s.\n+     */\n+    static RetryRuleBuilder builder(HttpMethod... methods) {\n+        requireNonNull(methods, \"methods\");\n+        return builder(ImmutableSet.copyOf(methods));\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRuleBuilder} with the specified {@link HttpMethod}s.\n+     */\n+    static RetryRuleBuilder builder(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        final ImmutableSet<HttpMethod> httpMethods = Sets.immutableEnumSet(methods);\n+        return builder(headers -> httpMethods.contains(headers.method()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431f0ed38dfaa5c9ca364b6e5b462aee710e557f"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzIzNjY3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjoyNToxM1rOGT3ttA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo0MzowMVrOGT4LiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4ODk0OA==", "bodyText": "Curious if it's better using a single varargs parameter, because we do so in other places. Could raise an exception on empty rules instead?", "url": "https://github.com/line/armeria/pull/2661#discussion_r423488948", "createdAt": "2020-05-12T06:25:13Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -156,26 +170,74 @@ static RetryRule onUnprocessed() {\n      * Returns a newly created {@link RetryRuleBuilder}.\n      */\n     static RetryRuleBuilder builder() {\n-        return new RetryRuleBuilder();\n+        return builder(HttpMethod.knownMethods());\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRuleBuilder} with the specified {@link HttpMethod}s.\n+     */\n+    static RetryRuleBuilder builder(HttpMethod... methods) {\n+        requireNonNull(methods, \"methods\");\n+        return builder(ImmutableSet.copyOf(methods));\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRuleBuilder} with the specified {@link HttpMethod}s.\n+     */\n+    static RetryRuleBuilder builder(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        final ImmutableSet<HttpMethod> httpMethods = Sets.immutableEnumSet(methods);\n+        return builder(headers -> httpMethods.contains(headers.method()));\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRuleBuilder} with the specified {@code requestHeadersFilter}.\n+     */\n+    static RetryRuleBuilder builder(Predicate<? super RequestHeaders> requestHeadersFilter) {\n+        return new RetryRuleBuilder(requireNonNull(requestHeadersFilter, \"requestHeadersFilter\"));\n+    }\n+\n+    /**\n+     * Returns a {@link RetryRule} that combines the specified {@code retryRule} and {@code otherRules}.\n+     */\n+    static RetryRule of(RetryRule retryRule, RetryRule... otherRules) {\n+        requireNonNull(retryRule, \"retryRule\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431f0ed38dfaa5c9ca364b6e5b462aee710e557f"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5NjU4NA==", "bodyText": "Yeah, I was considering it too. Let keep consistency.", "url": "https://github.com/line/armeria/pull/2661#discussion_r423496584", "createdAt": "2020-05-12T06:43:01Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -156,26 +170,74 @@ static RetryRule onUnprocessed() {\n      * Returns a newly created {@link RetryRuleBuilder}.\n      */\n     static RetryRuleBuilder builder() {\n-        return new RetryRuleBuilder();\n+        return builder(HttpMethod.knownMethods());\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRuleBuilder} with the specified {@link HttpMethod}s.\n+     */\n+    static RetryRuleBuilder builder(HttpMethod... methods) {\n+        requireNonNull(methods, \"methods\");\n+        return builder(ImmutableSet.copyOf(methods));\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRuleBuilder} with the specified {@link HttpMethod}s.\n+     */\n+    static RetryRuleBuilder builder(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        final ImmutableSet<HttpMethod> httpMethods = Sets.immutableEnumSet(methods);\n+        return builder(headers -> httpMethods.contains(headers.method()));\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRuleBuilder} with the specified {@code requestHeadersFilter}.\n+     */\n+    static RetryRuleBuilder builder(Predicate<? super RequestHeaders> requestHeadersFilter) {\n+        return new RetryRuleBuilder(requireNonNull(requestHeadersFilter, \"requestHeadersFilter\"));\n+    }\n+\n+    /**\n+     * Returns a {@link RetryRule} that combines the specified {@code retryRule} and {@code otherRules}.\n+     */\n+    static RetryRule of(RetryRule retryRule, RetryRule... otherRules) {\n+        requireNonNull(retryRule, \"retryRule\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4ODk0OA=="}, "originalCommit": {"oid": "431f0ed38dfaa5c9ca364b6e5b462aee710e557f"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzIzOTA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjoyNjowOFrOGT3vLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjoyNjowOFrOGT3vLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4OTMyNA==", "bodyText": "Revert?", "url": "https://github.com/line/armeria/pull/2661#discussion_r423489324", "createdAt": "2020-05-12T06:26:08Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleBuilder.java", "diffHunk": "@@ -218,65 +55,120 @@ public RetryRule thenBackoff(Backoff backoff) {\n     }\n \n     /**\n-     * Returns a newly created {@link RetryRule} that never retries.\n+     * Returns a newly created retry rule that never retries.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431f0ed38dfaa5c9ca364b6e5b462aee710e557f"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzI0MjI2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjoyNzoyMVrOGT3xEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzowNjo1NVrOGT43NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4OTgxMA==", "bodyText": "I'd prefer orElse if there's a conflict.", "url": "https://github.com/line/armeria/pull/2661#discussion_r423489810", "createdAt": "2020-05-12T06:27:21Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleUtil.java", "diffHunk": "@@ -16,14 +16,154 @@\n \n package com.linecorp.armeria.client.retry;\n \n+import static com.linecorp.armeria.client.retry.AbstractRetryRuleBuilder.DEFAULT_DECISION;\n+import static com.linecorp.armeria.client.retry.AbstractRetryRuleBuilder.NEXT_DECISION;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.BiFunction;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpResponseDuplicator;\n+import com.linecorp.armeria.common.Response;\n+\n final class RetryRuleUtil {\n \n     static RetryStrategy toRetryStrategy(RetryRule rule) {\n         return (ctx, cause) -> rule.shouldRetry(ctx, cause).thenApply(RetryRuleDecision::backoff);\n     }\n \n     static RetryRule fromRetryStrategy(RetryStrategy strategy) {\n-        return (ctx, req) -> strategy.shouldRetry(ctx, req).thenApply(RetryRuleDecision::retry);\n+        return (ctx, cause) -> strategy.shouldRetry(ctx, cause).thenApply(backoff -> {\n+            if (backoff == null) {\n+                return RetryRuleDecision.noRetry();\n+            } else {\n+                return RetryRuleDecision.retry(backoff);\n+            }\n+        });\n+    }\n+\n+    static <T extends Response> RetryStrategyWithContent<T> toRetryStrategyWithContent(\n+            RetryRuleWithContent<T> rule) {\n+        return (ctx, content) -> rule.shouldRetry(ctx, content).thenApply(RetryRuleDecision::backoff);\n+    }\n+\n+    static <T extends Response> RetryRuleWithContent<T> fromRetryStrategyWithContent(\n+            RetryStrategyWithContent<T> strategy) {\n+        return (ctx, content) -> strategy.shouldRetry(ctx, content).thenApply(backoff -> {\n+            if (backoff == null) {\n+                return RetryRuleDecision.noRetry();\n+            } else {\n+                return RetryRuleDecision.retry(backoff);\n+            }\n+        });\n+    }\n+\n+    static <T extends Response> RetryRuleWithContent<T> fromRetryRule(RetryRule retryRule) {\n+        return (ctx, content) -> {\n+            final CompletableFuture<?> completionFuture = content.whenComplete();\n+            if (completionFuture.isCompletedExceptionally()) {\n+                final CompletableFuture<RetryRuleDecision> decisionFuture = new CompletableFuture<>();\n+                completionFuture.exceptionally(cause -> {\n+                    retryRule.shouldRetry(ctx, cause).thenAccept(decisionFuture::complete);\n+                    return null;\n+                });\n+                return decisionFuture;\n+            }\n+            return retryRule.shouldRetry(ctx, null);\n+        };\n+    }\n+\n+    static RetryRule orElse(RetryRule first, RetryRule second) {\n+        return (ctx, cause) -> orElse0(ctx, cause, first::shouldRetry, second::shouldRetry);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    static <T extends Response> RetryRuleWithContent<T> orElse(RetryRule first,\n+                                                               RetryRuleWithContent<T> second) {\n+        return (ctx, response) -> {\n+            if (response instanceof HttpResponse) {\n+                try (HttpResponseDuplicator duplicator = ((HttpResponse) response).toDuplicator()) {\n+                    final RetryRuleWithContent<T> duplicatedSecond =\n+                            (RetryRuleWithContent<T>) withDuplicator(\n+                                    (RetryRuleWithContent<HttpResponse>) second, duplicator);\n+                    return orElse(ctx, response, fromRetryRule(first), duplicatedSecond);\n+                }\n+            } else {\n+                return orElse(ctx, response, fromRetryRule(first), second);\n+            }\n+        };\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    static <T extends Response> RetryRuleWithContent<T> orElse(RetryRuleWithContent<T> first,\n+                                                               RetryRule second) {\n+        return (ctx, response) -> {\n+            if (response instanceof HttpResponse) {\n+                try (HttpResponseDuplicator duplicator = ((HttpResponse) response).toDuplicator()) {\n+                    final RetryRuleWithContent<T> duplicatedFirst =\n+                            (RetryRuleWithContent<T>) withDuplicator(\n+                                    (RetryRuleWithContent<HttpResponse>) first, duplicator);\n+                    return orElse(ctx, response, duplicatedFirst, fromRetryRule(second));\n+                }\n+            } else {\n+                return orElse(ctx, response, first, fromRetryRule(second));\n+            }\n+        };\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    static <T extends Response> RetryRuleWithContent<T> orElse(RetryRuleWithContent<T> first,\n+                                                               RetryRuleWithContent<T> second) {\n+        return (ctx, response) -> {\n+            if (response instanceof HttpResponse) {\n+                try (HttpResponseDuplicator duplicator = ((HttpResponse) response).toDuplicator()) {\n+                    final RetryRuleWithContent<T> duplicatedFirst =\n+                            (RetryRuleWithContent<T>) withDuplicator(\n+                                    (RetryRuleWithContent<HttpResponse>) first, duplicator);\n+                    final RetryRuleWithContent<T> duplicatedSecond =\n+                            (RetryRuleWithContent<T>) withDuplicator(\n+                                    (RetryRuleWithContent<HttpResponse>) second, duplicator);\n+                    return orElse(ctx, response, duplicatedFirst, duplicatedSecond);\n+                }\n+            } else {\n+                return orElse(ctx, response, first, second);\n+            }\n+        };\n+    }\n+\n+    private static <T extends Response> CompletionStage<RetryRuleDecision> orElse(\n+            ClientRequestContext ctx, T response,\n+            RetryRuleWithContent<T> first, RetryRuleWithContent<T> second) {\n+        return orElse0(ctx, response, first::shouldRetry, second::shouldRetry);\n+    }\n+\n+    private static <T> CompletionStage<RetryRuleDecision> orElse0(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431f0ed38dfaa5c9ca364b6e5b462aee710e557f"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwNzc2NA==", "bodyText": "There is an ambiguous method call if change orElse0 to orElse. Let me leave it as is.", "url": "https://github.com/line/armeria/pull/2661#discussion_r423507764", "createdAt": "2020-05-12T07:06:55Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleUtil.java", "diffHunk": "@@ -16,14 +16,154 @@\n \n package com.linecorp.armeria.client.retry;\n \n+import static com.linecorp.armeria.client.retry.AbstractRetryRuleBuilder.DEFAULT_DECISION;\n+import static com.linecorp.armeria.client.retry.AbstractRetryRuleBuilder.NEXT_DECISION;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.BiFunction;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpResponseDuplicator;\n+import com.linecorp.armeria.common.Response;\n+\n final class RetryRuleUtil {\n \n     static RetryStrategy toRetryStrategy(RetryRule rule) {\n         return (ctx, cause) -> rule.shouldRetry(ctx, cause).thenApply(RetryRuleDecision::backoff);\n     }\n \n     static RetryRule fromRetryStrategy(RetryStrategy strategy) {\n-        return (ctx, req) -> strategy.shouldRetry(ctx, req).thenApply(RetryRuleDecision::retry);\n+        return (ctx, cause) -> strategy.shouldRetry(ctx, cause).thenApply(backoff -> {\n+            if (backoff == null) {\n+                return RetryRuleDecision.noRetry();\n+            } else {\n+                return RetryRuleDecision.retry(backoff);\n+            }\n+        });\n+    }\n+\n+    static <T extends Response> RetryStrategyWithContent<T> toRetryStrategyWithContent(\n+            RetryRuleWithContent<T> rule) {\n+        return (ctx, content) -> rule.shouldRetry(ctx, content).thenApply(RetryRuleDecision::backoff);\n+    }\n+\n+    static <T extends Response> RetryRuleWithContent<T> fromRetryStrategyWithContent(\n+            RetryStrategyWithContent<T> strategy) {\n+        return (ctx, content) -> strategy.shouldRetry(ctx, content).thenApply(backoff -> {\n+            if (backoff == null) {\n+                return RetryRuleDecision.noRetry();\n+            } else {\n+                return RetryRuleDecision.retry(backoff);\n+            }\n+        });\n+    }\n+\n+    static <T extends Response> RetryRuleWithContent<T> fromRetryRule(RetryRule retryRule) {\n+        return (ctx, content) -> {\n+            final CompletableFuture<?> completionFuture = content.whenComplete();\n+            if (completionFuture.isCompletedExceptionally()) {\n+                final CompletableFuture<RetryRuleDecision> decisionFuture = new CompletableFuture<>();\n+                completionFuture.exceptionally(cause -> {\n+                    retryRule.shouldRetry(ctx, cause).thenAccept(decisionFuture::complete);\n+                    return null;\n+                });\n+                return decisionFuture;\n+            }\n+            return retryRule.shouldRetry(ctx, null);\n+        };\n+    }\n+\n+    static RetryRule orElse(RetryRule first, RetryRule second) {\n+        return (ctx, cause) -> orElse0(ctx, cause, first::shouldRetry, second::shouldRetry);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    static <T extends Response> RetryRuleWithContent<T> orElse(RetryRule first,\n+                                                               RetryRuleWithContent<T> second) {\n+        return (ctx, response) -> {\n+            if (response instanceof HttpResponse) {\n+                try (HttpResponseDuplicator duplicator = ((HttpResponse) response).toDuplicator()) {\n+                    final RetryRuleWithContent<T> duplicatedSecond =\n+                            (RetryRuleWithContent<T>) withDuplicator(\n+                                    (RetryRuleWithContent<HttpResponse>) second, duplicator);\n+                    return orElse(ctx, response, fromRetryRule(first), duplicatedSecond);\n+                }\n+            } else {\n+                return orElse(ctx, response, fromRetryRule(first), second);\n+            }\n+        };\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    static <T extends Response> RetryRuleWithContent<T> orElse(RetryRuleWithContent<T> first,\n+                                                               RetryRule second) {\n+        return (ctx, response) -> {\n+            if (response instanceof HttpResponse) {\n+                try (HttpResponseDuplicator duplicator = ((HttpResponse) response).toDuplicator()) {\n+                    final RetryRuleWithContent<T> duplicatedFirst =\n+                            (RetryRuleWithContent<T>) withDuplicator(\n+                                    (RetryRuleWithContent<HttpResponse>) first, duplicator);\n+                    return orElse(ctx, response, duplicatedFirst, fromRetryRule(second));\n+                }\n+            } else {\n+                return orElse(ctx, response, first, fromRetryRule(second));\n+            }\n+        };\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    static <T extends Response> RetryRuleWithContent<T> orElse(RetryRuleWithContent<T> first,\n+                                                               RetryRuleWithContent<T> second) {\n+        return (ctx, response) -> {\n+            if (response instanceof HttpResponse) {\n+                try (HttpResponseDuplicator duplicator = ((HttpResponse) response).toDuplicator()) {\n+                    final RetryRuleWithContent<T> duplicatedFirst =\n+                            (RetryRuleWithContent<T>) withDuplicator(\n+                                    (RetryRuleWithContent<HttpResponse>) first, duplicator);\n+                    final RetryRuleWithContent<T> duplicatedSecond =\n+                            (RetryRuleWithContent<T>) withDuplicator(\n+                                    (RetryRuleWithContent<HttpResponse>) second, duplicator);\n+                    return orElse(ctx, response, duplicatedFirst, duplicatedSecond);\n+                }\n+            } else {\n+                return orElse(ctx, response, first, second);\n+            }\n+        };\n+    }\n+\n+    private static <T extends Response> CompletionStage<RetryRuleDecision> orElse(\n+            ClientRequestContext ctx, T response,\n+            RetryRuleWithContent<T> first, RetryRuleWithContent<T> second) {\n+        return orElse0(ctx, response, first::shouldRetry, second::shouldRetry);\n+    }\n+\n+    private static <T> CompletionStage<RetryRuleDecision> orElse0(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4OTgxMA=="}, "originalCommit": {"oid": "431f0ed38dfaa5c9ca364b6e5b462aee710e557f"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzI0Mzg0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleWithContent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjoyNzo1N1rOGT3yEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjoyNzo1N1rOGT3yEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MDA2NA==", "bodyText": "Ditto", "url": "https://github.com/line/armeria/pull/2661#discussion_r423490064", "createdAt": "2020-05-12T06:27:57Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleWithContent.java", "diffHunk": "@@ -30,6 +43,109 @@\n @FunctionalInterface\n public interface RetryRuleWithContent<T extends Response> {\n \n+    /**\n+     * Returns a newly created {@link RetryRuleWithContent} that will retry with\n+     * the {@linkplain Backoff#ofDefault() default backoff} if the specified {@code retryFunction} completes\n+     * with {@code true}.\n+     */\n+    static <T extends Response> RetryRuleWithContent<T> onResponse(\n+            Function<? super T, ? extends CompletionStage<Boolean>> retryFunction) {\n+        return RetryRuleWithContent.<T>builder().onResponse(retryFunction).thenBackoff();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRuleWithContentBuilder}.\n+     */\n+    static <T extends Response> RetryRuleWithContentBuilder<T> builder() {\n+        return builder(HttpMethod.knownMethods());\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRuleWithContentBuilder} with the specified {@link HttpMethod}s.\n+     */\n+    static <T extends Response> RetryRuleWithContentBuilder<T> builder(HttpMethod... methods) {\n+        return builder(ImmutableSet.copyOf(requireNonNull(methods, \"methods\")));\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRuleWithContentBuilder} with the specified {@link HttpMethod}s.\n+     */\n+    static <T extends Response> RetryRuleWithContentBuilder<T> builder(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        final ImmutableSet<HttpMethod> httpMethods = Sets.immutableEnumSet(methods);\n+        return builder(headers -> httpMethods.contains(headers.method()));\n+    }\n+\n+    /**\n+     * Returns a newly created {@link RetryRuleWithContentBuilder} with the specified\n+     * {@code requestHeadersFilter}.\n+     */\n+    static <T extends Response> RetryRuleWithContentBuilder<T> builder(\n+            Predicate<? super RequestHeaders> requestHeadersFilter) {\n+        requireNonNull(requestHeadersFilter, \"requestHeadersFilter\");\n+        return new RetryRuleWithContentBuilder<>(requestHeadersFilter);\n+    }\n+\n+    /**\n+     * Returns a {@link RetryRuleWithContent} that combines the specified {@code retryRule} and\n+     * {@code otherRules}.\n+     */\n+    @SafeVarargs\n+    static <T extends Response> RetryRuleWithContent<T> of(RetryRuleWithContent<T> retryRule,\n+                                                           RetryRuleWithContent<T>... otherRules) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431f0ed38dfaa5c9ca364b6e5b462aee710e557f"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzI1MDkxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingClientBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozMDo0N1rOGT32hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo1NDo1M1rOGT4gNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MTIwNQ==", "bodyText": "Revert?", "url": "https://github.com/line/armeria/pull/2661#discussion_r423491205", "createdAt": "2020-05-12T06:30:47Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingClientBuilder.java", "diffHunk": "@@ -51,8 +51,8 @@\n     /**\n      * Creates a new builder with the specified {@link RetryRuleWithContent}.\n      */\n-    RetryingClientBuilder(RetryRuleWithContent<HttpResponse> retryRuleWithContent) {\n-        super(retryRuleWithContent);\n+    RetryingClientBuilder(RetryRuleWithContent<HttpResponse> retryRuleWithHttpContent) {\n+        super(retryRuleWithHttpContent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431f0ed38dfaa5c9ca364b6e5b462aee710e557f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMTg3Ng==", "bodyText": "Oops..", "url": "https://github.com/line/armeria/pull/2661#discussion_r423501876", "createdAt": "2020-05-12T06:54:53Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingClientBuilder.java", "diffHunk": "@@ -51,8 +51,8 @@\n     /**\n      * Creates a new builder with the specified {@link RetryRuleWithContent}.\n      */\n-    RetryingClientBuilder(RetryRuleWithContent<HttpResponse> retryRuleWithContent) {\n-        super(retryRuleWithContent);\n+    RetryingClientBuilder(RetryRuleWithContent<HttpResponse> retryRuleWithHttpContent) {\n+        super(retryRuleWithHttpContent);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MTIwNQ=="}, "originalCommit": {"oid": "431f0ed38dfaa5c9ca364b6e5b462aee710e557f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzI1MTkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozMTowNVrOGT33Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozMTowNVrOGT33Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MTM1NA==", "bodyText": "Ditto", "url": "https://github.com/line/armeria/pull/2661#discussion_r423491354", "createdAt": "2020-05-12T06:31:05Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java", "diffHunk": "@@ -38,23 +39,57 @@\n      * Creates a new {@link RpcClient} decorator that handles failures of an invocation and retries\n      * RPC requests.\n      *\n-     * @param retryRuleWithContent the retry rule\n+     * @param retryRuleWithRpcResponse the retry rule\n      */\n     public static Function<? super RpcClient, RetryingRpcClient>\n-    newDecorator(RetryRuleWithContent<RpcResponse> retryRuleWithContent) {\n-        return builder(retryRuleWithContent).newDecorator();\n+    newDecorator(RetryRuleWithContent<RpcResponse> retryRuleWithRpcResponse) {\n+        return builder(retryRuleWithRpcResponse).newDecorator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431f0ed38dfaa5c9ca364b6e5b462aee710e557f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzI1MzY5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozMTo0MVrOGT34LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozMTo0MVrOGT34LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MTYyOQ==", "bodyText": "Revert?", "url": "https://github.com/line/armeria/pull/2661#discussion_r423491629", "createdAt": "2020-05-12T06:31:41Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java", "diffHunk": "@@ -38,23 +39,57 @@\n      * Creates a new {@link RpcClient} decorator that handles failures of an invocation and retries\n      * RPC requests.\n      *\n-     * @param retryRuleWithContent the retry rule\n+     * @param retryRuleWithRpcResponse the retry rule\n      */\n     public static Function<? super RpcClient, RetryingRpcClient>\n-    newDecorator(RetryRuleWithContent<RpcResponse> retryRuleWithContent) {\n-        return builder(retryRuleWithContent).newDecorator();\n+    newDecorator(RetryRuleWithContent<RpcResponse> retryRuleWithRpcResponse) {\n+        return builder(retryRuleWithRpcResponse).newDecorator();\n     }\n \n     /**\n      * Creates a new {@link RpcClient} decorator that handles failures of an invocation and retries\n      * RPC requests.\n      *\n-     * @param retryRuleWithContent the retry rule\n+     * @param retryStrategyWithContent the retry strategy\n+     *\n+     * @deprecated Use {@link #newDecorator(RetryRuleWithContent)}.\n+     */\n+    @Deprecated\n+    public static Function<? super RpcClient, RetryingRpcClient>\n+    newDecorator(RetryStrategyWithContent<RpcResponse> retryStrategyWithContent) {\n+        requireNonNull(retryStrategyWithContent, \"retryStrategyWithContent\");\n+        return newDecorator((RetryRuleWithContent) RetryRuleUtil\n+                .fromRetryStrategyWithContent(retryStrategyWithContent));\n+    }\n+\n+    /**\n+     * Creates a new {@link RpcClient} decorator that handles failures of an invocation and retries\n+     * RPC requests.\n+     *\n+     * @param retryRuleWithRpcResponse the retry rule\n      * @param maxTotalAttempts the maximum number of total attempts\n      */\n     public static Function<? super RpcClient, RetryingRpcClient>\n-    newDecorator(RetryRuleWithContent<RpcResponse> retryRuleWithContent, int maxTotalAttempts) {\n-        return builder(retryRuleWithContent).maxTotalAttempts(maxTotalAttempts).newDecorator();\n+    newDecorator(RetryRuleWithContent<RpcResponse> retryRuleWithRpcResponse, int maxTotalAttempts) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431f0ed38dfaa5c9ca364b6e5b462aee710e557f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzI2MTE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpMethod.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozNDoyNFrOGT38sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozNDoyNFrOGT38sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5Mjc4Nw==", "bodyText": "HTTP methods - {@link #GET}, {@link #HEAD}, {@link #PUT} and {@link #DELETE}. ?", "url": "https://github.com/line/armeria/pull/2661#discussion_r423492787", "createdAt": "2020-05-12T06:34:24Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpMethod.java", "diffHunk": "@@ -139,6 +140,14 @@ public static boolean isSupported(String value) {\n         return false;\n     }\n \n+    /**\n+     * Returns the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * HTTP methods.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431f0ed38dfaa5c9ca364b6e5b462aee710e557f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzI2MzY4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryRuleBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozNToxNlrOGT3-OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozNToxNlrOGT3-OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MzE3Nw==", "bodyText": "Could be package-local?", "url": "https://github.com/line/armeria/pull/2661#discussion_r423493177", "createdAt": "2020-05-12T06:35:16Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryRuleBuilder.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * An abstract builder class which creates a {@link RetryRule} or a {@link RetryRuleWithContent}.\n+ */\n+public abstract class AbstractRetryRuleBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431f0ed38dfaa5c9ca364b6e5b462aee710e557f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ1MjUyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozNjowOFrOGT50bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozNjowOFrOGT50bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyMzQzOQ==", "bodyText": "Missing period in an exception message", "url": "https://github.com/line/armeria/pull/2661#discussion_r423523439", "createdAt": "2020-05-12T07:36:08Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -200,18 +201,13 @@ static RetryRuleBuilder builder(Predicate<? super RequestHeaders> requestHeaders\n     /**\n      * Returns a {@link RetryRule} that combines the specified {@code retryRule} and {@code otherRules}.\n      */\n-    static RetryRule of(RetryRule retryRule, RetryRule... otherRules) {\n-        requireNonNull(retryRule, \"retryRule\");\n-        requireNonNull(otherRules, \"otherRules\");\n-        if (otherRules.length == 0) {\n-            return retryRule;\n+    static RetryRule of(RetryRule... retryRules) {\n+        requireNonNull(retryRules, \"retryRules\");\n+        checkArgument(retryRules.length > 0, \"retryRules can't be empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14382f6deb058be885ecc7abeecc03570c5889e"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ1MjcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozNjoxNFrOGT50lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozNjoxNFrOGT50lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyMzQ3OQ==", "bodyText": "Missing period in an exception message", "url": "https://github.com/line/armeria/pull/2661#discussion_r423523479", "createdAt": "2020-05-12T07:36:14Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -221,7 +217,7 @@ static RetryRule of(RetryRule retryRule, RetryRule... otherRules) {\n     @SuppressWarnings(\"OptionalGetWithoutIsPresent\")\n     static RetryRule of(Iterable<? extends RetryRule> retryRules) {\n         requireNonNull(retryRules, \"retryRules\");\n-        checkArgument(!Iterables.isEmpty(retryRules), \"retryRules should not be empty\");\n+        checkArgument(!Iterables.isEmpty(retryRules), \"retryRules can't be empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14382f6deb058be885ecc7abeecc03570c5889e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ1Mjg5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleWithContent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozNjoxN1rOGT50sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozNjoxN1rOGT50sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyMzUwNA==", "bodyText": "Missing period in an exception message", "url": "https://github.com/line/armeria/pull/2661#discussion_r423523504", "createdAt": "2020-05-12T07:36:17Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleWithContent.java", "diffHunk": "@@ -72,6 +72,7 @@\n      */\n     static <T extends Response> RetryRuleWithContentBuilder<T> builder(Iterable<HttpMethod> methods) {\n         requireNonNull(methods, \"methods\");\n+        checkArgument(!Iterables.isEmpty(methods), \"methods can't be empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14382f6deb058be885ecc7abeecc03570c5889e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ1MzEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleWithContent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozNjoyMlrOGT500g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozNjoyMlrOGT500g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyMzUzOA==", "bodyText": "Missing period in an exception message", "url": "https://github.com/line/armeria/pull/2661#discussion_r423523538", "createdAt": "2020-05-12T07:36:22Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleWithContent.java", "diffHunk": "@@ -91,19 +92,13 @@\n      * {@code otherRules}.\n      */\n     @SafeVarargs\n-    static <T extends Response> RetryRuleWithContent<T> of(RetryRuleWithContent<T> retryRule,\n-                                                           RetryRuleWithContent<T>... otherRules) {\n-        requireNonNull(retryRule, \"retryRule\");\n-        requireNonNull(otherRules, \"otherRules\");\n-        if (otherRules.length == 0) {\n-            return retryRule;\n+    static <T extends Response> RetryRuleWithContent<T> of(RetryRuleWithContent<T>... retryRules) {\n+        requireNonNull(retryRules, \"retryRules\");\n+        checkArgument(retryRules.length > 0, \"retryRules can't be empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14382f6deb058be885ecc7abeecc03570c5889e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ1NzgyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozNzo1MVrOGT53yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozNzo1MVrOGT53yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNDI5OQ==", "bodyText": "Could these constructors be package-local?", "url": "https://github.com/line/armeria/pull/2661#discussion_r423524299", "createdAt": "2020-05-12T07:37:51Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClientBuilder.java", "diffHunk": "@@ -39,46 +39,66 @@\n public abstract class AbstractRetryingClientBuilder<O extends Response> {\n \n     @Nullable\n-    private final RetryStrategy retryStrategy;\n+    private final RetryRule retryRule;\n \n     @Nullable\n-    private final RetryStrategyWithContent<O> retryStrategyWithContent;\n+    private final RetryRuleWithContent<O> retryRuleWithContent;\n \n     private int maxTotalAttempts = Flags.defaultMaxTotalAttempts();\n     private long responseTimeoutMillisForEachAttempt = Flags.defaultResponseTimeoutMillis();\n \n+    /**\n+     * Creates a new builder with the specified {@link RetryRule}.\n+     */\n+    protected AbstractRetryingClientBuilder(RetryRule retryRule) {\n+        this(requireNonNull(retryRule, \"retryRule\"), null);\n+    }\n+\n     /**\n      * Creates a new builder with the specified {@link RetryStrategy}.\n+     *\n+     * @deprecated Use {@link #AbstractRetryingClientBuilder(RetryRule)}.\n      */\n+    @Deprecated\n     protected AbstractRetryingClientBuilder(RetryStrategy retryStrategy) {\n-        this(requireNonNull(retryStrategy, \"retryStrategy\"), null);\n+        this(RetryRuleUtil.fromRetryStrategy(requireNonNull(retryStrategy, \"retryStrategy\")), null);\n+    }\n+\n+    /**\n+     * Creates a new builder with the specified {@link RetryRuleWithContent}.\n+     */\n+    protected AbstractRetryingClientBuilder(RetryRuleWithContent<O> retryRuleWithContent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14382f6deb058be885ecc7abeecc03570c5889e"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ2MDE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozODozNFrOGT55WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozODozNFrOGT55WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNDY5Nw==", "bodyText": "A comma would be nice right after Otherwise", "url": "https://github.com/line/armeria/pull/2661#discussion_r423524697", "createdAt": "2020-05-12T07:38:34Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a failed request should be retried.\n+ * If you need to determine by looking into the {@link Response}, use {@link RetryRuleWithContent}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@link Backoff#ofDefault() default backoff} if the request HTTP method is\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * and an {@link Exception} is raised or the class of the response status is\n+     * {@link HttpStatusClass#SERVER_ERROR}.\n+     * Otherwise an {@link UnprocessedRequestException} is raised regardless of the request HTTP method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14382f6deb058be885ecc7abeecc03570c5889e"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ2NDM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleDecision.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozOTo1MFrOGT57-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODowNjoyNFrOGT65TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNTM3MA==", "bodyText": "How about renaming to RetryDecision for brevity?", "url": "https://github.com/line/armeria/pull/2661#discussion_r423525370", "createdAt": "2020-05-12T07:39:50Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleDecision.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A {@link RetryRuleDecision} that determines whether a {@link RetryRule} retries with a {@link Backoff},\n+ * skips the current {@link RetryRule} or no retries.\n+ */\n+public final class RetryRuleDecision {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14382f6deb058be885ecc7abeecc03570c5889e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0MTA2OQ==", "bodyText": "The name is good to me. \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/2661#discussion_r423541069", "createdAt": "2020-05-12T08:06:24Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleDecision.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A {@link RetryRuleDecision} that determines whether a {@link RetryRule} retries with a {@link Backoff},\n+ * skips the current {@link RetryRule} or no retries.\n+ */\n+public final class RetryRuleDecision {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNTM3MA=="}, "originalCommit": {"oid": "c14382f6deb058be885ecc7abeecc03570c5889e"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ3MzM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo0MjoyOVrOGT6B2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo1ODo1OVrOGT6opQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNjg3Mg==", "bodyText": "Could be package-local?", "url": "https://github.com/line/armeria/pull/2661#discussion_r423526872", "createdAt": "2020-05-12T07:42:29Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "diffHunk": "@@ -70,42 +70,68 @@\n             AttributeKey.valueOf(AbstractRetryingClient.class, \"STATE\");\n \n     @Nullable\n-    private final RetryStrategy retryStrategy;\n+    private final RetryRule retryRule;\n \n     @Nullable\n-    private final RetryStrategyWithContent<O> retryStrategyWithContent;\n+    private final RetryRuleWithContent<O> retryRuleWithContent;\n \n     private final int maxTotalAttempts;\n     private final long responseTimeoutMillisForEachAttempt;\n \n     /**\n      * Creates a new instance that decorates the specified {@link Client}.\n      */\n+    protected AbstractRetryingClient(Client<I, O> delegate, RetryRule retryRule,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14382f6deb058be885ecc7abeecc03570c5889e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzMTIzNw==", "bodyText": "OK, then will guide the deprecated constructor to use the builder of RetryingClient or RetryRpcClient?", "url": "https://github.com/line/armeria/pull/2661#discussion_r423531237", "createdAt": "2020-05-12T07:50:02Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "diffHunk": "@@ -70,42 +70,68 @@\n             AttributeKey.valueOf(AbstractRetryingClient.class, \"STATE\");\n \n     @Nullable\n-    private final RetryStrategy retryStrategy;\n+    private final RetryRule retryRule;\n \n     @Nullable\n-    private final RetryStrategyWithContent<O> retryStrategyWithContent;\n+    private final RetryRuleWithContent<O> retryRuleWithContent;\n \n     private final int maxTotalAttempts;\n     private final long responseTimeoutMillisForEachAttempt;\n \n     /**\n      * Creates a new instance that decorates the specified {@link Client}.\n      */\n+    protected AbstractRetryingClient(Client<I, O> delegate, RetryRule retryRule,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNjg3Mg=="}, "originalCommit": {"oid": "c14382f6deb058be885ecc7abeecc03570c5889e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzNjgwNQ==", "bodyText": "Yes!", "url": "https://github.com/line/armeria/pull/2661#discussion_r423536805", "createdAt": "2020-05-12T07:58:59Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "diffHunk": "@@ -70,42 +70,68 @@\n             AttributeKey.valueOf(AbstractRetryingClient.class, \"STATE\");\n \n     @Nullable\n-    private final RetryStrategy retryStrategy;\n+    private final RetryRule retryRule;\n \n     @Nullable\n-    private final RetryStrategyWithContent<O> retryStrategyWithContent;\n+    private final RetryRuleWithContent<O> retryRuleWithContent;\n \n     private final int maxTotalAttempts;\n     private final long responseTimeoutMillisForEachAttempt;\n \n     /**\n      * Creates a new instance that decorates the specified {@link Client}.\n      */\n+    protected AbstractRetryingClient(Client<I, O> delegate, RetryRule retryRule,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNjg3Mg=="}, "originalCommit": {"oid": "c14382f6deb058be885ecc7abeecc03570c5889e"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ3NTYwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo0MzowNlrOGT6DMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo0MzowNlrOGT6DMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNzIxOA==", "bodyText": "Could be final?", "url": "https://github.com/line/armeria/pull/2661#discussion_r423527218", "createdAt": "2020-05-12T07:43:06Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "diffHunk": "@@ -137,24 +163,46 @@ protected static void onRetryingComplete(ClientRequestContext ctx) {\n         ctx.logBuilder().endResponseWithLastChild();\n     }\n \n+    /**\n+     * Returns the {@link RetryRule}.\n+     *\n+     * @throws IllegalStateException if the {@link RetryRule} is not set\n+     */\n+    protected RetryRule retryRule() {\n+        checkState(retryRule != null, \"retryRule is not set.\");\n+        return retryRule;\n+    }\n+\n     /**\n      * Returns the {@link RetryStrategy}.\n      *\n      * @throws IllegalStateException if the {@link RetryStrategy} is not set\n+     * @deprecated Use {@link #retryRule()}.\n      */\n+    @Deprecated\n     protected RetryStrategy retryStrategy() {\n-        checkState(retryStrategy != null, \"retryStrategy is not set.\");\n-        return retryStrategy;\n+        return RetryRuleUtil.toRetryStrategy(retryRule());\n+    }\n+\n+    /**\n+     * Returns the {@link RetryRuleWithContent}.\n+     *\n+     * @throws IllegalStateException if the {@link RetryRuleWithContent} is not set\n+     */\n+    protected RetryRuleWithContent<O> retryRuleWithContent() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14382f6deb058be885ecc7abeecc03570c5889e"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ3NTgwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo0MzoxMFrOGT6DVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo0MzoxMFrOGT6DVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNzI1Mw==", "bodyText": "Could be final?", "url": "https://github.com/line/armeria/pull/2661#discussion_r423527253", "createdAt": "2020-05-12T07:43:10Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java", "diffHunk": "@@ -137,24 +163,46 @@ protected static void onRetryingComplete(ClientRequestContext ctx) {\n         ctx.logBuilder().endResponseWithLastChild();\n     }\n \n+    /**\n+     * Returns the {@link RetryRule}.\n+     *\n+     * @throws IllegalStateException if the {@link RetryRule} is not set\n+     */\n+    protected RetryRule retryRule() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14382f6deb058be885ecc7abeecc03570c5889e"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzcyNTYxOnYy", "diffSide": "RIGHT", "path": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListenerBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODo0ODowN1rOGT8inw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODo0ODowN1rOGT8inw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU2ODAzMQ==", "bodyText": "Thanks, @ikhoon \ud83d\ude47", "url": "https://github.com/line/armeria/pull/2661#discussion_r423568031", "createdAt": "2020-05-12T08:48:07Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListenerBuilder.java", "diffHunk": "@@ -85,7 +85,7 @@\n     ZooKeeperUpdatingListenerBuilder(String zkConnectionStr, String zNodePath) {\n         super(zkConnectionStr);\n         this.zNodePath = zNodePath;\n-        checkArgument(!this.zNodePath.isEmpty(), \"zNodePath can't be empty\");\n+        checkArgument(!this.zNodePath.isEmpty(), \"zNodePath can't be empty.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd5a5e599465f156f33ed0b2236de8a5b03e1d16"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTI2MTc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjo0NDoyM1rOGUflFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjo1NDoyMVrOGUfurg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0MjEwMA==", "bodyText": "Remove", "url": "https://github.com/line/armeria/pull/2661#discussion_r424142100", "createdAt": "2020-05-13T02:44:23Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a failed request should be retried.\n+ * If you need to determine by looking into the {@link Response}, use {@link RetryRuleWithContent}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@link Backoff#ofDefault() default backoff} if the request HTTP method is\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * and an {@link Exception} is raised or the class of the response status is\n+     * {@link HttpStatusClass#SERVER_ERROR}.\n+     * Otherwise, an {@link UnprocessedRequestException} is raised regardless of the request HTTP method.\n+     *\n+     * <p>Note that a client can safely retry a failed request with this rule if an endpoint service produces\n+     * the same result (no side effects) on idempotent HTTP methods or {@link UnprocessedRequestException}.\n+     *\n+     * <p>This method is a shortcut for:\n+     * <pre>{@code\n+     * RetryRule.of(RetryRule.builder(HttpMethods.idempotentMethods())\n+     *                       .onIdempotentMethods()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18d5dfd33170485d84332eff8cb33f40a662c5a"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0NDU1OA==", "bodyText": "Oops... \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2661#discussion_r424144558", "createdAt": "2020-05-13T02:54:21Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.retry;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a failed request should be retried.\n+ * If you need to determine by looking into the {@link Response}, use {@link RetryRuleWithContent}.\n+ */\n+@FunctionalInterface\n+public interface RetryRule {\n+\n+    /**\n+     * Returns a newly created {@link RetryRule} that will retry with the\n+     * {@link Backoff#ofDefault() default backoff} if the request HTTP method is\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">idempotent</a>\n+     * and an {@link Exception} is raised or the class of the response status is\n+     * {@link HttpStatusClass#SERVER_ERROR}.\n+     * Otherwise, an {@link UnprocessedRequestException} is raised regardless of the request HTTP method.\n+     *\n+     * <p>Note that a client can safely retry a failed request with this rule if an endpoint service produces\n+     * the same result (no side effects) on idempotent HTTP methods or {@link UnprocessedRequestException}.\n+     *\n+     * <p>This method is a shortcut for:\n+     * <pre>{@code\n+     * RetryRule.of(RetryRule.builder(HttpMethods.idempotentMethods())\n+     *                       .onIdempotentMethods()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0MjEwMA=="}, "originalCommit": {"oid": "f18d5dfd33170485d84332eff8cb33f40a662c5a"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTY0ODAxOnYy", "diffSide": "RIGHT", "path": "site/src/sphinx/client-retry.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjozMzo1MlrOGUjPQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjozMzo1MlrOGUjPQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwMjA1MA==", "bodyText": "nit: an -> a", "url": "https://github.com/line/armeria/pull/2661#discussion_r424202050", "createdAt": "2020-05-13T06:33:52Z", "author": {"login": "minwoox"}, "path": "site/src/sphinx/client-retry.rst", "diffHunk": "@@ -106,70 +117,38 @@ You can return a different :api:`Backoff` according to the response status.\n \n     import com.linecorp.armeria.common.HttpStatusClass;\n \n-    new RetryStrategy() {\n-        Backoff backoffOnServerErrorOrTimeout = Backoff.ofDefault();\n-        Backoff backoffOnConflict = Backoff.fixed(100);\n-\n-        @Override\n-        public CompletionStage<Backoff> shouldRetry(ClientRequestContext ctx,\n-                                                    @Nullable Throwable cause) {\n-            if (cause != null) {\n-                if (cause instanceof ResponseTimeoutException ||\n-                    cause instanceof UnprocessedRequestException) {\n-                    // The response timed out or the request has not been handled\n-                    // by the server.\n-                    return CompletableFuture.completedFuture(backoffOnServerErrorOrTimeout);\n-                }\n-            }\n-\n-            HttpStatus status = ctx.log().responseHeaders().status();\n-            if (status.codeClass() == HttpStatusClass.SERVER_ERROR) {\n-                return CompletableFuture.completedFuture(backoffOnServerErrorOrTimeout);\n-            } else if (status == HttpStatus.CONFLICT) {\n-                return CompletableFuture.completedFuture(backoffOnConflict);\n-            }\n-\n-            // Return null to stop retrying.\n-            return CompletableFuture.completedFuture(null);\n-        }\n-    };\n-\n-If you need to determine whether you need to retry by looking into the response content, you should implement\n-:api:`RetryStrategyWithContent` and specify it when you create an :api:`WebClient`\n+    Backoff backoffOnServerErrorOrTimeout = Backoff.ofDefault();\n+    Backoff backoffOnConflict = Backoff.fixed(100);\n+    RetryRule.onException(ex -> ex instanceof ResponseTimeoutException ||\n+                                ex instanceof UnprocessedRequestException)\n+             .thenBackoff(backoffOnServerErrorOrTimeout)\n+             .orElse(RetryRule.onStatusClass(HttpStatusClass.SERVER_ERROR)\n+                              .thenBackoff(backoffOnServerErrorOrTimeout))\n+             .orElse(RetryRule.onStatus(HttpStatus.CONFLICT).thenBackoff(backoffOnConflict));\n+\n+If you need to determine whether you need to retry by looking into the response content, you can build\n+:api:`RetryRuleWithContent` and specify it when you create an :api:`WebClient`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375bc6963830bd4d47111d98d3f03cfd3fc00aa1"}, "originalPosition": 138}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2504, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}