{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0NzI2Nzg4", "number": 3115, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDowODoxOFrOEuakJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwNzo1NTozNVrOEuxRPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTA1MTkwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/logging/ContentPreviewingClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDowODoxOFrOHizRXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowNTowOFrOHi2BuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1MzY2Mg==", "bodyText": "Shouldn't it be SETTING_CONTENT_PREVIEW? Technically we did not set any preview they setting true.", "url": "https://github.com/line/armeria/pull/3115#discussion_r506253662", "createdAt": "2020-10-16T10:08:18Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/logging/ContentPreviewingClient.java", "diffHunk": "@@ -54,6 +56,9 @@\n  */\n public final class ContentPreviewingClient extends SimpleDecoratingHttpClient {\n \n+    private static final AttributeKey<Boolean> CONTENT_PREVIEWING_SET =\n+            AttributeKey.valueOf(ContentPreviewingClient.class, \"CONTENT_PREVIEWING_SET\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf9abbfad2965ea56b2572a3ee94f0114d2c9ac1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI5ODgwOQ==", "bodyText": "Thanks, fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/3115#discussion_r506298809", "createdAt": "2020-10-16T11:05:08Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/logging/ContentPreviewingClient.java", "diffHunk": "@@ -54,6 +56,9 @@\n  */\n public final class ContentPreviewingClient extends SimpleDecoratingHttpClient {\n \n+    private static final AttributeKey<Boolean> CONTENT_PREVIEWING_SET =\n+            AttributeKey.valueOf(ContentPreviewingClient.class, \"CONTENT_PREVIEWING_SET\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1MzY2Mg=="}, "originalCommit": {"oid": "cf9abbfad2965ea56b2572a3ee94f0114d2c9ac1"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTgyNjExOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/client/HttpResponseDecoderTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjo1NTo1MVrOHi7UBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwNzo1NTo0NFrOHjYVQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM4NTQxNA==", "bodyText": "maybe some more assertions are needed here?\ni don't see where the request is aborted (could be a comment if I'm just not seeing it)\nalso, might need a signal to ensure the exceptionally was actually invoked, as I would guess we are assuming that hook is in fact called. If it weren't the assertion would silently not run", "url": "https://github.com/line/armeria/pull/3115#discussion_r506385414", "createdAt": "2020-10-16T12:55:51Z", "author": {"login": "codefromthecrypt"}, "path": "core/src/test/java/com/linecorp/armeria/client/HttpResponseDecoderTest.java", "diffHunk": "@@ -107,4 +111,17 @@ void confirmResponseStartAndEndInTheSameThread(SessionProtocol protocol)\n         latch.await(System.getenv(\"CI\") != null ? 60 : 10, TimeUnit.SECONDS);\n         assertThat(failed.get()).isFalse();\n     }\n+\n+    @ParameterizedTest\n+    @EnumSource(value = SessionProtocol.class, names = {\"H1C\", \"H2C\"})\n+    void responseCompleteNormallyIfRequestIsAborted(SessionProtocol protocol) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b84a3f153d0489ff97849762d20b3c7b10b34b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc4OTEyMA==", "bodyText": "That's a good point.\nChanged to use handle which is always executed and add the comment. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3115#discussion_r506789120", "createdAt": "2020-10-17T03:42:40Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/client/HttpResponseDecoderTest.java", "diffHunk": "@@ -107,4 +111,17 @@ void confirmResponseStartAndEndInTheSameThread(SessionProtocol protocol)\n         latch.await(System.getenv(\"CI\") != null ? 60 : 10, TimeUnit.SECONDS);\n         assertThat(failed.get()).isFalse();\n     }\n+\n+    @ParameterizedTest\n+    @EnumSource(value = SessionProtocol.class, names = {\"H1C\", \"H2C\"})\n+    void responseCompleteNormallyIfRequestIsAborted(SessionProtocol protocol) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM4NTQxNA=="}, "originalCommit": {"oid": "b5b84a3f153d0489ff97849762d20b3c7b10b34b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjg2MDg2NA==", "bodyText": "indeed it is addressed!", "url": "https://github.com/line/armeria/pull/3115#discussion_r506860864", "createdAt": "2020-10-17T07:55:44Z", "author": {"login": "codefromthecrypt"}, "path": "core/src/test/java/com/linecorp/armeria/client/HttpResponseDecoderTest.java", "diffHunk": "@@ -107,4 +111,17 @@ void confirmResponseStartAndEndInTheSameThread(SessionProtocol protocol)\n         latch.await(System.getenv(\"CI\") != null ? 60 : 10, TimeUnit.SECONDS);\n         assertThat(failed.get()).isFalse();\n     }\n+\n+    @ParameterizedTest\n+    @EnumSource(value = SessionProtocol.class, names = {\"H1C\", \"H2C\"})\n+    void responseCompleteNormallyIfRequestIsAborted(SessionProtocol protocol) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM4NTQxNA=="}, "originalCommit": {"oid": "b5b84a3f153d0489ff97849762d20b3c7b10b34b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NDc3MTgzOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/client/HttpResponseDecoderTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwNzo1NTozNVrOHjYVAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMToyMDoyOFrOHj0MvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjg2MDgwMQ==", "bodyText": "Abort sounds like an error.. I wonder if there's another way to say this as it sounds scary terminology in response to someone calling close (as opposed to cancel or abort)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // The request is aborted in HttpResponseDecoder.close(...) after the client receives the response.\n          \n          \n            \n                    // The stream is aborted in HttpResponseDecoder.close(...) after the client receives the response.", "url": "https://github.com/line/armeria/pull/3115#discussion_r506860801", "createdAt": "2020-10-17T07:55:35Z", "author": {"login": "codefromthecrypt"}, "path": "core/src/test/java/com/linecorp/armeria/client/HttpResponseDecoderTest.java", "diffHunk": "@@ -107,4 +111,18 @@ void confirmResponseStartAndEndInTheSameThread(SessionProtocol protocol)\n         latch.await(System.getenv(\"CI\") != null ? 60 : 10, TimeUnit.SECONDS);\n         assertThat(failed.get()).isFalse();\n     }\n+\n+    @ParameterizedTest\n+    @EnumSource(value = SessionProtocol.class, names = {\"H1C\", \"H2C\"})\n+    void responseCompleteNormallyIfRequestIsAborted(SessionProtocol protocol) throws Exception {\n+        final WebClient client = WebClient.of(server.uri(protocol));\n+        final HttpRequestWriter request = HttpRequest.streaming(RequestHeaders.of(HttpMethod.POST, \"/\"));\n+        final AggregatedHttpResponse res = client.execute(request).aggregate().join();\n+        assertThat(res.contentUtf8()).isEqualTo(\"Hello, Armeria!\");\n+        // The request is aborted in HttpResponseDecoder.close(...) after the client receives the response.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651233f7c4aa10a56c4a8c2fce9ae95c841fa397"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMwNDE2Nw==", "bodyText": "Indeed, we call HttpRequest.abort() here https://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java#L299`", "url": "https://github.com/line/armeria/pull/3115#discussion_r507304167", "createdAt": "2020-10-19T01:03:01Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/client/HttpResponseDecoderTest.java", "diffHunk": "@@ -107,4 +111,18 @@ void confirmResponseStartAndEndInTheSameThread(SessionProtocol protocol)\n         latch.await(System.getenv(\"CI\") != null ? 60 : 10, TimeUnit.SECONDS);\n         assertThat(failed.get()).isFalse();\n     }\n+\n+    @ParameterizedTest\n+    @EnumSource(value = SessionProtocol.class, names = {\"H1C\", \"H2C\"})\n+    void responseCompleteNormallyIfRequestIsAborted(SessionProtocol protocol) throws Exception {\n+        final WebClient client = WebClient.of(server.uri(protocol));\n+        final HttpRequestWriter request = HttpRequest.streaming(RequestHeaders.of(HttpMethod.POST, \"/\"));\n+        final AggregatedHttpResponse res = client.execute(request).aggregate().join();\n+        assertThat(res.contentUtf8()).isEqualTo(\"Hello, Armeria!\");\n+        // The request is aborted in HttpResponseDecoder.close(...) after the client receives the response.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjg2MDgwMQ=="}, "originalCommit": {"oid": "651233f7c4aa10a56c4a8c2fce9ae95c841fa397"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMwODQwNQ==", "bodyText": "Perhaps, we can check if it's an instance of StreamWriter and call StreamWriter.close() if it is. Let me try that.", "url": "https://github.com/line/armeria/pull/3115#discussion_r507308405", "createdAt": "2020-10-19T01:08:06Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/client/HttpResponseDecoderTest.java", "diffHunk": "@@ -107,4 +111,18 @@ void confirmResponseStartAndEndInTheSameThread(SessionProtocol protocol)\n         latch.await(System.getenv(\"CI\") != null ? 60 : 10, TimeUnit.SECONDS);\n         assertThat(failed.get()).isFalse();\n     }\n+\n+    @ParameterizedTest\n+    @EnumSource(value = SessionProtocol.class, names = {\"H1C\", \"H2C\"})\n+    void responseCompleteNormallyIfRequestIsAborted(SessionProtocol protocol) throws Exception {\n+        final WebClient client = WebClient.of(server.uri(protocol));\n+        final HttpRequestWriter request = HttpRequest.streaming(RequestHeaders.of(HttpMethod.POST, \"/\"));\n+        final AggregatedHttpResponse res = client.execute(request).aggregate().join();\n+        assertThat(res.contentUtf8()).isEqualTo(\"Hello, Armeria!\");\n+        // The request is aborted in HttpResponseDecoder.close(...) after the client receives the response.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjg2MDgwMQ=="}, "originalCommit": {"oid": "651233f7c4aa10a56c4a8c2fce9ae95c841fa397"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMxMzU2OQ==", "bodyText": "It's an HeaderOverridingHttpRequest so I think I have to refactor the StreamMessage a little bit to get it working.\nLet me make an issue for that. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3115#discussion_r507313569", "createdAt": "2020-10-19T01:15:16Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/client/HttpResponseDecoderTest.java", "diffHunk": "@@ -107,4 +111,18 @@ void confirmResponseStartAndEndInTheSameThread(SessionProtocol protocol)\n         latch.await(System.getenv(\"CI\") != null ? 60 : 10, TimeUnit.SECONDS);\n         assertThat(failed.get()).isFalse();\n     }\n+\n+    @ParameterizedTest\n+    @EnumSource(value = SessionProtocol.class, names = {\"H1C\", \"H2C\"})\n+    void responseCompleteNormallyIfRequestIsAborted(SessionProtocol protocol) throws Exception {\n+        final WebClient client = WebClient.of(server.uri(protocol));\n+        final HttpRequestWriter request = HttpRequest.streaming(RequestHeaders.of(HttpMethod.POST, \"/\"));\n+        final AggregatedHttpResponse res = client.execute(request).aggregate().join();\n+        assertThat(res.contentUtf8()).isEqualTo(\"Hello, Armeria!\");\n+        // The request is aborted in HttpResponseDecoder.close(...) after the client receives the response.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjg2MDgwMQ=="}, "originalCommit": {"oid": "651233f7c4aa10a56c4a8c2fce9ae95c841fa397"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMxNzQzNw==", "bodyText": "#3117 Created.", "url": "https://github.com/line/armeria/pull/3115#discussion_r507317437", "createdAt": "2020-10-19T01:20:28Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/client/HttpResponseDecoderTest.java", "diffHunk": "@@ -107,4 +111,18 @@ void confirmResponseStartAndEndInTheSameThread(SessionProtocol protocol)\n         latch.await(System.getenv(\"CI\") != null ? 60 : 10, TimeUnit.SECONDS);\n         assertThat(failed.get()).isFalse();\n     }\n+\n+    @ParameterizedTest\n+    @EnumSource(value = SessionProtocol.class, names = {\"H1C\", \"H2C\"})\n+    void responseCompleteNormallyIfRequestIsAborted(SessionProtocol protocol) throws Exception {\n+        final WebClient client = WebClient.of(server.uri(protocol));\n+        final HttpRequestWriter request = HttpRequest.streaming(RequestHeaders.of(HttpMethod.POST, \"/\"));\n+        final AggregatedHttpResponse res = client.execute(request).aggregate().join();\n+        assertThat(res.contentUtf8()).isEqualTo(\"Hello, Armeria!\");\n+        // The request is aborted in HttpResponseDecoder.close(...) after the client receives the response.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjg2MDgwMQ=="}, "originalCommit": {"oid": "651233f7c4aa10a56c4a8c2fce9ae95c841fa397"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1957, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}