{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNDk1NzU1", "number": 3083, "title": "Allow to set a custom route for gRPC service", "bodyText": "Motivation:\nWhen users want to serve unframed gRPC service, sometimes they might want to use a RESTful URL for the endpoint.\nA gRPC service path is not a directory that is not divided by /.\nIt is the same as package name such as \"/api.v1.service.UserService/GetUsers\".\nIt is not natural for a REST client. \"/api/v1/service/users\" would be better for a directory-based security control or logging.\nSee #3072 for more details.\nModifications:\n\nAdd addService(path, grpcService) to GrpcServiceBuilder for replacing the existing service path.\nAdd addService(path, grpcService, method) to GrpcServiceBuilder for replacing the default route path with the given path\nAdd methods() to GrpcService for providing the pair of route path and served method.\nRefactor HandlerRegistery to hold a part of methods from a service.\n\nResult:\n\nYou can now bind a gRPC service to a custom route path.\nServerBuilder sb = ...\nsb.service(GrpcService.builder()\n                      // Bind 'getProfile()' method to '/v1/api/users/profile'\n                      .addService(\"/v1/api/users/profile\", userService,\n                                  UserServiceGrpc.getProfile())\n                      // Bind 'getFriends()' method to '/v1/api/users/friends'\n                      .addService(\"/v1/api/users/friends\", userService,\n                                  UserServiceGrpc.getFriends())\n                      .build());\n\nFixes #3072", "createdAt": "2020-09-24T14:39:09Z", "url": "https://github.com/line/armeria/pull/3083", "merged": true, "mergeCommit": {"oid": "a27b607254f73a2ec5df436a2b1e70665ae1da05"}, "closed": true, "closedAt": "2020-10-13T13:12:07Z", "author": {"login": "ikhoon"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMB9lhAH2gAyNDkyNDk1NzU1OmMwZjQ5ZGExZDNhZTYyZjQ2ODg4Mzg0ZmMxMmRkNTRlZTUzY2I3M2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQuWtuAH2gAyNDkyNDk1NzU1Ojg2NGI0NzMxNTcxMjAyNGM3MGQwNTE3OWEzYWU4YzY0MzgwOTNiN2E=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c0f49da1d3ae62f46888384fc12dd54ee53cb73f", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/c0f49da1d3ae62f46888384fc12dd54ee53cb73f", "committedDate": "2020-09-24T14:21:30Z", "message": "Allow to set a custom route for gRPC service\n\nMotivation:\n\nWhen users want to serve unframed gRPC service, sometimes they might want to use RESTful URL for the endpoint.\nA gRPC service path is not a directory which is not divided by `/`.\nIt is the same as package name such as \"/api.v1.service.UserService/GetUsers\".\nIt is not natual for REST client. \"/api/v1/service/users/GetUsers\" would be better for security control or logging.\n\nSee #3072 for more details.\n\nModifications:\n\n- Add `addService(path, GrpcService)` to `GrpcServiceBuilder`\n- Make HandlerRegistry.services() return pairs of route path and `ServerServiceDefinition`.\n\nResult:\n\n- You can now bind a gRPC service to a custom route path.\n- Fixes #3072"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43b6670221632761af5d28202dc994bcac6d4607", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/43b6670221632761af5d28202dc994bcac6d4607", "committedDate": "2020-09-24T14:42:30Z", "message": "Checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NjY3MDcx", "url": "https://github.com/line/armeria/pull/3083#pullrequestreview-495667071", "createdAt": "2020-09-24T15:00:29Z", "commit": {"oid": "43b6670221632761af5d28202dc994bcac6d4607"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTowMDozMFrOHXfN7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTowMDozMFrOHXfN7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5MDc2Nw==", "bodyText": "Oops realized I agreed with this idea in the issue but not after looking closer. I think this should take a MethodDescriptor too so the path can refer to a specific method. Would allow \"/hello\" to point to the Hello method. \"/foo/Hello\" still isn't so idiomatic", "url": "https://github.com/line/armeria/pull/3083#discussion_r494390767", "createdAt": "2020-09-24T15:00:30Z", "author": {"login": "anuraaga"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java", "diffHunk": "@@ -126,22 +126,72 @@ public GrpcServiceBuilder addService(ServerServiceDefinition service) {\n         return this;\n     }\n \n+    /**\n+     * Adds a gRPC {@link ServerServiceDefinition} to this {@link GrpcServiceBuilder}, such as\n+     * what's returned by {@link BindableService#bindService()}.\n+     *\n+     * <p>Note that the specified {@code path} replaces the normal gRPC service path.\n+     * Let's say you have the following gRPC service definition.\n+     * <pre>{@code\n+     * package example.grpc.hello;\n+     *\n+     * service HelloService {\n+     *   rpc Hello (HelloRequest) returns (HelloReply) {}\n+     * }}</pre>\n+     * The normal gRPC service path for the {@code Hello} method is {@code \"/example.grpc.hello/Hello\"}.\n+     * However if you set the {@code path} to {@code \"foo\"}, the {@code Hello} method will be served at\n+     * {@code \"/foo/Hello\"}. This is useful for supporting unframed gRPC with HTTP idiomatic path.\n+     */\n+    public GrpcServiceBuilder addService(String path, ServerServiceDefinition service) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43b6670221632761af5d28202dc994bcac6d4607"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "929d6fd9d7e0cc3140f8ae869062c1a4b9a483ed", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/929d6fd9d7e0cc3140f8ae869062c1a4b9a483ed", "committedDate": "2020-09-29T05:27:13Z", "message": "Filter out unspecified method from DocService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ba3e5d6e4dd3be4844727f21b0c1702720ecbf3", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/0ba3e5d6e4dd3be4844727f21b0c1702720ecbf3", "committedDate": "2020-09-29T09:22:08Z", "message": "Clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3af5028f81732117213c3208a35eeb25cf731c9f", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/3af5028f81732117213c3208a35eeb25cf731c9f", "committedDate": "2020-09-29T09:34:00Z", "message": "Add GrpcMethodUtil"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MDA4OTEz", "url": "https://github.com/line/armeria/pull/3083#pullrequestreview-499008913", "createdAt": "2020-09-30T00:18:31Z", "commit": {"oid": "3af5028f81732117213c3208a35eeb25cf731c9f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDoxODozMVrOHaI_vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDoxODozMVrOHaI_vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3MjQxMw==", "bodyText": "IIRC we did not add final rigorously in this class because it's forked and we wanted to apply any changes from the upstream in the future.", "url": "https://github.com/line/armeria/pull/3083#discussion_r497172413", "createdAt": "2020-09-30T00:18:31Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/MediaType.java", "diffHunk": "@@ -128,14 +128,14 @@\n     private static final Map<MediaType, MediaType> KNOWN_TYPES = Maps.newHashMap();\n \n     private static MediaType createConstant(String type, String subtype) {\n-        MediaType mediaType =\n+        final MediaType mediaType =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3af5028f81732117213c3208a35eeb25cf731c9f"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MDA5MDE2", "url": "https://github.com/line/armeria/pull/3083#pullrequestreview-499009016", "createdAt": "2020-09-30T00:18:51Z", "commit": {"oid": "3af5028f81732117213c3208a35eeb25cf731c9f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDoxODo1MVrOHaJAiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDoxODo1MVrOHaJAiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3MjYxNw==", "bodyText": "\ud83d\ude47", "url": "https://github.com/line/armeria/pull/3083#discussion_r497172617", "createdAt": "2020-09-30T00:18:51Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/metric/MeterIdPrefixFunction.java", "diffHunk": "@@ -48,7 +47,7 @@\n      * <ul>\n      *   <li>Server-side tags:<ul>\n      *     <li>{@code hostnamePattern} - {@link VirtualHost#hostnamePattern()}\n-     *     <li>{@code route} - {@link Route#patternString()}</li>\n+     *     <li>{@code service} - RPC service name or innermost service class name</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3af5028f81732117213c3208a35eeb25cf731c9f"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MDExMDM0", "url": "https://github.com/line/armeria/pull/3083#pullrequestreview-499011034", "createdAt": "2020-09-30T00:25:37Z", "commit": {"oid": "3af5028f81732117213c3208a35eeb25cf731c9f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDoyNTozN1rOHaJS2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDozNTo1NFrOHaJfSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3NzMwNg==", "bodyText": "Could have used toImmutableMap()?", "url": "https://github.com/line/armeria/pull/3083#discussion_r497177306", "createdAt": "2020-09-30T00:25:37Z", "author": {"login": "trustin"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/FramedGrpcService.java", "diffHunk": "@@ -120,10 +121,12 @@\n         if (supportedSerializationFormats.stream().noneMatch(GrpcSerializationFormats::isJson)) {\n             jsonMarshallers = ImmutableMap.of();\n         } else {\n-            jsonMarshallers =\n-                    registry.services().stream()\n-                            .map(ServerServiceDefinition::getServiceDescriptor)\n-                            .collect(toImmutableMap(ServiceDescriptor::getName, jsonMarshallerFactory));\n+            jsonMarshallers = new HashMap<>();\n+            registry.services().values().stream()\n+                    .map(ServerServiceDefinition::getServiceDescriptor)\n+                    .forEach(descriptor -> {\n+                        jsonMarshallers.put(descriptor.getName(), jsonMarshallerFactory.apply(descriptor));\n+                    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3af5028f81732117213c3208a35eeb25cf731c9f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3ODAwNg==", "bodyText": "Could build these at the constructor?", "url": "https://github.com/line/armeria/pull/3083#discussion_r497178006", "createdAt": "2020-09-30T00:26:50Z", "author": {"login": "trustin"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/FramedGrpcService.java", "diffHunk": "@@ -342,7 +345,15 @@ public boolean isFramed() {\n \n     @Override\n     public List<ServerServiceDefinition> services() {\n-        return registry.services();\n+        return ImmutableList.copyOf(registry.services().values());\n+    }\n+\n+    @Override\n+    public Map<String, MethodDescriptor<?, ?>> methods() {\n+        return registry.methods().entrySet()\n+                       .stream()\n+                       .collect(toImmutableMap(Entry::getKey,\n+                                               entry -> entry.getValue().getMethodDescriptor()));\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3af5028f81732117213c3208a35eeb25cf731c9f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3ODQ5Mg==", "bodyText": "Looks OK, but it'd be nice if we override this method in all our implementations so that it does not re-calculate the map every time.", "url": "https://github.com/line/armeria/pull/3083#discussion_r497178492", "createdAt": "2020-09-30T00:28:47Z", "author": {"login": "trustin"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcService.java", "diffHunk": "@@ -62,6 +68,18 @@ static GrpcServiceBuilder builder() {\n      */\n     List<ServerServiceDefinition> services();\n \n+    /**\n+     * Returns a {@link Map} whose key is a route path and whose value is {@link MethodDescriptor}, which is\n+     * serviced by this service.\n+     */\n+    default Map<String, MethodDescriptor<?, ?>> methods() {\n+        return services().stream()\n+                         .flatMap(service -> service.getMethods().stream())\n+                         .map(ServerMethodDefinition::getMethodDescriptor)\n+                         .distinct()\n+                         .collect(toImmutableMap(MethodDescriptor::getFullMethodName, Function.identity()));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3af5028f81732117213c3208a35eeb25cf731c9f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3OTM2Nw==", "bodyText": "Is there any chance a user actually wanted to bind a method at foo/ instead of foo ?", "url": "https://github.com/line/armeria/pull/3083#discussion_r497179367", "createdAt": "2020-09-30T00:32:06Z", "author": {"login": "trustin"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/HandlerRegistry.java", "diffHunk": "@@ -79,33 +81,110 @@ private HandlerRegistry(List<ServerServiceDefinition> services,\n         return methods.get(methodName);\n     }\n \n-    List<ServerServiceDefinition> services() {\n+    Map<String, ServerServiceDefinition> services() {\n         return services;\n     }\n \n     Map<String, ServerMethodDefinition<?, ?>> methods() {\n         return methods;\n     }\n \n-    static class Builder {\n-        // Store per-service first, to make sure services are added/replaced atomically.\n-        private final HashMap<String, ServerServiceDefinition> services =\n-                new HashMap<String, ServerServiceDefinition>();\n+    static final class Builder {\n+        private final List<Entry> entries = new ArrayList<>();\n \n         Builder addService(ServerServiceDefinition service) {\n-            services.put(service.getServiceDescriptor().getName(), service);\n+            entries.add(new Entry(service.getServiceDescriptor().getName(), service, null));\n             return this;\n         }\n \n+        Builder addService(String path, ServerServiceDefinition service) {\n+            entries.add(new Entry(normalizePath(path), service, null));\n+            return this;\n+        }\n+\n+        Builder addService(String path, ServerServiceDefinition service,\n+                            MethodDescriptor<?, ?> methodDescriptor) {\n+            entries.add(new Entry(normalizePath(path), service, methodDescriptor));\n+            return this;\n+        }\n+\n+        private static String normalizePath(String path) {\n+            if (path.isEmpty()) {\n+                return path;\n+            }\n+\n+            if (path.charAt(0) == '/') {\n+                path = path.substring(1);\n+            }\n+\n+            if (path.isEmpty()) {\n+                return path;\n+            }\n+\n+            final int lastCharIndex = path.length() - 1;\n+            if (path.charAt(lastCharIndex) == '/') {\n+                return path.substring(0, lastCharIndex);\n+            } else {\n+                return path;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3af5028f81732117213c3208a35eeb25cf731c9f"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4MDQ5MA==", "bodyText": "Global comment: ImmutableList.copyOf().stream() could be just Streams.stream(iterator) (Guava)", "url": "https://github.com/line/armeria/pull/3083#discussion_r497180490", "createdAt": "2020-09-30T00:35:54Z", "author": {"login": "trustin"}, "path": "grpc/src/test/java/com/linecorp/armeria/internal/server/grpc/GrpcDocServiceWithCustomRouteTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.server.grpc;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.grpc.testing.Messages.SimpleRequest;\n+import com.linecorp.armeria.grpc.testing.TestServiceGrpc;\n+import com.linecorp.armeria.grpc.testing.TestServiceGrpc.TestServiceImplBase;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.docs.DocService;\n+import com.linecorp.armeria.server.grpc.GrpcService;\n+import com.linecorp.armeria.testing.junit5.server.ServerExtension;\n+\n+class GrpcDocServiceWithCustomRouteTest {\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+    private static final TestServiceImplBase testService = new TestServiceImplBase() {};\n+\n+    @RegisterExtension\n+    static ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.service(GrpcService.builder()\n+                                  .addService(\"/empty\", testService, TestServiceGrpc.getEmptyCallMethod())\n+                                  .addService(\"/unary\", testService, TestServiceGrpc.getUnaryCallMethod())\n+                                  .enableUnframedRequests(true)\n+                                  .build());\n+            sb.serviceUnder(\"/docs\",\n+                            DocService.builder()\n+                                      .exampleRequests(TestServiceGrpc.SERVICE_NAME, \"UnaryCall\",\n+                                                       SimpleRequest.newBuilder()\n+                                                                    .setResponseSize(1000)\n+                                                                    .setFillUsername(true).build())\n+                                      .build()\n+            );\n+        }\n+    };\n+\n+    @RegisterExtension\n+    static ServerExtension unifiedServer = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.service(GrpcService.builder()\n+                                  .addService(testService)\n+                                  .enableUnframedRequests(false)\n+                                  .build());\n+            sb.serviceUnder(\"/internal\", GrpcService.builder()\n+                                                    .addService(\"/empty\", testService,\n+                                                                TestServiceGrpc.getEmptyCallMethod())\n+                                                    .addService(\"/unary\", testService,\n+                                                                TestServiceGrpc.getUnaryCallMethod())\n+                                                    .enableUnframedRequests(true)\n+                                                    .build());\n+            sb.serviceUnder(\"/docs\",\n+                            DocService.builder()\n+                                      .exampleRequests(TestServiceGrpc.SERVICE_NAME, \"UnaryCall\",\n+                                                       SimpleRequest.newBuilder()\n+                                                                    .setResponseSize(1000)\n+                                                                    .setFillUsername(true).build())\n+                                      .build()\n+            );\n+        }\n+    };\n+\n+    @Test\n+    void exposeOnlyRoutingMethod() throws Exception {\n+        final WebClient client = WebClient.of(server.httpUri());\n+        final AggregatedHttpResponse response = client.get(\"/docs/specification.json\").aggregate().join();\n+        final JsonNode node = mapper.readValue(response.content().array(), JsonNode.class);\n+        final List<JsonNode> methods = ImmutableList.copyOf(node.at(\"/services/0/methods\").elements());\n+        assertThat(methods).hasSize(2);\n+        assertThat(methods).anyMatch(method -> \"EmptyCall\".equals(method.get(\"name\").textValue()));\n+        assertThat(methods).anyMatch(method -> \"UnaryCall\".equals(method.get(\"name\").textValue()));\n+    }\n+\n+    @Test\n+    void mixUnframedWithFramed() throws Exception {\n+        final WebClient client = WebClient.of(unifiedServer.httpUri());\n+        final AggregatedHttpResponse response = client.get(\"/docs/specification.json\").aggregate().join();\n+\n+        final JsonNode node = mapper.readValue(response.content().array(), JsonNode.class);\n+        final List<JsonNode> methods = ImmutableList.copyOf(node.at(\"/services/0/methods\").elements());\n+        assertThat(methods).hasSize(testService.bindService().getMethods().size());\n+\n+        final MediaType protobuf = MediaType.PROTOBUF.withParameter(\"protocol\", \"gRPC\");\n+        final MediaType json = MediaType.JSON_UTF_8.withParameter(\"protocol\", \"gRPC\");\n+        for (JsonNode method : methods) {\n+            final JsonNode endpoints = method.get(\"endpoints\");\n+            final String methodName = method.get(\"name\").textValue();\n+            if (\"EmptyCall\".equals(methodName) || \"UnaryCall\".equals(methodName)) {\n+                assertThat(validateEndpointMimeType(endpoints, protobuf)).isTrue();\n+                assertThat(validateEndpointMimeType(endpoints, json)).isTrue();\n+            } else {\n+                assertThat(validateEndpointMimeType(endpoints, protobuf)).isFalse();\n+                assertThat(validateEndpointMimeType(endpoints, json)).isFalse();\n+            }\n+        }\n+    }\n+\n+    private static boolean validateEndpointMimeType(JsonNode endpoint, MediaType mediaType) {\n+        return ImmutableList\n+                       .copyOf(endpoint.elements()).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3af5028f81732117213c3208a35eeb25cf731c9f"}, "originalPosition": 129}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d9e0182d855d8491da563d191d6887cb49d9c94", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/8d9e0182d855d8491da563d191d6887cb49d9c94", "committedDate": "2020-10-05T04:02:38Z", "message": "Addess comments by @trustin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba1e373d35256fc83dfb176a5991313c7ad5b56e", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/ba1e373d35256fc83dfb176a5991313c7ad5b56e", "committedDate": "2020-10-05T04:28:17Z", "message": "Merge branch 'master' into grpc-custom-route"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxOTQ0NTg4", "url": "https://github.com/line/armeria/pull/3083#pullrequestreview-501944588", "createdAt": "2020-10-05T11:04:46Z", "commit": {"oid": "ba1e373d35256fc83dfb176a5991313c7ad5b56e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMTowNDo0NlrOHcYDXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjoxNTo0NFrOHcaVMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxNjI1NA==", "bodyText": "nit: indentation?", "url": "https://github.com/line/armeria/pull/3083#discussion_r499516254", "createdAt": "2020-10-05T11:04:46Z", "author": {"login": "minwoox"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/FramedGrpcService.java", "diffHunk": "@@ -112,6 +113,9 @@\n                       boolean useClientTimeoutHeader,\n                       int maxInboundMessageSizeBytes) {\n         this.registry = requireNonNull(registry, \"registry\");\n+        methods = registry.methods().entrySet().stream()\n+                         .collect(toImmutableMap(Entry::getKey,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1e373d35256fc83dfb176a5991313c7ad5b56e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU1MzU4Nw==", "bodyText": "nit: could remove if and just call newRegistryBuilder.addService(entry.path(), intercepted, entry.method()); for simplicity. (We can make the method take nullable methodDecriptor because it's hidden API)", "url": "https://github.com/line/armeria/pull/3083#discussion_r499553587", "createdAt": "2020-10-05T12:15:44Z", "author": {"login": "minwoox"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java", "diffHunk": "@@ -343,15 +448,21 @@ public GrpcServiceBuilder useClientTimeoutHeader(boolean useClientTimeoutHeader)\n     public GrpcService build() {\n         final HandlerRegistry handlerRegistry;\n         if (USE_COROUTINE_CONTEXT_INTERCEPTOR) {\n-            final HandlerRegistry registry = registryBuilder.build();\n             final ServerInterceptor coroutineContextInterceptor =\n                     new ArmeriaCoroutineContextInterceptor(useBlockingTaskExecutor);\n-            final HandlerRegistry.Builder registryBuilder = new HandlerRegistry.Builder();\n-            for (ServerServiceDefinition serviceDefinition : registry.services()) {\n-                registryBuilder.addService(ServerInterceptors.intercept(serviceDefinition,\n-                                                                        coroutineContextInterceptor));\n+            final HandlerRegistry.Builder newRegistryBuilder = new HandlerRegistry.Builder();\n+\n+            for (Entry entry : registryBuilder.entries()) {\n+                final MethodDescriptor<?, ?> methodDescriptor = entry.method();\n+                final ServerServiceDefinition intercepted =\n+                        ServerInterceptors.intercept(entry.service(), coroutineContextInterceptor);\n+                if (methodDescriptor != null) {\n+                    newRegistryBuilder.addService(entry.path(), intercepted, methodDescriptor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1e373d35256fc83dfb176a5991313c7ad5b56e"}, "originalPosition": 163}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMDA4OTgz", "url": "https://github.com/line/armeria/pull/3083#pullrequestreview-502008983", "createdAt": "2020-10-05T12:35:26Z", "commit": {"oid": "ba1e373d35256fc83dfb176a5991313c7ad5b56e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjozNToyNlrOHca_sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjozNToyNlrOHca_sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU2NDQ2NQ==", "bodyText": "indentation here as well. \ud83e\udd23", "url": "https://github.com/line/armeria/pull/3083#discussion_r499564465", "createdAt": "2020-10-05T12:35:26Z", "author": {"login": "minwoox"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/HandlerRegistry.java", "diffHunk": "@@ -79,33 +81,101 @@ private HandlerRegistry(List<ServerServiceDefinition> services,\n         return methods.get(methodName);\n     }\n \n-    List<ServerServiceDefinition> services() {\n+    Map<String, ServerServiceDefinition> services() {\n         return services;\n     }\n \n     Map<String, ServerMethodDefinition<?, ?>> methods() {\n         return methods;\n     }\n \n-    static class Builder {\n-        // Store per-service first, to make sure services are added/replaced atomically.\n-        private final HashMap<String, ServerServiceDefinition> services =\n-                new HashMap<String, ServerServiceDefinition>();\n+    static final class Builder {\n+        private final List<Entry> entries = new ArrayList<>();\n \n         Builder addService(ServerServiceDefinition service) {\n-            services.put(service.getServiceDescriptor().getName(), service);\n+            entries.add(new Entry(service.getServiceDescriptor().getName(), service, null));\n             return this;\n         }\n \n+        Builder addService(String path, ServerServiceDefinition service) {\n+            entries.add(new Entry(normalizePath(path), service, null));\n+            return this;\n+        }\n+\n+        Builder addService(String path, ServerServiceDefinition service,\n+                            MethodDescriptor<?, ?> methodDescriptor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1e373d35256fc83dfb176a5991313c7ad5b56e"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMTAyMTI3", "url": "https://github.com/line/armeria/pull/3083#pullrequestreview-502102127", "createdAt": "2020-10-05T14:16:41Z", "commit": {"oid": "ba1e373d35256fc83dfb176a5991313c7ad5b56e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDoxNjo0MVrOHcfHJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDoxNjo0MVrOHcfHJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYzMTkxMQ==", "bodyText": "Isn't this {@code \"/example.grpc.hello.HelloService/Hello\"}?", "url": "https://github.com/line/armeria/pull/3083#discussion_r499631911", "createdAt": "2020-10-05T14:16:41Z", "author": {"login": "minwoox"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java", "diffHunk": "@@ -126,22 +128,125 @@ public GrpcServiceBuilder addService(ServerServiceDefinition service) {\n         return this;\n     }\n \n+    /**\n+     * Adds a gRPC {@link ServerServiceDefinition} to this {@link GrpcServiceBuilder}, such as\n+     * what's returned by {@link BindableService#bindService()}.\n+     *\n+     * <p>Note that the specified {@code path} replaces the normal gRPC service path.\n+     * Let's say you have the following gRPC service definition.\n+     * <pre>{@code\n+     * package example.grpc.hello;\n+     *\n+     * service HelloService {\n+     *   rpc Hello (HelloRequest) returns (HelloReply) {}\n+     * }}</pre>\n+     * The normal gRPC service path for the {@code Hello} method is {@code \"/example.grpc.hello/Hello\"}.\n+     * However if you set the {@code path} to {@code \"/foo\"}, the {@code Hello} method will be served at\n+     * {@code \"/foo/Hello\"}. This is useful for supporting unframed gRPC with HTTP idiomatic path.\n+     */\n+    public GrpcServiceBuilder addService(String path, ServerServiceDefinition service) {\n+        registryBuilder.addService(requireNonNull(path, \"path\"), requireNonNull(service, \"service\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Adds a {@linkplain MethodDescriptor method} of gRPC {@link ServerServiceDefinition} to this\n+     * {@link GrpcServiceBuilder}. You can get {@link MethodDescriptor}s from the enclosing class of\n+     * your generated stub.\n+     *\n+     * <p>Note that the specified {@code path} replaces the normal gRPC service path.\n+     * Let's say you have the following gRPC service definition.\n+     * <pre>{@code\n+     * package example.grpc.hello;\n+     *\n+     * service HelloService {\n+     *   rpc Hello (HelloRequest) returns (HelloReply) {}\n+     * }}</pre>\n+     * The normal gRPC service path for the {@code Hello} method is {@code \"/example.grpc.hello/Hello\"}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1e373d35256fc83dfb176a5991313c7ad5b56e"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c55c1968568faab7891e730f29b7e96230b06c98", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/c55c1968568faab7891e730f29b7e96230b06c98", "committedDate": "2020-10-05T14:35:43Z", "message": "Address comments by @minwoox"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0NjI0NDAy", "url": "https://github.com/line/armeria/pull/3083#pullrequestreview-504624402", "createdAt": "2020-10-08T10:05:04Z", "commit": {"oid": "c55c1968568faab7891e730f29b7e96230b06c98"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMDowNTowNFrOHeXPdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMDoxMjoyOFrOHeXhGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYwMDExNw==", "bodyText": "How about caching this upfront so we don't have to create a new copy on every call? Alternatively, we could make HandlerRegister.services() to return ImmutableList and add an instanceof ImmutableList assertion.", "url": "https://github.com/line/armeria/pull/3083#discussion_r501600117", "createdAt": "2020-10-08T10:05:04Z", "author": {"login": "trustin"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/FramedGrpcService.java", "diffHunk": "@@ -342,7 +347,12 @@ public boolean isFramed() {\n \n     @Override\n     public List<ServerServiceDefinition> services() {\n-        return registry.services();\n+        return ImmutableList.copyOf(registry.services().values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c55c1968568faab7891e730f29b7e96230b06c98"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYwMDM3OA==", "bodyText": "Global comment: set /foo to path", "url": "https://github.com/line/armeria/pull/3083#discussion_r501600378", "createdAt": "2020-10-08T10:05:25Z", "author": {"login": "trustin"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java", "diffHunk": "@@ -126,22 +128,129 @@ public GrpcServiceBuilder addService(ServerServiceDefinition service) {\n         return this;\n     }\n \n+    /**\n+     * Adds a gRPC {@link ServerServiceDefinition} to this {@link GrpcServiceBuilder}, such as\n+     * what's returned by {@link BindableService#bindService()}.\n+     *\n+     * <p>Note that the specified {@code path} replaces the normal gRPC service path.\n+     * Let's say you have the following gRPC service definition.\n+     * <pre>{@code\n+     * package example.grpc.hello;\n+     *\n+     * service HelloService {\n+     *   rpc Hello (HelloRequest) returns (HelloReply) {}\n+     * }}</pre>\n+     * The normal gRPC service path for the {@code Hello} method is\n+     * {@code \"/example.grpc.hello.HelloService/Hello\"}.\n+     * However if you set the {@code path} to {@code \"/foo\"}, the {@code Hello} method will be served at", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c55c1968568faab7891e730f29b7e96230b06c98"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYwNDYzMg==", "bodyText": "Does it make sense to return Map<String, ServiceMethodDefinition<?, ?>> instead? Then maybe we can fetch from HandlerRegistry without any stream processing?", "url": "https://github.com/line/armeria/pull/3083#discussion_r501604632", "createdAt": "2020-10-08T10:12:28Z", "author": {"login": "trustin"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcService.java", "diffHunk": "@@ -62,6 +68,18 @@ static GrpcServiceBuilder builder() {\n      */\n     List<ServerServiceDefinition> services();\n \n+    /**\n+     * Returns a {@link Map} whose key is a route path and whose value is {@link MethodDescriptor}, which is\n+     * serviced by this service.\n+     */\n+    default Map<String, MethodDescriptor<?, ?>> methods() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c55c1968568faab7891e730f29b7e96230b06c98"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2718bb9a6602fa660b69c3b0b8adf6c620abd0ba", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/2718bb9a6602fa660b69c3b0b8adf6c620abd0ba", "committedDate": "2020-10-08T16:53:43Z", "message": "Address comments by @trustin / Change the return type of GrpcService.methods()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MjU2MDYw", "url": "https://github.com/line/armeria/pull/3083#pullrequestreview-505256060", "createdAt": "2020-10-09T00:05:59Z", "commit": {"oid": "2718bb9a6602fa660b69c3b0b8adf6c620abd0ba"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1Mjg3MDEw", "url": "https://github.com/line/armeria/pull/3083#pullrequestreview-505287010", "createdAt": "2020-10-09T01:13:08Z", "commit": {"oid": "2718bb9a6602fa660b69c3b0b8adf6c620abd0ba"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMToxMzowOFrOHe2tKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMToxMzo1M1rOHe2uoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjExNTYyNg==", "bodyText": "nit: How about adding the same assertion with services()?", "url": "https://github.com/line/armeria/pull/3083#discussion_r502115626", "createdAt": "2020-10-09T01:13:08Z", "author": {"login": "trustin"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/FramedGrpcService.java", "diffHunk": "@@ -347,12 +343,14 @@ public boolean isFramed() {\n \n     @Override\n     public List<ServerServiceDefinition> services() {\n-        return ImmutableList.copyOf(registry.services().values());\n+        final List<ServerServiceDefinition> services = registry.services();\n+        assert services instanceof ImmutableList;\n+        return services;\n     }\n \n     @Override\n-    public Map<String, MethodDescriptor<?, ?>> methods() {\n-        return methods;\n+    public Map<String, ServerMethodDefinition<?, ?>> methods() {\n+        return registry.methods();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2718bb9a6602fa660b69c3b0b8adf6c620abd0ba"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjExNjAwMQ==", "bodyText": "ImmutableMap?", "url": "https://github.com/line/armeria/pull/3083#discussion_r502116001", "createdAt": "2020-10-09T01:13:53Z", "author": {"login": "trustin"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/HandlerRegistry.java", "diffHunk": "@@ -67,10 +68,10 @@\n  * documentation generation.\n  */\n final class HandlerRegistry {\n-    private final Map<String, ServerServiceDefinition> services;\n+    private final ImmutableList<ServerServiceDefinition> services;\n     private final Map<String, ServerMethodDefinition<?, ?>> methods;\n \n-    private HandlerRegistry(Map<String, ServerServiceDefinition> services,\n+    private HandlerRegistry(ImmutableList<ServerServiceDefinition> services,\n                             Map<String, ServerMethodDefinition<?, ?>> methods) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2718bb9a6602fa660b69c3b0b8adf6c620abd0ba"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "864b47315712024c70d05179a3ae8c6438093b7a", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/864b47315712024c70d05179a3ae8c6438093b7a", "committedDate": "2020-10-09T04:20:28Z", "message": "Address comments by @trustin"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4700, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}