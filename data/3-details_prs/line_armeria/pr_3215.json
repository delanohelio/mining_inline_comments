{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MTA4MDM0", "number": 3215, "title": "Add `HttpMessage.decode()` and hide `HttpDeframer` from public API", "bodyText": "Motivation:\nThere are two problems in the HttpDeframer implementation.\n\nAn HttpDeframerHandler expects to receive HttpHeaders from an upsteam.\nHowever, HttpRequest does not publish HttpHeaders to a Subscriber.\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/common/HttpRequest.java\n    \n    \n        Lines 56 to 57\n      in\n      9ae0968\n    \n    \n    \n    \n\n        \n          \n            * <p>Note: The initial {@link RequestHeaders} is not signaled to {@link Subscriber}s. It is readily available \n        \n\n        \n          \n            * via {@link #headers()}. \n        \n    \n  \n\n\nBy implementing Processor interface, DefaultHttpDeframer heavily uses flags with volatile to control concurrency.\n\nHttpDeframers implementation could be optimized by hiding its factories such as HttpDeframer.of().\nModification:\n\nAdd HttpMessage interface for creating a decoded StreamMessage from HttpDecoder.\n\nHttpRequest and HttpResponse implement HttpMessage interface.\nMove toDuplicator(...) from Http{Request,Response}\nExtend StreamMessage for better abstraction.\n\n\nAdd demand() to StreamMessage for checking the current demand.\nRemove HttpDefarmer in favor of HttpMessage.decode().\nRename HttpDeframerHandler to HttpDecoder\n\nMost users will decode HttpMessage than deframing.\n\n\nMigrate gRPC server and client implemention/test for using HttpMessage.decode()\nRename DefaultHttpDeframer to DecodedHttpStreamMessage` and clean up implementions.\n\nRemove Processor interface from DecodedHttpStreamMessage.\nDecodedHttpStreamMessage works in a single EventLoop\nRemove all volatile keyword and eventLoop.inEventLoop() code.\n\n\n\nResult:\n\nYou can now use HttpMessage.decode() for decoding a raw HTTP request and response.\nHttpRequest request = ...;\nHttpDecoder<MyDomainObject> decoder = ...;\nStreamMessage<MyDomainObject> decoded = request.decode(decoder);\n\nAn HttpDecoder can now handle HttpHeaders correctly.", "createdAt": "2020-12-09T11:22:46Z", "url": "https://github.com/line/armeria/pull/3215", "merged": true, "mergeCommit": {"oid": "3eef7032c7503c4525a73aa7c0148121859bab8b"}, "closed": true, "closedAt": "2020-12-28T07:31:00Z", "author": {"login": "ikhoon"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkc8urgH2gAyNTM1MTA4MDM0OmU4OGVjNGIwYjkxZDZiY2JjMWE1ZTU3ZTYzZGE4ZWE0MThjYWEzMmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdqeFzsgH2gAyNTM1MTA4MDM0OjY0MDg4ZTcxOTRiMGI1Y2EzYTY2MjkwYmM4OTM2NDAwN2E2Mzc3YWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e88ec4b0b91d6bcbc1a5e57e63da8ea418caa32a", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/e88ec4b0b91d6bcbc1a5e57e63da8ea418caa32a", "committedDate": "2020-12-09T11:22:11Z", "message": "Add `HttpMessage.deframe()` and hide `HttpDeframer` from public API\n\nMotivation:\n\nThere are two problems in the `HttpDeframer` implementation.\n1. An `HttpDeframerHandler` expects to receive `HttpHeaders` from an upsteam.\n   However, `HttpRequest` does not publish `HttpHeaders` to a `Subscriber`.\n   https://github.com/line/armeria/blob/9ae09688e3ddef276899f5e56392cfb6230e0b8e/core/src/main/java/com/linecorp/armeria/common/HttpRequest.java#L56-L57\n2. By implementing `Processor` interface, `DefaultHttpDeframer` heavily uses voliatile flags to control concurrency.\n\nHttpDeframer implemetation could be optimized by hiding its factories such as `HttpDeframer.of()`.\n\nModification:\n\n- Add `HttpMessage` interface for creating a deframed `StreamMessage` from `HttpDefamerHandler`.\n  - `HttpRequest` and `HttpResponse` implement `HttpMessage` interface.\n- Remove `HttpDefarmer` in favor of `HttpMessage.deframe()`.\n- Migrate gRPC server and client implemention/test for using `HttpMessage.deframe()`\n- Clean up `DefaultHttpDeframer` implemention.\n  - Remove `Processor` interface from `DefaultHttpDeframer`.\n  - DefaultHttpDeframer works in a single `EventLoop`\n  - Remove all volatile keyword and `eventLoop.inEventLoop()` code.\n\nResult:\n\n- You can now use `HttpMessage.deframe()` for deframing HTTP request and response.\n  ```java\n  HttpRequest request = ...;\n  HttpDefarmerHandler<MyDomainObject> handler = ...;\n  StreamMessage<MyDomainObject> deframed = request.deframe(handler);\n  ```\n- An `HttpDefamerHandler` can now handle `HttpHeaders` correctly.\n- Optimized `DefaultHttpDeframer` implemention."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fbf7ddae1d71ae316ad846acaf76d343f8da4b1", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/6fbf7ddae1d71ae316ad846acaf76d343f8da4b1", "committedDate": "2020-12-09T11:26:47Z", "message": "Add Unstable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65d1aefd6f9806c219e2bc87d0d851aaeadf6b0a", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/65d1aefd6f9806c219e2bc87d0d851aaeadf6b0a", "committedDate": "2020-12-10T02:35:48Z", "message": "Add assert"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "084e64d2ffb6ecec2e492d4b9a6d84d7d6c37ad3", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/084e64d2ffb6ecec2e492d4b9a6d84d7d6c37ad3", "committedDate": "2020-12-10T02:41:28Z", "message": "Remove cruft"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8cb31186f850e15efb20001f638ba91e40090fb", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/c8cb31186f850e15efb20001f638ba91e40090fb", "committedDate": "2020-12-10T12:41:41Z", "message": "Fix broken tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5ODE3MzMx", "url": "https://github.com/line/armeria/pull/3215#pullrequestreview-549817331", "createdAt": "2020-12-11T05:48:43Z", "commit": {"oid": "c8cb31186f850e15efb20001f638ba91e40090fb"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNTo0ODo0M1rOIDqHhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNjowNjo1NlrOIDqetQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcwNjY5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns a new {@link DefaultHttpDeframer} with the specified {@link HttpDeframerHandler},\n          \n          \n            \n                 * Returns a new {@link DefaultHttpDeframer} with the specified {@link HttpDeframerHandler} and", "url": "https://github.com/line/armeria/pull/3215#discussion_r540706693", "createdAt": "2020-12-11T05:48:43Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultHttpDeframer.java", "diffHunk": "@@ -16,75 +16,82 @@\n \n package com.linecorp.armeria.common.stream;\n \n+import static com.linecorp.armeria.common.stream.SubscriptionOption.NOTIFY_CANCELLATION;\n+import static com.linecorp.armeria.common.stream.SubscriptionOption.WITH_POOLED_OBJECTS;\n import static java.util.Objects.requireNonNull;\n \n-import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n-import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n import java.util.function.Function;\n \n import javax.annotation.Nullable;\n \n+import org.reactivestreams.Subscriber;\n import org.reactivestreams.Subscription;\n \n import com.linecorp.armeria.common.HttpData;\n import com.linecorp.armeria.common.HttpHeaders;\n import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n import com.linecorp.armeria.common.util.Exceptions;\n \n import io.netty.buffer.ByteBuf;\n import io.netty.buffer.ByteBufAllocator;\n import io.netty.util.concurrent.EventExecutor;\n \n /**\n- * The default {@link HttpDeframer} implementation.\n+ * The default HTTP deframer implementation.\n  */\n-final class DefaultHttpDeframer<T>\n-        extends DefaultStreamMessage<T>\n-        implements HttpDeframer<T>, HttpDeframerOutput<T> {\n+@UnstableApi\n+public final class DefaultHttpDeframer<T> extends DefaultStreamMessage<T> implements HttpDeframerOutput<T> {\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static final AtomicReferenceFieldUpdater<DefaultHttpDeframer, Subscription> upstreamUpdater =\n-            AtomicReferenceFieldUpdater.newUpdater(DefaultHttpDeframer.class, Subscription.class, \"upstream\");\n+    private static final SubscriptionOption[] EMPTY_OPTIONS = {};\n+    private static final SubscriptionOption[] POOLED_OBJECTS_OPTIONS = { WITH_POOLED_OBJECTS };\n+    private static final SubscriptionOption[] NOTIFY_CANCELLATION_OPTIONS = { NOTIFY_CANCELLATION };\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static final AtomicIntegerFieldUpdater<DefaultHttpDeframer> initializedUpdater =\n-            AtomicIntegerFieldUpdater.newUpdater(DefaultHttpDeframer.class, \"initialized\");\n-\n-    @SuppressWarnings(\"rawtypes\")\n-    private static final AtomicIntegerFieldUpdater<DefaultHttpDeframer> askedUpstreamForElementUpdater =\n-            AtomicIntegerFieldUpdater.newUpdater(DefaultHttpDeframer.class, \"askedUpstreamForElement\");\n+    private final HttpMessageSubscriber subscriber = new HttpMessageSubscriber();\n \n     private final HttpDeframerHandler<T> handler;\n     private final ByteBufDeframerInput input;\n     private final Function<? super HttpData, ? extends ByteBuf> byteBufConverter;\n-\n-    private boolean handlerProduced;\n-    private boolean sawLeadingHeaders;\n+    private final StreamMessage<? extends HttpObject> publisher;\n \n     @Nullable\n-    private volatile EventExecutor eventLoop;\n+    private HttpHeaders httpHeaders;\n     @Nullable\n-    private volatile Subscription upstream;\n-    private volatile int initialized;\n-    private volatile int askedUpstreamForElement;\n+    private Subscription upstream;\n \n-    @Nullable\n-    private volatile Throwable cause;\n-    private volatile boolean cancelled;\n-    private volatile boolean completing;\n+    private boolean handlerProduced;\n+    private boolean sawLeadingHeaders;\n+    private boolean initialized;\n+    private boolean askedUpstreamForElement;\n+    private boolean cancelled;\n+\n+    /**\n+     * Returns a new {@link DefaultHttpDeframer} with the specified {@link HttpDeframerHandler},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8cb31186f850e15efb20001f638ba91e40090fb"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcwODU3OQ==", "bodyText": "Isn't this method is called by another thread? which means that we have to guarantee the thread safety in the method?", "url": "https://github.com/line/armeria/pull/3215#discussion_r540708579", "createdAt": "2020-12-11T05:54:40Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultHttpDeframer.java", "diffHunk": "@@ -104,61 +111,59 @@ SubscriptionImpl subscribe(SubscriptionImpl subscription) {\n         final SubscriptionImpl subscriptionImpl = super.subscribe(subscription);\n         if (subscriptionImpl == subscription) {\n             final EventExecutor eventLoop = subscription.executor();\n-            this.eventLoop = eventLoop;\n-            deferredInit(eventLoop);\n+            publisher.subscribe(subscriber, eventLoop, getSubscriptionOptions(subscription));\n+            deferredInit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8cb31186f850e15efb20001f638ba91e40090fb"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcwOTg4MQ==", "bodyText": "Could be just requestHeaders?", "url": "https://github.com/line/armeria/pull/3215#discussion_r540709881", "createdAt": "2020-12-11T05:58:26Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultHttpDeframer.java", "diffHunk": "@@ -104,61 +111,59 @@ SubscriptionImpl subscribe(SubscriptionImpl subscription) {\n         final SubscriptionImpl subscriptionImpl = super.subscribe(subscription);\n         if (subscriptionImpl == subscription) {\n             final EventExecutor eventLoop = subscription.executor();\n-            this.eventLoop = eventLoop;\n-            deferredInit(eventLoop);\n+            publisher.subscribe(subscriber, eventLoop, getSubscriptionOptions(subscription));\n+            deferredInit();\n         }\n         return subscriptionImpl;\n     }\n \n-    private void deferredInit(@Nullable EventExecutor eventLoop) {\n-        final Subscription upstream = this.upstream;\n-\n-        if (upstream != null && eventLoop != null) {\n-            if (initializedUpdater.compareAndSet(this, 0, 1)) {\n-                if (cancelled) {\n-                    upstream.cancel();\n-                    return;\n-                }\n+    private void deferredInit() {\n+        if (upstream != null) {\n+            if (initialized) {\n+                return;\n+            }\n \n-                final Throwable cause = this.cause;\n-                if (cause != null) {\n-                    if (eventLoop.inEventLoop()) {\n-                        onError0(cause);\n-                    } else {\n-                        eventLoop.execute(() -> onError0(cause));\n-                    }\n-                    return;\n-                }\n+            initialized = true;\n+            if (cancelled) {\n+                upstream.cancel();\n+                return;\n+            }\n \n-                if (completing) {\n-                    if (eventLoop.inEventLoop()) {\n-                        onComplete0();\n-                    } else {\n-                        eventLoop.execute(this::onComplete0);\n-                    }\n-                    return;\n-                }\n+            long demand = demand();\n+            if (demand > 0 && httpHeaders != null) {\n+                final HttpHeaders httpHeaders = this.httpHeaders;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8cb31186f850e15efb20001f638ba91e40090fb"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcxMjYyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   <li>Creates an deframed {@link StreamMessage} using {@link HttpMessage#deframe(HttpDeframerHandler)}\n          \n          \n            \n            <li>Create an deframed {@link StreamMessage} using {@link HttpMessage#deframe(HttpDeframerHandler)}", "url": "https://github.com/line/armeria/pull/3215#discussion_r540712629", "createdAt": "2020-12-11T06:06:56Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/HttpDeframerHandler.java", "diffHunk": "@@ -20,13 +20,62 @@\n \n import com.linecorp.armeria.common.HttpData;\n import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpMessage;\n import com.linecorp.armeria.common.HttpObject;\n import com.linecorp.armeria.common.ResponseHeaders;\n import com.linecorp.armeria.common.annotation.UnstableApi;\n \n /**\n  * An {@link HttpDeframerHandler} that decodes a stream of {@link HttpObject}s to N objects.\n  *\n+ * <p>Follow the below steps to deframe HTTP payload using {@link HttpDeframerHandler}.\n+ * <ol>\n+ *   <li>Implement your deframing logic in {@link HttpDeframerHandler}.\n+ *       <pre>{@code\n+ *       > class FixedLengthDecoder implements HttpDeframerHandler<String> {\n+ *       >     private final int length;\n+ *       >\n+ *       >     FixedLengthDecoder(int length) {\n+ *       >         this.length = length;\n+ *       >     }\n+ *       >\n+ *       >     @Override\n+ *       >     public void process(HttpDeframerInput in, HttpDeframerOutput<String> out) {\n+ *       >         int remaining = in.readableBytes();\n+ *       >         if (remaining < length) {\n+ *       >             // The input is not enough to process. Waiting for more data.\n+ *       >             return;\n+ *       >         }\n+ *       >\n+ *       >         do {\n+ *       >             // Read data from 'HttpDeframerInput' and\n+ *       >             // write the processed result to 'HttpDeframerOutput'.\n+ *       >             ByteBuf buf = in.readBytes(length);\n+ *       >             out.add(buf.toString(StandardCharsets.UTF_8));\n+ *       >             // Should release the returned 'ByteBuf'\n+ *       >             buf.release();\n+ *       >             remaining -= length;\n+ *       >         } while (remaining >= length);\n+ *       >     }\n+ *       > }\n+ *       }</pre>\n+ *   </li>\n+ *   <li>Creates an deframed {@link StreamMessage} using {@link HttpMessage#deframe(HttpDeframerHandler)}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8cb31186f850e15efb20001f638ba91e40090fb"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8df1b33f61228d6781ad2e93f7bcd28380b67a35", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/8df1b33f61228d6781ad2e93f7bcd28380b67a35", "committedDate": "2020-12-11T07:50:35Z", "message": "Address comments by @minwoox"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMDQ3Njgy", "url": "https://github.com/line/armeria/pull/3215#pullrequestreview-551047682", "createdAt": "2020-12-14T05:12:35Z", "commit": {"oid": "8df1b33f61228d6781ad2e93f7bcd28380b67a35"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNToxMjozNVrOIFAJkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNToyNToyNlrOIFAYpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExNjI0Mg==", "bodyText": "Could we also add toDuplicator() here?", "url": "https://github.com/line/armeria/pull/3215#discussion_r542116242", "createdAt": "2020-12-14T05:12:35Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpMessage.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.stream.HttpDeframerHandler;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+\n+/**\n+ * A streamed HTTP/2 message.\n+ */\n+public interface HttpMessage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8df1b33f61228d6781ad2e93f7bcd28380b67a35"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExNjczNQ==", "bodyText": "How about renaming deframe to decode, because what a user does may be decoding rather than deframing? HttpDeframerHandler could be renamed to HttpDecoder as well.", "url": "https://github.com/line/armeria/pull/3215#discussion_r542116735", "createdAt": "2020-12-14T05:14:28Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpMessage.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.stream.HttpDeframerHandler;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+\n+/**\n+ * A streamed HTTP/2 message.\n+ */\n+public interface HttpMessage {\n+\n+    /**\n+     * Creates a deframed {@link StreamMessage} which is decoded from a stream of {@link HttpObject}s using\n+     * the specified {@link HttpDeframerHandler}.\n+     */\n+    default <T> StreamMessage<T> deframe(HttpDeframerHandler<T> handler) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8df1b33f61228d6781ad2e93f7bcd28380b67a35"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExNzQ1MA==", "bodyText": "Shouldn't we hide this from the public API?", "url": "https://github.com/line/armeria/pull/3215#discussion_r542117450", "createdAt": "2020-12-14T05:16:49Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultHttpDeframer.java", "diffHunk": "@@ -16,75 +16,83 @@\n \n package com.linecorp.armeria.common.stream;\n \n+import static com.linecorp.armeria.common.stream.SubscriptionOption.NOTIFY_CANCELLATION;\n+import static com.linecorp.armeria.common.stream.SubscriptionOption.WITH_POOLED_OBJECTS;\n import static java.util.Objects.requireNonNull;\n \n-import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n-import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n import java.util.function.Function;\n \n import javax.annotation.Nullable;\n \n+import org.reactivestreams.Subscriber;\n import org.reactivestreams.Subscription;\n \n import com.linecorp.armeria.common.HttpData;\n import com.linecorp.armeria.common.HttpHeaders;\n import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.RequestHeaders;\n import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n import com.linecorp.armeria.common.util.Exceptions;\n \n import io.netty.buffer.ByteBuf;\n import io.netty.buffer.ByteBufAllocator;\n import io.netty.util.concurrent.EventExecutor;\n \n /**\n- * The default {@link HttpDeframer} implementation.\n+ * The default HTTP deframer implementation.\n  */\n-final class DefaultHttpDeframer<T>\n-        extends DefaultStreamMessage<T>\n-        implements HttpDeframer<T>, HttpDeframerOutput<T> {\n+@UnstableApi\n+public final class DefaultHttpDeframer<T> extends DefaultStreamMessage<T> implements HttpDeframerOutput<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8df1b33f61228d6781ad2e93f7bcd28380b67a35"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExOTYyMw==", "bodyText": "Could we just build a fake HttpResponse here, so we don't have to use DefaultHttpDeframer directly? For example, you could just do grpcResponse.toHttpResponse().decrame(handler, ctx.alloc()).", "url": "https://github.com/line/armeria/pull/3215#discussion_r542119623", "createdAt": "2020-12-14T05:24:05Z", "author": {"login": "trustin"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcService.java", "diffHunk": "@@ -280,9 +280,10 @@ private static void deframeAndRespond(\n         final ArmeriaMessageDeframerHandler handler = new ArmeriaMessageDeframerHandler(\n                 // Max outbound message size is handled by the GrpcService, so we don't need to set it here.\n                 Integer.MAX_VALUE);\n-        final HttpDeframer<DeframedMessage> deframer = HttpDeframer.of(handler, ctx.alloc());\n-        StreamMessage.of(grpcResponse.content()).subscribe(deframer, ctx.eventLoop());\n-        deframer.subscribe(singleSubscriber(unframedHeaders, res), ctx.eventLoop());\n+        final StreamMessage<HttpData> publisher = StreamMessage.of(grpcResponse.content());\n+        final StreamMessage<DeframedMessage> deframed =\n+                new DefaultHttpDeframer<>(publisher, handler, ctx.alloc());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8df1b33f61228d6781ad2e93f7bcd28380b67a35"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEyMDEwMw==", "bodyText": "Ditto - HttpRequest.of(..., framed).deframe(handler, alloc, ...)", "url": "https://github.com/line/armeria/pull/3215#discussion_r542120103", "createdAt": "2020-12-14T05:25:26Z", "author": {"login": "trustin"}, "path": "grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcWebTextTest.java", "diffHunk": "@@ -167,12 +167,13 @@ private static ByteBuf serializeMessage(ByteBuf message, boolean trailers) {\n         private static CompletableFuture<ByteBuf> deframeMessage(HttpData framed,\n                                                                  EventLoop eventLoop,\n                                                                  ByteBufAllocator alloc) {\n-            final CompletableFuture<ByteBuf> deframed = new CompletableFuture<>();\n+            final CompletableFuture<ByteBuf> deframedByteBuf = new CompletableFuture<>();\n             final ArmeriaMessageDeframerHandler handler = new ArmeriaMessageDeframerHandler(Integer.MAX_VALUE);\n-            final HttpDeframer<DeframedMessage> deframer = newHttpDeframer(handler, alloc, true);\n-            StreamMessage.of(framed).subscribe(deframer, eventLoop);\n-            deframer.subscribe(singleSubscriber(deframed), eventLoop);\n-            return deframed;\n+            final StreamMessage<HttpData> source = StreamMessage.of(framed);\n+            final StreamMessage<DeframedMessage> deframed =\n+                    new DefaultHttpDeframer<>(source, handler, alloc, byteBufConverter(alloc, true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8df1b33f61228d6781ad2e93f7bcd28380b67a35"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4abb1a41827d844a15d4a83d0ca18543e2e51e82", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/4abb1a41827d844a15d4a83d0ca18543e2e51e82", "committedDate": "2020-12-14T06:34:49Z", "message": "--wip-- [skip ci]"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06a135994a95b634292e3ea4a98c4db479244435", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/06a135994a95b634292e3ea4a98c4db479244435", "committedDate": "2020-12-14T08:50:14Z", "message": "Address comments by @trustin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e02ea653b487c978a071b7a4092e09e97418a50c", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/e02ea653b487c978a071b7a4092e09e97418a50c", "committedDate": "2020-12-14T09:02:21Z", "message": "Rename HttpDeframerOutput to HttpDecoderOutput"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64ae46edc13047f859ab606cb790e1814e14c1ea", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/64ae46edc13047f859ab606cb790e1814e14c1ea", "committedDate": "2020-12-14T09:10:31Z", "message": "Clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5d89f021f48db6d6269ae8a08c78e916a9eaeb5", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/e5d89f021f48db6d6269ae8a08c78e916a9eaeb5", "committedDate": "2020-12-17T02:20:45Z", "message": "Make HttpMesage extend StreamMessage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MjIyMjY5", "url": "https://github.com/line/armeria/pull/3215#pullrequestreview-554222269", "createdAt": "2020-12-17T01:51:22Z", "commit": {"oid": "64ae46edc13047f859ab606cb790e1814e14c1ea"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMTo1MToyMlrOIHg_tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMjozMzowOVrOIHh5Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1MTU0MQ==", "bodyText": "Shouldn't we use SubscriptionOption... in case another option is added later?", "url": "https://github.com/line/armeria/pull/3215#discussion_r544751541", "createdAt": "2020-12-17T01:51:22Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java", "diffHunk": "@@ -149,6 +152,16 @@ private void subscribe(SubscriptionImpl subscription, Subscriber<Object> subscri\n         }\n     }\n \n+    /**\n+     * Invoked when a subscriber subscribes.\n+     */\n+    protected void subscribe0(EventExecutor executor, boolean withPooledObjects, boolean notifyCancellation) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64ae46edc13047f859ab606cb790e1814e14c1ea"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1MTkyNw==", "bodyText": "Maybe onSubscribe? to align with onRequest", "url": "https://github.com/line/armeria/pull/3215#discussion_r544751927", "createdAt": "2020-12-17T01:52:24Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java", "diffHunk": "@@ -149,6 +152,16 @@ private void subscribe(SubscriptionImpl subscription, Subscriber<Object> subscri\n         }\n     }\n \n+    /**\n+     * Invoked when a subscriber subscribes.\n+     */\n+    protected void subscribe0(EventExecutor executor, boolean withPooledObjects, boolean notifyCancellation) {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1MTU0MQ=="}, "originalCommit": {"oid": "64ae46edc13047f859ab606cb790e1814e14c1ea"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1NDE4Mw==", "bodyText": "nit: a?", "url": "https://github.com/line/armeria/pull/3215#discussion_r544754183", "createdAt": "2020-12-17T01:58:54Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/HttpDecoder.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.stream;\n+\n+import org.reactivestreams.Publisher;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpMessage;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * An {@link HttpDecoder} that decodes a stream of {@link HttpObject}s to N objects.\n+ *\n+ * <p>Follow the below steps to decode HTTP payload using {@link HttpDecoder}.\n+ * <ol>\n+ *   <li>Implement your decoding logic in {@link HttpDecoder}.\n+ *       <pre>{@code\n+ *       > class FixedLengthDecoder implements HttpDecoder<String> {\n+ *       >     private final int length;\n+ *       >\n+ *       >     FixedLengthDecoder(int length) {\n+ *       >         this.length = length;\n+ *       >     }\n+ *       >\n+ *       >     @Override\n+ *       >     public void process(HttpDecoderInput in, HttpDecoderOutput<String> out) {\n+ *       >         int remaining = in.readableBytes();\n+ *       >         if (remaining < length) {\n+ *       >             // The input is not enough to process. Waiting for more data.\n+ *       >             return;\n+ *       >         }\n+ *       >\n+ *       >         do {\n+ *       >             // Read data from 'HttpDecoderInput' and\n+ *       >             // write the processed result to 'HttpDecoderOutput'.\n+ *       >             ByteBuf buf = in.readBytes(length);\n+ *       >             out.add(buf.toString(StandardCharsets.UTF_8));\n+ *       >             // Should release the returned 'ByteBuf'\n+ *       >             buf.release();\n+ *       >             remaining -= length;\n+ *       >         } while (remaining >= length);\n+ *       >     }\n+ *       > }\n+ *       }</pre>\n+ *   </li>\n+ *   <li>Create an decoded {@link StreamMessage} using {@link HttpMessage#decode(HttpDecoder)}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64ae46edc13047f859ab606cb790e1814e14c1ea"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1OTIxMA==", "bodyText": "Shouldn't we cancel and cleanup if this returns false?", "url": "https://github.com/line/armeria/pull/3215#discussion_r544759210", "createdAt": "2020-12-17T02:13:21Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/DefaultHttpDeframer.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import static com.linecorp.armeria.common.stream.SubscriptionOption.NOTIFY_CANCELLATION;\n+import static com.linecorp.armeria.common.stream.SubscriptionOption.WITH_POOLED_OBJECTS;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.stream.AbortedStreamException;\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.DefaultStreamMessage;\n+import com.linecorp.armeria.common.stream.HttpDecoder;\n+import com.linecorp.armeria.common.stream.HttpDecoderOutput;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * The default HTTP deframer implementation.\n+ */\n+@UnstableApi\n+public final class DefaultHttpDeframer<T> extends DefaultStreamMessage<T> implements HttpDecoderOutput<T> {\n+\n+    private static final SubscriptionOption[] EMPTY_OPTIONS = {};\n+    private static final SubscriptionOption[] POOLED_OBJECTS_OPTIONS = { WITH_POOLED_OBJECTS };\n+    private static final SubscriptionOption[] NOTIFY_CANCELLATION_OPTIONS = { NOTIFY_CANCELLATION };\n+\n+    private final HttpMessageSubscriber subscriber = new HttpMessageSubscriber();\n+\n+    private final HttpDecoder<T> handler;\n+    private final ByteBufDecoderInput input;\n+    private final Function<? super HttpData, ? extends ByteBuf> byteBufConverter;\n+    private final StreamMessage<? extends HttpObject> publisher;\n+\n+    @Nullable\n+    private RequestHeaders requestHeaders;\n+    @Nullable\n+    private Subscription upstream;\n+\n+    private boolean handlerProduced;\n+    private boolean sawLeadingHeaders;\n+    private boolean initialized;\n+    private boolean askedUpstreamForElement;\n+    private boolean cancelled;\n+\n+    /**\n+     * Returns a new {@link DefaultHttpDeframer} with the specified {@link HttpDecoder} and\n+     * {@link ByteBufAllocator}.\n+     */\n+    public DefaultHttpDeframer(StreamMessage<? extends HttpObject> streamMessage,\n+                               HttpDecoder<T> handler, ByteBufAllocator alloc) {\n+        this(streamMessage, handler, alloc, HttpData::byteBuf);\n+    }\n+\n+    /**\n+     * Returns a new {@link DefaultHttpDeframer} with the specified {@link HttpDecoder},\n+     * {@link ByteBufAllocator} and {@code byteBufConverter}.\n+     */\n+    public DefaultHttpDeframer(StreamMessage<? extends HttpObject> streamMessage,\n+                               HttpDecoder<T> handler, ByteBufAllocator alloc,\n+                               Function<? super HttpData, ? extends ByteBuf> byteBufConverter) {\n+        publisher = requireNonNull(streamMessage, \"streamMessage\");\n+        this.handler = requireNonNull(handler, \"handler\");\n+        input = new ByteBufDecoderInput(requireNonNull(alloc, \"alloc\"));\n+        this.byteBufConverter = requireNonNull(byteBufConverter, \"byteBufConverter\");\n+        if (publisher instanceof HttpRequest) {\n+            requestHeaders = ((HttpRequest) publisher).headers();\n+        }\n+\n+        whenComplete().handle((unused1, cause) -> {\n+            if (cause instanceof CancelledSubscriptionException) {\n+                cancelAndCleanup();\n+            } else {\n+                // In addition to 'onComplete()', 'onError()' and 'cancel()',\n+                // make sure to call 'cleanup()' even when 'abort()' or 'close()' is invoked directly\n+                cleanup();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @Override\n+    public void add(T e) {\n+        if (tryWrite(e)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64ae46edc13047f859ab606cb790e1814e14c1ea"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2MjI2MA==", "bodyText": "We can remove this and rename it to init()? because init is always called from onSubscribe()?", "url": "https://github.com/line/armeria/pull/3215#discussion_r544762260", "createdAt": "2020-12-17T02:22:02Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/DefaultHttpDeframer.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import static com.linecorp.armeria.common.stream.SubscriptionOption.NOTIFY_CANCELLATION;\n+import static com.linecorp.armeria.common.stream.SubscriptionOption.WITH_POOLED_OBJECTS;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.stream.AbortedStreamException;\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.DefaultStreamMessage;\n+import com.linecorp.armeria.common.stream.HttpDecoder;\n+import com.linecorp.armeria.common.stream.HttpDecoderOutput;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * The default HTTP deframer implementation.\n+ */\n+@UnstableApi\n+public final class DefaultHttpDeframer<T> extends DefaultStreamMessage<T> implements HttpDecoderOutput<T> {\n+\n+    private static final SubscriptionOption[] EMPTY_OPTIONS = {};\n+    private static final SubscriptionOption[] POOLED_OBJECTS_OPTIONS = { WITH_POOLED_OBJECTS };\n+    private static final SubscriptionOption[] NOTIFY_CANCELLATION_OPTIONS = { NOTIFY_CANCELLATION };\n+\n+    private final HttpMessageSubscriber subscriber = new HttpMessageSubscriber();\n+\n+    private final HttpDecoder<T> handler;\n+    private final ByteBufDecoderInput input;\n+    private final Function<? super HttpData, ? extends ByteBuf> byteBufConverter;\n+    private final StreamMessage<? extends HttpObject> publisher;\n+\n+    @Nullable\n+    private RequestHeaders requestHeaders;\n+    @Nullable\n+    private Subscription upstream;\n+\n+    private boolean handlerProduced;\n+    private boolean sawLeadingHeaders;\n+    private boolean initialized;\n+    private boolean askedUpstreamForElement;\n+    private boolean cancelled;\n+\n+    /**\n+     * Returns a new {@link DefaultHttpDeframer} with the specified {@link HttpDecoder} and\n+     * {@link ByteBufAllocator}.\n+     */\n+    public DefaultHttpDeframer(StreamMessage<? extends HttpObject> streamMessage,\n+                               HttpDecoder<T> handler, ByteBufAllocator alloc) {\n+        this(streamMessage, handler, alloc, HttpData::byteBuf);\n+    }\n+\n+    /**\n+     * Returns a new {@link DefaultHttpDeframer} with the specified {@link HttpDecoder},\n+     * {@link ByteBufAllocator} and {@code byteBufConverter}.\n+     */\n+    public DefaultHttpDeframer(StreamMessage<? extends HttpObject> streamMessage,\n+                               HttpDecoder<T> handler, ByteBufAllocator alloc,\n+                               Function<? super HttpData, ? extends ByteBuf> byteBufConverter) {\n+        publisher = requireNonNull(streamMessage, \"streamMessage\");\n+        this.handler = requireNonNull(handler, \"handler\");\n+        input = new ByteBufDecoderInput(requireNonNull(alloc, \"alloc\"));\n+        this.byteBufConverter = requireNonNull(byteBufConverter, \"byteBufConverter\");\n+        if (publisher instanceof HttpRequest) {\n+            requestHeaders = ((HttpRequest) publisher).headers();\n+        }\n+\n+        whenComplete().handle((unused1, cause) -> {\n+            if (cause instanceof CancelledSubscriptionException) {\n+                cancelAndCleanup();\n+            } else {\n+                // In addition to 'onComplete()', 'onError()' and 'cancel()',\n+                // make sure to call 'cleanup()' even when 'abort()' or 'close()' is invoked directly\n+                cleanup();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @Override\n+    public void add(T e) {\n+        if (tryWrite(e)) {\n+            handlerProduced = true;\n+        }\n+    }\n+\n+    @Override\n+    protected void subscribe0(EventExecutor executor, boolean withPooledObjects, boolean notifyCancellation) {\n+        publisher.subscribe(subscriber, executor, toSubscriptionOptions(withPooledObjects, notifyCancellation));\n+        deferredInit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64ae46edc13047f859ab606cb790e1814e14c1ea"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2MjY0Ng==", "bodyText": "Shouldn't we add sawLeadingHeaders = true?", "url": "https://github.com/line/armeria/pull/3215#discussion_r544762646", "createdAt": "2020-12-17T02:23:10Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/stream/DefaultHttpDeframer.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.stream;\n+\n+import static com.linecorp.armeria.common.stream.SubscriptionOption.NOTIFY_CANCELLATION;\n+import static com.linecorp.armeria.common.stream.SubscriptionOption.WITH_POOLED_OBJECTS;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.stream.AbortedStreamException;\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.DefaultStreamMessage;\n+import com.linecorp.armeria.common.stream.HttpDecoder;\n+import com.linecorp.armeria.common.stream.HttpDecoderOutput;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * The default HTTP deframer implementation.\n+ */\n+@UnstableApi\n+public final class DefaultHttpDeframer<T> extends DefaultStreamMessage<T> implements HttpDecoderOutput<T> {\n+\n+    private static final SubscriptionOption[] EMPTY_OPTIONS = {};\n+    private static final SubscriptionOption[] POOLED_OBJECTS_OPTIONS = { WITH_POOLED_OBJECTS };\n+    private static final SubscriptionOption[] NOTIFY_CANCELLATION_OPTIONS = { NOTIFY_CANCELLATION };\n+\n+    private final HttpMessageSubscriber subscriber = new HttpMessageSubscriber();\n+\n+    private final HttpDecoder<T> handler;\n+    private final ByteBufDecoderInput input;\n+    private final Function<? super HttpData, ? extends ByteBuf> byteBufConverter;\n+    private final StreamMessage<? extends HttpObject> publisher;\n+\n+    @Nullable\n+    private RequestHeaders requestHeaders;\n+    @Nullable\n+    private Subscription upstream;\n+\n+    private boolean handlerProduced;\n+    private boolean sawLeadingHeaders;\n+    private boolean initialized;\n+    private boolean askedUpstreamForElement;\n+    private boolean cancelled;\n+\n+    /**\n+     * Returns a new {@link DefaultHttpDeframer} with the specified {@link HttpDecoder} and\n+     * {@link ByteBufAllocator}.\n+     */\n+    public DefaultHttpDeframer(StreamMessage<? extends HttpObject> streamMessage,\n+                               HttpDecoder<T> handler, ByteBufAllocator alloc) {\n+        this(streamMessage, handler, alloc, HttpData::byteBuf);\n+    }\n+\n+    /**\n+     * Returns a new {@link DefaultHttpDeframer} with the specified {@link HttpDecoder},\n+     * {@link ByteBufAllocator} and {@code byteBufConverter}.\n+     */\n+    public DefaultHttpDeframer(StreamMessage<? extends HttpObject> streamMessage,\n+                               HttpDecoder<T> handler, ByteBufAllocator alloc,\n+                               Function<? super HttpData, ? extends ByteBuf> byteBufConverter) {\n+        publisher = requireNonNull(streamMessage, \"streamMessage\");\n+        this.handler = requireNonNull(handler, \"handler\");\n+        input = new ByteBufDecoderInput(requireNonNull(alloc, \"alloc\"));\n+        this.byteBufConverter = requireNonNull(byteBufConverter, \"byteBufConverter\");\n+        if (publisher instanceof HttpRequest) {\n+            requestHeaders = ((HttpRequest) publisher).headers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64ae46edc13047f859ab606cb790e1814e14c1ea"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2NDIzMA==", "bodyText": "Could you add a comment for DUMMY_HEADERS?", "url": "https://github.com/line/armeria/pull/3215#discussion_r544764230", "createdAt": "2020-12-17T02:27:35Z", "author": {"login": "minwoox"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnsafeUnaryGrpcService.java", "diffHunk": "@@ -108,20 +110,19 @@ protected final HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req)\n     private static CompletableFuture<ByteBuf> deframeMessage(HttpData framed,\n                                                              EventLoop eventLoop,\n                                                              ByteBufAllocator alloc) {\n-        final CompletableFuture<ByteBuf> deframed = new CompletableFuture<>();\n-        final ArmeriaMessageDeframerHandler handler = new ArmeriaMessageDeframerHandler(Integer.MAX_VALUE);\n-        final HttpDeframer<DeframedMessage> deframer = HttpDeframer.of(handler, alloc);\n+        final CompletableFuture<ByteBuf> deframedByteBuf = new CompletableFuture<>();\n \n-        StreamMessage.of(framed).subscribe(deframer, eventLoop);\n-        deframer.subscribe(singleSubscriber(deframed), eventLoop);\n-        return deframed;\n+        final ArmeriaMessageDeframer deframer = new ArmeriaMessageDeframer(Integer.MAX_VALUE);\n+        HttpRequest.of(DUMMY_HEADERS, framed).decode(deframer, alloc)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64ae46edc13047f859ab606cb790e1814e14c1ea"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2NjIzOQ==", "bodyText": "Can we just do\nfinal CompletableFuture<ByteBuf> deframedByteBuf = new CompletableFuture<>();\nfinal ArmeriaMessageDeframer deframer = new ArmeriaMessageDeframer(Integer.MAX_VALUE);\nreq.decode(deframer, ctx.alloc()).subscribe(singleSubscriber(deframedByteBuf), ctx.eventLoop());\ndeframedByteBuf.thenCompose(this::handleMessage)...\nin doPost?", "url": "https://github.com/line/armeria/pull/3215#discussion_r544766239", "createdAt": "2020-12-17T02:33:09Z", "author": {"login": "minwoox"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnsafeUnaryGrpcService.java", "diffHunk": "@@ -108,20 +110,19 @@ protected final HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req)\n     private static CompletableFuture<ByteBuf> deframeMessage(HttpData framed,\n                                                              EventLoop eventLoop,\n                                                              ByteBufAllocator alloc) {\n-        final CompletableFuture<ByteBuf> deframed = new CompletableFuture<>();\n-        final ArmeriaMessageDeframerHandler handler = new ArmeriaMessageDeframerHandler(Integer.MAX_VALUE);\n-        final HttpDeframer<DeframedMessage> deframer = HttpDeframer.of(handler, alloc);\n+        final CompletableFuture<ByteBuf> deframedByteBuf = new CompletableFuture<>();\n \n-        StreamMessage.of(framed).subscribe(deframer, eventLoop);\n-        deframer.subscribe(singleSubscriber(deframed), eventLoop);\n-        return deframed;\n+        final ArmeriaMessageDeframer deframer = new ArmeriaMessageDeframer(Integer.MAX_VALUE);\n+        HttpRequest.of(DUMMY_HEADERS, framed).decode(deframer, alloc)\n+                   .subscribe(singleSubscriber(deframedByteBuf), eventLoop);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64ae46edc13047f859ab606cb790e1814e14c1ea"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "544ce4d24151196861bf237f0c7820ef24ff35f5", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/544ce4d24151196861bf237f0c7820ef24ff35f5", "committedDate": "2020-12-17T04:20:11Z", "message": "Address comments by @minwoox"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTc5MjUw", "url": "https://github.com/line/armeria/pull/3215#pullrequestreview-556179250", "createdAt": "2020-12-21T07:35:44Z", "commit": {"oid": "544ce4d24151196861bf237f0c7820ef24ff35f5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4Mzk2MjI4", "url": "https://github.com/line/armeria/pull/3215#pullrequestreview-558396228", "createdAt": "2020-12-24T08:00:33Z", "commit": {"oid": "544ce4d24151196861bf237f0c7820ef24ff35f5"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwODowMDozM1rOILB-og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwODowOToyNlrOILCItQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzNzY2Ng==", "bodyText": "handler -> decoder?", "url": "https://github.com/line/armeria/pull/3215#discussion_r548437666", "createdAt": "2020-12-24T08:00:33Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpMessage.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.stream.HttpDecoder;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.StreamMessageDuplicator;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * A streamed HTTP/2 message.\n+ */\n+public interface HttpMessage extends StreamMessage<HttpObject> {\n+\n+    /**\n+     * Returns a new {@link StreamMessageDuplicator} that duplicates this {@link HttpMessage} into one or\n+     * more {@link HttpMessage}s, which publish the same elements.\n+     * Note that you cannot subscribe to this {@link HttpMessage} anymore after you call this method.\n+     * To subscribe, call {@link StreamMessageDuplicator#duplicate()} from the returned\n+     * {@link StreamMessageDuplicator}.\n+     *\n+     * @param maxContentLength the maximum content length that the duplicator can hold in its buffer.\n+     *                         {@link ContentTooLargeException} is raised if the length of the buffered\n+     *                         {@link HttpData} is greater than this value.\n+     */\n+    StreamMessageDuplicator<HttpObject> toDuplicator(long maxContentLength);\n+\n+    /**\n+     * Returns a new {@link StreamMessageDuplicator} that duplicates this {@link HttpMessage} into one or\n+     * more {@link HttpMessage}s, which publish the same elements.\n+     * Note that you cannot subscribe to this {@link HttpMessage} anymore after you call this method.\n+     * To subscribe, call {@link StreamMessageDuplicator#duplicate()} from the returned\n+     * {@link StreamMessageDuplicator}.\n+     *\n+     * @param executor the executor to duplicate\n+     * @param maxContentLength the maximum content length that the duplicator can hold in its buffer.\n+     *                         {@link ContentTooLargeException} is raised if the length of the buffered\n+     *                         {@link HttpData} is greater than this value.\n+     */\n+    StreamMessageDuplicator<HttpObject> toDuplicator(EventExecutor executor, long maxContentLength);\n+\n+    /**\n+     * Creates a decoded {@link StreamMessage} which is decoded from a stream of {@link HttpObject}s using\n+     * the specified {@link HttpDecoder}.\n+     */\n+    default <T> StreamMessage<T> decode(HttpDecoder<T> handler) {\n+        requireNonNull(handler, \"handler\");\n+        return decode(handler, ByteBufAllocator.DEFAULT);\n+    }\n+\n+    /**\n+     * Creates a decoded {@link StreamMessage} which is decoded from a stream of {@link HttpObject}s using\n+     * the specified {@link HttpDecoder} and {@link ByteBufAllocator}.\n+     */\n+    default <T> StreamMessage<T> decode(HttpDecoder<T> handler, ByteBufAllocator alloc) {\n+        requireNonNull(handler, \"handler\");\n+        requireNonNull(alloc, \"alloc\");\n+        return decode(handler, alloc, HttpData::byteBuf);\n+    }\n+\n+    /**\n+     * Creates a decoded {@link StreamMessage} which is decoded from a stream of {@link HttpObject}s using\n+     * the specified {@link HttpDecoder} and {@link ByteBufAllocator} and {@code byteBufConverter}.\n+     */\n+    <T> StreamMessage<T> decode(HttpDecoder<T> handler, ByteBufAllocator alloc,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "544ce4d24151196861bf237f0c7820ef24ff35f5"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzODA0Mg==", "bodyText": "How about just: Decodes a stream of ... ?", "url": "https://github.com/line/armeria/pull/3215#discussion_r548438042", "createdAt": "2020-12-24T08:02:08Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/HttpDecoder.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.stream;\n+\n+import org.reactivestreams.Publisher;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpMessage;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+\n+/**\n+ * An {@link HttpDecoder} that decodes a stream of {@link HttpObject}s to N objects.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "544ce4d24151196861bf237f0c7820ef24ff35f5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzODM4NA==", "bodyText": "Shouldn't decrease the demand when it's Long.MAX_VALUE.", "url": "https://github.com/line/armeria/pull/3215#discussion_r548438384", "createdAt": "2020-12-24T08:03:20Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessage.java", "diffHunk": "@@ -296,6 +313,7 @@ public void onNext(Object obj) {\n         }\n \n         private void onNext0(Object obj) {\n+            parent.demand--;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "544ce4d24151196861bf237f0c7820ef24ff35f5"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzODY4MA==", "bodyText": "Cruft?", "url": "https://github.com/line/armeria/pull/3215#discussion_r548438680", "createdAt": "2020-12-24T08:04:15Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/stream/HttpDeframerTest.java", "diffHunk": "@@ -49,12 +56,14 @@\n     static EventLoopExtension eventLoop = new EventLoopExtension();\n \n     @Test\n+    <T>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "544ce4d24151196861bf237f0c7820ef24ff35f5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzODk0Ng==", "bodyText": "Maybe fix indentation?", "url": "https://github.com/line/armeria/pull/3215#discussion_r548438946", "createdAt": "2020-12-24T08:05:10Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/internal/common/stream/ByteBufDecoderInputTest.java", "diffHunk": "@@ -81,8 +81,8 @@ void readByte() {\n             assertThat(input.readByte()).isEqualTo((byte) i);\n         }\n         assertThatThrownBy(() -> input.readByte())\n-                .isInstanceOf(IllegalStateException.class)\n-                .hasMessageContaining(\"end of deframer input\");\n+                  .isInstanceOf(IllegalStateException.class)\n+                  .hasMessageContaining(\"end of deframer input\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "544ce4d24151196861bf237f0c7820ef24ff35f5"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzODk5MA==", "bodyText": "Maybe fix indentation?", "url": "https://github.com/line/armeria/pull/3215#discussion_r548438990", "createdAt": "2020-12-24T08:05:24Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/internal/common/stream/ByteBufDecoderInputTest.java", "diffHunk": "@@ -113,13 +113,13 @@ void readInt() {\n         assertThat(byteBufs.get(2).refCnt()).isZero();\n \n         assertThatThrownBy(() -> input.readInt())\n-                .isInstanceOf(IllegalStateException.class)\n-                .hasMessageContaining(\"end of deframer input\");\n+                  .isInstanceOf(IllegalStateException.class)\n+                  .hasMessageContaining(\"end of deframer input\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "544ce4d24151196861bf237f0c7820ef24ff35f5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzOTAyOA==", "bodyText": "Maybe fix indentation?", "url": "https://github.com/line/armeria/pull/3215#discussion_r548439028", "createdAt": "2020-12-24T08:05:33Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/internal/common/stream/ByteBufDecoderInputTest.java", "diffHunk": "@@ -171,8 +171,8 @@ void readBytes() {\n         buf.release();\n \n         assertThatThrownBy(() -> input.readBytes(1))\n-                .isInstanceOf(IllegalStateException.class)\n-                .hasMessageContaining(\"end of deframer input\");\n+                  .isInstanceOf(IllegalStateException.class)\n+                  .hasMessageContaining(\"end of deframer input\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "544ce4d24151196861bf237f0c7820ef24ff35f5"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzOTM3NA==", "bodyText": "handler -> deframer", "url": "https://github.com/line/armeria/pull/3215#discussion_r548439374", "createdAt": "2020-12-24T08:06:40Z", "author": {"login": "trustin"}, "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcWebTrailersExtractor.java", "diffHunk": "@@ -75,12 +76,11 @@ public HttpResponse execute(HttpClient delegate, ClientRequestContext ctx, HttpR\n         final HttpResponse response = delegate.execute(ctx, req);\n         final ByteBufAllocator alloc = ctx.alloc();\n \n-        final ArmeriaMessageDeframerHandler handler = new ArmeriaMessageDeframerHandler(maxMessageSizeBytes);\n-        final HttpDeframer<DeframedMessage> deframer = newHttpDeframer(handler, alloc, grpcWebText);\n-\n+        final ArmeriaMessageDeframer handler = new ArmeriaMessageDeframer(maxMessageSizeBytes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "544ce4d24151196861bf237f0c7820ef24ff35f5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzOTQzOA==", "bodyText": "handler -> deframer", "url": "https://github.com/line/armeria/pull/3215#discussion_r548439438", "createdAt": "2020-12-24T08:06:49Z", "author": {"login": "trustin"}, "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java", "diffHunk": "@@ -217,13 +216,13 @@ public void start(Listener<O> responseListener, Metadata metadata) {\n                                                                     .withDescription(cause.getMessage())\n                                                                     .asRuntimeException()));\n \n-        final HttpStreamDeframerHandler handler =\n-                new HttpStreamDeframerHandler(decompressorRegistry, this, null, maxInboundMessageSizeBytes);\n-        responseDeframer = newHttpDeframer(handler, ctx.alloc(), grpcWebText);\n-        handler.setDeframer(responseDeframer);\n-        responseDeframer.subscribe(this, ctx.eventLoop());\n-\n-        res.subscribe(responseDeframer, ctx.eventLoop(), SubscriptionOption.WITH_POOLED_OBJECTS);\n+        final HttpStreamDeframer handler =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "544ce4d24151196861bf237f0c7820ef24ff35f5"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzOTgwNA==", "bodyText": "handler -> deframer", "url": "https://github.com/line/armeria/pull/3215#discussion_r548439804", "createdAt": "2020-12-24T08:08:02Z", "author": {"login": "trustin"}, "path": "grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcWebTextTest.java", "diffHunk": "@@ -95,20 +92,24 @@ void unaryCallSuccessWhenEncodedDataSpansMultipleHttpFrames() {\n \n         @Override\n         protected HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) {\n+            final ArmeriaMessageDeframer handler = new ArmeriaMessageDeframer(Integer.MAX_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "544ce4d24151196861bf237f0c7820ef24ff35f5"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MDE2Ng==", "bodyText": "handler -> deframer", "url": "https://github.com/line/armeria/pull/3215#discussion_r548440166", "createdAt": "2020-12-24T08:09:07Z", "author": {"login": "trustin"}, "path": "grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpDeframerTckTest.java", "diffHunk": "@@ -67,25 +67,23 @@ void afterTest() {\n                                           .toArray(HttpData[]::new);\n         final StreamMessage<HttpData> source = StreamMessage.of(data);\n \n-        final HttpStreamDeframerHandler handler =\n-                new HttpStreamDeframerHandler(DecompressorRegistry.getDefaultInstance(), noopListener,\n-                                              null, -1);\n-        final HttpDeframer<DeframedMessage> deframer =\n-                        HttpDeframer.of(handler, ByteBufAllocator.DEFAULT);\n+        final HttpStreamDeframer handler =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "544ce4d24151196861bf237f0c7820ef24ff35f5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MDIwOA==", "bodyText": "handler -> deframer", "url": "https://github.com/line/armeria/pull/3215#discussion_r548440208", "createdAt": "2020-12-24T08:09:16Z", "author": {"login": "trustin"}, "path": "grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpDeframerTckTest.java", "diffHunk": "@@ -67,25 +67,23 @@ void afterTest() {\n                                           .toArray(HttpData[]::new);\n         final StreamMessage<HttpData> source = StreamMessage.of(data);\n \n-        final HttpStreamDeframerHandler handler =\n-                new HttpStreamDeframerHandler(DecompressorRegistry.getDefaultInstance(), noopListener,\n-                                              null, -1);\n-        final HttpDeframer<DeframedMessage> deframer =\n-                        HttpDeframer.of(handler, ByteBufAllocator.DEFAULT);\n+        final HttpStreamDeframer handler =\n+                new HttpStreamDeframer(DecompressorRegistry.getDefaultInstance(), noopListener,\n+                                       null, -1);\n+        final StreamMessage<DeframedMessage> deframed =\n+                new DefaultHttpDeframer<>(source, handler, ByteBufAllocator.DEFAULT);\n \n-        source.subscribe(deframer, ImmediateEventExecutor.INSTANCE);\n-        return Flux.from(deframer).doOnNext(message -> byteBufs.add(message.buf()));\n+        return Flux.from(deframed).doOnNext(message -> byteBufs.add(message.buf()));\n     }\n \n     @Override\n     public Publisher<DeframedMessage> createFailedPublisher() {\n-        final Flux<HttpData> source = Flux.error(new RuntimeException());\n-        final HttpStreamDeframerHandler handler =\n-                new HttpStreamDeframerHandler(DecompressorRegistry.getDefaultInstance(), noopListener,\n-                                              null, -1);\n-        final HttpDeframer<DeframedMessage> reader = HttpDeframer.of(handler, ByteBufAllocator.DEFAULT);\n-        source.subscribe(reader);\n-        return reader;\n+        final StreamMessage<HttpData> source =\n+                new PublisherBasedStreamMessage<>(Flux.error(new RuntimeException()));\n+        final HttpStreamDeframer handler =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "544ce4d24151196861bf237f0c7820ef24ff35f5"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MDI0NQ==", "bodyText": "handler -> deframer", "url": "https://github.com/line/armeria/pull/3215#discussion_r548440245", "createdAt": "2020-12-24T08:09:26Z", "author": {"login": "trustin"}, "path": "grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpStreamDeframerTest.java", "diffHunk": "@@ -47,25 +47,24 @@\n     private static final HttpData DATA =\n             HttpData.wrap(GrpcTestUtil.uncompressedFrame(GrpcTestUtil.requestByteBuf()));\n \n+    private HttpStreamDeframer handler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "544ce4d24151196861bf237f0c7820ef24ff35f5"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6ec430fa7cc88a69940f599894d2fa80cdb1d45", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/f6ec430fa7cc88a69940f599894d2fa80cdb1d45", "committedDate": "2020-12-28T03:14:39Z", "message": "Address comments by @trustin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4OTg0MTky", "url": "https://github.com/line/armeria/pull/3215#pullrequestreview-558984192", "createdAt": "2020-12-28T03:27:23Z", "commit": {"oid": "f6ec430fa7cc88a69940f599894d2fa80cdb1d45"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4OTg2Mzcx", "url": "https://github.com/line/armeria/pull/3215#pullrequestreview-558986371", "createdAt": "2020-12-28T03:45:52Z", "commit": {"oid": "f6ec430fa7cc88a69940f599894d2fa80cdb1d45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwMzo0NTo1MlrOILwyvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwMzo0NTo1MlrOILwyvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIwNDY2OQ==", "bodyText": "How about renaming DefaultHttpDeframer to DecodedHttpStreamMessage or something similar?", "url": "https://github.com/line/armeria/pull/3215#discussion_r549204669", "createdAt": "2020-12-28T03:45:52Z", "author": {"login": "trustin"}, "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcWebTrailersExtractor.java", "diffHunk": "@@ -75,12 +76,11 @@ public HttpResponse execute(HttpClient delegate, ClientRequestContext ctx, HttpR\n         final HttpResponse response = delegate.execute(ctx, req);\n         final ByteBufAllocator alloc = ctx.alloc();\n \n-        final ArmeriaMessageDeframerHandler handler = new ArmeriaMessageDeframerHandler(maxMessageSizeBytes);\n-        final HttpDeframer<DeframedMessage> deframer = newHttpDeframer(handler, alloc, grpcWebText);\n-\n+        final ArmeriaMessageDeframer deframer = new ArmeriaMessageDeframer(maxMessageSizeBytes);\n         final DefaultStreamMessage<HttpData> publisher = new DefaultStreamMessage<>();\n-        publisher.subscribe(deframer, ctx.eventLoop());\n-        deframer.subscribe(new TrailersSubscriber(ctx), ctx.eventLoop());\n+        final StreamMessage<DeframedMessage> deframed =\n+                new DefaultHttpDeframer<>(publisher, deframer, alloc, byteBufConverter(alloc, grpcWebText));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6ec430fa7cc88a69940f599894d2fa80cdb1d45"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64088e7194b0b5ca3a66290bc89364007a6377af", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/64088e7194b0b5ca3a66290bc89364007a6377af", "committedDate": "2020-12-28T04:05:33Z", "message": "Rename DefaultHttpDefarmer to DecodedHttpStreamMessage"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4522, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}