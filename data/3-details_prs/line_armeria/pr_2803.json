{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NTg3MTc0", "number": 2803, "title": "Provide `RequestContext` to `RequestLog` sanitizers", "bodyText": "Motivation:\nA user sometimes needs to sanitize a RequestLog depending on\nadditional information available in RequestContext, e.g. current\nrequest path.\nModifications:\n\nUse BiFunction<RequestContext,...> instead of Function for\nsanitization.\nRegexBasedSanitizer is now a BiFunction.\nDeprecate the methods that require Functions in:\n\nLogging{Client,RpcClient,Service}Builder\nRequestOnlyLog.toRequestOnlyString()\nRequestLog.toResponseOnlyString()\n\n\n\nResult:\n\nA user can implement a sanitizer that behaves differently dependin on\nthe current context.\nThe methods that require Functions in the following methods have\nbeen deprecated:\n\nLogging{Client,RpcClient,Service}Builder\nRequestOnlyLog.toRequestOnlyString()\nRequestLog.toResponseOnlyString()\n\n\n\n/cc @andrewoma", "createdAt": "2020-06-17T03:57:31Z", "url": "https://github.com/line/armeria/pull/2803", "merged": true, "mergeCommit": {"oid": "ead4d1018db67aa68fe15e4ac237682f82662a61"}, "closed": true, "closedAt": "2020-06-17T12:25:43Z", "author": {"login": "trustin"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsBmgjgH2gAyNDM1NTg3MTc0OmM0NTg1MDdlNjBmZGI5NzVjMjZhOTg4MjM5NDg4ZjMzNjJkMzFjM2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsIcKUgH2gAyNDM1NTg3MTc0OmQ3YWIxNmU4N2VmMjY2ZGI3Mzc4NjA1OThmODZhYjU3OWJjNDgyZTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c458507e60fdb975c26a988239488f3362d31c3b", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/c458507e60fdb975c26a988239488f3362d31c3b", "committedDate": "2020-06-17T03:50:43Z", "message": "Provide `RequestContext` to `RequestLog` sanitizers\n\nMotivation:\n\nA user sometimes needs to sanitize a `RequestLog` depending on\nadditional information available in `RequestContext`, e.g. current\nrequest path.\n\nModifications:\n\n- Use `BiFunction<RequestContext,...>` instead of `Function` for\n  sanitization.\n- `RegexBasedSanitizer` is now a `BiFunction`.\n- Deprecate the methods that require `Function`s in:\n  - `Logging{Client,RpcClient,Service}Builder`\n  - `RequestOnlyLog.toRequestOnlyString()`\n  - `RequestLog.toResponseOnlyString()`\n\nResult:\n\n- A user can implement a sanitizer that behaves differently dependin on\n  the current context.\n- The methods that require `Function`s in the following methods have\n  been deprecated:\n  - `Logging{Client,RpcClient,Service}Builder`\n  - `RequestOnlyLog.toRequestOnlyString()`\n  - `RequestLog.toResponseOnlyString()`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c8059579b9d1125a0d32c1092952d5a0d43ca7e", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/9c8059579b9d1125a0d32c1092952d5a0d43ca7e", "committedDate": "2020-06-17T06:02:46Z", "message": "Fix test failure"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMTgyNTYz", "url": "https://github.com/line/armeria/pull/2803#pullrequestreview-432182563", "createdAt": "2020-06-17T08:39:18Z", "commit": {"oid": "9c8059579b9d1125a0d32c1092952d5a0d43ca7e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODozOToxOFrOGk7rOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODozOToxOFrOGk7rOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3OTY0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * It is common to have the {@link Function} that removes sensitive headers, like {@code \"Cookie\"} and\n          \n          \n            \n                 * It is common to have the {@link BiFunction} that removes sensitive headers, like {@code \"Cookie\"} and", "url": "https://github.com/line/armeria/pull/2803#discussion_r441379643", "createdAt": "2020-06-17T08:39:18Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/LoggingDecoratorBuilder.java", "diffHunk": "@@ -182,76 +195,157 @@ public LoggingDecoratorBuilder responseLogLevelMapper(\n         return responseLogLevelMapper;\n     }\n \n+    /**\n+     * Sets the {@link BiFunction} to use to sanitize request headers before logging. It is common to have the\n+     * {@link BiFunction} that removes sensitive headers, like {@code Cookie}, before logging. If unset, will\n+     * not sanitize request headers.\n+     */\n+    public LoggingDecoratorBuilder requestHeadersSanitizer(\n+            BiFunction<? super RequestContext, ? super HttpHeaders, ?> requestHeadersSanitizer) {\n+        this.requestHeadersSanitizer = requireNonNull(requestHeadersSanitizer, \"requestHeadersSanitizer\");\n+        return this;\n+    }\n+\n     /**\n      * Sets the {@link Function} to use to sanitize request headers before logging. It is common to have the\n      * {@link Function} that removes sensitive headers, like {@code Cookie}, before logging. If unset, will use\n      * {@link Function#identity()}.\n+     *\n+     * @deprecated Use {@link #requestHeadersSanitizer(BiFunction)}.\n      */\n+    @Deprecated\n     public LoggingDecoratorBuilder requestHeadersSanitizer(\n             Function<? super HttpHeaders, ?> requestHeadersSanitizer) {\n-        this.requestHeadersSanitizer = requireNonNull(requestHeadersSanitizer, \"requestHeadersSanitizer\");\n-        return this;\n+        requireNonNull(requestHeadersSanitizer, \"requestHeadersSanitizer\");\n+        return requestHeadersSanitizer((ctx, headers) -> requestHeadersSanitizer.apply(headers));\n     }\n \n     /**\n-     * Returns the {@link Function} to use to sanitize request headers before logging.\n+     * Returns the {@link BiFunction} to use to sanitize request headers before logging.\n      */\n-    protected Function<? super HttpHeaders, ?> requestHeadersSanitizer() {\n+    protected BiFunction<? super RequestContext, ? super HttpHeaders, ?> requestHeadersSanitizer() {\n         return requestHeadersSanitizer;\n     }\n \n+    /**\n+     * Sets the {@link BiFunction} to use to sanitize response headers before logging. It is common to have the\n+     * {@link BiFunction} that removes sensitive headers, like {@code Set-Cookie}, before logging. If unset,\n+     * will not sanitize response headers.\n+     */\n+    public LoggingDecoratorBuilder responseHeadersSanitizer(\n+            BiFunction<? super RequestContext, ? super HttpHeaders, ?> responseHeadersSanitizer) {\n+        this.responseHeadersSanitizer = requireNonNull(responseHeadersSanitizer, \"responseHeadersSanitizer\");\n+        return this;\n+    }\n+\n     /**\n      * Sets the {@link Function} to use to sanitize response headers before logging. It is common to have the\n      * {@link Function} that removes sensitive headers, like {@code Set-Cookie}, before logging. If unset,\n      * will use {@link Function#identity()}.\n+     *\n+     * @deprecated Use {@link #responseHeadersSanitizer(BiFunction)}.\n      */\n+    @Deprecated\n     public LoggingDecoratorBuilder responseHeadersSanitizer(\n             Function<? super HttpHeaders, ?> responseHeadersSanitizer) {\n-        this.responseHeadersSanitizer = requireNonNull(responseHeadersSanitizer, \"responseHeadersSanitizer\");\n-        return this;\n+        requireNonNull(responseHeadersSanitizer, \"responseHeadersSanitizer\");\n+        return responseHeadersSanitizer((ctx, headers) -> responseHeadersSanitizer.apply(headers));\n     }\n \n     /**\n-     * Returns the {@link Function} to use to sanitize response headers before logging.\n+     * Returns the {@link BiFunction} to use to sanitize response headers before logging.\n      */\n-    protected Function<? super HttpHeaders, ?> responseHeadersSanitizer() {\n+    protected BiFunction<? super RequestContext, ? super HttpHeaders, ?> responseHeadersSanitizer() {\n         return responseHeadersSanitizer;\n     }\n \n+    /**\n+     * Sets the {@link BiFunction} to use to sanitize request trailers before logging. If unset,\n+     * will not sanitize request trailers.\n+     */\n+    public LoggingDecoratorBuilder requestTrailersSanitizer(\n+            BiFunction<? super RequestContext, ? super HttpHeaders, ?> requestTrailersSanitizer) {\n+        this.requestTrailersSanitizer = requireNonNull(requestTrailersSanitizer, \"requestTrailersSanitizer\");\n+        return this;\n+    }\n+\n     /**\n      * Sets the {@link Function} to use to sanitize request trailers before logging. If unset,\n      * will use {@link Function#identity()}.\n+     *\n+     * @deprecated Use {@link #requestTrailersSanitizer(BiFunction)}.\n      */\n+    @Deprecated\n     public LoggingDecoratorBuilder requestTrailersSanitizer(\n             Function<? super HttpHeaders, ?> requestTrailersSanitizer) {\n-        this.requestTrailersSanitizer = requireNonNull(requestTrailersSanitizer, \"requestTrailersSanitizer\");\n-        return this;\n+        requireNonNull(requestTrailersSanitizer, \"requestTrailersSanitizer\");\n+        return requestTrailersSanitizer((ctx, trailers) -> requestTrailersSanitizer.apply(trailers));\n     }\n \n     /**\n-     * Returns the {@link Function} to use to sanitize request trailers before logging.\n+     * Returns the {@link BiFunction} to use to sanitize request trailers before logging.\n      */\n-    protected Function<? super HttpHeaders, ?> requestTrailersSanitizer() {\n+    protected BiFunction<? super RequestContext, ? super HttpHeaders, ?> requestTrailersSanitizer() {\n         return requestTrailersSanitizer;\n     }\n \n+    /**\n+     * Sets the {@link BiFunction} to use to sanitize response trailers before logging. If unset,\n+     * will not sanitize response trailers.\n+     */\n+    public LoggingDecoratorBuilder responseTrailersSanitizer(\n+            BiFunction<? super RequestContext, ? super HttpHeaders, ?> responseTrailersSanitizer) {\n+        this.responseTrailersSanitizer = requireNonNull(responseTrailersSanitizer, \"responseTrailersSanitizer\");\n+        return this;\n+    }\n+\n     /**\n      * Sets the {@link Function} to use to sanitize response trailers before logging. If unset,\n      * will use {@link Function#identity()}.\n+     *\n+     * @deprecated Use {@link #responseTrailersSanitizer(BiFunction)}.\n      */\n+    @Deprecated\n     public LoggingDecoratorBuilder responseTrailersSanitizer(\n             Function<? super HttpHeaders, ?> responseTrailersSanitizer) {\n-        this.responseTrailersSanitizer = requireNonNull(responseTrailersSanitizer, \"responseTrailersSanitizer\");\n-        return this;\n+        requireNonNull(responseTrailersSanitizer, \"responseTrailersSanitizer\");\n+        return responseTrailersSanitizer((ctx, trailers) -> responseTrailersSanitizer.apply(trailers));\n     }\n \n     /**\n      * Returns the {@link Function} to use to sanitize response trailers before logging.\n      */\n-    protected Function<? super HttpHeaders, ?> responseTrailersSanitizer() {\n+    protected BiFunction<? super RequestContext, ? super HttpHeaders, ?> responseTrailersSanitizer() {\n         return responseTrailersSanitizer;\n     }\n \n+    /**\n+     * Sets the {@link BiFunction} to use to sanitize request, response and trailers before logging.\n+     * It is common to have the {@link Function} that removes sensitive headers, like {@code \"Cookie\"} and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8059579b9d1125a0d32c1092952d5a0d43ca7e"}, "originalPosition": 207}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMjYxNDQ4", "url": "https://github.com/line/armeria/pull/2803#pullrequestreview-432261448", "createdAt": "2020-06-17T10:19:14Z", "commit": {"oid": "9c8059579b9d1125a0d32c1092952d5a0d43ca7e"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDoxOToxNVrOGk_bMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDoxOToyNlrOGk_blQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ0MTA3Mg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/line/armeria/pull/2803#discussion_r441441072", "createdAt": "2020-06-17T10:19:15Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/util/Functions.java", "diffHunk": "@@ -194,5 +194,19 @@\n         };\n     }\n \n+    /**\n+     * Returns a {@link BiFunction} that returns the first argument.\n+     */\n+    public static <T, U> BiFunction<T, U, T> first() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8059579b9d1125a0d32c1092952d5a0d43ca7e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ0MTE3Mw==", "bodyText": "\ud83d\udc4d \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/2803#discussion_r441441173", "createdAt": "2020-06-17T10:19:26Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/util/Functions.java", "diffHunk": "@@ -194,5 +194,19 @@\n         };\n     }\n \n+    /**\n+     * Returns a {@link BiFunction} that returns the first argument.\n+     */\n+    public static <T, U> BiFunction<T, U, T> first() {\n+        return (first, second) -> first;\n+    }\n+\n+    /**\n+     * Returns a {@link BiFunction} that returns the second argument.\n+     */\n+    public static <T, U> BiFunction<T, U, U> second() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8059579b9d1125a0d32c1092952d5a0d43ca7e"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7ab16e87ef266db737860598f86ab579bc482e7", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/d7ab16e87ef266db737860598f86ab579bc482e7", "committedDate": "2020-06-17T11:48:45Z", "message": "Update core/src/main/java/com/linecorp/armeria/common/logging/LoggingDecoratorBuilder.java\n\nCo-authored-by: Ikhun Um <ih.pert@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 222, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}