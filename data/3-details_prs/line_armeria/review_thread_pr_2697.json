{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1OTAzMTc1", "number": 2697, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjo0MDoyMFrOD8V2oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjoxOToxNVrOD-c7_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTk5MjAxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjo0MDoyMFrOGVOAoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjo0MDoyMFrOGVOAoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwMjgxNg==", "bodyText": "How about logging the exception at WARN level?", "url": "https://github.com/line/armeria/pull/2697#discussion_r424902816", "createdAt": "2020-05-14T06:40:20Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactory.java", "diffHunk": "@@ -737,6 +743,26 @@ static String findDescription(AnnotatedElement annotatedElement) {\n                 checkArgument(!value.isEmpty(), \"value is empty\");\n                 return value;\n             }\n+        } else if (annotatedElement instanceof Parameter) {\n+            // JavaDoc/KDoc descriptions only exist for method parameters\n+            final Parameter parameter = (Parameter) annotatedElement;\n+            final Executable executable = parameter.getDeclaringExecutable();\n+            final Class<?> clazz = executable.getDeclaringClass();\n+            final String fileName = getFileName(clazz.getCanonicalName());\n+            final String propertyName = executable.getName() + '.' + parameter.getName();\n+            try (InputStream stream = AnnotatedServiceFactory.class.getClassLoader()\n+                                                                   .getResourceAsStream(fileName)) {\n+                if (stream == null) {\n+                    return null;\n+                }\n+                final Properties properties = new Properties();\n+                properties.load(stream);\n+                if (properties.containsKey(propertyName)) {\n+                    return properties.getProperty(propertyName);\n+                }\n+            } catch (IOException exception) {\n+                exception.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a46309f63f97756b42014b961baa9bc0fc7a2f8"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTk5NDYyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/annotation/helper/ProcessedDocumentationHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjo0MTowM1rOGVOCLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjo0MTowM1rOGVOCLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwMzIxNA==", "bodyText": "Could be moved to com.linecorp.armeria.internal.server.annotation ?", "url": "https://github.com/line/armeria/pull/2697#discussion_r424903214", "createdAt": "2020-05-14T06:41:03Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/annotation/helper/ProcessedDocumentationHelper.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.helper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a46309f63f97756b42014b961baa9bc0fc7a2f8"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTk5NjU1OnYy", "diffSide": "RIGHT", "path": "examples/spring-boot-minimal-kotlin/build.gradle.kts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjo0MTo1MVrOGVODWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjo0ODoyNlrOGVOPCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwMzUxMw==", "bodyText": "I'm curious if we still need this even after we fixed the directory structure.", "url": "https://github.com/line/armeria/pull/2697#discussion_r424903513", "createdAt": "2020-05-14T06:41:51Z", "author": {"login": "trustin"}, "path": "examples/spring-boot-minimal-kotlin/build.gradle.kts", "diffHunk": "@@ -43,6 +43,10 @@ dependencies {\n     configurations[\"kapt\"].dependencies.add(project(\":annotation-processor\"))\n }\n \n+kapt {\n+    annotationProcessor(\"com.linecorp.armeria.server.annotation.processor.DocumentationProcessor\")\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a46309f63f97756b42014b961baa9bc0fc7a2f8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwNjA3NQ==", "bodyText": "Yes, I've tried it but it didn't invoke the annotation processor -.-", "url": "https://github.com/line/armeria/pull/2697#discussion_r424906075", "createdAt": "2020-05-14T06:47:28Z", "author": {"login": "hueneburg"}, "path": "examples/spring-boot-minimal-kotlin/build.gradle.kts", "diffHunk": "@@ -43,6 +43,10 @@ dependencies {\n     configurations[\"kapt\"].dependencies.add(project(\":annotation-processor\"))\n }\n \n+kapt {\n+    annotationProcessor(\"com.linecorp.armeria.server.annotation.processor.DocumentationProcessor\")\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwMzUxMw=="}, "originalCommit": {"oid": "1a46309f63f97756b42014b961baa9bc0fc7a2f8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwNjUwNA==", "bodyText": "Doh! That's a shame. No worries, then.", "url": "https://github.com/line/armeria/pull/2697#discussion_r424906504", "createdAt": "2020-05-14T06:48:26Z", "author": {"login": "trustin"}, "path": "examples/spring-boot-minimal-kotlin/build.gradle.kts", "diffHunk": "@@ -43,6 +43,10 @@ dependencies {\n     configurations[\"kapt\"].dependencies.add(project(\":annotation-processor\"))\n }\n \n+kapt {\n+    annotationProcessor(\"com.linecorp.armeria.server.annotation.processor.DocumentationProcessor\")\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwMzUxMw=="}, "originalCommit": {"oid": "1a46309f63f97756b42014b961baa9bc0fc7a2f8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjAwMTA0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjo0MzoxN1rOGVOF7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjo0MzoxN1rOGVOF7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwNDE3NQ==", "bodyText": "Could we cache this so it's not loaded as many times as the number of service methods?", "url": "https://github.com/line/armeria/pull/2697#discussion_r424904175", "createdAt": "2020-05-14T06:43:17Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactory.java", "diffHunk": "@@ -737,6 +743,26 @@ static String findDescription(AnnotatedElement annotatedElement) {\n                 checkArgument(!value.isEmpty(), \"value is empty\");\n                 return value;\n             }\n+        } else if (annotatedElement instanceof Parameter) {\n+            // JavaDoc/KDoc descriptions only exist for method parameters\n+            final Parameter parameter = (Parameter) annotatedElement;\n+            final Executable executable = parameter.getDeclaringExecutable();\n+            final Class<?> clazz = executable.getDeclaringClass();\n+            final String fileName = getFileName(clazz.getCanonicalName());\n+            final String propertyName = executable.getName() + '.' + parameter.getName();\n+            try (InputStream stream = AnnotatedServiceFactory.class.getClassLoader()\n+                                                                   .getResourceAsStream(fileName)) {\n+                if (stream == null) {\n+                    return null;\n+                }\n+                final Properties properties = new Properties();\n+                properties.load(stream);\n+                if (properties.containsKey(propertyName)) {\n+                    return properties.getProperty(propertyName);\n+                }\n+            } catch (IOException exception) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a46309f63f97756b42014b961baa9bc0fc7a2f8"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDAyNTU4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNDoxNTowOFrOGV16sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNzowOTozNlrOGV5DLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU1NjY1Ng==", "bodyText": "from FS. File could be removed for brevity:\n\n\nMissing an\n\n\nNeed to use {} instead of concatenation\n\"Failed to load an API description file: {}\", fileName, exception", "url": "https://github.com/line/armeria/pull/2697#discussion_r425556656", "createdAt": "2020-05-15T04:15:08Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactory.java", "diffHunk": "@@ -750,18 +759,21 @@ static String findDescription(AnnotatedElement annotatedElement) {\n             final Class<?> clazz = executable.getDeclaringClass();\n             final String fileName = getFileName(clazz.getCanonicalName());\n             final String propertyName = executable.getName() + '.' + parameter.getName();\n+            final Properties cachedProperties = DOCUMENTATION_PROPERTIES_CACHE.getIfPresent(fileName);\n+            if (cachedProperties != null) {\n+                return cachedProperties.getProperty(propertyName);\n+            }\n             try (InputStream stream = AnnotatedServiceFactory.class.getClassLoader()\n                                                                    .getResourceAsStream(fileName)) {\n                 if (stream == null) {\n                     return null;\n                 }\n                 final Properties properties = new Properties();\n                 properties.load(stream);\n-                if (properties.containsKey(propertyName)) {\n-                    return properties.getProperty(propertyName);\n-                }\n+                DOCUMENTATION_PROPERTIES_CACHE.put(fileName, properties);\n+                return properties.getProperty(propertyName);\n             } catch (IOException exception) {\n-                exception.printStackTrace();\n+                logger.warn(\"Error loading API description file from FS. File: \" + fileName, exception);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef013ce0900f45aa73975bf317686cc4b02aea2"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU5Njk5NQ==", "bodyText": "I have to use the concatenation because otherwise the logger thinks the exception is a second argument for the string...", "url": "https://github.com/line/armeria/pull/2697#discussion_r425596995", "createdAt": "2020-05-15T06:41:37Z", "author": {"login": "hueneburg"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactory.java", "diffHunk": "@@ -750,18 +759,21 @@ static String findDescription(AnnotatedElement annotatedElement) {\n             final Class<?> clazz = executable.getDeclaringClass();\n             final String fileName = getFileName(clazz.getCanonicalName());\n             final String propertyName = executable.getName() + '.' + parameter.getName();\n+            final Properties cachedProperties = DOCUMENTATION_PROPERTIES_CACHE.getIfPresent(fileName);\n+            if (cachedProperties != null) {\n+                return cachedProperties.getProperty(propertyName);\n+            }\n             try (InputStream stream = AnnotatedServiceFactory.class.getClassLoader()\n                                                                    .getResourceAsStream(fileName)) {\n                 if (stream == null) {\n                     return null;\n                 }\n                 final Properties properties = new Properties();\n                 properties.load(stream);\n-                if (properties.containsKey(propertyName)) {\n-                    return properties.getProperty(propertyName);\n-                }\n+                DOCUMENTATION_PROPERTIES_CACHE.put(fileName, properties);\n+                return properties.getProperty(propertyName);\n             } catch (IOException exception) {\n-                exception.printStackTrace();\n+                logger.warn(\"Error loading API description file from FS. File: \" + fileName, exception);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU1NjY1Ng=="}, "originalCommit": {"oid": "1ef013ce0900f45aa73975bf317686cc4b02aea2"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU5NzYwNQ==", "bodyText": "Really? I don't think so. This should work as expected for sure:\nlogger.warn(\"Failed to load an API description file: {}\", fileName, exception);", "url": "https://github.com/line/armeria/pull/2697#discussion_r425597605", "createdAt": "2020-05-15T06:43:18Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactory.java", "diffHunk": "@@ -750,18 +759,21 @@ static String findDescription(AnnotatedElement annotatedElement) {\n             final Class<?> clazz = executable.getDeclaringClass();\n             final String fileName = getFileName(clazz.getCanonicalName());\n             final String propertyName = executable.getName() + '.' + parameter.getName();\n+            final Properties cachedProperties = DOCUMENTATION_PROPERTIES_CACHE.getIfPresent(fileName);\n+            if (cachedProperties != null) {\n+                return cachedProperties.getProperty(propertyName);\n+            }\n             try (InputStream stream = AnnotatedServiceFactory.class.getClassLoader()\n                                                                    .getResourceAsStream(fileName)) {\n                 if (stream == null) {\n                     return null;\n                 }\n                 final Properties properties = new Properties();\n                 properties.load(stream);\n-                if (properties.containsKey(propertyName)) {\n-                    return properties.getProperty(propertyName);\n-                }\n+                DOCUMENTATION_PROPERTIES_CACHE.put(fileName, properties);\n+                return properties.getProperty(propertyName);\n             } catch (IOException exception) {\n-                exception.printStackTrace();\n+                logger.warn(\"Error loading API description file from FS. File: \" + fileName, exception);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU1NjY1Ng=="}, "originalCommit": {"oid": "1ef013ce0900f45aa73975bf317686cc4b02aea2"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYwNzk4Mw==", "bodyText": "Unlike the Javadoc and the method signature, Logging frameworks differently works if the last parameter is an instance of Throwable. It extracts throwable from the object params.\nhttps://github.com/qos-ch/logback/blob/7ee74ad132bf74ead68c5bb553f5353aa2588bb0/logback-classic/src/main/java/ch/qos/logback/classic/Logger.java#L701-L703\nhttps://github.com/qos-ch/logback/blob/7ee74ad132bf74ead68c5bb553f5353aa2588bb0/logback-classic/src/main/java/ch/qos/logback/classic/spi/LoggingEvent.java#L126-L128", "url": "https://github.com/line/armeria/pull/2697#discussion_r425607983", "createdAt": "2020-05-15T07:09:36Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactory.java", "diffHunk": "@@ -750,18 +759,21 @@ static String findDescription(AnnotatedElement annotatedElement) {\n             final Class<?> clazz = executable.getDeclaringClass();\n             final String fileName = getFileName(clazz.getCanonicalName());\n             final String propertyName = executable.getName() + '.' + parameter.getName();\n+            final Properties cachedProperties = DOCUMENTATION_PROPERTIES_CACHE.getIfPresent(fileName);\n+            if (cachedProperties != null) {\n+                return cachedProperties.getProperty(propertyName);\n+            }\n             try (InputStream stream = AnnotatedServiceFactory.class.getClassLoader()\n                                                                    .getResourceAsStream(fileName)) {\n                 if (stream == null) {\n                     return null;\n                 }\n                 final Properties properties = new Properties();\n                 properties.load(stream);\n-                if (properties.containsKey(propertyName)) {\n-                    return properties.getProperty(propertyName);\n-                }\n+                DOCUMENTATION_PROPERTIES_CACHE.put(fileName, properties);\n+                return properties.getProperty(propertyName);\n             } catch (IOException exception) {\n-                exception.printStackTrace();\n+                logger.warn(\"Error loading API description file from FS. File: \" + fileName, exception);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU1NjY1Ng=="}, "originalCommit": {"oid": "1ef013ce0900f45aa73975bf317686cc4b02aea2"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDM4MjE2OnYy", "diffSide": "RIGHT", "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNzoxODo0MlrOGV5Stg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNzoxODo0MlrOGV5Stg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYxMTk1OA==", "bodyText": "Could you append the stack trace to the warning message so that builder tools such as Maven and Gradle filter the output message with their logging option?\nStringWriter stackTraceWriter = new StringWriter();\ne.printStackTrace(new PrintWriter(stackTraceWriter));\nfullMessage += \"\\n\" + stackTraceWriter.toString();", "url": "https://github.com/line/armeria/pull/2697#discussion_r425611958", "createdAt": "2020-05-15T07:18:42Z", "author": {"login": "ikhoon"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -73,6 +75,9 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment\n             try {\n                 writeProperties(className, properties);\n             } catch (IOException e) {\n+                processingEnv.getMessager().printMessage(Kind.WARNING,\n+                                                         String.format(\"Could not write properties for `%s`\",\n+                                                                       className));\n                 e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a648596b941a77d521db28503e09d3a7693ecc"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDM4ODMyOnYy", "diffSide": "RIGHT", "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNzoyMDo0NVrOGV5Whw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNzoyMDo0NVrOGV5Whw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYxMjkzNQ==", "bodyText": "Ditto.", "url": "https://github.com/line/armeria/pull/2697#discussion_r425612935", "createdAt": "2020-05-15T07:20:45Z", "author": {"login": "ikhoon"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -122,6 +127,9 @@ private void processAnnotation(TypeElement annotationElement, RoundEnvironment r\n                     try {\n                         processMethod((ExecutableElement) element);\n                     } catch (IOException e) {\n+                        processingEnv.getMessager().printMessage(Kind.ERROR,\n+                                                                 \"Could not process all elements\",\n+                                                                 element);\n                         e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a648596b941a77d521db28503e09d3a7693ecc"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDY4NTE0OnYy", "diffSide": "RIGHT", "path": "examples/spring-boot-minimal/src/main/java/example/springframework/boot/minimal/HelloAnnotatedService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwODo1NDozNlrOGV8Rmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwODo1NDozNlrOGV8Rmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY2MDgyNw==", "bodyText": "As you know, @param documentation will have a lower priority than a @Description annotation. Could you make a test for it? \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2697#discussion_r425660827", "createdAt": "2020-05-15T08:54:36Z", "author": {"login": "ikhoon"}, "path": "examples/spring-boot-minimal/src/main/java/example/springframework/boot/minimal/HelloAnnotatedService.java", "diffHunk": "@@ -27,6 +27,7 @@ public String defaultHello() {\n \n     /**\n      * An example in order to show how to use validation framework in an annotated HTTP service.\n+     * @param name The name that should be greeted.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a648596b941a77d521db28503e09d3a7693ecc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTIwNzE0OnYy", "diffSide": "RIGHT", "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMjowMzoxNFrOGWljtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMjowMzoxNFrOGWljtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzNzIwNw==", "bodyText": "Should this be WARNING or ERROR?", "url": "https://github.com/line/armeria/pull/2697#discussion_r426337207", "createdAt": "2020-05-18T02:03:14Z", "author": {"login": "trustin"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -73,7 +77,12 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment\n             try {\n                 writeProperties(className, properties);\n             } catch (IOException e) {\n-                e.printStackTrace();\n+                final StringWriter writer = new StringWriter();\n+                e.printStackTrace(new PrintWriter(writer));\n+                processingEnv.getMessager().printMessage(\n+                        Kind.WARNING,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d312e12429080cd315dafcf30ca3c25aae6c4e1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTIwNzI1OnYy", "diffSide": "RIGHT", "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMjowMzoxN1rOGWljwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMjowMzoxN1rOGWljwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzNzIxOA==", "bodyText": "Should this be WARNING or ERROR?", "url": "https://github.com/line/armeria/pull/2697#discussion_r426337218", "createdAt": "2020-05-18T02:03:17Z", "author": {"login": "trustin"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -122,7 +131,12 @@ private void processAnnotation(TypeElement annotationElement, RoundEnvironment r\n                     try {\n                         processMethod((ExecutableElement) element);\n                     } catch (IOException e) {\n-                        e.printStackTrace();\n+                        final StringWriter writer = new StringWriter();\n+                        e.printStackTrace(new PrintWriter(writer));\n+                        processingEnv.getMessager().printMessage(\n+                                Kind.ERROR,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d312e12429080cd315dafcf30ca3c25aae6c4e1"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTIxNTgwOnYy", "diffSide": "RIGHT", "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMjoxMTo0NFrOGWlo9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMjoyMTozMVrOGWlvWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzODU0OQ==", "bodyText": "writer.toString() -> writer", "url": "https://github.com/line/armeria/pull/2697#discussion_r426338549", "createdAt": "2020-05-18T02:11:44Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -122,7 +131,12 @@ private void processAnnotation(TypeElement annotationElement, RoundEnvironment r\n                     try {\n                         processMethod((ExecutableElement) element);\n                     } catch (IOException e) {\n-                        e.printStackTrace();\n+                        final StringWriter writer = new StringWriter();\n+                        e.printStackTrace(new PrintWriter(writer));\n+                        processingEnv.getMessager().printMessage(\n+                                Kind.ERROR,\n+                                \"Could not process all elements\\n\" + writer.toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c602055561653ed7a8aa8af3a238b4c329c37393"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM0MDE4Nw==", "bodyText": "ditto", "url": "https://github.com/line/armeria/pull/2697#discussion_r426340187", "createdAt": "2020-05-18T02:21:31Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -122,7 +131,12 @@ private void processAnnotation(TypeElement annotationElement, RoundEnvironment r\n                     try {\n                         processMethod((ExecutableElement) element);\n                     } catch (IOException e) {\n-                        e.printStackTrace();\n+                        final StringWriter writer = new StringWriter();\n+                        e.printStackTrace(new PrintWriter(writer));\n+                        processingEnv.getMessager().printMessage(\n+                                Kind.ERROR,\n+                                \"Could not process all elements\\n\" + writer.toString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzODU0OQ=="}, "originalCommit": {"oid": "c602055561653ed7a8aa8af3a238b4c329c37393"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTIyNjA1OnYy", "diffSide": "RIGHT", "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMjoyMTowNFrOGWlvCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzowOToyNFrOGX5wWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM0MDEwNQ==", "bodyText": "Let's rephrase a little bit for consistency:\nFailed to write properties for: ...\nAlso, how about using System.lineSeparator()?", "url": "https://github.com/line/armeria/pull/2697#discussion_r426340105", "createdAt": "2020-05-18T02:21:04Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -73,7 +77,12 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment\n             try {\n                 writeProperties(className, properties);\n             } catch (IOException e) {\n-                e.printStackTrace();\n+                final StringWriter writer = new StringWriter();\n+                e.printStackTrace(new PrintWriter(writer));\n+                processingEnv.getMessager().printMessage(\n+                        Kind.WARNING,\n+                        String.format(\"Could not write properties for: %s\\n%s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74de2986f4f532a5a42d4b1c033e3b12df1f8797"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM0NDIyOA==", "bodyText": "Java handles platform specific things somewhat inconsistent... for the old io api it didn't matter if you used / or \\ on windows but here it does matter whether you use \\n or \\r\\n...", "url": "https://github.com/line/armeria/pull/2697#discussion_r426344228", "createdAt": "2020-05-18T02:43:39Z", "author": {"login": "hueneburg"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -73,7 +77,12 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment\n             try {\n                 writeProperties(className, properties);\n             } catch (IOException e) {\n-                e.printStackTrace();\n+                final StringWriter writer = new StringWriter();\n+                e.printStackTrace(new PrintWriter(writer));\n+                processingEnv.getMessager().printMessage(\n+                        Kind.WARNING,\n+                        String.format(\"Could not write properties for: %s\\n%s\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM0MDEwNQ=="}, "originalCommit": {"oid": "74de2986f4f532a5a42d4b1c033e3b12df1f8797"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyNjg5OA==", "bodyText": "IIRC you can just use %n.", "url": "https://github.com/line/armeria/pull/2697#discussion_r427126898", "createdAt": "2020-05-19T08:36:13Z", "author": {"login": "trustin"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -73,7 +77,12 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment\n             try {\n                 writeProperties(className, properties);\n             } catch (IOException e) {\n-                e.printStackTrace();\n+                final StringWriter writer = new StringWriter();\n+                e.printStackTrace(new PrintWriter(writer));\n+                processingEnv.getMessager().printMessage(\n+                        Kind.WARNING,\n+                        String.format(\"Could not write properties for: %s\\n%s\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM0MDEwNQ=="}, "originalCommit": {"oid": "74de2986f4f532a5a42d4b1c033e3b12df1f8797"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxNjY5Nw==", "bodyText": "Didn't know about it. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2697#discussion_r427716697", "createdAt": "2020-05-20T03:09:24Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -73,7 +77,12 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment\n             try {\n                 writeProperties(className, properties);\n             } catch (IOException e) {\n-                e.printStackTrace();\n+                final StringWriter writer = new StringWriter();\n+                e.printStackTrace(new PrintWriter(writer));\n+                processingEnv.getMessager().printMessage(\n+                        Kind.WARNING,\n+                        String.format(\"Could not write properties for: %s\\n%s\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM0MDEwNQ=="}, "originalCommit": {"oid": "74de2986f4f532a5a42d4b1c033e3b12df1f8797"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTI2NzgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/ProcessedDocumentationHelper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMjo1NTozNVrOGWmIDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNDoxNzowNlrOGX6ryA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM0NjUxMQ==", "bodyText": "nit: Could you move this constructor below the static method?\nhttps://line.github.io/armeria/community/developer-guide#organize", "url": "https://github.com/line/armeria/pull/2697#discussion_r426346511", "createdAt": "2020-05-18T02:55:35Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/ProcessedDocumentationHelper.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.server.annotation;\n+\n+/**\n+ * Helper class for Documentation processing.\n+ */\n+public final class ProcessedDocumentationHelper {\n+    private ProcessedDocumentationHelper() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d3eccfd8658700c21cda52f178d184abf9ec148"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY2NDYyOA==", "bodyText": "Do you use the @UtilityClass lombok annotation? then it would remove all the boiler plate (no static needed for class members, no final needed for class, no private constructor needed for class)", "url": "https://github.com/line/armeria/pull/2697#discussion_r427664628", "createdAt": "2020-05-19T23:53:24Z", "author": {"login": "hueneburg"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/ProcessedDocumentationHelper.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.server.annotation;\n+\n+/**\n+ * Helper class for Documentation processing.\n+ */\n+public final class ProcessedDocumentationHelper {\n+    private ProcessedDocumentationHelper() {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM0NjUxMQ=="}, "originalCommit": {"oid": "8d3eccfd8658700c21cda52f178d184abf9ec148"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzczMTY4Mg==", "bodyText": "Nope, we don't use Lombok so that Armeria values performance and provides optimized code and Javadoc.", "url": "https://github.com/line/armeria/pull/2697#discussion_r427731682", "createdAt": "2020-05-20T04:16:05Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/ProcessedDocumentationHelper.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.server.annotation;\n+\n+/**\n+ * Helper class for Documentation processing.\n+ */\n+public final class ProcessedDocumentationHelper {\n+    private ProcessedDocumentationHelper() {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM0NjUxMQ=="}, "originalCommit": {"oid": "8d3eccfd8658700c21cda52f178d184abf9ec148"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzczMTkxMg==", "bodyText": "Related issue: #2419", "url": "https://github.com/line/armeria/pull/2697#discussion_r427731912", "createdAt": "2020-05-20T04:17:06Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/ProcessedDocumentationHelper.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.server.annotation;\n+\n+/**\n+ * Helper class for Documentation processing.\n+ */\n+public final class ProcessedDocumentationHelper {\n+    private ProcessedDocumentationHelper() {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM0NjUxMQ=="}, "originalCommit": {"oid": "8d3eccfd8658700c21cda52f178d184abf9ec148"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODEyNDEyOnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-docservice.mdx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjoxOToxNVrOGYkAxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjozNDozNlrOGYkOvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwOTAzMQ==", "bodyText": "Gradle", "url": "https://github.com/line/armeria/pull/2697#discussion_r428409031", "createdAt": "2020-05-21T02:19:15Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/server-docservice.mdx", "diffHunk": "@@ -218,3 +220,33 @@ For gRPC:\n       ...\n   }\n   ```\n+\n+  Using JavaDoc:\n+\n+  This only works with method parameters.\n+  To enable it, you have to add the armeria annotation processor to your project:\n+\n+  Groovy configuration:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e1492942d4fd3380d1ff80a342b92863f1c24f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMjYwNw==", "bodyText": "Yes, it is gradle but using groovy xD\nthe one underneath is also gradle but with kotlin...", "url": "https://github.com/line/armeria/pull/2697#discussion_r428412607", "createdAt": "2020-05-21T02:34:36Z", "author": {"login": "hueneburg"}, "path": "site/src/pages/docs/server-docservice.mdx", "diffHunk": "@@ -218,3 +220,33 @@ For gRPC:\n       ...\n   }\n   ```\n+\n+  Using JavaDoc:\n+\n+  This only works with method parameters.\n+  To enable it, you have to add the armeria annotation processor to your project:\n+\n+  Groovy configuration:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwOTAzMQ=="}, "originalCommit": {"oid": "24e1492942d4fd3380d1ff80a342b92863f1c24f"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2586, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}