{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MjY0OTAw", "number": 2503, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNjo1Mzo1MFrODglNPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzo1NjowNlrODlbnBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDkwNjIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingStrategy.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNjo1Mzo1MFrOFq3DoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMDowNzowNFrOFtbCtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ4NjU2MA==", "bodyText": "Instead of adding just this knob to strategy, how about adding ThrottlingFailureHandler similar to our auth service?\nhttps://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/server/auth/AuthService.java#L75\nBy letting it return an arbitrary response, we get more flexibility (including implementing the x-ratelimit headers if we add a token throttler).", "url": "https://github.com/line/armeria/pull/2503#discussion_r380486560", "createdAt": "2020-02-18T06:53:50Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingStrategy.java", "diffHunk": "@@ -126,4 +152,11 @@ protected ThrottlingStrategy(@Nullable String name) {\n     public String name() {\n         return name;\n     }\n+\n+    /**\n+     * Returns the failure status to be used for the throttled requests.\n+     */\n+    protected HttpStatus failureStatus() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6da9d662948253850ef265160a903cb0ed7779ae"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU2NTEwMQ==", "bodyText": "Ok, I can try that if all reviewers in agreement on that.\nI have one problem with this proposed design though - its inability to pass the context directly from an authorizer to a handler. I experienced that in several places, including AuthService and ThrottlingService. In either case I ended up using ServiceRequestContext. While in case of ThrottlingService it was ok (but not very pretty) since I could set various x-ratelimit headers using ctx.addAdditionalResponseHeader() at ThrottlingStrategy.accept(), which sort of defeated the purpose of the error handler. In case of OAuth2 implementation, it was even trickier - token validation can fail in a number of ways and the RFC instructs to properly inform the client by composing specific JSon error response. Therefore setting up the headers to the context inside the authorize() was not very useful. What I needed then was an ability to pass some custom set of artefacts from an authorizer to a handler, including error response code, oauth2 error code and some additional elements none of which were headers.\nIdeally, the interfaces like Authorizer.authorize() and ThrottlingStrategy.accept() should not be binary and should allow responding with some custom context.", "url": "https://github.com/line/armeria/pull/2503#discussion_r380565101", "createdAt": "2020-02-18T09:53:28Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingStrategy.java", "diffHunk": "@@ -126,4 +152,11 @@ protected ThrottlingStrategy(@Nullable String name) {\n     public String name() {\n         return name;\n     }\n+\n+    /**\n+     * Returns the failure status to be used for the throttled requests.\n+     */\n+    protected HttpStatus failureStatus() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ4NjU2MA=="}, "originalCommit": {"oid": "6da9d662948253850ef265160a903cb0ed7779ae"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU3NjMzMQ==", "bodyText": "Ah that's a good point. I think passing the context into the handler makes sense and we probably want to do so for auth service too. For here, I was expecting the interface for the handler to match the signature of onFailure exactly.\nI think to clarify your point, the authorizer itself does have context so should be fine. But the auth handlers indeed just get the request, but should get the context in addition or instead.", "url": "https://github.com/line/armeria/pull/2503#discussion_r380576331", "createdAt": "2020-02-18T10:12:54Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingStrategy.java", "diffHunk": "@@ -126,4 +152,11 @@ protected ThrottlingStrategy(@Nullable String name) {\n     public String name() {\n         return name;\n     }\n+\n+    /**\n+     * Returns the failure status to be used for the throttled requests.\n+     */\n+    protected HttpStatus failureStatus() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ4NjU2MA=="}, "originalCommit": {"oid": "6da9d662948253850ef265160a903cb0ed7779ae"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU4MzA5NQ==", "bodyText": "Yes, I understand the idea of the handler. Could you recommend something on the context passing solution?", "url": "https://github.com/line/armeria/pull/2503#discussion_r380583095", "createdAt": "2020-02-18T10:25:12Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingStrategy.java", "diffHunk": "@@ -126,4 +152,11 @@ protected ThrottlingStrategy(@Nullable String name) {\n     public String name() {\n         return name;\n     }\n+\n+    /**\n+     * Returns the failure status to be used for the throttled requests.\n+     */\n+    protected HttpStatus failureStatus() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ4NjU2MA=="}, "originalCommit": {"oid": "6da9d662948253850ef265160a903cb0ed7779ae"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMwNjc0MA==", "bodyText": "I may be missing the concern so let me know - I was thinking if the signature of the handler takes a ServiceRequestContext and returns a HttpResponse, which is not what the auth service currently does, the context issue is solved since, using auth as an example, both the authorizer and handler have the context. So if here if both strategy has context (already does) and handler has it, it works. Let me know if this misses something.", "url": "https://github.com/line/armeria/pull/2503#discussion_r381306740", "createdAt": "2020-02-19T13:59:49Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingStrategy.java", "diffHunk": "@@ -126,4 +152,11 @@ protected ThrottlingStrategy(@Nullable String name) {\n     public String name() {\n         return name;\n     }\n+\n+    /**\n+     * Returns the failure status to be used for the throttled requests.\n+     */\n+    protected HttpStatus failureStatus() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ4NjU2MA=="}, "originalCommit": {"oid": "6da9d662948253850ef265160a903cb0ed7779ae"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM0MzA0Nw==", "bodyText": "Assuming that there are two parties - the authorizer and the handler (consider auth example), where one party (the authorizer) makes decisions based on complex logic (token validation) and the other party (the handler) fulfills the decisions made.\nLet's say the authorizer validates the token, and as a result, needs to pass following elements to the handler: HTTP error response code, OAuth error code, some reference data on the token (e.g. token expiry date). The latter two will have to be put into JSON response body. How such context gets passed with the proposed design?", "url": "https://github.com/line/armeria/pull/2503#discussion_r381343047", "createdAt": "2020-02-19T14:54:44Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingStrategy.java", "diffHunk": "@@ -126,4 +152,11 @@ protected ThrottlingStrategy(@Nullable String name) {\n     public String name() {\n         return name;\n     }\n+\n+    /**\n+     * Returns the failure status to be used for the throttled requests.\n+     */\n+    protected HttpStatus failureStatus() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ4NjU2MA=="}, "originalCommit": {"oid": "6da9d662948253850ef265160a903cb0ed7779ae"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNzYwNQ==", "bodyText": "Via RequestContext.attr()? Not sure if it's nice, though.", "url": "https://github.com/line/armeria/pull/2503#discussion_r381827605", "createdAt": "2020-02-20T07:40:59Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingStrategy.java", "diffHunk": "@@ -126,4 +152,11 @@ protected ThrottlingStrategy(@Nullable String name) {\n     public String name() {\n         return name;\n     }\n+\n+    /**\n+     * Returns the failure status to be used for the throttled requests.\n+     */\n+    protected HttpStatus failureStatus() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ4NjU2MA=="}, "originalCommit": {"oid": "6da9d662948253850ef265160a903cb0ed7779ae"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE3MzMwMw==", "bodyText": "Made a second commit - Implemented ThrottlingReject/AcceptHandler approach, similar to AuthService, as suggested by @anuraaga, to fully customize throttling response rejection/acceptance.\nIntroduced builders for ThrottlingService and ThrottlingRpcService.\nChanged default to TOO_MANY_REQUESTS only for HTTP. RPC still uses SERVICE_UNAVAILABLE.", "url": "https://github.com/line/armeria/pull/2503#discussion_r383173303", "createdAt": "2020-02-24T10:07:04Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingStrategy.java", "diffHunk": "@@ -126,4 +152,11 @@ protected ThrottlingStrategy(@Nullable String name) {\n     public String name() {\n         return name;\n     }\n+\n+    /**\n+     * Returns the failure status to be used for the throttled requests.\n+     */\n+    protected HttpStatus failureStatus() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ4NjU2MA=="}, "originalCommit": {"oid": "6da9d662948253850ef265160a903cb0ed7779ae"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzg1MjE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjowNToyOVrOFvGLcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTo0Nzo0MVrOFv5kSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyODYyNw==", "bodyText": "All protected methods in this class could be package-private and final.", "url": "https://github.com/line/armeria/pull/2503#discussion_r384928627", "createdAt": "2020-02-27T06:05:29Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;\n+    private ThrottlingRejectHandler<I, O> rejectHandler;\n+\n+    AbstractThrottlingServiceBuilder() {\n+        acceptHandler = requireNonNull(defaultAcceptHandler(), \"defaultAcceptHandler\");\n+        rejectHandler = requireNonNull(defaultRejectHandler(), \"defaultRejectHandler\");\n+    }\n+\n+    /**\n+     * Provides default request accept handler.\n+     */\n+    protected ThrottlingAcceptHandler<I, O> defaultAcceptHandler() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3MDU3MA==", "bodyText": "Made all methods package private and made internal getters/setters final.", "url": "https://github.com/line/armeria/pull/2503#discussion_r385770570", "createdAt": "2020-02-28T15:47:41Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;\n+    private ThrottlingRejectHandler<I, O> rejectHandler;\n+\n+    AbstractThrottlingServiceBuilder() {\n+        acceptHandler = requireNonNull(defaultAcceptHandler(), \"defaultAcceptHandler\");\n+        rejectHandler = requireNonNull(defaultRejectHandler(), \"defaultRejectHandler\");\n+    }\n+\n+    /**\n+     * Provides default request accept handler.\n+     */\n+    protected ThrottlingAcceptHandler<I, O> defaultAcceptHandler() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyODYyNw=="}, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzg1NDc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjowNjo0M1rOFvGM3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTo0MTowMFrOFv5UzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyODk5MA==", "bodyText": "Could we require a strategy at construction time? e.g. ThrottlingRpcService.builder(strategy)...build()", "url": "https://github.com/line/armeria/pull/2503#discussion_r384928990", "createdAt": "2020-02-27T06:06:43Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;\n+    private ThrottlingRejectHandler<I, O> rejectHandler;\n+\n+    AbstractThrottlingServiceBuilder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2NjYwNA==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2503#discussion_r385766604", "createdAt": "2020-02-28T15:41:00Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;\n+    private ThrottlingRejectHandler<I, O> rejectHandler;\n+\n+    AbstractThrottlingServiceBuilder() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyODk5MA=="}, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzg1NTA1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjowNzowMFrOFvGNDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTo0MToxMVrOFv5VLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyOTAzOQ==", "bodyText": "nit: 2020", "url": "https://github.com/line/armeria/pull/2503#discussion_r384929039", "createdAt": "2020-02-27T06:07:00Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2NjcwMw==", "bodyText": "Updated", "url": "https://github.com/line/armeria/pull/2503#discussion_r385766703", "createdAt": "2020-02-28T15:41:11Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyOTAzOQ=="}, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzg1ODAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingRpcServiceBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjowODo0OFrOFvGO4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxNTowMFrOFv4WYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyOTUwNQ==", "bodyText": "Could be ThrottlingRejectHandler<? super RpcRequest, ? extends RpcResponse>", "url": "https://github.com/line/armeria/pull/2503#discussion_r384929505", "createdAt": "2020-02-27T06:08:48Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingRpcServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.RpcRequest;\n+import com.linecorp.armeria.common.RpcResponse;\n+import com.linecorp.armeria.server.HttpStatusException;\n+import com.linecorp.armeria.server.RpcService;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link ThrottlingRpcService}.\n+ */\n+public class ThrottlingRpcServiceBuilder extends AbstractThrottlingServiceBuilder<RpcRequest, RpcResponse> {\n+\n+    ThrottlingRpcServiceBuilder() {}\n+\n+    /**\n+     * Sets {@link ThrottlingStrategy}.\n+     */\n+    public ThrottlingRpcServiceBuilder strategy(ThrottlingStrategy<RpcRequest> strategy) {\n+        setStrategy(strategy);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingAcceptHandler}.\n+     */\n+    public ThrottlingRpcServiceBuilder onAcceptedRequest(\n+            ThrottlingAcceptHandler<RpcRequest, RpcResponse> acceptHandler) {\n+        setAcceptHandler(acceptHandler);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingRejectHandler}.\n+     */\n+    public ThrottlingRpcServiceBuilder onRejectedRequest(\n+            ThrottlingRejectHandler<RpcRequest, RpcResponse> rejectHandler) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MDYyNw==", "bodyText": "This is how it's done in AuthService, which I followed, as suggested earlier. This new suggestion conflicts with SimpleDecoratingService.", "url": "https://github.com/line/armeria/pull/2503#discussion_r385750627", "createdAt": "2020-02-28T15:15:00Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingRpcServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.RpcRequest;\n+import com.linecorp.armeria.common.RpcResponse;\n+import com.linecorp.armeria.server.HttpStatusException;\n+import com.linecorp.armeria.server.RpcService;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link ThrottlingRpcService}.\n+ */\n+public class ThrottlingRpcServiceBuilder extends AbstractThrottlingServiceBuilder<RpcRequest, RpcResponse> {\n+\n+    ThrottlingRpcServiceBuilder() {}\n+\n+    /**\n+     * Sets {@link ThrottlingStrategy}.\n+     */\n+    public ThrottlingRpcServiceBuilder strategy(ThrottlingStrategy<RpcRequest> strategy) {\n+        setStrategy(strategy);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingAcceptHandler}.\n+     */\n+    public ThrottlingRpcServiceBuilder onAcceptedRequest(\n+            ThrottlingAcceptHandler<RpcRequest, RpcResponse> acceptHandler) {\n+        setAcceptHandler(acceptHandler);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingRejectHandler}.\n+     */\n+    public ThrottlingRpcServiceBuilder onRejectedRequest(\n+            ThrottlingRejectHandler<RpcRequest, RpcResponse> rejectHandler) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyOTUwNQ=="}, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzg1ODIzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingRpcServiceBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjowODo1NVrOFvGPAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxNToxMFrOFv4Wvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyOTUzNw==", "bodyText": "Could be ThrottlingAcceptHandler<? super RpcRequest, ? extends RpcResponse>", "url": "https://github.com/line/armeria/pull/2503#discussion_r384929537", "createdAt": "2020-02-27T06:08:55Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingRpcServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.RpcRequest;\n+import com.linecorp.armeria.common.RpcResponse;\n+import com.linecorp.armeria.server.HttpStatusException;\n+import com.linecorp.armeria.server.RpcService;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link ThrottlingRpcService}.\n+ */\n+public class ThrottlingRpcServiceBuilder extends AbstractThrottlingServiceBuilder<RpcRequest, RpcResponse> {\n+\n+    ThrottlingRpcServiceBuilder() {}\n+\n+    /**\n+     * Sets {@link ThrottlingStrategy}.\n+     */\n+    public ThrottlingRpcServiceBuilder strategy(ThrottlingStrategy<RpcRequest> strategy) {\n+        setStrategy(strategy);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingAcceptHandler}.\n+     */\n+    public ThrottlingRpcServiceBuilder onAcceptedRequest(\n+            ThrottlingAcceptHandler<RpcRequest, RpcResponse> acceptHandler) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MDcxOQ==", "bodyText": "This is how it's done in AuthService, which I followed, as suggested earlier. This new suggestion conflicts with SimpleDecoratingService.", "url": "https://github.com/line/armeria/pull/2503#discussion_r385750719", "createdAt": "2020-02-28T15:15:10Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingRpcServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.RpcRequest;\n+import com.linecorp.armeria.common.RpcResponse;\n+import com.linecorp.armeria.server.HttpStatusException;\n+import com.linecorp.armeria.server.RpcService;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link ThrottlingRpcService}.\n+ */\n+public class ThrottlingRpcServiceBuilder extends AbstractThrottlingServiceBuilder<RpcRequest, RpcResponse> {\n+\n+    ThrottlingRpcServiceBuilder() {}\n+\n+    /**\n+     * Sets {@link ThrottlingStrategy}.\n+     */\n+    public ThrottlingRpcServiceBuilder strategy(ThrottlingStrategy<RpcRequest> strategy) {\n+        setStrategy(strategy);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingAcceptHandler}.\n+     */\n+    public ThrottlingRpcServiceBuilder onAcceptedRequest(\n+            ThrottlingAcceptHandler<RpcRequest, RpcResponse> acceptHandler) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyOTUzNw=="}, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzg1ODcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjowOToyNlrOFvGPUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMzo1ODozNlrOFzaYmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyOTYxOQ==", "bodyText": "Could be ThrottlingAcceptHandler<? super I, ? extends O>", "url": "https://github.com/line/armeria/pull/2503#discussion_r384929619", "createdAt": "2020-02-27T06:09:26Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;\n+    private ThrottlingRejectHandler<I, O> rejectHandler;\n+\n+    AbstractThrottlingServiceBuilder() {\n+        acceptHandler = requireNonNull(defaultAcceptHandler(), \"defaultAcceptHandler\");\n+        rejectHandler = requireNonNull(defaultRejectHandler(), \"defaultRejectHandler\");\n+    }\n+\n+    /**\n+     * Provides default request accept handler.\n+     */\n+    protected ThrottlingAcceptHandler<I, O> defaultAcceptHandler() {\n+        return Service::serve;\n+    }\n+\n+    /**\n+     * Provides default request reject handler.\n+     */\n+    protected abstract ThrottlingRejectHandler<I, O> defaultRejectHandler();\n+\n+    /**\n+     * Sets {@link ThrottlingStrategy}.\n+     */\n+    protected void setStrategy(ThrottlingStrategy<I> strategy) {\n+        this.strategy = requireNonNull(strategy, \"strategy\");\n+    }\n+\n+    protected ThrottlingStrategy<I> getStrategy() {\n+        if (strategy == null) {\n+            throw new IllegalStateException(\"no \" + ThrottlingStrategy.class.getSimpleName() + \" was added.\");\n+        }\n+        return strategy;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingAcceptHandler}.\n+     */\n+    protected void setAcceptHandler(\n+            ThrottlingAcceptHandler<I, O> acceptHandler) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MDc5Nw==", "bodyText": "This is how it's done in AuthService, which I followed, as suggested earlier. This new suggestion conflicts with SimpleDecoratingService.", "url": "https://github.com/line/armeria/pull/2503#discussion_r385750797", "createdAt": "2020-02-28T15:15:17Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;\n+    private ThrottlingRejectHandler<I, O> rejectHandler;\n+\n+    AbstractThrottlingServiceBuilder() {\n+        acceptHandler = requireNonNull(defaultAcceptHandler(), \"defaultAcceptHandler\");\n+        rejectHandler = requireNonNull(defaultRejectHandler(), \"defaultRejectHandler\");\n+    }\n+\n+    /**\n+     * Provides default request accept handler.\n+     */\n+    protected ThrottlingAcceptHandler<I, O> defaultAcceptHandler() {\n+        return Service::serve;\n+    }\n+\n+    /**\n+     * Provides default request reject handler.\n+     */\n+    protected abstract ThrottlingRejectHandler<I, O> defaultRejectHandler();\n+\n+    /**\n+     * Sets {@link ThrottlingStrategy}.\n+     */\n+    protected void setStrategy(ThrottlingStrategy<I> strategy) {\n+        this.strategy = requireNonNull(strategy, \"strategy\");\n+    }\n+\n+    protected ThrottlingStrategy<I> getStrategy() {\n+        if (strategy == null) {\n+            throw new IllegalStateException(\"no \" + ThrottlingStrategy.class.getSimpleName() + \" was added.\");\n+        }\n+        return strategy;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingAcceptHandler}.\n+     */\n+    protected void setAcceptHandler(\n+            ThrottlingAcceptHandler<I, O> acceptHandler) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyOTYxOQ=="}, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ1Mzk3Nw==", "bodyText": "Then, we should fix AuthService first. \ud83d\ude04\nI must be forgotten when I was doing #2323. But don't worry, after this is merged, I will work on it. Thanks!", "url": "https://github.com/line/armeria/pull/2503#discussion_r389453977", "createdAt": "2020-03-09T03:58:36Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;\n+    private ThrottlingRejectHandler<I, O> rejectHandler;\n+\n+    AbstractThrottlingServiceBuilder() {\n+        acceptHandler = requireNonNull(defaultAcceptHandler(), \"defaultAcceptHandler\");\n+        rejectHandler = requireNonNull(defaultRejectHandler(), \"defaultRejectHandler\");\n+    }\n+\n+    /**\n+     * Provides default request accept handler.\n+     */\n+    protected ThrottlingAcceptHandler<I, O> defaultAcceptHandler() {\n+        return Service::serve;\n+    }\n+\n+    /**\n+     * Provides default request reject handler.\n+     */\n+    protected abstract ThrottlingRejectHandler<I, O> defaultRejectHandler();\n+\n+    /**\n+     * Sets {@link ThrottlingStrategy}.\n+     */\n+    protected void setStrategy(ThrottlingStrategy<I> strategy) {\n+        this.strategy = requireNonNull(strategy, \"strategy\");\n+    }\n+\n+    protected ThrottlingStrategy<I> getStrategy() {\n+        if (strategy == null) {\n+            throw new IllegalStateException(\"no \" + ThrottlingStrategy.class.getSimpleName() + \" was added.\");\n+        }\n+        return strategy;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingAcceptHandler}.\n+     */\n+    protected void setAcceptHandler(\n+            ThrottlingAcceptHandler<I, O> acceptHandler) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyOTYxOQ=="}, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzg1OTAxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjowOTozNFrOFvGPfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxNTozNVrOFv4XuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyOTY2Mw==", "bodyText": "Could be ThrottlingRejectHandler<? super I, ? extends O>", "url": "https://github.com/line/armeria/pull/2503#discussion_r384929663", "createdAt": "2020-02-27T06:09:34Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;\n+    private ThrottlingRejectHandler<I, O> rejectHandler;\n+\n+    AbstractThrottlingServiceBuilder() {\n+        acceptHandler = requireNonNull(defaultAcceptHandler(), \"defaultAcceptHandler\");\n+        rejectHandler = requireNonNull(defaultRejectHandler(), \"defaultRejectHandler\");\n+    }\n+\n+    /**\n+     * Provides default request accept handler.\n+     */\n+    protected ThrottlingAcceptHandler<I, O> defaultAcceptHandler() {\n+        return Service::serve;\n+    }\n+\n+    /**\n+     * Provides default request reject handler.\n+     */\n+    protected abstract ThrottlingRejectHandler<I, O> defaultRejectHandler();\n+\n+    /**\n+     * Sets {@link ThrottlingStrategy}.\n+     */\n+    protected void setStrategy(ThrottlingStrategy<I> strategy) {\n+        this.strategy = requireNonNull(strategy, \"strategy\");\n+    }\n+\n+    protected ThrottlingStrategy<I> getStrategy() {\n+        if (strategy == null) {\n+            throw new IllegalStateException(\"no \" + ThrottlingStrategy.class.getSimpleName() + \" was added.\");\n+        }\n+        return strategy;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingAcceptHandler}.\n+     */\n+    protected void setAcceptHandler(\n+            ThrottlingAcceptHandler<I, O> acceptHandler) {\n+        this.acceptHandler = requireNonNull(acceptHandler, \"acceptHandler\");\n+    }\n+\n+    protected ThrottlingAcceptHandler<I, O> getAcceptHandler() {\n+        return acceptHandler;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingRejectHandler}.\n+     */\n+    protected void setRejectHandler(\n+            ThrottlingRejectHandler<I, O> rejectHandler) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MDk2OQ==", "bodyText": "This is how it's done in AuthService, which I followed, as suggested earlier. This new suggestion conflicts with SimpleDecoratingService.", "url": "https://github.com/line/armeria/pull/2503#discussion_r385750969", "createdAt": "2020-02-28T15:15:35Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;\n+    private ThrottlingRejectHandler<I, O> rejectHandler;\n+\n+    AbstractThrottlingServiceBuilder() {\n+        acceptHandler = requireNonNull(defaultAcceptHandler(), \"defaultAcceptHandler\");\n+        rejectHandler = requireNonNull(defaultRejectHandler(), \"defaultRejectHandler\");\n+    }\n+\n+    /**\n+     * Provides default request accept handler.\n+     */\n+    protected ThrottlingAcceptHandler<I, O> defaultAcceptHandler() {\n+        return Service::serve;\n+    }\n+\n+    /**\n+     * Provides default request reject handler.\n+     */\n+    protected abstract ThrottlingRejectHandler<I, O> defaultRejectHandler();\n+\n+    /**\n+     * Sets {@link ThrottlingStrategy}.\n+     */\n+    protected void setStrategy(ThrottlingStrategy<I> strategy) {\n+        this.strategy = requireNonNull(strategy, \"strategy\");\n+    }\n+\n+    protected ThrottlingStrategy<I> getStrategy() {\n+        if (strategy == null) {\n+            throw new IllegalStateException(\"no \" + ThrottlingStrategy.class.getSimpleName() + \" was added.\");\n+        }\n+        return strategy;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingAcceptHandler}.\n+     */\n+    protected void setAcceptHandler(\n+            ThrottlingAcceptHandler<I, O> acceptHandler) {\n+        this.acceptHandler = requireNonNull(acceptHandler, \"acceptHandler\");\n+    }\n+\n+    protected ThrottlingAcceptHandler<I, O> getAcceptHandler() {\n+        return acceptHandler;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingRejectHandler}.\n+     */\n+    protected void setRejectHandler(\n+            ThrottlingRejectHandler<I, O> rejectHandler) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyOTY2Mw=="}, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzg2ODUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingAcceptHandler.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoxNTozOVrOFvGVOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzo1NDowNVrOFwWIeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMTEzMA==", "bodyText": "Just wondering, any thoughts on\n\nRemoving accept handler (what can we expect other than just running the delegate?)\nRemove delegate from reject handler (what can we expect other than not running delegate?)\n\nI think it's fine to have them too but it does add some complexity which might not ever be needed.", "url": "https://github.com/line/armeria/pull/2503#discussion_r384931130", "createdAt": "2020-02-27T06:15:39Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingAcceptHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.RpcRequest;\n+import com.linecorp.armeria.common.RpcResponse;\n+import com.linecorp.armeria.server.Service;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * A callback which is invoked to handle accepted (successful) requests indicated by {@link ThrottlingStrategy}.\n+ *\n+ * @param <I> the type of incoming {@link Request}. Must be {@link HttpRequest} or {@link RpcRequest}.\n+ * @param <O> the type of outgoing {@link Response}. Must be {@link HttpResponse} or {@link RpcResponse}.\n+ *\n+ * @see ThrottlingServiceBuilder#onAcceptedRequest(ThrottlingAcceptHandler)\n+ */\n+@FunctionalInterface\n+public interface ThrottlingAcceptHandler<I extends Request, O extends Response> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUxMTU1Mw==", "bodyText": "Remove delegate from reject handler (what can we expect other than not running delegate?)\n\nPerhaps delegating and then just counting?", "url": "https://github.com/line/armeria/pull/2503#discussion_r385511553", "createdAt": "2020-02-28T05:17:56Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingAcceptHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.RpcRequest;\n+import com.linecorp.armeria.common.RpcResponse;\n+import com.linecorp.armeria.server.Service;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * A callback which is invoked to handle accepted (successful) requests indicated by {@link ThrottlingStrategy}.\n+ *\n+ * @param <I> the type of incoming {@link Request}. Must be {@link HttpRequest} or {@link RpcRequest}.\n+ * @param <O> the type of outgoing {@link Response}. Must be {@link HttpResponse} or {@link RpcResponse}.\n+ *\n+ * @see ThrottlingServiceBuilder#onAcceptedRequest(ThrottlingAcceptHandler)\n+ */\n+@FunctionalInterface\n+public interface ThrottlingAcceptHandler<I extends Request, O extends Response> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMTEzMA=="}, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUxMjM0MQ==", "bodyText": "I'd expect anything counting-related would be in the strategy. But not sure.", "url": "https://github.com/line/armeria/pull/2503#discussion_r385512341", "createdAt": "2020-02-28T05:21:53Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingAcceptHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.RpcRequest;\n+import com.linecorp.armeria.common.RpcResponse;\n+import com.linecorp.armeria.server.Service;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * A callback which is invoked to handle accepted (successful) requests indicated by {@link ThrottlingStrategy}.\n+ *\n+ * @param <I> the type of incoming {@link Request}. Must be {@link HttpRequest} or {@link RpcRequest}.\n+ * @param <O> the type of outgoing {@link Response}. Must be {@link HttpResponse} or {@link RpcResponse}.\n+ *\n+ * @see ThrottlingServiceBuilder#onAcceptedRequest(ThrottlingAcceptHandler)\n+ */\n+@FunctionalInterface\n+public interface ThrottlingAcceptHandler<I extends Request, O extends Response> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMTEzMA=="}, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2NzQwMg==", "bodyText": "Kept the way it is, similar to AuthService.", "url": "https://github.com/line/armeria/pull/2503#discussion_r385767402", "createdAt": "2020-02-28T15:42:24Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingAcceptHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.RpcRequest;\n+import com.linecorp.armeria.common.RpcResponse;\n+import com.linecorp.armeria.server.Service;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * A callback which is invoked to handle accepted (successful) requests indicated by {@link ThrottlingStrategy}.\n+ *\n+ * @param <I> the type of incoming {@link Request}. Must be {@link HttpRequest} or {@link RpcRequest}.\n+ * @param <O> the type of outgoing {@link Response}. Must be {@link HttpResponse} or {@link RpcResponse}.\n+ *\n+ * @see ThrottlingServiceBuilder#onAcceptedRequest(ThrottlingAcceptHandler)\n+ */\n+@FunctionalInterface\n+public interface ThrottlingAcceptHandler<I extends Request, O extends Response> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMTEzMA=="}, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA4ODk0NQ==", "bodyText": "Looking at AuthService was mainly for inspiration, and may be good to follow as is, or maybe can be tweaked to improve the API here it's all case-by-case. I think it may make sense to remove delegate from AuthService too after a second look, though that's another topic.\nHere, there is even more to worry about since the strategy will actually be counting and making throttling decisions. So an accept handler that doesn't call the delegate stands to mess up the strategy quite easily, as would a failure handler that does call it. Decoupling the execution of a service with the generation of an error response seems cleaner here unless there are other concerns.\nAnyways, the goal here is not to follow AuthService pattern word for word but to come up with a clean API for throttling.", "url": "https://github.com/line/armeria/pull/2503#discussion_r386088945", "createdAt": "2020-03-01T08:47:06Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingAcceptHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.RpcRequest;\n+import com.linecorp.armeria.common.RpcResponse;\n+import com.linecorp.armeria.server.Service;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * A callback which is invoked to handle accepted (successful) requests indicated by {@link ThrottlingStrategy}.\n+ *\n+ * @param <I> the type of incoming {@link Request}. Must be {@link HttpRequest} or {@link RpcRequest}.\n+ * @param <O> the type of outgoing {@link Response}. Must be {@link HttpResponse} or {@link RpcResponse}.\n+ *\n+ * @see ThrottlingServiceBuilder#onAcceptedRequest(ThrottlingAcceptHandler)\n+ */\n+@FunctionalInterface\n+public interface ThrottlingAcceptHandler<I extends Request, O extends Response> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMTEzMA=="}, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIzMjc2Mg==", "bodyText": "I\u2019m slightly in favor of keeping the API as it is. A handle might want to insert some response header, schedule some task or increase a counter on accept/reject.", "url": "https://github.com/line/armeria/pull/2503#discussion_r386232762", "createdAt": "2020-03-02T07:35:26Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingAcceptHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.RpcRequest;\n+import com.linecorp.armeria.common.RpcResponse;\n+import com.linecorp.armeria.server.Service;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * A callback which is invoked to handle accepted (successful) requests indicated by {@link ThrottlingStrategy}.\n+ *\n+ * @param <I> the type of incoming {@link Request}. Must be {@link HttpRequest} or {@link RpcRequest}.\n+ * @param <O> the type of outgoing {@link Response}. Must be {@link HttpResponse} or {@link RpcResponse}.\n+ *\n+ * @see ThrottlingServiceBuilder#onAcceptedRequest(ThrottlingAcceptHandler)\n+ */\n+@FunctionalInterface\n+public interface ThrottlingAcceptHandler<I extends Request, O extends Response> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMTEzMA=="}, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIzODU4NA==", "bodyText": "Pretty sure the strategy can do all of these too - but it's ok to keep it anyways. Let's make sure the javadoc is clear about the expected use of delegate, especially on failure where it will usually cause a problem.", "url": "https://github.com/line/armeria/pull/2503#discussion_r386238584", "createdAt": "2020-03-02T07:54:05Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingAcceptHandler.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.RpcRequest;\n+import com.linecorp.armeria.common.RpcResponse;\n+import com.linecorp.armeria.server.Service;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+/**\n+ * A callback which is invoked to handle accepted (successful) requests indicated by {@link ThrottlingStrategy}.\n+ *\n+ * @param <I> the type of incoming {@link Request}. Must be {@link HttpRequest} or {@link RpcRequest}.\n+ * @param <O> the type of outgoing {@link Response}. Must be {@link HttpResponse} or {@link RpcResponse}.\n+ *\n+ * @see ThrottlingServiceBuilder#onAcceptedRequest(ThrottlingAcceptHandler)\n+ */\n+@FunctionalInterface\n+public interface ThrottlingAcceptHandler<I extends Request, O extends Response> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMTEzMA=="}, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzg3MTk3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingServiceBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoxNzo0MVrOFvGXSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTo0MjozN1rOFv5YXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMTY1Ng==", "bodyText": "Let's move lambdas to singleton constants", "url": "https://github.com/line/armeria/pull/2503#discussion_r384931656", "createdAt": "2020-02-27T06:17:41Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link ThrottlingService}.\n+ */\n+public class ThrottlingServiceBuilder extends AbstractThrottlingServiceBuilder<HttpRequest, HttpResponse> {\n+\n+    ThrottlingServiceBuilder() {}\n+\n+    /**\n+     * Sets {@link ThrottlingStrategy}.\n+     */\n+    public ThrottlingServiceBuilder strategy(ThrottlingStrategy<HttpRequest> strategy) {\n+        setStrategy(strategy);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingAcceptHandler}.\n+     */\n+    public ThrottlingServiceBuilder onAcceptedRequest(\n+            ThrottlingAcceptHandler<HttpRequest, HttpResponse> acceptHandler) {\n+        setAcceptHandler(acceptHandler);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingRejectHandler}.\n+     */\n+    public ThrottlingServiceBuilder onRejectedRequest(\n+            ThrottlingRejectHandler<HttpRequest, HttpResponse> rejectHandler) {\n+        setRejectHandler(rejectHandler);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides default throttling reject behaviour for {@link HttpRequest}.\n+     * Returns an {@link HttpResponse} with {@link HttpStatus#TOO_MANY_REQUESTS}.\n+     */\n+    @Override\n+    protected ThrottlingRejectHandler<HttpRequest, HttpResponse> defaultRejectHandler() {\n+        return (delegate, ctx, req, cause) -> HttpResponse.of(HttpStatus.TOO_MANY_REQUESTS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2NzUxNg==", "bodyText": "Moved", "url": "https://github.com/line/armeria/pull/2503#discussion_r385767516", "createdAt": "2020-02-28T15:42:37Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link ThrottlingService}.\n+ */\n+public class ThrottlingServiceBuilder extends AbstractThrottlingServiceBuilder<HttpRequest, HttpResponse> {\n+\n+    ThrottlingServiceBuilder() {}\n+\n+    /**\n+     * Sets {@link ThrottlingStrategy}.\n+     */\n+    public ThrottlingServiceBuilder strategy(ThrottlingStrategy<HttpRequest> strategy) {\n+        setStrategy(strategy);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingAcceptHandler}.\n+     */\n+    public ThrottlingServiceBuilder onAcceptedRequest(\n+            ThrottlingAcceptHandler<HttpRequest, HttpResponse> acceptHandler) {\n+        setAcceptHandler(acceptHandler);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingRejectHandler}.\n+     */\n+    public ThrottlingServiceBuilder onRejectedRequest(\n+            ThrottlingRejectHandler<HttpRequest, HttpResponse> rejectHandler) {\n+        setRejectHandler(rejectHandler);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides default throttling reject behaviour for {@link HttpRequest}.\n+     * Returns an {@link HttpResponse} with {@link HttpStatus#TOO_MANY_REQUESTS}.\n+     */\n+    @Override\n+    protected ThrottlingRejectHandler<HttpRequest, HttpResponse> defaultRejectHandler() {\n+        return (delegate, ctx, req, cause) -> HttpResponse.of(HttpStatus.TOO_MANY_REQUESTS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMTY1Ng=="}, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzg3MjU4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingRpcServiceBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoxODowNlrOFvGXrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTo0Mjo0OVrOFv5Y2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMTc1Ng==", "bodyText": "Ditto", "url": "https://github.com/line/armeria/pull/2503#discussion_r384931756", "createdAt": "2020-02-27T06:18:06Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingRpcServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.RpcRequest;\n+import com.linecorp.armeria.common.RpcResponse;\n+import com.linecorp.armeria.server.HttpStatusException;\n+import com.linecorp.armeria.server.RpcService;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link ThrottlingRpcService}.\n+ */\n+public class ThrottlingRpcServiceBuilder extends AbstractThrottlingServiceBuilder<RpcRequest, RpcResponse> {\n+\n+    ThrottlingRpcServiceBuilder() {}\n+\n+    /**\n+     * Sets {@link ThrottlingStrategy}.\n+     */\n+    public ThrottlingRpcServiceBuilder strategy(ThrottlingStrategy<RpcRequest> strategy) {\n+        setStrategy(strategy);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingAcceptHandler}.\n+     */\n+    public ThrottlingRpcServiceBuilder onAcceptedRequest(\n+            ThrottlingAcceptHandler<RpcRequest, RpcResponse> acceptHandler) {\n+        setAcceptHandler(acceptHandler);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingRejectHandler}.\n+     */\n+    public ThrottlingRpcServiceBuilder onRejectedRequest(\n+            ThrottlingRejectHandler<RpcRequest, RpcResponse> rejectHandler) {\n+        setRejectHandler(rejectHandler);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides default throttling reject behaviour for {@link RpcRequest}.\n+     * Responds with {@link HttpStatusException} with {@code 503 Service Unavailable}.\n+     */\n+    @Override\n+    protected ThrottlingRejectHandler<RpcRequest, RpcResponse> defaultRejectHandler() {\n+        return (delegate, ctx, req, cause) ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2NzY0MQ==", "bodyText": "Moved", "url": "https://github.com/line/armeria/pull/2503#discussion_r385767641", "createdAt": "2020-02-28T15:42:49Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingRpcServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.RpcRequest;\n+import com.linecorp.armeria.common.RpcResponse;\n+import com.linecorp.armeria.server.HttpStatusException;\n+import com.linecorp.armeria.server.RpcService;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link ThrottlingRpcService}.\n+ */\n+public class ThrottlingRpcServiceBuilder extends AbstractThrottlingServiceBuilder<RpcRequest, RpcResponse> {\n+\n+    ThrottlingRpcServiceBuilder() {}\n+\n+    /**\n+     * Sets {@link ThrottlingStrategy}.\n+     */\n+    public ThrottlingRpcServiceBuilder strategy(ThrottlingStrategy<RpcRequest> strategy) {\n+        setStrategy(strategy);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingAcceptHandler}.\n+     */\n+    public ThrottlingRpcServiceBuilder onAcceptedRequest(\n+            ThrottlingAcceptHandler<RpcRequest, RpcResponse> acceptHandler) {\n+        setAcceptHandler(acceptHandler);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets {@link ThrottlingRejectHandler}.\n+     */\n+    public ThrottlingRpcServiceBuilder onRejectedRequest(\n+            ThrottlingRejectHandler<RpcRequest, RpcResponse> rejectHandler) {\n+        setRejectHandler(rejectHandler);\n+        return this;\n+    }\n+\n+    /**\n+     * Provides default throttling reject behaviour for {@link RpcRequest}.\n+     * Responds with {@link HttpStatusException} with {@code 503 Service Unavailable}.\n+     */\n+    @Override\n+    protected ThrottlingRejectHandler<RpcRequest, RpcResponse> defaultRejectHandler() {\n+        return (delegate, ctx, req, cause) ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMTc1Ng=="}, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzg3NDY3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoxOToyNVrOFvGY_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNDo0MjoxN1rOFy7D8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMjA5NA==", "bodyText": "I think instead of having default*Handler methods we can initialize these to defaults instead of null. Doesn't hurt to add the accept handler to the constructor to be called with super in child builder.", "url": "https://github.com/line/armeria/pull/2503#discussion_r384932094", "createdAt": "2020-02-27T06:19:25Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3MDk1Ng==", "bodyText": "Kept the way it is", "url": "https://github.com/line/armeria/pull/2503#discussion_r385770956", "createdAt": "2020-02-28T15:48:20Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMjA5NA=="}, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA4ODY2Nw==", "bodyText": "Why?", "url": "https://github.com/line/armeria/pull/2503#discussion_r386088667", "createdAt": "2020-03-01T08:43:08Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMjA5NA=="}, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIzMzEyMQ==", "bodyText": "Calling super with the default handlers sounds better to me.", "url": "https://github.com/line/armeria/pull/2503#discussion_r386233121", "createdAt": "2020-03-02T07:36:38Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMjA5NA=="}, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI4ODE5NA==", "bodyText": "Why?\nBecause this is my design choice.\nDefaults are implementation specific and those aren't parameters (which they would become when passing them in the constructor). A descendant is capable of defining its own defaults, and in case of \"accept\" it's obligated to do so.\nLet me know if it violates any rules.", "url": "https://github.com/line/armeria/pull/2503#discussion_r386288194", "createdAt": "2020-03-02T09:47:31Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMjA5NA=="}, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3Nzk3Ng==", "bodyText": "While there are some concepts defined as rules in our contributing guidelines, many are just principles and we use code review to share to contributors. In this case, we use methods as an indicator of our user API and prefer not to use methods for passing parameters to a base class (I'll have to disagree that default behavior isn't a \"parameter\"). These default handlers should be constants, and there isn't much value in having all subclasses manage the boilerplate to make them constants. Every project will have its own style and level of rigor and that's what we have code review for.", "url": "https://github.com/line/armeria/pull/2503#discussion_r386377976", "createdAt": "2020-03-02T13:00:48Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMjA5NA=="}, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwNDI2NQ==", "bodyText": "Defaults are defining the behavior of the each implementation - ThrottlingServiceBuilder and ThrottlingRpcServiceBuilder. Such behavior defined by the base class - AbstractThrottlingServiceBuilder. defaultRejectHandler() method is not part of the class hierarchy public API. And no one suggest/forces to create boilerplate anywhere.\nInheritance and this kind of non-public behavior enforcement used widely in Java programming, including Armeria. You can take com.linecorp.armeria.client.retry.AbstractBackoff hierarchy and its doNextDelayMillis() method.", "url": "https://github.com/line/armeria/pull/2503#discussion_r386504265", "createdAt": "2020-03-02T16:32:16Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMjA5NA=="}, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk0MDc4NA==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2503#discussion_r388940784", "createdAt": "2020-03-06T14:42:17Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMjA5NA=="}, "originalCommit": {"oid": "11df63f285bbc90ce962c8e0ff1f4c055a9cbd3a"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDIwMzQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMzoyOTo0MFrOFxe7_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo0Njo0NlrOFx7Okw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzMTQyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.responseConverter = requireNonNull(responseConverter);\n          \n          \n            \n                    this.acceptHandler = acceptHandler;\n          \n          \n            \n                    this.rejectHandler = rejectHandler;\n          \n          \n            \n                    this.responseConverter = requireNonNull(responseConverter, \"responseConverter\");\n          \n          \n            \n                    this.acceptHandler = requireNonNull(acceptHandler, \"acceptHandler\");\n          \n          \n            \n                    this.rejectHandler = requireNonNull(rejectHandler, \"rejectHandler);", "url": "https://github.com/line/armeria/pull/2503#discussion_r387431421", "createdAt": "2020-03-04T03:29:40Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingService.java", "diffHunk": "@@ -38,41 +35,32 @@\n \n     private final ThrottlingStrategy<I> strategy;\n     private final Function<CompletionStage<? extends O>, O> responseConverter;\n+    private final ThrottlingAcceptHandler<I, O> acceptHandler;\n+    private final ThrottlingRejectHandler<I, O> rejectHandler;\n \n     /**\n      * Creates a new instance that decorates the specified {@link Service}.\n      */\n     protected AbstractThrottlingService(Service<I, O> delegate, ThrottlingStrategy<I> strategy,\n-                                        Function<CompletionStage<? extends O>, O> responseConverter) {\n+                                        Function<CompletionStage<? extends O>, O> responseConverter,\n+                                        ThrottlingAcceptHandler<I, O> acceptHandler,\n+                                        ThrottlingRejectHandler<I, O> rejectHandler) {\n         super(delegate);\n         this.strategy = requireNonNull(strategy, \"strategy\");\n         this.responseConverter = requireNonNull(responseConverter);\n+        this.acceptHandler = acceptHandler;\n+        this.rejectHandler = rejectHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18301d689d95667185e14c46f94ec3a78781b886"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NDkzMQ==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2503#discussion_r387894931", "createdAt": "2020-03-04T19:46:46Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingService.java", "diffHunk": "@@ -38,41 +35,32 @@\n \n     private final ThrottlingStrategy<I> strategy;\n     private final Function<CompletionStage<? extends O>, O> responseConverter;\n+    private final ThrottlingAcceptHandler<I, O> acceptHandler;\n+    private final ThrottlingRejectHandler<I, O> rejectHandler;\n \n     /**\n      * Creates a new instance that decorates the specified {@link Service}.\n      */\n     protected AbstractThrottlingService(Service<I, O> delegate, ThrottlingStrategy<I> strategy,\n-                                        Function<CompletionStage<? extends O>, O> responseConverter) {\n+                                        Function<CompletionStage<? extends O>, O> responseConverter,\n+                                        ThrottlingAcceptHandler<I, O> acceptHandler,\n+                                        ThrottlingRejectHandler<I, O> rejectHandler) {\n         super(delegate);\n         this.strategy = requireNonNull(strategy, \"strategy\");\n         this.responseConverter = requireNonNull(responseConverter);\n+        this.acceptHandler = acceptHandler;\n+        this.rejectHandler = rejectHandler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzMTQyMQ=="}, "originalCommit": {"oid": "18301d689d95667185e14c46f94ec3a78781b886"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDIzNzEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMzo1Mzo1OFrOFxfP-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo0Njo1NVrOFx7O4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNjUzOQ==", "bodyText": "Remove @Nullable?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private final ThrottlingStrategy<I> strategy;\n          \n          \n            \n                private final ThrottlingStrategy<I> strategy;", "url": "https://github.com/line/armeria/pull/2503#discussion_r387436539", "createdAt": "2020-03-04T03:53:58Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private final ThrottlingStrategy<I> strategy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18301d689d95667185e14c46f94ec3a78781b886"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NTAxMQ==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2503#discussion_r387895011", "createdAt": "2020-03-04T19:46:55Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private final ThrottlingStrategy<I> strategy;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNjUzOQ=="}, "originalCommit": {"oid": "18301d689d95667185e14c46f94ec3a78781b886"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDIzODAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMzo1NDo0NVrOFxfQjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo0NzowM1rOFx7PLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNjY4Ng==", "bodyText": "I think we can remove this.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (strategy == null) {\n          \n          \n            \n                        throw new IllegalStateException(\"no \" + ThrottlingStrategy.class.getSimpleName() + \" was added.\");\n          \n          \n            \n                    }", "url": "https://github.com/line/armeria/pull/2503#discussion_r387436686", "createdAt": "2020-03-04T03:54:45Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private final ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;\n+    private ThrottlingRejectHandler<I, O> rejectHandler;\n+\n+    AbstractThrottlingServiceBuilder(ThrottlingStrategy<I> strategy) {\n+        this.strategy = requireNonNull(strategy, \"strategy\");\n+        acceptHandler = requireNonNull(defaultAcceptHandler(), \"defaultAcceptHandler\");\n+        rejectHandler = requireNonNull(defaultRejectHandler(), \"defaultRejectHandler\");\n+    }\n+\n+    /**\n+     * Provides default request accept handler.\n+     */\n+    ThrottlingAcceptHandler<I, O> defaultAcceptHandler() {\n+        return Service::serve;\n+    }\n+\n+    /**\n+     * Provides default request reject handler.\n+     */\n+    abstract ThrottlingRejectHandler<I, O> defaultRejectHandler();\n+\n+    final ThrottlingStrategy<I> getStrategy() {\n+        if (strategy == null) {\n+            throw new IllegalStateException(\"no \" + ThrottlingStrategy.class.getSimpleName() + \" was added.\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18301d689d95667185e14c46f94ec3a78781b886"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NTA4Nw==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2503#discussion_r387895087", "createdAt": "2020-03-04T19:47:03Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link AbstractThrottlingService}.\n+ * @param <I> type of the request\n+ * @param <O> type of the response\n+ */\n+abstract class AbstractThrottlingServiceBuilder<I extends Request, O extends Response> {\n+\n+    @Nullable\n+    private final ThrottlingStrategy<I> strategy;\n+    private ThrottlingAcceptHandler<I, O> acceptHandler;\n+    private ThrottlingRejectHandler<I, O> rejectHandler;\n+\n+    AbstractThrottlingServiceBuilder(ThrottlingStrategy<I> strategy) {\n+        this.strategy = requireNonNull(strategy, \"strategy\");\n+        acceptHandler = requireNonNull(defaultAcceptHandler(), \"defaultAcceptHandler\");\n+        rejectHandler = requireNonNull(defaultRejectHandler(), \"defaultRejectHandler\");\n+    }\n+\n+    /**\n+     * Provides default request accept handler.\n+     */\n+    ThrottlingAcceptHandler<I, O> defaultAcceptHandler() {\n+        return Service::serve;\n+    }\n+\n+    /**\n+     * Provides default request reject handler.\n+     */\n+    abstract ThrottlingRejectHandler<I, O> defaultRejectHandler();\n+\n+    final ThrottlingStrategy<I> getStrategy() {\n+        if (strategy == null) {\n+            throw new IllegalStateException(\"no \" + ThrottlingStrategy.class.getSimpleName() + \" was added.\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNjY4Ng=="}, "originalCommit": {"oid": "18301d689d95667185e14c46f94ec3a78781b886"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDI1NzkzOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/server/throttling/ThrottlingServiceTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDoxMDozOVrOFxfcmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMTo0NjozMlrOFyD2oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzOTc2OA==", "bodyText": "Why don't we add a test for a custom reject handler?", "url": "https://github.com/line/armeria/pull/2503#discussion_r387439768", "createdAt": "2020-03-04T04:10:39Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/server/throttling/ThrottlingServiceTest.java", "diffHunk": "@@ -46,8 +47,13 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)\n     public ServerRule serverRule = new ServerRule() {\n         @Override\n         protected void configure(ServerBuilder sb) throws Exception {\n-            sb.service(\"/http-never\", SERVICE.decorate(ThrottlingService.newDecorator(never())));\n             sb.service(\"/http-always\", SERVICE.decorate(ThrottlingService.newDecorator(always())));\n+            sb.service(\"/http-never\", SERVICE.decorate(ThrottlingService.newDecorator(never())));\n+            sb.service(\"/http-never-custom\", SERVICE.decorate(\n+                    ThrottlingService.newDecorator(ThrottlingStrategy.of((ctx, req) -> completedFuture(false)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18301d689d95667185e14c46f94ec3a78781b886"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NTcwNA==", "bodyText": "Do you mean custom \"accept\" handler? If yes, I've added a new test for it.", "url": "https://github.com/line/armeria/pull/2503#discussion_r387895704", "createdAt": "2020-03-04T19:48:06Z", "author": {"login": "max904-github"}, "path": "core/src/test/java/com/linecorp/armeria/server/throttling/ThrottlingServiceTest.java", "diffHunk": "@@ -46,8 +47,13 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)\n     public ServerRule serverRule = new ServerRule() {\n         @Override\n         protected void configure(ServerBuilder sb) throws Exception {\n-            sb.service(\"/http-never\", SERVICE.decorate(ThrottlingService.newDecorator(never())));\n             sb.service(\"/http-always\", SERVICE.decorate(ThrottlingService.newDecorator(always())));\n+            sb.service(\"/http-never\", SERVICE.decorate(ThrottlingService.newDecorator(never())));\n+            sb.service(\"/http-never-custom\", SERVICE.decorate(\n+                    ThrottlingService.newDecorator(ThrottlingStrategy.of((ctx, req) -> completedFuture(false)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzOTc2OA=="}, "originalCommit": {"oid": "18301d689d95667185e14c46f94ec3a78781b886"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzNjI1Nw==", "bodyText": "Ah, Thanks!", "url": "https://github.com/line/armeria/pull/2503#discussion_r388036257", "createdAt": "2020-03-05T01:46:32Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/server/throttling/ThrottlingServiceTest.java", "diffHunk": "@@ -46,8 +47,13 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)\n     public ServerRule serverRule = new ServerRule() {\n         @Override\n         protected void configure(ServerBuilder sb) throws Exception {\n-            sb.service(\"/http-never\", SERVICE.decorate(ThrottlingService.newDecorator(never())));\n             sb.service(\"/http-always\", SERVICE.decorate(ThrottlingService.newDecorator(always())));\n+            sb.service(\"/http-never\", SERVICE.decorate(ThrottlingService.newDecorator(never())));\n+            sb.service(\"/http-never-custom\", SERVICE.decorate(\n+                    ThrottlingService.newDecorator(ThrottlingStrategy.of((ctx, req) -> completedFuture(false)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzOTc2OA=="}, "originalCommit": {"oid": "18301d689d95667185e14c46f94ec3a78781b886"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTc1OTgwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingRpcServiceBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzo1NTozMVrOFyUYog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMDo0MDo0MVrOFy0a5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwNzEwNg==", "bodyText": "nit: final\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ThrottlingRpcServiceBuilder extends AbstractThrottlingServiceBuilder<RpcRequest, RpcResponse> {\n          \n          \n            \n            public final class ThrottlingRpcServiceBuilder\n          \n          \n            \n                    extends AbstractThrottlingServiceBuilder<RpcRequest, RpcResponse> {", "url": "https://github.com/line/armeria/pull/2503#discussion_r388307106", "createdAt": "2020-03-05T13:55:31Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingRpcServiceBuilder.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.RpcRequest;\n+import com.linecorp.armeria.common.RpcResponse;\n+import com.linecorp.armeria.server.HttpStatusException;\n+import com.linecorp.armeria.server.RpcService;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link ThrottlingRpcService}.\n+ */\n+public class ThrottlingRpcServiceBuilder extends AbstractThrottlingServiceBuilder<RpcRequest, RpcResponse> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8fcf10c2eda15338ab875702aef892f8e0d1b6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzMTk3Mw==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2503#discussion_r388831973", "createdAt": "2020-03-06T10:40:41Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingRpcServiceBuilder.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.RpcRequest;\n+import com.linecorp.armeria.common.RpcResponse;\n+import com.linecorp.armeria.server.HttpStatusException;\n+import com.linecorp.armeria.server.RpcService;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link ThrottlingRpcService}.\n+ */\n+public class ThrottlingRpcServiceBuilder extends AbstractThrottlingServiceBuilder<RpcRequest, RpcResponse> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwNzEwNg=="}, "originalCommit": {"oid": "5b8fcf10c2eda15338ab875702aef892f8e0d1b6"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTc2MjYwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingServiceBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzo1NjowNlrOFyUaTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMDo0MDo0OVrOFy0bHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwNzUzMg==", "bodyText": "nit: final\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ThrottlingServiceBuilder extends AbstractThrottlingServiceBuilder<HttpRequest, HttpResponse> {\n          \n          \n            \n            public final class ThrottlingServiceBuilder\n          \n          \n            \n                    extends AbstractThrottlingServiceBuilder<HttpRequest, HttpResponse> {", "url": "https://github.com/line/armeria/pull/2503#discussion_r388307532", "createdAt": "2020-03-05T13:56:06Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link ThrottlingService}.\n+ */\n+public class ThrottlingServiceBuilder extends AbstractThrottlingServiceBuilder<HttpRequest, HttpResponse> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8fcf10c2eda15338ab875702aef892f8e0d1b6"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzMjAzMA==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2503#discussion_r388832030", "createdAt": "2020-03-06T10:40:49Z", "author": {"login": "max904-github"}, "path": "core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingServiceBuilder.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.throttling;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.Service;\n+\n+/**\n+ * Builds a new {@link ThrottlingService}.\n+ */\n+public class ThrottlingServiceBuilder extends AbstractThrottlingServiceBuilder<HttpRequest, HttpResponse> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwNzUzMg=="}, "originalCommit": {"oid": "5b8fcf10c2eda15338ab875702aef892f8e0d1b6"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3034, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}