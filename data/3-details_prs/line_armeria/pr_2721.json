{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MjQyNTk0", "number": 2721, "title": "Regex based sanitizer implementation for logging client and service", "bodyText": "The changes in this PR are for ticket.", "createdAt": "2020-05-18T03:54:24Z", "url": "https://github.com/line/armeria/pull/2721", "merged": true, "mergeCommit": {"oid": "cb7ecaf4cab2627e5d794099438d695e3b555da2"}, "closed": true, "closedAt": "2020-05-23T05:12:24Z", "author": {"login": "amitvc"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABciXlDqAH2gAyNDE5MjQyNTk0OjQzNDdjMmNiMjgyZTgxMDUwZmRkNGRlYTdkY2U4ZGU5ZTBkOGQ1YzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjxboxAH2gAyNDE5MjQyNTk0OmE4OWJiY2U1Y2U0NWUzNzQ3NDhkY2NhZmE3NTBjMDUxYzE3MmJhYTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0", "author": {"user": {"login": "amitvc", "name": "Amit Chavan"}}, "url": "https://github.com/line/armeria/commit/4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0", "committedDate": "2020-05-18T03:47:48Z", "message": "Regex based sanitizer implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MjI0NTI2", "url": "https://github.com/line/armeria/pull/2721#pullrequestreview-414224526", "createdAt": "2020-05-19T08:38:20Z", "commit": {"oid": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODozODoyMFrOGXV2AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0MjozMFrOGXWAeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyODMyMA==", "bodyText": "I guess we don't really need this type. Could you remove this class and just call toString() in RegexBasedSanitizer?", "url": "https://github.com/line/armeria/pull/2721#discussion_r427128320", "createdAt": "2020-05-19T08:38:20Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/AbstractSanitizerBase.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+import java.util.function.Function;\n+\n+/**\n+ * Base class.\n+ */\n+public class AbstractSanitizerBase implements Function<Object, Object> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyOTA4NA==", "bodyText": "final\nFunction<Object, String> ?", "url": "https://github.com/line/armeria/pull/2721#discussion_r427129084", "createdAt": "2020-05-19T08:39:32Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public class RegexBasedSanitizer extends AbstractSanitizerBase implements Function<Object, Object> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyOTg2OA==", "bodyText": "If List<Pattern> is the only parameter, how about removing this and adding RegexBasedSanitizer.of(Pattern...) and of(Iterable<Pattern>) ?", "url": "https://github.com/line/armeria/pull/2721#discussion_r427129868", "createdAt": "2020-05-19T08:40:42Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public class RegexBasedSanitizer extends AbstractSanitizerBase implements Function<Object, Object> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public Object apply(Object input) {\n+        String rawData = (String)super.apply(input);\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Builder facilitates building regexsanitizer.\n+     */\n+    public static class RegexBasedSanitizerBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzMDc0OQ==", "bodyText": "Sorry, but we use AssertJ for assertions. Could you convert to AssertJ? e.g.\nassertThat(ctx.logBuilder().toString()).contains(\"trustin\");\n...\nassertThat(ctx.logBuilder().toString()).doesNotContain(\"trustin\");", "url": "https://github.com/line/armeria/pull/2721#discussion_r427130749", "createdAt": "2020-05-19T08:42:06Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java", "diffHunk": "@@ -95,4 +99,59 @@ void logger() throws Exception {\n         defaultLoggerClient.execute(ctx, req);\n         verifyNoInteractions(logger);\n     }\n+\n+    @Test\n+    void sanitizeRequestHeaders() throws Exception {\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestHeadersSanitizer(new RegexBasedSanitizerBuilder()\n+                                                              .pattern(\"trustin\")\n+                                                              .pattern(\"com\")\n+                                                              .build())\n+                             .build(delegate);\n+\n+        // Pre sanitize step\n+        Assertions.assertTrue(ctx.logBuilder().toString().contains(\"trustin\"));\n+        Assertions.assertTrue(ctx.logBuilder().toString().contains(\"test.com\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzMTAwMg==", "bodyText": "Ditto - AssertJ", "url": "https://github.com/line/armeria/pull/2721#discussion_r427131002", "createdAt": "2020-05-19T08:42:30Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/logging/LoggingServiceTest.java", "diffHunk": "@@ -349,6 +352,64 @@ void sanitizeExceptionIntoString() throws Exception {\n                             same(sanitizedResponseCause));\n     }\n \n+    @Test\n+    void sanitizeRequestHeaders() throws Exception {\n+\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ServiceRequestContext ctx = ServiceRequestContext.of(req);\n+        ctx.logBuilder().endResponse(new Exception(\"not sanitized\"));\n+        final Logger logger = LoggingTestUtil.newMockLogger(ctx, capturedCause);\n+        when(logger.isInfoEnabled()).thenReturn(true);\n+        when(logger.isWarnEnabled()).thenReturn(true);\n+\n+        final LoggingService service =\n+                LoggingService.builder()\n+                              .logger(logger)\n+                              .requestLogLevel(LogLevel.INFO)\n+                              .successfulResponseLogLevel(LogLevel.INFO)\n+                              .requestHeadersSanitizer(new RegexBasedSanitizerBuilder()\n+                                                               .pattern(\"trustin\")\n+                                                               .pattern(\"com\")\n+                                                               .build())\n+                              .newDecorator().apply(delegate);\n+\n+        Assertions.assertTrue(ctx.logBuilder().toString().contains(\"trustin\"));\n+        Assertions.assertTrue(ctx.logBuilder().toString().contains(\"test.com\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "author": {"user": {"login": "amitvc", "name": "Amit Chavan"}}, "url": "https://github.com/line/armeria/commit/bd11c7b7d69c2a0769cf776787b243dbd3ba55a5", "committedDate": "2020-05-20T03:25:12Z", "message": "Removed AbstractSanitizerBase, fixed unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTc0NjYz", "url": "https://github.com/line/armeria/pull/2721#pullrequestreview-414974663", "createdAt": "2020-05-20T03:55:10Z", "commit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzo1NToxMFrOGX6YHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzo1OToyOFrOGX6cGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjg3OQ==", "bodyText": "nit: please check not-null\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static RegexBasedSanitizer of(Pattern...p) {\n          \n          \n            \n                public static RegexBasedSanitizer of(Pattern... patterns) {\n          \n          \n            \n                    requireNonNull(\"patterns\", patterns);", "url": "https://github.com/line/armeria/pull/2721#discussion_r427726879", "createdAt": "2020-05-20T03:55:10Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.\n+     * @return\n+     */\n+    public static RegexBasedSanitizer of(Pattern...p) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNzI3OQ==", "bodyText": "Could you add an additaional factory method for Iterable<? extends Pattern> patterns)\npublic static RegexBasedSanitizer of(Iterable<? extends Pattern> patterns);", "url": "https://github.com/line/armeria/pull/2721#discussion_r427727279", "createdAt": "2020-05-20T03:56:56Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.\n+     * @return\n+     */\n+    public static RegexBasedSanitizer of(Pattern...p) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjg3OQ=="}, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNzg5Ng==", "bodyText": "Could remove two lines.", "url": "https://github.com/line/armeria/pull/2721#discussion_r427727896", "createdAt": "2020-05-20T03:59:28Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.\n+     * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTc3ODUz", "url": "https://github.com/line/armeria/pull/2721#pullrequestreview-414977853", "createdAt": "2020-05-20T04:06:33Z", "commit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNDowNjozNFrOGX6iEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNDowNzo1M1rOGX6jXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyOTQyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(ctx.logBuilder().toString().contains(\"333-490-4499\"));\n          \n          \n            \n                    assertThat(ctx.logBuilder().toString()).contains(\"333-490-4499\");", "url": "https://github.com/line/armeria/pull/2721#discussion_r427729427", "createdAt": "2020-05-20T04:06:34Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java", "diffHunk": "@@ -95,4 +99,57 @@ void logger() throws Exception {\n         defaultLoggerClient.execute(ctx, req);\n         verifyNoInteractions(logger);\n     }\n+\n+    @Test\n+    void sanitizeRequestHeaders() throws Exception {\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestHeadersSanitizer(RegexBasedSanitizer.of(\n+                                     Pattern.compile(\"trustin\"),\n+                                     Pattern.compile(\"com\")))\n+                             .build(delegate);\n+\n+        // Pre sanitize step\n+        assertThat(ctx.logBuilder().toString().contains(\"trustin\"));\n+        assertThat(ctx.logBuilder().toString().contains(\"test.com\"));\n+        defaultLoggerClient.execute(ctx, req);\n+        // After the sanitize\n+        assertThat(!ctx.logBuilder().toString().contains(\"trustin\"));\n+        assertThat(!ctx.logBuilder().toString().contains(\"com\"));\n+    }\n+\n+    @Test\n+    void sanitizeRequestContent() throws Exception {\n+\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+        ctx.logBuilder().requestContent(\"Virginia 333-490-4499\", \"Virginia 333-490-4499\");\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestContentSanitizer(RegexBasedSanitizer.of(\n+                                     Pattern.compile(\"\\\\d{3}[-\\\\.\\\\s]\\\\d{3}[-\\\\.\\\\s]\\\\d{4}\")))\n+                             .build(delegate);\n+\n+        // Before sanitize content\n+        assertThat(ctx.logBuilder().toString().contains(\"333-490-4499\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyOTc1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(!ctx.logBuilder().toString().contains(\"333-490-4499\"));\n          \n          \n            \n                    assertThat(ctx.logBuilder().toString()).doesNotContain(\"333-490-4499\");", "url": "https://github.com/line/armeria/pull/2721#discussion_r427729758", "createdAt": "2020-05-20T04:07:53Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java", "diffHunk": "@@ -95,4 +99,57 @@ void logger() throws Exception {\n         defaultLoggerClient.execute(ctx, req);\n         verifyNoInteractions(logger);\n     }\n+\n+    @Test\n+    void sanitizeRequestHeaders() throws Exception {\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestHeadersSanitizer(RegexBasedSanitizer.of(\n+                                     Pattern.compile(\"trustin\"),\n+                                     Pattern.compile(\"com\")))\n+                             .build(delegate);\n+\n+        // Pre sanitize step\n+        assertThat(ctx.logBuilder().toString().contains(\"trustin\"));\n+        assertThat(ctx.logBuilder().toString().contains(\"test.com\"));\n+        defaultLoggerClient.execute(ctx, req);\n+        // After the sanitize\n+        assertThat(!ctx.logBuilder().toString().contains(\"trustin\"));\n+        assertThat(!ctx.logBuilder().toString().contains(\"com\"));\n+    }\n+\n+    @Test\n+    void sanitizeRequestContent() throws Exception {\n+\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+        ctx.logBuilder().requestContent(\"Virginia 333-490-4499\", \"Virginia 333-490-4499\");\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestContentSanitizer(RegexBasedSanitizer.of(\n+                                     Pattern.compile(\"\\\\d{3}[-\\\\.\\\\s]\\\\d{3}[-\\\\.\\\\s]\\\\d{4}\")))\n+                             .build(delegate);\n+\n+        // Before sanitize content\n+        assertThat(ctx.logBuilder().toString().contains(\"333-490-4499\"));\n+        defaultLoggerClient.execute(ctx, req);\n+        // Ensure sanitize the request content of the phone number 333-490-4499\n+        assertThat(!ctx.logBuilder().toString().contains(\"333-490-4499\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MjM3NTE1", "url": "https://github.com/line/armeria/pull/2721#pullrequestreview-414237515", "createdAt": "2020-05-19T08:53:33Z", "commit": {"oid": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo1MzozNFrOGXWejg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNDoxMjoyMVrOGX6nQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzODcwMg==", "bodyText": "nit: 2020", "url": "https://github.com/line/armeria/pull/2721#discussion_r427138702", "createdAt": "2020-05-19T08:53:34Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2017 LINE Corporation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjQ5MA==", "bodyText": "Pattern...p -> Pattern... patterns (need an empty space before p)", "url": "https://github.com/line/armeria/pull/2721#discussion_r427726490", "createdAt": "2020-05-20T03:53:25Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.\n+     * @return\n+     */\n+    public static RegexBasedSanitizer of(Pattern...p) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjYyOA==", "bodyText": "return new RegexBasedSanitizer(ImmutableList.copyOf(requireNonNull(patterns, \"patterns\")));", "url": "https://github.com/line/armeria/pull/2721#discussion_r427726628", "createdAt": "2020-05-20T03:54:02Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.\n+     * @return\n+     */\n+    public static RegexBasedSanitizer of(Pattern...p) {\n+        return new RegexBasedSanitizer(Arrays.asList(p));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjcxMA==", "bodyText": "Can remove @return because it doesn't say anything.", "url": "https://github.com/line/armeria/pull/2721#discussion_r427726710", "createdAt": "2020-05-20T03:54:26Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.\n+     * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjkwMQ==", "bodyText": "@param patterns the {@link Pattern}s", "url": "https://github.com/line/armeria/pull/2721#discussion_r427726901", "createdAt": "2020-05-20T03:55:16Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNzIxMw==", "bodyText": "Can remove this of we can change to\nRegexBasedSanitizer(List<Pattern> patterns) {\n    this.patterns = patterns;", "url": "https://github.com/line/armeria/pull/2721#discussion_r427727213", "createdAt": "2020-05-20T03:56:37Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNzczOQ==", "bodyText": "Creates a new instance.", "url": "https://github.com/line/armeria/pull/2721#discussion_r427727739", "createdAt": "2020-05-20T03:58:45Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyOTE4MA==", "bodyText": "Function<Object, String> -> Function<HttpHeaders, String>?", "url": "https://github.com/line/armeria/pull/2721#discussion_r427729180", "createdAt": "2020-05-20T04:05:24Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzczMDc1NQ==", "bodyText": "assertThat(ctx.logBuilder().toString()).contains(\"trustin\");", "url": "https://github.com/line/armeria/pull/2721#discussion_r427730755", "createdAt": "2020-05-20T04:12:21Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java", "diffHunk": "@@ -95,4 +99,57 @@ void logger() throws Exception {\n         defaultLoggerClient.execute(ctx, req);\n         verifyNoInteractions(logger);\n     }\n+\n+    @Test\n+    void sanitizeRequestHeaders() throws Exception {\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestHeadersSanitizer(RegexBasedSanitizer.of(\n+                                     Pattern.compile(\"trustin\"),\n+                                     Pattern.compile(\"com\")))\n+                             .build(delegate);\n+\n+        // Pre sanitize step\n+        assertThat(ctx.logBuilder().toString().contains(\"trustin\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a141b50ca52cf0f28296c7b0414c48996c889b0b", "author": {"user": {"login": "amitvc", "name": "Amit Chavan"}}, "url": "https://github.com/line/armeria/commit/a141b50ca52cf0f28296c7b0414c48996c889b0b", "committedDate": "2020-05-21T02:28:04Z", "message": "Fix unit tests and address other code review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1ODM4OTY4", "url": "https://github.com/line/armeria/pull/2721#pullrequestreview-415838968", "createdAt": "2020-05-21T02:30:45Z", "commit": {"oid": "a141b50ca52cf0f28296c7b0414c48996c889b0b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjozMDo0NVrOGYkLaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjozMDo0NVrOGYkLaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMTc1Mg==", "bodyText": "Ah, right. Sorry about the comment. \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2721#discussion_r428411752", "createdAt": "2020-05-21T02:30:45Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyOTE4MA=="}, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10759e3f73a93aff4234902b610756d49a50e3a9", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/10759e3f73a93aff4234902b610756d49a50e3a9", "committedDate": "2020-05-21T04:47:19Z", "message": "Some minor clean-up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1ODc2MzY1", "url": "https://github.com/line/armeria/pull/2721#pullrequestreview-415876365", "createdAt": "2020-05-21T04:50:42Z", "commit": {"oid": "10759e3f73a93aff4234902b610756d49a50e3a9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1ODc2NDM4", "url": "https://github.com/line/armeria/pull/2721#pullrequestreview-415876438", "createdAt": "2020-05-21T04:51:00Z", "commit": {"oid": "10759e3f73a93aff4234902b610756d49a50e3a9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NjE1NzA2", "url": "https://github.com/line/armeria/pull/2721#pullrequestreview-416615706", "createdAt": "2020-05-22T02:50:18Z", "commit": {"oid": "10759e3f73a93aff4234902b610756d49a50e3a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMjo1MDoxOFrOGZJEJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMjo1MDoxOFrOGZJEJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxNjEwMw==", "bodyText": "replaceAll calls find internally so I think we can remove this, or it has to run the regex from the beginning again.", "url": "https://github.com/line/armeria/pull/2721#discussion_r429016103", "createdAt": "2020-05-22T02:50:18Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    /**\n+     * Returns a new instance created from the specified {@link Pattern}s.\n+     */\n+    public static RegexBasedSanitizer of(Pattern... patterns) {\n+        requireNonNull(patterns, \"patterns\");\n+        return new RegexBasedSanitizer(ImmutableList.copyOf(patterns));\n+    }\n+\n+    /**\n+     * Returns a new instance created from the specified {@link Pattern}s.\n+     */\n+    public static RegexBasedSanitizer of(Iterable<Pattern> patterns) {\n+        requireNonNull(patterns, \"patterns\");\n+        return new RegexBasedSanitizer(ImmutableList.copyOf(patterns));\n+    }\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Creates a new instance.\n+     * @param patterns {@link Pattern}.\n+     */\n+    RegexBasedSanitizer(List<Pattern> patterns) {\n+        this.patterns = patterns;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String apply(@Nullable Object input) {\n+        if (input == null) {\n+            return null;\n+        }\n+\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10759e3f73a93aff4234902b610756d49a50e3a9"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28cec3cfaccd741d6159ccd9521c41edf31fbd21", "author": {"user": {"login": "amitvc", "name": "Amit Chavan"}}, "url": "https://github.com/line/armeria/commit/28cec3cfaccd741d6159ccd9521c41edf31fbd21", "committedDate": "2020-05-22T12:28:46Z", "message": "Removed unnecessary check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a89bbce5ce45e374748dccafa750c051c172baa2", "author": {"user": {"login": "amitvc", "name": "Amit Chavan"}}, "url": "https://github.com/line/armeria/commit/a89bbce5ce45e374748dccafa750c051c172baa2", "committedDate": "2020-05-22T12:28:58Z", "message": "Merge branch 'header_content_sanitizer' of https://github.com/amitvc/armeria into header_content_sanitizer"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 512, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}