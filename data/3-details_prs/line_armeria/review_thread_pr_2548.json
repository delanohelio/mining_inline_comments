{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMzc2ODQ2", "number": 2548, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzo0OTozNlrODk8M4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMDoyMToxNlrODmOoAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDYxNjY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzo0OTozNlrOFxi3hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzo1Nzo1MVrOFxjDug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NTgxNQ==", "bodyText": "I don't think we should add a gRPC only API to request context interface. Actually I was expecting a gRPC only implementation to look a little hacky hence encouraging a client option or something similarly at the client level instead :)", "url": "https://github.com/line/armeria/pull/2548#discussion_r387495815", "createdAt": "2020-03-04T07:49:36Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java", "diffHunk": "@@ -564,19 +565,21 @@ default String pathParam(String name) {\n      */\n     void addAdditionalResponseHeaders(Iterable<? extends Entry<? extends CharSequence, ?>> headers);\n \n-    /**\n-     * Removes all headers with the specified {@code name}.\n-     *\n-     * @return {@code true} if at least one entry has been removed\n-     */\n-    boolean removeAdditionalResponseHeader(CharSequence name);\n-\n     /**\n      * Returns the {@link HttpHeaders} which is returned along with any other trailers when a\n      * {@link Service} completes an {@link HttpResponse}.\n      */\n     HttpHeaders additionalResponseTrailers();\n \n+    /**\n+     * Returns the {@link HttpHeaders} which is set using {@code (add|set)AdditionalResponseTrailer} and\n+     * clears the {@link HttpHeaders} so that the {@link HttpHeaders} is not sending twice when\n+     * a {@link Service} completes an {@link HttpResponse}.\n+     *\n+     * <p>This is used only when the trailers is sent as a {@link ResponseHeaders} in gRPC.\n+     */\n+    HttpHeaders getAndRemoveAdditionalResponseTrailers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc38adc242e785d19c0cf576639979e1ea1d6a1c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NjcxNg==", "bodyText": "That being said if we can expose this through an internal API that relies on downcast to DefaultRequestContext it's still ok", "url": "https://github.com/line/armeria/pull/2548#discussion_r387496716", "createdAt": "2020-03-04T07:51:56Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java", "diffHunk": "@@ -564,19 +565,21 @@ default String pathParam(String name) {\n      */\n     void addAdditionalResponseHeaders(Iterable<? extends Entry<? extends CharSequence, ?>> headers);\n \n-    /**\n-     * Removes all headers with the specified {@code name}.\n-     *\n-     * @return {@code true} if at least one entry has been removed\n-     */\n-    boolean removeAdditionalResponseHeader(CharSequence name);\n-\n     /**\n      * Returns the {@link HttpHeaders} which is returned along with any other trailers when a\n      * {@link Service} completes an {@link HttpResponse}.\n      */\n     HttpHeaders additionalResponseTrailers();\n \n+    /**\n+     * Returns the {@link HttpHeaders} which is set using {@code (add|set)AdditionalResponseTrailer} and\n+     * clears the {@link HttpHeaders} so that the {@link HttpHeaders} is not sending twice when\n+     * a {@link Service} completes an {@link HttpResponse}.\n+     *\n+     * <p>This is used only when the trailers is sent as a {@link ResponseHeaders} in gRPC.\n+     */\n+    HttpHeaders getAndRemoveAdditionalResponseTrailers();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NTgxNQ=="}, "originalCommit": {"oid": "cc38adc242e785d19c0cf576639979e1ea1d6a1c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5ODkzOA==", "bodyText": "Ah, Thanks. Yes, I was a little worried about it but just didn't make sure. \ud83d\ude09 Let me remove this.", "url": "https://github.com/line/armeria/pull/2548#discussion_r387498938", "createdAt": "2020-03-04T07:57:51Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java", "diffHunk": "@@ -564,19 +565,21 @@ default String pathParam(String name) {\n      */\n     void addAdditionalResponseHeaders(Iterable<? extends Entry<? extends CharSequence, ?>> headers);\n \n-    /**\n-     * Removes all headers with the specified {@code name}.\n-     *\n-     * @return {@code true} if at least one entry has been removed\n-     */\n-    boolean removeAdditionalResponseHeader(CharSequence name);\n-\n     /**\n      * Returns the {@link HttpHeaders} which is returned along with any other trailers when a\n      * {@link Service} completes an {@link HttpResponse}.\n      */\n     HttpHeaders additionalResponseTrailers();\n \n+    /**\n+     * Returns the {@link HttpHeaders} which is set using {@code (add|set)AdditionalResponseTrailer} and\n+     * clears the {@link HttpHeaders} so that the {@link HttpHeaders} is not sending twice when\n+     * a {@link Service} completes an {@link HttpResponse}.\n+     *\n+     * <p>This is used only when the trailers is sent as a {@link ResponseHeaders} in gRPC.\n+     */\n+    HttpHeaders getAndRemoveAdditionalResponseTrailers();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NTgxNQ=="}, "originalCommit": {"oid": "cc38adc242e785d19c0cf576639979e1ea1d6a1c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDc3MzU4OnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODo0NTo0NVrOFxkV3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODo1MTo0OFrOFxkhQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUxOTk2NA==", "bodyText": "I forget if request context is unwrappable but if so better to use unwrap.", "url": "https://github.com/line/armeria/pull/2548#discussion_r387519964", "createdAt": "2020-03-04T08:45:45Z", "author": {"login": "anuraaga"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java", "diffHunk": "@@ -534,6 +531,12 @@ static HttpHeaders statusToTrailers(\n                          Base64.getEncoder().encodeToString(proto.toByteArray()));\n         }\n \n+        if (ctx instanceof DefaultServiceRequestContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyMjg4MQ==", "bodyText": "It's not unwrappable so I guess just using instanceof is the best I can do. \ud83d\ude06", "url": "https://github.com/line/armeria/pull/2548#discussion_r387522881", "createdAt": "2020-03-04T08:51:48Z", "author": {"login": "minwoox"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java", "diffHunk": "@@ -534,6 +531,12 @@ static HttpHeaders statusToTrailers(\n                          Base64.getEncoder().encodeToString(proto.toByteArray()));\n         }\n \n+        if (ctx instanceof DefaultServiceRequestContext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUxOTk2NA=="}, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTY4ODM0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzozNjoxNlrOFyTs7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNjowMDowN1rOFyt8lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NTkxOA==", "bodyText": "How about using {@linkplain}?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws IllegalArgumentException if the specified {@code statusCode} is\n          \n          \n            \n                 *                                  {@link HttpStatus#isInformational()}.\n          \n          \n            \n                 * @throws IllegalArgumentException if the specified {@code statusCode} is\n          \n          \n            \n                 *                                  {@linkplain HttpStatus#isInformational() informational}.", "url": "https://github.com/line/armeria/pull/2548#discussion_r388295918", "createdAt": "2020-03-05T13:36:16Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java", "diffHunk": "@@ -40,6 +41,9 @@\n      * Creates a new HTTP response.\n      *\n      * @param statusCode the HTTP status code\n+     *\n+     * @throws IllegalArgumentException if the specified {@code statusCode} is\n+     *                                  {@link HttpStatus#isInformational()}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyNTkxMA==", "bodyText": "Fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2548#discussion_r388725910", "createdAt": "2020-03-06T06:00:07Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java", "diffHunk": "@@ -40,6 +41,9 @@\n      * Creates a new HTTP response.\n      *\n      * @param statusCode the HTTP status code\n+     *\n+     * @throws IllegalArgumentException if the specified {@code statusCode} is\n+     *                                  {@link HttpStatus#isInformational()}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NTkxOA=="}, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTY4OTcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzozNjozOVrOFyTtyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzozNjozOVrOFyTtyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NjEzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws IllegalArgumentException if the specified {@link HttpStatus} is\n          \n          \n            \n                 *                                  {@link HttpStatus#isInformational()}.\n          \n          \n            \n                 * @throws IllegalArgumentException if the specified {@link HttpStatus} is\n          \n          \n            \n                 *                                  {@linkplain HttpStatus#isInformational() informational}.", "url": "https://github.com/line/armeria/pull/2548#discussion_r388296136", "createdAt": "2020-03-05T13:36:39Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java", "diffHunk": "@@ -49,9 +53,13 @@ static AggregatedHttpResponse of(int statusCode) {\n      * Creates a new HTTP response.\n      *\n      * @param status the HTTP status\n+     *\n+     * @throws IllegalArgumentException if the specified {@link HttpStatus} is\n+     *                                  {@link HttpStatus#isInformational()}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTY5NjExOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzozODoyNlrOFyTxlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzozODoyNlrOFyTxlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NzExMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws IllegalArgumentException if the status of the specified {@link ResponseHeaders} is\n          \n          \n            \n                 *                                  {@link HttpStatus#isInformational()}.\n          \n          \n            \n                 * @throws IllegalArgumentException if the status of the specified {@link ResponseHeaders} is\n          \n          \n            \n                 *                                  {@linkplain HttpStatus#isInformational() informational}.", "url": "https://github.com/line/armeria/pull/2548#discussion_r388297111", "createdAt": "2020-03-05T13:38:26Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java", "diffHunk": "@@ -159,6 +185,9 @@ static AggregatedHttpResponse of(HttpStatus status, MediaType mediaType, HttpDat\n      * Creates a new HTTP response with empty content.\n      *\n      * @param headers the HTTP headers\n+     *\n+     * @throws IllegalArgumentException if the status of the specified {@link ResponseHeaders} is\n+     *                                  {@link HttpStatus#isInformational()}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTcwMDcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzozOTo0MlrOFyT0ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNjowMDozMlrOFyt8-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5Nzg1MQ==", "bodyText": "Missing closing parenthesis:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    checkArgument(!status.isInformational(), \"status: %s (expected: a non-1xx status\", status);\n          \n          \n            \n                    checkArgument(!status.isInformational(), \"status: %s (expected: a non-1xx status)\", status);", "url": "https://github.com/line/armeria/pull/2548#discussion_r388297851", "createdAt": "2020-03-05T13:39:42Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java", "diffHunk": "@@ -198,12 +233,18 @@ static AggregatedHttpResponse of(ResponseHeaders headers, HttpData content, Http\n      * @param headers the HTTP headers\n      * @param content the content of the HTTP response\n      * @param trailers the HTTP trailers\n+     *\n+     * @throws IllegalArgumentException if the status of the specified {@link ResponseHeaders} is\n+     *                                  {@link HttpStatus#isInformational()}.\n      */\n     static AggregatedHttpResponse of(Iterable<ResponseHeaders> informationals, ResponseHeaders headers,\n                                      HttpData content, HttpHeaders trailers) {\n \n         requireNonNull(informationals, \"informationals\");\n         requireNonNull(headers, \"headers\");\n+        final HttpStatus status = headers.status();\n+        checkArgument(!status.isInformational(), \"status: %s (expected: a non-1xx status\", status);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyNjAwOA==", "bodyText": "Oops.", "url": "https://github.com/line/armeria/pull/2548#discussion_r388726008", "createdAt": "2020-03-06T06:00:32Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java", "diffHunk": "@@ -198,12 +233,18 @@ static AggregatedHttpResponse of(ResponseHeaders headers, HttpData content, Http\n      * @param headers the HTTP headers\n      * @param content the content of the HTTP response\n      * @param trailers the HTTP trailers\n+     *\n+     * @throws IllegalArgumentException if the status of the specified {@link ResponseHeaders} is\n+     *                                  {@link HttpStatus#isInformational()}.\n      */\n     static AggregatedHttpResponse of(Iterable<ResponseHeaders> informationals, ResponseHeaders headers,\n                                      HttpData content, HttpHeaders trailers) {\n \n         requireNonNull(informationals, \"informationals\");\n         requireNonNull(headers, \"headers\");\n+        final HttpStatus status = headers.status();\n+        checkArgument(!status.isInformational(), \"status: %s (expected: a non-1xx status\", status);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5Nzg1MQ=="}, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTcwOTI2OnYy", "diffSide": "LEFT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzo0MjowM1rOFyT5pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjoxNzo0N1rOFzkvlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5OTE3Mg==", "bodyText": "Why was this removed?", "url": "https://github.com/line/armeria/pull/2548#discussion_r388299172", "createdAt": "2020-03-05T13:42:03Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "diffHunk": "@@ -377,14 +377,10 @@ public static HttpStatus valueOf(String statusText) {\n \n     /**\n      * Returns {@code true} if the content of the response for the specified status code is expected to\n-     * be always empty (1xx, 204, 205 and 304 responses.)\n+     * be always empty (204, 205 and 304 responses.)\n      */\n     @SuppressWarnings(\"checkstyle:OverloadMethodsDeclarationOrder\")\n     public static boolean isContentAlwaysEmpty(int statusCode) {\n-        if (HttpStatusClass.INFORMATIONAL.contains(statusCode)) {\n-            return true;\n-        }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNTA1Mg==", "bodyText": "Because I think whether the content is empty or not is decided by the response headers, not the informational headers.\nInformational headers will have the following response headers, so shouldn't we look at the response headers to make a decision if the following content will be empty or not?", "url": "https://github.com/line/armeria/pull/2548#discussion_r388715052", "createdAt": "2020-03-06T05:06:30Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "diffHunk": "@@ -377,14 +377,10 @@ public static HttpStatus valueOf(String statusText) {\n \n     /**\n      * Returns {@code true} if the content of the response for the specified status code is expected to\n-     * be always empty (1xx, 204, 205 and 304 responses.)\n+     * be always empty (204, 205 and 304 responses.)\n      */\n     @SuppressWarnings(\"checkstyle:OverloadMethodsDeclarationOrder\")\n     public static boolean isContentAlwaysEmpty(int statusCode) {\n-        if (HttpStatusClass.INFORMATIONAL.contains(statusCode)) {\n-            return true;\n-        }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5OTE3Mg=="}, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3Mjg1Ng==", "bodyText": "Doesn't it still mean that informational headers have no content?", "url": "https://github.com/line/armeria/pull/2548#discussion_r389572856", "createdAt": "2020-03-09T10:24:54Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "diffHunk": "@@ -377,14 +377,10 @@ public static HttpStatus valueOf(String statusText) {\n \n     /**\n      * Returns {@code true} if the content of the response for the specified status code is expected to\n-     * be always empty (1xx, 204, 205 and 304 responses.)\n+     * be always empty (204, 205 and 304 responses.)\n      */\n     @SuppressWarnings(\"checkstyle:OverloadMethodsDeclarationOrder\")\n     public static boolean isContentAlwaysEmpty(int statusCode) {\n-        if (HttpStatusClass.INFORMATIONAL.contains(statusCode)) {\n-            return true;\n-        }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5OTE3Mg=="}, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMzcwMg==", "bodyText": "Had a quick chat with @minwoox and we chose to keep the modification in this PR, because we can't tell if the response will have no content from an informational status.", "url": "https://github.com/line/armeria/pull/2548#discussion_r389623702", "createdAt": "2020-03-09T12:17:47Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "diffHunk": "@@ -377,14 +377,10 @@ public static HttpStatus valueOf(String statusText) {\n \n     /**\n      * Returns {@code true} if the content of the response for the specified status code is expected to\n-     * be always empty (1xx, 204, 205 and 304 responses.)\n+     * be always empty (204, 205 and 304 responses.)\n      */\n     @SuppressWarnings(\"checkstyle:OverloadMethodsDeclarationOrder\")\n     public static boolean isContentAlwaysEmpty(int statusCode) {\n-        if (HttpStatusClass.INFORMATIONAL.contains(statusCode)) {\n-            return true;\n-        }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5OTE3Mg=="}, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTcxNzA4OnYy", "diffSide": "LEFT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzo0NDowOVrOFyT-Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNToxOTozM1rOFytcHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwMDM3OQ==", "bodyText": "Shouldn't we warn because it's true in HTTP/1?", "url": "https://github.com/line/armeria/pull/2548#discussion_r388300379", "createdAt": "2020-03-05T13:44:09Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactory.java", "diffHunk": "@@ -279,12 +279,6 @@ private static HttpStatus defaultResponseStatus(Method method) {\n         setAdditionalHeader(defaultTrailers, method, \"trailer\", methodAlias, \"method\",\n                             AdditionalTrailer.class, AdditionalTrailer::name, AdditionalTrailer::value);\n \n-        if (defaultHeaders.status().isContentAlwaysEmpty() && !defaultTrailers.isEmpty()) {\n-            logger.warn(\"A response with HTTP status code '{}' cannot have a content. \" +\n-                        \"Trailers defined at '{}' might be ignored.\",\n-                        defaultHeaders.status().code(), methodAlias);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNzU5OQ==", "bodyText": "That's a good point. Let me put it back with a little change.", "url": "https://github.com/line/armeria/pull/2548#discussion_r388717599", "createdAt": "2020-03-06T05:19:33Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactory.java", "diffHunk": "@@ -279,12 +279,6 @@ private static HttpStatus defaultResponseStatus(Method method) {\n         setAdditionalHeader(defaultTrailers, method, \"trailer\", methodAlias, \"method\",\n                             AdditionalTrailer.class, AdditionalTrailer::name, AdditionalTrailer::value);\n \n-        if (defaultHeaders.status().isContentAlwaysEmpty() && !defaultTrailers.isEmpty()) {\n-            logger.warn(\"A response with HTTP status code '{}' cannot have a content. \" +\n-                        \"Trailers defined at '{}' might be ignored.\",\n-                        defaultHeaders.status().code(), methodAlias);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwMDM3OQ=="}, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTcxODgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzo0NDo0NFrOFyT_dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNTowNzo0NlrOFytTGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwMDY2MA==", "bodyText": "Not sure why we need to rename this method. Could you explain?", "url": "https://github.com/line/armeria/pull/2548#discussion_r388300660", "createdAt": "2020-03-05T13:44:44Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java", "diffHunk": "@@ -496,33 +498,33 @@ public HttpHeaders additionalResponseHeaders() {\n     public void setAdditionalResponseHeader(CharSequence name, Object value) {\n         requireNonNull(name, \"name\");\n         requireNonNull(value, \"value\");\n-        updateAdditionalResponseHeaders(additionalResponseHeadersUpdater,\n-                                        builder -> builder.setObject(name, value));\n+        updateAdditionalHeaders(additionalResponseHeadersUpdater,\n+                                builder -> builder.setObject(name, value));\n     }\n \n     @Override\n     public void setAdditionalResponseHeaders(Iterable<? extends Entry<? extends CharSequence, ?>> headers) {\n         requireNonNull(headers, \"headers\");\n-        updateAdditionalResponseHeaders(additionalResponseHeadersUpdater,\n-                                        builder -> builder.setObject(headers));\n+        updateAdditionalHeaders(additionalResponseHeadersUpdater,\n+                                builder -> builder.setObject(headers));\n     }\n \n     @Override\n     public void addAdditionalResponseHeader(CharSequence name, Object value) {\n         requireNonNull(name, \"name\");\n         requireNonNull(value, \"value\");\n-        updateAdditionalResponseHeaders(additionalResponseHeadersUpdater,\n-                                        builder -> builder.addObject(name, value));\n+        updateAdditionalHeaders(additionalResponseHeadersUpdater,\n+                                builder -> builder.addObject(name, value));\n     }\n \n     @Override\n     public void addAdditionalResponseHeaders(Iterable<? extends Entry<? extends CharSequence, ?>> headers) {\n         requireNonNull(headers, \"headers\");\n-        updateAdditionalResponseHeaders(additionalResponseHeadersUpdater,\n-                                        builder -> builder.addObject(headers));\n+        updateAdditionalHeaders(additionalResponseHeadersUpdater,\n+                                builder -> builder.addObject(headers));\n     }\n \n-    private void updateAdditionalResponseHeaders(\n+    private void updateAdditionalHeaders(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNTI5MA==", "bodyText": "Let me revert this. Bad decision. \ud83d\ude06", "url": "https://github.com/line/armeria/pull/2548#discussion_r388715290", "createdAt": "2020-03-06T05:07:46Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java", "diffHunk": "@@ -496,33 +498,33 @@ public HttpHeaders additionalResponseHeaders() {\n     public void setAdditionalResponseHeader(CharSequence name, Object value) {\n         requireNonNull(name, \"name\");\n         requireNonNull(value, \"value\");\n-        updateAdditionalResponseHeaders(additionalResponseHeadersUpdater,\n-                                        builder -> builder.setObject(name, value));\n+        updateAdditionalHeaders(additionalResponseHeadersUpdater,\n+                                builder -> builder.setObject(name, value));\n     }\n \n     @Override\n     public void setAdditionalResponseHeaders(Iterable<? extends Entry<? extends CharSequence, ?>> headers) {\n         requireNonNull(headers, \"headers\");\n-        updateAdditionalResponseHeaders(additionalResponseHeadersUpdater,\n-                                        builder -> builder.setObject(headers));\n+        updateAdditionalHeaders(additionalResponseHeadersUpdater,\n+                                builder -> builder.setObject(headers));\n     }\n \n     @Override\n     public void addAdditionalResponseHeader(CharSequence name, Object value) {\n         requireNonNull(name, \"name\");\n         requireNonNull(value, \"value\");\n-        updateAdditionalResponseHeaders(additionalResponseHeadersUpdater,\n-                                        builder -> builder.addObject(name, value));\n+        updateAdditionalHeaders(additionalResponseHeadersUpdater,\n+                                builder -> builder.addObject(name, value));\n     }\n \n     @Override\n     public void addAdditionalResponseHeaders(Iterable<? extends Entry<? extends CharSequence, ?>> headers) {\n         requireNonNull(headers, \"headers\");\n-        updateAdditionalResponseHeaders(additionalResponseHeadersUpdater,\n-                                        builder -> builder.addObject(headers));\n+        updateAdditionalHeaders(additionalResponseHeadersUpdater,\n+                                builder -> builder.addObject(headers));\n     }\n \n-    private void updateAdditionalResponseHeaders(\n+    private void updateAdditionalHeaders(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwMDY2MA=="}, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTcyNTMyOnYy", "diffSide": "LEFT", "path": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzo0NjoyOVrOFyUDgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNToxMjo1NlrOFytXRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwMTY5OQ==", "bodyText": "I don't get why this method has to be removed. Doesn't a user sometimes need to remove a header from the additional response headers? e.g. A user can write a decorator that removes an additional response header added by other service.", "url": "https://github.com/line/armeria/pull/2548#discussion_r388301699", "createdAt": "2020-03-05T13:46:29Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java", "diffHunk": "@@ -534,66 +536,50 @@ private void updateAdditionalResponseHeaders(\n         }\n     }\n \n-    @Override\n-    public boolean removeAdditionalResponseHeader(CharSequence name) {\n-        return removeAdditionalResponseHeader(additionalResponseHeadersUpdater, name);\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNjM1OA==", "bodyText": "I thought the situation is never going to happen but I guess I was wrong. \ud83d\ude06\nAnd I really like the idea of providing the API to mutate headers. So we can have this behavior again. Thanks!", "url": "https://github.com/line/armeria/pull/2548#discussion_r388716358", "createdAt": "2020-03-06T05:12:56Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java", "diffHunk": "@@ -534,66 +536,50 @@ private void updateAdditionalResponseHeaders(\n         }\n     }\n \n-    @Override\n-    public boolean removeAdditionalResponseHeader(CharSequence name) {\n-        return removeAdditionalResponseHeader(additionalResponseHeadersUpdater, name);\n-    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwMTY5OQ=="}, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTc1MTU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzo1MzoyNVrOFyUThg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzo1MzoyNVrOFyUThg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwNTc5OA==", "bodyText": "We will not need this method at all if we have mutateAdditionalResponseTrailers():\nHttpHeaders oldTrailers = ctx.additionalResponseTrailers();\nctx.mutateAdditionalResponseTrailers(mutator -> mutator.clear());", "url": "https://github.com/line/armeria/pull/2548#discussion_r388305798", "createdAt": "2020-03-05T13:53:25Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java", "diffHunk": "@@ -534,66 +536,50 @@ private void updateAdditionalResponseHeaders(\n         }\n     }\n \n-    @Override\n-    public boolean removeAdditionalResponseHeader(CharSequence name) {\n-        return removeAdditionalResponseHeader(additionalResponseHeadersUpdater, name);\n-    }\n-\n-    private boolean removeAdditionalResponseHeader(\n-            AtomicReferenceFieldUpdater<DefaultServiceRequestContext, HttpHeaders> atomicUpdater,\n-            CharSequence name) {\n-        requireNonNull(name, \"name\");\n-        for (;;) {\n-            final HttpHeaders oldValue = atomicUpdater.get(this);\n-            if (oldValue.isEmpty() || !oldValue.contains(name)) {\n-                return false;\n-            }\n-\n-            final HttpHeaders newValue = oldValue.toBuilder().removeAndThen(name).build();\n-            if (atomicUpdater.compareAndSet(this, oldValue, newValue)) {\n-                return true;\n-            }\n-        }\n-    }\n-\n     @Override\n     public HttpHeaders additionalResponseTrailers() {\n         return additionalResponseTrailers;\n     }\n \n+    /**\n+     * Returns the {@link HttpHeaders} which is set using {@code (add|set)AdditionalResponseTrailer} and\n+     * clears the {@link HttpHeaders} so that the {@link HttpHeaders} is not sending twice when\n+     * a {@link Service} completes an {@link HttpResponse}.\n+     *\n+     * <p>This is used only when the trailers is sent as a {@link ResponseHeaders} in gRPC.\n+     */\n+    public HttpHeaders getAndRemoveAdditionalResponseTrailers() {\n+        return additionalResponseTrailersUpdater.getAndSet(this, HttpHeaders.of());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODk0NjA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/Clients.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo0MzowMVrOFyyp3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMToxODoxOFrOFz-dSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwMzAzOQ==", "bodyText": "In this class, we have 3 different withHttpHeader methods and I'm wondering if we can do the same approach here. Or at least we can deprecate this method and add a new method that takes a Consumer.", "url": "https://github.com/line/armeria/pull/2548#discussion_r388803039", "createdAt": "2020-03-06T09:43:01Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/Clients.java", "diffHunk": "@@ -477,7 +477,7 @@ public static SafeCloseable withHttpHeaders(\n         requireNonNull(headerManipulator, \"headerManipulator\");\n         return withContextCustomizer(ctx -> {\n             final HttpHeaders manipulatedHeaders = headerManipulator.apply(ctx.additionalRequestHeaders());\n-            ctx.setAdditionalRequestHeaders(manipulatedHeaders);\n+            ctx.mutateAdditionalRequestHeaders(mutator -> mutator.add(manipulatedHeaders));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "750a4316234a01b39e2b96a008255a2ea141787b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3MTcxNg==", "bodyText": "It's pretty common to specify a single header, so I'd prefer keeping them all.", "url": "https://github.com/line/armeria/pull/2548#discussion_r389571716", "createdAt": "2020-03-09T10:22:46Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/Clients.java", "diffHunk": "@@ -477,7 +477,7 @@ public static SafeCloseable withHttpHeaders(\n         requireNonNull(headerManipulator, \"headerManipulator\");\n         return withContextCustomizer(ctx -> {\n             final HttpHeaders manipulatedHeaders = headerManipulator.apply(ctx.additionalRequestHeaders());\n-            ctx.setAdditionalRequestHeaders(manipulatedHeaders);\n+            ctx.mutateAdditionalRequestHeaders(mutator -> mutator.add(manipulatedHeaders));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwMzAzOQ=="}, "originalCommit": {"oid": "750a4316234a01b39e2b96a008255a2ea141787b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxMjg5Mg==", "bodyText": "Then just how about changing this method?\n// before\npublic static SafeCloseable withHttpHeaders(\n            Function<? super HttpHeaders, ? extends HttpHeaders> headerManipulator) {\n// after\npublic static SafeCloseable withHttpHeaders(Consumer<HttpHeadersBuilder> headerManipulator) {\nSo that a user does not have to call toBuilder and build?", "url": "https://github.com/line/armeria/pull/2548#discussion_r389612892", "createdAt": "2020-03-09T11:52:56Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/Clients.java", "diffHunk": "@@ -477,7 +477,7 @@ public static SafeCloseable withHttpHeaders(\n         requireNonNull(headerManipulator, \"headerManipulator\");\n         return withContextCustomizer(ctx -> {\n             final HttpHeaders manipulatedHeaders = headerManipulator.apply(ctx.additionalRequestHeaders());\n-            ctx.setAdditionalRequestHeaders(manipulatedHeaders);\n+            ctx.mutateAdditionalRequestHeaders(mutator -> mutator.add(manipulatedHeaders));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwMzAzOQ=="}, "originalCommit": {"oid": "750a4316234a01b39e2b96a008255a2ea141787b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMjY2MA==", "bodyText": "OK!", "url": "https://github.com/line/armeria/pull/2548#discussion_r389622660", "createdAt": "2020-03-09T12:15:23Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/Clients.java", "diffHunk": "@@ -477,7 +477,7 @@ public static SafeCloseable withHttpHeaders(\n         requireNonNull(headerManipulator, \"headerManipulator\");\n         return withContextCustomizer(ctx -> {\n             final HttpHeaders manipulatedHeaders = headerManipulator.apply(ctx.additionalRequestHeaders());\n-            ctx.setAdditionalRequestHeaders(manipulatedHeaders);\n+            ctx.mutateAdditionalRequestHeaders(mutator -> mutator.add(manipulatedHeaders));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwMzAzOQ=="}, "originalCommit": {"oid": "750a4316234a01b39e2b96a008255a2ea141787b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0NTAwMg==", "bodyText": "Done! \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2548#discussion_r390045002", "createdAt": "2020-03-10T01:18:18Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/Clients.java", "diffHunk": "@@ -477,7 +477,7 @@ public static SafeCloseable withHttpHeaders(\n         requireNonNull(headerManipulator, \"headerManipulator\");\n         return withContextCustomizer(ctx -> {\n             final HttpHeaders manipulatedHeaders = headerManipulator.apply(ctx.additionalRequestHeaders());\n-            ctx.setAdditionalRequestHeaders(manipulatedHeaders);\n+            ctx.mutateAdditionalRequestHeaders(mutator -> mutator.add(manipulatedHeaders));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwMzAzOQ=="}, "originalCommit": {"oid": "750a4316234a01b39e2b96a008255a2ea141787b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDEyMDk2OnYy", "diffSide": "LEFT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMDoyMToxNlrOFzhhsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjowNDowMlrOFzkYaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3MDk5NQ==", "bodyText": "How about reviving two methods - {add,set}AdditionalRequestHeader(CharSequence, Object) - since it's used pretty commonly?", "url": "https://github.com/line/armeria/pull/2548#discussion_r389570995", "createdAt": "2020-03-09T10:21:16Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java", "diffHunk": "@@ -632,34 +634,9 @@ ClientRequestContext newDerivedContext(RequestId id, @Nullable HttpRequest req,\n     HttpHeaders additionalRequestHeaders();\n \n     /**\n-     * Sets a header with the specified {@code name} and {@code value}. This will remove all previous values\n-     * associated with the specified {@code name}.\n-     * The header will be included when a {@link Client} sends an {@link HttpRequest}.\n-     */\n-    void setAdditionalRequestHeader(CharSequence name, Object value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "750a4316234a01b39e2b96a008255a2ea141787b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxNzc3MQ==", "bodyText": "Yes, let me put this back. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2548#discussion_r389617771", "createdAt": "2020-03-09T12:04:02Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java", "diffHunk": "@@ -632,34 +634,9 @@ ClientRequestContext newDerivedContext(RequestId id, @Nullable HttpRequest req,\n     HttpHeaders additionalRequestHeaders();\n \n     /**\n-     * Sets a header with the specified {@code name} and {@code value}. This will remove all previous values\n-     * associated with the specified {@code name}.\n-     * The header will be included when a {@link Client} sends an {@link HttpRequest}.\n-     */\n-    void setAdditionalRequestHeader(CharSequence name, Object value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3MDk5NQ=="}, "originalCommit": {"oid": "750a4316234a01b39e2b96a008255a2ea141787b"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2723, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}