{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0ODgyODUy", "number": 2749, "title": "Support Curator Service Discovery and Spring Cloud ZooKeeper", "bodyText": "Motivation:\nRelated #2673.\nIt will be nice if we support Curator Service Discovery and Spring Cloud Zookeeper.\nModifications:\n\nAdd ZookeeperRegistrationSpec and ZookeeperDiscoverySpec to specify whether use legacy format or Curator compatible format.\n\n(Breaking) You should specify ZookeeperRegistrationSpec When creating ZookeeperUpdatingListener.\n(Breaking) You should specify ZookeeperDiscoverySpec When creating ZookeeperEndpointGroup.\n\n\n(Breaking)\n\nNodeValueCodec is gone.\n\nYou now have to use ZookeeperRegistrationSpec and ZookeeperDiscoverySpec to encode and decode.\nZooKeeperEndpointGroupBuilder.codec(...) and ZooKeeperUpatingListenerBuilder.codec(...) are gone as well.\n\n\n\n\n\nResult:\n\nYou can now use Armeria client and server with Curator Service Discovery.\n\nTodo:\n\nDocumentation", "createdAt": "2020-05-29T04:48:46Z", "url": "https://github.com/line/armeria/pull/2749", "merged": true, "mergeCommit": {"oid": "7fe6daf94a5c5fbbb08a1b0f97cdc99b8f08f50a"}, "closed": true, "closedAt": "2020-06-03T05:52:26Z", "author": {"login": "minwoox"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcl7B-PAH2gAyNDI0ODgyODUyOmY4MzIwZGU3MGQwYWJjODFiODExMDAzYTE0N2QwYjFiOWE2NTg0ODg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnhG-igFqTQyMzE5Nzk5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f8320de70d0abc81b811003a147d0b1b9a658488", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/f8320de70d0abc81b811003a147d0b1b9a658488", "committedDate": "2020-05-29T04:47:50Z", "message": "Support Curator-X-Discovery and Spring Cloud ZooKeeper\nMotivation:\nRelated #2673.\nIt will be nice if we support Curator-X-Discovery and Spring Cloud Zookeeper.\n\nModifications:\n- Add `InstanceSpec` and `DiscoverySpec` to specify whether use default format or Curator compatible format.\n- (Breaking)\n  - `NodeValueCodec` is gone.\n    - You now have to use `InstanceSpec` and `DiscoverySpec` to encode and decode.\n    - `ZooKeeperEndpointGroupBuilder.codec(...)` and `ZooKeeperUpatingListenerBuilder.codec(...)` are gone as well.\n\nResult:\n- You can now use Armeria client and server with Curator-X-Discovery."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNjcxMzQw", "url": "https://github.com/line/armeria/pull/2749#pullrequestreview-420671340", "createdAt": "2020-05-29T05:58:37Z", "commit": {"oid": "f8320de70d0abc81b811003a147d0b1b9a658488"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTo1ODozOFrOGcPutw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjowMzo1OFrOGcP1Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MTAzMQ==", "bodyText": "Could dedupe the version appearing twice.", "url": "https://github.com/line/armeria/pull/2749#discussion_r432271031", "createdAt": "2020-05-29T05:58:38Z", "author": {"login": "trustin"}, "path": "dependencies.yml", "diffHunk": "@@ -325,6 +325,10 @@ org.apache.curator:\n     - https://static.javadoc.io/org.apache.curator/curator-recipes/4.3.0/\n     exclusions:\n     - org.apache.zookeeper:zookeeper\n+  curator-x-discovery:\n+    version: '4.3.0'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8320de70d0abc81b811003a147d0b1b9a658488"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MTEwNg==", "bodyText": "Thanks!", "url": "https://github.com/line/armeria/pull/2749#discussion_r432271106", "createdAt": "2020-05-29T05:58:56Z", "author": {"login": "trustin"}, "path": "zookeeper/build.gradle", "diffHunk": "@@ -1,26 +1,11 @@\n-final def DROPWIZARD_VERSION = '3.2.6'\n-final def SNAPPY_VERSION = '1.1.7.5'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8320de70d0abc81b811003a147d0b1b9a658488"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MTM3Mw==", "bodyText": "? super ServiceInstance<?> ?", "url": "https://github.com/line/armeria/pull/2749#discussion_r432271373", "createdAt": "2020-05-29T05:59:56Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/CuratorXDiscoverySpecBuilder.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.zookeeper;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.curator.x.discovery.ServiceInstance;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+\n+/**\n+ * Builds a {@link DiscoverySpec} for\n+ * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a>.\n+ */\n+public final class CuratorXDiscoverySpecBuilder {\n+\n+    private final String serviceName;\n+    @Nullable\n+    private String instanceId;\n+    @Nullable\n+    private Boolean useSsl;\n+    @Nullable\n+    private Function<ServiceInstance<?>, Endpoint> converter;\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    CuratorXDiscoverySpecBuilder(String serviceName) {\n+        this.serviceName = requireNonNull(serviceName, \"serviceName\");\n+    }\n+\n+    /**\n+     * Sets the specified instance ID. If this is set, the {@link ZooKeeperEndpointGroup} will only connect to\n+     * the instance.\n+     */\n+    public CuratorXDiscoverySpecBuilder instanceId(String instanceId) {\n+        checkState(converter == null, \"converter() and instanceId() are mutually exclusive.\");\n+        this.instanceId = requireNonNull(instanceId, \"instanceId\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets whether to connect an {@link Endpoint} using {@code sslPort} of {@link ServiceInstance}.\n+     */\n+    public CuratorXDiscoverySpecBuilder useSsl(boolean useSsl) {\n+        checkState(converter == null, \"converter() and useSsl() are mutually exclusive.\");\n+        this.useSsl = useSsl;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified converter to convert a {@link ServiceInstance} into an {@link Endpoint}.\n+     * If you don't want to connect to the service, you can simply return {@code null} in the converter.\n+     */\n+    public CuratorXDiscoverySpecBuilder converter(Function<ServiceInstance<?>, Endpoint> converter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8320de70d0abc81b811003a147d0b1b9a658488"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MTc3Mw==", "bodyText": "default or legacy?", "url": "https://github.com/line/armeria/pull/2749#discussion_r432271773", "createdAt": "2020-05-29T06:01:12Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/DiscoverySpec.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.zookeeper;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.server.zookeeper.InstanceSpec;\n+\n+/**\n+ * A discovery specification for {@link ZooKeeperEndpointGroup}. The specification is used for finding\n+ * and decoding the registered instances into {@link Endpoint}s.\n+ *\n+ * @see InstanceSpec\n+ */\n+public interface DiscoverySpec {\n+\n+    /**\n+     * Returns the default {@link DiscoverySpec} implementation which assumes a zNode value is\n+     * a comma-separated string. Each element of the zNode value represents an {@link Endpoint} whose format is\n+     * {@code <host>[:<port_number>[:weight]]}, such as:\n+     * <ul>\n+     *   <li>{@code \"foo.com\"} - default port number, default weight (1000)</li>\n+     *   <li>{@code \"bar.com:8080} - port number 8080, default weight (1000)</li>\n+     *   <li>{@code \"10.0.2.15:0:500} - default port number, weight 500</li>\n+     *   <li>{@code \"192.168.1.2:8443:700} - port number 8443, weight 700</li>\n+     * </ul>\n+     * Note that the port number must be specified when you want to specify the weight.\n+     */\n+    static DiscoverySpec ofDefault() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8320de70d0abc81b811003a147d0b1b9a658488"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MjI0Mw==", "bodyText": "If we chose to use legacy instead of default, we're gonna have to always require a DiscoverySpec.", "url": "https://github.com/line/armeria/pull/2749#discussion_r432272243", "createdAt": "2020-05-29T06:02:41Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroup.java", "diffHunk": "@@ -54,81 +55,145 @@\n      * Returns a new {@link ZooKeeperEndpointGroup} that retrieves the {@link Endpoint} list from\n      * the ZNode at the specified connection string and path. A new ZooKeeper client will be created internally.\n      * The ZooKeeper client will be destroyed when the returned {@link ZooKeeperEndpointGroup} is closed.\n+     *\n+     * @param zkConnectionStr the ZooKeeper connection string\n+     * @param zNodePath the ZooKeeper node to register\n      */\n     public static ZooKeeperEndpointGroup of(String zkConnectionStr, String zNodePath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8320de70d0abc81b811003a147d0b1b9a658488"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MjY0Mw==", "bodyText": "ssl or tls?", "url": "https://github.com/line/armeria/pull/2749#discussion_r432272643", "createdAt": "2020-05-29T06:03:58Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/CuratorXInstanceSpecBuilder.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.zookeeper;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.UUID;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.curator.x.discovery.ServiceInstance;\n+import org.apache.curator.x.discovery.ServiceType;\n+import org.apache.curator.x.discovery.UriSpec;\n+\n+/**\n+ * Builds an {@link InstanceSpec} for\n+ * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a>..\n+ */\n+public final class CuratorXInstanceSpecBuilder {\n+\n+    private final String serviceName;\n+    @Nullable\n+    private String serviceId;\n+    @Nullable\n+    private String serviceAddress;\n+    @Nullable\n+    private Integer port;\n+    @Nullable\n+    private Integer sslPort;\n+    private ServiceType serviceType = ServiceType.DYNAMIC;\n+    @Nullable\n+    private Object payload;\n+\n+    private UriSpec uriSpec = new UriSpec(\"{scheme}://{address}:{port}\");\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    CuratorXInstanceSpecBuilder(String serviceName) {\n+        this.serviceName = requireNonNull(serviceName, \"serviceName\");\n+    }\n+\n+    /**\n+     * Sets the service address.\n+     */\n+    public CuratorXInstanceSpecBuilder serviceAddress(String serviceAddress) {\n+        this.serviceAddress = requireNonNull(serviceAddress, \"serviceAddress\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the port.\n+     */\n+    public CuratorXInstanceSpecBuilder port(int port) {\n+        checkArgument(port > 0, \"port: %s (expected: > 0)\", port);\n+        this.port = port;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the SSL port.\n+     */\n+    public CuratorXInstanceSpecBuilder sslPort(int sslPort) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8320de70d0abc81b811003a147d0b1b9a658488"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNjc5OTIw", "url": "https://github.com/line/armeria/pull/2749#pullrequestreview-420679920", "createdAt": "2020-05-29T06:20:54Z", "commit": {"oid": "f8320de70d0abc81b811003a147d0b1b9a658488"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjoyMDo1NFrOGcQIpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjoyMDo1NFrOGcQIpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3NzY3MA==", "bodyText": "Should we log this or not?", "url": "https://github.com/line/armeria/pull/2749#discussion_r432277670", "createdAt": "2020-05-29T06:20:54Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListener.java", "diffHunk": "@@ -62,57 +133,122 @@ public static ZooKeeperUpdatingListenerBuilder builder(CuratorFramework client,\n      * @param zNodePath the ZooKeeper node to register\n      */\n     public static ZooKeeperUpdatingListenerBuilder builder(String zkConnectionStr, String zNodePath) {\n-        requireNonNull(zkConnectionStr, \"zkConnectionStr\");\n-        requireNonNull(zNodePath, \"zNodePath\");\n-        return new ZooKeeperUpdatingListenerBuilder(zkConnectionStr, zNodePath);\n+        return new ZooKeeperUpdatingListenerBuilder(zkConnectionStr, zNodePath, null);\n     }\n \n     /**\n-     * Creates a ZooKeeper server listener, which registers server into ZooKeeper.\n-     *\n-     * <p>If you need a fully customized {@link ZooKeeperUpdatingListener} instance, use\n-     * {@link #builder(String, String)} instead.\n+     * Returns a {@link ZooKeeperUpdatingListenerBuilder} with a ZooKeeper connection string and a zNode path.\n      *\n-     * @param zkConnectionStr ZooKeeper connection string\n-     * @param zNodePath       ZooKeeper node path(under which this server will be registered)\n+     * @param zkConnectionStr the ZooKeeper connection string\n+     * @param zNodePath the ZooKeeper node to register\n+     * @param spec the {@link InstanceSpec} to encode and register the {@link Server}\n      */\n-    public static ZooKeeperUpdatingListener of(String zkConnectionStr, String zNodePath) {\n-        return builder(zkConnectionStr, zNodePath).build();\n+    public static ZooKeeperUpdatingListenerBuilder builder(String zkConnectionStr, String zNodePath,\n+                                                           InstanceSpec spec) {\n+        return new ZooKeeperUpdatingListenerBuilder(zkConnectionStr, zNodePath, requireNonNull(spec, \"spec\"));\n     }\n \n     private final CuratorFramework client;\n     private final String zNodePath;\n-    private final NodeValueCodec nodeValueCodec;\n     @Nullable\n-    private Endpoint endpoint;\n+    private final InstanceSpec spec;\n     private final boolean closeClientOnStop;\n \n-    ZooKeeperUpdatingListener(CuratorFramework client, String zNodePath, NodeValueCodec nodeValueCodec,\n-                              @Nullable Endpoint endpoint, boolean closeClientOnStop) {\n+    ZooKeeperUpdatingListener(CuratorFramework client, String zNodePath, @Nullable InstanceSpec spec,\n+                              boolean closeClientOnStop) {\n         this.client = requireNonNull(client, \"client\");\n         this.zNodePath = requireNonNull(zNodePath, \"zNodePath\");\n-        this.nodeValueCodec = requireNonNull(nodeValueCodec, \"nodeValueCodec\");\n-        this.endpoint = endpoint;\n+        this.spec = spec;\n         this.closeClientOnStop = closeClientOnStop;\n     }\n \n     @Override\n     public void serverStarted(Server server) throws Exception {\n-        if (endpoint == null) {\n+        final InstanceSpec instanceSpec;\n+        if (spec != null) {\n+            instanceSpec = fillAndCreateNewInstanceSpec(spec, server);\n+        } else {\n             final ServerPort activePort = server.activePort();\n             assert activePort != null;\n             final InetAddress inetAddress = SystemInfo.defaultNonLoopbackIpV4Address();\n             final String ipAddressOrHostname = inetAddress != null ? inetAddress.getHostAddress()\n                                                                    : server.defaultHostname();\n-            endpoint = Endpoint.of(ipAddressOrHostname, activePort.localAddress().getPort());\n+            instanceSpec = InstanceSpec.ofEndpoint(\n+                    Endpoint.of(ipAddressOrHostname, activePort.localAddress().getPort()));\n         }\n         client.start();\n-        final String key = endpoint.host() + '_' + endpoint.port();\n-        final byte[] value = nodeValueCodec.encode(endpoint);\n         client.create()\n               .creatingParentsIfNeeded()\n               .withMode(CreateMode.EPHEMERAL)\n-              .forPath(zNodePath + '/' + key, value);\n+              .forPath(zNodePath + instanceSpec.pathForRegistration(), instanceSpec.encodedInstance());\n+    }\n+\n+    private static InstanceSpec fillAndCreateNewInstanceSpec(InstanceSpec spec, Server server) {\n+        if (spec instanceof EndpointInstanceSpec) {\n+            final Endpoint endpoint = ((EndpointInstanceSpec) spec).endpoint();\n+            if (endpoint.hasPort() && validatePort(server, endpoint.port(), null)) {\n+                return spec;\n+            }\n+            final ServerPort serverPort = server.activePort();\n+            assert serverPort != null;\n+            return InstanceSpec.ofEndpoint(endpoint.withPort(serverPort.localAddress().getPort()));\n+        } else if (spec instanceof CuratorXInstanceSpec) {\n+            final ServiceInstance<?> serviceInstance = ((CuratorXInstanceSpec) spec).serviceInstance();\n+            return fillAndCreateNewInstanceSpec(serviceInstance, server);\n+        } else {\n+            return spec;\n+        }\n+    }\n+\n+    private static InstanceSpec fillAndCreateNewInstanceSpec(\n+            ServiceInstance<?> serviceInstance, Server server) {\n+        final CuratorXInstanceSpecBuilder builder =\n+                InstanceSpec.curatorXInstanceBuilder(serviceInstance.getName());\n+        builder.serviceId(serviceInstance.getId());\n+        final String address;\n+        if (serviceInstance.getAddress() != null) {\n+            address = serviceInstance.getAddress();\n+        } else {\n+            final Inet4Address inet4Address = SystemInfo.defaultNonLoopbackIpV4Address();\n+            address = inet4Address != null ? inet4Address.getHostAddress() : server.defaultHostname();\n+        }\n+        builder.serviceAddress(address);\n+        final int port = port(server, SessionProtocol.HTTP, serviceInstance.getPort());\n+        if (port > 0) {\n+            builder.port(port);\n+        }\n+        final int sslPort = port(server, SessionProtocol.HTTPS, serviceInstance.getSslPort());\n+        if (sslPort > 0) {\n+            builder.sslPort(sslPort);\n+        }\n+        builder.serviceType(serviceInstance.getServiceType());\n+        final Object payload = serviceInstance.getPayload();\n+        if (payload != null) {\n+            builder.payload(payload);\n+        }\n+        return builder.build();\n+    }\n+\n+    private static int port(Server server, SessionProtocol protocol, @Nullable Integer port) {\n+        if (port != null) {\n+            if (validatePort(server, port, protocol)) {\n+                return port;\n+            }\n+        }\n+        final ServerPort serverPort = server.activePort(protocol);\n+        return serverPort != null ? serverPort.localAddress().getPort() : -1;\n+    }\n+\n+    private static boolean validatePort(Server server, int port, @Nullable SessionProtocol protocol) {\n+        for (ServerPort serverPort : server.activePorts().values()) {\n+            if ((protocol == null || serverPort.hasProtocol(protocol)) &&\n+                serverPort.localAddress().getPort() == port) {\n+                return true;\n+            }\n+        }\n+        logger.warn(\"The port number: {} (expected one of activePorts: {})\",\n+                    port, server.activePorts());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8320de70d0abc81b811003a147d0b1b9a658488"}, "originalPosition": 250}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "457f5916055aacc1a18e637038c10b6ec3b085e0", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/457f5916055aacc1a18e637038c10b6ec3b085e0", "committedDate": "2020-05-29T06:24:00Z", "message": "Add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65be57e85dd7ab6a55895b4f4551ae5d56ac79b7", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/65be57e85dd7ab6a55895b4f4551ae5d56ac79b7", "committedDate": "2020-05-29T06:26:18Z", "message": "Remove ZookeeperInstance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86424e54527ab4645dd8e5dc11357f20fbfade11", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/86424e54527ab4645dd8e5dc11357f20fbfade11", "committedDate": "2020-05-29T07:05:11Z", "message": "Address comments by @trustin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc322c56da4a7e47b27e4f0029c74ca4e550692d", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/fc322c56da4a7e47b27e4f0029c74ca4e550692d", "committedDate": "2020-05-29T07:07:48Z", "message": "Rename"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f71d5c8d647163d416e00409eb20e5ff955879b", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/0f71d5c8d647163d416e00409eb20e5ff955879b", "committedDate": "2020-05-29T07:13:00Z", "message": "Fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd01c88b8f3e9b8c19a236716533c0829368fbc5", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/fd01c88b8f3e9b8c19a236716533c0829368fbc5", "committedDate": "2020-06-01T00:57:11Z", "message": "Rename classes and methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNTYwMTI1", "url": "https://github.com/line/armeria/pull/2749#pullrequestreview-421560125", "createdAt": "2020-06-01T02:09:53Z", "commit": {"oid": "fd01c88b8f3e9b8c19a236716533c0829368fbc5"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMjowOTo1M1rOGc9HyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMjoyMzo1NFrOGc9QoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxNDcyOQ==", "bodyText": "How about just CuratorDiscoverySpec(Builder)? Because:\n\nX seems to be an acronym for 'extra' or 'extension' (e.g. curator-x-async)\nCurator implies Zookeeper anyway.", "url": "https://github.com/line/armeria/pull/2749#discussion_r433014729", "createdAt": "2020-06-01T02:09:53Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/CuratorXZookeeperDiscoverySpecBuilder.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.zookeeper;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.curator.x.discovery.ServiceInstance;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+\n+/**\n+ * Builds a {@link ZookeeperDiscoverySpec} for\n+ * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a>.\n+ */\n+public final class CuratorXZookeeperDiscoverySpecBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd01c88b8f3e9b8c19a236716533c0829368fbc5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxNTY1OQ==", "bodyText": "Curator Service Discovery?", "url": "https://github.com/line/armeria/pull/2749#discussion_r433015659", "createdAt": "2020-06-01T02:16:12Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.zookeeper;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.server.zookeeper.ZookeeperRegistrationSpec;\n+\n+/**\n+ * A discovery specification for {@link ZooKeeperEndpointGroup}. The specification is used for finding\n+ * and decoding the registered instances into {@link Endpoint}s.\n+ *\n+ * @see ZookeeperRegistrationSpec\n+ */\n+public interface ZookeeperDiscoverySpec {\n+\n+    /**\n+     * Returns a {@link ZookeeperDiscoverySpec} that is compatible with\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd01c88b8f3e9b8c19a236716533c0829368fbc5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxNTcyNg==", "bodyText": "The comma between 'also' and 'compatible' could be removed.", "url": "https://github.com/line/armeria/pull/2749#discussion_r433015726", "createdAt": "2020-06-01T02:16:40Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.zookeeper;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.server.zookeeper.ZookeeperRegistrationSpec;\n+\n+/**\n+ * A discovery specification for {@link ZooKeeperEndpointGroup}. The specification is used for finding\n+ * and decoding the registered instances into {@link Endpoint}s.\n+ *\n+ * @see ZookeeperRegistrationSpec\n+ */\n+public interface ZookeeperDiscoverySpec {\n+\n+    /**\n+     * Returns a {@link ZookeeperDiscoverySpec} that is compatible with\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a>.\n+     * This is also, compatible with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd01c88b8f3e9b8c19a236716533c0829368fbc5"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxNTkwNw==", "bodyText": "Which one sounds better, ofCurator(), forCurator() or just curator()?\nFor example, we don't use any prefix in Backoff, except for ofDefault().", "url": "https://github.com/line/armeria/pull/2749#discussion_r433015907", "createdAt": "2020-06-01T02:17:46Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.zookeeper;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.server.zookeeper.ZookeeperRegistrationSpec;\n+\n+/**\n+ * A discovery specification for {@link ZooKeeperEndpointGroup}. The specification is used for finding\n+ * and decoding the registered instances into {@link Endpoint}s.\n+ *\n+ * @see ZookeeperRegistrationSpec\n+ */\n+public interface ZookeeperDiscoverySpec {\n+\n+    /**\n+     * Returns a {@link ZookeeperDiscoverySpec} that is compatible with\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a>.\n+     * This is also, compatible with\n+     * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n+     */\n+    static ZookeeperDiscoverySpec ofCuratorX(String serviceName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd01c88b8f3e9b8c19a236716533c0829368fbc5"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxNTk5OA==", "bodyText": "Which one sounds better, ofLegacy(), forLegacy() or just legacy()?", "url": "https://github.com/line/armeria/pull/2749#discussion_r433015998", "createdAt": "2020-06-01T02:18:26Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.zookeeper;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.server.zookeeper.ZookeeperRegistrationSpec;\n+\n+/**\n+ * A discovery specification for {@link ZooKeeperEndpointGroup}. The specification is used for finding\n+ * and decoding the registered instances into {@link Endpoint}s.\n+ *\n+ * @see ZookeeperRegistrationSpec\n+ */\n+public interface ZookeeperDiscoverySpec {\n+\n+    /**\n+     * Returns a {@link ZookeeperDiscoverySpec} that is compatible with\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a>.\n+     * This is also, compatible with\n+     * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n+     */\n+    static ZookeeperDiscoverySpec ofCuratorX(String serviceName) {\n+        return builderForCuratorX(serviceName).build();\n+    }\n+\n+    /**\n+     * Returns a new {@link CuratorXZookeeperDiscoverySpecBuilder}. The specification is compatible with\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a> and\n+     * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n+     */\n+    static CuratorXZookeeperDiscoverySpecBuilder builderForCuratorX(String serviceName) {\n+        return new CuratorXZookeeperDiscoverySpecBuilder(serviceName);\n+    }\n+\n+    /**\n+     * Returns the legacy {@link ZookeeperDiscoverySpec} implementation which assumes a zNode value is\n+     * a comma-separated string. Each element of the zNode value represents an {@link Endpoint} whose format is\n+     * {@code <host>[:<port_number>[:weight]]}, such as:\n+     * <ul>\n+     *   <li>{@code \"foo.com\"} - default port number, default weight (1000)</li>\n+     *   <li>{@code \"bar.com:8080} - port number 8080, default weight (1000)</li>\n+     *   <li>{@code \"10.0.2.15:0:500} - default port number, weight 500</li>\n+     *   <li>{@code \"192.168.1.2:8443:700} - port number 8443, weight 700</li>\n+     * </ul>\n+     * Note that the port number must be specified when you want to specify the weight.\n+     */\n+    static ZookeeperDiscoverySpec ofLegacy() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd01c88b8f3e9b8c19a236716533c0829368fbc5"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxNjk5Mg==", "bodyText": "Registration seems redundant.", "url": "https://github.com/line/armeria/pull/2749#discussion_r433016992", "createdAt": "2020-06-01T02:23:54Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZookeeperRegistrationSpec.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.zookeeper;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.zookeeper.ZookeeperDiscoverySpec;\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * A registration specification for {@link ZooKeeperUpdatingListener}. The specification is used for encoding\n+ * and registering the {@link Server} to <a href=\"https://zookeeper.apache.org/\">ZooKeeper</a>.\n+ *\n+ * @see ZookeeperDiscoverySpec\n+ */\n+public interface ZookeeperRegistrationSpec {\n+\n+    /**\n+     * Returns the {@link ZookeeperRegistrationSpec} that registers the {@link Server} using\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator-X-Discovery</a>.\n+     * This is also, compatible with\n+     * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n+     *\n+     * @see ZookeeperDiscoverySpec#ofCuratorX(String)\n+     */\n+    static ZookeeperRegistrationSpec ofCuratorXRegistration(String serviceName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd01c88b8f3e9b8c19a236716533c0829368fbc5"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e37127a8e3e7e82b0caed36303f9661e105c8b16", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/e37127a8e3e7e82b0caed36303f9661e105c8b16", "committedDate": "2020-06-01T08:56:52Z", "message": "Address comments by @trustin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f535605f1b82f66de9b311c3de10c7f3c4a8083c", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/f535605f1b82f66de9b311c3de10c7f3c4a8083c", "committedDate": "2020-06-02T01:58:45Z", "message": "Merge branch 'master' into x_discovery"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5cc191839df10d7239e9de81a016c1a829bc78f", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/b5cc191839df10d7239e9de81a016c1a829bc78f", "committedDate": "2020-06-02T02:09:58Z", "message": "Fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzYxMzc0", "url": "https://github.com/line/armeria/pull/2749#pullrequestreview-422361374", "createdAt": "2020-06-02T05:54:34Z", "commit": {"oid": "e37127a8e3e7e82b0caed36303f9661e105c8b16"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo1NDozNFrOGdjBig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNjowOToxOFrOGdjUfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzNTcyMg==", "bodyText": "I wonder if we need to do any validation for serviceName, e.g. should not start with or contain /.", "url": "https://github.com/line/armeria/pull/2749#discussion_r433635722", "createdAt": "2020-06-02T05:54:34Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/CuratorDiscoverySpec.java", "diffHunk": "@@ -24,20 +24,20 @@\n import com.linecorp.armeria.client.Endpoint;\n import com.linecorp.armeria.internal.common.zookeeper.CuratorXNodeValueCodec;\n \n-final class CuratorXZookeeperDiscoverySpec implements ZookeeperDiscoverySpec {\n+final class CuratorDiscoverySpec implements ZookeeperDiscoverySpec {\n \n-    private final String serviceName;\n+    private final String path;\n     private final Function<? super ServiceInstance<?>, Endpoint> converter;\n \n-    CuratorXZookeeperDiscoverySpec(\n+    CuratorDiscoverySpec(\n             String serviceName, Function<? super ServiceInstance<?>, Endpoint> converter) {\n-        this.serviceName = serviceName;\n+        path = '/' + serviceName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e37127a8e3e7e82b0caed36303f9661e105c8b16"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY0MDU3NA==", "bodyText": "How about hiding this method (as well as encode()) since it seems like an implementation detail? We'll have to turn this interface into an abstract class though. We could alternatively split this method into somewhere else.", "url": "https://github.com/line/armeria/pull/2749#discussion_r433640574", "createdAt": "2020-06-02T06:09:18Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZookeeperDiscoverySpec.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.zookeeper;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.server.zookeeper.ZookeeperRegistrationSpec;\n+\n+/**\n+ * A discovery specification for {@link ZooKeeperEndpointGroup}. The specification is used for finding\n+ * and decoding the registered instances into {@link Endpoint}s.\n+ *\n+ * @see ZookeeperRegistrationSpec\n+ */\n+public interface ZookeeperDiscoverySpec {\n+\n+    /**\n+     * Returns a {@link ZookeeperDiscoverySpec} that is compatible with\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator Service Discovery</a>.\n+     * This is also compatible with\n+     * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n+     */\n+    static ZookeeperDiscoverySpec curator(String serviceName) {\n+        return builderForCurator(serviceName).build();\n+    }\n+\n+    /**\n+     * Returns a new {@link CuratorDiscoverySpecBuilder}. The specification is compatible with\n+     * <a href=\"https://curator.apache.org/curator-x-discovery/index.html\">Curator Service Discovery</a> and\n+     * <a href=\"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/\">Spring Cloud Zookeeper</a>.\n+     */\n+    static CuratorDiscoverySpecBuilder builderForCurator(String serviceName) {\n+        return new CuratorDiscoverySpecBuilder(serviceName);\n+    }\n+\n+    /**\n+     * Returns the legacy {@link ZookeeperDiscoverySpec} implementation which assumes a zNode value is\n+     * a comma-separated string. Each element of the zNode value represents an {@link Endpoint} whose format is\n+     * {@code <host>[:<port_number>[:weight]]}, such as:\n+     * <ul>\n+     *   <li>{@code \"foo.com\"} - default port number, default weight (1000)</li>\n+     *   <li>{@code \"bar.com:8080} - port number 8080, default weight (1000)</li>\n+     *   <li>{@code \"10.0.2.15:0:500} - default port number, weight 500</li>\n+     *   <li>{@code \"192.168.1.2:8443:700} - port number 8443, weight 700</li>\n+     * </ul>\n+     * Note that the port number must be specified when you want to specify the weight.\n+     */\n+    static ZookeeperDiscoverySpec legacy() {\n+        return LegacyZookeeperDiscoverySpec.INSTANCE;\n+    }\n+\n+    /**\n+     * Returns the path for finding the byte array representation of registered instances. The path is appended\n+     * to the {@code zNodePath} that is specified when creating {@link ZooKeeperEndpointGroup}.\n+     */\n+    @Nullable\n+    String path();\n+\n+    /**\n+     * Decodes a zNode value to an {@link Endpoint}.\n+     */\n+    @Nullable\n+    Endpoint decode(byte[] data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5cc191839df10d7239e9de81a016c1a829bc78f"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20b7e133f95e49b3bd6dde8c5dedeb153f69a811", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/20b7e133f95e49b3bd6dde8c5dedeb153f69a811", "committedDate": "2020-06-02T08:25:44Z", "message": "Vaildate node path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f45e0a1ecea703df1f8fed363267136da6ed8b1d", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/f45e0a1ecea703df1f8fed363267136da6ed8b1d", "committedDate": "2020-06-02T08:28:19Z", "message": "Use IllegalArgumentException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48ad9ae5bccacc19075a32ac123b7fbb072c44ea", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/48ad9ae5bccacc19075a32ac123b7fbb072c44ea", "committedDate": "2020-06-02T08:29:44Z", "message": "fix comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNDYyMjU1", "url": "https://github.com/line/armeria/pull/2749#pullrequestreview-422462255", "createdAt": "2020-06-02T08:38:44Z", "commit": {"oid": "48ad9ae5bccacc19075a32ac123b7fbb072c44ea"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODozODo0NFrOGdnxSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODozOTowM1rOGdnyGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcxMzQ4Mw==", "bodyText": "\"zNodePath: \" + zNodePath + \" (expected: ...)\" ?", "url": "https://github.com/line/armeria/pull/2749#discussion_r433713483", "createdAt": "2020-06-02T08:38:44Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java", "diffHunk": "@@ -70,12 +75,29 @@ protected AbstractCuratorFrameworkBuilder(String zkConnectionStr) {\n     /**\n      * Creates a new instance with the specified {@link CuratorFramework}.\n      */\n-    protected AbstractCuratorFrameworkBuilder(CuratorFramework client) {\n-        this.client = client;\n+    protected AbstractCuratorFrameworkBuilder(CuratorFramework client, String zNodePath) {\n+        this.client = requireNonNull(client, \"client\");\n+        validateZNodePath(zNodePath);\n+        this.zNodePath = zNodePath;\n         clientBuilder = null;\n         customizers = null;\n     }\n \n+    private static void validateZNodePath(String zNodePath) {\n+        try {\n+            PathUtils.validatePath(zNodePath);\n+        } catch (IllegalArgumentException e) {\n+            throw new IllegalArgumentException(\"zNodePath is invalid.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ad9ae5bccacc19075a32ac123b7fbb072c44ea"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcxMzY4OQ==", "bodyText": "Ditto - exception message consistency?", "url": "https://github.com/line/armeria/pull/2749#discussion_r433713689", "createdAt": "2020-06-02T08:39:03Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/internal/common/zookeeper/ZookeeperPathUtil.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.common.zookeeper;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import org.apache.zookeeper.common.PathUtils;\n+\n+/**\n+ * A utility class for ZooKeeper path.\n+ */\n+public final class ZookeeperPathUtil {\n+\n+    /**\n+     * Validates a Zookeeper path.\n+     */\n+    public static String validatePath(String path, String name) {\n+        requireNonNull(path, name);\n+        try {\n+            if (path.indexOf('/') > 0) {\n+                throw new IllegalArgumentException(name + \" cannot have '/'. \" + name + \": \" + path);\n+            }\n+            // Simply prepend '/' to validate the path.\n+            PathUtils.validatePath('/' + path);\n+        } catch (IllegalArgumentException e) {\n+            throw new IllegalArgumentException(name + \" is invalid.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ad9ae5bccacc19075a32ac123b7fbb072c44ea"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cb6e21797be356043a6a200e2fcf66c9b0ae10a", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/4cb6e21797be356043a6a200e2fcf66c9b0ae10a", "committedDate": "2020-06-02T08:53:02Z", "message": "Fix exception messages"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNTg2MDA4", "url": "https://github.com/line/armeria/pull/2749#pullrequestreview-422586008", "createdAt": "2020-06-02T11:30:48Z", "commit": {"oid": "4cb6e21797be356043a6a200e2fcf66c9b0ae10a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzU3NzAz", "url": "https://github.com/line/armeria/pull/2749#pullrequestreview-422357703", "createdAt": "2020-06-02T05:44:51Z", "commit": {"oid": "b5cc191839df10d7239e9de81a016c1a829bc78f"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo0NDo1MVrOGdi2JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzo0NDozMlrOGdyTCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzMjgwNQ==", "bodyText": "nit: How about making validateZNodePath() return zNodePath and\nthis.zNodePath = validateZNodePath(zNodePath);", "url": "https://github.com/line/armeria/pull/2749#discussion_r433632805", "createdAt": "2020-06-02T05:44:51Z", "author": {"login": "ikhoon"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java", "diffHunk": "@@ -56,9 +57,12 @@\n     /**\n      * Creates a new instance with the specified {@code zkConnectionStr}.\n      */\n-    protected AbstractCuratorFrameworkBuilder(String zkConnectionStr) {\n+    protected AbstractCuratorFrameworkBuilder(String zkConnectionStr, String zNodePath) {\n+        requireNonNull(zkConnectionStr, \"zkConnectionStr\");\n         checkArgument(!zkConnectionStr.isEmpty(), \"zkConnectionStr can't be empty.\");\n+        validateZNodePath(zNodePath);\n         client = null;\n+        this.zNodePath = zNodePath;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5cc191839df10d7239e9de81a016c1a829bc78f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzMzAxOQ==", "bodyText": "Ditto.", "url": "https://github.com/line/armeria/pull/2749#discussion_r433633019", "createdAt": "2020-06-02T05:45:37Z", "author": {"login": "ikhoon"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java", "diffHunk": "@@ -70,12 +74,27 @@ protected AbstractCuratorFrameworkBuilder(String zkConnectionStr) {\n     /**\n      * Creates a new instance with the specified {@link CuratorFramework}.\n      */\n-    protected AbstractCuratorFrameworkBuilder(CuratorFramework client) {\n-        this.client = client;\n+    protected AbstractCuratorFrameworkBuilder(CuratorFramework client, String zNodePath) {\n+        this.client = requireNonNull(client, \"client\");\n+        validateZNodePath(zNodePath);\n+        this.zNodePath = zNodePath;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5cc191839df10d7239e9de81a016c1a829bc78f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NTQ2Ng==", "bodyText": "This try-catch block will also catch an IllegalArgumentException that occurred when a path contains /.\nThe concatenated error message will have duplicate name: path.\nname: path (reason: name cannot have /. name: path)\nCould we catch only PathUtils.validatePath()?", "url": "https://github.com/line/armeria/pull/2749#discussion_r433855466", "createdAt": "2020-06-02T13:00:06Z", "author": {"login": "ikhoon"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/internal/common/zookeeper/ZookeeperPathUtil.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.common.zookeeper;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import org.apache.zookeeper.common.PathUtils;\n+\n+/**\n+ * A utility class for ZooKeeper path.\n+ */\n+public final class ZookeeperPathUtil {\n+\n+    /**\n+     * Validates a Zookeeper path.\n+     */\n+    public static String validatePath(String path, String name) {\n+        requireNonNull(path, name);\n+        try {\n+            if (path.indexOf('/') > 0) {\n+                throw new IllegalArgumentException(name + \" cannot have '/'. \" + name + \": \" + path);\n+            }\n+            // Simply prepend '/' to validate the path.\n+            PathUtils.validatePath('/' + path);\n+        } catch (IllegalArgumentException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cb6e21797be356043a6a200e2fcf66c9b0ae10a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3Mzg1NQ==", "bodyText": "nit: could merge two lines?", "url": "https://github.com/line/armeria/pull/2749#discussion_r433873855", "createdAt": "2020-06-02T13:27:59Z", "author": {"login": "ikhoon"}, "path": "zookeeper/src/test/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroupTest.java", "diffHunk": "@@ -18,39 +18,62 @@\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.awaitility.Awaitility.await;\n \n+import java.util.List;\n import java.util.Set;\n \n-import javax.annotation.Nullable;\n-\n+import org.apache.curator.x.discovery.ServiceInstance;\n+import org.apache.curator.x.discovery.ServiceType;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.ZooDefs.Ids;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.ImmutableSet.Builder;\n \n import com.linecorp.armeria.client.Endpoint;\n-import com.linecorp.armeria.common.zookeeper.NodeValueCodec;\n import com.linecorp.armeria.common.zookeeper.ZooKeeperExtension;\n import com.linecorp.armeria.common.zookeeper.ZooKeeperTestUtil;\n+import com.linecorp.armeria.server.zookeeper.ZookeeperRegistrationSpec;\n \n import zookeeperjunit.CloseableZooKeeper;\n \n class ZooKeeperEndpointGroupTest {\n \n     private static final String Z_NODE = \"/testEndPoints\";\n+    private static final String CURATOR_X_SERVICE_NAME = \"foo\";\n+    private static final String CURATOR_X_ADDRESS = \"foo.com\";\n     private static final int SESSION_TIMEOUT_MILLIS = 20000;\n-    private static final Set<Endpoint> sampleEndpoints = ZooKeeperTestUtil.sampleEndpoints();\n \n     @RegisterExtension\n     static ZooKeeperExtension zkInstance = new ZooKeeperExtension();\n-    @Nullable\n-    private static ZooKeeperEndpointGroup endpointGroup;\n \n-    private static void setNodeChild(Set<Endpoint> children) throws Throwable {\n+    @Test\n+    void legacyDiscoverySpec() throws Throwable {\n+        final List<Endpoint> sampleEndpoints = ZooKeeperTestUtil.sampleEndpoints(3);\n+        setLegacySpecNodeChildren(sampleEndpoints);\n+        final ZooKeeperEndpointGroup endpointGroup = endpointGroup(ZookeeperDiscoverySpec.legacy());\n+        await().untilAsserted(() -> assertThat(endpointGroup.endpoints()).hasSameElementsAs(sampleEndpoints));\n+\n+        // Add two more nodes.\n+        final List<Endpoint> extraEndpoints = ZooKeeperTestUtil.sampleEndpoints(2);\n+        setLegacySpecNodeChildren(extraEndpoints);\n+\n+        // Construct the final expected node list.\n+        final Builder<Endpoint> builder = ImmutableSet.builder();\n+        builder.addAll(sampleEndpoints).addAll(extraEndpoints);\n+        try (CloseableZooKeeper zk = zkInstance.connection()) {\n+            zk.sync(Z_NODE, (rc, path, ctx) -> {\n+            }, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cb6e21797be356043a6a200e2fcf66c9b0ae10a"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3NjE5OA==", "bodyText": "unused?", "url": "https://github.com/line/armeria/pull/2749#discussion_r433876198", "createdAt": "2020-06-02T13:31:09Z", "author": {"login": "ikhoon"}, "path": "zookeeper/src/test/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroupTest.java", "diffHunk": "@@ -18,39 +18,62 @@\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.awaitility.Awaitility.await;\n \n+import java.util.List;\n import java.util.Set;\n \n-import javax.annotation.Nullable;\n-\n+import org.apache.curator.x.discovery.ServiceInstance;\n+import org.apache.curator.x.discovery.ServiceType;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.ZooDefs.Ids;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.ImmutableSet.Builder;\n \n import com.linecorp.armeria.client.Endpoint;\n-import com.linecorp.armeria.common.zookeeper.NodeValueCodec;\n import com.linecorp.armeria.common.zookeeper.ZooKeeperExtension;\n import com.linecorp.armeria.common.zookeeper.ZooKeeperTestUtil;\n+import com.linecorp.armeria.server.zookeeper.ZookeeperRegistrationSpec;\n \n import zookeeperjunit.CloseableZooKeeper;\n \n class ZooKeeperEndpointGroupTest {\n \n     private static final String Z_NODE = \"/testEndPoints\";\n+    private static final String CURATOR_X_SERVICE_NAME = \"foo\";\n+    private static final String CURATOR_X_ADDRESS = \"foo.com\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cb6e21797be356043a6a200e2fcf66c9b0ae10a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4NTk2Mw==", "bodyText": "Add space between // and all", "url": "https://github.com/line/armeria/pull/2749#discussion_r433885963", "createdAt": "2020-06-02T13:44:32Z", "author": {"login": "ikhoon"}, "path": "zookeeper/src/test/java/com/linecorp/armeria/server/zookeeper/ZooKeeperRegistrationTest.java", "diffHunk": "@@ -20,115 +20,139 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n \n-import javax.annotation.Nullable;\n-\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeEach;\n+import org.apache.curator.x.discovery.ServiceInstance;\n+import org.apache.curator.x.discovery.ServiceType;\n+import org.apache.curator.x.discovery.UriSpec;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n \n import com.linecorp.armeria.client.Endpoint;\n-import com.linecorp.armeria.common.AggregatedHttpRequest;\n-import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.client.zookeeper.ZookeeperDiscoverySpec;\n import com.linecorp.armeria.common.HttpResponse;\n-import com.linecorp.armeria.common.HttpStatus;\n-import com.linecorp.armeria.common.ResponseHeaders;\n-import com.linecorp.armeria.common.util.CompletionActions;\n-import com.linecorp.armeria.common.zookeeper.NodeValueCodec;\n import com.linecorp.armeria.common.zookeeper.ZooKeeperExtension;\n import com.linecorp.armeria.common.zookeeper.ZooKeeperTestUtil;\n-import com.linecorp.armeria.server.AbstractHttpService;\n import com.linecorp.armeria.server.Server;\n import com.linecorp.armeria.server.ServerListener;\n-import com.linecorp.armeria.server.ServiceRequestContext;\n \n import zookeeperjunit.CloseableZooKeeper;\n \n class ZooKeeperRegistrationTest {\n \n     private static final String Z_NODE = \"/testEndPoints\";\n+    private static final String CURATOR_X_SERVICE_NAME = \"foo\";\n+    private static final String CURATOR_X_ADDRESS = \"foo.com\";\n     private static final int SESSION_TIMEOUT_MILLIS = 20000;\n-    private static final Set<Endpoint> sampleEndpoints = ZooKeeperTestUtil.sampleEndpoints();\n+    private static final List<Endpoint> sampleEndpoints = ZooKeeperTestUtil.sampleEndpoints(3);\n \n     @RegisterExtension\n     static ZooKeeperExtension zkInstance = new ZooKeeperExtension();\n-    @Nullable\n-    private List<Server> servers;\n \n-    @BeforeEach\n-    void startServers() {\n-        servers = new ArrayList<>();\n+    @Test\n+    void legacyZookeeperRegistrationSpec() throws Throwable {\n+        final List<Server> servers = startServers(true);\n+        //all servers start and with zNode created", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cb6e21797be356043a6a200e2fcf66c9b0ae10a"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7629bf345aa87a25dbdcd2bfc10b97bc5693720d", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/7629bf345aa87a25dbdcd2bfc10b97bc5693720d", "committedDate": "2020-06-03T00:51:15Z", "message": "Address comments by @ikhoon"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e06daafb2f4877561d0508f6ba29c2ce2545aa45", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/e06daafb2f4877561d0508f6ba29c2ce2545aa45", "committedDate": "2020-06-03T00:54:06Z", "message": "Fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMTkxODQ1", "url": "https://github.com/line/armeria/pull/2749#pullrequestreview-423191845", "createdAt": "2020-06-03T03:20:27Z", "commit": {"oid": "e06daafb2f4877561d0508f6ba29c2ce2545aa45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMzoyMDoyN1rOGeKteQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMzoyMDoyN1rOGeKteQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4NTk0NQ==", "bodyText": "It's time to update the documentation. \ud83d\ude09\nhttps://line.github.io/armeria/docs/advanced-zookeeper", "url": "https://github.com/line/armeria/pull/2749#discussion_r434285945", "createdAt": "2020-06-03T03:20:27Z", "author": {"login": "ikhoon"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroup.java", "diffHunk": "@@ -54,81 +55,97 @@\n      * Returns a new {@link ZooKeeperEndpointGroup} that retrieves the {@link Endpoint} list from\n      * the ZNode at the specified connection string and path. A new ZooKeeper client will be created internally.\n      * The ZooKeeper client will be destroyed when the returned {@link ZooKeeperEndpointGroup} is closed.\n+     *\n+     * @param zkConnectionStr the ZooKeeper connection string\n+     * @param zNodePath the ZooKeeper node to register\n+     * @param spec the {@link ZookeeperDiscoverySpec} to find and decode the registered instances\n      */\n-    public static ZooKeeperEndpointGroup of(String zkConnectionStr, String zNodePath) {\n-        return builder(zkConnectionStr, zNodePath).build();\n+    public static ZooKeeperEndpointGroup of(String zkConnectionStr, String zNodePath,\n+                                            ZookeeperDiscoverySpec spec) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e06daafb2f4877561d0508f6ba29c2ce2545aa45"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMTk3OTkx", "url": "https://github.com/line/armeria/pull/2749#pullrequestreview-423197991", "createdAt": "2020-06-03T03:43:37Z", "commit": {"oid": "e06daafb2f4877561d0508f6ba29c2ce2545aa45"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 571, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}