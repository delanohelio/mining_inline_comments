{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNjg4Nzk4", "number": 3102, "title": "Do not launch two servers if both `boot2-autoconfigure` and ...", "bodyText": "... boot2-webflux-autoconfigure are in the class path.\nMotivation:\n\nRelated #3056\n\nModifications:\n\nAdd NonReactiveWebApplicationCondition in ArmeriaAutoConfiguration\nWrite ArmeriaAutoConfiguration separately in boot1-autoconfigure, boot2-autoconfigure\nAdd test property(spring.main.web-application-type=none) in boot2-autoconfigure\nAdd test dependency to boot2-autoconfigure, boot2-webflux-autoconfigure and boot2-tomcat9\n\nResult:\n\nClose #3056\n\n\n\n\ndependencies\nauto-detect\nauto-configure\n\n\n\n\nboot2-autoconfigure\nnone\nArmeriaAutoConfiguration\n\n\nboot2-webflux-autoconfigure\nreactive\nArmeriaReactiveWebServerFactoryAutoConfiguration\n\n\nboot2-autoconfigure + tomcat9\nservlet\nArmeriaAutoConfiguration\n\n\nboot2-autoconfigure + boot2-webflux-autoconfigure\nreactive\nArmeriaReactiveWebServerFactoryAutoConfiguration\n\n\nboot2-autoconfigure + boot2-webflux-autoconfigure+ tomcat9\nservlet\nArmeriaAutoConfiguration", "createdAt": "2020-10-09T16:07:41Z", "url": "https://github.com/line/armeria/pull/3102", "merged": true, "mergeCommit": {"oid": "348a5795bdf3f4e6d4e1c5a741959b6dbd827133"}, "closed": true, "closedAt": "2020-10-16T06:37:40Z", "author": {"login": "heowc"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQ4R4HAH2gAyNTAwNjg4Nzk4OjFiMzhmMGU0NjNiMTAyYTExMWY3NzIxYjcwMGI5ZmFiNTMwZDMyNGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdTAgbagFqTUxMDE4OTkzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1b38f0e463b102a111f7721b700b9fab530d324b", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/1b38f0e463b102a111f7721b700b9fab530d324b", "committedDate": "2020-10-09T15:54:14Z", "message": "Add `NonReactiveWebApplicationCondition` in `ArmeriaAutoConfiguration` / Fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d423b54e7ba0c10a0d04b1f18049af895c9d3f2b", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/d423b54e7ba0c10a0d04b1f18049af895c9d3f2b", "committedDate": "2020-10-10T05:17:51Z", "message": "Separate AutoConfiguration class for `boot1-autoconfigure`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MzIwMTAz", "url": "https://github.com/line/armeria/pull/3102#pullrequestreview-507320103", "createdAt": "2020-10-13T11:08:44Z", "commit": {"oid": "d423b54e7ba0c10a0d04b1f18049af895c9d3f2b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMTowODo0NFrOHghZYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMTowODo0NFrOHghZYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2MzY1MQ==", "bodyText": "Is this to make sure MVC is used when both starter-web and webflux-starter are present in the class path? I think this is somewhat confusing. How about adding a separate integration test module dedicated to such a scenario? e.g. it/spring/boot2-mixed?", "url": "https://github.com/line/armeria/pull/3102#discussion_r503863651", "createdAt": "2020-10-13T11:08:44Z", "author": {"login": "trustin"}, "path": "it/spring/boot2-tomcat9/build.gradle", "diffHunk": "@@ -1,5 +1,6 @@\n dependencies {\n     implementation project(':spring:boot2-starter')\n+    implementation project(':spring:boot2-webflux-starter')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d423b54e7ba0c10a0d04b1f18049af895c9d3f2b"}, "originalPosition": 3}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e24a40eb524314932a0df8b0f51536130ac2b66f", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/e24a40eb524314932a0df8b0f51536130ac2b66f", "committedDate": "2020-10-13T14:00:11Z", "message": "Remove test dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ec01426711bf753387de5a2b8898862ed504b36", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/1ec01426711bf753387de5a2b8898862ed504b36", "committedDate": "2020-10-13T14:02:42Z", "message": "Add modules (`it/spring/boot2-mixed`, `it/spring/boot2-mixed-tomcat9`)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c295214106386b65e809313a687cd36d996cc116", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/c295214106386b65e809313a687cd36d996cc116", "committedDate": "2020-10-13T14:13:44Z", "message": "Fix copyright"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "619fef3419e40e83476ccc4c2b710d5b7603cca7", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/619fef3419e40e83476ccc4c2b710d5b7603cca7", "committedDate": "2020-10-13T14:29:35Z", "message": "Fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1e0eea3be9fe631e5f5da21e144e606dae10271", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/f1e0eea3be9fe631e5f5da21e144e606dae10271", "committedDate": "2020-10-13T14:59:48Z", "message": "Add `application.yml`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MTY4NjUw", "url": "https://github.com/line/armeria/pull/3102#pullrequestreview-508168650", "createdAt": "2020-10-14T09:36:59Z", "commit": {"oid": "f1e0eea3be9fe631e5f5da21e144e606dae10271"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTozNzowMFrOHhKrGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjo0NjowM1rOHhRL9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzOTkzMQ==", "bodyText": "nit: 2020", "url": "https://github.com/line/armeria/pull/3102#discussion_r504539931", "createdAt": "2020-10-14T09:37:00Z", "author": {"login": "minwoox"}, "path": "it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/package-info.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2018 LINE Corporation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e0eea3be9fe631e5f5da21e144e606dae10271"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NjM0MA==", "bodyText": "Question: What happens if we don't exclude this dependency?\nI'm also wondering if we should exclude the dependency in our example.\nhttps://github.com/line/armeria/blob/master/examples/spring-boot-tomcat/build.gradle", "url": "https://github.com/line/armeria/pull/3102#discussion_r504546340", "createdAt": "2020-10-14T09:47:16Z", "author": {"login": "minwoox"}, "path": "it/spring/boot2-mixed-tomcat9/build.gradle", "diffHunk": "@@ -0,0 +1,10 @@\n+dependencies {\n+    implementation project(':spring:boot2-starter')\n+    implementation project(':spring:boot2-webflux-starter')\n+    implementation project(':tomcat9')\n+    implementation('org.springframework.boot:spring-boot-starter-web') {\n+        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e0eea3be9fe631e5f5da21e144e606dae10271"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0NjY0Nw==", "bodyText": "Question: Could you tell me how this works please? \ud83d\ude05", "url": "https://github.com/line/armeria/pull/3102#discussion_r504646647", "createdAt": "2020-10-14T12:46:03Z", "author": {"login": "minwoox"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaAutoConfiguration.java", "diffHunk": "@@ -16,132 +16,35 @@\n \n package com.linecorp.armeria.spring;\n \n-import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationNetUtil.configurePorts;\n-import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configureServerWithArmeriaSettings;\n-\n-import java.time.Duration;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.function.Consumer;\n-\n-import javax.annotation.Nullable;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.condition.NoneNestedConditions;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n \n-import com.google.common.base.Strings;\n-\n-import com.linecorp.armeria.common.SessionProtocol;\n-import com.linecorp.armeria.common.metric.MeterIdPrefixFunction;\n import com.linecorp.armeria.server.Server;\n-import com.linecorp.armeria.server.ServerBuilder;\n-import com.linecorp.armeria.server.ServerPort;\n-import com.linecorp.armeria.server.docs.DocService;\n-import com.linecorp.armeria.server.docs.DocServiceBuilder;\n-import com.linecorp.armeria.server.healthcheck.HealthChecker;\n-import com.linecorp.armeria.spring.ArmeriaSettings.Port;\n-\n-import io.micrometer.core.instrument.MeterRegistry;\n-import io.micrometer.core.instrument.Metrics;\n+import com.linecorp.armeria.spring.ArmeriaAutoConfiguration.NonReactiveWebApplicationCondition;\n \n /**\n  * Spring Boot {@link Configuration} that provides Armeria integration.\n  */\n @Configuration\n+@Conditional(NonReactiveWebApplicationCondition.class)\n @EnableConfigurationProperties(ArmeriaSettings.class)\n @ConditionalOnMissingBean(Server.class)\n-public class ArmeriaAutoConfiguration {\n-    private static final Logger logger = LoggerFactory.getLogger(ArmeriaAutoConfiguration.class);\n-\n-    private static final Port DEFAULT_PORT = new Port().setPort(8080)\n-                                                       .setProtocol(SessionProtocol.HTTP);\n-\n-    private static final String GRACEFUL_SHUTDOWN = \"graceful\";\n+public class ArmeriaAutoConfiguration extends AbstractArmeriaAutoConfiguration {\n \n     /**\n-     * Create a started {@link Server} bean.\n+     * Condition for non-reactive web application type.\n      */\n-    @Bean\n-    @Nullable\n-    public Server armeriaServer(\n-            ArmeriaSettings armeriaSettings,\n-            Optional<MeterRegistry> meterRegistry,\n-            Optional<List<HealthChecker>> healthCheckers,\n-            Optional<MeterIdPrefixFunction> meterIdPrefixFunction,\n-            Optional<List<ArmeriaServerConfigurator>> armeriaServerConfigurators,\n-            Optional<List<Consumer<ServerBuilder>>> armeriaServerBuilderConsumers,\n-            Optional<List<DocServiceConfigurator>> docServiceConfigurators) {\n-\n-        if (!armeriaServerConfigurators.isPresent() &&\n-            !armeriaServerBuilderConsumers.isPresent()) {\n-            // No services to register, no need to start up armeria server.\n-            return null;\n-        }\n-\n-        final ServerBuilder serverBuilder = Server.builder();\n-\n-        final List<Port> ports = armeriaSettings.getPorts();\n-        if (ports.isEmpty()) {\n-            serverBuilder.port(new ServerPort(DEFAULT_PORT.getPort(), DEFAULT_PORT.getProtocols()));\n-        } else {\n-            configurePorts(serverBuilder, ports);\n-        }\n-\n-        final DocServiceBuilder docServiceBuilder = DocService.builder();\n-        docServiceConfigurators.ifPresent(\n-                configurators -> configurators.forEach(\n-                        configurator -> configurator.configure(docServiceBuilder)));\n-\n-        final String docsPath = armeriaSettings.getDocsPath();\n-        configureServerWithArmeriaSettings(serverBuilder, armeriaSettings,\n-                                           meterRegistry.orElse(Metrics.globalRegistry),\n-                                           healthCheckers.orElseGet(Collections::emptyList),\n-                                           meterIdPrefixFunction.orElse(\n-                                                   MeterIdPrefixFunction.ofDefault(\"armeria.server\")));\n+    static class NonReactiveWebApplicationCondition extends NoneNestedConditions {\n \n-        armeriaServerConfigurators.ifPresent(\n-                configurators -> configurators.forEach(\n-                        configurator -> configurator.configure(serverBuilder)));\n-\n-        armeriaServerBuilderConsumers.ifPresent(\n-                consumers -> consumers.forEach(\n-                        consumer -> consumer.accept(serverBuilder)));\n-\n-        if (!Strings.isNullOrEmpty(docsPath)) {\n-            serverBuilder.serviceUnder(docsPath, docServiceBuilder.build());\n+        NonReactiveWebApplicationCondition() {\n+            super(ConfigurationPhase.PARSE_CONFIGURATION);\n         }\n \n-        final Server server = serverBuilder.build();\n-\n-        server.start().handle((result, t) -> {\n-            if (t != null) {\n-                throw new IllegalStateException(\"Armeria server failed to start\", t);\n-            }\n-            return result;\n-        }).join();\n-        logger.info(\"Armeria server started at ports: {}\", server.activePorts());\n-        return server;\n-    }\n-\n-    /**\n-     * A user can configure a {@link Server} by providing an {@link ArmeriaServerConfigurator} bean.\n-     */\n-    @Bean\n-    @ConditionalOnProperty(\"server.shutdown\")\n-    public ArmeriaServerConfigurator gracefulShutdownServerConfigurator(\n-            @Value(\"${server.shutdown}\") String shutdown,\n-            @Value(\"${spring.lifecycle.timeout-per-shutdown-phase:30s}\") Duration duration) {\n-        if (GRACEFUL_SHUTDOWN.equalsIgnoreCase(shutdown)) {\n-            return sb -> sb.gracefulShutdownTimeout(duration, duration);\n-        } else {\n-            return sb -> {};\n-        }\n+        @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n+        static class ReactiveWebApplication {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e0eea3be9fe631e5f5da21e144e606dae10271"}, "originalPosition": 142}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ddddec3027a1cc5c1849d239360cb02287f8abd", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/1ddddec3027a1cc5c1849d239360cb02287f8abd", "committedDate": "2020-10-14T13:00:33Z", "message": "Fix copyright"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4Mzc4OTQ5", "url": "https://github.com/line/armeria/pull/3102#pullrequestreview-508378949", "createdAt": "2020-10-14T14:00:43Z", "commit": {"oid": "1ddddec3027a1cc5c1849d239360cb02287f8abd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NDk3Mzc2", "url": "https://github.com/line/armeria/pull/3102#pullrequestreview-508497376", "createdAt": "2020-10-14T15:56:42Z", "commit": {"oid": "1ddddec3027a1cc5c1849d239360cb02287f8abd"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTo1Njo0MlrOHhaEyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjowMjozMVrOHhaVNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5MjI2NQ==", "bodyText": "nit: Could use serviceUnder(\"/tomcat/api/rest/v1\", ...)?", "url": "https://github.com/line/armeria/pull/3102#discussion_r504792265", "createdAt": "2020-10-14T15:56:42Z", "author": {"login": "ikhoon"}, "path": "it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring.mixed.tomcat;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.catalina.startup.Tomcat;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.web.context.WebServerApplicationContext;\n+import org.springframework.boot.web.embedded.tomcat.TomcatWebServer;\n+import org.springframework.boot.web.server.WebServer;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+\n+import com.linecorp.armeria.server.tomcat.TomcatService;\n+import com.linecorp.armeria.spring.ArmeriaServerConfigurator;\n+\n+@SpringBootApplication\n+public class SpringTomcatApplication {\n+\n+    @Inject\n+    private ApplicationContext applicationContext;\n+\n+    /**\n+     * Bean to configure Armeria Tomcat service.\n+     * @return configuration bean.\n+     */\n+    @Bean\n+    public ArmeriaServerConfigurator armeriaTomcat() {\n+        final WebServer webServer = ((WebServerApplicationContext) applicationContext).getWebServer();\n+        if (webServer instanceof TomcatWebServer) {\n+            final Tomcat tomcat = ((TomcatWebServer) webServer).getTomcat();\n+\n+            return serverBuilder -> serverBuilder.service(\"prefix:/tomcat/api/rest/v1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ddddec3027a1cc5c1849d239360cb02287f8abd"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5Mjg1MQ==", "bodyText": "nit: Remove white space?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return serverBuilder -> { };\n          \n          \n            \n                    return serverBuilder -> {};", "url": "https://github.com/line/armeria/pull/3102#discussion_r504792851", "createdAt": "2020-10-14T15:57:28Z", "author": {"login": "ikhoon"}, "path": "it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring.mixed.tomcat;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.catalina.startup.Tomcat;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.web.context.WebServerApplicationContext;\n+import org.springframework.boot.web.embedded.tomcat.TomcatWebServer;\n+import org.springframework.boot.web.server.WebServer;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+\n+import com.linecorp.armeria.server.tomcat.TomcatService;\n+import com.linecorp.armeria.spring.ArmeriaServerConfigurator;\n+\n+@SpringBootApplication\n+public class SpringTomcatApplication {\n+\n+    @Inject\n+    private ApplicationContext applicationContext;\n+\n+    /**\n+     * Bean to configure Armeria Tomcat service.\n+     * @return configuration bean.\n+     */\n+    @Bean\n+    public ArmeriaServerConfigurator armeriaTomcat() {\n+        final WebServer webServer = ((WebServerApplicationContext) applicationContext).getWebServer();\n+        if (webServer instanceof TomcatWebServer) {\n+            final Tomcat tomcat = ((TomcatWebServer) webServer).getTomcat();\n+\n+            return serverBuilder -> serverBuilder.service(\"prefix:/tomcat/api/rest/v1\",\n+                                                          TomcatService.of(tomcat));\n+        }\n+        return serverBuilder -> { };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ddddec3027a1cc5c1849d239360cb02287f8abd"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5NjQ2OA==", "bodyText": "Is there any chance users use this class directly?\nIf so, don't we need to rename ArmeriaSpringBoot1AutoConfiguration to ArmeriaAutoConfiguration for avoiding breaking changes?", "url": "https://github.com/line/armeria/pull/3102#discussion_r504796468", "createdAt": "2020-10-14T16:02:31Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/build.gradle", "diffHunk": "@@ -64,6 +64,7 @@ def autoconfigureProjectDir = \"${rootProject.projectDir}/spring/boot2-autoconfig\n task generateSources(type: Copy) {\n     from \"${autoconfigureProjectDir}/src/main/java\"\n     into \"${project.ext.genSrcDir}/main/java\"\n+    exclude '**/ArmeriaAutoConfiguration.java'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ddddec3027a1cc5c1849d239360cb02287f8abd"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9d29e84ac603cf2603305920af4ec0bf753e9cf", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/e9d29e84ac603cf2603305920af4ec0bf753e9cf", "committedDate": "2020-10-14T16:33:49Z", "message": "Address comments by @ikhoon"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMDgxODU5", "url": "https://github.com/line/armeria/pull/3102#pullrequestreview-510081859", "createdAt": "2020-10-16T05:02:44Z", "commit": {"oid": "e9d29e84ac603cf2603305920af4ec0bf753e9cf"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNTowMjo0NFrOHinCNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNTowMjo0NFrOHinCNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1MzE3NQ==", "bodyText": "nit: Intention? \ud83d\ude06", "url": "https://github.com/line/armeria/pull/3102#discussion_r506053175", "createdAt": "2020-10-16T05:02:44Z", "author": {"login": "ikhoon"}, "path": "it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring.mixed.tomcat;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.catalina.startup.Tomcat;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.web.context.WebServerApplicationContext;\n+import org.springframework.boot.web.embedded.tomcat.TomcatWebServer;\n+import org.springframework.boot.web.server.WebServer;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+\n+import com.linecorp.armeria.server.tomcat.TomcatService;\n+import com.linecorp.armeria.spring.ArmeriaServerConfigurator;\n+\n+@SpringBootApplication\n+public class SpringTomcatApplication {\n+\n+    @Inject\n+    private ApplicationContext applicationContext;\n+\n+    /**\n+     * Bean to configure Armeria Tomcat service.\n+     * @return configuration bean.\n+     */\n+    @Bean\n+    public ArmeriaServerConfigurator armeriaTomcat() {\n+        final WebServer webServer = ((WebServerApplicationContext) applicationContext).getWebServer();\n+        if (webServer instanceof TomcatWebServer) {\n+            final Tomcat tomcat = ((TomcatWebServer) webServer).getTomcat();\n+\n+            return serverBuilder -> serverBuilder.serviceUnder(\"/tomcat/api/rest/v1\",\n+                                                          TomcatService.of(tomcat));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9d29e84ac603cf2603305920af4ec0bf753e9cf"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9242a73208195ab802391d00ce5f0a896b055718", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/9242a73208195ab802391d00ce5f0a896b055718", "committedDate": "2020-10-16T05:22:31Z", "message": "Fix indent"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMTg5OTM4", "url": "https://github.com/line/armeria/pull/3102#pullrequestreview-510189938", "createdAt": "2020-10-16T06:37:13Z", "commit": {"oid": "9242a73208195ab802391d00ce5f0a896b055718"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4719, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}