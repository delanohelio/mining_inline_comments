{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MjQyNzgx", "number": 3032, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNzoxMDo1MVrOEgzqVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNzoxMDo1MVrOEgzqVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODM2MzA5OnYy", "diffSide": "RIGHT", "path": "grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServerInterceptorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNzoxMDo1MVrOHNyvJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNzoxMDo1MVrOHNyvJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIyNDgwNQ==", "bodyText": "nit: missing space between (StatusRuntimeException) and cause", "url": "https://github.com/line/armeria/pull/3032#discussion_r484224805", "createdAt": "2020-09-07T07:10:51Z", "author": {"login": "trustin"}, "path": "grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServerInterceptorTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.grpc;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+\n+import java.util.concurrent.Executors;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.linecorp.armeria.client.Clients;\n+import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;\n+import com.linecorp.armeria.grpc.testing.Messages.SimpleRequest;\n+import com.linecorp.armeria.grpc.testing.TestServiceGrpc.TestServiceBlockingStub;\n+import com.linecorp.armeria.internal.common.grpc.TestServiceImpl;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.testing.junit5.server.ServerExtension;\n+\n+import io.grpc.Metadata;\n+import io.grpc.ServerCall;\n+import io.grpc.ServerCall.Listener;\n+import io.grpc.ServerCallHandler;\n+import io.grpc.ServerInterceptor;\n+import io.grpc.ServerInterceptors;\n+import io.grpc.Status;\n+import io.grpc.StatusRuntimeException;\n+\n+class GrpcServerInterceptorTest {\n+\n+    @RegisterExtension\n+    static ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.service(GrpcService.builder()\n+                                  .addService(ServerInterceptors.intercept(\n+                                          new TestServiceImpl(Executors.newSingleThreadScheduledExecutor()),\n+                                          NoPassInterceptor.INSTANCE))\n+                                  .build());\n+        }\n+    };\n+\n+    @Test\n+    void closeCallByInterceptor() {\n+        final TestServiceBlockingStub client =\n+                Clients.builder(server.httpUri(GrpcSerializationFormats.PROTO))\n+                       .build(TestServiceBlockingStub.class);\n+        final Throwable cause = catchThrowable(() -> client.unaryCall(SimpleRequest.getDefaultInstance()));\n+        assertThat(cause).isInstanceOf(StatusRuntimeException.class);\n+        assertThat(((StatusRuntimeException)cause).getStatus()).isEqualTo(Status.PERMISSION_DENIED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "108301f28d8aadffae50ef75548013ae71ea5621"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1844, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}