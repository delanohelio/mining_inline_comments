{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzODEzMzgx", "number": 2867, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMjoxMTowN1rOELGhCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMjoyNTo1OVrOELGpLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDc2NTUzOnYy", "diffSide": "RIGHT", "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMjoxMTowN1rOGshrvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMjoxMzowMVrOGshtSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM0MjM5OA==", "bodyText": "How about delaying only for Java 8? We use microsecond precision for 9+.", "url": "https://github.com/line/armeria/pull/2867#discussion_r449342398", "createdAt": "2020-07-03T02:11:07Z", "author": {"login": "trustin"}, "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -84,8 +86,16 @@ protected void init() {\n         // \"/nested\" left out as there's no sub-routing feature at the moment.\n \n         sb.service(\"/child\", (ctx, req) -> {\n+\n+            // The `Span.start()` and `Span.finish()` estimate the current time using\n+            // `baseEpochMicros + (System.nanoTime() - baseTickNanos)`.\n+            // However, Armeria achieves the current time using `System.currentTimeMillis() * 1000` in Java8.\n+            // The two different way of getting the current time could cause an error of a millisecond.\n+            // Sometimes the tolerance makes the server appear to finish earlier than child in test case.\n+            // This is not a problem in the Brave{Service,Client} because they only use Armeria timestamp.\n             tracing.tracer().nextSpan().name(\"child\").start().finish();\n-            return HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"happy\");\n+            return HttpResponse.delayed(\n+                    HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"happy\"), Duration.ofMillis(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d525863385a5d943047c3ed76296883644c9391d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM0Mjc5Mg==", "bodyText": "That's a good idea.", "url": "https://github.com/line/armeria/pull/2867#discussion_r449342792", "createdAt": "2020-07-03T02:13:01Z", "author": {"login": "ikhoon"}, "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -84,8 +86,16 @@ protected void init() {\n         // \"/nested\" left out as there's no sub-routing feature at the moment.\n \n         sb.service(\"/child\", (ctx, req) -> {\n+\n+            // The `Span.start()` and `Span.finish()` estimate the current time using\n+            // `baseEpochMicros + (System.nanoTime() - baseTickNanos)`.\n+            // However, Armeria achieves the current time using `System.currentTimeMillis() * 1000` in Java8.\n+            // The two different way of getting the current time could cause an error of a millisecond.\n+            // Sometimes the tolerance makes the server appear to finish earlier than child in test case.\n+            // This is not a problem in the Brave{Service,Client} because they only use Armeria timestamp.\n             tracing.tracer().nextSpan().name(\"child\").start().finish();\n-            return HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"happy\");\n+            return HttpResponse.delayed(\n+                    HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"happy\"), Duration.ofMillis(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM0MjM5OA=="}, "originalCommit": {"oid": "d525863385a5d943047c3ed76296883644c9391d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDc4NjM2OnYy", "diffSide": "RIGHT", "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMjoyNTo1OVrOGsh39A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMjozNTo0OVrOGsiACQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM0NTUyNA==", "bodyText": "How about just returning here?\nreturn HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"happy\");", "url": "https://github.com/line/armeria/pull/2867#discussion_r449345524", "createdAt": "2020-07-03T02:25:59Z", "author": {"login": "minwoox"}, "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -84,8 +86,21 @@ protected void init() {\n         // \"/nested\" left out as there's no sub-routing feature at the moment.\n \n         sb.service(\"/child\", (ctx, req) -> {\n+\n+            // The `Span.start()` and `Span.finish()` estimate the current time using\n+            // `baseEpochMicros + (System.nanoTime() - baseTickNanos)`.\n+            // However, Armeria achieves the current time using `System.currentTimeMillis() * 1000` in Java8.\n+            // The two different way of getting the current time could cause an error of a millisecond.\n+            // Sometimes the tolerance makes the server appear to finish earlier than child in this test case.\n+            // This is not a problem in the Brave{Service,Client} because they only use Armeria's timestamp.\n             tracing.tracer().nextSpan().name(\"child\").start().finish();\n-            return HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"happy\");\n+            final Duration delay;\n+            if (SystemInfo.javaVersion() > 8) {\n+                delay = Duration.ofNanos(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37eb3d47431b93f6703076a88f645851d7687ba0"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM0NzU5Mw==", "bodyText": "We need 1 microsecond delay for Java 9 because Clock.systemUTC().instant() has microsecond precision. :-)", "url": "https://github.com/line/armeria/pull/2867#discussion_r449347593", "createdAt": "2020-07-03T02:35:49Z", "author": {"login": "ikhoon"}, "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -84,8 +86,21 @@ protected void init() {\n         // \"/nested\" left out as there's no sub-routing feature at the moment.\n \n         sb.service(\"/child\", (ctx, req) -> {\n+\n+            // The `Span.start()` and `Span.finish()` estimate the current time using\n+            // `baseEpochMicros + (System.nanoTime() - baseTickNanos)`.\n+            // However, Armeria achieves the current time using `System.currentTimeMillis() * 1000` in Java8.\n+            // The two different way of getting the current time could cause an error of a millisecond.\n+            // Sometimes the tolerance makes the server appear to finish earlier than child in this test case.\n+            // This is not a problem in the Brave{Service,Client} because they only use Armeria's timestamp.\n             tracing.tracer().nextSpan().name(\"child\").start().finish();\n-            return HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"happy\");\n+            final Duration delay;\n+            if (SystemInfo.javaVersion() > 8) {\n+                delay = Duration.ofNanos(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM0NTUyNA=="}, "originalCommit": {"oid": "37eb3d47431b93f6703076a88f645851d7687ba0"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2474, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}