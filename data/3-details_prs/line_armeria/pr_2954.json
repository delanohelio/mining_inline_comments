{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NzYyNzYz", "number": 2954, "title": "Add String-to-Duration converter on Spring Boot 1", "bodyText": "Motivation:\nCan't convert String to Duration in Spring Boot 1.\nModifications:\n\nFork DurationStyle provided by Spring Boot 2.\nAdd ConversionService that includes a converter that can convert String to Duration.\nRe-enable graceful shutdown test for Spring Boot 1.\n\nResult:\n\nA user can use graceful shutdown in Spring Boot 1.", "createdAt": "2020-07-31T04:05:04Z", "url": "https://github.com/line/armeria/pull/2954", "merged": true, "mergeCommit": {"oid": "06d44dc4f1047fd362e250cea6abec01807f1b49"}, "closed": true, "closedAt": "2020-08-03T11:20:53Z", "author": {"login": "heowc"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6MGBuAH2gAyNDU5NzYyNzYzOmNkNDJiMmRhZjk4ZmM1NjJiYmE5MjQ3YTM1M2U3NmY3NGQ1NjQ3OWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7OuDLgH2gAyNDU5NzYyNzYzOmMxYmU3M2FmZmJiMzc4YjhmZmZlZTliMmJmZTc3NmNiMzk4MGJjZjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cd42b2daf98fc562bba9247a353e76f74d56479c", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/cd42b2daf98fc562bba9247a353e76f74d56479c", "committedDate": "2020-07-31T03:59:08Z", "message": "Fix bug that could not convert String to Duration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cce9c9fd907d04a279151b75bc625ecd926934c7", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/cce9c9fd907d04a279151b75bc625ecd926934c7", "committedDate": "2020-07-31T05:37:29Z", "message": "Add `@ConditionalOnMissingBean` / Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0001df9ee9b0b45fef171807e23b2c108709b6e7", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/0001df9ee9b0b45fef171807e23b2c108709b6e7", "committedDate": "2020-07-31T06:10:41Z", "message": "Cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4OTUyMDkx", "url": "https://github.com/line/armeria/pull/2954#pullrequestreview-458952091", "createdAt": "2020-07-31T06:50:34Z", "commit": {"oid": "0001df9ee9b0b45fef171807e23b2c108709b6e7"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNjo1MDozNFrOG593og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNjo1Mzo0NFrOG5976A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNTY4Mg==", "bodyText": "Could we use org.springframework.format.FormatterRegistrar just like  org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar did?", "url": "https://github.com/line/armeria/pull/2954#discussion_r463435682", "createdAt": "2020-07-31T06:50:34Z", "author": {"login": "trustin"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConvertersConfiguration.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import java.util.List;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.support.ConversionServiceFactoryBean;\n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.convert.converter.Converter;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Provides useful {@link Converter}s.\n+ */\n+@Configuration\n+public class ArmeriaSpringBoot1ConvertersConfiguration {\n+\n+    /**\n+     * Create an {@link ConversionService} bean.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean(ConversionService.class)\n+    public ConversionServiceFactoryBean conversionService(List<Converter> converterList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0001df9ee9b0b45fef171807e23b2c108709b6e7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNTk0Nw==", "bodyText": "Please add their license header after ours if you forked.", "url": "https://github.com/line/armeria/pull/2954#discussion_r463435947", "createdAt": "2020-07-31T06:51:22Z", "author": {"login": "trustin"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ *\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0001df9ee9b0b45fef171807e23b2c108709b6e7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNjIwNA==", "bodyText": "Is it possible to hide this class from the public API, i.e. remove public?", "url": "https://github.com/line/armeria/pull/2954#discussion_r463436204", "createdAt": "2020-07-31T06:52:06Z", "author": {"login": "trustin"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/StringToDurationConverter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+\n+import org.springframework.core.convert.converter.Converter;\n+\n+/**\n+ * Convert {@link String} to {@link Duration}.\n+ */\n+public class StringToDurationConverter implements Converter<String, Duration> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0001df9ee9b0b45fef171807e23b2c108709b6e7"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNjc3Ng==", "bodyText": "Could we remove public from all members? DurationStyle is package-local, so there's no point of putting public in this class.", "url": "https://github.com/line/armeria/pull/2954#discussion_r463436776", "createdAt": "2020-07-31T06:53:44Z", "author": {"login": "trustin"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ *\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+\n+        @Override\n+        public Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            }\n+            catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        public String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+\n+        @Override\n+        public Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            }\n+            catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        public String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    public Duration parse(String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0001df9ee9b0b45fef171807e23b2c108709b6e7"}, "originalPosition": 104}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28b288ae52ed9aaac37baf73c4b6c0d0fef5bbc1", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/28b288ae52ed9aaac37baf73c4b6c0d0fef5bbc1", "committedDate": "2020-07-31T08:06:15Z", "message": "add copylight / remove `public`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65abd723a14d76d358b2c797a78f9959f8931ccb", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/65abd723a14d76d358b2c797a78f9959f8931ccb", "committedDate": "2020-07-31T09:35:47Z", "message": "Add `ArmeriaSpringBoot1FormatterRegistrar`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MTgzMjg4", "url": "https://github.com/line/armeria/pull/2954#pullrequestreview-459183288", "createdAt": "2020-07-31T13:42:41Z", "commit": {"oid": "65abd723a14d76d358b2c797a78f9959f8931ccb"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo0Mjo0MVrOG6JBMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo1NjoyMVrOG6Jgbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYxODM1Mw==", "bodyText": "nit: Could remove empty lines", "url": "https://github.com/line/armeria/pull/2954#discussion_r463618353", "createdAt": "2020-07-31T13:42:41Z", "author": {"login": "trustin"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ *\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {\n+        return detectAndParse(value, null);\n+    }\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value, ChronoUnit unit) {\n+        return detect(value).parse(value, unit);\n+    }\n+\n+    /**\n+     * Detect the style from the given source value.\n+     * @param value the source value\n+     * @return the duration style\n+     * @throws IllegalArgumentException if the value is not a known style\n+     */\n+    static DurationStyle detect(String value) {\n+        Assert.notNull(value, \"Value must not be null\");\n+        for (DurationStyle candidate : values()) {\n+            if (candidate.matches(value)) {\n+                return candidate;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"'\" + value + \"' is not a valid duration\");\n+    }\n+\n+    /**\n+     * Units that we support.\n+     */\n+    enum Unit {\n+\n+        /**\n+         * Nanoseconds.\n+         */\n+        NANOS(ChronoUnit.NANOS, \"ns\", Duration::toNanos),\n+\n+        /**\n+         * Microseconds.\n+         */\n+        MICROS(ChronoUnit.MICROS, \"us\", (duration) -> duration.toMillis() * 1000L),\n+\n+        /**\n+         * Milliseconds.\n+         */\n+        MILLIS(ChronoUnit.MILLIS, \"ms\", Duration::toMillis),\n+\n+        /**\n+         * Seconds.\n+         */\n+        SECONDS(ChronoUnit.SECONDS, \"s\", Duration::getSeconds),\n+\n+        /**\n+         * Minutes.\n+         */\n+        MINUTES(ChronoUnit.MINUTES, \"m\", Duration::toMinutes),\n+\n+        /**\n+         * Hours.\n+         */\n+        HOURS(ChronoUnit.HOURS, \"h\", Duration::toHours),\n+\n+        /**\n+         * Days.\n+         */\n+        DAYS(ChronoUnit.DAYS, \"d\", Duration::toDays);\n+\n+        private final ChronoUnit chronoUnit;\n+\n+        private final String suffix;\n+\n+        private Function<Duration, Long> longValue;\n+\n+        Unit(ChronoUnit chronoUnit, String suffix, Function<Duration, Long> toUnit) {\n+            this.chronoUnit = chronoUnit;\n+            this.suffix = suffix;\n+            this.longValue = toUnit;\n+        }\n+\n+        Duration parse(String value) {\n+            return Duration.of(Long.parseLong(value), this.chronoUnit);\n+        }\n+\n+        String print(Duration value) {\n+            return longValue(value) + this.suffix;\n+        }\n+\n+        long longValue(Duration value) {\n+            return this.longValue.apply(value);\n+        }\n+\n+        static Unit fromChronoUnit(ChronoUnit chronoUnit) {\n+            if (chronoUnit == null) {\n+                return Unit.MILLIS;\n+            }\n+            for (Unit candidate : values()) {\n+                if (candidate.chronoUnit == chronoUnit) {\n+                    return candidate;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"Unknown unit \" + chronoUnit);\n+        }\n+\n+        static Unit fromSuffix(String suffix) {\n+            for (Unit candidate : values()) {\n+                if (candidate.suffix.equalsIgnoreCase(suffix)) {\n+                    return candidate;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"Unknown unit '\" + suffix + \"'\");\n+        }\n+\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65abd723a14d76d358b2c797a78f9959f8931ccb"}, "originalPosition": 271}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNDg3NQ==", "bodyText": "Creates a new", "url": "https://github.com/line/armeria/pull/2954#discussion_r463624875", "createdAt": "2020-07-31T13:53:46Z", "author": {"login": "trustin"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConversionServiceConfiguration.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.format.support.FormattingConversionService;\n+import org.springframework.format.support.FormattingConversionServiceFactoryBean;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Provides useful {@link ConversionService}.\n+ */\n+@Configuration\n+public class ArmeriaSpringBoot1ConversionServiceConfiguration {\n+\n+    /**\n+     * Create an {@link ConversionService} bean.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65abd723a14d76d358b2c797a78f9959f8931ccb"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNTU2MA==", "bodyText": "Creates a new\nI don't understand what the second sentence means. Could you explain?", "url": "https://github.com/line/armeria/pull/2954#discussion_r463625560", "createdAt": "2020-07-31T13:54:53Z", "author": {"login": "trustin"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConversionServiceConfiguration.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.format.support.FormattingConversionService;\n+import org.springframework.format.support.FormattingConversionServiceFactoryBean;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Provides useful {@link ConversionService}.\n+ */\n+@Configuration\n+public class ArmeriaSpringBoot1ConversionServiceConfiguration {\n+\n+    /**\n+     * Create an {@link ConversionService} bean.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean(ConversionService.class)\n+    public FormattingConversionService conversionService() {\n+        final FormattingConversionServiceFactoryBean factoryBean = new FormattingConversionServiceFactoryBean();\n+        factoryBean.setFormatterRegistrars(Sets.newHashSet(new ArmeriaSpringBoot1FormatterRegistrar()));\n+        factoryBean.afterPropertiesSet();\n+        return factoryBean.getObject();\n+    }\n+\n+    /**\n+     * Create an {@link StringToDurationConverter} bean. If {@link ConversionService} is already registered,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65abd723a14d76d358b2c797a78f9959f8931ccb"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNTc2NA==", "bodyText": "Could just inline this method?", "url": "https://github.com/line/armeria/pull/2954#discussion_r463625764", "createdAt": "2020-07-31T13:55:14Z", "author": {"login": "trustin"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1FormatterRegistrar.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.format.FormatterRegistrar;\n+import org.springframework.format.FormatterRegistry;\n+\n+/**\n+ * Configures useful formatting system for use with Spring.\n+ */\n+class ArmeriaSpringBoot1FormatterRegistrar implements FormatterRegistrar {\n+\n+    @Override\n+    public void registerFormatters(FormatterRegistry registry) {\n+        registerConverters(registry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65abd723a14d76d358b2c797a78f9959f8931ccb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNTk1Ng==", "bodyText": "Remove an empty line?", "url": "https://github.com/line/armeria/pull/2954#discussion_r463625956", "createdAt": "2020-07-31T13:55:34Z", "author": {"login": "trustin"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65abd723a14d76d358b2c797a78f9959f8931ccb"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNjM1MQ==", "bodyText": "Could remove an empty line", "url": "https://github.com/line/armeria/pull/2954#discussion_r463626351", "createdAt": "2020-07-31T13:56:21Z", "author": {"login": "trustin"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/StringToDurationConverter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+\n+import org.springframework.core.convert.converter.Converter;\n+\n+/**\n+ * Convert {@link String} to {@link Duration}.\n+ */\n+class StringToDurationConverter implements Converter<String, Duration> {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65abd723a14d76d358b2c797a78f9959f8931ccb"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2f61a9eab6f5d1105abb6bb015a33ad0e18f431", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/a2f61a9eab6f5d1105abb6bb015a33ad0e18f431", "committedDate": "2020-07-31T14:54:57Z", "message": "Address comments from @trustin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b937369194b3a4bc36961b52610fd0fa2ab854c1", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/b937369194b3a4bc36961b52610fd0fa2ab854c1", "committedDate": "2020-07-31T14:58:00Z", "message": "Remove empty lines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78567e320cc7f1d043a0450555a04425a5c74184", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/78567e320cc7f1d043a0450555a04425a5c74184", "committedDate": "2020-08-01T01:25:17Z", "message": "Add converters to `FormatterRegistry`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/a1ce21fc93c0110ac9745617bc1656aefdc34265", "committedDate": "2020-08-02T03:20:18Z", "message": "Address comments from @trustin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NzIwNDE2", "url": "https://github.com/line/armeria/pull/2954#pullrequestreview-459720416", "createdAt": "2020-08-03T02:52:33Z", "commit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMjo1MjozM1rOG6qnwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzoxMjowMFrOG6q3RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE2ODg5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Matcher matcher = matcher(value);\n          \n          \n            \n                            final Matcher matcher = matcher(value);", "url": "https://github.com/line/armeria/pull/2954#discussion_r464168896", "createdAt": "2020-08-03T02:52:33Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MDYzNg==", "bodyText": "Use Preconditions.checkState()?", "url": "https://github.com/line/armeria/pull/2954#discussion_r464170636", "createdAt": "2020-08-03T03:00:56Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MDY3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String suffix = matcher.group(2);\n          \n          \n            \n                            final String suffix = matcher.group(2);", "url": "https://github.com/line/armeria/pull/2954#discussion_r464170678", "createdAt": "2020-08-03T03:01:07Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MDczOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n          \n          \n            \n                            throw new IllegalArgumentException('\\'' + value + \"' is not a valid simple duration\", ex);", "url": "https://github.com/line/armeria/pull/2954#discussion_r464170738", "createdAt": "2020-08-03T03:01:26Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MDkwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n          \n          \n            \n                            throw new IllegalArgumentException('\\'' + value + \"' is not a valid ISO-8601 duration\", ex);", "url": "https://github.com/line/armeria/pull/2954#discussion_r464170900", "createdAt": "2020-08-03T03:02:08Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MTEwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Assert.notNull(value, \"Value must not be null\");\n          \n          \n            \n                    requireNonNull(value, \"value\");", "url": "https://github.com/line/armeria/pull/2954#discussion_r464171109", "createdAt": "2020-08-03T03:03:09Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {\n+        return detectAndParse(value, null);\n+    }\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value, ChronoUnit unit) {\n+        return detect(value).parse(value, unit);\n+    }\n+\n+    /**\n+     * Detect the style from the given source value.\n+     * @param value the source value\n+     * @return the duration style\n+     * @throws IllegalArgumentException if the value is not a known style\n+     */\n+    static DurationStyle detect(String value) {\n+        Assert.notNull(value, \"Value must not be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MTE0OQ==", "bodyText": "Ditto", "url": "https://github.com/line/armeria/pull/2954#discussion_r464171149", "createdAt": "2020-08-03T03:03:23Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {\n+        return detectAndParse(value, null);\n+    }\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value, ChronoUnit unit) {\n+        return detect(value).parse(value, unit);\n+    }\n+\n+    /**\n+     * Detect the style from the given source value.\n+     * @param value the source value\n+     * @return the duration style\n+     * @throws IllegalArgumentException if the value is not a known style\n+     */\n+    static DurationStyle detect(String value) {\n+        Assert.notNull(value, \"Value must not be null\");\n+        for (DurationStyle candidate : values()) {\n+            if (candidate.matches(value)) {\n+                return candidate;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"'\" + value + \"' is not a valid duration\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MTU4OA==", "bodyText": "Global comments: Could you use third-person singular verb -s and so on.", "url": "https://github.com/line/armeria/pull/2954#discussion_r464171588", "createdAt": "2020-08-03T03:05:27Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {\n+        return detectAndParse(value, null);\n+    }\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MTc3NA==", "bodyText": "Ditto", "url": "https://github.com/line/armeria/pull/2954#discussion_r464171774", "createdAt": "2020-08-03T03:06:34Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {\n+        return detectAndParse(value, null);\n+    }\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value, ChronoUnit unit) {\n+        return detect(value).parse(value, unit);\n+    }\n+\n+    /**\n+     * Detect the style from the given source value.\n+     * @param value the source value\n+     * @return the duration style\n+     * @throws IllegalArgumentException if the value is not a known style\n+     */\n+    static DurationStyle detect(String value) {\n+        Assert.notNull(value, \"Value must not be null\");\n+        for (DurationStyle candidate : values()) {\n+            if (candidate.matches(value)) {\n+                return candidate;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"'\" + value + \"' is not a valid duration\");\n+    }\n+\n+    /**\n+     * Units that we support.\n+     */\n+    enum Unit {\n+\n+        /**\n+         * Nanoseconds.\n+         */\n+        NANOS(ChronoUnit.NANOS, \"ns\", Duration::toNanos),\n+\n+        /**\n+         * Microseconds.\n+         */\n+        MICROS(ChronoUnit.MICROS, \"us\", (duration) -> duration.toMillis() * 1000L),\n+\n+        /**\n+         * Milliseconds.\n+         */\n+        MILLIS(ChronoUnit.MILLIS, \"ms\", Duration::toMillis),\n+\n+        /**\n+         * Seconds.\n+         */\n+        SECONDS(ChronoUnit.SECONDS, \"s\", Duration::getSeconds),\n+\n+        /**\n+         * Minutes.\n+         */\n+        MINUTES(ChronoUnit.MINUTES, \"m\", Duration::toMinutes),\n+\n+        /**\n+         * Hours.\n+         */\n+        HOURS(ChronoUnit.HOURS, \"h\", Duration::toHours),\n+\n+        /**\n+         * Days.\n+         */\n+        DAYS(ChronoUnit.DAYS, \"d\", Duration::toDays);\n+\n+        private final ChronoUnit chronoUnit;\n+\n+        private final String suffix;\n+\n+        private Function<Duration, Long> longValue;\n+\n+        Unit(ChronoUnit chronoUnit, String suffix, Function<Duration, Long> toUnit) {\n+            this.chronoUnit = chronoUnit;\n+            this.suffix = suffix;\n+            this.longValue = toUnit;\n+        }\n+\n+        Duration parse(String value) {\n+            return Duration.of(Long.parseLong(value), this.chronoUnit);\n+        }\n+\n+        String print(Duration value) {\n+            return longValue(value) + this.suffix;\n+        }\n+\n+        long longValue(Duration value) {\n+            return this.longValue.apply(value);\n+        }\n+\n+        static Unit fromChronoUnit(ChronoUnit chronoUnit) {\n+            if (chronoUnit == null) {\n+                return Unit.MILLIS;\n+            }\n+            for (Unit candidate : values()) {\n+                if (candidate.chronoUnit == chronoUnit) {\n+                    return candidate;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"Unknown unit \" + chronoUnit);\n+        }\n+\n+        static Unit fromSuffix(String suffix) {\n+            for (Unit candidate : values()) {\n+                if (candidate.suffix.equalsIgnoreCase(suffix)) {\n+                    return candidate;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"Unknown unit '\" + suffix + \"'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 265}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MTkzMA==", "bodyText": "Could be removed?", "url": "https://github.com/line/armeria/pull/2954#discussion_r464171930", "createdAt": "2020-08-03T03:07:23Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MTk3Ng==", "bodyText": "Could be removed?", "url": "https://github.com/line/armeria/pull/2954#discussion_r464171976", "createdAt": "2020-08-03T03:07:36Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {\n+        return detectAndParse(value, null);\n+    }\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value, ChronoUnit unit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MjE1Mg==", "bodyText": "Could be removed?", "url": "https://github.com/line/armeria/pull/2954#discussion_r464172152", "createdAt": "2020-08-03T03:08:33Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MjM0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return Unit.MILLIS;\n          \n          \n            \n                            return MILLIS;", "url": "https://github.com/line/armeria/pull/2954#discussion_r464172343", "createdAt": "2020-08-03T03:09:37Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {\n+        return detectAndParse(value, null);\n+    }\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value, ChronoUnit unit) {\n+        return detect(value).parse(value, unit);\n+    }\n+\n+    /**\n+     * Detect the style from the given source value.\n+     * @param value the source value\n+     * @return the duration style\n+     * @throws IllegalArgumentException if the value is not a known style\n+     */\n+    static DurationStyle detect(String value) {\n+        Assert.notNull(value, \"Value must not be null\");\n+        for (DurationStyle candidate : values()) {\n+            if (candidate.matches(value)) {\n+                return candidate;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"'\" + value + \"' is not a valid duration\");\n+    }\n+\n+    /**\n+     * Units that we support.\n+     */\n+    enum Unit {\n+\n+        /**\n+         * Nanoseconds.\n+         */\n+        NANOS(ChronoUnit.NANOS, \"ns\", Duration::toNanos),\n+\n+        /**\n+         * Microseconds.\n+         */\n+        MICROS(ChronoUnit.MICROS, \"us\", (duration) -> duration.toMillis() * 1000L),\n+\n+        /**\n+         * Milliseconds.\n+         */\n+        MILLIS(ChronoUnit.MILLIS, \"ms\", Duration::toMillis),\n+\n+        /**\n+         * Seconds.\n+         */\n+        SECONDS(ChronoUnit.SECONDS, \"s\", Duration::getSeconds),\n+\n+        /**\n+         * Minutes.\n+         */\n+        MINUTES(ChronoUnit.MINUTES, \"m\", Duration::toMinutes),\n+\n+        /**\n+         * Hours.\n+         */\n+        HOURS(ChronoUnit.HOURS, \"h\", Duration::toHours),\n+\n+        /**\n+         * Days.\n+         */\n+        DAYS(ChronoUnit.DAYS, \"d\", Duration::toDays);\n+\n+        private final ChronoUnit chronoUnit;\n+\n+        private final String suffix;\n+\n+        private Function<Duration, Long> longValue;\n+\n+        Unit(ChronoUnit chronoUnit, String suffix, Function<Duration, Long> toUnit) {\n+            this.chronoUnit = chronoUnit;\n+            this.suffix = suffix;\n+            this.longValue = toUnit;\n+        }\n+\n+        Duration parse(String value) {\n+            return Duration.of(Long.parseLong(value), this.chronoUnit);\n+        }\n+\n+        String print(Duration value) {\n+            return longValue(value) + this.suffix;\n+        }\n+\n+        long longValue(Duration value) {\n+            return this.longValue.apply(value);\n+        }\n+\n+        static Unit fromChronoUnit(ChronoUnit chronoUnit) {\n+            if (chronoUnit == null) {\n+                return Unit.MILLIS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3Mjg2OA==", "bodyText": "Could you create package-info.java that contains NonNullByDefault.\nAnd add\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                abstract Duration parse(String value, ChronoUnit unit);\n          \n          \n            \n                abstract Duration parse(String value, @Nullable ChronoUnit unit);", "url": "https://github.com/line/armeria/pull/2954#discussion_r464172868", "createdAt": "2020-08-03T03:12:00Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 124}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "056ccf8098a5de8c96648b5a8f2758bcbf8aa0ca", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/056ccf8098a5de8c96648b5a8f2758bcbf8aa0ca", "committedDate": "2020-08-03T03:34:28Z", "message": "Revert \"Address comments from @trustin\"\n\nThis reverts commit a1ce21fc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "393fabbc7f7b6c68ba078ef1bb2a55bcc7b73289", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/393fabbc7f7b6c68ba078ef1bb2a55bcc7b73289", "committedDate": "2020-08-03T03:44:24Z", "message": "Address comments from @ikhoon"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb34c8df20f1000e7f0cb24cff43436bbe683208", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/cb34c8df20f1000e7f0cb24cff43436bbe683208", "committedDate": "2020-08-03T03:47:28Z", "message": "Address comments from @ikhoon"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NzM3ODE5", "url": "https://github.com/line/armeria/pull/2954#pullrequestreview-459737819", "createdAt": "2020-08-03T04:11:34Z", "commit": {"oid": "cb34c8df20f1000e7f0cb24cff43436bbe683208"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNDoxMTozNFrOG6rmdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNDoxNTozMVrOG6rpOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE4NDk1MA==", "bodyText": "How about making this as singleton by using @Scope or making enum singleton?", "url": "https://github.com/line/armeria/pull/2954#discussion_r464184950", "createdAt": "2020-08-03T04:11:34Z", "author": {"login": "minwoox"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConversionServiceConfiguration.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.format.FormatterRegistrar;\n+import org.springframework.format.support.FormattingConversionService;\n+import org.springframework.format.support.FormattingConversionServiceFactoryBean;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Provides useful {@link ConversionService}.\n+ */\n+@Configuration\n+public class ArmeriaSpringBoot1ConversionServiceConfiguration {\n+\n+    /**\n+     * Create a new {@link ConversionService} bean.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean(ConversionService.class)\n+    public FormattingConversionService conversionService(ListableBeanFactory beanFactory) {\n+        final FormattingConversionServiceFactoryBean factoryBean = new FormattingConversionServiceFactoryBean();\n+        final FormatterRegistrar formatterRegistrar = new ArmeriaSpringBoot1FormatterRegistrar(beanFactory);\n+        factoryBean.setFormatterRegistrars(Sets.newHashSet(formatterRegistrar));\n+        factoryBean.afterPropertiesSet();\n+        return factoryBean.getObject();\n+    }\n+\n+    /**\n+     * Create a new {@link StringToDurationConverter} bean.\n+     */\n+    @Bean\n+    public StringToDurationConverter armeriaSpringBoot1StringDurationConverter() {\n+        return new StringToDurationConverter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb34c8df20f1000e7f0cb24cff43436bbe683208"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE4NTY1OQ==", "bodyText": "Can we fork some tests as well to see what is possible?", "url": "https://github.com/line/armeria/pull/2954#discussion_r464185659", "createdAt": "2020-08-03T04:15:31Z", "author": {"login": "minwoox"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.annotation.Nullable;\n+\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb34c8df20f1000e7f0cb24cff43436bbe683208"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ec223b0aa73fb76f9d885f958603eaaf98305e2", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/8ec223b0aa73fb76f9d885f958603eaaf98305e2", "committedDate": "2020-08-03T05:16:24Z", "message": "Address comments from @minwoox"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c08560024f7b36ec8dd1e52f35de101a6774441", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/2c08560024f7b36ec8dd1e52f35de101a6774441", "committedDate": "2020-08-03T08:24:40Z", "message": "Fork test for `DurationStyleTests`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5ODQyNDQ3", "url": "https://github.com/line/armeria/pull/2954#pullrequestreview-459842447", "createdAt": "2020-08-03T08:31:24Z", "commit": {"oid": "2c08560024f7b36ec8dd1e52f35de101a6774441"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODozMToyNFrOG6wtjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODozMToyNFrOG6wtjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI2ODY4NA==", "bodyText": "nit: Returns the {@link StringToDurationConverter} bean because it's now a singleton. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2954#discussion_r464268684", "createdAt": "2020-08-03T08:31:24Z", "author": {"login": "minwoox"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConversionServiceConfiguration.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.format.FormatterRegistrar;\n+import org.springframework.format.support.FormattingConversionService;\n+import org.springframework.format.support.FormattingConversionServiceFactoryBean;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Provides useful {@link ConversionService}.\n+ */\n+@Configuration\n+public class ArmeriaSpringBoot1ConversionServiceConfiguration {\n+\n+    /**\n+     * Create a new {@link ConversionService} bean.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean(ConversionService.class)\n+    public FormattingConversionService conversionService(ListableBeanFactory beanFactory) {\n+        final FormattingConversionServiceFactoryBean factoryBean = new FormattingConversionServiceFactoryBean();\n+        final FormatterRegistrar formatterRegistrar = new ArmeriaSpringBoot1FormatterRegistrar(beanFactory);\n+        factoryBean.setFormatterRegistrars(Sets.newHashSet(formatterRegistrar));\n+        factoryBean.afterPropertiesSet();\n+        return factoryBean.getObject();\n+    }\n+\n+    /**\n+     * Create a new {@link StringToDurationConverter} bean.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c08560024f7b36ec8dd1e52f35de101a6774441"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5ODQyNTk4", "url": "https://github.com/line/armeria/pull/2954#pullrequestreview-459842598", "createdAt": "2020-08-03T08:31:36Z", "commit": {"oid": "2c08560024f7b36ec8dd1e52f35de101a6774441"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e4882039c57e32220f605b8747f31ac7e872639", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/3e4882039c57e32220f605b8747f31ac7e872639", "committedDate": "2020-08-03T08:34:13Z", "message": "Cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5ODU4NzU4", "url": "https://github.com/line/armeria/pull/2954#pullrequestreview-459858758", "createdAt": "2020-08-03T08:55:18Z", "commit": {"oid": "3e4882039c57e32220f605b8747f31ac7e872639"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODo1ODoxNlrOG6xlAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODo1ODoxNlrOG6xlAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI4Mjg4MA==", "bodyText": "nit: Add final?", "url": "https://github.com/line/armeria/pull/2954#discussion_r464282880", "createdAt": "2020-08-03T08:58:16Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1FormatterRegistrar.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.format.FormatterRegistrar;\n+import org.springframework.format.FormatterRegistry;\n+\n+/**\n+ * Configures useful formatting system for use with Spring.\n+ */\n+class ArmeriaSpringBoot1FormatterRegistrar implements FormatterRegistrar {\n+\n+    private ListableBeanFactory beanFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4882039c57e32220f605b8747f31ac7e872639"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1be73affbb378b8fffee9b2bfe776cb3980bcf5", "author": {"user": {"login": "heowc", "name": "WonChul Heo"}}, "url": "https://github.com/line/armeria/commit/c1be73affbb378b8fffee9b2bfe776cb3980bcf5", "committedDate": "2020-08-03T09:36:35Z", "message": "Add `final`"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4979, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}