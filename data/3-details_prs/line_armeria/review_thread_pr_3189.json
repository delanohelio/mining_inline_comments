{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1NTIxMTM5", "number": 3189, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjo0MDoyMFrOE8fqdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjo0Mjo0OVrOE8fsXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODY4Nzg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/ScalaUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjo0MDoyMFrOH4pkGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjo1NDozNVrOH4p1wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2MzI4OA==", "bodyText": "nit: can remove scala.concurrent.", "url": "https://github.com/line/armeria/pull/3189#discussion_r529163288", "createdAt": "2020-11-24T02:40:20Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/ScalaUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.server.annotation;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+\n+import javax.annotation.Nullable;\n+\n+import scala.concurrent.ExecutionContext;\n+import scala.util.Failure;\n+\n+final class ScalaUtil {\n+\n+    @Nullable\n+    private static final Class<?> SCALA_FUTURE;\n+    @Nullable\n+    private static final Class<?> SCALA_EXECUTION_CONTEXT;\n+\n+    static {\n+        Class<?> futureClass;\n+        try {\n+            futureClass = Class.forName(\"scala.concurrent.Future\");\n+        } catch (ClassNotFoundException e) {\n+            futureClass = null;\n+        }\n+        SCALA_FUTURE = futureClass;\n+\n+        Class<?> executionContextClass;\n+        try {\n+            executionContextClass = Class.forName(\"scala.concurrent.ExecutionContext\");\n+        } catch (ClassNotFoundException e) {\n+            executionContextClass = null;\n+        }\n+        SCALA_EXECUTION_CONTEXT = executionContextClass;\n+    }\n+\n+    static boolean isScalaFuture(Class<?> clazz) {\n+        return SCALA_FUTURE != null && SCALA_FUTURE.isAssignableFrom(clazz);\n+    }\n+\n+    static boolean isExecutionContext(Class<?> clazz) {\n+        return SCALA_EXECUTION_CONTEXT != null && SCALA_EXECUTION_CONTEXT.isAssignableFrom(clazz);\n+    }\n+\n+    /**\n+     * A converter that converts {@link scala.concurrent.Future} to {@link CompletableFuture}.\n+     * This nested class is lazily initialized only when scala-library is in the classpath.\n+     */\n+    static final class FutureConverter {\n+\n+        static <T> CompletableFuture<T> toCompletableFuture(scala.concurrent.Future<T> scalaFuture,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7002136e89d24c5f44ec88ffb6c264b4b9d18eac"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2NzgwOQ==", "bodyText": "I intentionally left it to explicitly distinguish with java.util.concurrent.Future. \ud83d\udc7d", "url": "https://github.com/line/armeria/pull/3189#discussion_r529167809", "createdAt": "2020-11-24T02:54:35Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/ScalaUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.server.annotation;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+\n+import javax.annotation.Nullable;\n+\n+import scala.concurrent.ExecutionContext;\n+import scala.util.Failure;\n+\n+final class ScalaUtil {\n+\n+    @Nullable\n+    private static final Class<?> SCALA_FUTURE;\n+    @Nullable\n+    private static final Class<?> SCALA_EXECUTION_CONTEXT;\n+\n+    static {\n+        Class<?> futureClass;\n+        try {\n+            futureClass = Class.forName(\"scala.concurrent.Future\");\n+        } catch (ClassNotFoundException e) {\n+            futureClass = null;\n+        }\n+        SCALA_FUTURE = futureClass;\n+\n+        Class<?> executionContextClass;\n+        try {\n+            executionContextClass = Class.forName(\"scala.concurrent.ExecutionContext\");\n+        } catch (ClassNotFoundException e) {\n+            executionContextClass = null;\n+        }\n+        SCALA_EXECUTION_CONTEXT = executionContextClass;\n+    }\n+\n+    static boolean isScalaFuture(Class<?> clazz) {\n+        return SCALA_FUTURE != null && SCALA_FUTURE.isAssignableFrom(clazz);\n+    }\n+\n+    static boolean isExecutionContext(Class<?> clazz) {\n+        return SCALA_EXECUTION_CONTEXT != null && SCALA_EXECUTION_CONTEXT.isAssignableFrom(clazz);\n+    }\n+\n+    /**\n+     * A converter that converts {@link scala.concurrent.Future} to {@link CompletableFuture}.\n+     * This nested class is lazily initialized only when scala-library is in the classpath.\n+     */\n+    static final class FutureConverter {\n+\n+        static <T> CompletableFuture<T> toCompletableFuture(scala.concurrent.Future<T> scalaFuture,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2MzI4OA=="}, "originalCommit": {"oid": "7002136e89d24c5f44ec88ffb6c264b4b9d18eac"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODY5Mjc4OnYy", "diffSide": "RIGHT", "path": "scalapb/scalapb_2.13/src/test/scala/com/linecorp/armeria/server/scalapb/ScalaPbResponseAnnotatedServiceTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjo0Mjo0OVrOH4pnSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjo1NDo0NlrOH4p2Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2NDEwNw==", "bodyText": "nit: empty line", "url": "https://github.com/line/armeria/pull/3189#discussion_r529164107", "createdAt": "2020-11-24T02:42:49Z", "author": {"login": "minwoox"}, "path": "scalapb/scalapb_2.13/src/test/scala/com/linecorp/armeria/server/scalapb/ScalaPbResponseAnnotatedServiceTest.scala", "diffHunk": "@@ -44,7 +59,11 @@ class ScalaPbResponseAnnotatedServiceTest {\n   @BeforeEach\n   private def setUp(): Unit = {\n     server.start()\n-    client = WebClient.of(ScalaPbResponseAnnotatedServiceTest.server.httpUri)\n+    client = WebClient\n+      .builder(ScalaPbResponseAnnotatedServiceTest.server.httpUri)\n+      .responseTimeoutMillis(0)\n+      .build()\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7002136e89d24c5f44ec88ffb6c264b4b9d18eac"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2Nzg4Nw==", "bodyText": "Oops...", "url": "https://github.com/line/armeria/pull/3189#discussion_r529167887", "createdAt": "2020-11-24T02:54:46Z", "author": {"login": "ikhoon"}, "path": "scalapb/scalapb_2.13/src/test/scala/com/linecorp/armeria/server/scalapb/ScalaPbResponseAnnotatedServiceTest.scala", "diffHunk": "@@ -44,7 +59,11 @@ class ScalaPbResponseAnnotatedServiceTest {\n   @BeforeEach\n   private def setUp(): Unit = {\n     server.start()\n-    client = WebClient.of(ScalaPbResponseAnnotatedServiceTest.server.httpUri)\n+    client = WebClient\n+      .builder(ScalaPbResponseAnnotatedServiceTest.server.httpUri)\n+      .responseTimeoutMillis(0)\n+      .build()\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2NDEwNw=="}, "originalCommit": {"oid": "7002136e89d24c5f44ec88ffb6c264b4b9d18eac"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2055, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}