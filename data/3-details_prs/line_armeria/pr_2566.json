{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NzA0ODI1", "number": 2566, "title": "Added `armeria-bucket4j` to throttle based on token buckets", "bodyText": "\u2026#2394):\n\nImplemented advanced throttling TokenBucketThrottlingStrategy based on Token-Bucket rate-limiting algorithm and Bucket4j library.\nAdded new \"bucket4j\" module to Armeria.\nProvided solution for issue #2394 in an alternative way as per earlier review feedback by @trustin: \"Provide a separate module armeria-bucket4j which provides an alternative ThrottlingStrategy implementation that exposes bucket4j classes in the public API.\"", "createdAt": "2020-03-09T17:00:08Z", "url": "https://github.com/line/armeria/pull/2566", "merged": true, "mergeCommit": {"oid": "e8eecafb35bb7eb50f6cdd614b0b5d1faca8a308"}, "closed": true, "closedAt": "2020-03-23T02:24:57Z", "author": {"login": "max904-github"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMA6dzAH2gAyMzg1NzA0ODI1OjIzM2JiMDkzNjBlYWRiOTZhOTk2MzY1ZjI4ZGE1OGVhNWI5ODMzM2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQUlB0gFqTM3OTA5NTU1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/233bb09360eadb96a996365f28da58ea5b98333f", "committedDate": "2020-03-09T16:57:02Z", "message": "Added advanced throttling mechanism based on Token-Bucket algorithm (#2394):\n- Implemented advanced throttling TokenBucketThrottlingStrategy based on Token-Bucket rate-limiting algorithm and Bucket4j library.\n- Added new \"bucket4j\" module to Armeria.\n- Provided solution for issue #2394 in an alternative way as per earlier review feedback by @trustin: \"Provide a separate module armeria-bucket4j which provides an alternative ThrottlingStrategy implementation that exposes bucket4j classes in the public API.\""}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjUxODc2", "url": "https://github.com/line/armeria/pull/2566#pullrequestreview-371651876", "createdAt": "2020-03-10T02:56:49Z", "commit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "state": "COMMENTED", "comments": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMjo1Njo1MFrOFz_7Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMzoxMToyN1rOF0AJdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2OTA1OQ==", "bodyText": "You could use HttpHeaderNames.of() instead.", "url": "https://github.com/line/armeria/pull/2566#discussion_r390069059", "createdAt": "2020-03-10T02:56:50Z", "author": {"login": "trustin"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/common/throttling/ThrottlingHeadersImpl.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.throttling;\n+\n+import com.google.common.base.Ascii;\n+\n+import io.netty.util.AsciiString;\n+\n+final class ThrottlingHeadersImpl implements ThrottlingHeaders {\n+\n+    private static final String LIMIT_SUFFIX = \"-Limit\";\n+    private static final String REMAINING_SUFFIX = \"-Remaining\";\n+    private static final String RESET_SUFFIX = \"-Reset\";\n+\n+    private final AsciiString limitHeader;\n+    private final AsciiString remainingHeader;\n+    private final AsciiString resetHeader;\n+\n+    ThrottlingHeadersImpl(final String scheme) {\n+        limitHeader = createHeaderName(scheme + LIMIT_SUFFIX);\n+        remainingHeader = createHeaderName(scheme + REMAINING_SUFFIX);\n+        resetHeader = createHeaderName(scheme + RESET_SUFFIX);\n+    }\n+\n+    private static AsciiString createHeaderName(String name) {\n+        return AsciiString.cached(Ascii.toLowerCase(name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2OTI2Mg==", "bodyText": "You could remove the Javadoc comments of the overridden methods in this class, because they are identical with those in the interface.", "url": "https://github.com/line/armeria/pull/2566#discussion_r390069262", "createdAt": "2020-03-10T02:57:50Z", "author": {"login": "trustin"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/common/throttling/ThrottlingHeadersImpl.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.throttling;\n+\n+import com.google.common.base.Ascii;\n+\n+import io.netty.util.AsciiString;\n+\n+final class ThrottlingHeadersImpl implements ThrottlingHeaders {\n+\n+    private static final String LIMIT_SUFFIX = \"-Limit\";\n+    private static final String REMAINING_SUFFIX = \"-Remaining\";\n+    private static final String RESET_SUFFIX = \"-Reset\";\n+\n+    private final AsciiString limitHeader;\n+    private final AsciiString remainingHeader;\n+    private final AsciiString resetHeader;\n+\n+    ThrottlingHeadersImpl(final String scheme) {\n+        limitHeader = createHeaderName(scheme + LIMIT_SUFFIX);\n+        remainingHeader = createHeaderName(scheme + REMAINING_SUFFIX);\n+        resetHeader = createHeaderName(scheme + RESET_SUFFIX);\n+    }\n+\n+    private static AsciiString createHeaderName(String name) {\n+        return AsciiString.cached(Ascii.toLowerCase(name));\n+    }\n+\n+    /**\n+     * Returns the name of the \"limit\" throttling header for the given scheme, like \"X-RateLimit-Limit\".\n+     * This header specifies the requests quota for the given time window.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2OTQwNA==", "bodyText": "Maybe useful to have toString()?", "url": "https://github.com/line/armeria/pull/2566#discussion_r390069404", "createdAt": "2020-03-10T02:58:27Z", "author": {"login": "trustin"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/common/throttling/ThrottlingHeadersImpl.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.throttling;\n+\n+import com.google.common.base.Ascii;\n+\n+import io.netty.util.AsciiString;\n+\n+final class ThrottlingHeadersImpl implements ThrottlingHeaders {\n+\n+    private static final String LIMIT_SUFFIX = \"-Limit\";\n+    private static final String REMAINING_SUFFIX = \"-Remaining\";\n+    private static final String RESET_SUFFIX = \"-Reset\";\n+\n+    private final AsciiString limitHeader;\n+    private final AsciiString remainingHeader;\n+    private final AsciiString resetHeader;\n+\n+    ThrottlingHeadersImpl(final String scheme) {\n+        limitHeader = createHeaderName(scheme + LIMIT_SUFFIX);\n+        remainingHeader = createHeaderName(scheme + REMAINING_SUFFIX);\n+        resetHeader = createHeaderName(scheme + RESET_SUFFIX);\n+    }\n+\n+    private static AsciiString createHeaderName(String name) {\n+        return AsciiString.cached(Ascii.toLowerCase(name));\n+    }\n+\n+    /**\n+     * Returns the name of the \"limit\" throttling header for the given scheme, like \"X-RateLimit-Limit\".\n+     * This header specifies the requests quota for the given time window.\n+     */\n+    @Override\n+    public AsciiString limitHeader() {\n+        return limitHeader;\n+    }\n+\n+    /**\n+     * Returns the name of the \"remaining\" throttling header for the given scheme, like \"X-RateLimit-Remaining\".\n+     * This header specifies the remaining requests quota for the current time window.\n+     */\n+    @Override\n+    public AsciiString remainingHeader() {\n+        return remainingHeader;\n+    }\n+\n+    /**\n+     * Returns the name of the \"reset\" throttling header for the given scheme, like \"X-RateLimit-Reset\".\n+     * This header specifies the time remaining in the current window. Its value defined in seconds or\n+     * as a timestamp.\n+     */\n+    @Override\n+    public AsciiString resetHeader() {\n+        return resetHeader;\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MDA0OQ==", "bodyText": "nit: needs one more space after initialSize", "url": "https://github.com/line/armeria/pull/2566#discussion_r390070049", "createdAt": "2020-03-10T02:59:48Z", "author": {"login": "trustin"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/BandwidthLimit.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.github.bucket4j.Bandwidth;\n+import io.github.bucket4j.Refill;\n+\n+/**\n+ * Stores configurations of a single Token-Bucket bandwidth limit.\n+ */\n+public class BandwidthLimit {\n+\n+    private final long limit;\n+    private final long overdraftLimit;\n+    private final long initialSize;\n+    private final Duration period;\n+\n+    BandwidthLimit(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        // validate limit\n+        if (limit <= 0L) {\n+            throw new IllegalArgumentException(\"Bandwidth limit must be positive. Found: \" + limit);\n+        }\n+        this.limit = limit;\n+\n+        // validate overdraftLimit\n+        if (overdraftLimit > 0L && overdraftLimit <= limit) {\n+            throw new IllegalArgumentException(\"Overdraft limit has to exceed bandwidth limit \" + limit +\n+                                               \". Found: \" + overdraftLimit);\n+        }\n+        this.overdraftLimit = overdraftLimit;\n+\n+        // validate initialSize\n+        this.initialSize = initialSize;\n+\n+        requireNonNull(period, \"period\");\n+        if (period.isNegative() || period.isZero()) {\n+            throw new IllegalArgumentException(\"Bandwidth period must be positive. Found: \" + period);\n+        }\n+        this.period = period;\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit          the bucket size - defines the count of tokens which can be held by bucket\n+     *                       and defines the speed at which tokens are regenerated in bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by\n+     *                       bucket, this must exceed the {@code limit}\n+     * @param initialSize   the initial number of tokens for this bandwidth", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MDE1Mw==", "bodyText": "Creates new -> Returns a newly created", "url": "https://github.com/line/armeria/pull/2566#discussion_r390070153", "createdAt": "2020-03-10T03:00:17Z", "author": {"login": "trustin"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/BandwidthLimit.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.github.bucket4j.Bandwidth;\n+import io.github.bucket4j.Refill;\n+\n+/**\n+ * Stores configurations of a single Token-Bucket bandwidth limit.\n+ */\n+public class BandwidthLimit {\n+\n+    private final long limit;\n+    private final long overdraftLimit;\n+    private final long initialSize;\n+    private final Duration period;\n+\n+    BandwidthLimit(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        // validate limit\n+        if (limit <= 0L) {\n+            throw new IllegalArgumentException(\"Bandwidth limit must be positive. Found: \" + limit);\n+        }\n+        this.limit = limit;\n+\n+        // validate overdraftLimit\n+        if (overdraftLimit > 0L && overdraftLimit <= limit) {\n+            throw new IllegalArgumentException(\"Overdraft limit has to exceed bandwidth limit \" + limit +\n+                                               \". Found: \" + overdraftLimit);\n+        }\n+        this.overdraftLimit = overdraftLimit;\n+\n+        // validate initialSize\n+        this.initialSize = initialSize;\n+\n+        requireNonNull(period, \"period\");\n+        if (period.isNegative() || period.isZero()) {\n+            throw new IllegalArgumentException(\"Bandwidth period must be positive. Found: \" + period);\n+        }\n+        this.period = period;\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MDMxOQ==", "bodyText": "Could you move all static factory methods before member field declarations?", "url": "https://github.com/line/armeria/pull/2566#discussion_r390070319", "createdAt": "2020-03-10T03:00:48Z", "author": {"login": "trustin"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/BandwidthLimit.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.github.bucket4j.Bandwidth;\n+import io.github.bucket4j.Refill;\n+\n+/**\n+ * Stores configurations of a single Token-Bucket bandwidth limit.\n+ */\n+public class BandwidthLimit {\n+\n+    private final long limit;\n+    private final long overdraftLimit;\n+    private final long initialSize;\n+    private final Duration period;\n+\n+    BandwidthLimit(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        // validate limit\n+        if (limit <= 0L) {\n+            throw new IllegalArgumentException(\"Bandwidth limit must be positive. Found: \" + limit);\n+        }\n+        this.limit = limit;\n+\n+        // validate overdraftLimit\n+        if (overdraftLimit > 0L && overdraftLimit <= limit) {\n+            throw new IllegalArgumentException(\"Overdraft limit has to exceed bandwidth limit \" + limit +\n+                                               \". Found: \" + overdraftLimit);\n+        }\n+        this.overdraftLimit = overdraftLimit;\n+\n+        // validate initialSize\n+        this.initialSize = initialSize;\n+\n+        requireNonNull(period, \"period\");\n+        if (period.isNegative() || period.isZero()) {\n+            throw new IllegalArgumentException(\"Bandwidth period must be positive. Found: \" + period);\n+        }\n+        this.period = period;\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit          the bucket size - defines the count of tokens which can be held by bucket\n+     *                       and defines the speed at which tokens are regenerated in bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by\n+     *                       bucket, this must exceed the {@code limit}\n+     * @param initialSize   the initial number of tokens for this bandwidth\n+     * @param period         the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, long initialSize, Duration period) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MDgyMg==", "bodyText": "Returns the bucket size, which defines ...\nProbably no need to specify @return tag because summary implies it.", "url": "https://github.com/line/armeria/pull/2566#discussion_r390070822", "createdAt": "2020-03-10T03:02:58Z", "author": {"login": "trustin"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/BandwidthLimit.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.github.bucket4j.Bandwidth;\n+import io.github.bucket4j.Refill;\n+\n+/**\n+ * Stores configurations of a single Token-Bucket bandwidth limit.\n+ */\n+public class BandwidthLimit {\n+\n+    private final long limit;\n+    private final long overdraftLimit;\n+    private final long initialSize;\n+    private final Duration period;\n+\n+    BandwidthLimit(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        // validate limit\n+        if (limit <= 0L) {\n+            throw new IllegalArgumentException(\"Bandwidth limit must be positive. Found: \" + limit);\n+        }\n+        this.limit = limit;\n+\n+        // validate overdraftLimit\n+        if (overdraftLimit > 0L && overdraftLimit <= limit) {\n+            throw new IllegalArgumentException(\"Overdraft limit has to exceed bandwidth limit \" + limit +\n+                                               \". Found: \" + overdraftLimit);\n+        }\n+        this.overdraftLimit = overdraftLimit;\n+\n+        // validate initialSize\n+        this.initialSize = initialSize;\n+\n+        requireNonNull(period, \"period\");\n+        if (period.isNegative() || period.isZero()) {\n+            throw new IllegalArgumentException(\"Bandwidth period must be positive. Found: \" + period);\n+        }\n+        this.period = period;\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit          the bucket size - defines the count of tokens which can be held by bucket\n+     *                       and defines the speed at which tokens are regenerated in bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by\n+     *                       bucket, this must exceed the {@code limit}\n+     * @param initialSize   the initial number of tokens for this bandwidth\n+     * @param period         the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        return new BandwidthLimit(limit, overdraftLimit, initialSize, period);\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit the bucket size - defines the count of tokens which can be held by bucket\n+     *              and defines the speed at which tokens are regenerated in bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by bucket,\n+     *                       this must exceed the {@code limit}\n+     * @param period the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, Duration period) {\n+        return new BandwidthLimit(limit, overdraftLimit, 0L, period);\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}.\n+     * Specifies easy limitation of {@code limit} tokens per {@code period} time window.\n+     * @param limit the bucket size - defines the maximum count of tokens which can be held by bucket\n+     *              and defines the speed at which tokens are regenerated in bucket\n+     * @param period the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, Duration period) {\n+        return new BandwidthLimit(limit, 0L, 0L, period);\n+    }\n+\n+    /**\n+     * Creates a new {@link BandwidthLimit} that computes {@code limit}, {@code overdraftLimit},\n+     * {@code initialSize} and {@code period} from a semicolon-separated {@code specification} string\n+     * that conforms to the following format,\n+     * as per <a href=\"https://tools.ietf.org/id/draft-polli-ratelimit-headers-00.html\">RateLimit Header Scheme for HTTP</a>:\n+     * <pre>{@code\n+     * <limit>;window=<period(in seconds)>[;burst=<overdraftLimit>][;initial=<initialSize>]\n+     * }</pre>\n+     * All {@code specification} string elements must come in the defined order.\n+     * For example:\n+     * <ul>\n+     *   <li>{@code 100;window=60;burst=1000} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize} and {@code period}=60seconds)</li>\n+     *   <li>{@code 100;window=60;burst=1000;initial=20} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize}=20 and {@code period}=60seconds)</li>\n+     *   <li>{@code 5000;window=1} ({@code limit}=5000 and {@code period}=1second)</li>\n+     * </ul>\n+     *\n+     * @param specification the specification used to create a {@link BandwidthLimit}\n+     */\n+    public static BandwidthLimit of(String specification) {\n+        return TokenBucketSpec.parseBandwidthLimit(specification);\n+    }\n+\n+    /**\n+     * The bucket size - defines the count of tokens which can be held by bucket\n+     * and defines the speed at which tokens are regenerated in bucket.\n+     * @return Bucket size.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MDk5OQ==", "bodyText": "Returns the maximum ...\n, this must ... -> . This value always exceeds ...", "url": "https://github.com/line/armeria/pull/2566#discussion_r390070999", "createdAt": "2020-03-10T03:03:40Z", "author": {"login": "trustin"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/BandwidthLimit.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.github.bucket4j.Bandwidth;\n+import io.github.bucket4j.Refill;\n+\n+/**\n+ * Stores configurations of a single Token-Bucket bandwidth limit.\n+ */\n+public class BandwidthLimit {\n+\n+    private final long limit;\n+    private final long overdraftLimit;\n+    private final long initialSize;\n+    private final Duration period;\n+\n+    BandwidthLimit(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        // validate limit\n+        if (limit <= 0L) {\n+            throw new IllegalArgumentException(\"Bandwidth limit must be positive. Found: \" + limit);\n+        }\n+        this.limit = limit;\n+\n+        // validate overdraftLimit\n+        if (overdraftLimit > 0L && overdraftLimit <= limit) {\n+            throw new IllegalArgumentException(\"Overdraft limit has to exceed bandwidth limit \" + limit +\n+                                               \". Found: \" + overdraftLimit);\n+        }\n+        this.overdraftLimit = overdraftLimit;\n+\n+        // validate initialSize\n+        this.initialSize = initialSize;\n+\n+        requireNonNull(period, \"period\");\n+        if (period.isNegative() || period.isZero()) {\n+            throw new IllegalArgumentException(\"Bandwidth period must be positive. Found: \" + period);\n+        }\n+        this.period = period;\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit          the bucket size - defines the count of tokens which can be held by bucket\n+     *                       and defines the speed at which tokens are regenerated in bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by\n+     *                       bucket, this must exceed the {@code limit}\n+     * @param initialSize   the initial number of tokens for this bandwidth\n+     * @param period         the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        return new BandwidthLimit(limit, overdraftLimit, initialSize, period);\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit the bucket size - defines the count of tokens which can be held by bucket\n+     *              and defines the speed at which tokens are regenerated in bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by bucket,\n+     *                       this must exceed the {@code limit}\n+     * @param period the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, Duration period) {\n+        return new BandwidthLimit(limit, overdraftLimit, 0L, period);\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}.\n+     * Specifies easy limitation of {@code limit} tokens per {@code period} time window.\n+     * @param limit the bucket size - defines the maximum count of tokens which can be held by bucket\n+     *              and defines the speed at which tokens are regenerated in bucket\n+     * @param period the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, Duration period) {\n+        return new BandwidthLimit(limit, 0L, 0L, period);\n+    }\n+\n+    /**\n+     * Creates a new {@link BandwidthLimit} that computes {@code limit}, {@code overdraftLimit},\n+     * {@code initialSize} and {@code period} from a semicolon-separated {@code specification} string\n+     * that conforms to the following format,\n+     * as per <a href=\"https://tools.ietf.org/id/draft-polli-ratelimit-headers-00.html\">RateLimit Header Scheme for HTTP</a>:\n+     * <pre>{@code\n+     * <limit>;window=<period(in seconds)>[;burst=<overdraftLimit>][;initial=<initialSize>]\n+     * }</pre>\n+     * All {@code specification} string elements must come in the defined order.\n+     * For example:\n+     * <ul>\n+     *   <li>{@code 100;window=60;burst=1000} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize} and {@code period}=60seconds)</li>\n+     *   <li>{@code 100;window=60;burst=1000;initial=20} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize}=20 and {@code period}=60seconds)</li>\n+     *   <li>{@code 5000;window=1} ({@code limit}=5000 and {@code period}=1second)</li>\n+     * </ul>\n+     *\n+     * @param specification the specification used to create a {@link BandwidthLimit}\n+     */\n+    public static BandwidthLimit of(String specification) {\n+        return TokenBucketSpec.parseBandwidthLimit(specification);\n+    }\n+\n+    /**\n+     * The bucket size - defines the count of tokens which can be held by bucket\n+     * and defines the speed at which tokens are regenerated in bucket.\n+     * @return Bucket size.\n+     */\n+    public long limit() {\n+        return limit;\n+    }\n+\n+    /**\n+     * The maximum overdraft count of tokens which can be held by bucket,\n+     * this must exceed the {@code BandwidthLimit#limit()}.\n+     * @return Bucket maximum overdraft count.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTE2Mw==", "bodyText": "Returns the number of initial tokens in the bandwidth. By default, newly created ....\nfor example for case -> for example, for the case", "url": "https://github.com/line/armeria/pull/2566#discussion_r390071163", "createdAt": "2020-03-10T03:04:23Z", "author": {"login": "trustin"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/BandwidthLimit.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.github.bucket4j.Bandwidth;\n+import io.github.bucket4j.Refill;\n+\n+/**\n+ * Stores configurations of a single Token-Bucket bandwidth limit.\n+ */\n+public class BandwidthLimit {\n+\n+    private final long limit;\n+    private final long overdraftLimit;\n+    private final long initialSize;\n+    private final Duration period;\n+\n+    BandwidthLimit(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        // validate limit\n+        if (limit <= 0L) {\n+            throw new IllegalArgumentException(\"Bandwidth limit must be positive. Found: \" + limit);\n+        }\n+        this.limit = limit;\n+\n+        // validate overdraftLimit\n+        if (overdraftLimit > 0L && overdraftLimit <= limit) {\n+            throw new IllegalArgumentException(\"Overdraft limit has to exceed bandwidth limit \" + limit +\n+                                               \". Found: \" + overdraftLimit);\n+        }\n+        this.overdraftLimit = overdraftLimit;\n+\n+        // validate initialSize\n+        this.initialSize = initialSize;\n+\n+        requireNonNull(period, \"period\");\n+        if (period.isNegative() || period.isZero()) {\n+            throw new IllegalArgumentException(\"Bandwidth period must be positive. Found: \" + period);\n+        }\n+        this.period = period;\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit          the bucket size - defines the count of tokens which can be held by bucket\n+     *                       and defines the speed at which tokens are regenerated in bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by\n+     *                       bucket, this must exceed the {@code limit}\n+     * @param initialSize   the initial number of tokens for this bandwidth\n+     * @param period         the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        return new BandwidthLimit(limit, overdraftLimit, initialSize, period);\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit the bucket size - defines the count of tokens which can be held by bucket\n+     *              and defines the speed at which tokens are regenerated in bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by bucket,\n+     *                       this must exceed the {@code limit}\n+     * @param period the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, Duration period) {\n+        return new BandwidthLimit(limit, overdraftLimit, 0L, period);\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}.\n+     * Specifies easy limitation of {@code limit} tokens per {@code period} time window.\n+     * @param limit the bucket size - defines the maximum count of tokens which can be held by bucket\n+     *              and defines the speed at which tokens are regenerated in bucket\n+     * @param period the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, Duration period) {\n+        return new BandwidthLimit(limit, 0L, 0L, period);\n+    }\n+\n+    /**\n+     * Creates a new {@link BandwidthLimit} that computes {@code limit}, {@code overdraftLimit},\n+     * {@code initialSize} and {@code period} from a semicolon-separated {@code specification} string\n+     * that conforms to the following format,\n+     * as per <a href=\"https://tools.ietf.org/id/draft-polli-ratelimit-headers-00.html\">RateLimit Header Scheme for HTTP</a>:\n+     * <pre>{@code\n+     * <limit>;window=<period(in seconds)>[;burst=<overdraftLimit>][;initial=<initialSize>]\n+     * }</pre>\n+     * All {@code specification} string elements must come in the defined order.\n+     * For example:\n+     * <ul>\n+     *   <li>{@code 100;window=60;burst=1000} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize} and {@code period}=60seconds)</li>\n+     *   <li>{@code 100;window=60;burst=1000;initial=20} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize}=20 and {@code period}=60seconds)</li>\n+     *   <li>{@code 5000;window=1} ({@code limit}=5000 and {@code period}=1second)</li>\n+     * </ul>\n+     *\n+     * @param specification the specification used to create a {@link BandwidthLimit}\n+     */\n+    public static BandwidthLimit of(String specification) {\n+        return TokenBucketSpec.parseBandwidthLimit(specification);\n+    }\n+\n+    /**\n+     * The bucket size - defines the count of tokens which can be held by bucket\n+     * and defines the speed at which tokens are regenerated in bucket.\n+     * @return Bucket size.\n+     */\n+    public long limit() {\n+        return limit;\n+    }\n+\n+    /**\n+     * The maximum overdraft count of tokens which can be held by bucket,\n+     * this must exceed the {@code BandwidthLimit#limit()}.\n+     * @return Bucket maximum overdraft count.\n+     */\n+    public long overdraftLimit() {\n+        return overdraftLimit;\n+    }\n+\n+    /**\n+     * By default new created bandwidth has amount tokens that equals its capacity.\n+     * The initial limit allows having lesser initial size, for example for case of cold start\n+     * in order to prevent denial of service.\n+     *\n+     * @return the number of initial tokens in the bandwidth.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTIyMQ==", "bodyText": "Returns the time window during which ...", "url": "https://github.com/line/armeria/pull/2566#discussion_r390071221", "createdAt": "2020-03-10T03:04:41Z", "author": {"login": "trustin"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/BandwidthLimit.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.github.bucket4j.Bandwidth;\n+import io.github.bucket4j.Refill;\n+\n+/**\n+ * Stores configurations of a single Token-Bucket bandwidth limit.\n+ */\n+public class BandwidthLimit {\n+\n+    private final long limit;\n+    private final long overdraftLimit;\n+    private final long initialSize;\n+    private final Duration period;\n+\n+    BandwidthLimit(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        // validate limit\n+        if (limit <= 0L) {\n+            throw new IllegalArgumentException(\"Bandwidth limit must be positive. Found: \" + limit);\n+        }\n+        this.limit = limit;\n+\n+        // validate overdraftLimit\n+        if (overdraftLimit > 0L && overdraftLimit <= limit) {\n+            throw new IllegalArgumentException(\"Overdraft limit has to exceed bandwidth limit \" + limit +\n+                                               \". Found: \" + overdraftLimit);\n+        }\n+        this.overdraftLimit = overdraftLimit;\n+\n+        // validate initialSize\n+        this.initialSize = initialSize;\n+\n+        requireNonNull(period, \"period\");\n+        if (period.isNegative() || period.isZero()) {\n+            throw new IllegalArgumentException(\"Bandwidth period must be positive. Found: \" + period);\n+        }\n+        this.period = period;\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit          the bucket size - defines the count of tokens which can be held by bucket\n+     *                       and defines the speed at which tokens are regenerated in bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by\n+     *                       bucket, this must exceed the {@code limit}\n+     * @param initialSize   the initial number of tokens for this bandwidth\n+     * @param period         the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        return new BandwidthLimit(limit, overdraftLimit, initialSize, period);\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit the bucket size - defines the count of tokens which can be held by bucket\n+     *              and defines the speed at which tokens are regenerated in bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by bucket,\n+     *                       this must exceed the {@code limit}\n+     * @param period the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, Duration period) {\n+        return new BandwidthLimit(limit, overdraftLimit, 0L, period);\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}.\n+     * Specifies easy limitation of {@code limit} tokens per {@code period} time window.\n+     * @param limit the bucket size - defines the maximum count of tokens which can be held by bucket\n+     *              and defines the speed at which tokens are regenerated in bucket\n+     * @param period the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, Duration period) {\n+        return new BandwidthLimit(limit, 0L, 0L, period);\n+    }\n+\n+    /**\n+     * Creates a new {@link BandwidthLimit} that computes {@code limit}, {@code overdraftLimit},\n+     * {@code initialSize} and {@code period} from a semicolon-separated {@code specification} string\n+     * that conforms to the following format,\n+     * as per <a href=\"https://tools.ietf.org/id/draft-polli-ratelimit-headers-00.html\">RateLimit Header Scheme for HTTP</a>:\n+     * <pre>{@code\n+     * <limit>;window=<period(in seconds)>[;burst=<overdraftLimit>][;initial=<initialSize>]\n+     * }</pre>\n+     * All {@code specification} string elements must come in the defined order.\n+     * For example:\n+     * <ul>\n+     *   <li>{@code 100;window=60;burst=1000} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize} and {@code period}=60seconds)</li>\n+     *   <li>{@code 100;window=60;burst=1000;initial=20} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize}=20 and {@code period}=60seconds)</li>\n+     *   <li>{@code 5000;window=1} ({@code limit}=5000 and {@code period}=1second)</li>\n+     * </ul>\n+     *\n+     * @param specification the specification used to create a {@link BandwidthLimit}\n+     */\n+    public static BandwidthLimit of(String specification) {\n+        return TokenBucketSpec.parseBandwidthLimit(specification);\n+    }\n+\n+    /**\n+     * The bucket size - defines the count of tokens which can be held by bucket\n+     * and defines the speed at which tokens are regenerated in bucket.\n+     * @return Bucket size.\n+     */\n+    public long limit() {\n+        return limit;\n+    }\n+\n+    /**\n+     * The maximum overdraft count of tokens which can be held by bucket,\n+     * this must exceed the {@code BandwidthLimit#limit()}.\n+     * @return Bucket maximum overdraft count.\n+     */\n+    public long overdraftLimit() {\n+        return overdraftLimit;\n+    }\n+\n+    /**\n+     * By default new created bandwidth has amount tokens that equals its capacity.\n+     * The initial limit allows having lesser initial size, for example for case of cold start\n+     * in order to prevent denial of service.\n+     *\n+     * @return the number of initial tokens in the bandwidth.\n+     */\n+    public long initialSize() {\n+        return initialSize;\n+    }\n+\n+    /**\n+     * The time window, during which the tokens will be regenerated.\n+     * @return Time window for the limit.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTI3MQ==", "bodyText": "Constructs a new", "url": "https://github.com/line/armeria/pull/2566#discussion_r390071271", "createdAt": "2020-03-10T03:04:54Z", "author": {"login": "trustin"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/BandwidthLimit.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.github.bucket4j.Bandwidth;\n+import io.github.bucket4j.Refill;\n+\n+/**\n+ * Stores configurations of a single Token-Bucket bandwidth limit.\n+ */\n+public class BandwidthLimit {\n+\n+    private final long limit;\n+    private final long overdraftLimit;\n+    private final long initialSize;\n+    private final Duration period;\n+\n+    BandwidthLimit(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        // validate limit\n+        if (limit <= 0L) {\n+            throw new IllegalArgumentException(\"Bandwidth limit must be positive. Found: \" + limit);\n+        }\n+        this.limit = limit;\n+\n+        // validate overdraftLimit\n+        if (overdraftLimit > 0L && overdraftLimit <= limit) {\n+            throw new IllegalArgumentException(\"Overdraft limit has to exceed bandwidth limit \" + limit +\n+                                               \". Found: \" + overdraftLimit);\n+        }\n+        this.overdraftLimit = overdraftLimit;\n+\n+        // validate initialSize\n+        this.initialSize = initialSize;\n+\n+        requireNonNull(period, \"period\");\n+        if (period.isNegative() || period.isZero()) {\n+            throw new IllegalArgumentException(\"Bandwidth period must be positive. Found: \" + period);\n+        }\n+        this.period = period;\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit          the bucket size - defines the count of tokens which can be held by bucket\n+     *                       and defines the speed at which tokens are regenerated in bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by\n+     *                       bucket, this must exceed the {@code limit}\n+     * @param initialSize   the initial number of tokens for this bandwidth\n+     * @param period         the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        return new BandwidthLimit(limit, overdraftLimit, initialSize, period);\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit the bucket size - defines the count of tokens which can be held by bucket\n+     *              and defines the speed at which tokens are regenerated in bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by bucket,\n+     *                       this must exceed the {@code limit}\n+     * @param period the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, Duration period) {\n+        return new BandwidthLimit(limit, overdraftLimit, 0L, period);\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}.\n+     * Specifies easy limitation of {@code limit} tokens per {@code period} time window.\n+     * @param limit the bucket size - defines the maximum count of tokens which can be held by bucket\n+     *              and defines the speed at which tokens are regenerated in bucket\n+     * @param period the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, Duration period) {\n+        return new BandwidthLimit(limit, 0L, 0L, period);\n+    }\n+\n+    /**\n+     * Creates a new {@link BandwidthLimit} that computes {@code limit}, {@code overdraftLimit},\n+     * {@code initialSize} and {@code period} from a semicolon-separated {@code specification} string\n+     * that conforms to the following format,\n+     * as per <a href=\"https://tools.ietf.org/id/draft-polli-ratelimit-headers-00.html\">RateLimit Header Scheme for HTTP</a>:\n+     * <pre>{@code\n+     * <limit>;window=<period(in seconds)>[;burst=<overdraftLimit>][;initial=<initialSize>]\n+     * }</pre>\n+     * All {@code specification} string elements must come in the defined order.\n+     * For example:\n+     * <ul>\n+     *   <li>{@code 100;window=60;burst=1000} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize} and {@code period}=60seconds)</li>\n+     *   <li>{@code 100;window=60;burst=1000;initial=20} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize}=20 and {@code period}=60seconds)</li>\n+     *   <li>{@code 5000;window=1} ({@code limit}=5000 and {@code period}=1second)</li>\n+     * </ul>\n+     *\n+     * @param specification the specification used to create a {@link BandwidthLimit}\n+     */\n+    public static BandwidthLimit of(String specification) {\n+        return TokenBucketSpec.parseBandwidthLimit(specification);\n+    }\n+\n+    /**\n+     * The bucket size - defines the count of tokens which can be held by bucket\n+     * and defines the speed at which tokens are regenerated in bucket.\n+     * @return Bucket size.\n+     */\n+    public long limit() {\n+        return limit;\n+    }\n+\n+    /**\n+     * The maximum overdraft count of tokens which can be held by bucket,\n+     * this must exceed the {@code BandwidthLimit#limit()}.\n+     * @return Bucket maximum overdraft count.\n+     */\n+    public long overdraftLimit() {\n+        return overdraftLimit;\n+    }\n+\n+    /**\n+     * By default new created bandwidth has amount tokens that equals its capacity.\n+     * The initial limit allows having lesser initial size, for example for case of cold start\n+     * in order to prevent denial of service.\n+     *\n+     * @return the number of initial tokens in the bandwidth.\n+     */\n+    public long initialSize() {\n+        return initialSize;\n+    }\n+\n+    /**\n+     * The time window, during which the tokens will be regenerated.\n+     * @return Time window for the limit.\n+     */\n+    public Duration period() {\n+        return period;\n+    }\n+\n+    /**\n+     * Constructs new {@link Bandwidth}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTQ2Mw==", "bodyText": "Ditto - please move the static factory methods up.", "url": "https://github.com/line/armeria/pull/2566#discussion_r390071463", "createdAt": "2020-03-10T03:05:43Z", "author": {"login": "trustin"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/TokenBucket.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * Stores configuration of the Token-Bucket algorithm, comprised of multiple limits.\n+ */\n+public class TokenBucket {\n+\n+    @Nonnull\n+    private final BandwidthLimit[] limits;\n+\n+    /**\n+     * Defines throttling configuration comprised of zero or more bandwidth limits in accordance to\n+     * token-bucket algorithm.\n+     *\n+     * <h3>Multiple bandwidths:</h3>\n+     * It is possible to specify more than one bandwidth per bucket, and bucket will handle all bandwidth in\n+     * strongly atomic way. Strongly atomic means that token will be consumed from all bandwidth or from\n+     * nothing, in other words any token can not be partially consumed.\n+     * <br> Example of multiple bandwidth:\n+     * <pre>{@code\n+     * // Adds bandwidth that restricts to consume\n+     * // not often than 1000 tokens per 1 minute and\n+     * // not often than 100 tokens per second.\n+     * TokenBucketConfig config = TokenBucketConfig.builder()\n+     *      .limit(1000L, Duration.ofMinutes(1))\n+     *      .limit(100L, Duration.ofSeconds(1))\n+     *      .build()\n+     * }</pre>\n+     *\n+     * @param limits one or more bandwidth limits to be used by token-bucket algorithm\n+     */\n+    TokenBucket(@Nonnull BandwidthLimit... limits) {\n+        this.limits = requireNonNull(limits, \"limits\");\n+    }\n+\n+    /**\n+     * Creates a new {@link TokenBucketBuilder} using a builder.\n+     */\n+    public static TokenBucketBuilder builder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTUwNQ==", "bodyText": "final?", "url": "https://github.com/line/armeria/pull/2566#discussion_r390071505", "createdAt": "2020-03-10T03:05:59Z", "author": {"login": "trustin"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/TokenBucket.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * Stores configuration of the Token-Bucket algorithm, comprised of multiple limits.\n+ */\n+public class TokenBucket {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTU0Nw==", "bodyText": "final?", "url": "https://github.com/line/armeria/pull/2566#discussion_r390071547", "createdAt": "2020-03-10T03:06:11Z", "author": {"login": "trustin"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/TokenBucketBuilder.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Builds a {@link TokenBucket} instance.\n+ */\n+public class TokenBucketBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTc2OA==", "bodyText": "Could we use ImmutableList.Builder<BandwithLimit> instead?", "url": "https://github.com/line/armeria/pull/2566#discussion_r390071768", "createdAt": "2020-03-10T03:06:55Z", "author": {"login": "trustin"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/TokenBucketBuilder.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Builds a {@link TokenBucket} instance.\n+ */\n+public class TokenBucketBuilder {\n+    private static final BandwidthLimit[] NO_BANDWIDTH_LIMITS = {};\n+\n+    private List<BandwidthLimit> limits = Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTg0NA==", "bodyText": "ImmutableList.copyOf(limits)?", "url": "https://github.com/line/armeria/pull/2566#discussion_r390071844", "createdAt": "2020-03-10T03:07:14Z", "author": {"login": "trustin"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/TokenBucketBuilder.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Builds a {@link TokenBucket} instance.\n+ */\n+public class TokenBucketBuilder {\n+    private static final BandwidthLimit[] NO_BANDWIDTH_LIMITS = {};\n+\n+    private List<BandwidthLimit> limits = Collections.emptyList();\n+\n+    TokenBucketBuilder() {} // prevent public access\n+\n+    /**\n+     * Adds a number of {@link BandwidthLimit}.\n+     */\n+    public TokenBucketBuilder limits(BandwidthLimit... limits) {\n+        requireNonNull(limits, \"limits\");\n+        return limits(Arrays.asList(limits));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTkzMw==", "bodyText": "No need to do this once we switch to ImmutableList.builder()", "url": "https://github.com/line/armeria/pull/2566#discussion_r390071933", "createdAt": "2020-03-10T03:07:41Z", "author": {"login": "trustin"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/TokenBucketBuilder.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Builds a {@link TokenBucket} instance.\n+ */\n+public class TokenBucketBuilder {\n+    private static final BandwidthLimit[] NO_BANDWIDTH_LIMITS = {};\n+\n+    private List<BandwidthLimit> limits = Collections.emptyList();\n+\n+    TokenBucketBuilder() {} // prevent public access\n+\n+    /**\n+     * Adds a number of {@link BandwidthLimit}.\n+     */\n+    public TokenBucketBuilder limits(BandwidthLimit... limits) {\n+        requireNonNull(limits, \"limits\");\n+        return limits(Arrays.asList(limits));\n+    }\n+\n+    /**\n+     * Adds a number of {@link BandwidthLimit}.\n+     */\n+    public TokenBucketBuilder limits(Iterable<? extends BandwidthLimit> limits) {\n+        requireNonNull(limits, \"limits\");\n+        if (this.limits.isEmpty()) {\n+            this.limits = new ArrayList<>(2);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjA5NQ==", "bodyText": "Question: Would it make sense to add of(long limit) as well?", "url": "https://github.com/line/armeria/pull/2566#discussion_r390072095", "createdAt": "2020-03-10T03:08:28Z", "author": {"login": "trustin"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/TokenBucket.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * Stores configuration of the Token-Bucket algorithm, comprised of multiple limits.\n+ */\n+public class TokenBucket {\n+\n+    @Nonnull\n+    private final BandwidthLimit[] limits;\n+\n+    /**\n+     * Defines throttling configuration comprised of zero or more bandwidth limits in accordance to\n+     * token-bucket algorithm.\n+     *\n+     * <h3>Multiple bandwidths:</h3>\n+     * It is possible to specify more than one bandwidth per bucket, and bucket will handle all bandwidth in\n+     * strongly atomic way. Strongly atomic means that token will be consumed from all bandwidth or from\n+     * nothing, in other words any token can not be partially consumed.\n+     * <br> Example of multiple bandwidth:\n+     * <pre>{@code\n+     * // Adds bandwidth that restricts to consume\n+     * // not often than 1000 tokens per 1 minute and\n+     * // not often than 100 tokens per second.\n+     * TokenBucketConfig config = TokenBucketConfig.builder()\n+     *      .limit(1000L, Duration.ofMinutes(1))\n+     *      .limit(100L, Duration.ofSeconds(1))\n+     *      .build()\n+     * }</pre>\n+     *\n+     * @param limits one or more bandwidth limits to be used by token-bucket algorithm\n+     */\n+    TokenBucket(@Nonnull BandwidthLimit... limits) {\n+        this.limits = requireNonNull(limits, \"limits\");\n+    }\n+\n+    /**\n+     * Creates a new {@link TokenBucketBuilder} using a builder.\n+     */\n+    public static TokenBucketBuilder builder() {\n+        return new TokenBucketBuilder();\n+    }\n+\n+    /**\n+     * Creates a new {@link TokenBucket} from a comma-separated {@code specification} string\n+     * that conforms to the following format,\n+     * as per <a href=\"https://tools.ietf.org/id/draft-polli-ratelimit-headers-00.html\">RateLimit Header Scheme for HTTP</a>:\n+     * <pre>{@code\n+     * <bandwidth limit 1>[, <bandwidth limit 2>[, etc.]]\n+     * }</pre>\n+     * The order of elements inside {@code specification} is not defined.\n+     * For example:\n+     * <ul>\n+     *   <li>{@code 100;window=60;burst=1000, 50000;window=3600}</li>\n+     * </ul>\n+     *\n+     * @param specification the specification used to create a {@link BandwidthLimit}\n+     * @see TokenBucketSpec#parseTokenBucket(String)\n+     */\n+    public static TokenBucket of(String specification) {\n+        return TokenBucketSpec.parseTokenBucket(specification);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjMyMg==", "bodyText": "final?", "url": "https://github.com/line/armeria/pull/2566#discussion_r390072322", "createdAt": "2020-03-10T03:09:37Z", "author": {"login": "trustin"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/TokenBucketThrottlingStrategy.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.throttling.ThrottlingHeaders;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.throttling.ThrottlingStrategy;\n+\n+import io.github.bucket4j.AsyncBucket;\n+import io.github.bucket4j.Bucket4j;\n+import io.github.bucket4j.ConfigurationBuilder;\n+import io.github.bucket4j.local.LocalBucketBuilder;\n+\n+/**\n+ * A {@link ThrottlingStrategy} that provides a throttling strategy based on Token-Bucket algorithm.\n+ * The throttling works by examining the number of requests from the beginning, and\n+ * throttling if the request rate exceed the configured bucket limits.\n+ */\n+public class TokenBucketThrottlingStrategy<T extends Request> extends ThrottlingStrategy<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjM2Nw==", "bodyText": "final?", "url": "https://github.com/line/armeria/pull/2566#discussion_r390072367", "createdAt": "2020-03-10T03:09:51Z", "author": {"login": "trustin"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/TokenBucketThrottlingStrategyBuilder.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.throttling.ThrottlingHeaders;\n+\n+/**\n+ * Builds {@link TokenBucketThrottlingStrategy}.\n+ */\n+public class TokenBucketThrottlingStrategyBuilder<T extends Request> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjQ4Mw==", "bodyText": "How about bucket4j instead of tokenbucket?", "url": "https://github.com/line/armeria/pull/2566#discussion_r390072483", "createdAt": "2020-03-10T03:10:21Z", "author": {"login": "trustin"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/package-info.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Rate-limiting throttling implementation based on\n+ * <a href=\"https://en.wikipedia.org/wiki/Token_bucket\">Token-Bucket</a> algorithm\n+ * and <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j\">Bucket4j</a> library.\n+ *\n+ */\n+@NonNullByDefault\n+package com.linecorp.armeria.server.throttling.tokenbucket;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjU0NA==", "bodyText": "public is not necessary for test classes and methods.", "url": "https://github.com/line/armeria/pull/2566#discussion_r390072544", "createdAt": "2020-03-10T03:10:41Z", "author": {"login": "trustin"}, "path": "bucket4j/src/test/java/com/linecorp/armeria/server/throttling/tokenbucket/BandwidthLimitTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.time.Duration;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import io.github.bucket4j.Bandwidth;\n+\n+public class BandwidthLimitTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjU5MA==", "bodyText": "Cruft?", "url": "https://github.com/line/armeria/pull/2566#discussion_r390072590", "createdAt": "2020-03-10T03:10:52Z", "author": {"login": "trustin"}, "path": "bucket4j/src/test/java/com/linecorp/armeria/server/throttling/tokenbucket/BandwidthLimitTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.time.Duration;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import io.github.bucket4j.Bandwidth;\n+\n+public class BandwidthLimitTest {\n+\n+    @Test\n+    public void testConstructor() {\n+        final BandwidthLimit bl1 = BandwidthLimit.of(100L, 1000L, 50L, Duration.ofSeconds(60L));\n+        System.out.println(bl1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjY5NQ==", "bodyText": "Could we use Assert4J instead of JUnit assertions? e.g.\nassertThat(bl1.limit()).isEqualTo(100L);", "url": "https://github.com/line/armeria/pull/2566#discussion_r390072695", "createdAt": "2020-03-10T03:11:27Z", "author": {"login": "trustin"}, "path": "bucket4j/src/test/java/com/linecorp/armeria/server/throttling/tokenbucket/BandwidthLimitTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.time.Duration;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import io.github.bucket4j.Bandwidth;\n+\n+public class BandwidthLimitTest {\n+\n+    @Test\n+    public void testConstructor() {\n+        final BandwidthLimit bl1 = BandwidthLimit.of(100L, 1000L, 50L, Duration.ofSeconds(60L));\n+        System.out.println(bl1);\n+        assertEquals(100L, bl1.limit());\n+        assertEquals(1000L, bl1.overdraftLimit());\n+        assertEquals(50L, bl1.initialSize());\n+        assertEquals(Duration.ofSeconds(60L), bl1.period());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "233bb09360eadb96a996365f28da58ea5b98333f"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3d12a9fe17591b9044abb296e3cdd31bf6a4eea", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/a3d12a9fe17591b9044abb296e3cdd31bf6a4eea", "committedDate": "2020-03-10T12:17:21Z", "message": "Review comments by @trustin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxOTUyNzE2", "url": "https://github.com/line/armeria/pull/2566#pullrequestreview-371952716", "createdAt": "2020-03-10T13:33:15Z", "commit": {"oid": "a3d12a9fe17591b9044abb296e3cdd31bf6a4eea"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzozMzoxNVrOF0O5Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzozODo1OVrOF0PIGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxNDMzMQ==", "bodyText": "I guess you can just inline createHeaderName now that it's just a single call.", "url": "https://github.com/line/armeria/pull/2566#discussion_r390314331", "createdAt": "2020-03-10T13:33:15Z", "author": {"login": "trustin"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/common/throttling/ThrottlingHeadersImpl.java", "diffHunk": "@@ -37,32 +37,19 @@\n     }\n \n     private static AsciiString createHeaderName(String name) {\n-        return AsciiString.cached(Ascii.toLowerCase(name));\n+        return HttpHeaderNames.of(name);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d12a9fe17591b9044abb296e3cdd31bf6a4eea"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxNjk2Mw==", "bodyText": "assertThatThrownBy(() -> BandwidthLimit.of(...))\n        .isInstanceOf(IllegalArgumentException.class)\n        .hasMessageContaining(\"Bandwidth limit must be ...\");", "url": "https://github.com/line/armeria/pull/2566#discussion_r390316963", "createdAt": "2020-03-10T13:37:15Z", "author": {"login": "trustin"}, "path": "bucket4j/src/test/java/com/linecorp/armeria/server/throttling/tokenbucket/BandwidthLimitTest.java", "diffHunk": "@@ -16,182 +16,166 @@\n \n package com.linecorp.armeria.server.throttling.tokenbucket;\n \n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n import java.time.Duration;\n \n import org.junit.jupiter.api.Test;\n \n import io.github.bucket4j.Bandwidth;\n \n-public class BandwidthLimitTest {\n+class BandwidthLimitTest {\n \n     @Test\n-    public void testConstructor() {\n+    void testConstructor() {\n         final BandwidthLimit bl1 = BandwidthLimit.of(100L, 1000L, 50L, Duration.ofSeconds(60L));\n-        System.out.println(bl1);\n-        assertEquals(100L, bl1.limit());\n-        assertEquals(1000L, bl1.overdraftLimit());\n-        assertEquals(50L, bl1.initialSize());\n-        assertEquals(Duration.ofSeconds(60L), bl1.period());\n-        assertEquals(\"100;window=60;burst=1000\", bl1.toSpecString());\n+        assertThat(bl1.limit()).isEqualTo(100L);\n+        assertThat(bl1.overdraftLimit()).isEqualTo(1000L);\n+        assertThat(bl1.initialSize()).isEqualTo(50L);\n+        assertThat(bl1.period()).isEqualTo(Duration.ofSeconds(60L));\n+        assertThat(bl1.toSpecString()).isEqualTo(\"100;window=60;burst=1000\");\n         final Bandwidth b1 = bl1.bandwidth();\n-        System.out.println(b1);\n-        assertEquals(1000L, b1.getCapacity());\n-        assertEquals(100L, b1.getRefillTokens());\n-        assertEquals(50L, b1.getInitialTokens());\n-        assertEquals(Duration.ofSeconds(60L).toNanos(), b1.getRefillPeriodNanos());\n+        assertThat(b1.getCapacity()).isEqualTo(1000L);\n+        assertThat(b1.getRefillTokens()).isEqualTo(100L);\n+        assertThat(b1.getInitialTokens()).isEqualTo(50L);\n+        assertThat(b1.getRefillPeriodNanos()).isEqualTo(Duration.ofSeconds(60L).toNanos());\n \n         final BandwidthLimit bl2 = BandwidthLimit.of(100L, 1000L, Duration.ofSeconds(60L));\n-        System.out.println(bl2);\n-        assertEquals(100L, bl2.limit());\n-        assertEquals(1000L, bl2.overdraftLimit());\n-        assertEquals(0L, bl2.initialSize());\n-        assertEquals(Duration.ofSeconds(60L), bl2.period());\n-        assertEquals(\"100;window=60;burst=1000\", bl2.toSpecString());\n+        assertThat(bl2.limit()).isEqualTo(100L);\n+        assertThat(bl2.overdraftLimit()).isEqualTo(1000L);\n+        assertThat(bl2.initialSize()).isEqualTo(0L);\n+        assertThat(bl2.period()).isEqualTo(Duration.ofSeconds(60L));\n+        assertThat(bl2.toSpecString()).isEqualTo(\"100;window=60;burst=1000\");\n         final Bandwidth b2 = bl2.bandwidth();\n-        System.out.println(b2);\n-        assertEquals(1000L, b2.getCapacity());\n-        assertEquals(100L, b2.getRefillTokens());\n-        assertEquals(100L, b2.getInitialTokens());\n-        assertEquals(Duration.ofSeconds(60L).toNanos(), b2.getRefillPeriodNanos());\n+        assertThat(b2.getCapacity()).isEqualTo(1000L);\n+        assertThat(b2.getRefillTokens()).isEqualTo(100L);\n+        assertThat(b2.getInitialTokens()).isEqualTo(100L);\n+        assertThat(b2.getRefillPeriodNanos()).isEqualTo(Duration.ofSeconds(60L).toNanos());\n \n         final BandwidthLimit bl3 = BandwidthLimit.of(100L, Duration.ofSeconds(60L));\n-        System.out.println(bl3);\n-        assertEquals(100L, bl3.limit());\n-        assertEquals(0L, bl3.overdraftLimit());\n-        assertEquals(0L, bl3.initialSize());\n-        assertEquals(Duration.ofSeconds(60L), bl3.period());\n-        assertEquals(\"100;window=60\", bl3.toSpecString());\n+        assertThat(bl3.limit()).isEqualTo(100L);\n+        assertThat(bl3.overdraftLimit()).isEqualTo(0L);\n+        assertThat(bl3.initialSize()).isEqualTo(0L);\n+        assertThat(bl3.period()).isEqualTo(Duration.ofSeconds(60L));\n+        assertThat(bl3.toSpecString()).isEqualTo(\"100;window=60\");\n         final Bandwidth b3 = bl3.bandwidth();\n-        System.out.println(b3);\n-        assertEquals(100L, b3.getCapacity());\n-        assertEquals(100L, b3.getRefillTokens());\n-        assertEquals(100L, b3.getInitialTokens());\n-        assertEquals(Duration.ofSeconds(60L).toNanos(), b3.getRefillPeriodNanos());\n+        assertThat(b3.getCapacity()).isEqualTo(100L);\n+        assertThat(b3.getRefillTokens()).isEqualTo(100L);\n+        assertThat(b3.getInitialTokens()).isEqualTo(100L);\n+        assertThat(b3.getRefillPeriodNanos()).isEqualTo(Duration.ofSeconds(60L).toNanos());\n \n         final BandwidthLimit bl4 = BandwidthLimit.of(100L, 0L, Duration.ofSeconds(60L));\n-        System.out.println(bl4);\n-        assertEquals(100L, bl4.limit());\n-        assertEquals(0L, bl4.overdraftLimit());\n-        assertEquals(0L, bl4.initialSize());\n-        assertEquals(Duration.ofSeconds(60L), bl4.period());\n-        assertEquals(\"100;window=60\", bl4.toSpecString());\n+        assertThat(bl4.limit()).isEqualTo(100L);\n+        assertThat(bl4.overdraftLimit()).isEqualTo(0L);\n+        assertThat(bl4.initialSize()).isEqualTo(0L);\n+        assertThat(bl4.period()).isEqualTo(Duration.ofSeconds(60L));\n+        assertThat(bl4.toSpecString()).isEqualTo(\"100;window=60\");\n         final Bandwidth b4 = bl4.bandwidth();\n-        System.out.println(b4);\n-        assertEquals(100L, b4.getCapacity());\n-        assertEquals(100L, b4.getRefillTokens());\n-        assertEquals(100L, b4.getInitialTokens());\n-        assertEquals(Duration.ofSeconds(60L).toNanos(), b4.getRefillPeriodNanos());\n+        assertThat(b4.getCapacity()).isEqualTo(100L);\n+        assertThat(b4.getRefillTokens()).isEqualTo(100L);\n+        assertThat(b4.getInitialTokens()).isEqualTo(100L);\n+        assertThat(b4.getRefillPeriodNanos()).isEqualTo(Duration.ofSeconds(60L).toNanos());\n     }\n \n     @Test\n-    public void testInvalidConstructor() {\n+    void testInvalidConstructor() {\n         try {\n             BandwidthLimit.of(0L, 1000L, 50L, Duration.ofSeconds(60L));\n         } catch (IllegalArgumentException e) {\n-            assertEquals(\n-                    \"Bandwidth limit must be positive. Found: 0\", e.getMessage());\n+            assertThat(\n+                    e.getMessage()).isEqualTo(\"Bandwidth limit must be positive. Found: 0\");\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d12a9fe17591b9044abb296e3cdd31bf6a4eea"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxODEwNw==", "bodyText": "assertThat(retryAfter2).isBetween(5, 10);", "url": "https://github.com/line/armeria/pull/2566#discussion_r390318107", "createdAt": "2020-03-10T13:38:59Z", "author": {"login": "trustin"}, "path": "bucket4j/src/test/java/com/linecorp/armeria/server/throttling/tokenbucket/TokenBucketThrottlingStrategyTest.java", "diffHunk": "@@ -94,130 +92,121 @@ protected void configure(ServerBuilder sb) throws Exception {\n     public void serve1() throws Exception {\n         final WebClient client = WebClient.of(serverRule.httpUri());\n         final AggregatedHttpResponse response = client.get(\"/http-serve\").aggregate().get();\n-        assertEquals(HttpStatus.OK, response.status());\n-        System.out.println(response.headers());\n-\n-        assertFalse(response.headers().contains(HttpHeaderNames.RETRY_AFTER));\n-        assertFalse(response.headers().contains(\"RateLimit-Remaining\"));\n-        assertFalse(response.headers().contains(\"X-RateLimit-Remaining\"));\n-        assertFalse(response.headers().contains(\"X-Rate-Limit-Remaining\"));\n-        assertFalse(response.headers().contains(\"RateLimit-Reset\"));\n-        assertFalse(response.headers().contains(\"X-RateLimit-Reset\"));\n-        assertFalse(response.headers().contains(\"X-Rate-Limit-Reset\"));\n-        assertFalse(response.headers().contains(\"RateLimit-Limit\"));\n-        assertFalse(response.headers().contains(\"X-RateLimit-Limit\"));\n-        assertFalse(response.headers().contains(\"X-Rate-Limit-Limit\"));\n+        assertThat(response.status()).isEqualTo(HttpStatus.OK);\n+\n+        assertThat(response.headers().contains(HttpHeaderNames.RETRY_AFTER)).isFalse();\n+        assertThat(response.headers().contains(\"RateLimit-Remaining\")).isFalse();\n+        assertThat(response.headers().contains(\"X-RateLimit-Remaining\")).isFalse();\n+        assertThat(response.headers().contains(\"X-Rate-Limit-Remaining\")).isFalse();\n+        assertThat(response.headers().contains(\"RateLimit-Reset\")).isFalse();\n+        assertThat(response.headers().contains(\"X-RateLimit-Reset\")).isFalse();\n+        assertThat(response.headers().contains(\"X-Rate-Limit-Reset\")).isFalse();\n+        assertThat(response.headers().contains(\"RateLimit-Limit\")).isFalse();\n+        assertThat(response.headers().contains(\"X-RateLimit-Limit\")).isFalse();\n+        assertThat(response.headers().contains(\"X-Rate-Limit-Limit\")).isFalse();\n     }\n \n     @Test\n     public void throttle1() throws Exception {\n         final WebClient client = WebClient.of(serverRule.httpUri());\n         final AggregatedHttpResponse response1 = client.get(\"/http-throttle1\").aggregate().get();\n-        assertEquals(HttpStatus.OK, response1.status());\n-        System.out.println(response1.headers());\n-\n-        assertFalse(response1.headers().contains(HttpHeaderNames.RETRY_AFTER));\n-        assertFalse(response1.headers().contains(\"RateLimit-Remaining\"));\n-        assertFalse(response1.headers().contains(\"X-Rate-Limit-Remaining\"));\n-        assertTrue(response1.headers().contains(\"X-RateLimit-Remaining\", \"0\"));\n-        assertTrue(response1.headers().contains(\"X-RateLimit-Reset\"));\n+        assertThat(response1.status()).isEqualTo(HttpStatus.OK);\n+\n+        assertThat(response1.headers().contains(HttpHeaderNames.RETRY_AFTER)).isFalse();\n+        assertThat(response1.headers().contains(\"RateLimit-Remaining\")).isFalse();\n+        assertThat(response1.headers().contains(\"X-Rate-Limit-Remaining\")).isFalse();\n+        assertThat(response1.headers().contains(\"X-RateLimit-Remaining\", \"0\")).isTrue();\n+        assertThat(response1.headers().contains(\"X-RateLimit-Reset\")).isTrue();\n         final long reset1 = Long.parseLong(response1.headers().get(\"X-RateLimit-Reset\"));\n-        assertTrue(reset1 <= 10L && reset1 >= 0L);\n-        assertFalse(response1.headers().contains(\"X-RateLimit-Limit\"));\n+        assertThat(reset1 <= 10L && reset1 >= 0L).isTrue();\n+        assertThat(response1.headers().contains(\"X-RateLimit-Limit\")).isFalse();\n \n         final AggregatedHttpResponse response2 = client.get(\"/http-throttle1\").aggregate().get();\n-        System.out.println(response2.headers());\n-        assertEquals(HttpStatus.TOO_MANY_REQUESTS, response2.status());\n+        assertThat(response2.status()).isEqualTo(HttpStatus.TOO_MANY_REQUESTS);\n \n-        assertTrue(response2.headers().contains(HttpHeaderNames.RETRY_AFTER));\n+        assertThat(response2.headers().contains(HttpHeaderNames.RETRY_AFTER)).isTrue();\n         final long retryAfter2 = Long.parseLong(response2.headers().get(HttpHeaderNames.RETRY_AFTER));\n-        assertTrue(retryAfter2 <= 10L && retryAfter2 >= 0L);\n-        assertFalse(response2.headers().contains(\"RateLimit-Remaining\"));\n-        assertFalse(response2.headers().contains(\"X-Rate-Limit-Remaining\"));\n-        assertTrue(response2.headers().contains(\"X-RateLimit-Remaining\", \"0\"));\n-        assertTrue(response2.headers().contains(\"X-RateLimit-Reset\"));\n+        assertThat(retryAfter2 <= 10L && retryAfter2 >= 0L).isTrue();\n+        assertThat(response2.headers().contains(\"RateLimit-Remaining\")).isFalse();\n+        assertThat(response2.headers().contains(\"X-Rate-Limit-Remaining\")).isFalse();\n+        assertThat(response2.headers().contains(\"X-RateLimit-Remaining\", \"0\")).isTrue();\n+        assertThat(response2.headers().contains(\"X-RateLimit-Reset\")).isTrue();\n         final long reset = Long.parseLong(response2.headers().get(\"X-RateLimit-Reset\"));\n-        assertEquals(retryAfter2, reset);\n-        assertFalse(response2.headers().contains(\"X-RateLimit-Limit\"));\n+        assertThat(reset).isEqualTo(retryAfter2);\n+        assertThat(response2.headers().contains(\"X-RateLimit-Limit\")).isFalse();\n     }\n \n     @Test\n     public void throttle2() throws Exception {\n         final WebClient client = WebClient.of(serverRule.httpUri());\n         final AggregatedHttpResponse response1 = client.get(\"/http-throttle2\").aggregate().get();\n-        assertEquals(HttpStatus.OK, response1.status());\n-        System.out.println(response1.headers());\n-\n-        assertFalse(response1.headers().contains(HttpHeaderNames.RETRY_AFTER));\n-        assertFalse(response1.headers().contains(\"RateLimit-Remaining\"));\n-        assertFalse(response1.headers().contains(\"X-Rate-Limit-Remaining\"));\n-        assertTrue(response1.headers().contains(\"X-RateLimit-Remaining\", \"0\"));\n-        assertTrue(response1.headers().contains(\"X-RateLimit-Reset\"));\n+        assertThat(response1.status()).isEqualTo(HttpStatus.OK);\n+\n+        assertThat(response1.headers().contains(HttpHeaderNames.RETRY_AFTER)).isFalse();\n+        assertThat(response1.headers().contains(\"RateLimit-Remaining\")).isFalse();\n+        assertThat(response1.headers().contains(\"X-Rate-Limit-Remaining\")).isFalse();\n+        assertThat(response1.headers().contains(\"X-RateLimit-Remaining\", \"0\")).isTrue();\n+        assertThat(response1.headers().contains(\"X-RateLimit-Reset\")).isTrue();\n         final long reset1 = Long.parseLong(response1.headers().get(\"X-RateLimit-Reset\"));\n-        assertTrue(reset1 <= 10L && reset1 >= 0L);\n-        assertEquals(\"1, 1;window=10\", response1.headers().get(\"X-RateLimit-Limit\"));\n+        assertThat(reset1 <= 10L && reset1 >= 0L).isTrue();\n+        assertThat(response1.headers().get(\"X-RateLimit-Limit\")).isEqualTo(\"1, 1;window=10\");\n \n         final AggregatedHttpResponse response2 = client.get(\"/http-throttle2\").aggregate().get();\n-        System.out.println(response2.headers());\n-        assertEquals(HttpStatus.TOO_MANY_REQUESTS, response2.status());\n-\n-        assertTrue(response2.headers().contains(HttpHeaderNames.RETRY_AFTER, \"15\"));\n-        assertFalse(response2.headers().contains(\"RateLimit-Remaining\"));\n-        assertFalse(response2.headers().contains(\"X-Rate-Limit-Remaining\"));\n-        assertTrue(response2.headers().contains(\"X-RateLimit-Remaining\", \"0\"));\n-        assertTrue(response2.headers().contains(\"X-RateLimit-Reset\", \"15\"));\n-        assertEquals(\"1, 1;window=10\", response1.headers().get(\"X-RateLimit-Limit\"));\n+        assertThat(response2.status()).isEqualTo(HttpStatus.TOO_MANY_REQUESTS);\n+\n+        assertThat(response2.headers().contains(HttpHeaderNames.RETRY_AFTER, \"15\")).isTrue();\n+        assertThat(response2.headers().contains(\"RateLimit-Remaining\")).isFalse();\n+        assertThat(response2.headers().contains(\"X-Rate-Limit-Remaining\")).isFalse();\n+        assertThat(response2.headers().contains(\"X-RateLimit-Remaining\", \"0\")).isTrue();\n+        assertThat(response2.headers().contains(\"X-RateLimit-Reset\", \"15\")).isTrue();\n+        assertThat(response1.headers().get(\"X-RateLimit-Limit\")).isEqualTo(\"1, 1;window=10\");\n     }\n \n     @Test\n     public void throttle3() throws Exception {\n         final WebClient client = WebClient.of(serverRule.httpUri());\n         final AggregatedHttpResponse response1 = client.get(\"/http-throttle3\").aggregate().get();\n-        assertEquals(HttpStatus.OK, response1.status());\n-        System.out.println(response1.headers());\n+        assertThat(response1.status()).isEqualTo(HttpStatus.OK);\n \n-        assertFalse(response1.headers().contains(HttpHeaderNames.RETRY_AFTER));\n-        assertFalse(response1.headers().contains(\"RateLimit-Remaining\"));\n-        assertFalse(response1.headers().contains(\"X-Rate-Limit-Remaining\"));\n-        assertFalse(response1.headers().contains(\"X-RateLimit-Remaining\"));\n-        assertFalse(response1.headers().contains(\"X-RateLimit-Reset\"));\n+        assertThat(response1.headers().contains(HttpHeaderNames.RETRY_AFTER)).isFalse();\n+        assertThat(response1.headers().contains(\"RateLimit-Remaining\")).isFalse();\n+        assertThat(response1.headers().contains(\"X-Rate-Limit-Remaining\")).isFalse();\n+        assertThat(response1.headers().contains(\"X-RateLimit-Remaining\")).isFalse();\n+        assertThat(response1.headers().contains(\"X-RateLimit-Reset\")).isFalse();\n \n         final AggregatedHttpResponse response2 = client.get(\"/http-throttle3\").aggregate().get();\n-        System.out.println(response2.headers());\n-        assertEquals(HttpStatus.TOO_MANY_REQUESTS, response2.status());\n+        assertThat(response2.status()).isEqualTo(HttpStatus.TOO_MANY_REQUESTS);\n \n-        assertTrue(response2.headers().contains(HttpHeaderNames.RETRY_AFTER));\n+        assertThat(response2.headers().contains(HttpHeaderNames.RETRY_AFTER)).isTrue();\n         final long retryAfter2 = Long.parseLong(response2.headers().get(HttpHeaderNames.RETRY_AFTER));\n-        assertTrue(retryAfter2 <= 10L && retryAfter2 >= 0L);\n-        assertFalse(response2.headers().contains(\"RateLimit-Remaining\"));\n-        assertFalse(response2.headers().contains(\"X-Rate-Limit-Remaining\"));\n-        assertFalse(response2.headers().contains(\"X-RateLimit-Remaining\"));\n-        assertFalse(response2.headers().contains(\"X-RateLimit-Reset\"));\n+        assertThat(retryAfter2 <= 10L && retryAfter2 >= 0L).isTrue();\n+        assertThat(response2.headers().contains(\"RateLimit-Remaining\")).isFalse();\n+        assertThat(response2.headers().contains(\"X-Rate-Limit-Remaining\")).isFalse();\n+        assertThat(response2.headers().contains(\"X-RateLimit-Remaining\")).isFalse();\n+        assertThat(response2.headers().contains(\"X-RateLimit-Reset\")).isFalse();\n     }\n \n     @Test\n     public void throttle4() throws Exception {\n         final WebClient client = WebClient.of(serverRule.httpUri());\n         final AggregatedHttpResponse response1 = client.get(\"/http-throttle4\").aggregate().get();\n-        assertEquals(HttpStatus.OK, response1.status());\n-        System.out.println(response1.headers());\n+        assertThat(response1.status()).isEqualTo(HttpStatus.OK);\n \n-        assertFalse(response1.headers().contains(HttpHeaderNames.RETRY_AFTER));\n-        assertFalse(response1.headers().contains(\"RateLimit-Remaining\"));\n-        assertFalse(response1.headers().contains(\"X-Rate-Limit-Remaining\"));\n-        assertFalse(response1.headers().contains(\"X-RateLimit-Remaining\"));\n-        assertFalse(response1.headers().contains(\"X-RateLimit-Reset\"));\n+        assertThat(response1.headers().contains(HttpHeaderNames.RETRY_AFTER)).isFalse();\n+        assertThat(response1.headers().contains(\"RateLimit-Remaining\")).isFalse();\n+        assertThat(response1.headers().contains(\"X-Rate-Limit-Remaining\")).isFalse();\n+        assertThat(response1.headers().contains(\"X-RateLimit-Remaining\")).isFalse();\n+        assertThat(response1.headers().contains(\"X-RateLimit-Reset\")).isFalse();\n \n         final AggregatedHttpResponse response2 = client.get(\"/http-throttle4\").aggregate().get();\n-        System.out.println(response2.headers());\n-        assertEquals(HttpStatus.SERVICE_UNAVAILABLE, response2.status());\n+        assertThat(response2.status()).isEqualTo(HttpStatus.SERVICE_UNAVAILABLE);\n \n-        assertTrue(response2.headers().contains(HttpHeaderNames.RETRY_AFTER));\n+        assertThat(response2.headers().contains(HttpHeaderNames.RETRY_AFTER)).isTrue();\n         final long retryAfter2 = Long.parseLong(response2.headers().get(HttpHeaderNames.RETRY_AFTER));\n-        assertTrue(retryAfter2 <= 10L && retryAfter2 >= 5L);\n-        assertFalse(response2.headers().contains(\"RateLimit-Remaining\"));\n-        assertFalse(response2.headers().contains(\"X-Rate-Limit-Remaining\"));\n-        assertFalse(response2.headers().contains(\"X-RateLimit-Remaining\"));\n-        assertFalse(response2.headers().contains(\"X-RateLimit-Reset\"));\n+        assertThat(retryAfter2 <= 10L && retryAfter2 >= 5L).isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d12a9fe17591b9044abb296e3cdd31bf6a4eea"}, "originalPosition": 208}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48892b2b7b7f87b470dd28c3a934746b8f085977", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/48892b2b7b7f87b470dd28c3a934746b8f085977", "committedDate": "2020-03-10T14:43:45Z", "message": "More review comments by @trustin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ade9bc47d1dcfcb8ef57b812a2f8cbde0fc321b", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/6ade9bc47d1dcfcb8ef57b812a2f8cbde0fc321b", "committedDate": "2020-03-10T14:51:57Z", "message": "Renamed package com.linecorp.armeria.server.throttling.tokenbucket -> com.linecorp.armeria.server.throttling.bucket4j as per review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NzUyOTMz", "url": "https://github.com/line/armeria/pull/2566#pullrequestreview-375752933", "createdAt": "2020-03-17T05:42:35Z", "commit": {"oid": "6ade9bc47d1dcfcb8ef57b812a2f8cbde0fc321b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NTI3MDAw", "url": "https://github.com/line/armeria/pull/2566#pullrequestreview-376527000", "createdAt": "2020-03-18T02:35:29Z", "commit": {"oid": "6ade9bc47d1dcfcb8ef57b812a2f8cbde0fc321b"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMjozNToyOVrOF30bcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMjo1NTowOVrOF30uNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3NDk5NQ==", "bodyText": "I think this will not catch when overdraftLimit is negative.\nWe usually just use checkArgument, how about using it?\ncheckArgument(limit > 0, \"limit: %s (expected: >0 )\", limit);\ncheckArgument(overdraftLimit == 0 || overdraftLimit > limit,\n              \"overdraftLimit: %s (expected: > %s )\", overdraftLimit, limit);", "url": "https://github.com/line/armeria/pull/2566#discussion_r394074995", "createdAt": "2020-03-18T02:35:29Z", "author": {"login": "minwoox"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/BandwidthLimit.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.bucket4j;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.github.bucket4j.Bandwidth;\n+import io.github.bucket4j.Refill;\n+\n+/**\n+ * Stores configurations of a single Token-Bucket bandwidth limit.\n+ */\n+public final class BandwidthLimit {\n+\n+    /**\n+     * Returns a newly created {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit          the bucket size - defines the count of tokens which can be held by the bucket\n+     *                       and defines the speed at which tokens are regenerated in the bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by\n+     *                       the bucket, this value must exceed the {@code limit}\n+     * @param initialSize    the initial number of tokens available to this bandwidth limit\n+     * @param period         the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        return new BandwidthLimit(limit, overdraftLimit, initialSize, period);\n+    }\n+\n+    /**\n+     * Returns a newly created {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit the bucket size - defines the count of tokens which can be held by the bucket\n+     *              and defines the speed at which tokens are regenerated in the bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by the bucket,\n+     *                       this value must exceed the {@code limit}\n+     * @param period the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, Duration period) {\n+        return new BandwidthLimit(limit, overdraftLimit, 0L, period);\n+    }\n+\n+    /**\n+     * Returns a newly created simple {@link BandwidthLimit}.\n+     * Specifies easy limitation of {@code limit} tokens per {@code period} time window.\n+     * @param limit the bucket size - defines the maximum count of tokens which can be held by the bucket\n+     *              and defines the speed at which tokens are regenerated in the bucket\n+     * @param period the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, Duration period) {\n+        return new BandwidthLimit(limit, 0L, 0L, period);\n+    }\n+\n+    /**\n+     * Returns a newly created {@link BandwidthLimit}. Computes {@code limit}, {@code overdraftLimit},\n+     * {@code initialSize} and {@code period} out of a semicolon-separated {@code specification} string\n+     * that conforms to the following format,\n+     * as per <a href=\"https://tools.ietf.org/id/draft-polli-ratelimit-headers-00.html\">RateLimit Header Scheme for HTTP</a>:\n+     * <pre>{@code\n+     * <limit>;window=<period(in seconds)>[;burst=<overdraftLimit>][;initial=<initialSize>]\n+     * }</pre>\n+     * All {@code specification} string elements must come in the defined order.\n+     * For example:\n+     * <ul>\n+     *   <li>{@code 100;window=60;burst=1000} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize} and {@code period}=60seconds)</li>\n+     *   <li>{@code 100;window=60;burst=1000;initial=20} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize}=20 and {@code period}=60seconds)</li>\n+     *   <li>{@code 5000;window=1} ({@code limit}=5000 and {@code period}=1second)</li>\n+     * </ul>\n+     *\n+     * @param specification the specification used to create a {@link BandwidthLimit}\n+     */\n+    public static BandwidthLimit of(String specification) {\n+        return TokenBucketSpec.parseBandwidthLimit(specification);\n+    }\n+\n+    private final long limit;\n+    private final long overdraftLimit;\n+    private final long initialSize;\n+    private final Duration period;\n+\n+    BandwidthLimit(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        // validate limit\n+        if (limit <= 0L) {\n+            throw new IllegalArgumentException(\"Bandwidth limit must be positive. Found: \" + limit);\n+        }\n+        this.limit = limit;\n+\n+        // validate overdraftLimit\n+        if (overdraftLimit > 0L && overdraftLimit <= limit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ade9bc47d1dcfcb8ef57b812a2f8cbde0fc321b"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3NTk0Nw==", "bodyText": "Aren't we going to add initial size?", "url": "https://github.com/line/armeria/pull/2566#discussion_r394075947", "createdAt": "2020-03-18T02:39:31Z", "author": {"login": "minwoox"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/TokenBucketSpec.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.bucket4j;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Splitter;\n+\n+/**\n+ * A specification of a {@link TokenBucket} configuration represented by a string. The string syntax is\n+ * a series of comma-separated {@link BandwidthLimit} configurations and each values is semicolon-separated,\n+ * as per <a href=\"https://tools.ietf.org/id/draft-polli-ratelimit-headers-00.html\">RateLimit Header Scheme for HTTP</a>.\n+ *\n+ * @see #parseTokenBucket(String) for detailed format of the specification.\n+ */\n+final class TokenBucketSpec {\n+\n+    private static final char OPTIONS_SEPARATOR = ';';\n+    private static final char KEY_VALUE_SEPARATOR = '=';\n+    private static final String PERIOD = \"window\";\n+    private static final String OVERDRAFT = \"burst\";\n+    private static final String INITIAL = \"initial\";\n+    private static final Splitter.MapSplitter OPTIONS_SPLITTER =\n+            Splitter.on(OPTIONS_SEPARATOR).trimResults().withKeyValueSeparator(KEY_VALUE_SEPARATOR);\n+    private static final Splitter LIMITS_SPLITTER = Splitter.on(',').trimResults();\n+\n+    private TokenBucketSpec() {}\n+\n+    /**\n+     * Creates a new {@link BandwidthLimit} that computes {@code limit}, {@code overdraftLimit},\n+     * {@code initialSize} and {@code period} from a semicolon-separated {@code specification} string\n+     * that conforms to the following format:\n+     * <pre>{@code\n+     * <limit>;window=<period(in seconds)>[;burst=<overdraftLimit>][;initial=<initialSize>]\n+     * }</pre>\n+     * All {@code specification} string elements must come in the defined order.\n+     * For example:\n+     * <ul>\n+     *   <li>{@code 100;window=60;burst=1000} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize} and {@code period}=60seconds)</li>\n+     *   <li>{@code 100;window=60;burst=1000;initial=20} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize}=20 and {@code period}=60seconds)</li>\n+     *   <li>{@code 5000;window=1} ({@code limit}=5000 and {@code period}=1second)</li>\n+     * </ul>\n+     *\n+     * @param specification the specification used to create a {@link BandwidthLimit}\n+     */\n+    static BandwidthLimit parseBandwidthLimit(String specification) {\n+        requireNonNull(specification, \"specification\");\n+        if (specification.isEmpty()) {\n+            throw new IllegalArgumentException(\"Empty bandwidth limit specification\");\n+        }\n+        final int limitSep = specification.indexOf(OPTIONS_SEPARATOR);\n+        final long limit;\n+        final Map<String, String> options;\n+        if (limitSep > 0) {\n+            limit = Long.parseLong(specification.substring(0, limitSep));\n+            options = (limitSep < specification.length() - 1) ?\n+                      OPTIONS_SPLITTER.split(specification.substring(limitSep + 1)) : Collections.emptyMap();\n+        } else if (limitSep < 0) {\n+            limit = Long.parseLong(specification);\n+            options = Collections.emptyMap();\n+        } else { // if (limitSep == 0)\n+            throw new IllegalArgumentException(\"Invalid format of \\\"\" +\n+                                               specification + \"\\\" - limit not found\");\n+        }\n+        if (!options.containsKey(PERIOD)) {\n+            throw new IllegalArgumentException(\"Invalid format of \\\"\" +\n+                                               specification + \"\\\" - period not found\");\n+        }\n+        final Duration period = Duration.ofSeconds(Long.parseLong(options.get(PERIOD)));\n+        if (options.containsKey(OVERDRAFT)) {\n+            final long overdraftLimit = Long.parseLong(options.get(OVERDRAFT));\n+            if (options.containsKey(INITIAL)) {\n+                final long initialSize = Long.parseLong(options.get(INITIAL));\n+                return BandwidthLimit.of(limit, overdraftLimit, initialSize, period);\n+            } else {\n+                return BandwidthLimit.of(limit, overdraftLimit, period);\n+            }\n+        } else {\n+            return BandwidthLimit.of(limit, period);\n+        }\n+    }\n+\n+    /**\n+     * Creates a new {@link TokenBucket} from a comma-separated {@code specification} string\n+     * that conforms to the following format:\n+     * <pre>{@code\n+     * <bandwidth limit 1>[, <bandwidth limit 2>[, etc.]]\n+     * }</pre>\n+     * The order of elements inside {@code specification} is not defined.\n+     * For example:\n+     * <ul>\n+     *   <li>{@code 100;window=60;burst=1000, 50000;window=3600}</li>\n+     * </ul>\n+     *\n+     * @param specification the specification used to create a {@link BandwidthLimit}.\n+     *                      Empty {@link String} permitted to specify empty {@link TokenBucket}.\n+     */\n+    static TokenBucket parseTokenBucket(String specification) {\n+        requireNonNull(specification, \"specification\");\n+        final TokenBucketBuilder builder = TokenBucket.builder();\n+        if (specification.isEmpty()) {\n+            // empty specification allowed here\n+            return builder.limits().build();\n+        }\n+        final List<BandwidthLimit> limits = new ArrayList<>(2);\n+        for (String limitSpec: LIMITS_SPLITTER.split(specification)) {\n+            limits.add(parseBandwidthLimit(limitSpec));\n+        }\n+        return builder.limits(limits).build();\n+    }\n+\n+    /**\n+     * Returns a string representation of the {@link BandwidthLimit} in the following format:\n+     * <pre>{@code\n+     * <limit>;window=<period(in seconds)>[;burst=<overdraftLimit>][;policy=\"token bucket\"]\n+     * }</pre>\n+     * For example: \"100;window=60;burst=1000\".\n+     *\n+     * @return A {@link String} representation of the {@link BandwidthLimit}.\n+     */\n+    @Nullable\n+    static String toString(@Nullable BandwidthLimit bandwidthLimit) {\n+        if (bandwidthLimit == null) {\n+            return null;\n+        }\n+        final long limit = bandwidthLimit.limit();\n+        final StringBuilder sb = new StringBuilder().append(limit);\n+        sb.append(OPTIONS_SEPARATOR).append(PERIOD).append(KEY_VALUE_SEPARATOR)\n+          .append(bandwidthLimit.period().getSeconds());\n+        final long overdraftLimit = bandwidthLimit.overdraftLimit();\n+        if (overdraftLimit > limit) {\n+            sb.append(OPTIONS_SEPARATOR).append(OVERDRAFT).append(KEY_VALUE_SEPARATOR).append(overdraftLimit);\n+        }\n+        //sb.append(OPTIONS_SEPARATOR).append(INITIAL).append(KEY_VALUE_SEPARATOR)\n+        //  .append(bandwidthLimit.initialSize());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ade9bc47d1dcfcb8ef57b812a2f8cbde0fc321b"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3ODA4MQ==", "bodyText": "We don't use @Nonnull.\nAll fields and arguments are non-null by default.\nCould you remove this annotation from this PR, please?", "url": "https://github.com/line/armeria/pull/2566#discussion_r394078081", "createdAt": "2020-03-18T02:48:17Z", "author": {"login": "minwoox"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/TokenBucket.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.bucket4j;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * Stores configuration of the Token-Bucket algorithm, comprised of multiple limits.\n+ */\n+public final class TokenBucket {\n+\n+    /**\n+     * Returns a newly created {@link TokenBucketBuilder}.\n+     */\n+    public static TokenBucketBuilder builder() {\n+        return new TokenBucketBuilder();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link TokenBucket}. Computes a set of {@link BandwidthLimit} out of\n+     * a comma-separated {@code specification} string that conforms to the following format,\n+     * as per <a href=\"https://tools.ietf.org/id/draft-polli-ratelimit-headers-00.html\">RateLimit Header Scheme for HTTP</a>:\n+     * <pre>{@code\n+     * <bandwidth limit 1>[, <bandwidth limit 2>[, etc.]]\n+     * }</pre>\n+     * The order of elements inside {@code specification} is not defined.\n+     * For example:\n+     * <ul>\n+     *   <li>{@code 100;window=60;burst=1000, 50000;window=3600}</li>\n+     * </ul>\n+     *\n+     * @param specification the specification used to create a {@link BandwidthLimit}\n+     * @see TokenBucketSpec#parseTokenBucket(String)\n+     */\n+    public static TokenBucket of(String specification) {\n+        return TokenBucketSpec.parseTokenBucket(specification);\n+    }\n+\n+    /**\n+     * Returns a newly created {@link TokenBucket} with a single simple {@link BandwidthLimit}.\n+     * Specifies easy limitation of {@code limit} tokens per {@code period} time window.\n+     * @param limit the bucket size - defines the maximum count of tokens which can be held by the bucket\n+     *              and defines the speed at which tokens are regenerated in the bucket\n+     * @param period the time window, during which the tokens will be regenerated\n+     * @return Newly created {@link TokenBucket}\n+     * @see BandwidthLimit#of(long, Duration)\n+     */\n+    public static TokenBucket of(long limit, Duration period) {\n+        return new TokenBucket(BandwidthLimit.of(limit, period));\n+    }\n+\n+    @Nonnull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ade9bc47d1dcfcb8ef57b812a2f8cbde0fc321b"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3OTU3OA==", "bodyText": "Could you add null check even though the name is nullable?", "url": "https://github.com/line/armeria/pull/2566#discussion_r394079578", "createdAt": "2020-03-18T02:54:16Z", "author": {"login": "minwoox"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/TokenBucketThrottlingStrategyBuilder.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.bucket4j;\n+\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.throttling.ThrottlingHeaders;\n+\n+/**\n+ * Builds {@link TokenBucketThrottlingStrategy}.\n+ */\n+public final class TokenBucketThrottlingStrategyBuilder<T extends Request> {\n+\n+    private final TokenBucket tokenBucket;\n+    @Nullable\n+    private Duration minimumBackoff;\n+    @Nullable\n+    private ThrottlingHeaders headersScheme;\n+    private boolean sendQuota;\n+    @Nullable\n+    private String name;\n+\n+    TokenBucketThrottlingStrategyBuilder(TokenBucket tokenBucket) {\n+        this.tokenBucket = Objects.requireNonNull(tokenBucket, \"tokenBucket\");\n+    }\n+\n+    /**\n+     * Optional name of the strategy.\n+     * By default, it will be assigned with a predefined name.\n+     */\n+    public TokenBucketThrottlingStrategyBuilder<T> name(String name) {\n+        this.name = name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ade9bc47d1dcfcb8ef57b812a2f8cbde0fc321b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3OTc5Ng==", "bodyText": "Don't we need to validate this value?", "url": "https://github.com/line/armeria/pull/2566#discussion_r394079796", "createdAt": "2020-03-18T02:55:09Z", "author": {"login": "minwoox"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/TokenBucketThrottlingStrategyBuilder.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.bucket4j;\n+\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.throttling.ThrottlingHeaders;\n+\n+/**\n+ * Builds {@link TokenBucketThrottlingStrategy}.\n+ */\n+public final class TokenBucketThrottlingStrategyBuilder<T extends Request> {\n+\n+    private final TokenBucket tokenBucket;\n+    @Nullable\n+    private Duration minimumBackoff;\n+    @Nullable\n+    private ThrottlingHeaders headersScheme;\n+    private boolean sendQuota;\n+    @Nullable\n+    private String name;\n+\n+    TokenBucketThrottlingStrategyBuilder(TokenBucket tokenBucket) {\n+        this.tokenBucket = Objects.requireNonNull(tokenBucket, \"tokenBucket\");\n+    }\n+\n+    /**\n+     * Optional name of the strategy.\n+     * By default, it will be assigned with a predefined name.\n+     */\n+    public TokenBucketThrottlingStrategyBuilder<T> name(String name) {\n+        this.name = name;\n+        return this;\n+    }\n+\n+    /**\n+     * Optional {@link Duration} that defines a minimum backoff period for throttled requests.\n+     * By default, it will be set to 0 seconds.\n+     */\n+    public TokenBucketThrottlingStrategyBuilder<T> withMinimumBackoff(Duration minimumBackoff) {\n+        this.minimumBackoff = minimumBackoff;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ade9bc47d1dcfcb8ef57b812a2f8cbde0fc321b"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NTM5MzE1", "url": "https://github.com/line/armeria/pull/2566#pullrequestreview-376539315", "createdAt": "2020-03-18T03:19:44Z", "commit": {"oid": "6ade9bc47d1dcfcb8ef57b812a2f8cbde0fc321b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMzoxOTo0NFrOF31EjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMzoyMzo1MFrOF31IYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA4NTUxNw==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final ImmutableList.Builder<BandwidthLimit> limitsBuilder = new ImmutableList.Builder<>();\n          \n          \n            \n                private final ImmutableList.Builder<BandwidthLimit> limitsBuilder = ImmutableList.builder();", "url": "https://github.com/line/armeria/pull/2566#discussion_r394085517", "createdAt": "2020-03-18T03:19:44Z", "author": {"login": "ikhoon"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/TokenBucketBuilder.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.bucket4j;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Builds a {@link TokenBucket} instance.\n+ */\n+public final class TokenBucketBuilder {\n+    private static final BandwidthLimit[] NO_BANDWIDTH_LIMITS = {};\n+\n+    private final ImmutableList.Builder<BandwidthLimit> limitsBuilder = new ImmutableList.Builder<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ade9bc47d1dcfcb8ef57b812a2f8cbde0fc321b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA4NjQ5Nw==", "bodyText": "How about just pass limits and make TokenBucket accept ImmutableList?\nThen TokenBucket#limits() can return ImmutableList with zero cost.", "url": "https://github.com/line/armeria/pull/2566#discussion_r394086497", "createdAt": "2020-03-18T03:23:50Z", "author": {"login": "ikhoon"}, "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/TokenBucketBuilder.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.bucket4j;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Builds a {@link TokenBucket} instance.\n+ */\n+public final class TokenBucketBuilder {\n+    private static final BandwidthLimit[] NO_BANDWIDTH_LIMITS = {};\n+\n+    private final ImmutableList.Builder<BandwidthLimit> limitsBuilder = new ImmutableList.Builder<>();\n+\n+    TokenBucketBuilder() {} // prevent public access\n+\n+    /**\n+     * Adds a number of {@link BandwidthLimit}.\n+     */\n+    public TokenBucketBuilder limits(BandwidthLimit... limits) {\n+        requireNonNull(limits, \"limits\");\n+        return limits(ImmutableList.copyOf(limits));\n+    }\n+\n+    /**\n+     * Adds a number of {@link BandwidthLimit}.\n+     */\n+    public TokenBucketBuilder limits(Iterable<BandwidthLimit> limits) {\n+        requireNonNull(limits, \"limits\");\n+        limitsBuilder.addAll(limits);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds new {@link BandwidthLimit}.\n+     */\n+    public TokenBucketBuilder limit(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        return limits(BandwidthLimit.of(limit, overdraftLimit, initialSize, period));\n+    }\n+\n+    /**\n+     * Adds new {@link BandwidthLimit}.\n+     */\n+    public TokenBucketBuilder limit(long limit, long overdraftLimit, Duration period) {\n+        return limits(BandwidthLimit.of(limit, overdraftLimit, period));\n+    }\n+\n+    /**\n+     * Adds new {@link BandwidthLimit}.\n+     */\n+    public TokenBucketBuilder limit(long limit, Duration period) {\n+        return limits(BandwidthLimit.of(limit, period));\n+    }\n+\n+    /**\n+     * Returns a newly-created {@link TokenBucket} based on the set of limits configured for this builder.\n+     */\n+    public TokenBucket build() {\n+        final ImmutableList<BandwidthLimit> limits = limitsBuilder.build();\n+        return new TokenBucket(limits.isEmpty() ? NO_BANDWIDTH_LIMITS\n+                                                : limits.toArray(NO_BANDWIDTH_LIMITS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ade9bc47d1dcfcb8ef57b812a2f8cbde0fc321b"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef926b55181f3c3bb0840c58cef918fd8c6e9c50", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/ef926b55181f3c3bb0840c58cef918fd8c6e9c50", "committedDate": "2020-03-18T18:25:40Z", "message": "Review feedback by @minwoox"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6478cdb4eb78daa513ab00127c1b023b0cc4c451", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/6478cdb4eb78daa513ab00127c1b023b0cc4c451", "committedDate": "2020-03-18T18:49:00Z", "message": "Review feedback by @ikhoon"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MzY1Nzc2", "url": "https://github.com/line/armeria/pull/2566#pullrequestreview-377365776", "createdAt": "2020-03-19T01:41:19Z", "commit": {"oid": "6478cdb4eb78daa513ab00127c1b023b0cc4c451"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6852c4450d52af78eca68efa13f4ee94754141ac", "author": {"user": {"login": "max904-github", "name": null}}, "url": "https://github.com/line/armeria/commit/6852c4450d52af78eca68efa13f4ee94754141ac", "committedDate": "2020-03-20T10:23:31Z", "message": "Review feedback by @minwoox"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MDk1NTUz", "url": "https://github.com/line/armeria/pull/2566#pullrequestreview-379095553", "createdAt": "2020-03-23T02:07:25Z", "commit": {"oid": "6852c4450d52af78eca68efa13f4ee94754141ac"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 669, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}