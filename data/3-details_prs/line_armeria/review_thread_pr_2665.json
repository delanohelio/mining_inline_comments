{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzODQwMTYy", "number": 2665, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMToyODoxN1rODyTWCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMzozNzozNFrODyUxPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDcyMzI4OnYy", "diffSide": "LEFT", "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMToyODoxN1rOGGRQUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODoxNjo1MFrOGGZ02w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyNzM0NQ==", "bodyText": "We should cancel the promise to stop sending DNS queries internally. https://github.com/netty/netty/pull/10171/files#diff-6107a6de600a6f941beb29f082976653R357\nIs there any reason that DnsTimeoutException shouldn't be propagated to the caller?", "url": "https://github.com/line/armeria/pull/2665#discussion_r409227345", "createdAt": "2020-04-16T01:28:17Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "diffHunk": "@@ -140,9 +148,8 @@ private void configureTimeout(List<DnsQuestion> questions, String logPrefix,\n             final DnsTimeoutException exception = new DnsTimeoutException(\n                     '[' + logPrefix + \"] \" + questions + \" are timed out after \" +\n                     queryTimeoutMillis + \" milliseconds.\");\n-            result.setFailure(exception);\n             promises.forEach(promise -> {\n-                promise.cancel(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35963f486fe4645d3d2931db9e2c13ca74e65131"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzMzk5MA==", "bodyText": "Thank you, didn't aware that PR^^.\nI change back to cancel, one reason I delete DnsTimeoutException in here is that it will trigger operationComplete with CancellationException.\nWhen we have A & AAAA queries, we may have A query success but AAAA query failed, it will call aggregatedPromise.setSuccess and throws IllegalStateException if we set DnsTimeoutException here. So I move the DnsTimeoutException to operationComplete.\nBut to follow prefer, it's good to treat it as successful when one of the queries succeed?", "url": "https://github.com/line/armeria/pull/2665#discussion_r409233990", "createdAt": "2020-04-16T01:52:23Z", "author": {"login": "kojilin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "diffHunk": "@@ -140,9 +148,8 @@ private void configureTimeout(List<DnsQuestion> questions, String logPrefix,\n             final DnsTimeoutException exception = new DnsTimeoutException(\n                     '[' + logPrefix + \"] \" + questions + \" are timed out after \" +\n                     queryTimeoutMillis + \" milliseconds.\");\n-            result.setFailure(exception);\n             promises.forEach(promise -> {\n-                promise.cancel(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyNzM0NQ=="}, "originalCommit": {"oid": "35963f486fe4645d3d2931db9e2c13ca74e65131"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI1ODY2Mg==", "bodyText": "Then how about just using try(Success|failure)? Becuase we can't be sure that the CancellationException is triggered by our side. (i.e. DnsNameResolver could cancel it internally)", "url": "https://github.com/line/armeria/pull/2665#discussion_r409258662", "createdAt": "2020-04-16T03:24:59Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "diffHunk": "@@ -140,9 +148,8 @@ private void configureTimeout(List<DnsQuestion> questions, String logPrefix,\n             final DnsTimeoutException exception = new DnsTimeoutException(\n                     '[' + logPrefix + \"] \" + questions + \" are timed out after \" +\n                     queryTimeoutMillis + \" milliseconds.\");\n-            result.setFailure(exception);\n             promises.forEach(promise -> {\n-                promise.cancel(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyNzM0NQ=="}, "originalCommit": {"oid": "35963f486fe4645d3d2931db9e2c13ca74e65131"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2MzE5NQ==", "bodyText": "Curious you mean tryFailure instead of canceling? or make listener using  try(Success|failure)?", "url": "https://github.com/line/armeria/pull/2665#discussion_r409263195", "createdAt": "2020-04-16T03:43:18Z", "author": {"login": "kojilin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "diffHunk": "@@ -140,9 +148,8 @@ private void configureTimeout(List<DnsQuestion> questions, String logPrefix,\n             final DnsTimeoutException exception = new DnsTimeoutException(\n                     '[' + logPrefix + \"] \" + questions + \" are timed out after \" +\n                     queryTimeoutMillis + \" milliseconds.\");\n-            result.setFailure(exception);\n             promises.forEach(promise -> {\n-                promise.cancel(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyNzM0NQ=="}, "originalCommit": {"oid": "35963f486fe4645d3d2931db9e2c13ca74e65131"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2MzUyOA==", "bodyText": "or make listener using try(Success|failure)?\n\nYes, that's what I meant. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2665#discussion_r409263528", "createdAt": "2020-04-16T03:44:31Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "diffHunk": "@@ -140,9 +148,8 @@ private void configureTimeout(List<DnsQuestion> questions, String logPrefix,\n             final DnsTimeoutException exception = new DnsTimeoutException(\n                     '[' + logPrefix + \"] \" + questions + \" are timed out after \" +\n                     queryTimeoutMillis + \" milliseconds.\");\n-            result.setFailure(exception);\n             promises.forEach(promise -> {\n-                promise.cancel(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyNzM0NQ=="}, "originalCommit": {"oid": "35963f486fe4645d3d2931db9e2c13ca74e65131"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2MzgyMA==", "bodyText": "But then, we always return DnsTimeoutException even one of A/AAAA is succeed.\nMaybe ok, but it means we may need to encourage the user to enlarge the timeout mills to avoid the problem if the target host only has one of A/AAAA.\nLet me check if I can make it ^^;;", "url": "https://github.com/line/armeria/pull/2665#discussion_r409263820", "createdAt": "2020-04-16T03:45:50Z", "author": {"login": "kojilin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "diffHunk": "@@ -140,9 +148,8 @@ private void configureTimeout(List<DnsQuestion> questions, String logPrefix,\n             final DnsTimeoutException exception = new DnsTimeoutException(\n                     '[' + logPrefix + \"] \" + questions + \" are timed out after \" +\n                     queryTimeoutMillis + \" milliseconds.\");\n-            result.setFailure(exception);\n             promises.forEach(promise -> {\n-                promise.cancel(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyNzM0NQ=="}, "originalCommit": {"oid": "35963f486fe4645d3d2931db9e2c13ca74e65131"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2NTM3Nw==", "bodyText": "Yes, as you said, if the query succeeded after the timeout, we are still going to get timeout, but I think it's ok. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2665#discussion_r409265377", "createdAt": "2020-04-16T03:52:11Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "diffHunk": "@@ -140,9 +148,8 @@ private void configureTimeout(List<DnsQuestion> questions, String logPrefix,\n             final DnsTimeoutException exception = new DnsTimeoutException(\n                     '[' + logPrefix + \"] \" + questions + \" are timed out after \" +\n                     queryTimeoutMillis + \" milliseconds.\");\n-            result.setFailure(exception);\n             promises.forEach(promise -> {\n-                promise.cancel(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyNzM0NQ=="}, "originalCommit": {"oid": "35963f486fe4645d3d2931db9e2c13ca74e65131"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3Mjc0OQ==", "bodyText": "I mean one of the query succeeds before timeout, e.g. A is before timeout and AAAA is timeout.\nNow I change to check if all of the query promises are done or not.", "url": "https://github.com/line/armeria/pull/2665#discussion_r409272749", "createdAt": "2020-04-16T04:21:51Z", "author": {"login": "kojilin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "diffHunk": "@@ -140,9 +148,8 @@ private void configureTimeout(List<DnsQuestion> questions, String logPrefix,\n             final DnsTimeoutException exception = new DnsTimeoutException(\n                     '[' + logPrefix + \"] \" + questions + \" are timed out after \" +\n                     queryTimeoutMillis + \" milliseconds.\");\n-            result.setFailure(exception);\n             promises.forEach(promise -> {\n-                promise.cancel(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyNzM0NQ=="}, "originalCommit": {"oid": "35963f486fe4645d3d2931db9e2c13ca74e65131"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2Nzc3MQ==", "bodyText": "I mean one of the query succeeds before timeout, e.g. A is before timeout and AAAA is timeout.\n\nAh, I completely missed that. Thanks!", "url": "https://github.com/line/armeria/pull/2665#discussion_r409367771", "createdAt": "2020-04-16T08:16:50Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "diffHunk": "@@ -140,9 +148,8 @@ private void configureTimeout(List<DnsQuestion> questions, String logPrefix,\n             final DnsTimeoutException exception = new DnsTimeoutException(\n                     '[' + logPrefix + \"] \" + questions + \" are timed out after \" +\n                     queryTimeoutMillis + \" milliseconds.\");\n-            result.setFailure(exception);\n             promises.forEach(promise -> {\n-                promise.cancel(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyNzM0NQ=="}, "originalCommit": {"oid": "35963f486fe4645d3d2931db9e2c13ca74e65131"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDkzMjcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMzoyMzoyMlrOGGTI-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMzoyMzoyMlrOGGTI-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI1ODIzMg==", "bodyText": "Thanks for this!", "url": "https://github.com/line/armeria/pull/2665#discussion_r409258232", "createdAt": "2020-04-16T03:23:22Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "diffHunk": "@@ -96,12 +89,22 @@ public void operationComplete(Future<List<DnsRecord>> future) throws Exception {\n \n                 if (--remaining == 0) {\n                     if (!records.isEmpty()) {\n+                        if (records.size() > 1) {\n+                            final List<DnsRecordType> preferredOrder =\n+                                    questions.stream().map(DnsRecord::type).collect(toImmutableList());\n+                            records.sort(Comparator.comparingInt(\n+                                    record -> preferredOrder.indexOf(record.type())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92cf4c82566360b8539fe3d81fb730ffe453c37c"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDk1Njc5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMzozNzozNFrOGGTWug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMzozNzozNFrOGGTWug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2MTc1NA==", "bodyText": "I think we always have a fixed set of types, so since this is an internal class we could pass them to the constructor and only do this once. Can also use Ordering.explicit", "url": "https://github.com/line/armeria/pull/2665#discussion_r409261754", "createdAt": "2020-04-16T03:37:34Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java", "diffHunk": "@@ -96,12 +89,22 @@ public void operationComplete(Future<List<DnsRecord>> future) throws Exception {\n \n                 if (--remaining == 0) {\n                     if (!records.isEmpty()) {\n+                        if (records.size() > 1) {\n+                            final List<DnsRecordType> preferredOrder =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92cf4c82566360b8539fe3d81fb730ffe453c37c"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2507, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}