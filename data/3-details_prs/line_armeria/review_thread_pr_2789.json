{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNTQ5NzY3", "number": 2789, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTo0NTo1N1rOEDuAmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDoxMjowMlrOEFeaHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzM1MDAyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTo0NTo1N1rOGg5lIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTo0NTo1N1rOGg5lIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MTAwOQ==", "bodyText": "I think we couldn't just call it with async method but push the context in it.", "url": "https://github.com/line/armeria/pull/2789#discussion_r437151009", "createdAt": "2020-06-09T05:45:57Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java", "diffHunk": "@@ -248,10 +248,11 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc\n                                                                      exceptionHandler),\n                             ctx.blockingTaskExecutor());\n                 } else {\n-                    return f.thenApply(\n+                    return f.thenApplyAsync(\n                             msg -> new ExceptionFilteredHttpResponse(ctx, req,\n                                                                      (HttpResponse) invoke(ctx, req, msg),\n-                                                                     exceptionHandler));\n+                                                                     exceptionHandler),\n+                            ctx.contextAwareExecutor());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb9e8bf27f5252860d9972ca7ed83f4eb9f48d31"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTc2NTQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java", "isResolved": false, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDoxMjowMlrOGjr2mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzo0MDo0MlrOGkPB6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MTgzMg==", "bodyText": "Question: Do we need to push context here?\nCompositeResponseConverterFunction#convertResponse() pushed context already.\nDoes this seem to be caused when the users use RxJava?\nThen how about pushing context in ObservableResponseConverterFunction?", "url": "https://github.com/line/armeria/pull/2789#discussion_r440071832", "createdAt": "2020-06-15T10:12:02Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java", "diffHunk": "@@ -328,10 +330,11 @@ private HttpResponse convertResponse(ServiceRequestContext ctx, HttpRequest req,\n                     ((CompletionStage<?>) result)\n                             .thenApply(object -> convertResponse(ctx, req, newHeaders, object,\n                                                                  newTrailers))\n-                            .exceptionally(cause -> exceptionHandler.handleException(ctx, req, cause)));\n+                            .exceptionally(\n+                                    cause -> handleExceptionWithContext(exceptionHandler, ctx, req, cause)));\n         }\n \n-        try {\n+        try (SafeCloseable ignored = ctx.push()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbffe904ad141f705aaaec109fe120f43bb2968e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA4NTIzMw==", "bodyText": "Ah I forgot about CompositeResponseConverterFunction.\nWhenever a ResponseConverterFunctionProvider is added, we should add the logic to push the ctx in convertResponse which is a bit cumbersome.\nSo I think we should rather push the ctx here and remove the pushing logic in CompositeResponseConverterFunction.", "url": "https://github.com/line/armeria/pull/2789#discussion_r440085233", "createdAt": "2020-06-15T10:38:04Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java", "diffHunk": "@@ -328,10 +330,11 @@ private HttpResponse convertResponse(ServiceRequestContext ctx, HttpRequest req,\n                     ((CompletionStage<?>) result)\n                             .thenApply(object -> convertResponse(ctx, req, newHeaders, object,\n                                                                  newTrailers))\n-                            .exceptionally(cause -> exceptionHandler.handleException(ctx, req, cause)));\n+                            .exceptionally(\n+                                    cause -> handleExceptionWithContext(exceptionHandler, ctx, req, cause)));\n         }\n \n-        try {\n+        try (SafeCloseable ignored = ctx.push()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MTgzMg=="}, "originalCommit": {"oid": "fbffe904ad141f705aaaec109fe120f43bb2968e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNjk3Nw==", "bodyText": "That also sounds good.", "url": "https://github.com/line/armeria/pull/2789#discussion_r440116977", "createdAt": "2020-06-15T11:44:12Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java", "diffHunk": "@@ -328,10 +330,11 @@ private HttpResponse convertResponse(ServiceRequestContext ctx, HttpRequest req,\n                     ((CompletionStage<?>) result)\n                             .thenApply(object -> convertResponse(ctx, req, newHeaders, object,\n                                                                  newTrailers))\n-                            .exceptionally(cause -> exceptionHandler.handleException(ctx, req, cause)));\n+                            .exceptionally(\n+                                    cause -> handleExceptionWithContext(exceptionHandler, ctx, req, cause)));\n         }\n \n-        try {\n+        try (SafeCloseable ignored = ctx.push()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MTgzMg=="}, "originalCommit": {"oid": "fbffe904ad141f705aaaec109fe120f43bb2968e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyNzEzNA==", "bodyText": "If we remove composite one, https://github.com/line/armeria/pull/2789/files#diff-3d3bc2932102a408e1bd85d2283bbc38R179 will be failed because of jumping thread non armeria thread, and it's http subscriber onNext/onComplete doesn't have ctx, so whenComplete at https://github.com/line/armeria/blob/master/rxjava2/src/main/java/com/linecorp/armeria/server/rxjava2/ObservableResponseConverterFunction.java#L86 won't have ctx with calling https://github.com/line/armeria/blob/master/rxjava2/src/main/java/com/linecorp/armeria/server/rxjava2/ObservableResponseConverterFunction.java#L107.", "url": "https://github.com/line/armeria/pull/2789#discussion_r440527134", "createdAt": "2020-06-16T00:59:52Z", "author": {"login": "kojilin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java", "diffHunk": "@@ -328,10 +330,11 @@ private HttpResponse convertResponse(ServiceRequestContext ctx, HttpRequest req,\n                     ((CompletionStage<?>) result)\n                             .thenApply(object -> convertResponse(ctx, req, newHeaders, object,\n                                                                  newTrailers))\n-                            .exceptionally(cause -> exceptionHandler.handleException(ctx, req, cause)));\n+                            .exceptionally(\n+                                    cause -> handleExceptionWithContext(exceptionHandler, ctx, req, cause)));\n         }\n \n-        try {\n+        try (SafeCloseable ignored = ctx.push()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MTgzMg=="}, "originalCommit": {"oid": "fbffe904ad141f705aaaec109fe120f43bb2968e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUzMjgzNA==", "bodyText": "I think it's okay not to push ctx when a user uses a different scheduler(thread). I think it's the responsibility of the user to push the ctx.\nSo I think we can remove the test case.", "url": "https://github.com/line/armeria/pull/2789#discussion_r440532834", "createdAt": "2020-06-16T01:21:34Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java", "diffHunk": "@@ -328,10 +330,11 @@ private HttpResponse convertResponse(ServiceRequestContext ctx, HttpRequest req,\n                     ((CompletionStage<?>) result)\n                             .thenApply(object -> convertResponse(ctx, req, newHeaders, object,\n                                                                  newTrailers))\n-                            .exceptionally(cause -> exceptionHandler.handleException(ctx, req, cause)));\n+                            .exceptionally(\n+                                    cause -> handleExceptionWithContext(exceptionHandler, ctx, req, cause)));\n         }\n \n-        try {\n+        try (SafeCloseable ignored = ctx.push()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MTgzMg=="}, "originalCommit": {"oid": "fbffe904ad141f705aaaec109fe120f43bb2968e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2OTI2NQ==", "bodyText": "But this means armeria does not guarantee call converter runs with ctx. For me it's good to guarantee it because it's too implicit. but not sure...\ne.g. call mysql/mongdb async\n\nHttpResponse bar(){\n  CompletableFuture future = new CompletableFuture();\n  HttpResponse defer = HttpResponse.of(future);\n  dbClient.call(result -> {\n   // this code runs in db thread.\n   future.complete(...);\n  });\n  return response;\n}\n\nso we need to wrap one more event loop or make context-aware to make a response converter has ctx?\n\nHttpResponse bar(){\n  CompletableFuture future = RequestContext.makeContextAware(new CompletableFuture());\n  HttpResponse defer = ....;\n  dbClient.call(result -> {\n   // this code runs in db thread.\n   future.complete(...); \n  });\n  return response;\n}", "url": "https://github.com/line/armeria/pull/2789#discussion_r440569265", "createdAt": "2020-06-16T03:45:00Z", "author": {"login": "kojilin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java", "diffHunk": "@@ -328,10 +330,11 @@ private HttpResponse convertResponse(ServiceRequestContext ctx, HttpRequest req,\n                     ((CompletionStage<?>) result)\n                             .thenApply(object -> convertResponse(ctx, req, newHeaders, object,\n                                                                  newTrailers))\n-                            .exceptionally(cause -> exceptionHandler.handleException(ctx, req, cause)));\n+                            .exceptionally(\n+                                    cause -> handleExceptionWithContext(exceptionHandler, ctx, req, cause)));\n         }\n \n-        try {\n+        try (SafeCloseable ignored = ctx.push()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MTgzMg=="}, "originalCommit": {"oid": "fbffe904ad141f705aaaec109fe120f43bb2968e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3NzE1MA==", "bodyText": "As we discussed in #2232, we cannot guarantee that the ctx is pushed automatically whenever it's needed.\nA user might use another library(e.g. CompletableFutures from Spotify which we cannot make the returned future context aware) or use another thread such as the example you gave above.\nIf we push the ctx automatically, the first example is going to work in Annotated services.\nBut the same code is not going to work in other services unless a user explicitly pushes the ctx.\nSo it's the matter of acting consistently and being aware of which thread calls the logic. I think we don't have to take acount of pushing ctx in the thread local when another thread is used. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2789#discussion_r440577150", "createdAt": "2020-06-16T04:19:58Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java", "diffHunk": "@@ -328,10 +330,11 @@ private HttpResponse convertResponse(ServiceRequestContext ctx, HttpRequest req,\n                     ((CompletionStage<?>) result)\n                             .thenApply(object -> convertResponse(ctx, req, newHeaders, object,\n                                                                  newTrailers))\n-                            .exceptionally(cause -> exceptionHandler.handleException(ctx, req, cause)));\n+                            .exceptionally(\n+                                    cause -> handleExceptionWithContext(exceptionHandler, ctx, req, cause)));\n         }\n \n-        try {\n+        try (SafeCloseable ignored = ctx.push()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MTgzMg=="}, "originalCommit": {"oid": "fbffe904ad141f705aaaec109fe120f43bb2968e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3ODgwMw==", "bodyText": "I can agree with that, but as a user of annotated service, we should provide a unified experience? like the converter has ctx, so we should make it in ObservableResponseConverterFunction at subscribing phase but not in AnnotatedService as this PR's change, because we should let the user know to get ctx implicitly is lucky but not 100% guarantee. (I mean if we want to make ResponseConverterFunction#convertResponse can has ctx implicitly, we should make it cover all cases?, If not, then we should not modify current code because we don't need to guarantee)\nAnd push here https://github.com/line/armeria/blob/master/rxjava2/src/main/java/com/linecorp/armeria/server/rxjava2/ObservableResponseConverterFunction.java#L76 to let converter wrap ctx by self. Back to one of the original choices.\nI think even it's 3rd libraries future wrapper, we just need to guarantee to call at request/response/error converter, then we can cover all the cases, except writing the converter with async, but due to converter has ctx as a parameter, it's explicitly let user wrap by self.\nLet me think, hmm....which is more reasonable and naturally fit.", "url": "https://github.com/line/armeria/pull/2789#discussion_r440578803", "createdAt": "2020-06-16T04:26:50Z", "author": {"login": "kojilin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java", "diffHunk": "@@ -328,10 +330,11 @@ private HttpResponse convertResponse(ServiceRequestContext ctx, HttpRequest req,\n                     ((CompletionStage<?>) result)\n                             .thenApply(object -> convertResponse(ctx, req, newHeaders, object,\n                                                                  newTrailers))\n-                            .exceptionally(cause -> exceptionHandler.handleException(ctx, req, cause)));\n+                            .exceptionally(\n+                                    cause -> handleExceptionWithContext(exceptionHandler, ctx, req, cause)));\n         }\n \n-        try {\n+        try (SafeCloseable ignored = ctx.push()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MTgzMg=="}, "originalCommit": {"oid": "fbffe904ad141f705aaaec109fe120f43bb2968e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYwNTgzOQ==", "bodyText": "I think even it's 3rd libraries future wrapper, we just need to guarantee to call at request/response/error converter\n\nWhat I meant is not just about the converter but about general cases. For example:\nCompletableFutures.allOf(webClient.get(\"/\").aggregate(), ...).handle((combined, cause) -> {\n    // A user has to push the ctx because we cannot make the future\n    // as contextAwareFuture\n    try (SafeClosealbe ignored = ctx.push()) {\n        ...\n    }\n})\n\nwe should provide a unified experience?\n\nYes, of course! We should do that. Just not sure that using another scheduler is one of the unified experiences.\nAnyway, I think it's no harm to push the ctx in the composite converter, so I guess it's ok as it is. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2789#discussion_r440605839", "createdAt": "2020-06-16T06:06:47Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java", "diffHunk": "@@ -328,10 +330,11 @@ private HttpResponse convertResponse(ServiceRequestContext ctx, HttpRequest req,\n                     ((CompletionStage<?>) result)\n                             .thenApply(object -> convertResponse(ctx, req, newHeaders, object,\n                                                                  newTrailers))\n-                            .exceptionally(cause -> exceptionHandler.handleException(ctx, req, cause)));\n+                            .exceptionally(\n+                                    cause -> handleExceptionWithContext(exceptionHandler, ctx, req, cause)));\n         }\n \n-        try {\n+        try (SafeCloseable ignored = ctx.push()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MTgzMg=="}, "originalCommit": {"oid": "fbffe904ad141f705aaaec109fe120f43bb2968e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY0NjA2MQ==", "bodyText": "I see. I mean I like the current changes and I can remove the ctx check converter. Should we keep it and add to non-rx converter too? If so it means armeria starts to guarantee there is a ctx in the thread when calling request/response/error converters for most cases.", "url": "https://github.com/line/armeria/pull/2789#discussion_r440646061", "createdAt": "2020-06-16T07:36:52Z", "author": {"login": "kojilin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java", "diffHunk": "@@ -328,10 +330,11 @@ private HttpResponse convertResponse(ServiceRequestContext ctx, HttpRequest req,\n                     ((CompletionStage<?>) result)\n                             .thenApply(object -> convertResponse(ctx, req, newHeaders, object,\n                                                                  newTrailers))\n-                            .exceptionally(cause -> exceptionHandler.handleException(ctx, req, cause)));\n+                            .exceptionally(\n+                                    cause -> handleExceptionWithContext(exceptionHandler, ctx, req, cause)));\n         }\n \n-        try {\n+        try (SafeCloseable ignored = ctx.push()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MTgzMg=="}, "originalCommit": {"oid": "fbffe904ad141f705aaaec109fe120f43bb2968e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY0ODE2OQ==", "bodyText": "If so it means armeria starts to guarantee there is a ctx in the thread when calling request/response/error converters for most cases.\n\nYeah, that's the purpose of this PR. \ud83d\ude04 Let's leave it as it is.", "url": "https://github.com/line/armeria/pull/2789#discussion_r440648169", "createdAt": "2020-06-16T07:40:42Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java", "diffHunk": "@@ -328,10 +330,11 @@ private HttpResponse convertResponse(ServiceRequestContext ctx, HttpRequest req,\n                     ((CompletionStage<?>) result)\n                             .thenApply(object -> convertResponse(ctx, req, newHeaders, object,\n                                                                  newTrailers))\n-                            .exceptionally(cause -> exceptionHandler.handleException(ctx, req, cause)));\n+                            .exceptionally(\n+                                    cause -> handleExceptionWithContext(exceptionHandler, ctx, req, cause)));\n         }\n \n-        try {\n+        try (SafeCloseable ignored = ctx.push()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MTgzMg=="}, "originalCommit": {"oid": "fbffe904ad141f705aaaec109fe120f43bb2968e"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2336, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}