{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MDU1MDM1", "number": 2636, "reviewThreads": {"totalCount": 53, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToxMDowM1rODsn33Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNzowMjowNlrODxKN6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTE3MjEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToxMDowM1rOF9kt-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToxMDowM1rOF9kt-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwOTA0OQ==", "bodyText": "a PING frame", "url": "https://github.com/line/armeria/pull/2636#discussion_r400109049", "createdAt": "2020-03-30T11:10:03Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java", "diffHunk": "@@ -219,18 +219,14 @@ public long idleTimeoutMillis() {\n     }\n \n     /**\n-     * Returns the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> timeout in milliseconds.\n+     * Returns the PING interval in milliseconds.\n+     * When neither read nor write was performed for the specified period of time,\n+     * an <a herf=\"https://tools.ietf.org/html/rfc7231#section-4.3.7\">OPTIONS</a> request with an asterisk (\"*\")\n+     * is sent for HTTP/1,\n+     * or <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> frame is sent for HTTP/2.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTE3NTE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientHttp1ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToxMTowNlrOF9kv_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToxMTowNlrOF9kv_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwOTU2Ng==", "bodyText": "Keep the getter and setter together.", "url": "https://github.com/line/armeria/pull/2636#discussion_r400109566", "createdAt": "2020-03-30T11:11:06Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientHttp1ObjectEncoder.java", "diffHunk": "@@ -101,4 +108,21 @@ protected void convertTrailers(HttpHeaders inputHeaders,\n                                    io.netty.handler.codec.http.HttpHeaders outputHeaders) {\n         ArmeriaHttpUtil.toNettyHttp1ClientTrailer(inputHeaders, outputHeaders);\n     }\n+\n+    @Nullable\n+    @Override\n+    public KeepAliveHandler keepAliveHandler() {\n+        return keepAliveHandler;\n+    }\n+\n+    @Override\n+    public void keepAliveWrite(int id) {\n+        if (keepAliveHandler != null && !keepAliveHandler.isPing(id)) {\n+            super.keepAliveWrite(id);\n+        }\n+    }\n+\n+    public void setKeepAliveHandler(Http1ClientKeepAliveHandler keepAliveHandler) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTE4MTQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToxMzowMlrOF9kz-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToxMzowMlrOF9kz-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExMDU4NA==", "bodyText": "Global comment - maybe<Verb><Object>", "url": "https://github.com/line/armeria/pull/2636#discussion_r400110584", "createdAt": "2020-03-30T11:13:02Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java", "diffHunk": "@@ -84,6 +88,11 @@ HttpResponseWrapper addResponse(\n         return resWrapper;\n     }\n \n+    void setKeepAliveHandler(ChannelHandlerContext ctx, KeepAliveHandler keepAliveHandler) {\n+        this.keepAliveHandler = keepAliveHandler;\n+        maybeKeepAliveInitialize(ctx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTE4MjIyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToxMzoyMFrOF9k0gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToxMzoyMFrOF9k0gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExMDcyMg==", "bodyText": "Global comment - <Verb><Object>", "url": "https://github.com/line/armeria/pull/2636#discussion_r400110722", "createdAt": "2020-03-30T11:13:20Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java", "diffHunk": "@@ -96,13 +105,18 @@ private void onWrapperCompleted(HttpResponseWrapper resWrapper, @Nullable Throwa\n     }\n \n     @Override\n-    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {}\n+    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n+        maybeKeepAliveInitialize(ctx);\n+    }\n \n     @Override\n-    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {}\n+    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {\n+        keepAliveDestroy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTE4NDUyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToxMzo1N1rOF9k14w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNjo1NTowNlrOF-HrMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExMTA3NQ==", "bodyText": "Maybe no need to check if registered?", "url": "https://github.com/line/armeria/pull/2636#discussion_r400111075", "createdAt": "2020-03-30T11:13:57Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java", "diffHunk": "@@ -263,4 +284,41 @@ public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exceptio\n     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n         ctx.fireExceptionCaught(cause);\n     }\n+\n+    private void maybeKeepAliveInitialize(ChannelHandlerContext ctx) {\n+        if (keepAliveHandler != null && ctx.channel().isActive() && ctx.channel().isRegistered()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY4MTc3Ng==", "bodyText": "Removed :-)", "url": "https://github.com/line/armeria/pull/2636#discussion_r400681776", "createdAt": "2020-03-31T06:55:06Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java", "diffHunk": "@@ -263,4 +284,41 @@ public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exceptio\n     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n         ctx.fireExceptionCaught(cause);\n     }\n+\n+    private void maybeKeepAliveInitialize(ChannelHandlerContext ctx) {\n+        if (keepAliveHandler != null && ctx.channel().isActive() && ctx.channel().isRegistered()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExMTA3NQ=="}, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTE4NzE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToxNDo0MlrOF9k3fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToxNDo0MlrOF9k3fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExMTQ4NQ==", "bodyText": "keepAlive -> keepAliveHandler", "url": "https://github.com/line/armeria/pull/2636#discussion_r400111485", "createdAt": "2020-03-30T11:14:42Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java", "diffHunk": "@@ -263,4 +284,41 @@ public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exceptio\n     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n         ctx.fireExceptionCaught(cause);\n     }\n+\n+    private void maybeKeepAliveInitialize(ChannelHandlerContext ctx) {\n+        if (keepAliveHandler != null && ctx.channel().isActive() && ctx.channel().isRegistered()) {\n+            keepAliveHandler.initialize(ctx);\n+        }\n+    }\n+\n+    private void keepAliveDestroy() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTE5MzEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToxNjo0M1rOF9k7UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNzoyOTo0OFrOGBK-rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExMjQ2NA==", "bodyText": "What would be the sensible default for this flag?", "url": "https://github.com/line/armeria/pull/2636#discussion_r400112464", "createdAt": "2020-03-30T11:16:43Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -197,10 +197,10 @@\n                     DEFAULT_DEFAULT_CLIENT_IDLE_TIMEOUT_MILLIS,\n                     value -> value >= 0);\n \n-    private static final long DEFAULT_DEFAULT_HTTP2_PING_TIMEOUT_MILLIS = 0; // Disabled\n-    private static final long DEFAULT_HTTP2_PING_TIMEOUT_MILLIS =\n-            getLong(\"defaultHttp2PingTimeoutMillis\",\n-                    DEFAULT_DEFAULT_HTTP2_PING_TIMEOUT_MILLIS,\n+    private static final long DEFAULT_DEFAULT_PING_INTERVAL_MILLIS = 0; // Disabled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY0ODIwOA==", "bodyText": "Hmm... I thought PING is an optional feature. If we turn it on by default, what about 5000 milliseconds?\nBecause the default PING interval should be less than the default idle timeouts.\n\nthe default idle timeout of service-side is 15000 milliseconds\nthe default idle timeout of client-side is 10000 milliseconds", "url": "https://github.com/line/armeria/pull/2636#discussion_r400648208", "createdAt": "2020-03-31T05:14:49Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -197,10 +197,10 @@\n                     DEFAULT_DEFAULT_CLIENT_IDLE_TIMEOUT_MILLIS,\n                     value -> value >= 0);\n \n-    private static final long DEFAULT_DEFAULT_HTTP2_PING_TIMEOUT_MILLIS = 0; // Disabled\n-    private static final long DEFAULT_HTTP2_PING_TIMEOUT_MILLIS =\n-            getLong(\"defaultHttp2PingTimeoutMillis\",\n-                    DEFAULT_DEFAULT_HTTP2_PING_TIMEOUT_MILLIS,\n+    private static final long DEFAULT_DEFAULT_PING_INTERVAL_MILLIS = 0; // Disabled", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExMjQ2NA=="}, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNTc4Mw==", "bodyText": "Sounds good to me. I guess it'll be nice if we do not send ping frames too often so that some HTTP/2 servers reject us, e.g. gRPC-Java has such check. Could you double check? Related issue: #2639", "url": "https://github.com/line/armeria/pull/2636#discussion_r402215783", "createdAt": "2020-04-02T10:36:59Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -197,10 +197,10 @@\n                     DEFAULT_DEFAULT_CLIENT_IDLE_TIMEOUT_MILLIS,\n                     value -> value >= 0);\n \n-    private static final long DEFAULT_DEFAULT_HTTP2_PING_TIMEOUT_MILLIS = 0; // Disabled\n-    private static final long DEFAULT_HTTP2_PING_TIMEOUT_MILLIS =\n-            getLong(\"defaultHttp2PingTimeoutMillis\",\n-                    DEFAULT_DEFAULT_HTTP2_PING_TIMEOUT_MILLIS,\n+    private static final long DEFAULT_DEFAULT_PING_INTERVAL_MILLIS = 0; // Disabled", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExMjQ2NA=="}, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMyODE0OA==", "bodyText": "https://github.com/grpc/proposal/blob/master/A8-client-side-keepalive.md\nThe default keepalive configuration of upstream gRPC server seems to be conservative.\n\nThe default value of permitKeepAliveTime is 5 minutes.\npermitKeepAliveWithoutCalls() is disable by default.\n\nThese means\n\nOur gRPC client should not send a PING frame with no outstand streams\nThe PING interval should be longer than 5 minutes with active streams.\n\nWe might need a different default keepalive configuration for gRPC? Any thoughts? @anuraaga", "url": "https://github.com/line/armeria/pull/2636#discussion_r402328148", "createdAt": "2020-04-02T13:50:04Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -197,10 +197,10 @@\n                     DEFAULT_DEFAULT_CLIENT_IDLE_TIMEOUT_MILLIS,\n                     value -> value >= 0);\n \n-    private static final long DEFAULT_DEFAULT_HTTP2_PING_TIMEOUT_MILLIS = 0; // Disabled\n-    private static final long DEFAULT_HTTP2_PING_TIMEOUT_MILLIS =\n-            getLong(\"defaultHttp2PingTimeoutMillis\",\n-                    DEFAULT_DEFAULT_HTTP2_PING_TIMEOUT_MILLIS,\n+    private static final long DEFAULT_DEFAULT_PING_INTERVAL_MILLIS = 0; // Disabled", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExMjQ2NA=="}, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg1OTE2OQ==", "bodyText": "I guess we need to be as conservative as gRPC-Java by default to prevent any surprises. KeepAliveEnforcer contains the core logic of the defense mechanism: https://github.com/grpc/grpc-java/blob/master/netty/src/main/java/io/grpc/netty/KeepAliveEnforcer.java which seems to be:\n\ninterested only in the interval between PING frames. It doesn't take other traffic into account.\n\nPerhaps we need another parameter, like 'minimum interval between pings'?\n\n\naccepting up to 2 violations (dunno why)", "url": "https://github.com/line/armeria/pull/2636#discussion_r403859169", "createdAt": "2020-04-06T06:39:17Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -197,10 +197,10 @@\n                     DEFAULT_DEFAULT_CLIENT_IDLE_TIMEOUT_MILLIS,\n                     value -> value >= 0);\n \n-    private static final long DEFAULT_DEFAULT_HTTP2_PING_TIMEOUT_MILLIS = 0; // Disabled\n-    private static final long DEFAULT_HTTP2_PING_TIMEOUT_MILLIS =\n-            getLong(\"defaultHttp2PingTimeoutMillis\",\n-                    DEFAULT_DEFAULT_HTTP2_PING_TIMEOUT_MILLIS,\n+    private static final long DEFAULT_DEFAULT_PING_INTERVAL_MILLIS = 0; // Disabled", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExMjQ2NA=="}, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg4MTY0NQ==", "bodyText": "I'm not sure this is useful for us, but gRPC client limits the min ping interval.\nhttps://github.com/grpc/grpc-java/blob/master/core/src/main/java/io/grpc/internal/KeepAliveManager.java#L235-L240", "url": "https://github.com/line/armeria/pull/2636#discussion_r403881645", "createdAt": "2020-04-06T07:29:48Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -197,10 +197,10 @@\n                     DEFAULT_DEFAULT_CLIENT_IDLE_TIMEOUT_MILLIS,\n                     value -> value >= 0);\n \n-    private static final long DEFAULT_DEFAULT_HTTP2_PING_TIMEOUT_MILLIS = 0; // Disabled\n-    private static final long DEFAULT_HTTP2_PING_TIMEOUT_MILLIS =\n-            getLong(\"defaultHttp2PingTimeoutMillis\",\n-                    DEFAULT_DEFAULT_HTTP2_PING_TIMEOUT_MILLIS,\n+    private static final long DEFAULT_DEFAULT_PING_INTERVAL_MILLIS = 0; // Disabled", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExMjQ2NA=="}, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTIyMjgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/Http1RequestDecoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToyNTozNlrOF9lNeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNjo1NToyNVrOF-HroA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExNzExMg==", "bodyText": "Perhaps we can keep accessing it via writer.keepAliveHandler(), instead of adding a new member field?", "url": "https://github.com/line/armeria/pull/2636#discussion_r400117112", "createdAt": "2020-03-30T11:25:36Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/Http1RequestDecoder.java", "diffHunk": "@@ -84,6 +84,8 @@\n     private final AsciiString scheme;\n     private final InboundTrafficController inboundTrafficController;\n     private final ServerHttp1ObjectEncoder writer;\n+    @Nullable\n+    private final KeepAliveHandler keepAliveHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY4MTg4OA==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2636#discussion_r400681888", "createdAt": "2020-03-31T06:55:25Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/Http1RequestDecoder.java", "diffHunk": "@@ -84,6 +84,8 @@\n     private final AsciiString scheme;\n     private final InboundTrafficController inboundTrafficController;\n     private final ServerHttp1ObjectEncoder writer;\n+    @Nullable\n+    private final KeepAliveHandler keepAliveHandler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExNzExMg=="}, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTIyMzQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/Http1RequestDecoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToyNTo1MVrOF9lN4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToyNTo1MVrOF9lN4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExNzIxOA==", "bodyText": "Can be removed because channelActive() will be invoked.", "url": "https://github.com/line/armeria/pull/2636#discussion_r400117218", "createdAt": "2020-03-30T11:25:51Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/Http1RequestDecoder.java", "diffHunk": "@@ -97,6 +99,31 @@\n         this.scheme = scheme;\n         inboundTrafficController = InboundTrafficController.ofHttp1(channel);\n         this.writer = writer;\n+        keepAliveHandler = writer.keepAliveHandler();\n+    }\n+\n+    @Override\n+    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n+        maybeKeepAliveInitialize(ctx);\n+        super.handlerAdded(ctx);\n+    }\n+\n+    @Override\n+    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {\n+        keepAliveDestroy();\n+        super.handlerRemoved(ctx);\n+    }\n+\n+    @Override\n+    public void channelRegistered(ChannelHandlerContext ctx) throws Exception {\n+        maybeKeepAliveInitialize(ctx);\n+        super.channelRegistered(ctx);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTIzMDE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToyNzo0OVrOF9lSAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNjo1Njo1NVrOF-Ht_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExODI3Mg==", "bodyText": "I think this name is highly confusing. Please fine something better.\nThis method doesn't have to be public if I understood correctly.", "url": "https://github.com/line/armeria/pull/2636#discussion_r400118272", "createdAt": "2020-03-30T11:27:49Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpObjectEncoder.java", "diffHunk": "@@ -40,6 +42,16 @@ default EventLoop eventLoop() {\n         return channel().eventLoop();\n     }\n \n+    @Nullable\n+    KeepAliveHandler keepAliveHandler();\n+\n+    default void keepAliveWrite(int id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY4MjQ5NQ==", "bodyText": "Agreed, I removed this method and updated sub classes.", "url": "https://github.com/line/armeria/pull/2636#discussion_r400682495", "createdAt": "2020-03-31T06:56:55Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpObjectEncoder.java", "diffHunk": "@@ -40,6 +42,16 @@ default EventLoop eventLoop() {\n         return channel().eventLoop();\n     }\n \n+    @Nullable\n+    KeepAliveHandler keepAliveHandler();\n+\n+    default void keepAliveWrite(int id) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExODI3Mg=="}, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTIzNDg1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/IdleTimeoutScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToyOToxNFrOF9lUwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToyOToxNFrOF9lUwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExODk3Ng==", "bodyText": "instance that schedules", "url": "https://github.com/line/armeria/pull/2636#discussion_r400118976", "createdAt": "2020-03-30T11:29:14Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/IdleTimeoutScheduler.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.ALL_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_ALL_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_PING_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.PING_IDLE_STATE_EVENT;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.util.internal.ObjectUtil;\n+\n+/**\n+ * A scheduler that triggers an {@link IdleStateEvent} when {@link #onReadOrWrite()} or {@linkplain #onPing()}\n+ * has not invoked for a while.\n+ *\n+ * <h3>Supported idle states</h3>\n+ * <table border=\"1\">\n+ * <tr><th>Property</th><th>Meaning</th></tr>\n+ * <tr>\n+ *   <td>{@code allIdleTime}</td>\n+ *   <td>an {@link IdleStateEvent} whose state is {@link IdleState#ALL_IDLE}\n+ *       will be triggered when neither read nor write was performed for the\n+ *       specified period of time. Specify {@code 0} to disable.</td>\n+ * </tr>\n+ * <tr>\n+ *   <td>{@code pingIdleTime}</td>\n+ *   <td>an {@link IdleStateEvent} whose state is {@link IdleState#PING_IDLE}\n+ *       will be triggered when neither read nor write was performed for the\n+ *       specified period of time. Specify {@code 0} to disable.</td>\n+ * </tr>\n+ * </table>\n+ */\n+abstract class IdleTimeoutScheduler {\n+\n+    // Forked from Netty 4.1.48\n+    // https://github.com/netty/netty/blob/81513c3728df8add3c94fd0bdaaf9ba424925b29/handler/src/main/java/io/netty/handler/timeout/IdleStateHandler.java#L99\n+\n+    private static final Logger logger = LoggerFactory.getLogger(IdleTimeoutScheduler.class);\n+\n+    private static final long MIN_TIMEOUT_NANOS = TimeUnit.MILLISECONDS.toNanos(1);\n+\n+    private static long ticksInNanos() {\n+        return System.nanoTime();\n+    }\n+\n+    private static IdleStateEvent newIdleStateEvent(IdleState state, boolean first) {\n+        switch (state) {\n+            case ALL_IDLE:\n+                return first ? FIRST_ALL_IDLE_STATE_EVENT : ALL_IDLE_STATE_EVENT;\n+            case PING_IDLE:\n+                return first ? FIRST_PING_IDLE_STATE_EVENT : PING_IDLE_STATE_EVENT;\n+            default:\n+                throw new IllegalArgumentException(\"Unhandled: state=\" + state + \", first=\" + first);\n+        }\n+    }\n+\n+    private final long allIdleTimeNanos;\n+    private final long pingIdleTimeNanos;\n+    private final ScheduledExecutorService executor;\n+\n+    @Nullable\n+    private ScheduledFuture<?> allIdleTimeout;\n+    private long lastAllIdleTime;\n+    private boolean firstAllIdleEvent = true;\n+\n+    @Nullable\n+    private ScheduledFuture<?> pingIdleTimeout;\n+    private long lastPingAckTime;\n+    private boolean firstPingIdleEvent = true;\n+\n+    private byte state; // 0 - none, 1 - initialized, 2 - destroyed\n+\n+    /**\n+     * Creates a new instance schedules {@link IdleStateEvent}s.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTI0MDUyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/IdleTimeoutScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTozMTowMlrOF9lYDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTozMTowMlrOF9lYDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExOTgyMw==", "bodyText": "Could be inlined?", "url": "https://github.com/line/armeria/pull/2636#discussion_r400119823", "createdAt": "2020-03-30T11:31:02Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/IdleTimeoutScheduler.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.ALL_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_ALL_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_PING_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.PING_IDLE_STATE_EVENT;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.util.internal.ObjectUtil;\n+\n+/**\n+ * A scheduler that triggers an {@link IdleStateEvent} when {@link #onReadOrWrite()} or {@linkplain #onPing()}\n+ * has not invoked for a while.\n+ *\n+ * <h3>Supported idle states</h3>\n+ * <table border=\"1\">\n+ * <tr><th>Property</th><th>Meaning</th></tr>\n+ * <tr>\n+ *   <td>{@code allIdleTime}</td>\n+ *   <td>an {@link IdleStateEvent} whose state is {@link IdleState#ALL_IDLE}\n+ *       will be triggered when neither read nor write was performed for the\n+ *       specified period of time. Specify {@code 0} to disable.</td>\n+ * </tr>\n+ * <tr>\n+ *   <td>{@code pingIdleTime}</td>\n+ *   <td>an {@link IdleStateEvent} whose state is {@link IdleState#PING_IDLE}\n+ *       will be triggered when neither read nor write was performed for the\n+ *       specified period of time. Specify {@code 0} to disable.</td>\n+ * </tr>\n+ * </table>\n+ */\n+abstract class IdleTimeoutScheduler {\n+\n+    // Forked from Netty 4.1.48\n+    // https://github.com/netty/netty/blob/81513c3728df8add3c94fd0bdaaf9ba424925b29/handler/src/main/java/io/netty/handler/timeout/IdleStateHandler.java#L99\n+\n+    private static final Logger logger = LoggerFactory.getLogger(IdleTimeoutScheduler.class);\n+\n+    private static final long MIN_TIMEOUT_NANOS = TimeUnit.MILLISECONDS.toNanos(1);\n+\n+    private static long ticksInNanos() {\n+        return System.nanoTime();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTI0NzkxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/IdleTimeoutScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTozMzoyMVrOF9lcvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTozMzoyMVrOF9lcvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMTAyMQ==", "bodyText": "allIdle -> just idle or connectionIdle ?", "url": "https://github.com/line/armeria/pull/2636#discussion_r400121021", "createdAt": "2020-03-30T11:33:21Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/IdleTimeoutScheduler.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.ALL_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_ALL_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_PING_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.PING_IDLE_STATE_EVENT;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.util.internal.ObjectUtil;\n+\n+/**\n+ * A scheduler that triggers an {@link IdleStateEvent} when {@link #onReadOrWrite()} or {@linkplain #onPing()}\n+ * has not invoked for a while.\n+ *\n+ * <h3>Supported idle states</h3>\n+ * <table border=\"1\">\n+ * <tr><th>Property</th><th>Meaning</th></tr>\n+ * <tr>\n+ *   <td>{@code allIdleTime}</td>\n+ *   <td>an {@link IdleStateEvent} whose state is {@link IdleState#ALL_IDLE}\n+ *       will be triggered when neither read nor write was performed for the\n+ *       specified period of time. Specify {@code 0} to disable.</td>\n+ * </tr>\n+ * <tr>\n+ *   <td>{@code pingIdleTime}</td>\n+ *   <td>an {@link IdleStateEvent} whose state is {@link IdleState#PING_IDLE}\n+ *       will be triggered when neither read nor write was performed for the\n+ *       specified period of time. Specify {@code 0} to disable.</td>\n+ * </tr>\n+ * </table>\n+ */\n+abstract class IdleTimeoutScheduler {\n+\n+    // Forked from Netty 4.1.48\n+    // https://github.com/netty/netty/blob/81513c3728df8add3c94fd0bdaaf9ba424925b29/handler/src/main/java/io/netty/handler/timeout/IdleStateHandler.java#L99\n+\n+    private static final Logger logger = LoggerFactory.getLogger(IdleTimeoutScheduler.class);\n+\n+    private static final long MIN_TIMEOUT_NANOS = TimeUnit.MILLISECONDS.toNanos(1);\n+\n+    private static long ticksInNanos() {\n+        return System.nanoTime();\n+    }\n+\n+    private static IdleStateEvent newIdleStateEvent(IdleState state, boolean first) {\n+        switch (state) {\n+            case ALL_IDLE:\n+                return first ? FIRST_ALL_IDLE_STATE_EVENT : ALL_IDLE_STATE_EVENT;\n+            case PING_IDLE:\n+                return first ? FIRST_PING_IDLE_STATE_EVENT : PING_IDLE_STATE_EVENT;\n+            default:\n+                throw new IllegalArgumentException(\"Unhandled: state=\" + state + \", first=\" + first);\n+        }\n+    }\n+\n+    private final long allIdleTimeNanos;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTI1MDYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/IdleTimeoutScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTozNDowM1rOF9leUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTozNDowM1rOF9leUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMTQyNg==", "bodyText": "These need to be updated to something similar to what you explained in Flags.", "url": "https://github.com/line/armeria/pull/2636#discussion_r400121426", "createdAt": "2020-03-30T11:34:03Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/IdleTimeoutScheduler.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.ALL_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_ALL_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_PING_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.PING_IDLE_STATE_EVENT;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.util.internal.ObjectUtil;\n+\n+/**\n+ * A scheduler that triggers an {@link IdleStateEvent} when {@link #onReadOrWrite()} or {@linkplain #onPing()}\n+ * has not invoked for a while.\n+ *\n+ * <h3>Supported idle states</h3>\n+ * <table border=\"1\">\n+ * <tr><th>Property</th><th>Meaning</th></tr>\n+ * <tr>\n+ *   <td>{@code allIdleTime}</td>\n+ *   <td>an {@link IdleStateEvent} whose state is {@link IdleState#ALL_IDLE}\n+ *       will be triggered when neither read nor write was performed for the\n+ *       specified period of time. Specify {@code 0} to disable.</td>\n+ * </tr>\n+ * <tr>\n+ *   <td>{@code pingIdleTime}</td>\n+ *   <td>an {@link IdleStateEvent} whose state is {@link IdleState#PING_IDLE}\n+ *       will be triggered when neither read nor write was performed for the\n+ *       specified period of time. Specify {@code 0} to disable.</td>\n+ * </tr>\n+ * </table>\n+ */\n+abstract class IdleTimeoutScheduler {\n+\n+    // Forked from Netty 4.1.48\n+    // https://github.com/netty/netty/blob/81513c3728df8add3c94fd0bdaaf9ba424925b29/handler/src/main/java/io/netty/handler/timeout/IdleStateHandler.java#L99\n+\n+    private static final Logger logger = LoggerFactory.getLogger(IdleTimeoutScheduler.class);\n+\n+    private static final long MIN_TIMEOUT_NANOS = TimeUnit.MILLISECONDS.toNanos(1);\n+\n+    private static long ticksInNanos() {\n+        return System.nanoTime();\n+    }\n+\n+    private static IdleStateEvent newIdleStateEvent(IdleState state, boolean first) {\n+        switch (state) {\n+            case ALL_IDLE:\n+                return first ? FIRST_ALL_IDLE_STATE_EVENT : ALL_IDLE_STATE_EVENT;\n+            case PING_IDLE:\n+                return first ? FIRST_PING_IDLE_STATE_EVENT : PING_IDLE_STATE_EVENT;\n+            default:\n+                throw new IllegalArgumentException(\"Unhandled: state=\" + state + \", first=\" + first);\n+        }\n+    }\n+\n+    private final long allIdleTimeNanos;\n+    private final long pingIdleTimeNanos;\n+    private final ScheduledExecutorService executor;\n+\n+    @Nullable\n+    private ScheduledFuture<?> allIdleTimeout;\n+    private long lastAllIdleTime;\n+    private boolean firstAllIdleEvent = true;\n+\n+    @Nullable\n+    private ScheduledFuture<?> pingIdleTimeout;\n+    private long lastPingAckTime;\n+    private boolean firstPingIdleEvent = true;\n+\n+    private byte state; // 0 - none, 1 - initialized, 2 - destroyed\n+\n+    /**\n+     * Creates a new instance schedules {@link IdleStateEvent}s.\n+     *\n+     * @param allIdleTime an {@link IdleStateEvent} whose state is {@link IdleState#ALL_IDLE}\n+     *                    will be triggered when neither read nor write was performed for\n+     *                    the specified period of time. Specify {@code 0} to disable.\n+     * @param pingIdleTime an {@link IdleStateEvent} whose state is {@link IdleState#PING_IDLE}\n+     *                     will be triggered when neither read nor write was performed for\n+     *                     the specified period of time. Specify {@code 0} to disable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTI2MTYzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/IdleTimeoutScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTozNzoyMlrOF9llLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTozNzoyMlrOF9llLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMzE4MQ==", "bodyText": "Could you update the comments in this class to reflect its actual behavior?", "url": "https://github.com/line/armeria/pull/2636#discussion_r400123181", "createdAt": "2020-03-30T11:37:22Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/IdleTimeoutScheduler.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.ALL_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_ALL_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_PING_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.PING_IDLE_STATE_EVENT;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.util.internal.ObjectUtil;\n+\n+/**\n+ * A scheduler that triggers an {@link IdleStateEvent} when {@link #onReadOrWrite()} or {@linkplain #onPing()}\n+ * has not invoked for a while.\n+ *\n+ * <h3>Supported idle states</h3>\n+ * <table border=\"1\">\n+ * <tr><th>Property</th><th>Meaning</th></tr>\n+ * <tr>\n+ *   <td>{@code allIdleTime}</td>\n+ *   <td>an {@link IdleStateEvent} whose state is {@link IdleState#ALL_IDLE}\n+ *       will be triggered when neither read nor write was performed for the\n+ *       specified period of time. Specify {@code 0} to disable.</td>\n+ * </tr>\n+ * <tr>\n+ *   <td>{@code pingIdleTime}</td>\n+ *   <td>an {@link IdleStateEvent} whose state is {@link IdleState#PING_IDLE}\n+ *       will be triggered when neither read nor write was performed for the\n+ *       specified period of time. Specify {@code 0} to disable.</td>\n+ * </tr>\n+ * </table>\n+ */\n+abstract class IdleTimeoutScheduler {\n+\n+    // Forked from Netty 4.1.48\n+    // https://github.com/netty/netty/blob/81513c3728df8add3c94fd0bdaaf9ba424925b29/handler/src/main/java/io/netty/handler/timeout/IdleStateHandler.java#L99\n+\n+    private static final Logger logger = LoggerFactory.getLogger(IdleTimeoutScheduler.class);\n+\n+    private static final long MIN_TIMEOUT_NANOS = TimeUnit.MILLISECONDS.toNanos(1);\n+\n+    private static long ticksInNanos() {\n+        return System.nanoTime();\n+    }\n+\n+    private static IdleStateEvent newIdleStateEvent(IdleState state, boolean first) {\n+        switch (state) {\n+            case ALL_IDLE:\n+                return first ? FIRST_ALL_IDLE_STATE_EVENT : ALL_IDLE_STATE_EVENT;\n+            case PING_IDLE:\n+                return first ? FIRST_PING_IDLE_STATE_EVENT : PING_IDLE_STATE_EVENT;\n+            default:\n+                throw new IllegalArgumentException(\"Unhandled: state=\" + state + \", first=\" + first);\n+        }\n+    }\n+\n+    private final long allIdleTimeNanos;\n+    private final long pingIdleTimeNanos;\n+    private final ScheduledExecutorService executor;\n+\n+    @Nullable\n+    private ScheduledFuture<?> allIdleTimeout;\n+    private long lastAllIdleTime;\n+    private boolean firstAllIdleEvent = true;\n+\n+    @Nullable\n+    private ScheduledFuture<?> pingIdleTimeout;\n+    private long lastPingAckTime;\n+    private boolean firstPingIdleEvent = true;\n+\n+    private byte state; // 0 - none, 1 - initialized, 2 - destroyed\n+\n+    /**\n+     * Creates a new instance schedules {@link IdleStateEvent}s.\n+     *\n+     * @param allIdleTime an {@link IdleStateEvent} whose state is {@link IdleState#ALL_IDLE}\n+     *                    will be triggered when neither read nor write was performed for\n+     *                    the specified period of time. Specify {@code 0} to disable.\n+     * @param pingIdleTime an {@link IdleStateEvent} whose state is {@link IdleState#PING_IDLE}\n+     *                     will be triggered when neither read nor write was performed for\n+     *                     the specified period of time. Specify {@code 0} to disable.\n+     * @param unit the {@link TimeUnit}\n+     * @param executor the executor to schedule a timeout to trigger an {@link IdleStateEvent}.\n+     */\n+    IdleTimeoutScheduler(long allIdleTime, long pingIdleTime, TimeUnit unit,\n+                         ScheduledExecutorService executor) {\n+        ObjectUtil.checkNotNull(unit, \"unit\");\n+        this.executor = executor;\n+\n+        if (allIdleTime <= 0) {\n+            allIdleTimeNanos = 0;\n+        } else {\n+            allIdleTimeNanos = Math.max(unit.toNanos(allIdleTime), MIN_TIMEOUT_NANOS);\n+        }\n+        if (pingIdleTime <= 0) {\n+            pingIdleTimeNanos = 0;\n+        } else {\n+            pingIdleTimeNanos = Math.max(unit.toNanos(pingIdleTime), MIN_TIMEOUT_NANOS);\n+        }\n+    }\n+\n+    public void onReadOrWrite() {\n+        if (allIdleTimeNanos > 0 || pingIdleTimeNanos > 0) {\n+            lastAllIdleTime = lastPingAckTime = ticksInNanos();\n+            firstAllIdleEvent = firstPingIdleEvent = true;\n+        }\n+    }\n+\n+    public void onPing() {\n+        if (pingIdleTimeNanos > 0) {\n+            firstPingIdleEvent = true;\n+            lastPingAckTime = ticksInNanos();\n+        }\n+    }\n+\n+    public void initialize(ChannelHandlerContext ctx) {\n+        // Avoid the case where destroy() is called before scheduling timeouts.\n+        // See: https://github.com/netty/netty/issues/143\n+        switch (state) {\n+            case 1:\n+            case 2:\n+                return;\n+        }\n+\n+        state = 1;\n+\n+        if (allIdleTimeNanos > 0) {\n+            allIdleTimeout = executor.schedule(new AllIdleTimeoutTask(ctx),\n+                                               allIdleTimeNanos, TimeUnit.NANOSECONDS);\n+        }\n+        if (pingIdleTimeNanos > 0) {\n+            pingIdleTimeout = executor.schedule(new PingIdleTimeoutTask(ctx),\n+                                                pingIdleTimeNanos, TimeUnit.NANOSECONDS);\n+        }\n+    }\n+\n+    public void destroy() {\n+        state = 2;\n+        if (allIdleTimeout != null) {\n+            allIdleTimeout.cancel(false);\n+            allIdleTimeout = null;\n+        }\n+        if (pingIdleTimeout != null) {\n+            pingIdleTimeout.cancel(false);\n+            pingIdleTimeout = null;\n+        }\n+    }\n+\n+    protected abstract void onIdleEvent(ChannelHandlerContext ctx, IdleStateEvent evt);\n+\n+    private abstract static class AbstractIdleTask implements Runnable {\n+\n+        private final ChannelHandlerContext ctx;\n+\n+        AbstractIdleTask(ChannelHandlerContext ctx) {\n+            this.ctx = ctx;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (!ctx.channel().isOpen()) {\n+                return;\n+            }\n+\n+            run(ctx);\n+        }\n+\n+        protected abstract void run(ChannelHandlerContext ctx);\n+    }\n+\n+    private final class AllIdleTimeoutTask extends AbstractIdleTask {\n+\n+        private boolean warn;\n+\n+        AllIdleTimeoutTask(ChannelHandlerContext ctx) {\n+            super(ctx);\n+        }\n+\n+        @Override\n+        protected void run(ChannelHandlerContext ctx) {\n+\n+            final long lastAllIdleTime = IdleTimeoutScheduler.this.lastAllIdleTime;\n+            final long nextDelay = allIdleTimeNanos - (ticksInNanos() - lastAllIdleTime);\n+            if (nextDelay <= 0) {\n+                // Both reader and writer are idle - set a new timeout and\n+                // notify the callback.\n+                allIdleTimeout = executor.schedule(this, allIdleTimeNanos, TimeUnit.NANOSECONDS);\n+\n+                final boolean first = firstAllIdleEvent;\n+                firstAllIdleEvent = false;\n+                final IdleStateEvent event = newIdleStateEvent(IdleState.ALL_IDLE, first);\n+                try {\n+                    onIdleEvent(ctx, event);\n+                } catch (Exception e) {\n+                    if (!warn) {\n+                        logger.warn(\"An error occurred while notifying an all idle event\", e);\n+                        warn = true;\n+                    }\n+                }\n+            } else {\n+                // Either read or write occurred before the timeout - set a new\n+                // timeout with shorter delay.\n+                allIdleTimeout = executor.schedule(this, nextDelay, TimeUnit.NANOSECONDS);\n+            }\n+        }\n+    }\n+\n+    private final class PingIdleTimeoutTask extends AbstractIdleTask {\n+\n+        private boolean warn;\n+\n+        PingIdleTimeoutTask(ChannelHandlerContext ctx) {\n+            super(ctx);\n+        }\n+\n+        @Override\n+        protected void run(ChannelHandlerContext ctx) {\n+\n+            final long lastPingAckTime = IdleTimeoutScheduler.this.lastPingAckTime;\n+            final long nextDelay = pingIdleTimeNanos - (ticksInNanos() - lastPingAckTime);\n+            if (nextDelay <= 0) {\n+                // Ping is idle - set a new timeout and notify the callback.\n+                pingIdleTimeout = executor.schedule(this, pingIdleTimeNanos, TimeUnit.NANOSECONDS);\n+\n+                final boolean first = firstPingIdleEvent;\n+                firstPingIdleEvent = false;\n+\n+                final IdleStateEvent event = newIdleStateEvent(IdleState.PING_IDLE, first);\n+                try {\n+                    onIdleEvent(ctx, event);\n+                } catch (Exception e) {\n+                    if (!warn) {\n+                        logger.warn(\"An error occurred while notifying a ping idle event\", e);\n+                        warn = true;\n+                    }\n+                }\n+            } else {\n+                // Ping occurred before the timeout - set a new timeout with shorter delay.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 261}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTI2ODU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTozOToyOFrOF9lpiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMzo0Njo1NFrOF-ERxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyNDI5Nw==", "bodyText": "How about merging the two classes into one given that IdleTimeoutScheduler is always used together with KeepAliveHandler?", "url": "https://github.com/line/armeria/pull/2636#discussion_r400124297", "createdAt": "2020-03-30T11:39:28Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Stopwatch;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+\n+/**\n+ * A {@link IdleTimeoutScheduler} that writes a PING when neither read nor write was performed for\n+ * the specified {@code pingIntervalMillis}, and closes the connection\n+ * when neither read nor write was performed within the given {@code idleTimeoutMillis}.\n+ */\n+public abstract class KeepAliveHandler extends IdleTimeoutScheduler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYyNjExOQ==", "bodyText": "That sounds good. \ud83d\udc4d It can simplify the hierarchy.", "url": "https://github.com/line/armeria/pull/2636#discussion_r400626119", "createdAt": "2020-03-31T03:46:54Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Stopwatch;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+\n+/**\n+ * A {@link IdleTimeoutScheduler} that writes a PING when neither read nor write was performed for\n+ * the specified {@code pingIntervalMillis}, and closes the connection\n+ * when neither read nor write was performed within the given {@code idleTimeoutMillis}.\n+ */\n+public abstract class KeepAliveHandler extends IdleTimeoutScheduler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyNDI5Nw=="}, "originalCommit": {"oid": "3d98d18da9d33e2c643271ac33e837d0f8ff8746"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTY0MTA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientHttp1ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDo0Mjo0N1rOF-PwYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDo0Mjo0N1rOF-PwYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxNDE3OQ==", "bodyText": "Can remove public?", "url": "https://github.com/line/armeria/pull/2636#discussion_r400814179", "createdAt": "2020-03-31T10:42:47Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientHttp1ObjectEncoder.java", "diffHunk": "@@ -101,4 +108,19 @@ protected void convertTrailers(HttpHeaders inputHeaders,\n                                    io.netty.handler.codec.http.HttpHeaders outputHeaders) {\n         ArmeriaHttpUtil.toNettyHttp1ClientTrailer(inputHeaders, outputHeaders);\n     }\n+\n+    @Nullable\n+    @Override\n+    public KeepAliveHandler keepAliveHandler() {\n+        return keepAliveHandler;\n+    }\n+\n+    public void setKeepAliveHandler(Http1ClientKeepAliveHandler keepAliveHandler) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODc0MjA0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/Http1ClientKeepAliveHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMTozMzozNFrOF-t2Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMTozMzozNFrOF-t2Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwNzIwMg==", "bodyText": "How about making a field for HttpSession and use it instead of channel?", "url": "https://github.com/line/armeria/pull/2636#discussion_r401307202", "createdAt": "2020-04-01T01:33:34Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/Http1ClientKeepAliveHandler.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.internal.common.KeepAliveHandler;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelHandlerContext;\n+\n+final class Http1ClientKeepAliveHandler extends KeepAliveHandler {\n+\n+    private static final RequestHeaders HTTP1_PING_REQUEST = RequestHeaders.of(HttpMethod.OPTIONS, \"*\");\n+\n+    private final Channel channel;\n+    private final ClientHttp1ObjectEncoder encoder;\n+    private final Http1ResponseDecoder decoder;\n+\n+    Http1ClientKeepAliveHandler(Channel channel, ClientHttp1ObjectEncoder encoder, Http1ResponseDecoder decoder,\n+                                long idleTimeoutMillis, long pingIntervalMillis) {\n+        super(channel, \"client\", idleTimeoutMillis, pingIntervalMillis);\n+        this.channel = requireNonNull(channel, \"channel\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODc1MTIyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/Http1ClientKeepAliveHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMTozOTo0MVrOF-t76g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMTozOTo0MVrOF-t76g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwODY1MA==", "bodyText": "nit: we could just set 0 for streamId because it's not used.", "url": "https://github.com/line/armeria/pull/2636#discussion_r401308650", "createdAt": "2020-04-01T01:39:41Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/Http1ClientKeepAliveHandler.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.internal.common.KeepAliveHandler;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelHandlerContext;\n+\n+final class Http1ClientKeepAliveHandler extends KeepAliveHandler {\n+\n+    private static final RequestHeaders HTTP1_PING_REQUEST = RequestHeaders.of(HttpMethod.OPTIONS, \"*\");\n+\n+    private final Channel channel;\n+    private final ClientHttp1ObjectEncoder encoder;\n+    private final Http1ResponseDecoder decoder;\n+\n+    Http1ClientKeepAliveHandler(Channel channel, ClientHttp1ObjectEncoder encoder, Http1ResponseDecoder decoder,\n+                                long idleTimeoutMillis, long pingIntervalMillis) {\n+        super(channel, \"client\", idleTimeoutMillis, pingIntervalMillis);\n+        this.channel = requireNonNull(channel, \"channel\");\n+        this.encoder = requireNonNull(encoder, \"encoder\");\n+        this.decoder = requireNonNull(decoder, \"decoder\");\n+    }\n+\n+    @Override\n+    protected ChannelFuture writePing(ChannelHandlerContext ctx) {\n+        final HttpSession httpSession = HttpSession.get(channel);\n+        final int id = httpSession.incrementAndGetNumRequestsSent();\n+        final int streamId = (id << 1) + 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODgzNTgwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjozMToxM1rOF-uudA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjozMToxM1rOF-uudA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyMTU4OA==", "bodyText": "It seems like we can replace this to a boolean field like isInitialized?", "url": "https://github.com/line/armeria/pull/2636#discussion_r401321588", "createdAt": "2020-04-01T02:31:13Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.CONNECTION_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_CONNECTION_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_PING_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.PING_IDLE_STATE_EVENT;\n+\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Stopwatch;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+\n+/**\n+ * A {@link KeepAliveHandler} that writes a PING when neither read nor write was performed for\n+ * the specified {@code pingIntervalMillis}, and closes the connection\n+ * when neither read nor write was performed within the given {@code idleTimeoutMillis}.\n+ */\n+public abstract class KeepAliveHandler {\n+\n+    // Forked from Netty 4.1.48\n+    // https://github.com/netty/netty/blob/81513c3728df8add3c94fd0bdaaf9ba424925b29/handler/src/main/java/io/netty/handler/timeout/IdleStateEvent.java\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KeepAliveHandler.class);\n+\n+    private static final long MIN_TIMEOUT_NANOS = TimeUnit.MILLISECONDS.toNanos(1);\n+\n+    private static IdleStateEvent newIdleStateEvent(IdleState state, boolean first) {\n+        switch (state) {\n+            case CONNECTION_IDLE:\n+                return first ? FIRST_CONNECTION_IDLE_STATE_EVENT : CONNECTION_IDLE_STATE_EVENT;\n+            case PING_IDLE:\n+                return first ? FIRST_PING_IDLE_STATE_EVENT : PING_IDLE_STATE_EVENT;\n+            default:\n+                throw new IllegalArgumentException(\"Unhandled: state=\" + state + \", first=\" + first);\n+        }\n+    }\n+\n+    @Nullable\n+    private final Stopwatch stopwatch = logger.isDebugEnabled() ? Stopwatch.createUnstarted() : null;\n+    private final ChannelFutureListener pingWriteListener = new PingWriteListener();\n+    private final Runnable shutdownRunnable = this::closeChannelAndLog;\n+\n+    private final Channel channel;\n+    private final String name;\n+\n+    @Nullable\n+    private ScheduledFuture<?> connectionIdleTimeout;\n+    private final long connectionIdleTimeNanos;\n+    private long lastConnectionIdleTime;\n+    private boolean firstConnectionIdleEvent = true;\n+\n+    @Nullable\n+    private ScheduledFuture<?> pingIdleTimeout;\n+    private final long pingIdleTimeNanos;\n+    private long lastPingIdleTime;\n+    private boolean firstPingIdleEvent = true;\n+\n+    private byte state; // 0 - none, 1 - initialized, 2 - destroyed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODg3MzczOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjo1MzozMlrOF-vEZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOTozNzo1NVrOF-4okw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyNzIwNw==", "bodyText": "Can't we just assign TimeUnit.MILLISECONDS.toNanos(idleTimeoutMillis)?", "url": "https://github.com/line/armeria/pull/2636#discussion_r401327207", "createdAt": "2020-04-01T02:53:32Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.CONNECTION_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_CONNECTION_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_PING_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.PING_IDLE_STATE_EVENT;\n+\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Stopwatch;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+\n+/**\n+ * A {@link KeepAliveHandler} that writes a PING when neither read nor write was performed for\n+ * the specified {@code pingIntervalMillis}, and closes the connection\n+ * when neither read nor write was performed within the given {@code idleTimeoutMillis}.\n+ */\n+public abstract class KeepAliveHandler {\n+\n+    // Forked from Netty 4.1.48\n+    // https://github.com/netty/netty/blob/81513c3728df8add3c94fd0bdaaf9ba424925b29/handler/src/main/java/io/netty/handler/timeout/IdleStateEvent.java\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KeepAliveHandler.class);\n+\n+    private static final long MIN_TIMEOUT_NANOS = TimeUnit.MILLISECONDS.toNanos(1);\n+\n+    private static IdleStateEvent newIdleStateEvent(IdleState state, boolean first) {\n+        switch (state) {\n+            case CONNECTION_IDLE:\n+                return first ? FIRST_CONNECTION_IDLE_STATE_EVENT : CONNECTION_IDLE_STATE_EVENT;\n+            case PING_IDLE:\n+                return first ? FIRST_PING_IDLE_STATE_EVENT : PING_IDLE_STATE_EVENT;\n+            default:\n+                throw new IllegalArgumentException(\"Unhandled: state=\" + state + \", first=\" + first);\n+        }\n+    }\n+\n+    @Nullable\n+    private final Stopwatch stopwatch = logger.isDebugEnabled() ? Stopwatch.createUnstarted() : null;\n+    private final ChannelFutureListener pingWriteListener = new PingWriteListener();\n+    private final Runnable shutdownRunnable = this::closeChannelAndLog;\n+\n+    private final Channel channel;\n+    private final String name;\n+\n+    @Nullable\n+    private ScheduledFuture<?> connectionIdleTimeout;\n+    private final long connectionIdleTimeNanos;\n+    private long lastConnectionIdleTime;\n+    private boolean firstConnectionIdleEvent = true;\n+\n+    @Nullable\n+    private ScheduledFuture<?> pingIdleTimeout;\n+    private final long pingIdleTimeNanos;\n+    private long lastPingIdleTime;\n+    private boolean firstPingIdleEvent = true;\n+\n+    private byte state; // 0 - none, 1 - initialized, 2 - destroyed\n+\n+    @Nullable\n+    private ChannelFuture pingWriteFuture;\n+    @Nullable\n+    private Future<?> shutdownFuture;\n+    private PingState pingState = PingState.IDLE;\n+\n+    protected KeepAliveHandler(Channel channel, String name, long idleTimeoutMillis, long pingIntervalMillis) {\n+        this.channel = channel;\n+        this.name = name;\n+\n+        if (idleTimeoutMillis <= 0) {\n+            connectionIdleTimeNanos = 0;\n+        } else {\n+            connectionIdleTimeNanos = Math.max(TimeUnit.MILLISECONDS.toNanos(idleTimeoutMillis),\n+                                               MIN_TIMEOUT_NANOS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ4MzkyMw==", "bodyText": "Thanks for pointing out, no longer needed. \ud83d\ude00", "url": "https://github.com/line/armeria/pull/2636#discussion_r401483923", "createdAt": "2020-04-01T09:37:55Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.CONNECTION_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_CONNECTION_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_PING_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.PING_IDLE_STATE_EVENT;\n+\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Stopwatch;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+\n+/**\n+ * A {@link KeepAliveHandler} that writes a PING when neither read nor write was performed for\n+ * the specified {@code pingIntervalMillis}, and closes the connection\n+ * when neither read nor write was performed within the given {@code idleTimeoutMillis}.\n+ */\n+public abstract class KeepAliveHandler {\n+\n+    // Forked from Netty 4.1.48\n+    // https://github.com/netty/netty/blob/81513c3728df8add3c94fd0bdaaf9ba424925b29/handler/src/main/java/io/netty/handler/timeout/IdleStateEvent.java\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KeepAliveHandler.class);\n+\n+    private static final long MIN_TIMEOUT_NANOS = TimeUnit.MILLISECONDS.toNanos(1);\n+\n+    private static IdleStateEvent newIdleStateEvent(IdleState state, boolean first) {\n+        switch (state) {\n+            case CONNECTION_IDLE:\n+                return first ? FIRST_CONNECTION_IDLE_STATE_EVENT : CONNECTION_IDLE_STATE_EVENT;\n+            case PING_IDLE:\n+                return first ? FIRST_PING_IDLE_STATE_EVENT : PING_IDLE_STATE_EVENT;\n+            default:\n+                throw new IllegalArgumentException(\"Unhandled: state=\" + state + \", first=\" + first);\n+        }\n+    }\n+\n+    @Nullable\n+    private final Stopwatch stopwatch = logger.isDebugEnabled() ? Stopwatch.createUnstarted() : null;\n+    private final ChannelFutureListener pingWriteListener = new PingWriteListener();\n+    private final Runnable shutdownRunnable = this::closeChannelAndLog;\n+\n+    private final Channel channel;\n+    private final String name;\n+\n+    @Nullable\n+    private ScheduledFuture<?> connectionIdleTimeout;\n+    private final long connectionIdleTimeNanos;\n+    private long lastConnectionIdleTime;\n+    private boolean firstConnectionIdleEvent = true;\n+\n+    @Nullable\n+    private ScheduledFuture<?> pingIdleTimeout;\n+    private final long pingIdleTimeNanos;\n+    private long lastPingIdleTime;\n+    private boolean firstPingIdleEvent = true;\n+\n+    private byte state; // 0 - none, 1 - initialized, 2 - destroyed\n+\n+    @Nullable\n+    private ChannelFuture pingWriteFuture;\n+    @Nullable\n+    private Future<?> shutdownFuture;\n+    private PingState pingState = PingState.IDLE;\n+\n+    protected KeepAliveHandler(Channel channel, String name, long idleTimeoutMillis, long pingIntervalMillis) {\n+        this.channel = channel;\n+        this.name = name;\n+\n+        if (idleTimeoutMillis <= 0) {\n+            connectionIdleTimeNanos = 0;\n+        } else {\n+            connectionIdleTimeNanos = Math.max(TimeUnit.MILLISECONDS.toNanos(idleTimeoutMillis),\n+                                               MIN_TIMEOUT_NANOS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyNzIwNw=="}, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODg3Mzg2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjo1MzozOVrOF-vEfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjo1MzozOVrOF-vEfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyNzIzMQ==", "bodyText": "ditto", "url": "https://github.com/line/armeria/pull/2636#discussion_r401327231", "createdAt": "2020-04-01T02:53:39Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.CONNECTION_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_CONNECTION_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_PING_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.PING_IDLE_STATE_EVENT;\n+\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Stopwatch;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+\n+/**\n+ * A {@link KeepAliveHandler} that writes a PING when neither read nor write was performed for\n+ * the specified {@code pingIntervalMillis}, and closes the connection\n+ * when neither read nor write was performed within the given {@code idleTimeoutMillis}.\n+ */\n+public abstract class KeepAliveHandler {\n+\n+    // Forked from Netty 4.1.48\n+    // https://github.com/netty/netty/blob/81513c3728df8add3c94fd0bdaaf9ba424925b29/handler/src/main/java/io/netty/handler/timeout/IdleStateEvent.java\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KeepAliveHandler.class);\n+\n+    private static final long MIN_TIMEOUT_NANOS = TimeUnit.MILLISECONDS.toNanos(1);\n+\n+    private static IdleStateEvent newIdleStateEvent(IdleState state, boolean first) {\n+        switch (state) {\n+            case CONNECTION_IDLE:\n+                return first ? FIRST_CONNECTION_IDLE_STATE_EVENT : CONNECTION_IDLE_STATE_EVENT;\n+            case PING_IDLE:\n+                return first ? FIRST_PING_IDLE_STATE_EVENT : PING_IDLE_STATE_EVENT;\n+            default:\n+                throw new IllegalArgumentException(\"Unhandled: state=\" + state + \", first=\" + first);\n+        }\n+    }\n+\n+    @Nullable\n+    private final Stopwatch stopwatch = logger.isDebugEnabled() ? Stopwatch.createUnstarted() : null;\n+    private final ChannelFutureListener pingWriteListener = new PingWriteListener();\n+    private final Runnable shutdownRunnable = this::closeChannelAndLog;\n+\n+    private final Channel channel;\n+    private final String name;\n+\n+    @Nullable\n+    private ScheduledFuture<?> connectionIdleTimeout;\n+    private final long connectionIdleTimeNanos;\n+    private long lastConnectionIdleTime;\n+    private boolean firstConnectionIdleEvent = true;\n+\n+    @Nullable\n+    private ScheduledFuture<?> pingIdleTimeout;\n+    private final long pingIdleTimeNanos;\n+    private long lastPingIdleTime;\n+    private boolean firstPingIdleEvent = true;\n+\n+    private byte state; // 0 - none, 1 - initialized, 2 - destroyed\n+\n+    @Nullable\n+    private ChannelFuture pingWriteFuture;\n+    @Nullable\n+    private Future<?> shutdownFuture;\n+    private PingState pingState = PingState.IDLE;\n+\n+    protected KeepAliveHandler(Channel channel, String name, long idleTimeoutMillis, long pingIntervalMillis) {\n+        this.channel = channel;\n+        this.name = name;\n+\n+        if (idleTimeoutMillis <= 0) {\n+            connectionIdleTimeNanos = 0;\n+        } else {\n+            connectionIdleTimeNanos = Math.max(TimeUnit.MILLISECONDS.toNanos(idleTimeoutMillis),\n+                                               MIN_TIMEOUT_NANOS);\n+        }\n+        if (pingIntervalMillis <= 0) {\n+            pingIdleTimeNanos = 0;\n+        } else {\n+            pingIdleTimeNanos = Math.max(TimeUnit.MILLISECONDS.toNanos(pingIntervalMillis), MIN_TIMEOUT_NANOS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODg3OTc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/Http2KeepAliveHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjo1NzoyNlrOF-vIJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjo1NzoyNlrOF-vIJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyODE2NA==", "bodyText": "indentation?", "url": "https://github.com/line/armeria/pull/2636#discussion_r401328164", "createdAt": "2020-04-01T02:57:26Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/Http2KeepAliveHandler.java", "diffHunk": "@@ -33,134 +32,56 @@\n import com.google.common.base.Stopwatch;\n \n import com.linecorp.armeria.common.Flags;\n-import com.linecorp.armeria.common.util.Exceptions;\n \n import io.netty.channel.Channel;\n import io.netty.channel.ChannelFuture;\n-import io.netty.channel.ChannelFutureListener;\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.channel.EventLoop;\n-import io.netty.handler.codec.http2.Http2Connection;\n import io.netty.handler.codec.http2.Http2FrameWriter;\n import io.netty.handler.codec.http2.Http2PingFrame;\n-import io.netty.handler.timeout.IdleState;\n-import io.netty.handler.timeout.IdleStateEvent;\n-import io.netty.handler.timeout.IdleStateHandler;\n \n /**\n- * This will send an {@link Http2PingFrame} when an {@link IdleStateEvent} is emitted by {@link\n- * IdleStateHandler} and {@link Flags#defaultHttp2PingTimeoutMillis()} is greater that zero.\n- *\n- * <p>Once an {@link IdleStateEvent} is triggered and when there are active streams open then a\n- * {@link Http2PingFrame} will be written on connection. When there are no active streams then it depends on\n- * {@link Flags#defaultUseHttp2PingWhenNoActiveStreams()}.\n+ * A {@link KeepAliveHandler} that sends HTTP2 PING frame\n+ * when neither read nor write was performed within the specified {@code pingIntervalMillis},\n+ * and closes the connection when neither read nor write was performed within\n+ * the given {@code idleTimeoutMillis}.\n  *\n  * <p>Once a {@link Http2PingFrame} is written, then either an ACK for the {@link Http2PingFrame} or any data\n- * is read on connection will invalidate the condition that triggers connection closure. If either of the\n- * conditions are not met then the connection will be closed.\n+ * is read on connection will invalidate the condition that triggers connection closure.\n  *\n  * <p>This class is <b>not</b> thread-safe and all methods are to be called from single thread such\n  * as {@link EventLoop}.\n  *\n- * @see Flags#defaultUseHttp2PingWhenNoActiveStreams()\n- * @see Flags#defaultHttp2PingTimeoutMillis()\n+ * @see Flags#defaultClientIdleTimeoutMillis()\n+ * @see Flags#defaultServerIdleTimeoutMillis()\n+ * @see Flags#defaultPingIntervalMillis()\n  */\n @NotThreadSafe\n-public class Http2KeepAliveHandler {\n+public abstract class Http2KeepAliveHandler extends KeepAliveHandler {\n \n     private static final Logger logger = LoggerFactory.getLogger(Http2KeepAliveHandler.class);\n \n     @Nullable\n     private final Stopwatch stopwatch = logger.isDebugEnabled() ? Stopwatch.createUnstarted() : null;\n-    private final boolean sendPingsOnNoActiveStreams;\n-    private final long pingTimeoutMillis;\n     private final Http2FrameWriter frameWriter;\n     private final ThreadLocalRandom random = ThreadLocalRandom.current();\n-    private final Http2Connection http2Connection;\n     private final Channel channel;\n-    private final ChannelFutureListener pingWriteListener = new PingWriteListener();\n-    private final Runnable shutdownRunnable = this::closeChannelAndLog;\n \n-    @Nullable\n-    private ChannelFuture pingWriteFuture;\n-    @Nullable\n-    private Future<?> shutdownFuture;\n     private long lastPingPayload;\n-    private State state = State.IDLE;\n \n-    public Http2KeepAliveHandler(Channel channel, Http2FrameWriter frameWriter, Http2Connection http2Connection,\n-                                 long pingTimeoutMillis, boolean sendPingsOnNoActiveStreams) {\n-        checkArgument(pingTimeoutMillis > 0, pingTimeoutMillis);\n+    protected Http2KeepAliveHandler(Channel channel, Http2FrameWriter frameWriter,\n+                                 String name, long idleTimeoutMillis, long pingIntervalMillis) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODg4NjgwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzowMTo1MVrOF-vMVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOTo0MzoxMFrOF-41EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyOTIzOQ==", "bodyText": "Seems like Http2ResponseDecoder checks if keepAliveHandler is null or not in onPingRead.\nI think we should do the same approach: assert or null check.", "url": "https://github.com/line/armeria/pull/2636#discussion_r401329239", "createdAt": "2020-04-01T03:01:51Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java", "diffHunk": "@@ -263,4 +284,41 @@ public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exceptio\n     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n         ctx.fireExceptionCaught(cause);\n     }\n+\n+    private void maybeInitializeKeepAliveHandler(ChannelHandlerContext ctx) {\n+        if (keepAliveHandler != null && ctx.channel().isActive()) {\n+            keepAliveHandler.initialize(ctx);\n+        }\n+    }\n+\n+    private void destroyKeepAliveHandler() {\n+        if (keepAliveHandler != null) {\n+            keepAliveHandler.destroy();\n+        }\n+    }\n+\n+    private void onPingRead(Object msg) {\n+        if (msg instanceof LastHttpContent) {\n+            onPingComplete();\n+        } else {\n+            keepAliveHandler.onPing();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ4NzEyMA==", "bodyText": "This method is called when isPing() is true so I didn't add a null check.\nHowever, it looks good to add assert.", "url": "https://github.com/line/armeria/pull/2636#discussion_r401487120", "createdAt": "2020-04-01T09:43:10Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java", "diffHunk": "@@ -263,4 +284,41 @@ public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exceptio\n     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n         ctx.fireExceptionCaught(cause);\n     }\n+\n+    private void maybeInitializeKeepAliveHandler(ChannelHandlerContext ctx) {\n+        if (keepAliveHandler != null && ctx.channel().isActive()) {\n+            keepAliveHandler.initialize(ctx);\n+        }\n+    }\n+\n+    private void destroyKeepAliveHandler() {\n+        if (keepAliveHandler != null) {\n+            keepAliveHandler.destroy();\n+        }\n+    }\n+\n+    private void onPingRead(Object msg) {\n+        if (msg instanceof LastHttpContent) {\n+            onPingComplete();\n+        } else {\n+            keepAliveHandler.onPing();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyOTIzOQ=="}, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODkzNzM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzozMzozMlrOF-vqFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOTo0Nzo0NVrOF-4_hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzNjg1NQ==", "bodyText": "a PING?", "url": "https://github.com/line/armeria/pull/2636#discussion_r401336855", "createdAt": "2020-04-01T03:33:32Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -702,36 +700,20 @@ public static boolean defaultUseHttp1Pipelining() {\n     }\n \n     /**\n-     * Returns whether to send <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a>\n-     * frames on a HTTP/2 connection when it is idle and there are no active HTTP/2 stream.\n+     * Returns the default value for the PING interval.\n+     * An <a herf=\"https://tools.ietf.org/html/rfc7231#section-4.3.7\">OPTIONS</a> request with an asterisk (\"*\")\n+     * is sent for HTTP/1 client, or\n+     * <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> frame is sent for HTTP/2 server and client.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ4OTc5OA==", "bodyText": "Oops, I've fixed it yesterday, but didn't push it. \ud83d\ude31", "url": "https://github.com/line/armeria/pull/2636#discussion_r401489798", "createdAt": "2020-04-01T09:47:45Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -702,36 +700,20 @@ public static boolean defaultUseHttp1Pipelining() {\n     }\n \n     /**\n-     * Returns whether to send <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a>\n-     * frames on a HTTP/2 connection when it is idle and there are no active HTTP/2 stream.\n+     * Returns the default value for the PING interval.\n+     * An <a herf=\"https://tools.ietf.org/html/rfc7231#section-4.3.7\">OPTIONS</a> request with an asterisk (\"*\")\n+     * is sent for HTTP/1 client, or\n+     * <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> frame is sent for HTTP/2 server and client.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzNjg1NQ=="}, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODk1MTA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/Http2KeepAliveHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzo0MjozNFrOF-vx3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzo0MjozNFrOF-vx3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzODg0Nw==", "bodyText": "not relevant to this change but is it This condition can be false ...?", "url": "https://github.com/line/armeria/pull/2636#discussion_r401338847", "createdAt": "2020-04-01T03:42:34Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/Http2KeepAliveHandler.java", "diffHunk": "@@ -169,21 +90,21 @@ public void onPingAck(long data) {\n             return;\n         }\n \n+        onPing();\n+        final Future<?> shutdownFuture = shutdownFuture();\n         if (shutdownFuture != null) {\n             final boolean isCancelled = shutdownFuture.cancel(false);\n             if (!isCancelled) {\n                 logger.debug(\"{} shutdownFuture cannot be cancelled because of late PING ACK\", channel);\n             }\n         }\n         logger.debug(\"{} PING(ACK=1, DATA={}) received in {} ns\", channel, lastPingPayload, elapsed);\n-        state = State.IDLE;\n-        resetFutures();\n     }\n \n     private boolean isGoodPingAck(long data) {\n         // This condition can be true when channel read some data other than PING ACK frame", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODk1ODI1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzo0Njo0OFrOF-v1vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzo0Njo0OFrOF-v1vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzOTgzNw==", "bodyText": "@Nullable?", "url": "https://github.com/line/armeria/pull/2636#discussion_r401339837", "createdAt": "2020-04-01T03:46:48Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.CONNECTION_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_CONNECTION_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_PING_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.PING_IDLE_STATE_EVENT;\n+\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Stopwatch;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+\n+/**\n+ * A {@link KeepAliveHandler} that writes a PING when neither read nor write was performed for\n+ * the specified {@code pingIntervalMillis}, and closes the connection\n+ * when neither read nor write was performed within the given {@code idleTimeoutMillis}.\n+ */\n+public abstract class KeepAliveHandler {\n+\n+    // Forked from Netty 4.1.48\n+    // https://github.com/netty/netty/blob/81513c3728df8add3c94fd0bdaaf9ba424925b29/handler/src/main/java/io/netty/handler/timeout/IdleStateEvent.java\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KeepAliveHandler.class);\n+\n+    private static final long MIN_TIMEOUT_NANOS = TimeUnit.MILLISECONDS.toNanos(1);\n+\n+    private static IdleStateEvent newIdleStateEvent(IdleState state, boolean first) {\n+        switch (state) {\n+            case CONNECTION_IDLE:\n+                return first ? FIRST_CONNECTION_IDLE_STATE_EVENT : CONNECTION_IDLE_STATE_EVENT;\n+            case PING_IDLE:\n+                return first ? FIRST_PING_IDLE_STATE_EVENT : PING_IDLE_STATE_EVENT;\n+            default:\n+                throw new IllegalArgumentException(\"Unhandled: state=\" + state + \", first=\" + first);\n+        }\n+    }\n+\n+    @Nullable\n+    private final Stopwatch stopwatch = logger.isDebugEnabled() ? Stopwatch.createUnstarted() : null;\n+    private final ChannelFutureListener pingWriteListener = new PingWriteListener();\n+    private final Runnable shutdownRunnable = this::closeChannelAndLog;\n+\n+    private final Channel channel;\n+    private final String name;\n+\n+    @Nullable\n+    private ScheduledFuture<?> connectionIdleTimeout;\n+    private final long connectionIdleTimeNanos;\n+    private long lastConnectionIdleTime;\n+    private boolean firstConnectionIdleEvent = true;\n+\n+    @Nullable\n+    private ScheduledFuture<?> pingIdleTimeout;\n+    private final long pingIdleTimeNanos;\n+    private long lastPingIdleTime;\n+    private boolean firstPingIdleEvent = true;\n+\n+    private byte state; // 0 - none, 1 - initialized, 2 - destroyed\n+\n+    @Nullable\n+    private ChannelFuture pingWriteFuture;\n+    @Nullable\n+    private Future<?> shutdownFuture;\n+    private PingState pingState = PingState.IDLE;\n+\n+    protected KeepAliveHandler(Channel channel, String name, long idleTimeoutMillis, long pingIntervalMillis) {\n+        this.channel = channel;\n+        this.name = name;\n+\n+        if (idleTimeoutMillis <= 0) {\n+            connectionIdleTimeNanos = 0;\n+        } else {\n+            connectionIdleTimeNanos = Math.max(TimeUnit.MILLISECONDS.toNanos(idleTimeoutMillis),\n+                                               MIN_TIMEOUT_NANOS);\n+        }\n+        if (pingIntervalMillis <= 0) {\n+            pingIdleTimeNanos = 0;\n+        } else {\n+            pingIdleTimeNanos = Math.max(TimeUnit.MILLISECONDS.toNanos(pingIntervalMillis), MIN_TIMEOUT_NANOS);\n+        }\n+    }\n+\n+    public final void initialize(ChannelHandlerContext ctx) {\n+        // Avoid the case where destroy() is called before scheduling timeouts.\n+        // See: https://github.com/netty/netty/issues/143\n+        switch (state) {\n+            case 1:\n+            case 2:\n+                return;\n+        }\n+\n+        state = 1;\n+\n+        if (connectionIdleTimeNanos > 0) {\n+            connectionIdleTimeout = executor().schedule(new ConnectionIdleTimeoutTask(ctx),\n+                                                        connectionIdleTimeNanos, TimeUnit.NANOSECONDS);\n+        }\n+        if (pingIdleTimeNanos > 0) {\n+            pingIdleTimeout = executor().schedule(new PingIdleTimeoutTask(ctx),\n+                                                  pingIdleTimeNanos, TimeUnit.NANOSECONDS);\n+        }\n+    }\n+\n+    public final void destroy() {\n+        state = 2;\n+        if (connectionIdleTimeout != null) {\n+            connectionIdleTimeout.cancel(false);\n+            connectionIdleTimeout = null;\n+        }\n+        if (pingIdleTimeout != null) {\n+            pingIdleTimeout.cancel(false);\n+            pingIdleTimeout = null;\n+        }\n+        pingState = PingState.SHUTDOWN;\n+        cancelFutures();\n+    }\n+\n+    public final void onReadOrWrite() {\n+        if (pingState == PingState.SHUTDOWN) {\n+            return;\n+        }\n+\n+        if (connectionIdleTimeNanos > 0 || pingIdleTimeNanos > 0) {\n+            lastConnectionIdleTime = lastPingIdleTime = System.nanoTime();\n+            firstConnectionIdleEvent = firstPingIdleEvent = true;\n+        }\n+        pingState = PingState.IDLE;\n+        cancelFutures();\n+    }\n+\n+    public final void onPing() {\n+        if (pingState == PingState.SHUTDOWN) {\n+            return;\n+        }\n+\n+        if (pingIdleTimeNanos > 0) {\n+            firstPingIdleEvent = true;\n+            lastPingIdleTime = System.nanoTime();\n+        }\n+        pingState = PingState.IDLE;\n+        cancelFutures();\n+    }\n+\n+    protected abstract ChannelFuture writePing(ChannelHandlerContext ctx);\n+\n+    protected abstract boolean hasRequestsInProgress(ChannelHandlerContext ctx);\n+\n+    protected final Future<?> shutdownFuture() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTE0NjU3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNTo0Mjo1NlrOF-xiwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNTo0Mjo1NlrOF-xiwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM2Nzc0Ng==", "bodyText": "Could just do this after newIdleStateEvent is called and remove first.", "url": "https://github.com/line/armeria/pull/2636#discussion_r401367746", "createdAt": "2020-04-01T05:42:56Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.CONNECTION_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_CONNECTION_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_PING_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.PING_IDLE_STATE_EVENT;\n+\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Stopwatch;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+\n+/**\n+ * A {@link KeepAliveHandler} that writes a PING when neither read nor write was performed for\n+ * the specified {@code pingIntervalMillis}, and closes the connection\n+ * when neither read nor write was performed within the given {@code idleTimeoutMillis}.\n+ */\n+public abstract class KeepAliveHandler {\n+\n+    // Forked from Netty 4.1.48\n+    // https://github.com/netty/netty/blob/81513c3728df8add3c94fd0bdaaf9ba424925b29/handler/src/main/java/io/netty/handler/timeout/IdleStateEvent.java\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KeepAliveHandler.class);\n+\n+    private static final long MIN_TIMEOUT_NANOS = TimeUnit.MILLISECONDS.toNanos(1);\n+\n+    private static IdleStateEvent newIdleStateEvent(IdleState state, boolean first) {\n+        switch (state) {\n+            case CONNECTION_IDLE:\n+                return first ? FIRST_CONNECTION_IDLE_STATE_EVENT : CONNECTION_IDLE_STATE_EVENT;\n+            case PING_IDLE:\n+                return first ? FIRST_PING_IDLE_STATE_EVENT : PING_IDLE_STATE_EVENT;\n+            default:\n+                throw new IllegalArgumentException(\"Unhandled: state=\" + state + \", first=\" + first);\n+        }\n+    }\n+\n+    @Nullable\n+    private final Stopwatch stopwatch = logger.isDebugEnabled() ? Stopwatch.createUnstarted() : null;\n+    private final ChannelFutureListener pingWriteListener = new PingWriteListener();\n+    private final Runnable shutdownRunnable = this::closeChannelAndLog;\n+\n+    private final Channel channel;\n+    private final String name;\n+\n+    @Nullable\n+    private ScheduledFuture<?> connectionIdleTimeout;\n+    private final long connectionIdleTimeNanos;\n+    private long lastConnectionIdleTime;\n+    private boolean firstConnectionIdleEvent = true;\n+\n+    @Nullable\n+    private ScheduledFuture<?> pingIdleTimeout;\n+    private final long pingIdleTimeNanos;\n+    private long lastPingIdleTime;\n+    private boolean firstPingIdleEvent = true;\n+\n+    private byte state; // 0 - none, 1 - initialized, 2 - destroyed\n+\n+    @Nullable\n+    private ChannelFuture pingWriteFuture;\n+    @Nullable\n+    private Future<?> shutdownFuture;\n+    private PingState pingState = PingState.IDLE;\n+\n+    protected KeepAliveHandler(Channel channel, String name, long idleTimeoutMillis, long pingIntervalMillis) {\n+        this.channel = channel;\n+        this.name = name;\n+\n+        if (idleTimeoutMillis <= 0) {\n+            connectionIdleTimeNanos = 0;\n+        } else {\n+            connectionIdleTimeNanos = Math.max(TimeUnit.MILLISECONDS.toNanos(idleTimeoutMillis),\n+                                               MIN_TIMEOUT_NANOS);\n+        }\n+        if (pingIntervalMillis <= 0) {\n+            pingIdleTimeNanos = 0;\n+        } else {\n+            pingIdleTimeNanos = Math.max(TimeUnit.MILLISECONDS.toNanos(pingIntervalMillis), MIN_TIMEOUT_NANOS);\n+        }\n+    }\n+\n+    public final void initialize(ChannelHandlerContext ctx) {\n+        // Avoid the case where destroy() is called before scheduling timeouts.\n+        // See: https://github.com/netty/netty/issues/143\n+        switch (state) {\n+            case 1:\n+            case 2:\n+                return;\n+        }\n+\n+        state = 1;\n+\n+        if (connectionIdleTimeNanos > 0) {\n+            connectionIdleTimeout = executor().schedule(new ConnectionIdleTimeoutTask(ctx),\n+                                                        connectionIdleTimeNanos, TimeUnit.NANOSECONDS);\n+        }\n+        if (pingIdleTimeNanos > 0) {\n+            pingIdleTimeout = executor().schedule(new PingIdleTimeoutTask(ctx),\n+                                                  pingIdleTimeNanos, TimeUnit.NANOSECONDS);\n+        }\n+    }\n+\n+    public final void destroy() {\n+        state = 2;\n+        if (connectionIdleTimeout != null) {\n+            connectionIdleTimeout.cancel(false);\n+            connectionIdleTimeout = null;\n+        }\n+        if (pingIdleTimeout != null) {\n+            pingIdleTimeout.cancel(false);\n+            pingIdleTimeout = null;\n+        }\n+        pingState = PingState.SHUTDOWN;\n+        cancelFutures();\n+    }\n+\n+    public final void onReadOrWrite() {\n+        if (pingState == PingState.SHUTDOWN) {\n+            return;\n+        }\n+\n+        if (connectionIdleTimeNanos > 0 || pingIdleTimeNanos > 0) {\n+            lastConnectionIdleTime = lastPingIdleTime = System.nanoTime();\n+            firstConnectionIdleEvent = firstPingIdleEvent = true;\n+        }\n+        pingState = PingState.IDLE;\n+        cancelFutures();\n+    }\n+\n+    public final void onPing() {\n+        if (pingState == PingState.SHUTDOWN) {\n+            return;\n+        }\n+\n+        if (pingIdleTimeNanos > 0) {\n+            firstPingIdleEvent = true;\n+            lastPingIdleTime = System.nanoTime();\n+        }\n+        pingState = PingState.IDLE;\n+        cancelFutures();\n+    }\n+\n+    protected abstract ChannelFuture writePing(ChannelHandlerContext ctx);\n+\n+    protected abstract boolean hasRequestsInProgress(ChannelHandlerContext ctx);\n+\n+    protected final Future<?> shutdownFuture() {\n+        return shutdownFuture;\n+    }\n+\n+    protected final boolean isPendingPingAck() {\n+        return pingState == PingState.PENDING_PING_ACK;\n+    }\n+\n+    @VisibleForTesting\n+    final PingState state() {\n+        return pingState;\n+    }\n+\n+    @VisibleForTesting\n+    void onIdleEvent(ChannelHandlerContext ctx, IdleStateEvent evt) {\n+        if (evt.state() == IdleState.CONNECTION_IDLE && evt.isFirst()) {\n+            if (!hasRequestsInProgress(ctx)) {\n+                pingState = PingState.SHUTDOWN;\n+                logger.debug(\"{} Closing an idle {} connection\", ctx.channel(), name);\n+                ctx.channel().close();\n+            }\n+            return;\n+        }\n+\n+        if (pingIdleTimeNanos > 0 && evt.state() == IdleState.PING_IDLE && evt.isFirst()) {\n+            pingState = PingState.PING_SCHEDULED;\n+            writePing(ctx).addListener(pingWriteListener);\n+        }\n+    }\n+\n+    private void cancelFutures() {\n+        if (shutdownFuture != null) {\n+            shutdownFuture.cancel(false);\n+            shutdownFuture = null;\n+        }\n+        if (pingWriteFuture != null) {\n+            pingWriteFuture.cancel(false);\n+            pingWriteFuture = null;\n+        }\n+    }\n+\n+    private void closeChannelAndLog() {\n+        if (pingState == PingState.SHUTDOWN) {\n+            return;\n+        }\n+        logger.debug(\"{} Closing an idle channel\", channel);\n+        channel.close().addListener(future -> {\n+            if (future.isSuccess()) {\n+                logger.debug(\"{} Closed an idle channel\", channel);\n+            } else {\n+                logger.debug(\"{} Failed to close an idle channel\", channel, future.cause());\n+            }\n+            pingState = PingState.SHUTDOWN;\n+        });\n+    }\n+\n+    private ScheduledExecutorService executor() {\n+        return channel.eventLoop();\n+    }\n+\n+    /**\n+     * State changes from IDLE -> PING_SCHEDULED -> PENDING_PING_ACK -> IDLE and so on. When the\n+     * channel is inactive then the state changes to SHUTDOWN.\n+     */\n+    @VisibleForTesting\n+    enum PingState {\n+        /* Nothing happening, but waiting for IdleStateEvent */\n+        IDLE,\n+\n+        /* PING is scheduled */\n+        PING_SCHEDULED,\n+\n+        /* PING is sent and is pending ACK */\n+        PENDING_PING_ACK,\n+\n+        /* Not active anymore */\n+        SHUTDOWN\n+    }\n+\n+    private class PingWriteListener implements ChannelFutureListener {\n+\n+        @Override\n+        public void operationComplete(ChannelFuture future) throws Exception {\n+            if (future.isSuccess()) {\n+                logger.debug(\"{} PING write successful\", channel);\n+                final EventLoop el = channel.eventLoop();\n+                shutdownFuture = el.schedule(shutdownRunnable, pingIdleTimeNanos, TimeUnit.NANOSECONDS);\n+                pingState = PingState.PENDING_PING_ACK;\n+                resetStopwatch();\n+            } else {\n+                // Mostly because the channel is already closed. So ignore and change state to IDLE.\n+                // If the channel is closed, we change state to SHUTDOWN on destroy.\n+                if (!future.isCancelled() && Exceptions.isExpected(future.cause())) {\n+                    logger.debug(\"{} PING write failed\", channel, future.cause());\n+                }\n+                if (pingState != PingState.SHUTDOWN) {\n+                    pingState = PingState.IDLE;\n+                }\n+            }\n+        }\n+\n+        private void resetStopwatch() {\n+            if (stopwatch != null) {\n+                stopwatch.reset().start();\n+            }\n+        }\n+    }\n+\n+    private abstract static class AbstractIdleTask implements Runnable {\n+\n+        private final ChannelHandlerContext ctx;\n+\n+        AbstractIdleTask(ChannelHandlerContext ctx) {\n+            this.ctx = ctx;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (!ctx.channel().isOpen()) {\n+                return;\n+            }\n+\n+            run(ctx);\n+        }\n+\n+        protected abstract void run(ChannelHandlerContext ctx);\n+    }\n+\n+    private final class ConnectionIdleTimeoutTask extends AbstractIdleTask {\n+\n+        private boolean warn;\n+\n+        ConnectionIdleTimeoutTask(ChannelHandlerContext ctx) {\n+            super(ctx);\n+        }\n+\n+        @Override\n+        protected void run(ChannelHandlerContext ctx) {\n+\n+            final long lastConnectionIdleTime = KeepAliveHandler.this.lastConnectionIdleTime;\n+            final long nextDelay = connectionIdleTimeNanos - (System.nanoTime() - lastConnectionIdleTime);\n+            if (nextDelay <= 0) {\n+                // Both reader and writer are idle - set a new timeout and\n+                // notify the callback.\n+                connectionIdleTimeout = executor().schedule(this, connectionIdleTimeNanos,\n+                                                            TimeUnit.NANOSECONDS);\n+\n+                final boolean first = firstConnectionIdleEvent;\n+                firstConnectionIdleEvent = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 343}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTE0ODM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNTo0Mzo1N1rOF-xj3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNTo0Mzo1N1rOF-xj3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM2ODAyOA==", "bodyText": "ditto", "url": "https://github.com/line/armeria/pull/2636#discussion_r401368028", "createdAt": "2020-04-01T05:43:57Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.CONNECTION_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_CONNECTION_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_PING_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.PING_IDLE_STATE_EVENT;\n+\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Stopwatch;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+\n+/**\n+ * A {@link KeepAliveHandler} that writes a PING when neither read nor write was performed for\n+ * the specified {@code pingIntervalMillis}, and closes the connection\n+ * when neither read nor write was performed within the given {@code idleTimeoutMillis}.\n+ */\n+public abstract class KeepAliveHandler {\n+\n+    // Forked from Netty 4.1.48\n+    // https://github.com/netty/netty/blob/81513c3728df8add3c94fd0bdaaf9ba424925b29/handler/src/main/java/io/netty/handler/timeout/IdleStateEvent.java\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KeepAliveHandler.class);\n+\n+    private static final long MIN_TIMEOUT_NANOS = TimeUnit.MILLISECONDS.toNanos(1);\n+\n+    private static IdleStateEvent newIdleStateEvent(IdleState state, boolean first) {\n+        switch (state) {\n+            case CONNECTION_IDLE:\n+                return first ? FIRST_CONNECTION_IDLE_STATE_EVENT : CONNECTION_IDLE_STATE_EVENT;\n+            case PING_IDLE:\n+                return first ? FIRST_PING_IDLE_STATE_EVENT : PING_IDLE_STATE_EVENT;\n+            default:\n+                throw new IllegalArgumentException(\"Unhandled: state=\" + state + \", first=\" + first);\n+        }\n+    }\n+\n+    @Nullable\n+    private final Stopwatch stopwatch = logger.isDebugEnabled() ? Stopwatch.createUnstarted() : null;\n+    private final ChannelFutureListener pingWriteListener = new PingWriteListener();\n+    private final Runnable shutdownRunnable = this::closeChannelAndLog;\n+\n+    private final Channel channel;\n+    private final String name;\n+\n+    @Nullable\n+    private ScheduledFuture<?> connectionIdleTimeout;\n+    private final long connectionIdleTimeNanos;\n+    private long lastConnectionIdleTime;\n+    private boolean firstConnectionIdleEvent = true;\n+\n+    @Nullable\n+    private ScheduledFuture<?> pingIdleTimeout;\n+    private final long pingIdleTimeNanos;\n+    private long lastPingIdleTime;\n+    private boolean firstPingIdleEvent = true;\n+\n+    private byte state; // 0 - none, 1 - initialized, 2 - destroyed\n+\n+    @Nullable\n+    private ChannelFuture pingWriteFuture;\n+    @Nullable\n+    private Future<?> shutdownFuture;\n+    private PingState pingState = PingState.IDLE;\n+\n+    protected KeepAliveHandler(Channel channel, String name, long idleTimeoutMillis, long pingIntervalMillis) {\n+        this.channel = channel;\n+        this.name = name;\n+\n+        if (idleTimeoutMillis <= 0) {\n+            connectionIdleTimeNanos = 0;\n+        } else {\n+            connectionIdleTimeNanos = Math.max(TimeUnit.MILLISECONDS.toNanos(idleTimeoutMillis),\n+                                               MIN_TIMEOUT_NANOS);\n+        }\n+        if (pingIntervalMillis <= 0) {\n+            pingIdleTimeNanos = 0;\n+        } else {\n+            pingIdleTimeNanos = Math.max(TimeUnit.MILLISECONDS.toNanos(pingIntervalMillis), MIN_TIMEOUT_NANOS);\n+        }\n+    }\n+\n+    public final void initialize(ChannelHandlerContext ctx) {\n+        // Avoid the case where destroy() is called before scheduling timeouts.\n+        // See: https://github.com/netty/netty/issues/143\n+        switch (state) {\n+            case 1:\n+            case 2:\n+                return;\n+        }\n+\n+        state = 1;\n+\n+        if (connectionIdleTimeNanos > 0) {\n+            connectionIdleTimeout = executor().schedule(new ConnectionIdleTimeoutTask(ctx),\n+                                                        connectionIdleTimeNanos, TimeUnit.NANOSECONDS);\n+        }\n+        if (pingIdleTimeNanos > 0) {\n+            pingIdleTimeout = executor().schedule(new PingIdleTimeoutTask(ctx),\n+                                                  pingIdleTimeNanos, TimeUnit.NANOSECONDS);\n+        }\n+    }\n+\n+    public final void destroy() {\n+        state = 2;\n+        if (connectionIdleTimeout != null) {\n+            connectionIdleTimeout.cancel(false);\n+            connectionIdleTimeout = null;\n+        }\n+        if (pingIdleTimeout != null) {\n+            pingIdleTimeout.cancel(false);\n+            pingIdleTimeout = null;\n+        }\n+        pingState = PingState.SHUTDOWN;\n+        cancelFutures();\n+    }\n+\n+    public final void onReadOrWrite() {\n+        if (pingState == PingState.SHUTDOWN) {\n+            return;\n+        }\n+\n+        if (connectionIdleTimeNanos > 0 || pingIdleTimeNanos > 0) {\n+            lastConnectionIdleTime = lastPingIdleTime = System.nanoTime();\n+            firstConnectionIdleEvent = firstPingIdleEvent = true;\n+        }\n+        pingState = PingState.IDLE;\n+        cancelFutures();\n+    }\n+\n+    public final void onPing() {\n+        if (pingState == PingState.SHUTDOWN) {\n+            return;\n+        }\n+\n+        if (pingIdleTimeNanos > 0) {\n+            firstPingIdleEvent = true;\n+            lastPingIdleTime = System.nanoTime();\n+        }\n+        pingState = PingState.IDLE;\n+        cancelFutures();\n+    }\n+\n+    protected abstract ChannelFuture writePing(ChannelHandlerContext ctx);\n+\n+    protected abstract boolean hasRequestsInProgress(ChannelHandlerContext ctx);\n+\n+    protected final Future<?> shutdownFuture() {\n+        return shutdownFuture;\n+    }\n+\n+    protected final boolean isPendingPingAck() {\n+        return pingState == PingState.PENDING_PING_ACK;\n+    }\n+\n+    @VisibleForTesting\n+    final PingState state() {\n+        return pingState;\n+    }\n+\n+    @VisibleForTesting\n+    void onIdleEvent(ChannelHandlerContext ctx, IdleStateEvent evt) {\n+        if (evt.state() == IdleState.CONNECTION_IDLE && evt.isFirst()) {\n+            if (!hasRequestsInProgress(ctx)) {\n+                pingState = PingState.SHUTDOWN;\n+                logger.debug(\"{} Closing an idle {} connection\", ctx.channel(), name);\n+                ctx.channel().close();\n+            }\n+            return;\n+        }\n+\n+        if (pingIdleTimeNanos > 0 && evt.state() == IdleState.PING_IDLE && evt.isFirst()) {\n+            pingState = PingState.PING_SCHEDULED;\n+            writePing(ctx).addListener(pingWriteListener);\n+        }\n+    }\n+\n+    private void cancelFutures() {\n+        if (shutdownFuture != null) {\n+            shutdownFuture.cancel(false);\n+            shutdownFuture = null;\n+        }\n+        if (pingWriteFuture != null) {\n+            pingWriteFuture.cancel(false);\n+            pingWriteFuture = null;\n+        }\n+    }\n+\n+    private void closeChannelAndLog() {\n+        if (pingState == PingState.SHUTDOWN) {\n+            return;\n+        }\n+        logger.debug(\"{} Closing an idle channel\", channel);\n+        channel.close().addListener(future -> {\n+            if (future.isSuccess()) {\n+                logger.debug(\"{} Closed an idle channel\", channel);\n+            } else {\n+                logger.debug(\"{} Failed to close an idle channel\", channel, future.cause());\n+            }\n+            pingState = PingState.SHUTDOWN;\n+        });\n+    }\n+\n+    private ScheduledExecutorService executor() {\n+        return channel.eventLoop();\n+    }\n+\n+    /**\n+     * State changes from IDLE -> PING_SCHEDULED -> PENDING_PING_ACK -> IDLE and so on. When the\n+     * channel is inactive then the state changes to SHUTDOWN.\n+     */\n+    @VisibleForTesting\n+    enum PingState {\n+        /* Nothing happening, but waiting for IdleStateEvent */\n+        IDLE,\n+\n+        /* PING is scheduled */\n+        PING_SCHEDULED,\n+\n+        /* PING is sent and is pending ACK */\n+        PENDING_PING_ACK,\n+\n+        /* Not active anymore */\n+        SHUTDOWN\n+    }\n+\n+    private class PingWriteListener implements ChannelFutureListener {\n+\n+        @Override\n+        public void operationComplete(ChannelFuture future) throws Exception {\n+            if (future.isSuccess()) {\n+                logger.debug(\"{} PING write successful\", channel);\n+                final EventLoop el = channel.eventLoop();\n+                shutdownFuture = el.schedule(shutdownRunnable, pingIdleTimeNanos, TimeUnit.NANOSECONDS);\n+                pingState = PingState.PENDING_PING_ACK;\n+                resetStopwatch();\n+            } else {\n+                // Mostly because the channel is already closed. So ignore and change state to IDLE.\n+                // If the channel is closed, we change state to SHUTDOWN on destroy.\n+                if (!future.isCancelled() && Exceptions.isExpected(future.cause())) {\n+                    logger.debug(\"{} PING write failed\", channel, future.cause());\n+                }\n+                if (pingState != PingState.SHUTDOWN) {\n+                    pingState = PingState.IDLE;\n+                }\n+            }\n+        }\n+\n+        private void resetStopwatch() {\n+            if (stopwatch != null) {\n+                stopwatch.reset().start();\n+            }\n+        }\n+    }\n+\n+    private abstract static class AbstractIdleTask implements Runnable {\n+\n+        private final ChannelHandlerContext ctx;\n+\n+        AbstractIdleTask(ChannelHandlerContext ctx) {\n+            this.ctx = ctx;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (!ctx.channel().isOpen()) {\n+                return;\n+            }\n+\n+            run(ctx);\n+        }\n+\n+        protected abstract void run(ChannelHandlerContext ctx);\n+    }\n+\n+    private final class ConnectionIdleTimeoutTask extends AbstractIdleTask {\n+\n+        private boolean warn;\n+\n+        ConnectionIdleTimeoutTask(ChannelHandlerContext ctx) {\n+            super(ctx);\n+        }\n+\n+        @Override\n+        protected void run(ChannelHandlerContext ctx) {\n+\n+            final long lastConnectionIdleTime = KeepAliveHandler.this.lastConnectionIdleTime;\n+            final long nextDelay = connectionIdleTimeNanos - (System.nanoTime() - lastConnectionIdleTime);\n+            if (nextDelay <= 0) {\n+                // Both reader and writer are idle - set a new timeout and\n+                // notify the callback.\n+                connectionIdleTimeout = executor().schedule(this, connectionIdleTimeNanos,\n+                                                            TimeUnit.NANOSECONDS);\n+\n+                final boolean first = firstConnectionIdleEvent;\n+                firstConnectionIdleEvent = false;\n+                final IdleStateEvent event = newIdleStateEvent(IdleState.CONNECTION_IDLE, first);\n+                try {\n+                    onIdleEvent(ctx, event);\n+                } catch (Exception e) {\n+                    if (!warn) {\n+                        logger.warn(\"An error occurred while notifying an all idle event\", e);\n+                        warn = true;\n+                    }\n+                }\n+            } else {\n+                // Either read or write occurred before the connection idle timeout - set a new\n+                // timeout with shorter delay.\n+                connectionIdleTimeout = executor().schedule(this, nextDelay, TimeUnit.NANOSECONDS);\n+            }\n+        }\n+    }\n+\n+    private final class PingIdleTimeoutTask extends AbstractIdleTask {\n+\n+        private boolean warn;\n+\n+        PingIdleTimeoutTask(ChannelHandlerContext ctx) {\n+            super(ctx);\n+        }\n+\n+        @Override\n+        protected void run(ChannelHandlerContext ctx) {\n+\n+            final long lastPingIdleTime = KeepAliveHandler.this.lastPingIdleTime;\n+            final long nextDelay = pingIdleTimeNanos - (System.nanoTime() - lastPingIdleTime);\n+            if (nextDelay <= 0) {\n+                // PING is idle - set a new timeout and notify the callback.\n+                pingIdleTimeout = executor().schedule(this, pingIdleTimeNanos, TimeUnit.NANOSECONDS);\n+\n+                final boolean first = firstPingIdleEvent;\n+                firstPingIdleEvent = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 379}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTU5Nzk4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/Http1RequestDecoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODoyMTo1MVrOF-1zqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOTo1OTo1MlrOF-5c-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQzNzYwOA==", "bodyText": "Question: do we need to check ctx.channel().isRegistered()?", "url": "https://github.com/line/armeria/pull/2636#discussion_r401437608", "createdAt": "2020-04-01T08:21:51Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/Http1RequestDecoder.java", "diffHunk": "@@ -312,4 +342,18 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc\n \n         ctx.fireUserEventTriggered(evt);\n     }\n+\n+    private void maybeInitializeKeepAliveHandler(ChannelHandlerContext ctx) {\n+        final KeepAliveHandler keepAliveHandler = writer.keepAliveHandler();\n+        if (keepAliveHandler != null && ctx.channel().isActive() && ctx.channel().isRegistered()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ5NzMzOQ==", "bodyText": "The original IdleStateHandler checks ctx.channel().isRegistered(). https://github.com/netty/netty/blob/81513c3728df8add3c94fd0bdaaf9ba424925b29/handler/src/main/java/io/netty/handler/timeout/IdleStateHandler.java#L241\nIf this method is called by handlerAdded(), I think the condition is meaningful.", "url": "https://github.com/line/armeria/pull/2636#discussion_r401497339", "createdAt": "2020-04-01T09:59:52Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/Http1RequestDecoder.java", "diffHunk": "@@ -312,4 +342,18 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc\n \n         ctx.fireUserEventTriggered(evt);\n     }\n+\n+    private void maybeInitializeKeepAliveHandler(ChannelHandlerContext ctx) {\n+        final KeepAliveHandler keepAliveHandler = writer.keepAliveHandler();\n+        if (keepAliveHandler != null && ctx.channel().isActive() && ctx.channel().isRegistered()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQzNzYwOA=="}, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTYxOTM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/HttpServerPipelineConfigurator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODoyNzo1OVrOF-2Bbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo0NzoxOVrOF-7FqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0MTEzNA==", "bodyText": "Question: do we need this handler for Http2PrefaceOrHttpHandler?", "url": "https://github.com/line/armeria/pull/2636#discussion_r401441134", "createdAt": "2020-04-01T08:27:59Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpServerPipelineConfigurator.java", "diffHunk": "@@ -448,20 +447,38 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws E\n \n         private final ServerHttp1ObjectEncoder responseEncoder;\n         @Nullable\n+        private final KeepAliveHandler keepAliveHandler;\n+        @Nullable\n         private String name;\n \n         Http2PrefaceOrHttpHandler(ServerHttp1ObjectEncoder responseEncoder) {\n             this.responseEncoder = responseEncoder;\n+            keepAliveHandler = responseEncoder.keepAliveHandler();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUwNTA3OA==", "bodyText": "Yes. When a client connects a connection and does not send any packets, we have to close the connection after an idle timeout.", "url": "https://github.com/line/armeria/pull/2636#discussion_r401505078", "createdAt": "2020-04-01T10:12:35Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpServerPipelineConfigurator.java", "diffHunk": "@@ -448,20 +447,38 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws E\n \n         private final ServerHttp1ObjectEncoder responseEncoder;\n         @Nullable\n+        private final KeepAliveHandler keepAliveHandler;\n+        @Nullable\n         private String name;\n \n         Http2PrefaceOrHttpHandler(ServerHttp1ObjectEncoder responseEncoder) {\n             this.responseEncoder = responseEncoder;\n+            keepAliveHandler = responseEncoder.keepAliveHandler();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0MTEzNA=="}, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNDEzNw==", "bodyText": "The following test failed without this. \ud83d\ude00\n\n  \n    \n      armeria/core/src/test/java/com/linecorp/armeria/server/ServerTest.java\n    \n    \n         Line 286\n      in\n      46eff82\n    \n    \n    \n    \n\n        \n          \n           void testIdleTimeoutByNoContentSent() throws Exception {", "url": "https://github.com/line/armeria/pull/2636#discussion_r401524137", "createdAt": "2020-04-01T10:47:19Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpServerPipelineConfigurator.java", "diffHunk": "@@ -448,20 +447,38 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws E\n \n         private final ServerHttp1ObjectEncoder responseEncoder;\n         @Nullable\n+        private final KeepAliveHandler keepAliveHandler;\n+        @Nullable\n         private String name;\n \n         Http2PrefaceOrHttpHandler(ServerHttp1ObjectEncoder responseEncoder) {\n             this.responseEncoder = responseEncoder;\n+            keepAliveHandler = responseEncoder.keepAliveHandler();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0MTEzNA=="}, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTYyMDQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODoyODoxN1rOF-2CHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODoyODoxN1rOF-2CHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0MTMxMA==", "bodyText": "an HTTP/2", "url": "https://github.com/line/armeria/pull/2636#discussion_r401441310", "createdAt": "2020-04-01T08:28:17Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java", "diffHunk": "@@ -461,33 +460,21 @@ public ServerBuilder idleTimeout(Duration idleTimeout) {\n     }\n \n     /**\n-     * Sets the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> timeout.\n-     *\n-     * @param http2PingTimeoutMillis the timeout in milliseconds. {@code 0} disables the timeout.\n+     * Sets the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> interval.\n+     * {@code 0} means the server will not send PING frames on a HTTP/2 connection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTYyMDkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODoyODoyNVrOF-2Cbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODoyODoyNVrOF-2Cbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0MTM5MA==", "bodyText": "ditto", "url": "https://github.com/line/armeria/pull/2636#discussion_r401441390", "createdAt": "2020-04-01T08:28:25Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java", "diffHunk": "@@ -461,33 +460,21 @@ public ServerBuilder idleTimeout(Duration idleTimeout) {\n     }\n \n     /**\n-     * Sets the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> timeout.\n-     *\n-     * @param http2PingTimeoutMillis the timeout in milliseconds. {@code 0} disables the timeout.\n+     * Sets the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> interval.\n+     * {@code 0} means the server will not send PING frames on a HTTP/2 connection.\n      */\n-    public ServerBuilder http2PingTimeoutMillis(long http2PingTimeoutMillis) {\n-        this.http2PingTimeoutMillis = validateNonNegative(http2PingTimeoutMillis, \"http2PingTimeoutMillis\");\n+    public ServerBuilder pingIntervalMillis(long pingIntervalMillis) {\n+        this.pingIntervalMillis = validateNonNegative(pingIntervalMillis, \"pingIntervalMillis\");\n         return this;\n     }\n \n     /**\n-     * Sets the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> timeout.\n-     *\n-     * @param http2PingTimeoutMillis the timeout. {@code 0} disables the timeout.\n+     * Sets the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> interval.\n+     * {@code 0} means the server will not send PING frames on a HTTP/2 connection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTY1MjgyOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/server/HttpServerKeepAliveHandlerTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODozNjo1MVrOF-2WZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwMTowMzowMVrOF_X3sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0NjUwMA==", "bodyText": "I think this test will make flaky test. How about using just await() after clientIdleTimeout elapsed?", "url": "https://github.com/line/armeria/pull/2636#discussion_r401446500", "createdAt": "2020-04-01T08:36:51Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/server/HttpServerKeepAliveHandlerTest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.net.InetSocketAddress;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+\n+import com.linecorp.armeria.client.ClientFactory;\n+import com.linecorp.armeria.client.ConnectionPoolListener;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.server.logging.LoggingService;\n+import com.linecorp.armeria.testing.junit.server.ServerExtension;\n+\n+import io.netty.util.AttributeMap;\n+\n+class HttpServerKeepAliveHandlerTest {\n+\n+    private static final int serverIdleTimeout = 5000;\n+    private static final int serverPingInterval = 1000;\n+\n+    @RegisterExtension\n+    static ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.idleTimeoutMillis(serverIdleTimeout);\n+            sb.pingIntervalMillis(serverPingInterval);\n+            sb.decorator(LoggingService.newDecorator())\n+              .service(\"/\", (ctx, req) -> HttpResponse.of(\"OK\"));\n+        }\n+    };\n+\n+    private AtomicInteger counter;\n+    private ConnectionPoolListener listener;\n+\n+    @BeforeEach\n+    void setUp() {\n+        counter = new AtomicInteger();\n+        listener = new ConnectionPoolListener() {\n+            @Override\n+            public void connectionOpen(SessionProtocol protocol, InetSocketAddress remoteAddr,\n+                                       InetSocketAddress localAddr, AttributeMap attrs) throws Exception {\n+                counter.incrementAndGet();\n+            }\n+\n+            @Override\n+            public void connectionClosed(SessionProtocol protocol, InetSocketAddress remoteAddr,\n+                                         InetSocketAddress localAddr, AttributeMap attrs) throws Exception {\n+                counter.decrementAndGet();\n+            }\n+        };\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource({ \"H1C\", \"H2C\" })\n+    void closeByClientIdleTimeout(SessionProtocol protocol) throws InterruptedException {\n+        final int clientIdleTimeout = 2000;\n+        final ClientFactory factory = ClientFactory.builder()\n+                                                   .idleTimeoutMillis(clientIdleTimeout)\n+                                                   .connectionPoolListener(listener)\n+                                                   .build();\n+        final WebClient client = WebClient.builder(server.uri(protocol))\n+                                          .factory(factory)\n+                                          .build();\n+\n+        client.get(\"/\").aggregate().join();\n+\n+        // HTTP/2 PING frame sent by the server cannot prevent to close an idle connection.\n+        Thread.sleep(clientIdleTimeout + 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUwMjYyOQ==", "bodyText": "Unfortunately, we should not use await() because clientIdleTimeout is 2000 and serverIdleTimeout is 5000.\nI wanted to check whether the connection is closed by the client-side.\nIf it waits more than 5000 milliseconds here, we don't know which closes the connection.\nProbably we could multiply the timeouts by 2 and use await().timeout(serverIdleTimeout - buffer).", "url": "https://github.com/line/armeria/pull/2636#discussion_r401502629", "createdAt": "2020-04-01T10:08:29Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/server/HttpServerKeepAliveHandlerTest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.net.InetSocketAddress;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+\n+import com.linecorp.armeria.client.ClientFactory;\n+import com.linecorp.armeria.client.ConnectionPoolListener;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.server.logging.LoggingService;\n+import com.linecorp.armeria.testing.junit.server.ServerExtension;\n+\n+import io.netty.util.AttributeMap;\n+\n+class HttpServerKeepAliveHandlerTest {\n+\n+    private static final int serverIdleTimeout = 5000;\n+    private static final int serverPingInterval = 1000;\n+\n+    @RegisterExtension\n+    static ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.idleTimeoutMillis(serverIdleTimeout);\n+            sb.pingIntervalMillis(serverPingInterval);\n+            sb.decorator(LoggingService.newDecorator())\n+              .service(\"/\", (ctx, req) -> HttpResponse.of(\"OK\"));\n+        }\n+    };\n+\n+    private AtomicInteger counter;\n+    private ConnectionPoolListener listener;\n+\n+    @BeforeEach\n+    void setUp() {\n+        counter = new AtomicInteger();\n+        listener = new ConnectionPoolListener() {\n+            @Override\n+            public void connectionOpen(SessionProtocol protocol, InetSocketAddress remoteAddr,\n+                                       InetSocketAddress localAddr, AttributeMap attrs) throws Exception {\n+                counter.incrementAndGet();\n+            }\n+\n+            @Override\n+            public void connectionClosed(SessionProtocol protocol, InetSocketAddress remoteAddr,\n+                                         InetSocketAddress localAddr, AttributeMap attrs) throws Exception {\n+                counter.decrementAndGet();\n+            }\n+        };\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource({ \"H1C\", \"H2C\" })\n+    void closeByClientIdleTimeout(SessionProtocol protocol) throws InterruptedException {\n+        final int clientIdleTimeout = 2000;\n+        final ClientFactory factory = ClientFactory.builder()\n+                                                   .idleTimeoutMillis(clientIdleTimeout)\n+                                                   .connectionPoolListener(listener)\n+                                                   .build();\n+        final WebClient client = WebClient.builder(server.uri(protocol))\n+                                          .factory(factory)\n+                                          .build();\n+\n+        client.get(\"/\").aggregate().join();\n+\n+        // HTTP/2 PING frame sent by the server cannot prevent to close an idle connection.\n+        Thread.sleep(clientIdleTimeout + 1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0NjUwMA=="}, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5NTM3MQ==", "bodyText": "Then How about just checking if serverIdleTimeout is passed or not after the counter becomes 0?\nAlso, don't we need to check if the counter was 1 before it gets to 0?", "url": "https://github.com/line/armeria/pull/2636#discussion_r401995371", "createdAt": "2020-04-02T01:01:50Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/server/HttpServerKeepAliveHandlerTest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.net.InetSocketAddress;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+\n+import com.linecorp.armeria.client.ClientFactory;\n+import com.linecorp.armeria.client.ConnectionPoolListener;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.server.logging.LoggingService;\n+import com.linecorp.armeria.testing.junit.server.ServerExtension;\n+\n+import io.netty.util.AttributeMap;\n+\n+class HttpServerKeepAliveHandlerTest {\n+\n+    private static final int serverIdleTimeout = 5000;\n+    private static final int serverPingInterval = 1000;\n+\n+    @RegisterExtension\n+    static ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.idleTimeoutMillis(serverIdleTimeout);\n+            sb.pingIntervalMillis(serverPingInterval);\n+            sb.decorator(LoggingService.newDecorator())\n+              .service(\"/\", (ctx, req) -> HttpResponse.of(\"OK\"));\n+        }\n+    };\n+\n+    private AtomicInteger counter;\n+    private ConnectionPoolListener listener;\n+\n+    @BeforeEach\n+    void setUp() {\n+        counter = new AtomicInteger();\n+        listener = new ConnectionPoolListener() {\n+            @Override\n+            public void connectionOpen(SessionProtocol protocol, InetSocketAddress remoteAddr,\n+                                       InetSocketAddress localAddr, AttributeMap attrs) throws Exception {\n+                counter.incrementAndGet();\n+            }\n+\n+            @Override\n+            public void connectionClosed(SessionProtocol protocol, InetSocketAddress remoteAddr,\n+                                         InetSocketAddress localAddr, AttributeMap attrs) throws Exception {\n+                counter.decrementAndGet();\n+            }\n+        };\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource({ \"H1C\", \"H2C\" })\n+    void closeByClientIdleTimeout(SessionProtocol protocol) throws InterruptedException {\n+        final int clientIdleTimeout = 2000;\n+        final ClientFactory factory = ClientFactory.builder()\n+                                                   .idleTimeoutMillis(clientIdleTimeout)\n+                                                   .connectionPoolListener(listener)\n+                                                   .build();\n+        final WebClient client = WebClient.builder(server.uri(protocol))\n+                                          .factory(factory)\n+                                          .build();\n+\n+        client.get(\"/\").aggregate().join();\n+\n+        // HTTP/2 PING frame sent by the server cannot prevent to close an idle connection.\n+        Thread.sleep(clientIdleTimeout + 1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0NjUwMA=="}, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5NTY5OQ==", "bodyText": "Oh, that sounds good.", "url": "https://github.com/line/armeria/pull/2636#discussion_r401995699", "createdAt": "2020-04-02T01:03:01Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/server/HttpServerKeepAliveHandlerTest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.net.InetSocketAddress;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+\n+import com.linecorp.armeria.client.ClientFactory;\n+import com.linecorp.armeria.client.ConnectionPoolListener;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.server.logging.LoggingService;\n+import com.linecorp.armeria.testing.junit.server.ServerExtension;\n+\n+import io.netty.util.AttributeMap;\n+\n+class HttpServerKeepAliveHandlerTest {\n+\n+    private static final int serverIdleTimeout = 5000;\n+    private static final int serverPingInterval = 1000;\n+\n+    @RegisterExtension\n+    static ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.idleTimeoutMillis(serverIdleTimeout);\n+            sb.pingIntervalMillis(serverPingInterval);\n+            sb.decorator(LoggingService.newDecorator())\n+              .service(\"/\", (ctx, req) -> HttpResponse.of(\"OK\"));\n+        }\n+    };\n+\n+    private AtomicInteger counter;\n+    private ConnectionPoolListener listener;\n+\n+    @BeforeEach\n+    void setUp() {\n+        counter = new AtomicInteger();\n+        listener = new ConnectionPoolListener() {\n+            @Override\n+            public void connectionOpen(SessionProtocol protocol, InetSocketAddress remoteAddr,\n+                                       InetSocketAddress localAddr, AttributeMap attrs) throws Exception {\n+                counter.incrementAndGet();\n+            }\n+\n+            @Override\n+            public void connectionClosed(SessionProtocol protocol, InetSocketAddress remoteAddr,\n+                                         InetSocketAddress localAddr, AttributeMap attrs) throws Exception {\n+                counter.decrementAndGet();\n+            }\n+        };\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource({ \"H1C\", \"H2C\" })\n+    void closeByClientIdleTimeout(SessionProtocol protocol) throws InterruptedException {\n+        final int clientIdleTimeout = 2000;\n+        final ClientFactory factory = ClientFactory.builder()\n+                                                   .idleTimeoutMillis(clientIdleTimeout)\n+                                                   .connectionPoolListener(listener)\n+                                                   .build();\n+        final WebClient client = WebClient.builder(server.uri(protocol))\n+                                          .factory(factory)\n+                                          .build();\n+\n+        client.get(\"/\").aggregate().join();\n+\n+        // HTTP/2 PING frame sent by the server cannot prevent to close an idle connection.\n+        Thread.sleep(clientIdleTimeout + 1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0NjUwMA=="}, "originalCommit": {"oid": "7ba9f0eeb2440d48bf0f6acf842b6bcaae510ce4"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDQ2NTc1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDoyNjowMVrOF_k61w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMzoxMDo1N1rOGADqJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIwOTQ5NQ==", "bodyText": "A user might find this inconvenient because he or she has to update the both settings when he or she wants to disable the ping and reduce the idle timeout. How about automatically disabling ping interval when it's greater than idle timeout?", "url": "https://github.com/line/armeria/pull/2636#discussion_r402209495", "createdAt": "2020-04-02T10:26:01Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -558,7 +555,16 @@ private ClientFactoryOptions buildOptions() {\n             return ClientFactoryOption.ADDRESS_RESOLVER_GROUP_FACTORY.newValue(addressResolverGroupFactory);\n         });\n \n-        return ClientFactoryOptions.of(options.values());\n+        final ClientFactoryOptions newOptions = ClientFactoryOptions.of(options.values());\n+        final long idleTimeoutMillis = newOptions.idleTimeoutMillis();\n+        final long pingIntervalMillis = newOptions.pingIntervalMillis();\n+        if (idleTimeoutMillis > 0 && pingIntervalMillis > 0) {\n+            checkArgument(idleTimeoutMillis > pingIntervalMillis,\n+                          \"idleTimeoutMillis: %s, pingIntervalMillis: %s \" +\n+                          \"(expected: idleTimeoutMillis > pingIntervalMillis)\",\n+                          idleTimeoutMillis, pingIntervalMillis);\n+        }\n+        return newOptions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "484e319f4f1f660c1c139def88c4e4a1d4d46bb4"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcxMzEyNA==", "bodyText": "SGTM, disabled ping interval automatically and updated Javadoc.", "url": "https://github.com/line/armeria/pull/2636#discussion_r402713124", "createdAt": "2020-04-03T03:10:57Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -558,7 +555,16 @@ private ClientFactoryOptions buildOptions() {\n             return ClientFactoryOption.ADDRESS_RESOLVER_GROUP_FACTORY.newValue(addressResolverGroupFactory);\n         });\n \n-        return ClientFactoryOptions.of(options.values());\n+        final ClientFactoryOptions newOptions = ClientFactoryOptions.of(options.values());\n+        final long idleTimeoutMillis = newOptions.idleTimeoutMillis();\n+        final long pingIntervalMillis = newOptions.pingIntervalMillis();\n+        if (idleTimeoutMillis > 0 && pingIntervalMillis > 0) {\n+            checkArgument(idleTimeoutMillis > pingIntervalMillis,\n+                          \"idleTimeoutMillis: %s, pingIntervalMillis: %s \" +\n+                          \"(expected: idleTimeoutMillis > pingIntervalMillis)\",\n+                          idleTimeoutMillis, pingIntervalMillis);\n+        }\n+        return newOptions;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIwOTQ5NQ=="}, "originalCommit": {"oid": "484e319f4f1f660c1c139def88c4e4a1d4d46bb4"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDQ5NTI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDozNDoyMVrOF_lNRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMzoxNjoxM1rOGADvpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNDIxMg==", "bodyText": "I think it's not very common but:\n\nAn OPTIONS response can have chunked content.\nHTTP/1 decoder may emit a FullHttpResponse which is both an HttpResponse and an LastHttpContent.\n\nIn such cases, keepAliveHandler.onPing() can be invoked more or less than desired.", "url": "https://github.com/line/armeria/pull/2636#discussion_r402214212", "createdAt": "2020-04-02T10:34:21Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java", "diffHunk": "@@ -263,4 +279,47 @@ public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exceptio\n     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n         ctx.fireExceptionCaught(cause);\n     }\n+\n+    void setKeepAliveHandler(ChannelHandlerContext ctx, KeepAliveHandler keepAliveHandler) {\n+        this.keepAliveHandler = keepAliveHandler;\n+        maybeInitializeKeepAliveHandler(ctx);\n+    }\n+\n+    private void maybeInitializeKeepAliveHandler(ChannelHandlerContext ctx) {\n+        if (keepAliveHandler != null && ctx.channel().isActive()) {\n+            keepAliveHandler.initialize(ctx);\n+        }\n+    }\n+\n+    private void destroyKeepAliveHandler() {\n+        if (keepAliveHandler != null) {\n+            keepAliveHandler.destroy();\n+        }\n+    }\n+\n+    private void onPingRead(Object msg) {\n+        if (msg instanceof LastHttpContent) {\n+            onPingComplete();\n+        } else {\n+            assert keepAliveHandler != null;\n+            keepAliveHandler.onPing();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "484e319f4f1f660c1c139def88c4e4a1d4d46bb4"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcxNDUzMg==", "bodyText": "Good point, I didn't think of that.", "url": "https://github.com/line/armeria/pull/2636#discussion_r402714532", "createdAt": "2020-04-03T03:16:13Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java", "diffHunk": "@@ -263,4 +279,47 @@ public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exceptio\n     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n         ctx.fireExceptionCaught(cause);\n     }\n+\n+    void setKeepAliveHandler(ChannelHandlerContext ctx, KeepAliveHandler keepAliveHandler) {\n+        this.keepAliveHandler = keepAliveHandler;\n+        maybeInitializeKeepAliveHandler(ctx);\n+    }\n+\n+    private void maybeInitializeKeepAliveHandler(ChannelHandlerContext ctx) {\n+        if (keepAliveHandler != null && ctx.channel().isActive()) {\n+            keepAliveHandler.initialize(ctx);\n+        }\n+    }\n+\n+    private void destroyKeepAliveHandler() {\n+        if (keepAliveHandler != null) {\n+            keepAliveHandler.destroy();\n+        }\n+    }\n+\n+    private void onPingRead(Object msg) {\n+        if (msg instanceof LastHttpContent) {\n+            onPingComplete();\n+        } else {\n+            assert keepAliveHandler != null;\n+            keepAliveHandler.onPing();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNDIxMg=="}, "originalCommit": {"oid": "484e319f4f1f660c1c139def88c4e4a1d4d46bb4"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDUzMzcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo0NTo1M1rOF_llMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo0NTo1M1rOF_llMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyMDMzOA==", "bodyText": "What happens if a server doesn't respond to a ping? Do we send another OPTIONS *? I guess we should not send another OPTIONS * but close the connection, unlike HTTP/2.", "url": "https://github.com/line/armeria/pull/2636#discussion_r402220338", "createdAt": "2020-04-02T10:45:53Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java", "diffHunk": "@@ -263,4 +279,47 @@ public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exceptio\n     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n         ctx.fireExceptionCaught(cause);\n     }\n+\n+    void setKeepAliveHandler(ChannelHandlerContext ctx, KeepAliveHandler keepAliveHandler) {\n+        this.keepAliveHandler = keepAliveHandler;\n+        maybeInitializeKeepAliveHandler(ctx);\n+    }\n+\n+    private void maybeInitializeKeepAliveHandler(ChannelHandlerContext ctx) {\n+        if (keepAliveHandler != null && ctx.channel().isActive()) {\n+            keepAliveHandler.initialize(ctx);\n+        }\n+    }\n+\n+    private void destroyKeepAliveHandler() {\n+        if (keepAliveHandler != null) {\n+            keepAliveHandler.destroy();\n+        }\n+    }\n+\n+    private void onPingRead(Object msg) {\n+        if (msg instanceof LastHttpContent) {\n+            onPingComplete();\n+        } else {\n+            assert keepAliveHandler != null;\n+            keepAliveHandler.onPing();\n+        }\n+    }\n+\n+    void setPingReqId(int id) {\n+        lastPingReqId = id;\n+    }\n+\n+    boolean isPingReqId(int id) {\n+        return lastPingReqId == id;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "484e319f4f1f660c1c139def88c4e4a1d4d46bb4"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTg3NTcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjowMzoxN1rOGBI2uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjowMzoxN1rOGBI2uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0Njg0MA==", "bodyText": "Could use a singleton.", "url": "https://github.com/line/armeria/pull/2636#discussion_r403846840", "createdAt": "2020-04-06T06:03:17Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -558,11 +564,8 @@ private ClientFactoryOptions buildOptions() {\n         final ClientFactoryOptions newOptions = ClientFactoryOptions.of(options.values());\n         final long idleTimeoutMillis = newOptions.idleTimeoutMillis();\n         final long pingIntervalMillis = newOptions.pingIntervalMillis();\n-        if (idleTimeoutMillis > 0 && pingIntervalMillis > 0) {\n-            checkArgument(idleTimeoutMillis > pingIntervalMillis,\n-                          \"idleTimeoutMillis: %s, pingIntervalMillis: %s \" +\n-                          \"(expected: idleTimeoutMillis > pingIntervalMillis)\",\n-                          idleTimeoutMillis, pingIntervalMillis);\n+        if (idleTimeoutMillis > 0 && pingIntervalMillis >= idleTimeoutMillis) {\n+            return ClientFactoryOptions.of(newOptions, ClientFactoryOption.PING_INTERVAL_MILLIS.newValue(0L));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5d13a4136d6a6826b4a42dd085863538662ffad"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTg4NzQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjowODo1NVrOGBI9ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjowODo1NVrOGBI9ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0ODYzNA==", "bodyText": "nit: how about mentioning HTTP/2's case first?", "url": "https://github.com/line/armeria/pull/2636#discussion_r403848634", "createdAt": "2020-04-06T06:08:55Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -419,36 +419,39 @@ public ClientFactoryBuilder idleTimeoutMillis(long idleTimeoutMillis) {\n     }\n \n     /**\n-     * Sets the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> timeout.\n+     * Sets the PING interval in milliseconds.\n+     * When neither read nor write was performed for the given {@code pingIntervalMillis},\n+     * an <a herf=\"https://tools.ietf.org/html/rfc7231#section-4.3.7\">OPTIONS</a> request with an asterisk (\"*\")\n+     * is sent for HTTP/1,\n+     * or a <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> frame is sent for HTTP/2.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5d13a4136d6a6826b4a42dd085863538662ffad"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDQ0NDQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMTowNzowOVrOGCbgHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMjoxMjoyNVrOGDHNbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwMDkyNg==", "bodyText": "Do we need this?", "url": "https://github.com/line/armeria/pull/2636#discussion_r405200926", "createdAt": "2020-04-08T01:07:09Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -558,7 +572,19 @@ private ClientFactoryOptions buildOptions() {\n             return ClientFactoryOption.ADDRESS_RESOLVER_GROUP_FACTORY.newValue(addressResolverGroupFactory);\n         });\n \n-        return ClientFactoryOptions.of(options.values());\n+        final ClientFactoryOptions newOptions = ClientFactoryOptions.of(options.values());\n+        final long idleTimeoutMillis = newOptions.idleTimeoutMillis();\n+        final long pingIntervalMillis = newOptions.pingIntervalMillis();\n+        final long minPingIntervalMillis = Math.max(pingIntervalMillis, MIN_PING_INTERVAL_MILLIS);\n+        if (idleTimeoutMillis > 0) {\n+            if (minPingIntervalMillis >= idleTimeoutMillis) {\n+                return ClientFactoryOptions.of(newOptions, ZERO_PING_INTERVAL);\n+            }\n+            if (minPingIntervalMillis == MIN_PING_INTERVAL_MILLIS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32e036591c7d89eae4a73ac17bc1f95bbd37b565"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNjcwMg==", "bodyText": "Because the default PING interval could be set by Flags.defaultPingIntervalMillis().\nIf the default PING interval is smaller than 10 seconds, bumps that to 10 seconds.", "url": "https://github.com/line/armeria/pull/2636#discussion_r405536702", "createdAt": "2020-04-08T13:45:41Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -558,7 +572,19 @@ private ClientFactoryOptions buildOptions() {\n             return ClientFactoryOption.ADDRESS_RESOLVER_GROUP_FACTORY.newValue(addressResolverGroupFactory);\n         });\n \n-        return ClientFactoryOptions.of(options.values());\n+        final ClientFactoryOptions newOptions = ClientFactoryOptions.of(options.values());\n+        final long idleTimeoutMillis = newOptions.idleTimeoutMillis();\n+        final long pingIntervalMillis = newOptions.pingIntervalMillis();\n+        final long minPingIntervalMillis = Math.max(pingIntervalMillis, MIN_PING_INTERVAL_MILLIS);\n+        if (idleTimeoutMillis > 0) {\n+            if (minPingIntervalMillis >= idleTimeoutMillis) {\n+                return ClientFactoryOptions.of(newOptions, ZERO_PING_INTERVAL);\n+            }\n+            if (minPingIntervalMillis == MIN_PING_INTERVAL_MILLIS) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwMDkyNg=="}, "originalCommit": {"oid": "32e036591c7d89eae4a73ac17bc1f95bbd37b565"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwMzYxMQ==", "bodyText": "When I left the comment there was no\nif (pingIntervalMillis == MIN_PING_INTERVAL_MILLIS) {\n    return newOptions;\n}\nthis condition, so I left the comment. I guess it's fixed now.", "url": "https://github.com/line/armeria/pull/2636#discussion_r405903611", "createdAt": "2020-04-09T01:20:08Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -558,7 +572,19 @@ private ClientFactoryOptions buildOptions() {\n             return ClientFactoryOption.ADDRESS_RESOLVER_GROUP_FACTORY.newValue(addressResolverGroupFactory);\n         });\n \n-        return ClientFactoryOptions.of(options.values());\n+        final ClientFactoryOptions newOptions = ClientFactoryOptions.of(options.values());\n+        final long idleTimeoutMillis = newOptions.idleTimeoutMillis();\n+        final long pingIntervalMillis = newOptions.pingIntervalMillis();\n+        final long minPingIntervalMillis = Math.max(pingIntervalMillis, MIN_PING_INTERVAL_MILLIS);\n+        if (idleTimeoutMillis > 0) {\n+            if (minPingIntervalMillis >= idleTimeoutMillis) {\n+                return ClientFactoryOptions.of(newOptions, ZERO_PING_INTERVAL);\n+            }\n+            if (minPingIntervalMillis == MIN_PING_INTERVAL_MILLIS) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwMDkyNg=="}, "originalCommit": {"oid": "32e036591c7d89eae4a73ac17bc1f95bbd37b565"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxNzAzOA==", "bodyText": "Ah... thanks!", "url": "https://github.com/line/armeria/pull/2636#discussion_r405917038", "createdAt": "2020-04-09T02:12:25Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -558,7 +572,19 @@ private ClientFactoryOptions buildOptions() {\n             return ClientFactoryOption.ADDRESS_RESOLVER_GROUP_FACTORY.newValue(addressResolverGroupFactory);\n         });\n \n-        return ClientFactoryOptions.of(options.values());\n+        final ClientFactoryOptions newOptions = ClientFactoryOptions.of(options.values());\n+        final long idleTimeoutMillis = newOptions.idleTimeoutMillis();\n+        final long pingIntervalMillis = newOptions.pingIntervalMillis();\n+        final long minPingIntervalMillis = Math.max(pingIntervalMillis, MIN_PING_INTERVAL_MILLIS);\n+        if (idleTimeoutMillis > 0) {\n+            if (minPingIntervalMillis >= idleTimeoutMillis) {\n+                return ClientFactoryOptions.of(newOptions, ZERO_PING_INTERVAL);\n+            }\n+            if (minPingIntervalMillis == MIN_PING_INTERVAL_MILLIS) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwMDkyNg=="}, "originalCommit": {"oid": "32e036591c7d89eae4a73ac17bc1f95bbd37b565"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDQ1NDQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMToxMzoxOVrOGCbmNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDowMDozMFrOGCwq7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwMjQ4Nw==", "bodyText": "Shouldn't we subscribe to this to prevent memory leak?", "url": "https://github.com/line/armeria/pull/2636#discussion_r405202487", "createdAt": "2020-04-08T01:13:19Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java", "diffHunk": "@@ -263,4 +279,48 @@ public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exceptio\n     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n         ctx.fireExceptionCaught(cause);\n     }\n+\n+    void setKeepAliveHandler(ChannelHandlerContext ctx, KeepAliveHandler keepAliveHandler) {\n+        this.keepAliveHandler = keepAliveHandler;\n+        maybeInitializeKeepAliveHandler(ctx);\n+    }\n+\n+    private void maybeInitializeKeepAliveHandler(ChannelHandlerContext ctx) {\n+        if (keepAliveHandler != null && ctx.channel().isActive()) {\n+            keepAliveHandler.initialize(ctx);\n+        }\n+    }\n+\n+    private void destroyKeepAliveHandler() {\n+        if (keepAliveHandler != null) {\n+            keepAliveHandler.destroy();\n+        }\n+    }\n+\n+    private void onPingRead(Object msg) {\n+        if (msg instanceof HttpResponse) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32e036591c7d89eae4a73ac17bc1f95bbd37b565"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0Nzc1OA==", "bodyText": "It's Netty HttpResponse. I forgot to release it. \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2636#discussion_r405547758", "createdAt": "2020-04-08T14:00:30Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java", "diffHunk": "@@ -263,4 +279,48 @@ public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exceptio\n     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n         ctx.fireExceptionCaught(cause);\n     }\n+\n+    void setKeepAliveHandler(ChannelHandlerContext ctx, KeepAliveHandler keepAliveHandler) {\n+        this.keepAliveHandler = keepAliveHandler;\n+        maybeInitializeKeepAliveHandler(ctx);\n+    }\n+\n+    private void maybeInitializeKeepAliveHandler(ChannelHandlerContext ctx) {\n+        if (keepAliveHandler != null && ctx.channel().isActive()) {\n+            keepAliveHandler.initialize(ctx);\n+        }\n+    }\n+\n+    private void destroyKeepAliveHandler() {\n+        if (keepAliveHandler != null) {\n+            keepAliveHandler.destroy();\n+        }\n+    }\n+\n+    private void onPingRead(Object msg) {\n+        if (msg instanceof HttpResponse) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwMjQ4Nw=="}, "originalCommit": {"oid": "32e036591c7d89eae4a73ac17bc1f95bbd37b565"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDUwMjA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMTozOTo0M1rOGCcBxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTo1NjoyOVrOGC135Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwOTU0MA==", "bodyText": "If the event is not first, then the channel is not closed even there's no requests in progress?", "url": "https://github.com/line/armeria/pull/2636#discussion_r405209540", "createdAt": "2020-04-08T01:39:43Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java", "diffHunk": "@@ -0,0 +1,399 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.CONNECTION_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_CONNECTION_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_PING_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.PING_IDLE_STATE_EVENT;\n+\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Stopwatch;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+\n+/**\n+ * A {@link KeepAliveHandler} that writes a PING when neither read nor write was performed for\n+ * the specified {@code pingIntervalMillis}, and closes the connection\n+ * when neither read nor write was performed within the given {@code idleTimeoutMillis}.\n+ */\n+public abstract class KeepAliveHandler {\n+\n+    // Forked from Netty 4.1.48\n+    // https://github.com/netty/netty/blob/81513c3728df8add3c94fd0bdaaf9ba424925b29/handler/src/main/java/io/netty/handler/timeout/IdleStateEvent.java\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KeepAliveHandler.class);\n+\n+    private static IdleStateEvent newIdleStateEvent(IdleState state, boolean first) {\n+        switch (state) {\n+            case CONNECTION_IDLE:\n+                return first ? FIRST_CONNECTION_IDLE_STATE_EVENT : CONNECTION_IDLE_STATE_EVENT;\n+            case PING_IDLE:\n+                return first ? FIRST_PING_IDLE_STATE_EVENT : PING_IDLE_STATE_EVENT;\n+            default:\n+                throw new IllegalArgumentException(\"Unhandled: initialized=\" + state + \", first=\" + first);\n+        }\n+    }\n+\n+    @Nullable\n+    private final Stopwatch stopwatch = logger.isDebugEnabled() ? Stopwatch.createUnstarted() : null;\n+    private final ChannelFutureListener pingWriteListener = new PingWriteListener();\n+    private final Runnable shutdownRunnable = this::closeChannelAndLog;\n+\n+    private final Channel channel;\n+    private final String name;\n+\n+    @Nullable\n+    private ScheduledFuture<?> connectionIdleTimeout;\n+    private final long connectionIdleTimeNanos;\n+    private long lastConnectionIdleTime;\n+    private boolean firstConnectionIdleEvent = true;\n+\n+    @Nullable\n+    private ScheduledFuture<?> pingIdleTimeout;\n+    private final long pingIdleTimeNanos;\n+    private long lastPingIdleTime;\n+    private boolean firstPingIdleEvent = true;\n+\n+    private boolean isInitialized;\n+    private PingState pingState = PingState.IDLE;\n+\n+    @Nullable\n+    private ChannelFuture pingWriteFuture;\n+    @Nullable\n+    private Future<?> shutdownFuture;\n+\n+    protected KeepAliveHandler(Channel channel, String name, long idleTimeoutMillis, long pingIntervalMillis) {\n+        this.channel = channel;\n+        this.name = name;\n+\n+        if (idleTimeoutMillis <= 0) {\n+            connectionIdleTimeNanos = 0;\n+        } else {\n+            connectionIdleTimeNanos = TimeUnit.MILLISECONDS.toNanos(idleTimeoutMillis);\n+        }\n+        if (pingIntervalMillis <= 0) {\n+            pingIdleTimeNanos = 0;\n+        } else {\n+            pingIdleTimeNanos = TimeUnit.MILLISECONDS.toNanos(pingIntervalMillis);\n+        }\n+    }\n+\n+    public final void initialize(ChannelHandlerContext ctx) {\n+        // Avoid the case where destroy() is called before scheduling timeouts.\n+        // See: https://github.com/netty/netty/issues/143\n+        if (isInitialized) {\n+            return;\n+        }\n+        isInitialized = true;\n+\n+        if (connectionIdleTimeNanos > 0) {\n+            connectionIdleTimeout = executor().schedule(new ConnectionIdleTimeoutTask(ctx),\n+                                                        connectionIdleTimeNanos, TimeUnit.NANOSECONDS);\n+        }\n+        if (pingIdleTimeNanos > 0) {\n+            pingIdleTimeout = executor().schedule(new PingIdleTimeoutTask(ctx),\n+                                                  pingIdleTimeNanos, TimeUnit.NANOSECONDS);\n+        }\n+    }\n+\n+    public final void destroy() {\n+        isInitialized = true;\n+        if (connectionIdleTimeout != null) {\n+            connectionIdleTimeout.cancel(false);\n+            connectionIdleTimeout = null;\n+        }\n+        if (pingIdleTimeout != null) {\n+            pingIdleTimeout.cancel(false);\n+            pingIdleTimeout = null;\n+        }\n+        pingState = PingState.SHUTDOWN;\n+        cancelFutures();\n+    }\n+\n+    public final void onReadOrWrite() {\n+        if (pingState == PingState.SHUTDOWN) {\n+            return;\n+        }\n+\n+        if (connectionIdleTimeNanos > 0) {\n+            lastConnectionIdleTime = System.nanoTime();\n+            firstConnectionIdleEvent = true;\n+        }\n+\n+        if (pingResetsPreviousPing()) {\n+            if (pingIdleTimeNanos > 0) {\n+                lastPingIdleTime = System.nanoTime();\n+                firstPingIdleEvent = true;\n+            }\n+            pingState = PingState.IDLE;\n+            cancelFutures();\n+        }\n+    }\n+\n+    public final void onPing() {\n+        if (pingState == PingState.SHUTDOWN) {\n+            return;\n+        }\n+\n+        if (pingIdleTimeNanos > 0) {\n+            firstPingIdleEvent = true;\n+            lastPingIdleTime = System.nanoTime();\n+        }\n+        pingState = PingState.IDLE;\n+        cancelFutures();\n+    }\n+\n+    protected abstract ChannelFuture writePing(ChannelHandlerContext ctx);\n+\n+    protected abstract boolean pingResetsPreviousPing();\n+\n+    protected abstract boolean hasRequestsInProgress(ChannelHandlerContext ctx);\n+\n+    @Nullable\n+    protected final Future<?> shutdownFuture() {\n+        return shutdownFuture;\n+    }\n+\n+    protected final boolean isPendingPingAck() {\n+        return pingState == PingState.PENDING_PING_ACK;\n+    }\n+\n+    @VisibleForTesting\n+    final PingState state() {\n+        return pingState;\n+    }\n+\n+    @VisibleForTesting\n+    void onIdleEvent(ChannelHandlerContext ctx, IdleStateEvent evt) {\n+        if (evt.state() == IdleState.CONNECTION_IDLE && evt.isFirst()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32e036591c7d89eae4a73ac17bc1f95bbd37b565"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5ODI5OQ==", "bodyText": "The original code in IdleTimeoutHandler is:\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/internal/common/IdleTimeoutHandler.java\n    \n    \n        Lines 57 to 64\n      in\n      b1bb733\n    \n    \n    \n    \n\n        \n          \n           if (!evt.isFirst()) { \n        \n\n        \n          \n               return; \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           if (!hasRequestsInProgress(ctx)) { \n        \n\n        \n          \n               logger.debug(\"{} Closing an idle {} connection\", ctx.channel(), name); \n        \n\n        \n          \n               ctx.channel().close(); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nI will investigate more to know how the connection is handled on idle with active requests.", "url": "https://github.com/line/armeria/pull/2636#discussion_r405598299", "createdAt": "2020-04-08T15:09:25Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java", "diffHunk": "@@ -0,0 +1,399 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.CONNECTION_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_CONNECTION_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_PING_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.PING_IDLE_STATE_EVENT;\n+\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Stopwatch;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+\n+/**\n+ * A {@link KeepAliveHandler} that writes a PING when neither read nor write was performed for\n+ * the specified {@code pingIntervalMillis}, and closes the connection\n+ * when neither read nor write was performed within the given {@code idleTimeoutMillis}.\n+ */\n+public abstract class KeepAliveHandler {\n+\n+    // Forked from Netty 4.1.48\n+    // https://github.com/netty/netty/blob/81513c3728df8add3c94fd0bdaaf9ba424925b29/handler/src/main/java/io/netty/handler/timeout/IdleStateEvent.java\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KeepAliveHandler.class);\n+\n+    private static IdleStateEvent newIdleStateEvent(IdleState state, boolean first) {\n+        switch (state) {\n+            case CONNECTION_IDLE:\n+                return first ? FIRST_CONNECTION_IDLE_STATE_EVENT : CONNECTION_IDLE_STATE_EVENT;\n+            case PING_IDLE:\n+                return first ? FIRST_PING_IDLE_STATE_EVENT : PING_IDLE_STATE_EVENT;\n+            default:\n+                throw new IllegalArgumentException(\"Unhandled: initialized=\" + state + \", first=\" + first);\n+        }\n+    }\n+\n+    @Nullable\n+    private final Stopwatch stopwatch = logger.isDebugEnabled() ? Stopwatch.createUnstarted() : null;\n+    private final ChannelFutureListener pingWriteListener = new PingWriteListener();\n+    private final Runnable shutdownRunnable = this::closeChannelAndLog;\n+\n+    private final Channel channel;\n+    private final String name;\n+\n+    @Nullable\n+    private ScheduledFuture<?> connectionIdleTimeout;\n+    private final long connectionIdleTimeNanos;\n+    private long lastConnectionIdleTime;\n+    private boolean firstConnectionIdleEvent = true;\n+\n+    @Nullable\n+    private ScheduledFuture<?> pingIdleTimeout;\n+    private final long pingIdleTimeNanos;\n+    private long lastPingIdleTime;\n+    private boolean firstPingIdleEvent = true;\n+\n+    private boolean isInitialized;\n+    private PingState pingState = PingState.IDLE;\n+\n+    @Nullable\n+    private ChannelFuture pingWriteFuture;\n+    @Nullable\n+    private Future<?> shutdownFuture;\n+\n+    protected KeepAliveHandler(Channel channel, String name, long idleTimeoutMillis, long pingIntervalMillis) {\n+        this.channel = channel;\n+        this.name = name;\n+\n+        if (idleTimeoutMillis <= 0) {\n+            connectionIdleTimeNanos = 0;\n+        } else {\n+            connectionIdleTimeNanos = TimeUnit.MILLISECONDS.toNanos(idleTimeoutMillis);\n+        }\n+        if (pingIntervalMillis <= 0) {\n+            pingIdleTimeNanos = 0;\n+        } else {\n+            pingIdleTimeNanos = TimeUnit.MILLISECONDS.toNanos(pingIntervalMillis);\n+        }\n+    }\n+\n+    public final void initialize(ChannelHandlerContext ctx) {\n+        // Avoid the case where destroy() is called before scheduling timeouts.\n+        // See: https://github.com/netty/netty/issues/143\n+        if (isInitialized) {\n+            return;\n+        }\n+        isInitialized = true;\n+\n+        if (connectionIdleTimeNanos > 0) {\n+            connectionIdleTimeout = executor().schedule(new ConnectionIdleTimeoutTask(ctx),\n+                                                        connectionIdleTimeNanos, TimeUnit.NANOSECONDS);\n+        }\n+        if (pingIdleTimeNanos > 0) {\n+            pingIdleTimeout = executor().schedule(new PingIdleTimeoutTask(ctx),\n+                                                  pingIdleTimeNanos, TimeUnit.NANOSECONDS);\n+        }\n+    }\n+\n+    public final void destroy() {\n+        isInitialized = true;\n+        if (connectionIdleTimeout != null) {\n+            connectionIdleTimeout.cancel(false);\n+            connectionIdleTimeout = null;\n+        }\n+        if (pingIdleTimeout != null) {\n+            pingIdleTimeout.cancel(false);\n+            pingIdleTimeout = null;\n+        }\n+        pingState = PingState.SHUTDOWN;\n+        cancelFutures();\n+    }\n+\n+    public final void onReadOrWrite() {\n+        if (pingState == PingState.SHUTDOWN) {\n+            return;\n+        }\n+\n+        if (connectionIdleTimeNanos > 0) {\n+            lastConnectionIdleTime = System.nanoTime();\n+            firstConnectionIdleEvent = true;\n+        }\n+\n+        if (pingResetsPreviousPing()) {\n+            if (pingIdleTimeNanos > 0) {\n+                lastPingIdleTime = System.nanoTime();\n+                firstPingIdleEvent = true;\n+            }\n+            pingState = PingState.IDLE;\n+            cancelFutures();\n+        }\n+    }\n+\n+    public final void onPing() {\n+        if (pingState == PingState.SHUTDOWN) {\n+            return;\n+        }\n+\n+        if (pingIdleTimeNanos > 0) {\n+            firstPingIdleEvent = true;\n+            lastPingIdleTime = System.nanoTime();\n+        }\n+        pingState = PingState.IDLE;\n+        cancelFutures();\n+    }\n+\n+    protected abstract ChannelFuture writePing(ChannelHandlerContext ctx);\n+\n+    protected abstract boolean pingResetsPreviousPing();\n+\n+    protected abstract boolean hasRequestsInProgress(ChannelHandlerContext ctx);\n+\n+    @Nullable\n+    protected final Future<?> shutdownFuture() {\n+        return shutdownFuture;\n+    }\n+\n+    protected final boolean isPendingPingAck() {\n+        return pingState == PingState.PENDING_PING_ACK;\n+    }\n+\n+    @VisibleForTesting\n+    final PingState state() {\n+        return pingState;\n+    }\n+\n+    @VisibleForTesting\n+    void onIdleEvent(ChannelHandlerContext ctx, IdleStateEvent evt) {\n+        if (evt.state() == IdleState.CONNECTION_IDLE && evt.isFirst()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwOTU0MA=="}, "originalCommit": {"oid": "32e036591c7d89eae4a73ac17bc1f95bbd37b565"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYzMjk5Nw==", "bodyText": "A connection is not closed when an active request is closed by the request timeout after the first CONNECTION_IDLE event. This behavior seems weird because there are no active requests in the connection.\nLet me remove evt.isFirst() condition.", "url": "https://github.com/line/armeria/pull/2636#discussion_r405632997", "createdAt": "2020-04-08T15:56:29Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java", "diffHunk": "@@ -0,0 +1,399 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.CONNECTION_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_CONNECTION_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_PING_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.PING_IDLE_STATE_EVENT;\n+\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Stopwatch;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+\n+/**\n+ * A {@link KeepAliveHandler} that writes a PING when neither read nor write was performed for\n+ * the specified {@code pingIntervalMillis}, and closes the connection\n+ * when neither read nor write was performed within the given {@code idleTimeoutMillis}.\n+ */\n+public abstract class KeepAliveHandler {\n+\n+    // Forked from Netty 4.1.48\n+    // https://github.com/netty/netty/blob/81513c3728df8add3c94fd0bdaaf9ba424925b29/handler/src/main/java/io/netty/handler/timeout/IdleStateEvent.java\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KeepAliveHandler.class);\n+\n+    private static IdleStateEvent newIdleStateEvent(IdleState state, boolean first) {\n+        switch (state) {\n+            case CONNECTION_IDLE:\n+                return first ? FIRST_CONNECTION_IDLE_STATE_EVENT : CONNECTION_IDLE_STATE_EVENT;\n+            case PING_IDLE:\n+                return first ? FIRST_PING_IDLE_STATE_EVENT : PING_IDLE_STATE_EVENT;\n+            default:\n+                throw new IllegalArgumentException(\"Unhandled: initialized=\" + state + \", first=\" + first);\n+        }\n+    }\n+\n+    @Nullable\n+    private final Stopwatch stopwatch = logger.isDebugEnabled() ? Stopwatch.createUnstarted() : null;\n+    private final ChannelFutureListener pingWriteListener = new PingWriteListener();\n+    private final Runnable shutdownRunnable = this::closeChannelAndLog;\n+\n+    private final Channel channel;\n+    private final String name;\n+\n+    @Nullable\n+    private ScheduledFuture<?> connectionIdleTimeout;\n+    private final long connectionIdleTimeNanos;\n+    private long lastConnectionIdleTime;\n+    private boolean firstConnectionIdleEvent = true;\n+\n+    @Nullable\n+    private ScheduledFuture<?> pingIdleTimeout;\n+    private final long pingIdleTimeNanos;\n+    private long lastPingIdleTime;\n+    private boolean firstPingIdleEvent = true;\n+\n+    private boolean isInitialized;\n+    private PingState pingState = PingState.IDLE;\n+\n+    @Nullable\n+    private ChannelFuture pingWriteFuture;\n+    @Nullable\n+    private Future<?> shutdownFuture;\n+\n+    protected KeepAliveHandler(Channel channel, String name, long idleTimeoutMillis, long pingIntervalMillis) {\n+        this.channel = channel;\n+        this.name = name;\n+\n+        if (idleTimeoutMillis <= 0) {\n+            connectionIdleTimeNanos = 0;\n+        } else {\n+            connectionIdleTimeNanos = TimeUnit.MILLISECONDS.toNanos(idleTimeoutMillis);\n+        }\n+        if (pingIntervalMillis <= 0) {\n+            pingIdleTimeNanos = 0;\n+        } else {\n+            pingIdleTimeNanos = TimeUnit.MILLISECONDS.toNanos(pingIntervalMillis);\n+        }\n+    }\n+\n+    public final void initialize(ChannelHandlerContext ctx) {\n+        // Avoid the case where destroy() is called before scheduling timeouts.\n+        // See: https://github.com/netty/netty/issues/143\n+        if (isInitialized) {\n+            return;\n+        }\n+        isInitialized = true;\n+\n+        if (connectionIdleTimeNanos > 0) {\n+            connectionIdleTimeout = executor().schedule(new ConnectionIdleTimeoutTask(ctx),\n+                                                        connectionIdleTimeNanos, TimeUnit.NANOSECONDS);\n+        }\n+        if (pingIdleTimeNanos > 0) {\n+            pingIdleTimeout = executor().schedule(new PingIdleTimeoutTask(ctx),\n+                                                  pingIdleTimeNanos, TimeUnit.NANOSECONDS);\n+        }\n+    }\n+\n+    public final void destroy() {\n+        isInitialized = true;\n+        if (connectionIdleTimeout != null) {\n+            connectionIdleTimeout.cancel(false);\n+            connectionIdleTimeout = null;\n+        }\n+        if (pingIdleTimeout != null) {\n+            pingIdleTimeout.cancel(false);\n+            pingIdleTimeout = null;\n+        }\n+        pingState = PingState.SHUTDOWN;\n+        cancelFutures();\n+    }\n+\n+    public final void onReadOrWrite() {\n+        if (pingState == PingState.SHUTDOWN) {\n+            return;\n+        }\n+\n+        if (connectionIdleTimeNanos > 0) {\n+            lastConnectionIdleTime = System.nanoTime();\n+            firstConnectionIdleEvent = true;\n+        }\n+\n+        if (pingResetsPreviousPing()) {\n+            if (pingIdleTimeNanos > 0) {\n+                lastPingIdleTime = System.nanoTime();\n+                firstPingIdleEvent = true;\n+            }\n+            pingState = PingState.IDLE;\n+            cancelFutures();\n+        }\n+    }\n+\n+    public final void onPing() {\n+        if (pingState == PingState.SHUTDOWN) {\n+            return;\n+        }\n+\n+        if (pingIdleTimeNanos > 0) {\n+            firstPingIdleEvent = true;\n+            lastPingIdleTime = System.nanoTime();\n+        }\n+        pingState = PingState.IDLE;\n+        cancelFutures();\n+    }\n+\n+    protected abstract ChannelFuture writePing(ChannelHandlerContext ctx);\n+\n+    protected abstract boolean pingResetsPreviousPing();\n+\n+    protected abstract boolean hasRequestsInProgress(ChannelHandlerContext ctx);\n+\n+    @Nullable\n+    protected final Future<?> shutdownFuture() {\n+        return shutdownFuture;\n+    }\n+\n+    protected final boolean isPendingPingAck() {\n+        return pingState == PingState.PENDING_PING_ACK;\n+    }\n+\n+    @VisibleForTesting\n+    final PingState state() {\n+        return pingState;\n+    }\n+\n+    @VisibleForTesting\n+    void onIdleEvent(ChannelHandlerContext ctx, IdleStateEvent evt) {\n+        if (evt.state() == IdleState.CONNECTION_IDLE && evt.isFirst()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwOTU0MA=="}, "originalCommit": {"oid": "32e036591c7d89eae4a73ac17bc1f95bbd37b565"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDUxMDY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMTo0NTowMFrOGCcG5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMTo0NTowMFrOGCcG5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxMDg1NA==", "bodyText": "Can remove idleTimeoutMillis > 0.", "url": "https://github.com/line/armeria/pull/2636#discussion_r405210854", "createdAt": "2020-04-08T01:45:00Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java", "diffHunk": "@@ -1406,6 +1401,11 @@ public ServerBuilder annotatedServiceExtensions(\n      * Returns a newly-created {@link Server} based on the configuration properties set so far.\n      */\n     public Server build() {\n+        long pingIntervalMillis = Math.max(this.pingIntervalMillis, 10_000L);\n+        if (idleTimeoutMillis > 0 && pingIntervalMillis >= idleTimeoutMillis) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32e036591c7d89eae4a73ac17bc1f95bbd37b565"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODkxNTQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMToyNzo1NlrOGDGguQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMToyNzo1NlrOGDGguQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwNTU5Mw==", "bodyText": "This could be\n<p>The minimum PING interval is {@value #MIN_PING_INTERVAL_MILLIS} milliseconds.", "url": "https://github.com/line/armeria/pull/2636#discussion_r405905593", "createdAt": "2020-04-09T01:27:56Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -419,36 +428,44 @@ public ClientFactoryBuilder idleTimeoutMillis(long idleTimeoutMillis) {\n     }\n \n     /**\n-     * Sets the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> timeout.\n+     * Sets the PING interval in milliseconds.\n+     * When neither read nor write was performed for the given {@code pingIntervalMillis},\n+     * a <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> frame is sent for HTTP/2 or\n+     * an <a herf=\"https://tools.ietf.org/html/rfc7231#section-4.3.7\">OPTIONS</a> request with an asterisk (\"*\")\n+     * is sent for HTTP/1.\n      *\n-     * @param http2PingTimeoutMillis the timeout in milliseconds. {@code 0} disables the timeout.\n-     */\n-    public ClientFactoryBuilder http2PingTimeoutMillis(long http2PingTimeoutMillis) {\n-        checkArgument(http2PingTimeoutMillis >= 0,\n-                      \"http2PingTimeoutMillis: %s (expected: >= 0)\", http2PingTimeoutMillis);\n-        option(ClientFactoryOption.HTTP2_PING_TIMEOUT_MILLIS, http2PingTimeoutMillis);\n-        return this;\n-    }\n-\n-    /**\n-     * Sets the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> timeout.\n+     * <p>Note that this settings is only in effect when {@link #idleTimeoutMillis(long)}} or\n+     * {@link #idleTimeout(Duration)} is greater than the specified PING interval.\n      *\n-     * @param http2PingTimeout the timeout. {@code 0} disables the timeout.\n-     */\n-    public ClientFactoryBuilder http2PingTimeout(Duration http2PingTimeout) {\n-        requireNonNull(http2PingTimeout, \"http2PingTimeout\");\n-        checkArgument(http2PingTimeout.toMillis() >= 0,\n-                      \"http2PingTimeoutMillis: %s (expected: >= 0)\", http2PingTimeout.toMillis());\n-        http2PingTimeoutMillis(http2PingTimeout.toMillis());\n+     * <p>The minimum PING interval is 10 seconds. {@code 0} means the client will not send a PING.\n+     *\n+     * @throws IllegalArgumentException if the specified {@code pingIntervalMillis}\n+     *                                  is smaller than 10000 milliseconds.\n+     */\n+    public ClientFactoryBuilder pingIntervalMillis(long pingIntervalMillis) {\n+        checkArgument(pingIntervalMillis == 0 || pingIntervalMillis >= MIN_PING_INTERVAL_MILLIS,\n+                      \"pingIntervalMillis: %s (expected: >= %s or == 0)\", pingIntervalMillis,\n+                      MIN_PING_INTERVAL_MILLIS);\n+        option(ClientFactoryOption.PING_INTERVAL_MILLIS, pingIntervalMillis);\n         return this;\n     }\n \n     /**\n-     * Sets whether to send HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a>\n-     * when there are no active streams open.\n+     * Sets the PING interval.\n+     * When neither read nor write was performed for the given {@code pingInterval},\n+     * a <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> frame is sent for HTTP/2 or\n+     * an <a herf=\"https://tools.ietf.org/html/rfc7231#section-4.3.7\">OPTIONS</a> request with an asterisk (\"*\")\n+     * is sent for HTTP/1.\n+     *\n+     * <p>Note that this settings is only in effect when {@link #idleTimeoutMillis(long)}} or\n+     * {@link #idleTimeout(Duration)} is greater than the specified PING interval.\n+     *\n+     * <p>The minimum PING interval is 10 seconds. {@code 0} means the client will not send a PING.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4850e0202f5307be535f26d4aad8d86ede1b05e5"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODkxNTc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMToyODowN1rOGDGg7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMToyODowN1rOGDGg7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwNTY0NQ==", "bodyText": "ditto", "url": "https://github.com/line/armeria/pull/2636#discussion_r405905645", "createdAt": "2020-04-09T01:28:07Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -419,36 +428,44 @@ public ClientFactoryBuilder idleTimeoutMillis(long idleTimeoutMillis) {\n     }\n \n     /**\n-     * Sets the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> timeout.\n+     * Sets the PING interval in milliseconds.\n+     * When neither read nor write was performed for the given {@code pingIntervalMillis},\n+     * a <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> frame is sent for HTTP/2 or\n+     * an <a herf=\"https://tools.ietf.org/html/rfc7231#section-4.3.7\">OPTIONS</a> request with an asterisk (\"*\")\n+     * is sent for HTTP/1.\n      *\n-     * @param http2PingTimeoutMillis the timeout in milliseconds. {@code 0} disables the timeout.\n-     */\n-    public ClientFactoryBuilder http2PingTimeoutMillis(long http2PingTimeoutMillis) {\n-        checkArgument(http2PingTimeoutMillis >= 0,\n-                      \"http2PingTimeoutMillis: %s (expected: >= 0)\", http2PingTimeoutMillis);\n-        option(ClientFactoryOption.HTTP2_PING_TIMEOUT_MILLIS, http2PingTimeoutMillis);\n-        return this;\n-    }\n-\n-    /**\n-     * Sets the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> timeout.\n+     * <p>Note that this settings is only in effect when {@link #idleTimeoutMillis(long)}} or\n+     * {@link #idleTimeout(Duration)} is greater than the specified PING interval.\n      *\n-     * @param http2PingTimeout the timeout. {@code 0} disables the timeout.\n-     */\n-    public ClientFactoryBuilder http2PingTimeout(Duration http2PingTimeout) {\n-        requireNonNull(http2PingTimeout, \"http2PingTimeout\");\n-        checkArgument(http2PingTimeout.toMillis() >= 0,\n-                      \"http2PingTimeoutMillis: %s (expected: >= 0)\", http2PingTimeout.toMillis());\n-        http2PingTimeoutMillis(http2PingTimeout.toMillis());\n+     * <p>The minimum PING interval is 10 seconds. {@code 0} means the client will not send a PING.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4850e0202f5307be535f26d4aad8d86ede1b05e5"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODkxODgwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMToyOTo1NlrOGDGipg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMToyOTo1NlrOGDGipg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwNjA4Ng==", "bodyText": "ditto. Could use {@value }", "url": "https://github.com/line/armeria/pull/2636#discussion_r405906086", "createdAt": "2020-04-09T01:29:56Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -419,36 +428,44 @@ public ClientFactoryBuilder idleTimeoutMillis(long idleTimeoutMillis) {\n     }\n \n     /**\n-     * Sets the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> timeout.\n+     * Sets the PING interval in milliseconds.\n+     * When neither read nor write was performed for the given {@code pingIntervalMillis},\n+     * a <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> frame is sent for HTTP/2 or\n+     * an <a herf=\"https://tools.ietf.org/html/rfc7231#section-4.3.7\">OPTIONS</a> request with an asterisk (\"*\")\n+     * is sent for HTTP/1.\n      *\n-     * @param http2PingTimeoutMillis the timeout in milliseconds. {@code 0} disables the timeout.\n-     */\n-    public ClientFactoryBuilder http2PingTimeoutMillis(long http2PingTimeoutMillis) {\n-        checkArgument(http2PingTimeoutMillis >= 0,\n-                      \"http2PingTimeoutMillis: %s (expected: >= 0)\", http2PingTimeoutMillis);\n-        option(ClientFactoryOption.HTTP2_PING_TIMEOUT_MILLIS, http2PingTimeoutMillis);\n-        return this;\n-    }\n-\n-    /**\n-     * Sets the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> timeout.\n+     * <p>Note that this settings is only in effect when {@link #idleTimeoutMillis(long)}} or\n+     * {@link #idleTimeout(Duration)} is greater than the specified PING interval.\n      *\n-     * @param http2PingTimeout the timeout. {@code 0} disables the timeout.\n-     */\n-    public ClientFactoryBuilder http2PingTimeout(Duration http2PingTimeout) {\n-        requireNonNull(http2PingTimeout, \"http2PingTimeout\");\n-        checkArgument(http2PingTimeout.toMillis() >= 0,\n-                      \"http2PingTimeoutMillis: %s (expected: >= 0)\", http2PingTimeout.toMillis());\n-        http2PingTimeoutMillis(http2PingTimeout.toMillis());\n+     * <p>The minimum PING interval is 10 seconds. {@code 0} means the client will not send a PING.\n+     *\n+     * @throws IllegalArgumentException if the specified {@code pingIntervalMillis}\n+     *                                  is smaller than 10000 milliseconds.\n+     */\n+    public ClientFactoryBuilder pingIntervalMillis(long pingIntervalMillis) {\n+        checkArgument(pingIntervalMillis == 0 || pingIntervalMillis >= MIN_PING_INTERVAL_MILLIS,\n+                      \"pingIntervalMillis: %s (expected: >= %s or == 0)\", pingIntervalMillis,\n+                      MIN_PING_INTERVAL_MILLIS);\n+        option(ClientFactoryOption.PING_INTERVAL_MILLIS, pingIntervalMillis);\n         return this;\n     }\n \n     /**\n-     * Sets whether to send HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a>\n-     * when there are no active streams open.\n+     * Sets the PING interval.\n+     * When neither read nor write was performed for the given {@code pingInterval},\n+     * a <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> frame is sent for HTTP/2 or\n+     * an <a herf=\"https://tools.ietf.org/html/rfc7231#section-4.3.7\">OPTIONS</a> request with an asterisk (\"*\")\n+     * is sent for HTTP/1.\n+     *\n+     * <p>Note that this settings is only in effect when {@link #idleTimeoutMillis(long)}} or\n+     * {@link #idleTimeout(Duration)} is greater than the specified PING interval.\n+     *\n+     * <p>The minimum PING interval is 10 seconds. {@code 0} means the client will not send a PING.\n+     *\n+     * @throws IllegalArgumentException if the specified {@code pingInterval} is smaller than 10 seconds.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4850e0202f5307be535f26d4aad8d86ede1b05e5"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODkyODQxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/IdleStateEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTozNTo1M1rOGDGoXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTozNTo1M1rOGDGoXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwNzU1MA==", "bodyText": "nit: it's", "url": "https://github.com/line/armeria/pull/2636#discussion_r405907550", "createdAt": "2020-04-09T01:35:53Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/IdleStateEvent.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.netty.util.internal.StringUtil;\n+\n+/**\n+ * An idle state event triggered by {@link KeepAliveHandler}.\n+ */\n+class IdleStateEvent {\n+\n+    // Forked from Netty 4.1.48\n+    // https://github.com/netty/netty/blob/81513c3728df8add3c94fd0bdaaf9ba424925b29/handler/src/main/java/io/netty/handler/timeout/IdleStateEvent.java\n+\n+    public static final IdleStateEvent FIRST_CONNECTION_IDLE_STATE_EVENT =\n+            new DefaultIdleStateEvent(IdleState.CONNECTION_IDLE, true);\n+    public static final IdleStateEvent CONNECTION_IDLE_STATE_EVENT =\n+            new DefaultIdleStateEvent(IdleState.CONNECTION_IDLE, false);\n+    public static final IdleStateEvent FIRST_PING_IDLE_STATE_EVENT =\n+            new DefaultIdleStateEvent(IdleState.PING_IDLE, true);\n+    public static final IdleStateEvent PING_IDLE_STATE_EVENT =\n+            new DefaultIdleStateEvent(IdleState.PING_IDLE, false);\n+\n+    private final IdleState state;\n+    private final boolean first;\n+\n+    /**\n+     * Constructor for sub-classes.\n+     *\n+     * @param state the {@link IdleStateEvent} which triggered the event.\n+     * @param first {@code true} if its the first idle event for the {@link IdleStateEvent}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4850e0202f5307be535f26d4aad8d86ede1b05e5"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODk0MzY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo0NDo1OVrOGDGxUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo0MjoxMVrOGDIieQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwOTg0Mg==", "bodyText": "How about inlining this? I think connection and ping idle event doesn't have to be in the same place.", "url": "https://github.com/line/armeria/pull/2636#discussion_r405909842", "createdAt": "2020-04-09T01:44:59Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java", "diffHunk": "@@ -0,0 +1,399 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.CONNECTION_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_CONNECTION_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_PING_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.PING_IDLE_STATE_EVENT;\n+\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Stopwatch;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+\n+/**\n+ * A {@link KeepAliveHandler} that writes a PING when neither read nor write was performed for\n+ * the specified {@code pingIntervalMillis}, and closes the connection\n+ * when neither read nor write was performed within the given {@code idleTimeoutMillis}.\n+ */\n+public abstract class KeepAliveHandler {\n+\n+    // Forked from Netty 4.1.48\n+    // https://github.com/netty/netty/blob/81513c3728df8add3c94fd0bdaaf9ba424925b29/handler/src/main/java/io/netty/handler/timeout/IdleStateEvent.java\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KeepAliveHandler.class);\n+\n+    private static IdleStateEvent newIdleStateEvent(IdleState state, boolean first) {\n+        switch (state) {\n+            case CONNECTION_IDLE:\n+                return first ? FIRST_CONNECTION_IDLE_STATE_EVENT : CONNECTION_IDLE_STATE_EVENT;\n+            case PING_IDLE:\n+                return first ? FIRST_PING_IDLE_STATE_EVENT : PING_IDLE_STATE_EVENT;\n+            default:\n+                throw new IllegalArgumentException(\"Unhandled: initialized=\" + state + \", first=\" + first);\n+        }\n+    }\n+\n+    @Nullable\n+    private final Stopwatch stopwatch = logger.isDebugEnabled() ? Stopwatch.createUnstarted() : null;\n+    private final ChannelFutureListener pingWriteListener = new PingWriteListener();\n+    private final Runnable shutdownRunnable = this::closeChannelAndLog;\n+\n+    private final Channel channel;\n+    private final String name;\n+\n+    @Nullable\n+    private ScheduledFuture<?> connectionIdleTimeout;\n+    private final long connectionIdleTimeNanos;\n+    private long lastConnectionIdleTime;\n+    private boolean firstConnectionIdleEvent = true;\n+\n+    @Nullable\n+    private ScheduledFuture<?> pingIdleTimeout;\n+    private final long pingIdleTimeNanos;\n+    private long lastPingIdleTime;\n+    private boolean firstPingIdleEvent = true;\n+\n+    private boolean isInitialized;\n+    private PingState pingState = PingState.IDLE;\n+\n+    @Nullable\n+    private ChannelFuture pingWriteFuture;\n+    @Nullable\n+    private Future<?> shutdownFuture;\n+\n+    protected KeepAliveHandler(Channel channel, String name, long idleTimeoutMillis, long pingIntervalMillis) {\n+        this.channel = channel;\n+        this.name = name;\n+\n+        if (idleTimeoutMillis <= 0) {\n+            connectionIdleTimeNanos = 0;\n+        } else {\n+            connectionIdleTimeNanos = TimeUnit.MILLISECONDS.toNanos(idleTimeoutMillis);\n+        }\n+        if (pingIntervalMillis <= 0) {\n+            pingIdleTimeNanos = 0;\n+        } else {\n+            pingIdleTimeNanos = TimeUnit.MILLISECONDS.toNanos(pingIntervalMillis);\n+        }\n+    }\n+\n+    public final void initialize(ChannelHandlerContext ctx) {\n+        // Avoid the case where destroy() is called before scheduling timeouts.\n+        // See: https://github.com/netty/netty/issues/143\n+        if (isInitialized) {\n+            return;\n+        }\n+        isInitialized = true;\n+\n+        if (connectionIdleTimeNanos > 0) {\n+            connectionIdleTimeout = executor().schedule(new ConnectionIdleTimeoutTask(ctx),\n+                                                        connectionIdleTimeNanos, TimeUnit.NANOSECONDS);\n+        }\n+        if (pingIdleTimeNanos > 0) {\n+            pingIdleTimeout = executor().schedule(new PingIdleTimeoutTask(ctx),\n+                                                  pingIdleTimeNanos, TimeUnit.NANOSECONDS);\n+        }\n+    }\n+\n+    public final void destroy() {\n+        isInitialized = true;\n+        if (connectionIdleTimeout != null) {\n+            connectionIdleTimeout.cancel(false);\n+            connectionIdleTimeout = null;\n+        }\n+        if (pingIdleTimeout != null) {\n+            pingIdleTimeout.cancel(false);\n+            pingIdleTimeout = null;\n+        }\n+        pingState = PingState.SHUTDOWN;\n+        cancelFutures();\n+    }\n+\n+    public final void onReadOrWrite() {\n+        if (pingState == PingState.SHUTDOWN) {\n+            return;\n+        }\n+\n+        if (connectionIdleTimeNanos > 0) {\n+            lastConnectionIdleTime = System.nanoTime();\n+            firstConnectionIdleEvent = true;\n+        }\n+\n+        if (pingResetsPreviousPing()) {\n+            if (pingIdleTimeNanos > 0) {\n+                lastPingIdleTime = System.nanoTime();\n+                firstPingIdleEvent = true;\n+            }\n+            pingState = PingState.IDLE;\n+            cancelFutures();\n+        }\n+    }\n+\n+    public final void onPing() {\n+        if (pingState == PingState.SHUTDOWN) {\n+            return;\n+        }\n+\n+        if (pingIdleTimeNanos > 0) {\n+            firstPingIdleEvent = true;\n+            lastPingIdleTime = System.nanoTime();\n+        }\n+        pingState = PingState.IDLE;\n+        cancelFutures();\n+    }\n+\n+    protected abstract ChannelFuture writePing(ChannelHandlerContext ctx);\n+\n+    protected abstract boolean pingResetsPreviousPing();\n+\n+    protected abstract boolean hasRequestsInProgress(ChannelHandlerContext ctx);\n+\n+    @Nullable\n+    protected final Future<?> shutdownFuture() {\n+        return shutdownFuture;\n+    }\n+\n+    protected final boolean isPendingPingAck() {\n+        return pingState == PingState.PENDING_PING_ACK;\n+    }\n+\n+    @VisibleForTesting\n+    final PingState state() {\n+        return pingState;\n+    }\n+\n+    @VisibleForTesting\n+    void onIdleEvent(ChannelHandlerContext ctx, IdleStateEvent evt) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4850e0202f5307be535f26d4aad8d86ede1b05e5"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzODgwOQ==", "bodyText": "That sounds good. I will remove this generalization.", "url": "https://github.com/line/armeria/pull/2636#discussion_r405938809", "createdAt": "2020-04-09T03:42:11Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java", "diffHunk": "@@ -0,0 +1,399 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.CONNECTION_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_CONNECTION_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.FIRST_PING_IDLE_STATE_EVENT;\n+import static com.linecorp.armeria.internal.common.IdleStateEvent.PING_IDLE_STATE_EVENT;\n+\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Stopwatch;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+\n+/**\n+ * A {@link KeepAliveHandler} that writes a PING when neither read nor write was performed for\n+ * the specified {@code pingIntervalMillis}, and closes the connection\n+ * when neither read nor write was performed within the given {@code idleTimeoutMillis}.\n+ */\n+public abstract class KeepAliveHandler {\n+\n+    // Forked from Netty 4.1.48\n+    // https://github.com/netty/netty/blob/81513c3728df8add3c94fd0bdaaf9ba424925b29/handler/src/main/java/io/netty/handler/timeout/IdleStateEvent.java\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KeepAliveHandler.class);\n+\n+    private static IdleStateEvent newIdleStateEvent(IdleState state, boolean first) {\n+        switch (state) {\n+            case CONNECTION_IDLE:\n+                return first ? FIRST_CONNECTION_IDLE_STATE_EVENT : CONNECTION_IDLE_STATE_EVENT;\n+            case PING_IDLE:\n+                return first ? FIRST_PING_IDLE_STATE_EVENT : PING_IDLE_STATE_EVENT;\n+            default:\n+                throw new IllegalArgumentException(\"Unhandled: initialized=\" + state + \", first=\" + first);\n+        }\n+    }\n+\n+    @Nullable\n+    private final Stopwatch stopwatch = logger.isDebugEnabled() ? Stopwatch.createUnstarted() : null;\n+    private final ChannelFutureListener pingWriteListener = new PingWriteListener();\n+    private final Runnable shutdownRunnable = this::closeChannelAndLog;\n+\n+    private final Channel channel;\n+    private final String name;\n+\n+    @Nullable\n+    private ScheduledFuture<?> connectionIdleTimeout;\n+    private final long connectionIdleTimeNanos;\n+    private long lastConnectionIdleTime;\n+    private boolean firstConnectionIdleEvent = true;\n+\n+    @Nullable\n+    private ScheduledFuture<?> pingIdleTimeout;\n+    private final long pingIdleTimeNanos;\n+    private long lastPingIdleTime;\n+    private boolean firstPingIdleEvent = true;\n+\n+    private boolean isInitialized;\n+    private PingState pingState = PingState.IDLE;\n+\n+    @Nullable\n+    private ChannelFuture pingWriteFuture;\n+    @Nullable\n+    private Future<?> shutdownFuture;\n+\n+    protected KeepAliveHandler(Channel channel, String name, long idleTimeoutMillis, long pingIntervalMillis) {\n+        this.channel = channel;\n+        this.name = name;\n+\n+        if (idleTimeoutMillis <= 0) {\n+            connectionIdleTimeNanos = 0;\n+        } else {\n+            connectionIdleTimeNanos = TimeUnit.MILLISECONDS.toNanos(idleTimeoutMillis);\n+        }\n+        if (pingIntervalMillis <= 0) {\n+            pingIdleTimeNanos = 0;\n+        } else {\n+            pingIdleTimeNanos = TimeUnit.MILLISECONDS.toNanos(pingIntervalMillis);\n+        }\n+    }\n+\n+    public final void initialize(ChannelHandlerContext ctx) {\n+        // Avoid the case where destroy() is called before scheduling timeouts.\n+        // See: https://github.com/netty/netty/issues/143\n+        if (isInitialized) {\n+            return;\n+        }\n+        isInitialized = true;\n+\n+        if (connectionIdleTimeNanos > 0) {\n+            connectionIdleTimeout = executor().schedule(new ConnectionIdleTimeoutTask(ctx),\n+                                                        connectionIdleTimeNanos, TimeUnit.NANOSECONDS);\n+        }\n+        if (pingIdleTimeNanos > 0) {\n+            pingIdleTimeout = executor().schedule(new PingIdleTimeoutTask(ctx),\n+                                                  pingIdleTimeNanos, TimeUnit.NANOSECONDS);\n+        }\n+    }\n+\n+    public final void destroy() {\n+        isInitialized = true;\n+        if (connectionIdleTimeout != null) {\n+            connectionIdleTimeout.cancel(false);\n+            connectionIdleTimeout = null;\n+        }\n+        if (pingIdleTimeout != null) {\n+            pingIdleTimeout.cancel(false);\n+            pingIdleTimeout = null;\n+        }\n+        pingState = PingState.SHUTDOWN;\n+        cancelFutures();\n+    }\n+\n+    public final void onReadOrWrite() {\n+        if (pingState == PingState.SHUTDOWN) {\n+            return;\n+        }\n+\n+        if (connectionIdleTimeNanos > 0) {\n+            lastConnectionIdleTime = System.nanoTime();\n+            firstConnectionIdleEvent = true;\n+        }\n+\n+        if (pingResetsPreviousPing()) {\n+            if (pingIdleTimeNanos > 0) {\n+                lastPingIdleTime = System.nanoTime();\n+                firstPingIdleEvent = true;\n+            }\n+            pingState = PingState.IDLE;\n+            cancelFutures();\n+        }\n+    }\n+\n+    public final void onPing() {\n+        if (pingState == PingState.SHUTDOWN) {\n+            return;\n+        }\n+\n+        if (pingIdleTimeNanos > 0) {\n+            firstPingIdleEvent = true;\n+            lastPingIdleTime = System.nanoTime();\n+        }\n+        pingState = PingState.IDLE;\n+        cancelFutures();\n+    }\n+\n+    protected abstract ChannelFuture writePing(ChannelHandlerContext ctx);\n+\n+    protected abstract boolean pingResetsPreviousPing();\n+\n+    protected abstract boolean hasRequestsInProgress(ChannelHandlerContext ctx);\n+\n+    @Nullable\n+    protected final Future<?> shutdownFuture() {\n+        return shutdownFuture;\n+    }\n+\n+    protected final boolean isPendingPingAck() {\n+        return pingState == PingState.PENDING_PING_ACK;\n+    }\n+\n+    @VisibleForTesting\n+    final PingState state() {\n+        return pingState;\n+    }\n+\n+    @VisibleForTesting\n+    void onIdleEvent(ChannelHandlerContext ctx, IdleStateEvent evt) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwOTg0Mg=="}, "originalCommit": {"oid": "4850e0202f5307be535f26d4aad8d86ede1b05e5"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODk0NzcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo0NzozMlrOGDGz0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo0NzozMlrOGDGz0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMDQ4MQ==", "bodyText": "ditto", "url": "https://github.com/line/armeria/pull/2636#discussion_r405910481", "createdAt": "2020-04-09T01:47:32Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java", "diffHunk": "@@ -461,33 +463,39 @@ public ServerBuilder idleTimeout(Duration idleTimeout) {\n     }\n \n     /**\n-     * Sets the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> timeout.\n+     * Sets the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> interval.\n      *\n-     * @param http2PingTimeoutMillis the timeout in milliseconds. {@code 0} disables the timeout.\n-     */\n-    public ServerBuilder http2PingTimeoutMillis(long http2PingTimeoutMillis) {\n-        this.http2PingTimeoutMillis = validateNonNegative(http2PingTimeoutMillis, \"http2PingTimeoutMillis\");\n-        return this;\n-    }\n-\n-    /**\n-     * Sets the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> timeout.\n+     * <p>Note that this settings is only in effect when {@link #idleTimeoutMillis(long)}} or\n+     * {@link #idleTimeout(Duration)} is greater than the specified PING interval.\n      *\n-     * @param http2PingTimeoutMillis the timeout. {@code 0} disables the timeout.\n-     */\n-    public ServerBuilder http2PingTimeoutMillis(Duration http2PingTimeoutMillis) {\n-        requireNonNull(http2PingTimeoutMillis, \"http2PingTimeoutMillis\");\n-        this.http2PingTimeoutMillis =\n-                validateNonNegative(http2PingTimeoutMillis.toMillis(), \"http2PingTimeoutMillis\");\n+     * <p>The minimum PING interval is 10 seconds.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4850e0202f5307be535f26d4aad8d86ede1b05e5"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODk0ODAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo0Nzo0M1rOGDG0AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo0Nzo0M1rOGDG0AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMDUyOQ==", "bodyText": "ditto", "url": "https://github.com/line/armeria/pull/2636#discussion_r405910529", "createdAt": "2020-04-09T01:47:43Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java", "diffHunk": "@@ -461,33 +463,39 @@ public ServerBuilder idleTimeout(Duration idleTimeout) {\n     }\n \n     /**\n-     * Sets the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> timeout.\n+     * Sets the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> interval.\n      *\n-     * @param http2PingTimeoutMillis the timeout in milliseconds. {@code 0} disables the timeout.\n-     */\n-    public ServerBuilder http2PingTimeoutMillis(long http2PingTimeoutMillis) {\n-        this.http2PingTimeoutMillis = validateNonNegative(http2PingTimeoutMillis, \"http2PingTimeoutMillis\");\n-        return this;\n-    }\n-\n-    /**\n-     * Sets the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> timeout.\n+     * <p>Note that this settings is only in effect when {@link #idleTimeoutMillis(long)}} or\n+     * {@link #idleTimeout(Duration)} is greater than the specified PING interval.\n      *\n-     * @param http2PingTimeoutMillis the timeout. {@code 0} disables the timeout.\n-     */\n-    public ServerBuilder http2PingTimeoutMillis(Duration http2PingTimeoutMillis) {\n-        requireNonNull(http2PingTimeoutMillis, \"http2PingTimeoutMillis\");\n-        this.http2PingTimeoutMillis =\n-                validateNonNegative(http2PingTimeoutMillis.toMillis(), \"http2PingTimeoutMillis\");\n+     * <p>The minimum PING interval is 10 seconds.\n+     * {@code 0} means the server will not send PING frames on an HTTP/2 connection.\n+     *\n+     * @throws IllegalArgumentException if the specified {@code pingIntervalMillis}\n+     *                                  is smaller than 10000 milliseconds.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4850e0202f5307be535f26d4aad8d86ede1b05e5"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODY4MjQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNjozMDo1MlrOGEeCmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNjozMDo1MlrOGEeCmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzOTY3NQ==", "bodyText": "minimum -> minimum allowed", "url": "https://github.com/line/armeria/pull/2636#discussion_r407339675", "createdAt": "2020-04-13T06:30:52Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -419,36 +428,47 @@ public ClientFactoryBuilder idleTimeoutMillis(long idleTimeoutMillis) {\n     }\n \n     /**\n-     * Sets the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> timeout.\n+     * Sets the PING interval in milliseconds.\n+     * When neither read nor write was performed for the given {@code pingIntervalMillis},\n+     * a <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> frame is sent for HTTP/2 or\n+     * an <a herf=\"https://tools.ietf.org/html/rfc7231#section-4.3.7\">OPTIONS</a> request with an asterisk (\"*\")\n+     * is sent for HTTP/1.\n      *\n-     * @param http2PingTimeoutMillis the timeout in milliseconds. {@code 0} disables the timeout.\n-     */\n-    public ClientFactoryBuilder http2PingTimeoutMillis(long http2PingTimeoutMillis) {\n-        checkArgument(http2PingTimeoutMillis >= 0,\n-                      \"http2PingTimeoutMillis: %s (expected: >= 0)\", http2PingTimeoutMillis);\n-        option(ClientFactoryOption.HTTP2_PING_TIMEOUT_MILLIS, http2PingTimeoutMillis);\n-        return this;\n-    }\n-\n-    /**\n-     * Sets the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> timeout.\n+     * <p>Note that this settings is only in effect when {@link #idleTimeoutMillis(long)}} or\n+     * {@link #idleTimeout(Duration)} is greater than the specified PING interval.\n      *\n-     * @param http2PingTimeout the timeout. {@code 0} disables the timeout.\n-     */\n-    public ClientFactoryBuilder http2PingTimeout(Duration http2PingTimeout) {\n-        requireNonNull(http2PingTimeout, \"http2PingTimeout\");\n-        checkArgument(http2PingTimeout.toMillis() >= 0,\n-                      \"http2PingTimeoutMillis: %s (expected: >= 0)\", http2PingTimeout.toMillis());\n-        http2PingTimeoutMillis(http2PingTimeout.toMillis());\n+     * <p>The minimum PING interval is {@value #MIN_PING_INTERVAL_MILLIS} milliseconds.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc4459e9a3b7b87988508fcd2f4e19136f1ac17"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODY4NjkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNjozMzoxOVrOGEeFOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNjozMzoxOVrOGEeFOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM0MDM0Ng==", "bodyText": "min -> clamped?", "url": "https://github.com/line/armeria/pull/2636#discussion_r407340346", "createdAt": "2020-04-13T06:33:19Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -558,7 +578,22 @@ private ClientFactoryOptions buildOptions() {\n             return ClientFactoryOption.ADDRESS_RESOLVER_GROUP_FACTORY.newValue(addressResolverGroupFactory);\n         });\n \n-        return ClientFactoryOptions.of(options.values());\n+        final ClientFactoryOptions newOptions = ClientFactoryOptions.of(options.values());\n+        final long idleTimeoutMillis = newOptions.idleTimeoutMillis();\n+        final long pingIntervalMillis = newOptions.pingIntervalMillis();\n+        if (idleTimeoutMillis > 0 && pingIntervalMillis > 0) {\n+            final long minPingIntervalMillis = Math.max(pingIntervalMillis, MIN_PING_INTERVAL_MILLIS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc4459e9a3b7b87988508fcd2f4e19136f1ac17"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODc0MjE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNzowMjowNlrOGEelwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNzowMjowNlrOGEelwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM0ODY3NA==", "bodyText": "Ditto", "url": "https://github.com/line/armeria/pull/2636#discussion_r407348674", "createdAt": "2020-04-13T07:02:06Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java", "diffHunk": "@@ -461,33 +463,39 @@ public ServerBuilder idleTimeout(Duration idleTimeout) {\n     }\n \n     /**\n-     * Sets the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> timeout.\n+     * Sets the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> interval.\n      *\n-     * @param http2PingTimeoutMillis the timeout in milliseconds. {@code 0} disables the timeout.\n-     */\n-    public ServerBuilder http2PingTimeoutMillis(long http2PingTimeoutMillis) {\n-        this.http2PingTimeoutMillis = validateNonNegative(http2PingTimeoutMillis, \"http2PingTimeoutMillis\");\n-        return this;\n-    }\n-\n-    /**\n-     * Sets the HTTP/2 <a href=\"https://httpwg.org/specs/rfc7540.html#PING\">PING</a> timeout.\n+     * <p>Note that this settings is only in effect when {@link #idleTimeoutMillis(long)}} or\n+     * {@link #idleTimeout(Duration)} is greater than the specified PING interval.\n      *\n-     * @param http2PingTimeoutMillis the timeout. {@code 0} disables the timeout.\n-     */\n-    public ServerBuilder http2PingTimeoutMillis(Duration http2PingTimeoutMillis) {\n-        requireNonNull(http2PingTimeoutMillis, \"http2PingTimeoutMillis\");\n-        this.http2PingTimeoutMillis =\n-                validateNonNegative(http2PingTimeoutMillis.toMillis(), \"http2PingTimeoutMillis\");\n+     * <p>The minimum PING interval is {@value #MIN_PING_INTERVAL_MILLIS} milliseconds.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc4459e9a3b7b87988508fcd2f4e19136f1ac17"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2824, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}