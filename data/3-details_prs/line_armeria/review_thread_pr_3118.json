{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1NjUzMDM4", "number": 3118, "reviewThreads": {"totalCount": 79, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNzoxMDoyN1rOExxczA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwMjoyODowN1rOE91maw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjI1ODY4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNzoxMDoyN1rOHoC7_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNzoxMDoyN1rOHoC7_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1MzIxNA==", "bodyText": "nit: requireNonNull(cookiePolicy, \"cookiePolicy\")", "url": "https://github.com/line/armeria/pull/3118#discussion_r511753214", "createdAt": "2020-10-26T07:10:27Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieClient.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.net.CookiePolicy;\n+import java.net.URI;\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Decorates a {@link HttpClient} to set cookies to {@code Cookie} header of outgoing {@link Request} and\n+ * store cookies from {@code Set-Cookie} headers of incoming {@link Response}.\n+ */\n+public final class CookieClient extends SimpleDecoratingHttpClient {\n+\n+    /**\n+     * Creates a new {@link CookieClient} decorator.\n+     */\n+    public static Function<? super HttpClient, CookieClient> newDecorator() {\n+        return newDecorator(new DefaultCookieJar());\n+    }\n+\n+    /**\n+     * Creates a new {@link CookieClient} decorator with a custom {@link CookiePolicy}.\n+     */\n+    public static Function<? super HttpClient, CookieClient> newDecorator(CookiePolicy cookiePolicy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2b8dac25a3fa7237560617e854a8518deaa9b6"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjI1OTI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNzoxMDo0NlrOHoC8aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNzoxMDo0NlrOHoC8aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1MzMyMw==", "bodyText": "nit: requireNonNull(cookieJar, \"cookieJar\") before the lambda expression?", "url": "https://github.com/line/armeria/pull/3118#discussion_r511753323", "createdAt": "2020-10-26T07:10:46Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieClient.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.net.CookiePolicy;\n+import java.net.URI;\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Decorates a {@link HttpClient} to set cookies to {@code Cookie} header of outgoing {@link Request} and\n+ * store cookies from {@code Set-Cookie} headers of incoming {@link Response}.\n+ */\n+public final class CookieClient extends SimpleDecoratingHttpClient {\n+\n+    /**\n+     * Creates a new {@link CookieClient} decorator.\n+     */\n+    public static Function<? super HttpClient, CookieClient> newDecorator() {\n+        return newDecorator(new DefaultCookieJar());\n+    }\n+\n+    /**\n+     * Creates a new {@link CookieClient} decorator with a custom {@link CookiePolicy}.\n+     */\n+    public static Function<? super HttpClient, CookieClient> newDecorator(CookiePolicy cookiePolicy) {\n+        final CookieJar cookieJar = new DefaultCookieJar();\n+        cookieJar.setCookiePolicy(cookiePolicy);\n+        return newDecorator(cookieJar);\n+    }\n+\n+    /**\n+     * Creates a new {@link CookieClient} decorator with a {@link CookieJar} implementation.\n+     */\n+    public static Function<? super HttpClient, CookieClient> newDecorator(CookieJar cookieJar) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2b8dac25a3fa7237560617e854a8518deaa9b6"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjQzMjQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwODoxMzo0NVrOHoEhag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwODoxMzo0NVrOHoEhag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc3OTE3OA==", "bodyText": "Use ImmutableSet to avoid additional copies?\nImmutableSet.Builder<Cookie> cookieBuilder = ImmutableSet.builderWithExpectedSize(cookieList.size());", "url": "https://github.com/line/armeria/pull/3118#discussion_r511779178", "createdAt": "2020-10-26T08:13:45Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.CookieManager;\n+import java.net.CookiePolicy;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation that delegates to JDK's {@link CookieManager}.\n+ * @see CookieManager\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private static final Map<String, List<String>> EMPTY_MAP = ImmutableMap.of();\n+    private final CookieManager cookieManager;\n+\n+    DefaultCookieJar() {\n+        cookieManager = new CookieManager(null, CookiePolicy.ACCEPT_ALL);\n+    }\n+\n+    @Override\n+    public Cookies get(URI uri) {\n+        try {\n+            final List<String> cookieList = cookieManager.get(uri, EMPTY_MAP).get(\"Cookie\");\n+            if (cookieList == null || cookieList.isEmpty()) {\n+                return Cookies.of();\n+            }\n+            final List<Cookie> cookies = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2b8dac25a3fa7237560617e854a8518deaa9b6"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjQ0MDc2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwODoxNjowN1rOHoEmNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwODoxNjowN1rOHoEmNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc4MDQwNQ==", "bodyText": "requireNonNull(uri, \"uri\")?", "url": "https://github.com/line/armeria/pull/3118#discussion_r511780405", "createdAt": "2020-10-26T08:16:07Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.CookieManager;\n+import java.net.CookiePolicy;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation that delegates to JDK's {@link CookieManager}.\n+ * @see CookieManager\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private static final Map<String, List<String>> EMPTY_MAP = ImmutableMap.of();\n+    private final CookieManager cookieManager;\n+\n+    DefaultCookieJar() {\n+        cookieManager = new CookieManager(null, CookiePolicy.ACCEPT_ALL);\n+    }\n+\n+    @Override\n+    public Cookies get(URI uri) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2b8dac25a3fa7237560617e854a8518deaa9b6"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjQ0MjM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwODoxNjozN1rOHoEnOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwODoxNjozN1rOHoEnOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc4MDY2Nw==", "bodyText": "requireNonNull?", "url": "https://github.com/line/armeria/pull/3118#discussion_r511780667", "createdAt": "2020-10-26T08:16:37Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.CookieManager;\n+import java.net.CookiePolicy;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation that delegates to JDK's {@link CookieManager}.\n+ * @see CookieManager\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private static final Map<String, List<String>> EMPTY_MAP = ImmutableMap.of();\n+    private final CookieManager cookieManager;\n+\n+    DefaultCookieJar() {\n+        cookieManager = new CookieManager(null, CookiePolicy.ACCEPT_ALL);\n+    }\n+\n+    @Override\n+    public Cookies get(URI uri) {\n+        try {\n+            final List<String> cookieList = cookieManager.get(uri, EMPTY_MAP).get(\"Cookie\");\n+            if (cookieList == null || cookieList.isEmpty()) {\n+                return Cookies.of();\n+            }\n+            final List<Cookie> cookies = new ArrayList<>();\n+            cookieList.forEach(c -> cookies.addAll(Cookie.fromCookieHeader(c)));\n+            return Cookies.of(cookies);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void set(URI uri, Cookies cookies) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2b8dac25a3fa7237560617e854a8518deaa9b6"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjQ0Mjg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwODoxNjo0NlrOHoEniQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwODoxNjo0NlrOHoEniQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc4MDc0NQ==", "bodyText": "Ditto", "url": "https://github.com/line/armeria/pull/3118#discussion_r511780745", "createdAt": "2020-10-26T08:16:46Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.CookieManager;\n+import java.net.CookiePolicy;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation that delegates to JDK's {@link CookieManager}.\n+ * @see CookieManager\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private static final Map<String, List<String>> EMPTY_MAP = ImmutableMap.of();\n+    private final CookieManager cookieManager;\n+\n+    DefaultCookieJar() {\n+        cookieManager = new CookieManager(null, CookiePolicy.ACCEPT_ALL);\n+    }\n+\n+    @Override\n+    public Cookies get(URI uri) {\n+        try {\n+            final List<String> cookieList = cookieManager.get(uri, EMPTY_MAP).get(\"Cookie\");\n+            if (cookieList == null || cookieList.isEmpty()) {\n+                return Cookies.of();\n+            }\n+            final List<Cookie> cookies = new ArrayList<>();\n+            cookieList.forEach(c -> cookies.addAll(Cookie.fromCookieHeader(c)));\n+            return Cookies.of(cookies);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void set(URI uri, Cookies cookies) {\n+        try {\n+            cookieManager.put(uri, ImmutableMap.of(\"Set-Cookie\", Cookie.toSetCookieHeaders(cookies)));\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void setCookiePolicy(CookiePolicy policy) {\n+        cookieManager.setCookiePolicy(policy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2b8dac25a3fa7237560617e854a8518deaa9b6"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjQ1NTg2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwODoyMDozOVrOHoEvaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwODoyMDozOVrOHoEvaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc4Mjc2MQ==", "bodyText": "Could be private?", "url": "https://github.com/line/armeria/pull/3118#discussion_r511782761", "createdAt": "2020-10-26T08:20:39Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieClient.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.net.CookiePolicy;\n+import java.net.URI;\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Decorates a {@link HttpClient} to set cookies to {@code Cookie} header of outgoing {@link Request} and\n+ * store cookies from {@code Set-Cookie} headers of incoming {@link Response}.\n+ */\n+public final class CookieClient extends SimpleDecoratingHttpClient {\n+\n+    /**\n+     * Creates a new {@link CookieClient} decorator.\n+     */\n+    public static Function<? super HttpClient, CookieClient> newDecorator() {\n+        return newDecorator(new DefaultCookieJar());\n+    }\n+\n+    /**\n+     * Creates a new {@link CookieClient} decorator with a custom {@link CookiePolicy}.\n+     */\n+    public static Function<? super HttpClient, CookieClient> newDecorator(CookiePolicy cookiePolicy) {\n+        final CookieJar cookieJar = new DefaultCookieJar();\n+        cookieJar.setCookiePolicy(cookiePolicy);\n+        return newDecorator(cookieJar);\n+    }\n+\n+    /**\n+     * Creates a new {@link CookieClient} decorator with a {@link CookieJar} implementation.\n+     */\n+    public static Function<? super HttpClient, CookieClient> newDecorator(CookieJar cookieJar) {\n+        return client -> new CookieClient(client, cookieJar);\n+    }\n+\n+    private final CookieJar cookieJar;\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpClient}.\n+     */\n+    CookieClient(HttpClient delegate, CookieJar cookieJar) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2b8dac25a3fa7237560617e854a8518deaa9b6"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjQ3OTQ0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwODoyNzoyNFrOHoE9UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOToyMzowM1rOHoG4_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc4NjMyMA==", "bodyText": "How about following the default policy of JDK which uses CookiePolicy.ACCEPT_ORIGINAL_SERVER by default.\nhttps://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/net/CookieManager.html#%3Cinit%3E(java.net.CookieStore,java.net.CookiePolicy)", "url": "https://github.com/line/armeria/pull/3118#discussion_r511786320", "createdAt": "2020-10-26T08:27:24Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.CookieManager;\n+import java.net.CookiePolicy;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation that delegates to JDK's {@link CookieManager}.\n+ * @see CookieManager\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private static final Map<String, List<String>> EMPTY_MAP = ImmutableMap.of();\n+    private final CookieManager cookieManager;\n+\n+    DefaultCookieJar() {\n+        cookieManager = new CookieManager(null, CookiePolicy.ACCEPT_ALL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2b8dac25a3fa7237560617e854a8518deaa9b6"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNzk4Mg==", "bodyText": "It seems like we can just do:\ncookieManager = new CookieManager() to apply the default cookie manager.", "url": "https://github.com/line/armeria/pull/3118#discussion_r511817982", "createdAt": "2020-10-26T09:23:03Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.CookieManager;\n+import java.net.CookiePolicy;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation that delegates to JDK's {@link CookieManager}.\n+ * @see CookieManager\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private static final Map<String, List<String>> EMPTY_MAP = ImmutableMap.of();\n+    private final CookieManager cookieManager;\n+\n+    DefaultCookieJar() {\n+        cookieManager = new CookieManager(null, CookiePolicy.ACCEPT_ALL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc4NjMyMA=="}, "originalCommit": {"oid": "dc2b8dac25a3fa7237560617e854a8518deaa9b6"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjY2Mjc5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOToxNjo1N1rOHoGq1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOToxNjo1N1rOHoGq1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNDM1OQ==", "bodyText": "nit: a -> an {@link HttpClient}\n{@link Request} -> {@link HttpRequest}\n{@link Response} -> {@link HttpResponse}", "url": "https://github.com/line/armeria/pull/3118#discussion_r511814359", "createdAt": "2020-10-26T09:16:57Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieClient.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.net.CookiePolicy;\n+import java.net.URI;\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Decorates a {@link HttpClient} to set cookies to {@code Cookie} header of outgoing {@link Request} and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2b8dac25a3fa7237560617e854a8518deaa9b6"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjczODA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/SetCookieResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOTozNToxM1rOHoHXvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMDo1MDo0MlrOHpQVmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyNTg1Mg==", "bodyText": "I think we can just check if it's ResponseHeaders or not:\nprotected HttpObject filter(HttpObject obj) {\n    if (!(obj instanceof ResponseHeaders)) {\n        return obj;\n    }\n    final ResponseHeaders responseHeaders = (ResponseHeaders) obj;\n    if (responseHeaders.status().isInformational()) {\n        return obj;\n    }\n    final List<String> setCookieHeaders = responseHeaders.getAll(HttpHeaderNames.SET_COOKIE);\n    if (!setCookieHeaders.isEmpty()) {\n        consumer.accept(setCookieHeaders);\n    }\n    return obj;\n}", "url": "https://github.com/line/armeria/pull/3118#discussion_r511825852", "createdAt": "2020-10-26T09:35:13Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/SetCookieResponse.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import com.linecorp.armeria.common.FilteredHttpResponse;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;\n+\n+/**\n+ * A {@link FilteredHttpResponse} that extracts {@code Set-Cookie} headers.\n+ */\n+final class SetCookieResponse extends FilteredHttpResponse {\n+\n+    private final Consumer<List<String>> consumer;\n+    private boolean headersReceived;\n+\n+    SetCookieResponse(HttpResponse delegate, Consumer<List<String>> consumer) {\n+        super(delegate);\n+        this.consumer = consumer;\n+    }\n+\n+    @Override\n+    protected HttpObject filter(HttpObject obj) {\n+        if (!(obj instanceof HttpHeaders)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2b8dac25a3fa7237560617e854a8518deaa9b6"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAyMTMzNg==", "bodyText": "\ud83d\ude4f", "url": "https://github.com/line/armeria/pull/3118#discussion_r513021336", "createdAt": "2020-10-27T20:50:42Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/SetCookieResponse.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import com.linecorp.armeria.common.FilteredHttpResponse;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;\n+\n+/**\n+ * A {@link FilteredHttpResponse} that extracts {@code Set-Cookie} headers.\n+ */\n+final class SetCookieResponse extends FilteredHttpResponse {\n+\n+    private final Consumer<List<String>> consumer;\n+    private boolean headersReceived;\n+\n+    SetCookieResponse(HttpResponse delegate, Consumer<List<String>> consumer) {\n+        super(delegate);\n+        this.consumer = consumer;\n+    }\n+\n+    @Override\n+    protected HttpObject filter(HttpObject obj) {\n+        if (!(obj instanceof HttpHeaders)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyNTg1Mg=="}, "originalCommit": {"oid": "dc2b8dac25a3fa7237560617e854a8518deaa9b6"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjc3MTQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOTo0Mzo0N1rOHoHrwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMzozOTo0MlrOHqHfaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzMDk3OA==", "bodyText": "I think this is very inefficient to convert the Cookie to String and the String to Cookie and to String again when in get(...).\nHow about just implement our own cookieManager? I think it's not that hard to implement if we don't consider set-cookie2 header which is deprecated. (Armeria doesn't support it yet) Also, I think we can add the feature later if there's a demand. /cc @trustin, @ikhoon\nAgain, I think we don't have to support portList but I'm not 100% sure. \ud83e\udd23", "url": "https://github.com/line/armeria/pull/3118#discussion_r511830978", "createdAt": "2020-10-26T09:43:47Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.CookieManager;\n+import java.net.CookiePolicy;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation that delegates to JDK's {@link CookieManager}.\n+ * @see CookieManager\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private static final Map<String, List<String>> EMPTY_MAP = ImmutableMap.of();\n+    private final CookieManager cookieManager;\n+\n+    DefaultCookieJar() {\n+        cookieManager = new CookieManager(null, CookiePolicy.ACCEPT_ALL);\n+    }\n+\n+    @Override\n+    public Cookies get(URI uri) {\n+        try {\n+            final List<String> cookieList = cookieManager.get(uri, EMPTY_MAP).get(\"Cookie\");\n+            if (cookieList == null || cookieList.isEmpty()) {\n+                return Cookies.of();\n+            }\n+            final List<Cookie> cookies = new ArrayList<>();\n+            cookieList.forEach(c -> cookies.addAll(Cookie.fromCookieHeader(c)));\n+            return Cookies.of(cookies);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void set(URI uri, Cookies cookies) {\n+        try {\n+            cookieManager.put(uri, ImmutableMap.of(\"Set-Cookie\", Cookie.toSetCookieHeaders(cookies)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc2b8dac25a3fa7237560617e854a8518deaa9b6"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg2MTMwOQ==", "bodyText": "How about just implement our own cookieManager?\n\nI prefer the Armeria optiomized version. We also should drop old cookies exceeding max-age.", "url": "https://github.com/line/armeria/pull/3118#discussion_r511861309", "createdAt": "2020-10-26T10:33:56Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.CookieManager;\n+import java.net.CookiePolicy;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation that delegates to JDK's {@link CookieManager}.\n+ * @see CookieManager\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private static final Map<String, List<String>> EMPTY_MAP = ImmutableMap.of();\n+    private final CookieManager cookieManager;\n+\n+    DefaultCookieJar() {\n+        cookieManager = new CookieManager(null, CookiePolicy.ACCEPT_ALL);\n+    }\n+\n+    @Override\n+    public Cookies get(URI uri) {\n+        try {\n+            final List<String> cookieList = cookieManager.get(uri, EMPTY_MAP).get(\"Cookie\");\n+            if (cookieList == null || cookieList.isEmpty()) {\n+                return Cookies.of();\n+            }\n+            final List<Cookie> cookies = new ArrayList<>();\n+            cookieList.forEach(c -> cookies.addAll(Cookie.fromCookieHeader(c)));\n+            return Cookies.of(cookies);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void set(URI uri, Cookies cookies) {\n+        try {\n+            cookieManager.put(uri, ImmutableMap.of(\"Set-Cookie\", Cookie.toSetCookieHeaders(cookies)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzMDk3OA=="}, "originalCommit": {"oid": "dc2b8dac25a3fa7237560617e854a8518deaa9b6"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4MTQ2MQ==", "bodyText": "Thanks for the reviews \ud83d\ude47\u200d\u2642\ufe0f\nLove the idea, I'll see to the implementation asap.", "url": "https://github.com/line/armeria/pull/3118#discussion_r512081461", "createdAt": "2020-10-26T16:08:11Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.CookieManager;\n+import java.net.CookiePolicy;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation that delegates to JDK's {@link CookieManager}.\n+ * @see CookieManager\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private static final Map<String, List<String>> EMPTY_MAP = ImmutableMap.of();\n+    private final CookieManager cookieManager;\n+\n+    DefaultCookieJar() {\n+        cookieManager = new CookieManager(null, CookiePolicy.ACCEPT_ALL);\n+    }\n+\n+    @Override\n+    public Cookies get(URI uri) {\n+        try {\n+            final List<String> cookieList = cookieManager.get(uri, EMPTY_MAP).get(\"Cookie\");\n+            if (cookieList == null || cookieList.isEmpty()) {\n+                return Cookies.of();\n+            }\n+            final List<Cookie> cookies = new ArrayList<>();\n+            cookieList.forEach(c -> cookies.addAll(Cookie.fromCookieHeader(c)));\n+            return Cookies.of(cookies);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void set(URI uri, Cookies cookies) {\n+        try {\n+            cookieManager.put(uri, ImmutableMap.of(\"Set-Cookie\", Cookie.toSetCookieHeaders(cookies)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzMDk3OA=="}, "originalCommit": {"oid": "dc2b8dac25a3fa7237560617e854a8518deaa9b6"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzkyNDk2OA==", "bodyText": "@minwoox, @ikhoon, I've implemented a CookieJar that stores Armeria's Cookie. Please take a look \ud83d\ude4f", "url": "https://github.com/line/armeria/pull/3118#discussion_r513924968", "createdAt": "2020-10-29T03:39:42Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.CookieManager;\n+import java.net.CookiePolicy;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation that delegates to JDK's {@link CookieManager}.\n+ * @see CookieManager\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private static final Map<String, List<String>> EMPTY_MAP = ImmutableMap.of();\n+    private final CookieManager cookieManager;\n+\n+    DefaultCookieJar() {\n+        cookieManager = new CookieManager(null, CookiePolicy.ACCEPT_ALL);\n+    }\n+\n+    @Override\n+    public Cookies get(URI uri) {\n+        try {\n+            final List<String> cookieList = cookieManager.get(uri, EMPTY_MAP).get(\"Cookie\");\n+            if (cookieList == null || cookieList.isEmpty()) {\n+                return Cookies.of();\n+            }\n+            final List<Cookie> cookies = new ArrayList<>();\n+            cookieList.forEach(c -> cookies.addAll(Cookie.fromCookieHeader(c)));\n+            return Cookies.of(cookies);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void set(URI uri, Cookies cookies) {\n+        try {\n+            cookieManager.put(uri, ImmutableMap.of(\"Set-Cookie\", Cookie.toSetCookieHeaders(cookies)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzMDk3OA=="}, "originalCommit": {"oid": "dc2b8dac25a3fa7237560617e854a8518deaa9b6"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDkxNTE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzoyMDozNVrOHqPCEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzoyMDozNVrOHqPCEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA0ODUyOQ==", "bodyText": "with a custom {@link CookiePolicy}. -> with the specified {@link CookiePolicy}.\nbecause it might not be a customized policy?", "url": "https://github.com/line/armeria/pull/3118#discussion_r514048529", "createdAt": "2020-10-29T07:20:35Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieClient.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+\n+/**\n+ * Decorates an {@link HttpClient} to set cookies to {@code Cookie} header of outgoing {@link HttpRequest} and\n+ * store cookies from {@code Set-Cookie} headers of incoming {@link HttpResponse}.\n+ */\n+public final class CookieClient extends SimpleDecoratingHttpClient {\n+\n+    /**\n+     * Creates a new {@link CookieClient} decorator.\n+     */\n+    public static Function<? super HttpClient, CookieClient> newDecorator() {\n+        return newDecorator(new DefaultCookieJar());\n+    }\n+\n+    /**\n+     * Creates a new {@link CookieClient} decorator with a custom {@link CookiePolicy}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356b3dd2f89271687641f8f30ea08519d878c702"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDkxOTEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzoyMjowOFrOHqPEcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzoyMjowOFrOHqPEcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA0OTEzOQ==", "bodyText": "How about setting CookiePolicy when creating the DefaultCookieJar?", "url": "https://github.com/line/armeria/pull/3118#discussion_r514049139", "createdAt": "2020-10-29T07:22:08Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieClient.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+\n+/**\n+ * Decorates an {@link HttpClient} to set cookies to {@code Cookie} header of outgoing {@link HttpRequest} and\n+ * store cookies from {@code Set-Cookie} headers of incoming {@link HttpResponse}.\n+ */\n+public final class CookieClient extends SimpleDecoratingHttpClient {\n+\n+    /**\n+     * Creates a new {@link CookieClient} decorator.\n+     */\n+    public static Function<? super HttpClient, CookieClient> newDecorator() {\n+        return newDecorator(new DefaultCookieJar());\n+    }\n+\n+    /**\n+     * Creates a new {@link CookieClient} decorator with a custom {@link CookiePolicy}.\n+     */\n+    public static Function<? super HttpClient, CookieClient> newDecorator(CookiePolicy cookiePolicy) {\n+        requireNonNull(cookiePolicy, \"cookiePolicy\");\n+        final CookieJar cookieJar = new DefaultCookieJar();\n+        cookieJar.setCookiePolicy(cookiePolicy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356b3dd2f89271687641f8f30ea08519d878c702"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDk1NDE4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookiePolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzozNTowMFrOHqPZNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzozNTowMFrOHqPZNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NDQ1Mg==", "bodyText": "Shouldn't we return false if cookie.domain() == null?\nThe spec says there are only two conditions: https://tools.ietf.org/html/rfc6265#section-5.1.3\nand I think null condition isn't included.", "url": "https://github.com/line/armeria/pull/3118#discussion_r514054452", "createdAt": "2020-10-29T07:35:00Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookiePolicy.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+\n+import com.linecorp.armeria.common.Cookie;\n+\n+/**\n+ * Specifies how {@link CookieJar} should accept new {@link Cookie}.\n+ */\n+public interface CookiePolicy {\n+\n+    CookiePolicy ACCEPT_ALL = (uri, cookie) -> true;\n+\n+    CookiePolicy ACCEPT_NONE = (uri, cookie) -> false;\n+\n+    CookiePolicy ACCEPT_ORIGINAL_SERVER = (uri, cookie) -> {\n+        requireNonNull(uri, \"uri\");\n+        requireNonNull(cookie, \"cookie\");\n+        return cookie.domain() == null || CookieJar.domainMatches(cookie.domain(), uri.getHost());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356b3dd2f89271687641f8f30ea08519d878c702"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDk1ODMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzozNjoyN1rOHqPbpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNDo0NjoyN1rOHrABYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NTA3Nw==", "bodyText": "How about moving this to a separate util class? e.g. CookieUtil", "url": "https://github.com/line/armeria/pull/3118#discussion_r514055077", "createdAt": "2020-10-29T07:36:27Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.net.URI;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A {@link Cookie} container for a client.\n+ */\n+public interface CookieJar {\n+\n+    /**\n+     * Determines whether a host matches a domain, as specified by RFC 6265\n+     * <a href=\"https://tools.ietf.org/html/rfc6265#section-5.1.3\">Domain Matching</a>.\n+     */\n+    static boolean domainMatches(@Nullable String domain, @Nullable String host) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356b3dd2f89271687641f8f30ea08519d878c702"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg1MTE3MQ==", "bodyText": "But CookieUtil is package private in common. The new version is more compact, so having this method here won't look too packed I think.", "url": "https://github.com/line/armeria/pull/3118#discussion_r514851171", "createdAt": "2020-10-30T04:46:27Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.net.URI;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A {@link Cookie} container for a client.\n+ */\n+public interface CookieJar {\n+\n+    /**\n+     * Determines whether a host matches a domain, as specified by RFC 6265\n+     * <a href=\"https://tools.ietf.org/html/rfc6265#section-5.1.3\">Domain Matching</a>.\n+     */\n+    static boolean domainMatches(@Nullable String domain, @Nullable String host) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NTA3Nw=="}, "originalCommit": {"oid": "356b3dd2f89271687641f8f30ea08519d878c702"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDk2MTIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzozNzoyN1rOHqPdUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzozNzoyN1rOHqPdUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NTUwNA==", "bodyText": "Returns the {@link Cookies} for the specified {@link URI}.?", "url": "https://github.com/line/armeria/pull/3118#discussion_r514055504", "createdAt": "2020-10-29T07:37:27Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.net.URI;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A {@link Cookie} container for a client.\n+ */\n+public interface CookieJar {\n+\n+    /**\n+     * Determines whether a host matches a domain, as specified by RFC 6265\n+     * <a href=\"https://tools.ietf.org/html/rfc6265#section-5.1.3\">Domain Matching</a>.\n+     */\n+    static boolean domainMatches(@Nullable String domain, @Nullable String host) {\n+        // Forked from OpenJDK\n+        // https://github.com/openjdk/jdk/blob/790d6e2d2539e0e75c587543e83cf8d73c11e1e7/src/java.base/share/classes/java/net/InMemoryCookieStore.java\n+\n+        if (domain == null || host == null) {\n+            return false;\n+        }\n+        // if there's no embedded dot in domain and domain is not .local\n+        final boolean isLocalDomain = \".local\".equalsIgnoreCase(domain);\n+        int embeddedDotInDomain = domain.indexOf('.');\n+        if (embeddedDotInDomain == 0) {\n+            embeddedDotInDomain = domain.indexOf('.', 1);\n+        }\n+        if (!isLocalDomain && (embeddedDotInDomain == -1 || embeddedDotInDomain == domain.length() - 1)) {\n+            return false;\n+        }\n+        // if host contains no dot and domain is .local\n+        if (host.indexOf('.') == -1 && isLocalDomain) {\n+            return true;\n+        }\n+        final int lengthDiff = host.length() - domain.length();\n+        if (lengthDiff == 0) {\n+            // if domain and host are string-compare equal\n+            return host.equalsIgnoreCase(domain);\n+        } else if (lengthDiff > 0) {\n+            // if domain is a suffix of host\n+            return (domain.equalsIgnoreCase(host.substring(lengthDiff)));\n+        } else if (lengthDiff == -1) {\n+            // if domain is actually .host\n+            return (domain.charAt(0) == '.' && host.equalsIgnoreCase(domain.substring(1)));\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns a {@link Cookies} set of cookies for an {@link URI}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356b3dd2f89271687641f8f30ea08519d878c702"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDk2NDU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzozODoyM1rOHqPfFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzozODoyM1rOHqPfFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NTk1Ng==", "bodyText": "Stores the specified {@link Cookies} for the {@link URI}.?", "url": "https://github.com/line/armeria/pull/3118#discussion_r514055956", "createdAt": "2020-10-29T07:38:23Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.net.URI;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A {@link Cookie} container for a client.\n+ */\n+public interface CookieJar {\n+\n+    /**\n+     * Determines whether a host matches a domain, as specified by RFC 6265\n+     * <a href=\"https://tools.ietf.org/html/rfc6265#section-5.1.3\">Domain Matching</a>.\n+     */\n+    static boolean domainMatches(@Nullable String domain, @Nullable String host) {\n+        // Forked from OpenJDK\n+        // https://github.com/openjdk/jdk/blob/790d6e2d2539e0e75c587543e83cf8d73c11e1e7/src/java.base/share/classes/java/net/InMemoryCookieStore.java\n+\n+        if (domain == null || host == null) {\n+            return false;\n+        }\n+        // if there's no embedded dot in domain and domain is not .local\n+        final boolean isLocalDomain = \".local\".equalsIgnoreCase(domain);\n+        int embeddedDotInDomain = domain.indexOf('.');\n+        if (embeddedDotInDomain == 0) {\n+            embeddedDotInDomain = domain.indexOf('.', 1);\n+        }\n+        if (!isLocalDomain && (embeddedDotInDomain == -1 || embeddedDotInDomain == domain.length() - 1)) {\n+            return false;\n+        }\n+        // if host contains no dot and domain is .local\n+        if (host.indexOf('.') == -1 && isLocalDomain) {\n+            return true;\n+        }\n+        final int lengthDiff = host.length() - domain.length();\n+        if (lengthDiff == 0) {\n+            // if domain and host are string-compare equal\n+            return host.equalsIgnoreCase(domain);\n+        } else if (lengthDiff > 0) {\n+            // if domain is a suffix of host\n+            return (domain.equalsIgnoreCase(host.substring(lengthDiff)));\n+        } else if (lengthDiff == -1) {\n+            // if domain is actually .host\n+            return (domain.charAt(0) == '.' && host.equalsIgnoreCase(domain.substring(1)));\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns a {@link Cookies} set of cookies for an {@link URI}.\n+     */\n+    Cookies get(URI uri);\n+\n+    /**\n+     * Stores cookies for an {@link URI}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356b3dd2f89271687641f8f30ea08519d878c702"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDk2NzI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzozOToxMVrOHqPgjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzozOToxMVrOHqPgjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NjMzNA==", "bodyText": "Then we can make this field final.", "url": "https://github.com/line/armeria/pull/3118#discussion_r514056334", "createdAt": "2020-10-29T07:39:11Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation.\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    // Forked from OpenJDK\n+    // https://github.com/openjdk/jdk/blob/790d6e2d2539e0e75c587543e83cf8d73c11e1e7/src/java.base/share/classes/java/net/InMemoryCookieStore.java\n+\n+    private final Set<Cookie> allCookies;\n+    /**\n+     * Used to find cookies of URI that matches the full hostname.\n+     */\n+    private final Map<String, Set<Cookie>> hostIndex;\n+    /**\n+     * Used to find cookies of URI that matches the cookie domain. For example, if a domain is example.com,\n+     * foo.example.com will match all cookies in this entry.\n+     */\n+    private final Map<String, Set<Cookie>> domainIndex;\n+    private final ReentrantLock lock;\n+    private CookiePolicy cookiePolicy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356b3dd2f89271687641f8f30ea08519d878c702"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDk3Mjg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/DefaultCookie.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzo0MDo0M1rOHqPjig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzo0MDo0M1rOHqPjig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NzA5OA==", "bodyText": "Could be just maxAge?", "url": "https://github.com/line/armeria/pull/3118#discussion_r514057098", "createdAt": "2020-10-29T07:40:43Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/DefaultCookie.java", "diffHunk": "@@ -117,6 +119,18 @@ public String sameSite() {\n         return sameSite;\n     }\n \n+    @Override\n+    public boolean isExpired() {\n+        if (maxAge() == UNDEFINED_MAX_AGE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356b3dd2f89271687641f8f30ea08519d878c702"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTExMzgyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODoyNDoyNlrOHqQ38w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODoyNDoyNlrOHqQ38w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA3ODcwNw==", "bodyText": "Fine to use entrySet() so that we don't use index.get() again?\nfor (Entry<T, Set<Cookie>> entry : index.entrySet()) {\n    if (condition.test(entry.getKey())) {\n        final Set<Cookie> matchedCookies = entry.getValue();", "url": "https://github.com/line/armeria/pull/3118#discussion_r514078707", "createdAt": "2020-10-29T08:24:26Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation.\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    // Forked from OpenJDK\n+    // https://github.com/openjdk/jdk/blob/790d6e2d2539e0e75c587543e83cf8d73c11e1e7/src/java.base/share/classes/java/net/InMemoryCookieStore.java\n+\n+    private final Set<Cookie> allCookies;\n+    /**\n+     * Used to find cookies of URI that matches the full hostname.\n+     */\n+    private final Map<String, Set<Cookie>> hostIndex;\n+    /**\n+     * Used to find cookies of URI that matches the cookie domain. For example, if a domain is example.com,\n+     * foo.example.com will match all cookies in this entry.\n+     */\n+    private final Map<String, Set<Cookie>> domainIndex;\n+    private final ReentrantLock lock;\n+    private CookiePolicy cookiePolicy;\n+\n+    DefaultCookieJar() {\n+        cookiePolicy = CookiePolicy.ACCEPT_ORIGINAL_SERVER;\n+        allCookies = new HashSet<>();\n+        hostIndex = new HashMap<>();\n+        domainIndex = new HashMap<>();\n+        lock = new ReentrantLock();\n+    }\n+\n+    @Override\n+    public Cookies get(URI uri) {\n+        requireNonNull(uri, \"uri\");\n+        if (allCookies.isEmpty()) {\n+            return Cookies.of();\n+        }\n+        String path = uri.getPath();\n+        if (path == null || path.isEmpty()) {\n+            path = \"/\";\n+        }\n+        final String host = uri.getHost();\n+        final boolean secure = \"https\".equalsIgnoreCase(uri.getScheme());\n+        final Set<Cookie> cookies = new HashSet<>();\n+        lock.lock();\n+        try {\n+            getIndex(hostIndex, cookies, path, secure, (h) -> h.equals(host));\n+            getIndex(domainIndex, cookies, path, secure, (d) -> CookieJar.domainMatches(d, host));\n+        } finally {\n+            lock.unlock();\n+        }\n+        return Cookies.of(cookies);\n+    }\n+\n+    @Override\n+    public void set(URI uri, Cookies cookies) {\n+        requireNonNull(uri, \"uri\");\n+        requireNonNull(cookies, \"cookies\");\n+        final String host = uri.getHost();\n+        lock.lock();\n+        try {\n+            for (Cookie cookie : cookies) {\n+                // If no path is specified, compute the default path\n+                // https://tools.ietf.org/html/rfc6265#section-5.1.4\n+                if (cookie.path() == null) {\n+                    String path = uri.getPath();\n+                    if (!path.endsWith(\"/\")) {\n+                        final int i = path.lastIndexOf('/');\n+                        if (i > 0) {\n+                            path = path.substring(0, i + 1);\n+                        } else {\n+                            path = \"/\";\n+                        }\n+                    }\n+                    cookie = cookie.toBuilder().path(path).build();\n+                }\n+                // remove existing cookie if present\n+                allCookies.remove(cookie);\n+                if (!cookie.isExpired() && cookiePolicy.shouldAccept(uri, cookie)) {\n+                    allCookies.add(cookie);\n+                    // a cookie always matches its request's host, so it's always in hostIndex\n+                    addIndex(hostIndex, host, cookie);\n+                    if (cookie.domain() != null) {\n+                        addIndex(domainIndex, requireNonNull(cookie.domain()), cookie);\n+                    }\n+                }\n+            }\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    @Override\n+    public void setCookiePolicy(CookiePolicy cookiePolicy) {\n+        requireNonNull(cookiePolicy, \"cookiePolicy\");\n+        this.cookiePolicy = cookiePolicy;\n+    }\n+\n+    private <T> void getIndex(Map<T, Set<Cookie>> index, Set<Cookie> cookies, String path, boolean secure,\n+                              Predicate<T> condition) {\n+        for (T key : index.keySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356b3dd2f89271687641f8f30ea08519d878c702"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTE0Nzc4OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/client/cookie/SetCookieResponseTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODozMzozOFrOHqRMMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNDowMjozMlrOHq9kqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA4Mzg5MA==", "bodyText": "I think we can just do response.aggregate().join() instead of calling finish. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3118#discussion_r514083890", "createdAt": "2020-10-29T08:33:38Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/client/cookie/SetCookieResponseTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+class SetCookieResponseTest {\n+\n+    private static final ResponseHeaders RESPONSE_HEADERS = ResponseHeaders.of(\n+            HttpStatus.OK,\n+            HttpHeaderNames.SET_COOKIE, Cookie.of(\"cookie1\", \"value1\").toSetCookieHeader(),\n+            HttpHeaderNames.SET_COOKIE, Cookie.of(\"cookie2\", \"value2\").toSetCookieHeader(),\n+            HttpHeaderNames.SET_COOKIE, Cookie.of(\"cookie3\", \"value3\").toSetCookieHeader());\n+\n+    @Test\n+    void testSetCookieHeader() {\n+        final HttpResponse delegate = HttpResponse.of(RESPONSE_HEADERS);\n+        final AtomicReference<List<String>> headers = new AtomicReference<>();\n+        final HttpResponse response = new SetCookieResponse(delegate, headers::set);\n+        finish(response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356b3dd2f89271687641f8f30ea08519d878c702"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDgxMTA1MQ==", "bodyText": "\ud83d\ude02", "url": "https://github.com/line/armeria/pull/3118#discussion_r514811051", "createdAt": "2020-10-30T04:02:32Z", "author": {"login": "tumile"}, "path": "core/src/test/java/com/linecorp/armeria/client/cookie/SetCookieResponseTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+class SetCookieResponseTest {\n+\n+    private static final ResponseHeaders RESPONSE_HEADERS = ResponseHeaders.of(\n+            HttpStatus.OK,\n+            HttpHeaderNames.SET_COOKIE, Cookie.of(\"cookie1\", \"value1\").toSetCookieHeader(),\n+            HttpHeaderNames.SET_COOKIE, Cookie.of(\"cookie2\", \"value2\").toSetCookieHeader(),\n+            HttpHeaderNames.SET_COOKIE, Cookie.of(\"cookie3\", \"value3\").toSetCookieHeader());\n+\n+    @Test\n+    void testSetCookieHeader() {\n+        final HttpResponse delegate = HttpResponse.of(RESPONSE_HEADERS);\n+        final AtomicReference<List<String>> headers = new AtomicReference<>();\n+        final HttpResponse response = new SetCookieResponse(delegate, headers::set);\n+        finish(response);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA4Mzg5MA=="}, "originalCommit": {"oid": "356b3dd2f89271687641f8f30ea08519d878c702"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjk1MTYzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTo1Mzo0MlrOHqiq8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNjoyMDozMFrOHqj7aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM3MDI5MQ==", "bodyText": "OpenJDK code could be redistributed only under GNU General Public License version 2.\nhttps://github.com/openjdk/jdk/blob/790d6e2d2539e0e75c587543e83cf8d73c11e1e7/src/java.base/share/classes/java/net/InMemoryCookieStore.java#L5-L6\nHowever, Armeria is distributed under Apache License version 2.0.\nYou have to just refer to the code or fork from other open source projects that are distributed under Apache License version 2.0 such as OkHttp.\nhttps://github.com/square/okhttp/blob/fd509b937c4a5438fe02ddf06ade5ad56736af5d/okhttp/src/main/java/okhttp3/Cookie.java#L182", "url": "https://github.com/line/armeria/pull/3118#discussion_r514370291", "createdAt": "2020-10-29T15:53:42Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.net.URI;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A {@link Cookie} container for a client.\n+ */\n+public interface CookieJar {\n+\n+    /**\n+     * Determines whether a host matches a domain, as specified by RFC 6265\n+     * <a href=\"https://tools.ietf.org/html/rfc6265#section-5.1.3\">Domain Matching</a>.\n+     */\n+    static boolean domainMatches(@Nullable String domain, @Nullable String host) {\n+        // Forked from OpenJDK", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356b3dd2f89271687641f8f30ea08519d878c702"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM3NTkxMw==", "bodyText": "Oh so we don't need to include the license and the comments? Got it.", "url": "https://github.com/line/armeria/pull/3118#discussion_r514375913", "createdAt": "2020-10-29T16:00:48Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.net.URI;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A {@link Cookie} container for a client.\n+ */\n+public interface CookieJar {\n+\n+    /**\n+     * Determines whether a host matches a domain, as specified by RFC 6265\n+     * <a href=\"https://tools.ietf.org/html/rfc6265#section-5.1.3\">Domain Matching</a>.\n+     */\n+    static boolean domainMatches(@Nullable String domain, @Nullable String host) {\n+        // Forked from OpenJDK", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM3MDI5MQ=="}, "originalCommit": {"oid": "356b3dd2f89271687641f8f30ea08519d878c702"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM3NzkwOQ==", "bodyText": "We can not modify/copy JDK source code to use it in the Armeria. \ud83d\ude22", "url": "https://github.com/line/armeria/pull/3118#discussion_r514377909", "createdAt": "2020-10-29T16:03:13Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.net.URI;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A {@link Cookie} container for a client.\n+ */\n+public interface CookieJar {\n+\n+    /**\n+     * Determines whether a host matches a domain, as specified by RFC 6265\n+     * <a href=\"https://tools.ietf.org/html/rfc6265#section-5.1.3\">Domain Matching</a>.\n+     */\n+    static boolean domainMatches(@Nullable String domain, @Nullable String host) {\n+        // Forked from OpenJDK", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM3MDI5MQ=="}, "originalCommit": {"oid": "356b3dd2f89271687641f8f30ea08519d878c702"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM4NzMwOA==", "bodyText": "Oh I see. So can I rewrite it in a way that functions the same as JDK? I mean not syntactically but functionally similar?", "url": "https://github.com/line/armeria/pull/3118#discussion_r514387308", "createdAt": "2020-10-29T16:15:50Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.net.URI;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A {@link Cookie} container for a client.\n+ */\n+public interface CookieJar {\n+\n+    /**\n+     * Determines whether a host matches a domain, as specified by RFC 6265\n+     * <a href=\"https://tools.ietf.org/html/rfc6265#section-5.1.3\">Domain Matching</a>.\n+     */\n+    static boolean domainMatches(@Nullable String domain, @Nullable String host) {\n+        // Forked from OpenJDK", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM3MDI5MQ=="}, "originalCommit": {"oid": "356b3dd2f89271687641f8f30ea08519d878c702"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM4OTA3NQ==", "bodyText": "Actually I think it's better if I look at okhttp as a reference point", "url": "https://github.com/line/armeria/pull/3118#discussion_r514389075", "createdAt": "2020-10-29T16:18:15Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.net.URI;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A {@link Cookie} container for a client.\n+ */\n+public interface CookieJar {\n+\n+    /**\n+     * Determines whether a host matches a domain, as specified by RFC 6265\n+     * <a href=\"https://tools.ietf.org/html/rfc6265#section-5.1.3\">Domain Matching</a>.\n+     */\n+    static boolean domainMatches(@Nullable String domain, @Nullable String host) {\n+        // Forked from OpenJDK", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM3MDI5MQ=="}, "originalCommit": {"oid": "356b3dd2f89271687641f8f30ea08519d878c702"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM5MDg5MQ==", "bodyText": "\ud83d\udc4d That would be a better way to avoid license issues.", "url": "https://github.com/line/armeria/pull/3118#discussion_r514390891", "createdAt": "2020-10-29T16:20:30Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.net.URI;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A {@link Cookie} container for a client.\n+ */\n+public interface CookieJar {\n+\n+    /**\n+     * Determines whether a host matches a domain, as specified by RFC 6265\n+     * <a href=\"https://tools.ietf.org/html/rfc6265#section-5.1.3\">Domain Matching</a>.\n+     */\n+    static boolean domainMatches(@Nullable String domain, @Nullable String host) {\n+        // Forked from OpenJDK", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM3MDI5MQ=="}, "originalCommit": {"oid": "356b3dd2f89271687641f8f30ea08519d878c702"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjYxODUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookiePolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTozNToxNlrOHrHZZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTozNToxNlrOHrHZZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3MjAwNQ==", "bodyText": "Add @FunctionalInterface?", "url": "https://github.com/line/armeria/pull/3118#discussion_r514972005", "createdAt": "2020-10-30T09:35:16Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookiePolicy.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+\n+import com.linecorp.armeria.common.Cookie;\n+\n+/**\n+ * Specifies how {@link CookieJar} should accept new {@link Cookie}.\n+ */\n+public interface CookiePolicy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjY2NjA0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTo0ODoyOVrOHrH2dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzowNDoxNVrOHxnbFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3OTQ0Ng==", "bodyText": "Could we split the lock into a read and write lock?", "url": "https://github.com/line/armeria/pull/3118#discussion_r514979446", "createdAt": "2020-10-30T09:48:29Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation.\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private final Set<Cookie> store;\n+    /**\n+     * Used to find cookies for a host that matches a domain. For example, if there is a domain example.com,\n+     * host example.com or foo.example.com will match all cookies in that entry.\n+     */\n+    private final Map<String, Set<Cookie>> filter;\n+    private final CookiePolicy cookiePolicy;\n+    private final ReentrantLock lock;\n+\n+    DefaultCookieJar() {\n+        this(CookiePolicy.ACCEPT_ORIGINAL_SERVER);\n+    }\n+\n+    DefaultCookieJar(CookiePolicy cookiePolicy) {\n+        this.cookiePolicy = cookiePolicy;\n+        store = new HashSet<>();\n+        filter = new HashMap<>();\n+        lock = new ReentrantLock();\n+    }\n+\n+    @Override\n+    public Cookies get(URI uri) {\n+        requireNonNull(uri, \"uri\");\n+        if (store.isEmpty()) {\n+            return Cookies.of();\n+        }\n+        final String host = uri.getHost();\n+        final String path = Strings.isNullOrEmpty(uri.getPath()) ? \"/\" : uri.getPath();\n+        final boolean secure = \"https\".equalsIgnoreCase(uri.getScheme());\n+        final Set<Cookie> cookies = new HashSet<>();\n+        lock.lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwMjkwNw==", "bodyText": "During read we also remove expired cookies so it should be locked from both read and write? I mean, one lock for both operations seems to make sense \ud83e\udd14", "url": "https://github.com/line/armeria/pull/3118#discussion_r515402907", "createdAt": "2020-10-30T22:05:15Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation.\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private final Set<Cookie> store;\n+    /**\n+     * Used to find cookies for a host that matches a domain. For example, if there is a domain example.com,\n+     * host example.com or foo.example.com will match all cookies in that entry.\n+     */\n+    private final Map<String, Set<Cookie>> filter;\n+    private final CookiePolicy cookiePolicy;\n+    private final ReentrantLock lock;\n+\n+    DefaultCookieJar() {\n+        this(CookiePolicy.ACCEPT_ORIGINAL_SERVER);\n+    }\n+\n+    DefaultCookieJar(CookiePolicy cookiePolicy) {\n+        this.cookiePolicy = cookiePolicy;\n+        store = new HashSet<>();\n+        filter = new HashMap<>();\n+        lock = new ReentrantLock();\n+    }\n+\n+    @Override\n+    public Cookies get(URI uri) {\n+        requireNonNull(uri, \"uri\");\n+        if (store.isEmpty()) {\n+            return Cookies.of();\n+        }\n+        final String host = uri.getHost();\n+        final String path = Strings.isNullOrEmpty(uri.getPath()) ? \"/\" : uri.getPath();\n+        final boolean secure = \"https\".equalsIgnoreCase(uri.getScheme());\n+        final Set<Cookie> cookies = new HashSet<>();\n+        lock.lock();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3OTQ0Ng=="}, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc4ODE4MQ==", "bodyText": "I see. That makes sense.", "url": "https://github.com/line/armeria/pull/3118#discussion_r521788181", "createdAt": "2020-11-12T03:04:15Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation.\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private final Set<Cookie> store;\n+    /**\n+     * Used to find cookies for a host that matches a domain. For example, if there is a domain example.com,\n+     * host example.com or foo.example.com will match all cookies in that entry.\n+     */\n+    private final Map<String, Set<Cookie>> filter;\n+    private final CookiePolicy cookiePolicy;\n+    private final ReentrantLock lock;\n+\n+    DefaultCookieJar() {\n+        this(CookiePolicy.ACCEPT_ORIGINAL_SERVER);\n+    }\n+\n+    DefaultCookieJar(CookiePolicy cookiePolicy) {\n+        this.cookiePolicy = cookiePolicy;\n+        store = new HashSet<>();\n+        filter = new HashMap<>();\n+        lock = new ReentrantLock();\n+    }\n+\n+    @Override\n+    public Cookies get(URI uri) {\n+        requireNonNull(uri, \"uri\");\n+        if (store.isEmpty()) {\n+            return Cookies.of();\n+        }\n+        final String host = uri.getHost();\n+        final String path = Strings.isNullOrEmpty(uri.getPath()) ? \"/\" : uri.getPath();\n+        final boolean secure = \"https\".equalsIgnoreCase(uri.getScheme());\n+        final Set<Cookie> cookies = new HashSet<>();\n+        lock.lock();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3OTQ0Ng=="}, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjc3NDA1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDoxOTo1MFrOHrI4tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNToxMDo1OFrOHrTcTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk5NjQwNg==", "bodyText": "Don't we need to return early if host is shorter than domain?\nIf not, IOBE seems to be raised  at host.charAt(host.length() - domain.length() - 1).", "url": "https://github.com/line/armeria/pull/3118#discussion_r514996406", "createdAt": "2020-10-30T10:19:50Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.net.URI;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+import io.netty.util.NetUtil;\n+\n+/**\n+ * A {@link Cookie} container for a client.\n+ */\n+public interface CookieJar {\n+\n+    /**\n+     * Determines whether a host matches a domain, as specified by RFC 6265\n+     * <a href=\"https://tools.ietf.org/html/rfc6265#section-5.1.3\">Domain Matching</a>.\n+     */\n+    static boolean domainMatch(@Nullable String domain, @Nullable String host) {\n+        if (domain == null || host == null) {\n+            return false;\n+        }\n+        if (domain.equalsIgnoreCase(host)) {\n+            return true;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE2OTM1OQ==", "bodyText": "I think if host is shorter, even equal but different, then host.endsWith(domain) is false already. host.charAt(host.length() - domain.length() - 1) is only reached when host is longer.", "url": "https://github.com/line/armeria/pull/3118#discussion_r515169359", "createdAt": "2020-10-30T15:10:58Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.net.URI;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+import io.netty.util.NetUtil;\n+\n+/**\n+ * A {@link Cookie} container for a client.\n+ */\n+public interface CookieJar {\n+\n+    /**\n+     * Determines whether a host matches a domain, as specified by RFC 6265\n+     * <a href=\"https://tools.ietf.org/html/rfc6265#section-5.1.3\">Domain Matching</a>.\n+     */\n+    static boolean domainMatch(@Nullable String domain, @Nullable String host) {\n+        if (domain == null || host == null) {\n+            return false;\n+        }\n+        if (domain.equalsIgnoreCase(host)) {\n+            return true;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk5NjQwNg=="}, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjc4NjM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDoyMzozNFrOHrJALQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzo0NjozOFrOHrPubA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk5ODMxNw==", "bodyText": "How about moving this to CookiePolicy as a member method instead of a static one, so that a user can implement one's own domain matching logic when implementing a CookiePolicy? i.e.\npublic interface CookiePolicy {\n    ...\n    default boolean domainMatches(@Nullable String doman, @Nullable String host) {\n        // .. our default implementation goes here ..\n    }\n}", "url": "https://github.com/line/armeria/pull/3118#discussion_r514998317", "createdAt": "2020-10-30T10:23:34Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.net.URI;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+import io.netty.util.NetUtil;\n+\n+/**\n+ * A {@link Cookie} container for a client.\n+ */\n+public interface CookieJar {\n+\n+    /**\n+     * Determines whether a host matches a domain, as specified by RFC 6265\n+     * <a href=\"https://tools.ietf.org/html/rfc6265#section-5.1.3\">Domain Matching</a>.\n+     */\n+    static boolean domainMatch(@Nullable String domain, @Nullable String host) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEwODQ2MA==", "bodyText": "Otherwise, the domain matching specs are standardized and specified in RFC 6265.\nCould we remove this method from public API and move to implementation detail?", "url": "https://github.com/line/armeria/pull/3118#discussion_r515108460", "createdAt": "2020-10-30T13:46:38Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.net.URI;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+import io.netty.util.NetUtil;\n+\n+/**\n+ * A {@link Cookie} container for a client.\n+ */\n+public interface CookieJar {\n+\n+    /**\n+     * Determines whether a host matches a domain, as specified by RFC 6265\n+     * <a href=\"https://tools.ietf.org/html/rfc6265#section-5.1.3\">Domain Matching</a>.\n+     */\n+    static boolean domainMatch(@Nullable String domain, @Nullable String host) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk5ODMxNw=="}, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjc4OTQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookiePolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDoyNDoyN1rOHrJB_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDoyNDoyN1rOHrJB_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk5ODc4Mw==", "bodyText": "Could we use static factory methods so we potentially have more freedom when implementation detail changes? e.g. static CookiePolicy acceptAll()", "url": "https://github.com/line/armeria/pull/3118#discussion_r514998783", "createdAt": "2020-10-30T10:24:27Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookiePolicy.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+\n+import com.linecorp.armeria.common.Cookie;\n+\n+/**\n+ * Specifies how {@link CookieJar} should accept new {@link Cookie}.\n+ */\n+public interface CookiePolicy {\n+\n+    CookiePolicy ACCEPT_ALL = (uri, cookie) -> true;\n+\n+    CookiePolicy ACCEPT_NONE = (uri, cookie) -> false;\n+\n+    CookiePolicy ACCEPT_ORIGINAL_SERVER = (uri, cookie) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjc5MTA1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookiePolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDoyNDo1NFrOHrJC6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDoyNDo1NFrOHrJC6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk5OTAxNw==", "bodyText": "How about just accept()?", "url": "https://github.com/line/armeria/pull/3118#discussion_r514999017", "createdAt": "2020-10-30T10:24:54Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookiePolicy.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+\n+import com.linecorp.armeria.common.Cookie;\n+\n+/**\n+ * Specifies how {@link CookieJar} should accept new {@link Cookie}.\n+ */\n+public interface CookiePolicy {\n+\n+    CookiePolicy ACCEPT_ALL = (uri, cookie) -> true;\n+\n+    CookiePolicy ACCEPT_NONE = (uri, cookie) -> false;\n+\n+    CookiePolicy ACCEPT_ORIGINAL_SERVER = (uri, cookie) -> {\n+        requireNonNull(uri, \"uri\");\n+        requireNonNull(cookie, \"cookie\");\n+        return CookieJar.domainMatch(cookie.domain(), uri.getHost());\n+    };\n+\n+    /**\n+     * Determines whether a {@link Cookie} may be stored for a {@link URI}.\n+     */\n+    boolean shouldAccept(URI uri, Cookie cookie);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjc5NTA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/SetCookieResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDoyNjowNVrOHrJFXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDoyNjowNVrOHrJFXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk5OTY0NA==", "bodyText": "Could rename to something more meaningful, e.g. cookieHeaderSetter?", "url": "https://github.com/line/armeria/pull/3118#discussion_r514999644", "createdAt": "2020-10-30T10:26:05Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/SetCookieResponse.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import com.linecorp.armeria.common.FilteredHttpResponse;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * A {@link FilteredHttpResponse} that extracts {@code Set-Cookie} headers.\n+ */\n+final class SetCookieResponse extends FilteredHttpResponse {\n+\n+    private final Consumer<List<String>> consumer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjgwMTA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/Cookie.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDoyNzo0NFrOHrJI3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwMTo0NjoyN1rOHzllRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwMDU0MA==", "bodyText": "Should we also add the version that accepts currentTimeMillis? i.e. boolean isExpired(long currentTimeMillis)", "url": "https://github.com/line/armeria/pull/3118#discussion_r515000540", "createdAt": "2020-10-30T10:27:44Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/Cookie.java", "diffHunk": "@@ -473,6 +473,18 @@ static Cookies fromSetCookieHeaders(boolean strict, Collection<String> setCookie\n     @Nullable\n     String sameSite();\n \n+    /**\n+     * Returns whether this {@link Cookie} should only match its original host in domain matching. If this\n+     * returns {@code true}, should {@link #domain()} returns a non-null value, it's going to be the original\n+     * request host.\n+     */\n+    boolean isHostOnly();\n+\n+    /**\n+     * Returns whether this {@link Cookie} has been expired.\n+     */\n+    boolean isExpired();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwNDYyNQ==", "bodyText": "Not sure when it's used \ud83e\udd14 Because we probably don't check expiration until we actually use the cookie.", "url": "https://github.com/line/armeria/pull/3118#discussion_r515404625", "createdAt": "2020-10-30T22:11:06Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/common/Cookie.java", "diffHunk": "@@ -473,6 +473,18 @@ static Cookies fromSetCookieHeaders(boolean strict, Collection<String> setCookie\n     @Nullable\n     String sameSite();\n \n+    /**\n+     * Returns whether this {@link Cookie} should only match its original host in domain matching. If this\n+     * returns {@code true}, should {@link #domain()} returns a non-null value, it's going to be the original\n+     * request host.\n+     */\n+    boolean isHostOnly();\n+\n+    /**\n+     * Returns whether this {@link Cookie} has been expired.\n+     */\n+    boolean isExpired();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwMDU0MA=="}, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg1NTE3NQ==", "bodyText": "A user may not want System.currentTimeMillis() to be invoked multiple times. e.g.\nlong currentTimeMillis = System.currentTimeMillis();\nfor (Cookie c : cookies) {\n    if (c.isExpired(currentTimeMillis)) {\n        System.err.println(\"Expired: \" + c)\n    }\n}", "url": "https://github.com/line/armeria/pull/3118#discussion_r523855175", "createdAt": "2020-11-16T01:46:27Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/Cookie.java", "diffHunk": "@@ -473,6 +473,18 @@ static Cookies fromSetCookieHeaders(boolean strict, Collection<String> setCookie\n     @Nullable\n     String sameSite();\n \n+    /**\n+     * Returns whether this {@link Cookie} should only match its original host in domain matching. If this\n+     * returns {@code true}, should {@link #domain()} returns a non-null value, it's going to be the original\n+     * request host.\n+     */\n+    boolean isHostOnly();\n+\n+    /**\n+     * Returns whether this {@link Cookie} has been expired.\n+     */\n+    boolean isExpired();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwMDU0MA=="}, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjgzMTI0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDozNjo0MFrOHrJazw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMjowMjoyNlrOHrhpgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwNTEzNQ==", "bodyText": "How about removing an additional string copy and adding a flag?\nboolean hasLeadingDot = !domain.isEmpty() && domain.charAt(0) == '.';\n...", "url": "https://github.com/line/armeria/pull/3118#discussion_r515005135", "createdAt": "2020-10-30T10:36:40Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.net.URI;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+import io.netty.util.NetUtil;\n+\n+/**\n+ * A {@link Cookie} container for a client.\n+ */\n+public interface CookieJar {\n+\n+    /**\n+     * Determines whether a host matches a domain, as specified by RFC 6265\n+     * <a href=\"https://tools.ietf.org/html/rfc6265#section-5.1.3\">Domain Matching</a>.\n+     */\n+    static boolean domainMatch(@Nullable String domain, @Nullable String host) {\n+        if (domain == null || host == null) {\n+            return false;\n+        }\n+        if (domain.equalsIgnoreCase(host)) {\n+            return true;\n+        }\n+        // ignore the leading dot\n+        if (!domain.isEmpty() && domain.charAt(0) == '.') {\n+            domain = domain.substring(1);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxODQ2Mw==", "bodyText": "I'm not sure how the algorithm should be with that \ud83d\ude02. Because the RFC algorithm assumes the client ignores the dot when parsing (ref). How about we remove the dot at cookie building (builder.domain())? It may have some benefits like domain.equalsIgnoreCase(host) will return early, and we may have fewer entries in filter because a.com and .a.com will merge into one?", "url": "https://github.com/line/armeria/pull/3118#discussion_r515218463", "createdAt": "2020-10-30T16:21:12Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.net.URI;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+import io.netty.util.NetUtil;\n+\n+/**\n+ * A {@link Cookie} container for a client.\n+ */\n+public interface CookieJar {\n+\n+    /**\n+     * Determines whether a host matches a domain, as specified by RFC 6265\n+     * <a href=\"https://tools.ietf.org/html/rfc6265#section-5.1.3\">Domain Matching</a>.\n+     */\n+    static boolean domainMatch(@Nullable String domain, @Nullable String host) {\n+        if (domain == null || host == null) {\n+            return false;\n+        }\n+        if (domain.equalsIgnoreCase(host)) {\n+            return true;\n+        }\n+        // ignore the leading dot\n+        if (!domain.isEmpty() && domain.charAt(0) == '.') {\n+            domain = domain.substring(1);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwNTEzNQ=="}, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwMjExMw==", "bodyText": "https://github.com/square/okhttp/blob/9af741558bf1cbd42e404d93e9eab07e44fd83ec/okhttp/src/main/kotlin/okhttp3/Cookie.kt#L589-L592", "url": "https://github.com/line/armeria/pull/3118#discussion_r515402113", "createdAt": "2020-10-30T22:02:26Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.net.URI;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+import io.netty.util.NetUtil;\n+\n+/**\n+ * A {@link Cookie} container for a client.\n+ */\n+public interface CookieJar {\n+\n+    /**\n+     * Determines whether a host matches a domain, as specified by RFC 6265\n+     * <a href=\"https://tools.ietf.org/html/rfc6265#section-5.1.3\">Domain Matching</a>.\n+     */\n+    static boolean domainMatch(@Nullable String domain, @Nullable String host) {\n+        if (domain == null || host == null) {\n+            return false;\n+        }\n+        if (domain.equalsIgnoreCase(host)) {\n+            return true;\n+        }\n+        // ignore the leading dot\n+        if (!domain.isEmpty() && domain.charAt(0) == '.') {\n+            domain = domain.substring(1);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwNTEzNQ=="}, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzQ1Nzg3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzozMzozMFrOHrPKyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzozMzozMFrOHrPKyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5OTMzNw==", "bodyText": "The path returned by uri.getPath() will be either an empty string or a path starting with /.", "url": "https://github.com/line/armeria/pull/3118#discussion_r515099337", "createdAt": "2020-10-30T13:33:30Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation.\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private final Set<Cookie> store;\n+    /**\n+     * Used to find cookies for a host that matches a domain. For example, if there is a domain example.com,\n+     * host example.com or foo.example.com will match all cookies in that entry.\n+     */\n+    private final Map<String, Set<Cookie>> filter;\n+    private final CookiePolicy cookiePolicy;\n+    private final ReentrantLock lock;\n+\n+    DefaultCookieJar() {\n+        this(CookiePolicy.ACCEPT_ORIGINAL_SERVER);\n+    }\n+\n+    DefaultCookieJar(CookiePolicy cookiePolicy) {\n+        this.cookiePolicy = cookiePolicy;\n+        store = new HashSet<>();\n+        filter = new HashMap<>();\n+        lock = new ReentrantLock();\n+    }\n+\n+    @Override\n+    public Cookies get(URI uri) {\n+        requireNonNull(uri, \"uri\");\n+        if (store.isEmpty()) {\n+            return Cookies.of();\n+        }\n+        final String host = uri.getHost();\n+        final String path = Strings.isNullOrEmpty(uri.getPath()) ? \"/\" : uri.getPath();\n+        final boolean secure = \"https\".equalsIgnoreCase(uri.getScheme());\n+        final Set<Cookie> cookies = new HashSet<>();\n+        lock.lock();\n+        try {\n+            filterGet(cookies, host, path, secure);\n+        } finally {\n+            lock.unlock();\n+        }\n+        return Cookies.of(cookies);\n+    }\n+\n+    @Override\n+    public void set(URI uri, Cookies cookies) {\n+        requireNonNull(uri, \"uri\");\n+        requireNonNull(cookies, \"cookies\");\n+        lock.lock();\n+        try {\n+            for (Cookie cookie : cookies) {\n+                // if domain is not specified, set the domain as the original request host\n+                // https://tools.ietf.org/html/rfc6265#section-5.3\n+                if (cookie.domain() == null) {\n+                    cookie = cookie.toBuilder().domain(uri.getHost()).hostOnly(true).build();\n+                }\n+                // if path is not specified or the first character is not '/', set the default path\n+                // https://tools.ietf.org/html/rfc6265#section-5.2.4\n+                // https://tools.ietf.org/html/rfc6265#section-5.1.4\n+                final String cookiePath = cookie.path();\n+                if (Strings.isNullOrEmpty(cookiePath) || cookiePath.charAt(0) != '/') {\n+                    String path = uri.getPath();\n+                    if (Strings.isNullOrEmpty(path) || path.charAt(0) != '/') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzQ3MzMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzozNjoyNFrOHrPUmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMjowMzoxOFrOHrhqUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEwMTg0OA==", "bodyText": "Could use path.charAt()? As you know, it is cheaper.\nif (path.charAt(path.length() - 1) == '/') {\n    path = path.substring(0, i);\n}", "url": "https://github.com/line/armeria/pull/3118#discussion_r515101848", "createdAt": "2020-10-30T13:36:24Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation.\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private final Set<Cookie> store;\n+    /**\n+     * Used to find cookies for a host that matches a domain. For example, if there is a domain example.com,\n+     * host example.com or foo.example.com will match all cookies in that entry.\n+     */\n+    private final Map<String, Set<Cookie>> filter;\n+    private final CookiePolicy cookiePolicy;\n+    private final ReentrantLock lock;\n+\n+    DefaultCookieJar() {\n+        this(CookiePolicy.ACCEPT_ORIGINAL_SERVER);\n+    }\n+\n+    DefaultCookieJar(CookiePolicy cookiePolicy) {\n+        this.cookiePolicy = cookiePolicy;\n+        store = new HashSet<>();\n+        filter = new HashMap<>();\n+        lock = new ReentrantLock();\n+    }\n+\n+    @Override\n+    public Cookies get(URI uri) {\n+        requireNonNull(uri, \"uri\");\n+        if (store.isEmpty()) {\n+            return Cookies.of();\n+        }\n+        final String host = uri.getHost();\n+        final String path = Strings.isNullOrEmpty(uri.getPath()) ? \"/\" : uri.getPath();\n+        final boolean secure = \"https\".equalsIgnoreCase(uri.getScheme());\n+        final Set<Cookie> cookies = new HashSet<>();\n+        lock.lock();\n+        try {\n+            filterGet(cookies, host, path, secure);\n+        } finally {\n+            lock.unlock();\n+        }\n+        return Cookies.of(cookies);\n+    }\n+\n+    @Override\n+    public void set(URI uri, Cookies cookies) {\n+        requireNonNull(uri, \"uri\");\n+        requireNonNull(cookies, \"cookies\");\n+        lock.lock();\n+        try {\n+            for (Cookie cookie : cookies) {\n+                // if domain is not specified, set the domain as the original request host\n+                // https://tools.ietf.org/html/rfc6265#section-5.3\n+                if (cookie.domain() == null) {\n+                    cookie = cookie.toBuilder().domain(uri.getHost()).hostOnly(true).build();\n+                }\n+                // if path is not specified or the first character is not '/', set the default path\n+                // https://tools.ietf.org/html/rfc6265#section-5.2.4\n+                // https://tools.ietf.org/html/rfc6265#section-5.1.4\n+                final String cookiePath = cookie.path();\n+                if (Strings.isNullOrEmpty(cookiePath) || cookiePath.charAt(0) != '/') {\n+                    String path = uri.getPath();\n+                    if (Strings.isNullOrEmpty(path) || path.charAt(0) != '/') {\n+                        path = \"/\";\n+                    } else {\n+                        final int i = path.lastIndexOf('/');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3MzYyOQ==", "bodyText": "In this case foo.com/a/b I think we would want to take foo.com/a? Specs only says exclude the right-most slash, so I think it should be the one before b?", "url": "https://github.com/line/armeria/pull/3118#discussion_r515173629", "createdAt": "2020-10-30T15:17:30Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation.\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private final Set<Cookie> store;\n+    /**\n+     * Used to find cookies for a host that matches a domain. For example, if there is a domain example.com,\n+     * host example.com or foo.example.com will match all cookies in that entry.\n+     */\n+    private final Map<String, Set<Cookie>> filter;\n+    private final CookiePolicy cookiePolicy;\n+    private final ReentrantLock lock;\n+\n+    DefaultCookieJar() {\n+        this(CookiePolicy.ACCEPT_ORIGINAL_SERVER);\n+    }\n+\n+    DefaultCookieJar(CookiePolicy cookiePolicy) {\n+        this.cookiePolicy = cookiePolicy;\n+        store = new HashSet<>();\n+        filter = new HashMap<>();\n+        lock = new ReentrantLock();\n+    }\n+\n+    @Override\n+    public Cookies get(URI uri) {\n+        requireNonNull(uri, \"uri\");\n+        if (store.isEmpty()) {\n+            return Cookies.of();\n+        }\n+        final String host = uri.getHost();\n+        final String path = Strings.isNullOrEmpty(uri.getPath()) ? \"/\" : uri.getPath();\n+        final boolean secure = \"https\".equalsIgnoreCase(uri.getScheme());\n+        final Set<Cookie> cookies = new HashSet<>();\n+        lock.lock();\n+        try {\n+            filterGet(cookies, host, path, secure);\n+        } finally {\n+            lock.unlock();\n+        }\n+        return Cookies.of(cookies);\n+    }\n+\n+    @Override\n+    public void set(URI uri, Cookies cookies) {\n+        requireNonNull(uri, \"uri\");\n+        requireNonNull(cookies, \"cookies\");\n+        lock.lock();\n+        try {\n+            for (Cookie cookie : cookies) {\n+                // if domain is not specified, set the domain as the original request host\n+                // https://tools.ietf.org/html/rfc6265#section-5.3\n+                if (cookie.domain() == null) {\n+                    cookie = cookie.toBuilder().domain(uri.getHost()).hostOnly(true).build();\n+                }\n+                // if path is not specified or the first character is not '/', set the default path\n+                // https://tools.ietf.org/html/rfc6265#section-5.2.4\n+                // https://tools.ietf.org/html/rfc6265#section-5.1.4\n+                final String cookiePath = cookie.path();\n+                if (Strings.isNullOrEmpty(cookiePath) || cookiePath.charAt(0) != '/') {\n+                    String path = uri.getPath();\n+                    if (Strings.isNullOrEmpty(path) || path.charAt(0) != '/') {\n+                        path = \"/\";\n+                    } else {\n+                        final int i = path.lastIndexOf('/');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEwMTg0OA=="}, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwMjMyMQ==", "bodyText": "https://github.com/square/okhttp/blob/9af741558bf1cbd42e404d93e9eab07e44fd83ec/okhttp/src/main/kotlin/okhttp3/Cookie.kt#L473-L479", "url": "https://github.com/line/armeria/pull/3118#discussion_r515402321", "createdAt": "2020-10-30T22:03:18Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation.\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private final Set<Cookie> store;\n+    /**\n+     * Used to find cookies for a host that matches a domain. For example, if there is a domain example.com,\n+     * host example.com or foo.example.com will match all cookies in that entry.\n+     */\n+    private final Map<String, Set<Cookie>> filter;\n+    private final CookiePolicy cookiePolicy;\n+    private final ReentrantLock lock;\n+\n+    DefaultCookieJar() {\n+        this(CookiePolicy.ACCEPT_ORIGINAL_SERVER);\n+    }\n+\n+    DefaultCookieJar(CookiePolicy cookiePolicy) {\n+        this.cookiePolicy = cookiePolicy;\n+        store = new HashSet<>();\n+        filter = new HashMap<>();\n+        lock = new ReentrantLock();\n+    }\n+\n+    @Override\n+    public Cookies get(URI uri) {\n+        requireNonNull(uri, \"uri\");\n+        if (store.isEmpty()) {\n+            return Cookies.of();\n+        }\n+        final String host = uri.getHost();\n+        final String path = Strings.isNullOrEmpty(uri.getPath()) ? \"/\" : uri.getPath();\n+        final boolean secure = \"https\".equalsIgnoreCase(uri.getScheme());\n+        final Set<Cookie> cookies = new HashSet<>();\n+        lock.lock();\n+        try {\n+            filterGet(cookies, host, path, secure);\n+        } finally {\n+            lock.unlock();\n+        }\n+        return Cookies.of(cookies);\n+    }\n+\n+    @Override\n+    public void set(URI uri, Cookies cookies) {\n+        requireNonNull(uri, \"uri\");\n+        requireNonNull(cookies, \"cookies\");\n+        lock.lock();\n+        try {\n+            for (Cookie cookie : cookies) {\n+                // if domain is not specified, set the domain as the original request host\n+                // https://tools.ietf.org/html/rfc6265#section-5.3\n+                if (cookie.domain() == null) {\n+                    cookie = cookie.toBuilder().domain(uri.getHost()).hostOnly(true).build();\n+                }\n+                // if path is not specified or the first character is not '/', set the default path\n+                // https://tools.ietf.org/html/rfc6265#section-5.2.4\n+                // https://tools.ietf.org/html/rfc6265#section-5.1.4\n+                final String cookiePath = cookie.path();\n+                if (Strings.isNullOrEmpty(cookiePath) || cookiePath.charAt(0) != '/') {\n+                    String path = uri.getPath();\n+                    if (Strings.isNullOrEmpty(path) || path.charAt(0) != '/') {\n+                        path = \"/\";\n+                    } else {\n+                        final int i = path.lastIndexOf('/');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEwMTg0OA=="}, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzQ4NTQ0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzozOTozMlrOHrPcCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMjoyMToxN1rOHrh95A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEwMzc1NA==", "bodyText": "Could you extract this block as a method with @VisibleForTest annotation and add test cases for the path normalization?", "url": "https://github.com/line/armeria/pull/3118#discussion_r515103754", "createdAt": "2020-10-30T13:39:32Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation.\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private final Set<Cookie> store;\n+    /**\n+     * Used to find cookies for a host that matches a domain. For example, if there is a domain example.com,\n+     * host example.com or foo.example.com will match all cookies in that entry.\n+     */\n+    private final Map<String, Set<Cookie>> filter;\n+    private final CookiePolicy cookiePolicy;\n+    private final ReentrantLock lock;\n+\n+    DefaultCookieJar() {\n+        this(CookiePolicy.ACCEPT_ORIGINAL_SERVER);\n+    }\n+\n+    DefaultCookieJar(CookiePolicy cookiePolicy) {\n+        this.cookiePolicy = cookiePolicy;\n+        store = new HashSet<>();\n+        filter = new HashMap<>();\n+        lock = new ReentrantLock();\n+    }\n+\n+    @Override\n+    public Cookies get(URI uri) {\n+        requireNonNull(uri, \"uri\");\n+        if (store.isEmpty()) {\n+            return Cookies.of();\n+        }\n+        final String host = uri.getHost();\n+        final String path = Strings.isNullOrEmpty(uri.getPath()) ? \"/\" : uri.getPath();\n+        final boolean secure = \"https\".equalsIgnoreCase(uri.getScheme());\n+        final Set<Cookie> cookies = new HashSet<>();\n+        lock.lock();\n+        try {\n+            filterGet(cookies, host, path, secure);\n+        } finally {\n+            lock.unlock();\n+        }\n+        return Cookies.of(cookies);\n+    }\n+\n+    @Override\n+    public void set(URI uri, Cookies cookies) {\n+        requireNonNull(uri, \"uri\");\n+        requireNonNull(cookies, \"cookies\");\n+        lock.lock();\n+        try {\n+            for (Cookie cookie : cookies) {\n+                // if domain is not specified, set the domain as the original request host\n+                // https://tools.ietf.org/html/rfc6265#section-5.3\n+                if (cookie.domain() == null) {\n+                    cookie = cookie.toBuilder().domain(uri.getHost()).hostOnly(true).build();\n+                }\n+                // if path is not specified or the first character is not '/', set the default path\n+                // https://tools.ietf.org/html/rfc6265#section-5.2.4\n+                // https://tools.ietf.org/html/rfc6265#section-5.1.4\n+                final String cookiePath = cookie.path();\n+                if (Strings.isNullOrEmpty(cookiePath) || cookiePath.charAt(0) != '/') {\n+                    String path = uri.getPath();\n+                    if (Strings.isNullOrEmpty(path) || path.charAt(0) != '/') {\n+                        path = \"/\";\n+                    } else {\n+                        final int i = path.lastIndexOf('/');\n+                        if (i > 0) {\n+                            path = path.substring(0, i);\n+                        }\n+                    }\n+                    cookie = cookie.toBuilder().path(path).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwNzMzMg==", "bodyText": "I added the test in the latest commit, please let me know if it satisfies. It covers the above discussion as well #3118 (comment).", "url": "https://github.com/line/armeria/pull/3118#discussion_r515407332", "createdAt": "2020-10-30T22:21:17Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation.\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private final Set<Cookie> store;\n+    /**\n+     * Used to find cookies for a host that matches a domain. For example, if there is a domain example.com,\n+     * host example.com or foo.example.com will match all cookies in that entry.\n+     */\n+    private final Map<String, Set<Cookie>> filter;\n+    private final CookiePolicy cookiePolicy;\n+    private final ReentrantLock lock;\n+\n+    DefaultCookieJar() {\n+        this(CookiePolicy.ACCEPT_ORIGINAL_SERVER);\n+    }\n+\n+    DefaultCookieJar(CookiePolicy cookiePolicy) {\n+        this.cookiePolicy = cookiePolicy;\n+        store = new HashSet<>();\n+        filter = new HashMap<>();\n+        lock = new ReentrantLock();\n+    }\n+\n+    @Override\n+    public Cookies get(URI uri) {\n+        requireNonNull(uri, \"uri\");\n+        if (store.isEmpty()) {\n+            return Cookies.of();\n+        }\n+        final String host = uri.getHost();\n+        final String path = Strings.isNullOrEmpty(uri.getPath()) ? \"/\" : uri.getPath();\n+        final boolean secure = \"https\".equalsIgnoreCase(uri.getScheme());\n+        final Set<Cookie> cookies = new HashSet<>();\n+        lock.lock();\n+        try {\n+            filterGet(cookies, host, path, secure);\n+        } finally {\n+            lock.unlock();\n+        }\n+        return Cookies.of(cookies);\n+    }\n+\n+    @Override\n+    public void set(URI uri, Cookies cookies) {\n+        requireNonNull(uri, \"uri\");\n+        requireNonNull(cookies, \"cookies\");\n+        lock.lock();\n+        try {\n+            for (Cookie cookie : cookies) {\n+                // if domain is not specified, set the domain as the original request host\n+                // https://tools.ietf.org/html/rfc6265#section-5.3\n+                if (cookie.domain() == null) {\n+                    cookie = cookie.toBuilder().domain(uri.getHost()).hostOnly(true).build();\n+                }\n+                // if path is not specified or the first character is not '/', set the default path\n+                // https://tools.ietf.org/html/rfc6265#section-5.2.4\n+                // https://tools.ietf.org/html/rfc6265#section-5.1.4\n+                final String cookiePath = cookie.path();\n+                if (Strings.isNullOrEmpty(cookiePath) || cookiePath.charAt(0) != '/') {\n+                    String path = uri.getPath();\n+                    if (Strings.isNullOrEmpty(path) || path.charAt(0) != '/') {\n+                        path = \"/\";\n+                    } else {\n+                        final int i = path.lastIndexOf('/');\n+                        if (i > 0) {\n+                            path = path.substring(0, i);\n+                        }\n+                    }\n+                    cookie = cookie.toBuilder().path(path).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEwMzc1NA=="}, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzU0NzE4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/DefaultCookie.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzo1Mzo1NlrOHrQDyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNToyMTo0MFrOHrT32A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExMzkyOQ==", "bodyText": "TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis() - createdMillis)?\nDon't we need to consider Expires?", "url": "https://github.com/line/armeria/pull/3118#discussion_r515113929", "createdAt": "2020-10-30T13:53:56Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/DefaultCookie.java", "diffHunk": "@@ -117,6 +121,23 @@ public String sameSite() {\n         return sameSite;\n     }\n \n+    @Override\n+    public boolean isHostOnly() {\n+        return hostOnly;\n+    }\n+\n+    @Override\n+    public boolean isExpired() {\n+        if (maxAge == UNDEFINED_MAX_AGE) {\n+            return false;\n+        }\n+        if (maxAge <= 0) {\n+            return true;\n+        }\n+        final double timePassed = (System.currentTimeMillis() - createdMillis) / 1000.0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NjQwOA==", "bodyText": "Seems like expires is transformed into maxAge at the end of parsing. There's no expires in Cookie also.\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/common/ClientCookieDecoder.java\n    \n    \n        Lines 248 to 252\n      in\n      4df49cd\n    \n    \n    \n    \n\n        \n          \n           private static void mergeMaxAgeAndExpires(CookieBuilder builder, String header) { \n        \n\n        \n          \n               // max age has precedence over expires \n        \n\n        \n          \n               if (builder.maxAge != Cookie.UNDEFINED_MAX_AGE) { \n        \n\n        \n          \n                   return; \n        \n\n        \n          \n               }", "url": "https://github.com/line/armeria/pull/3118#discussion_r515176408", "createdAt": "2020-10-30T15:21:40Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/common/DefaultCookie.java", "diffHunk": "@@ -117,6 +121,23 @@ public String sameSite() {\n         return sameSite;\n     }\n \n+    @Override\n+    public boolean isHostOnly() {\n+        return hostOnly;\n+    }\n+\n+    @Override\n+    public boolean isExpired() {\n+        if (maxAge == UNDEFINED_MAX_AGE) {\n+            return false;\n+        }\n+        if (maxAge <= 0) {\n+            return true;\n+        }\n+        final double timePassed = (System.currentTimeMillis() - createdMillis) / 1000.0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExMzkyOQ=="}, "originalCommit": {"oid": "b79774fbe3ec42c7143200f8b9a2f42e48b61a36"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTk4Mzc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTozNDoyN1rOHuy1Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTozNDoyN1rOHuy1Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgyOTMzOA==", "bodyText": "computeIfAbsent can be better?\nfinal Set<Cookie> cookieSet = filter.computeIfAbsent(cookie.domain, (k, v)->new HashSet<>());", "url": "https://github.com/line/armeria/pull/3118#discussion_r518829338", "createdAt": "2020-11-06T15:34:27Z", "author": {"login": "kojilin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.CookieBuilder;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation.\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private final Set<Cookie> store;\n+    /**\n+     * Used to find cookies for a host that matches a domain. For example, if there is a domain example.com,\n+     * host example.com or foo.example.com will match all cookies in that entry.\n+     */\n+    private final Map<String, Set<Cookie>> filter;\n+    private final CookiePolicy cookiePolicy;\n+    private final ReentrantLock lock;\n+\n+    DefaultCookieJar() {\n+        this(CookiePolicy.acceptOriginalServer());\n+    }\n+\n+    DefaultCookieJar(CookiePolicy cookiePolicy) {\n+        this.cookiePolicy = cookiePolicy;\n+        store = new HashSet<>();\n+        filter = new HashMap<>();\n+        lock = new ReentrantLock();\n+    }\n+\n+    @Override\n+    public Cookies get(URI uri) {\n+        requireNonNull(uri, \"uri\");\n+        if (store.isEmpty()) {\n+            return Cookies.of();\n+        }\n+        final String host = uri.getHost();\n+        final String path = uri.getPath().isEmpty() ? \"/\" : uri.getPath();\n+        final boolean secure = \"https\".equalsIgnoreCase(uri.getScheme());\n+        final Set<Cookie> cookies = new HashSet<>();\n+        lock.lock();\n+        try {\n+            filterGet(cookies, host, path, secure);\n+        } finally {\n+            lock.unlock();\n+        }\n+        return Cookies.of(cookies);\n+    }\n+\n+    @Override\n+    public void set(URI uri, Cookies cookies) {\n+        requireNonNull(uri, \"uri\");\n+        requireNonNull(cookies, \"cookies\");\n+        lock.lock();\n+        try {\n+            for (Cookie cookie : cookies) {\n+                cookie = ensureDomainAndPath(cookie, uri);\n+                // remove similar cookie if present\n+                store.remove(cookie);\n+                if (!cookie.isExpired() && cookiePolicy.accept(uri, cookie)) {\n+                    store.add(cookie);\n+                    filter.putIfAbsent(cookie.domain(), new HashSet<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a41e3d5982b89301f6b1f61e8910f97d5f126f1"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjEzODY3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjoxNDoxM1rOHu0WEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjo0OToxNVrOHu1p1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg1NDE2Mw==", "bodyText": "curious do we need store, looks like it's possible to just use filter in current methods?", "url": "https://github.com/line/armeria/pull/3118#discussion_r518854163", "createdAt": "2020-11-06T16:14:13Z", "author": {"login": "kojilin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.CookieBuilder;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation.\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private final Set<Cookie> store;\n+    /**\n+     * Used to find cookies for a host that matches a domain. For example, if there is a domain example.com,\n+     * host example.com or foo.example.com will match all cookies in that entry.\n+     */\n+    private final Map<String, Set<Cookie>> filter;\n+    private final CookiePolicy cookiePolicy;\n+    private final ReentrantLock lock;\n+\n+    DefaultCookieJar() {\n+        this(CookiePolicy.acceptOriginalServer());\n+    }\n+\n+    DefaultCookieJar(CookiePolicy cookiePolicy) {\n+        this.cookiePolicy = cookiePolicy;\n+        store = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a41e3d5982b89301f6b1f61e8910f97d5f126f1"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3NTYwNA==", "bodyText": "I think a store helps when removing cookie because we don't have to go through the filter and do domain matching again to find where it is.", "url": "https://github.com/line/armeria/pull/3118#discussion_r518875604", "createdAt": "2020-11-06T16:49:15Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.CookieBuilder;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation.\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private final Set<Cookie> store;\n+    /**\n+     * Used to find cookies for a host that matches a domain. For example, if there is a domain example.com,\n+     * host example.com or foo.example.com will match all cookies in that entry.\n+     */\n+    private final Map<String, Set<Cookie>> filter;\n+    private final CookiePolicy cookiePolicy;\n+    private final ReentrantLock lock;\n+\n+    DefaultCookieJar() {\n+        this(CookiePolicy.acceptOriginalServer());\n+    }\n+\n+    DefaultCookieJar(CookiePolicy cookiePolicy) {\n+        this.cookiePolicy = cookiePolicy;\n+        store = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg1NDE2Mw=="}, "originalCommit": {"oid": "9a41e3d5982b89301f6b1f61e8910f97d5f126f1"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzI3ODM3OnYy", "diffSide": "RIGHT", "path": "core/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzo0MTowN1rOHviMNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzo0MTowN1rOHviMNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYwNTMwMw==", "bodyText": "Probably better sorting, so that we don't spend too much time on sorting?", "url": "https://github.com/line/armeria/pull/3118#discussion_r519605303", "createdAt": "2020-11-09T07:41:07Z", "author": {"login": "trustin"}, "path": "core/build.gradle", "diffHunk": "@@ -194,3 +196,32 @@ if (tasks.findByName('trimShadedJar')) {\n         dontnote\n     }\n }\n+\n+class PublicSuffixesTask extends DefaultTask {\n+    // Rebuild up to once in 7 days, unless cleaned.\n+    @Input\n+    final def day = (System.currentTimeMillis() / TimeUnit.DAYS.toMillis(7)).intValue()\n+    @OutputFile\n+    final def publicSuffixesFile = project.file(\"${project.buildDir}/resources/main/publicsuffixes\")\n+\n+    @TaskAction\n+    def run() {\n+        publicSuffixesFile.createNewFile()\n+        publicSuffixesFile.write(\"\")\n+        def url = 'https://publicsuffix.org/list/public_suffix_list.dat'\n+        def req = new URL(url).openConnection()\n+        if (req.getResponseCode() != 200) {\n+            throw new Exception('Received a non-200 response from publicsuffix.org: ' +\n+                    \"${req.getResponseCode()}, ${req.getHeaderFields()}\")\n+        }\n+        def res = req.getInputStream()\n+        res.eachLine {\n+            if (!it.isEmpty() && !it.startsWith(\"//\")) {\n+                publicSuffixesFile.append(IDN.toASCII(it) + \"\\n\")\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a41e3d5982b89301f6b1f61e8910f97d5f126f1"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzI4MDgwOnYy", "diffSide": "RIGHT", "path": "core/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzo0MjowMFrOHviNsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzo0MjowMFrOHviNsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYwNTY4Mg==", "bodyText": "nit: ../resources/main/com/linecorp/armeria/public_suffixes.txt ? \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3118#discussion_r519605682", "createdAt": "2020-11-09T07:42:00Z", "author": {"login": "trustin"}, "path": "core/build.gradle", "diffHunk": "@@ -194,3 +196,32 @@ if (tasks.findByName('trimShadedJar')) {\n         dontnote\n     }\n }\n+\n+class PublicSuffixesTask extends DefaultTask {\n+    // Rebuild up to once in 7 days, unless cleaned.\n+    @Input\n+    final def day = (System.currentTimeMillis() / TimeUnit.DAYS.toMillis(7)).intValue()\n+    @OutputFile\n+    final def publicSuffixesFile = project.file(\"${project.buildDir}/resources/main/publicsuffixes\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a41e3d5982b89301f6b1f61e8910f97d5f126f1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzI4MzcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookiePolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzo0MzowNVrOHviPdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzo0MzowNVrOHviPdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYwNjEzMg==", "bodyText": "domainMatches ?", "url": "https://github.com/line/armeria/pull/3118#discussion_r519606132", "createdAt": "2020-11-09T07:43:05Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookiePolicy.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.internal.client.PublicSuffix;\n+\n+import io.netty.util.NetUtil;\n+\n+/**\n+ * Specifies how {@link CookieJar} should accept new {@link Cookie}.\n+ */\n+@FunctionalInterface\n+public interface CookiePolicy {\n+\n+    /**\n+     * Creates a {@link CookiePolicy} that accepts all cookies.\n+     */\n+    static CookiePolicy acceptAll() {\n+        return (uri, cookie) -> true;\n+    }\n+\n+    /**\n+     * Creates a {@link CookiePolicy} that rejects all cookies.\n+     */\n+    static CookiePolicy acceptNone() {\n+        return (uri, cookie) -> false;\n+    }\n+\n+    /**\n+     * Creates a {@link CookiePolicy} that only accepts cookies from the original server.\n+     */\n+    static CookiePolicy acceptOriginalServer() {\n+        return new CookiePolicy() {\n+            @Override\n+            public boolean accept(URI uri, Cookie cookie) {\n+                requireNonNull(uri, \"uri\");\n+                requireNonNull(cookie, \"cookie\");\n+                return domainMatch(cookie.domain(), uri.getHost());\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Determines whether a {@link Cookie} may be stored for a {@link URI}.\n+     */\n+    boolean accept(URI uri, Cookie cookie);\n+\n+    /**\n+     * Determines whether a host matches a domain, as specified by RFC 6265\n+     * <a href=\"https://tools.ietf.org/html/rfc6265#section-5.1.3\">Domain Matching</a>.\n+     */\n+    default boolean domainMatch(@Nullable String domain, @Nullable String host) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a41e3d5982b89301f6b1f61e8910f97d5f126f1"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzI4NTY5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookiePolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzo0Mzo0OFrOHviQmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTo1OTo0MFrOHv_bBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYwNjQyNg==", "bodyText": "I'm not sure which sounds better but how about acceptOriginOnly()? Which one sounds better?", "url": "https://github.com/line/armeria/pull/3118#discussion_r519606426", "createdAt": "2020-11-09T07:43:48Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookiePolicy.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.internal.client.PublicSuffix;\n+\n+import io.netty.util.NetUtil;\n+\n+/**\n+ * Specifies how {@link CookieJar} should accept new {@link Cookie}.\n+ */\n+@FunctionalInterface\n+public interface CookiePolicy {\n+\n+    /**\n+     * Creates a {@link CookiePolicy} that accepts all cookies.\n+     */\n+    static CookiePolicy acceptAll() {\n+        return (uri, cookie) -> true;\n+    }\n+\n+    /**\n+     * Creates a {@link CookiePolicy} that rejects all cookies.\n+     */\n+    static CookiePolicy acceptNone() {\n+        return (uri, cookie) -> false;\n+    }\n+\n+    /**\n+     * Creates a {@link CookiePolicy} that only accepts cookies from the original server.\n+     */\n+    static CookiePolicy acceptOriginalServer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a41e3d5982b89301f6b1f61e8910f97d5f126f1"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4NDIzMA==", "bodyText": "acceptOriginOnly is nice, consistent with all, none, and only", "url": "https://github.com/line/armeria/pull/3118#discussion_r520084230", "createdAt": "2020-11-09T19:59:40Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookiePolicy.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.internal.client.PublicSuffix;\n+\n+import io.netty.util.NetUtil;\n+\n+/**\n+ * Specifies how {@link CookieJar} should accept new {@link Cookie}.\n+ */\n+@FunctionalInterface\n+public interface CookiePolicy {\n+\n+    /**\n+     * Creates a {@link CookiePolicy} that accepts all cookies.\n+     */\n+    static CookiePolicy acceptAll() {\n+        return (uri, cookie) -> true;\n+    }\n+\n+    /**\n+     * Creates a {@link CookiePolicy} that rejects all cookies.\n+     */\n+    static CookiePolicy acceptNone() {\n+        return (uri, cookie) -> false;\n+    }\n+\n+    /**\n+     * Creates a {@link CookiePolicy} that only accepts cookies from the original server.\n+     */\n+    static CookiePolicy acceptOriginalServer() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYwNjQyNg=="}, "originalCommit": {"oid": "9a41e3d5982b89301f6b1f61e8910f97d5f126f1"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzMwNjgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/client/PublicSuffix.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzo1MDowOVrOHviccQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzo1MDowOVrOHviccQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYwOTQ1Nw==", "bodyText": "How about using this:\npublic static PublicSuffix get() {\n    return Once.get();\n}\n\nprivate static final class Once {\n    private static final PublicSuffix INSTANCE;\n    static { ... INSTANCE = ...; }\n    static PublicSuffix get() { return INSTANCE; }\n}\nJVM will handle lazy loading for you.", "url": "https://github.com/line/armeria/pull/3118#discussion_r519609457", "createdAt": "2020-11-09T07:50:09Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/PublicSuffix.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.UncheckedIOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Utility class to determine if a domain is a public suffix. List of rules taken from\n+ * <a href=\"https://publicsuffix.org/list/public_suffix_list.dat\">Public Suffix List</a>.\n+ */\n+public final class PublicSuffix {\n+\n+    @Nullable\n+    private static PublicSuffix instance;\n+\n+    public static PublicSuffix get() {\n+        if (instance == null) {\n+            synchronized (PublicSuffix.class) {\n+                if (instance == null) {\n+                    instance = new PublicSuffix();\n+                }\n+            }\n+        }\n+        return instance;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a41e3d5982b89301f6b1f61e8910f97d5f126f1"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzMxMTIzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/client/PublicSuffix.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzo1MTozNlrOHvifFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzo1MTozNlrOHvifFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxMDEzMw==", "bodyText": "Thanks a lot for the detailed Javadoc. Very useful. \ud83d\ude47", "url": "https://github.com/line/armeria/pull/3118#discussion_r519610133", "createdAt": "2020-11-09T07:51:36Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/PublicSuffix.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.UncheckedIOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Utility class to determine if a domain is a public suffix. List of rules taken from\n+ * <a href=\"https://publicsuffix.org/list/public_suffix_list.dat\">Public Suffix List</a>.\n+ */\n+public final class PublicSuffix {\n+\n+    @Nullable\n+    private static PublicSuffix instance;\n+\n+    public static PublicSuffix get() {\n+        if (instance == null) {\n+            synchronized (PublicSuffix.class) {\n+                if (instance == null) {\n+                    instance = new PublicSuffix();\n+                }\n+            }\n+        }\n+        return instance;\n+    }\n+\n+    private final TrieNode trie;\n+\n+    private PublicSuffix() {\n+        trie = new TrieNode();\n+        buildTrie();\n+    }\n+\n+    /**\n+     * Builds a trie from the public suffix rules/list for suffix matching. For example, the following rules\n+     * creates such trie:\n+     *\n+     * <pre>{@code\n+     * com\n+     * s3.amazonaws.com\n+     * elb.amazonaws.com\n+     * *.compute.amazonaws.com\n+     * !foo.compute.amazonaws.com (this is imaginary)\n+     *\n+     *                  com\n+     *                   |\n+     *         ----- amazonaws -----\n+     *        |          |          \\\n+     *     s3(end)   elb(end)   *compute(end)\n+     *                                \\\n+     *                             !foo(end)\n+     * }</pre>\n+     *\n+     * <p>The node with '*' has {@code isWildcard = true}, meaning it matches up to {@code compute}, and\n+     * <b>one</b> more label on the left (can be anything). So a domain {@code a.compute.amazonaws.com}\n+     * matches this rule, but {@code a.b.compute.amazonaws.com} does not.</p>\n+     *\n+     * <p>The node with '!' has {@code isException = true}, meaning it overrides a wildcard matching. If\n+     * {@code !foo.compute.amazonaws.com} is not specified, {@code foo.compute.amazonaws.com} matches\n+     * {@code *.compute.amazonaws.com}, and thus is considered a public suffix. However with '!', it is not.\n+     * Exception always takes precedence over wildcard.\n+     *\n+     * <p>Note: In the specs, a wildcard '*' may appear anywhere in the rule. However, in practice and in the\n+     * Public Suffix List, it only appears in the leftmost position. There has been discussion on updating\n+     * the specs to reflect this reality and may soon be applied. See more at\n+     * <a href=\"https://github.com/publicsuffix/list/issues/145\">issue</a>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a41e3d5982b89301f6b1f61e8910f97d5f126f1"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzM3NTczOnYy", "diffSide": "RIGHT", "path": "core/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoxMToyOFrOHvjENg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoxMToyOFrOHvjENg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxOTYzOA==", "bodyText": "tasks.classes.dependsOn publicSuffixes \ud83d\ude09", "url": "https://github.com/line/armeria/pull/3118#discussion_r519619638", "createdAt": "2020-11-09T08:11:28Z", "author": {"login": "trustin"}, "path": "core/build.gradle", "diffHunk": "@@ -194,3 +196,32 @@ if (tasks.findByName('trimShadedJar')) {\n         dontnote\n     }\n }\n+\n+class PublicSuffixesTask extends DefaultTask {\n+    // Rebuild up to once in 7 days, unless cleaned.\n+    @Input\n+    final def day = (System.currentTimeMillis() / TimeUnit.DAYS.toMillis(7)).intValue()\n+    @OutputFile\n+    final def publicSuffixesFile = project.file(\"${project.buildDir}/resources/main/publicsuffixes\")\n+\n+    @TaskAction\n+    def run() {\n+        publicSuffixesFile.createNewFile()\n+        publicSuffixesFile.write(\"\")\n+        def url = 'https://publicsuffix.org/list/public_suffix_list.dat'\n+        def req = new URL(url).openConnection()\n+        if (req.getResponseCode() != 200) {\n+            throw new Exception('Received a non-200 response from publicsuffix.org: ' +\n+                    \"${req.getResponseCode()}, ${req.getHeaderFields()}\")\n+        }\n+        def res = req.getInputStream()\n+        res.eachLine {\n+            if (!it.isEmpty() && !it.startsWith(\"//\")) {\n+                publicSuffixesFile.append(IDN.toASCII(it) + \"\\n\")\n+            }\n+        }\n+    }\n+}\n+\n+task publicSuffixes(type: PublicSuffixesTask)\n+tasks.test.dependsOn publicSuffixes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a41e3d5982b89301f6b1f61e8910f97d5f126f1"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzM3NzE1OnYy", "diffSide": "RIGHT", "path": "core/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoxMTo1OVrOHvjFFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoxMTo1OVrOHvjFFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxOTg2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            task publicSuffixes(type: PublicSuffixesTask)\n          \n          \n            \n            tasks.test.dependsOn publicSuffixes\n          \n          \n            \n            task publicSuffixes(type: PublicSuffixesTask)\n          \n          \n            \n            tasks.classes.dependsOn publicSuffixes \ud83d\ude09", "url": "https://github.com/line/armeria/pull/3118#discussion_r519619861", "createdAt": "2020-11-09T08:11:59Z", "author": {"login": "trustin"}, "path": "core/build.gradle", "diffHunk": "@@ -194,3 +196,32 @@ if (tasks.findByName('trimShadedJar')) {\n         dontnote\n     }\n }\n+\n+class PublicSuffixesTask extends DefaultTask {\n+    // Rebuild up to once in 7 days, unless cleaned.\n+    @Input\n+    final def day = (System.currentTimeMillis() / TimeUnit.DAYS.toMillis(7)).intValue()\n+    @OutputFile\n+    final def publicSuffixesFile = project.file(\"${project.buildDir}/resources/main/publicsuffixes\")\n+\n+    @TaskAction\n+    def run() {\n+        publicSuffixesFile.createNewFile()\n+        publicSuffixesFile.write(\"\")\n+        def url = 'https://publicsuffix.org/list/public_suffix_list.dat'\n+        def req = new URL(url).openConnection()\n+        if (req.getResponseCode() != 200) {\n+            throw new Exception('Received a non-200 response from publicsuffix.org: ' +\n+                    \"${req.getResponseCode()}, ${req.getHeaderFields()}\")\n+        }\n+        def res = req.getInputStream()\n+        res.eachLine {\n+            if (!it.isEmpty() && !it.startsWith(\"//\")) {\n+                publicSuffixesFile.append(IDN.toASCII(it) + \"\\n\")\n+            }\n+        }\n+    }\n+}\n+\n+task publicSuffixes(type: PublicSuffixesTask)\n+tasks.test.dependsOn publicSuffixes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a41e3d5982b89301f6b1f61e8910f97d5f126f1"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzM3ODYxOnYy", "diffSide": "RIGHT", "path": "core/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoxMjoyOFrOHvjGBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoxMjoyOFrOHvjGBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYyMDEwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            task publicSuffixes(type: PublicSuffixesTask)\n          \n          \n            \n            tasks.classes.dependsOn publicSuffixes \ud83d\ude09\n          \n          \n            \n            task publicSuffixes(type: PublicSuffixesTask)\n          \n          \n            \n            tasks.classes.dependsOn publicSuffixes", "url": "https://github.com/line/armeria/pull/3118#discussion_r519620102", "createdAt": "2020-11-09T08:12:28Z", "author": {"login": "trustin"}, "path": "core/build.gradle", "diffHunk": "@@ -194,3 +196,32 @@ if (tasks.findByName('trimShadedJar')) {\n         dontnote\n     }\n }\n+\n+class PublicSuffixesTask extends DefaultTask {\n+    // Rebuild up to once in 7 days, unless cleaned.\n+    @Input\n+    final def day = (System.currentTimeMillis() / TimeUnit.DAYS.toMillis(7)).intValue()\n+    @OutputFile\n+    final def publicSuffixesFile = project.file(\"${project.buildDir}/resources/main/publicsuffixes\")\n+\n+    @TaskAction\n+    def run() {\n+        publicSuffixesFile.createNewFile()\n+        publicSuffixesFile.write(\"\")\n+        def url = 'https://publicsuffix.org/list/public_suffix_list.dat'\n+        def req = new URL(url).openConnection()\n+        if (req.getResponseCode() != 200) {\n+            throw new Exception('Received a non-200 response from publicsuffix.org: ' +\n+                    \"${req.getResponseCode()}, ${req.getHeaderFields()}\")\n+        }\n+        def res = req.getInputStream()\n+        res.eachLine {\n+            if (!it.isEmpty() && !it.startsWith(\"//\")) {\n+                publicSuffixesFile.append(IDN.toASCII(it) + \"\\n\")\n+            }\n+        }\n+    }\n+}\n+\n+task publicSuffixes(type: PublicSuffixesTask)\n+tasks.classes.dependsOn publicSuffixes \ud83d\ude09", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "679c39a10b5a191b1cbcf28f50cf34209ddb51ea"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODI5NzEwOnYy", "diffSide": "RIGHT", "path": "core/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjoxMTo1M1rOHvrwaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjoxMTo1M1rOHvrwaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2MjAyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    res.eachLine {\n          \n          \n            \n                    res.eachLine('UTF-8') {", "url": "https://github.com/line/armeria/pull/3118#discussion_r519762027", "createdAt": "2020-11-09T12:11:53Z", "author": {"login": "trustin"}, "path": "core/build.gradle", "diffHunk": "@@ -194,3 +196,32 @@ if (tasks.findByName('trimShadedJar')) {\n         dontnote\n     }\n }\n+\n+class PublicSuffixesTask extends DefaultTask {\n+    // Rebuild up to once in 7 days, unless cleaned.\n+    @Input\n+    final def day = (System.currentTimeMillis() / TimeUnit.DAYS.toMillis(7)).intValue()\n+    @OutputFile\n+    final def publicSuffixesFile = project.file(\"${project.buildDir}/resources/main/publicsuffixes\")\n+\n+    @TaskAction\n+    def run() {\n+        publicSuffixesFile.createNewFile()\n+        publicSuffixesFile.write(\"\")\n+        def url = 'https://publicsuffix.org/list/public_suffix_list.dat'\n+        def req = new URL(url).openConnection()\n+        if (req.getResponseCode() != 200) {\n+            throw new Exception('Received a non-200 response from publicsuffix.org: ' +\n+                    \"${req.getResponseCode()}, ${req.getHeaderFields()}\")\n+        }\n+        def res = req.getInputStream()\n+        res.eachLine {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2505e6dac34b5aec0b764b150f93a370392c2e57"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTIyMTMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookiePolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzoxMToxMlrOHxnj4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwMTozOToyNlrOHzlgAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc5MDQzNA==", "bodyText": "This class is stateless. Could you make a singleton instance and return it?", "url": "https://github.com/line/armeria/pull/3118#discussion_r521790434", "createdAt": "2020-11-12T03:11:12Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookiePolicy.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.internal.client.PublicSuffix;\n+\n+import io.netty.util.NetUtil;\n+\n+/**\n+ * Specifies how {@link CookieJar} should accept new {@link Cookie}.\n+ */\n+@FunctionalInterface\n+public interface CookiePolicy {\n+\n+    /**\n+     * Creates a {@link CookiePolicy} that accepts all cookies.\n+     */\n+    static CookiePolicy acceptAll() {\n+        return (uri, cookie) -> true;\n+    }\n+\n+    /**\n+     * Creates a {@link CookiePolicy} that rejects all cookies.\n+     */\n+    static CookiePolicy acceptNone() {\n+        return (uri, cookie) -> false;\n+    }\n+\n+    /**\n+     * Creates a {@link CookiePolicy} that only accepts cookies from the original server.\n+     */\n+    static CookiePolicy acceptOriginOnly() {\n+        return new CookiePolicy() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483ae93cba44ed6922a9c7895455b1c9124b95c9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg1MzgyNg==", "bodyText": "+1. Better extracting the default implementation into a separate package-local class?", "url": "https://github.com/line/armeria/pull/3118#discussion_r523853826", "createdAt": "2020-11-16T01:39:26Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookiePolicy.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.internal.client.PublicSuffix;\n+\n+import io.netty.util.NetUtil;\n+\n+/**\n+ * Specifies how {@link CookieJar} should accept new {@link Cookie}.\n+ */\n+@FunctionalInterface\n+public interface CookiePolicy {\n+\n+    /**\n+     * Creates a {@link CookiePolicy} that accepts all cookies.\n+     */\n+    static CookiePolicy acceptAll() {\n+        return (uri, cookie) -> true;\n+    }\n+\n+    /**\n+     * Creates a {@link CookiePolicy} that rejects all cookies.\n+     */\n+    static CookiePolicy acceptNone() {\n+        return (uri, cookie) -> false;\n+    }\n+\n+    /**\n+     * Creates a {@link CookiePolicy} that only accepts cookies from the original server.\n+     */\n+    static CookiePolicy acceptOriginOnly() {\n+        return new CookiePolicy() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc5MDQzNA=="}, "originalCommit": {"oid": "483ae93cba44ed6922a9c7895455b1c9124b95c9"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTQ5NzI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDo0MDo1N1rOHxqSrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDo0MDo1N1rOHxqSrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzNTE4Mg==", "bodyText": "Could be static?", "url": "https://github.com/line/armeria/pull/3118#discussion_r521835182", "createdAt": "2020-11-12T04:40:57Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.CookieBuilder;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation.\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private final Set<Cookie> store;\n+    /**\n+     * Used to find cookies for a host that matches a domain. For example, if there is a domain example.com,\n+     * host example.com or foo.example.com will match all cookies in that entry.\n+     */\n+    private final Map<String, Set<Cookie>> filter;\n+    private final CookiePolicy cookiePolicy;\n+    private final ReentrantLock lock;\n+\n+    DefaultCookieJar() {\n+        this(CookiePolicy.acceptOriginOnly());\n+    }\n+\n+    DefaultCookieJar(CookiePolicy cookiePolicy) {\n+        this.cookiePolicy = cookiePolicy;\n+        store = new HashSet<>();\n+        filter = new HashMap<>();\n+        lock = new ReentrantLock();\n+    }\n+\n+    @Override\n+    public Cookies get(URI uri) {\n+        requireNonNull(uri, \"uri\");\n+        if (store.isEmpty()) {\n+            return Cookies.of();\n+        }\n+        final String host = uri.getHost();\n+        final String path = uri.getPath().isEmpty() ? \"/\" : uri.getPath();\n+        final boolean secure = \"https\".equalsIgnoreCase(uri.getScheme());\n+        final Set<Cookie> cookies = new HashSet<>();\n+        lock.lock();\n+        try {\n+            filterGet(cookies, host, path, secure);\n+        } finally {\n+            lock.unlock();\n+        }\n+        return Cookies.of(cookies);\n+    }\n+\n+    @Override\n+    public void set(URI uri, Cookies cookies) {\n+        requireNonNull(uri, \"uri\");\n+        requireNonNull(cookies, \"cookies\");\n+        lock.lock();\n+        try {\n+            for (Cookie cookie : cookies) {\n+                cookie = ensureDomainAndPath(cookie, uri);\n+                // remove similar cookie if present\n+                store.remove(cookie);\n+                if (!cookie.isExpired() && cookiePolicy.accept(uri, cookie)) {\n+                    store.add(cookie);\n+                    final Set<Cookie> cookieSet = filter.computeIfAbsent(cookie.domain(), s -> new HashSet<>());\n+                    // remove similar cookie if present\n+                    cookieSet.remove(cookie);\n+                    cookieSet.add(cookie);\n+                }\n+            }\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    /**\n+     * Ensures this cookie has domain and path attributes, otherwise sets them to default values. If domain\n+     * is absent, the default is the request host, with {@code host-only} flag set to {@code true}. If path is\n+     * absent, the default is computed from the request path. See RFC 6265\n+     * <a href=\"https://tools.ietf.org/html/rfc6265#section-5.3\">5.3</a> and\n+     * <a href=\"https://tools.ietf.org/html/rfc6265#section-5.1.4\">5.1.4</a>\n+     */\n+    @VisibleForTesting\n+    Cookie ensureDomainAndPath(Cookie cookie, URI uri) {\n+        final CookieBuilder cb = cookie.toBuilder();\n+        if (Strings.isNullOrEmpty(cookie.domain())) {\n+            cb.domain(uri.getHost()).hostOnly(true);\n+        }\n+        final String cookiePath = cookie.path();\n+        if (Strings.isNullOrEmpty(cookiePath) || cookiePath.charAt(0) != '/') {\n+            String path = uri.getPath();\n+            if (path.isEmpty()) {\n+                path = \"/\";\n+            } else {\n+                final int i = path.lastIndexOf('/');\n+                if (i > 0) {\n+                    path = path.substring(0, i);\n+                }\n+            }\n+            cb.path(path);\n+        }\n+        return cb.build();\n+    }\n+\n+    private void filterGet(Set<Cookie> cookies, String host, String path, boolean secure) {\n+        for (Map.Entry<String, Set<Cookie>> entry : filter.entrySet()) {\n+            if (cookiePolicy.domainMatches(entry.getKey(), host)) {\n+                final Iterator<Cookie> it = entry.getValue().iterator();\n+                while (it.hasNext()) {\n+                    final Cookie cookie = it.next();\n+                    if (!store.contains(cookie)) {\n+                        // the cookie has been removed from the main store so remove it from filter also\n+                        it.remove();\n+                        break;\n+                    }\n+                    if (cookie.isExpired()) {\n+                        it.remove();\n+                        store.remove(cookie);\n+                        break;\n+                    }\n+                    // if a cookie is host-only, host and domain have to be identical\n+                    final boolean domainMatched = !cookie.isHostOnly() ||\n+                            host.equalsIgnoreCase(cookie.domain());\n+                    if (domainMatched && pathMatches(path, cookie.path()) && (secure || !cookie.isSecure())) {\n+                        cookies.add(cookie);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private boolean pathMatches(@Nullable String path, @Nullable String pathToMatch) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483ae93cba44ed6922a9c7895455b1c9124b95c9"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTU3MzcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookiePolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNToyMTowM1rOHxq9aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNToyMTowM1rOHxq9aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg0NjEyMQ==", "bodyText": "This is a public API. That means this method could be called by a user with any inputs.\ndomainMatches(\".foo.com\", \"foo.com\") raises:\njava.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:709)\n\tat com.linecorp.armeria.client.cookie.CookiePolicy.domainMatches(CookiePolicy.java:87)\nDon't we need to return false or raise IllegalArgumentException?", "url": "https://github.com/line/armeria/pull/3118#discussion_r521846121", "createdAt": "2020-11-12T05:21:03Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookiePolicy.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.internal.client.PublicSuffix;\n+\n+import io.netty.util.NetUtil;\n+\n+/**\n+ * Specifies how {@link CookieJar} should accept new {@link Cookie}.\n+ */\n+@FunctionalInterface\n+public interface CookiePolicy {\n+\n+    /**\n+     * Creates a {@link CookiePolicy} that accepts all cookies.\n+     */\n+    static CookiePolicy acceptAll() {\n+        return (uri, cookie) -> true;\n+    }\n+\n+    /**\n+     * Creates a {@link CookiePolicy} that rejects all cookies.\n+     */\n+    static CookiePolicy acceptNone() {\n+        return (uri, cookie) -> false;\n+    }\n+\n+    /**\n+     * Creates a {@link CookiePolicy} that only accepts cookies from the original server.\n+     */\n+    static CookiePolicy acceptOriginOnly() {\n+        return new CookiePolicy() {\n+            @Override\n+            public boolean accept(URI uri, Cookie cookie) {\n+                requireNonNull(uri, \"uri\");\n+                requireNonNull(cookie, \"cookie\");\n+                return domainMatches(cookie.domain(), uri.getHost());\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Determines whether a {@link Cookie} may be stored for a {@link URI}.\n+     */\n+    boolean accept(URI uri, Cookie cookie);\n+\n+    /**\n+     * Determines whether a host matches a domain, as specified by RFC 6265\n+     * <a href=\"https://tools.ietf.org/html/rfc6265#section-5.1.3\">Domain Matching</a>.\n+     */\n+    default boolean domainMatches(@Nullable String domain, @Nullable String host) {\n+        if (domain == null || host == null) {\n+            return false;\n+        }\n+        if (PublicSuffix.get().isPublicSuffix(domain)) {\n+            return false;\n+        }\n+        if (domain.equalsIgnoreCase(host)) {\n+            return true;\n+        }\n+        // ignore the leading dot\n+        if (!domain.isEmpty() && domain.charAt(0) == '.') {\n+            domain = domain.substring(1);\n+        }\n+        return host.endsWith(domain) && host.charAt(host.length() - domain.length() - 1) == '.' &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483ae93cba44ed6922a9c7895455b1c9124b95c9"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTg5MDk5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/client/PublicSuffix.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzo0MDowN1rOHxt1VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzo0MDowN1rOHxt1VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5MzIwNA==", "bodyText": "Guava has InternetDomainName that also provides a public suffix checker.\nIf you don't mind, could you measure performance between this and Guava's?", "url": "https://github.com/line/armeria/pull/3118#discussion_r521893204", "createdAt": "2020-11-12T07:40:07Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/PublicSuffix.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.UncheckedIOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Utility class to determine if a domain is a public suffix. List of rules taken from\n+ * <a href=\"https://publicsuffix.org/list/public_suffix_list.dat\">Public Suffix List</a>.\n+ */\n+public final class PublicSuffix {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483ae93cba44ed6922a9c7895455b1c9124b95c9"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTkxMjY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzo0NzowNVrOHxuCSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzo0NzowNVrOHxuCSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5NjUyMg==", "bodyText": "If a cookie has a valid domain and path, how about returning cookie itself without an additional object creation.", "url": "https://github.com/line/armeria/pull/3118#discussion_r521896522", "createdAt": "2020-11-12T07:47:05Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.CookieBuilder;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation.\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private final Set<Cookie> store;\n+    /**\n+     * Used to find cookies for a host that matches a domain. For example, if there is a domain example.com,\n+     * host example.com or foo.example.com will match all cookies in that entry.\n+     */\n+    private final Map<String, Set<Cookie>> filter;\n+    private final CookiePolicy cookiePolicy;\n+    private final ReentrantLock lock;\n+\n+    DefaultCookieJar() {\n+        this(CookiePolicy.acceptOriginOnly());\n+    }\n+\n+    DefaultCookieJar(CookiePolicy cookiePolicy) {\n+        this.cookiePolicy = cookiePolicy;\n+        store = new HashSet<>();\n+        filter = new HashMap<>();\n+        lock = new ReentrantLock();\n+    }\n+\n+    @Override\n+    public Cookies get(URI uri) {\n+        requireNonNull(uri, \"uri\");\n+        if (store.isEmpty()) {\n+            return Cookies.of();\n+        }\n+        final String host = uri.getHost();\n+        final String path = uri.getPath().isEmpty() ? \"/\" : uri.getPath();\n+        final boolean secure = \"https\".equalsIgnoreCase(uri.getScheme());\n+        final Set<Cookie> cookies = new HashSet<>();\n+        lock.lock();\n+        try {\n+            filterGet(cookies, host, path, secure);\n+        } finally {\n+            lock.unlock();\n+        }\n+        return Cookies.of(cookies);\n+    }\n+\n+    @Override\n+    public void set(URI uri, Cookies cookies) {\n+        requireNonNull(uri, \"uri\");\n+        requireNonNull(cookies, \"cookies\");\n+        lock.lock();\n+        try {\n+            for (Cookie cookie : cookies) {\n+                cookie = ensureDomainAndPath(cookie, uri);\n+                // remove similar cookie if present\n+                store.remove(cookie);\n+                if (!cookie.isExpired() && cookiePolicy.accept(uri, cookie)) {\n+                    store.add(cookie);\n+                    final Set<Cookie> cookieSet = filter.computeIfAbsent(cookie.domain(), s -> new HashSet<>());\n+                    // remove similar cookie if present\n+                    cookieSet.remove(cookie);\n+                    cookieSet.add(cookie);\n+                }\n+            }\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    /**\n+     * Ensures this cookie has domain and path attributes, otherwise sets them to default values. If domain\n+     * is absent, the default is the request host, with {@code host-only} flag set to {@code true}. If path is\n+     * absent, the default is computed from the request path. See RFC 6265\n+     * <a href=\"https://tools.ietf.org/html/rfc6265#section-5.3\">5.3</a> and\n+     * <a href=\"https://tools.ietf.org/html/rfc6265#section-5.1.4\">5.1.4</a>\n+     */\n+    @VisibleForTesting\n+    Cookie ensureDomainAndPath(Cookie cookie, URI uri) {\n+        final CookieBuilder cb = cookie.toBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483ae93cba44ed6922a9c7895455b1c9124b95c9"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjY4NjEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/client/PublicSuffix.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNToxMDo0N1rOHycJew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNjo1NTo0NVrOH5lZww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY1MjAyNw==", "bodyText": "Could you nomarlize the dot-like characters like Guava did?\nhttps://github.com/google/guava/blob/a6752d73acba20295ecdcddd959dac904dbfa4d3/guava/src/com/google/common/net/InternetDomainName.java#L135-L138", "url": "https://github.com/line/armeria/pull/3118#discussion_r522652027", "createdAt": "2020-11-13T05:10:47Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/PublicSuffix.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.UncheckedIOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Utility class to determine if a domain is a public suffix. List of rules taken from\n+ * <a href=\"https://publicsuffix.org/list/public_suffix_list.dat\">Public Suffix List</a>.\n+ */\n+public final class PublicSuffix {\n+\n+    public static PublicSuffix get() {\n+        return PublicSuffixHolder.INSTANCE;\n+    }\n+\n+    private static final class PublicSuffixHolder {\n+        private static final PublicSuffix INSTANCE = new PublicSuffix();\n+    }\n+\n+    private final TrieNode trie;\n+\n+    private PublicSuffix() {\n+        trie = new TrieNode();\n+        buildTrie();\n+    }\n+\n+    /**\n+     * Builds a trie from the public suffix rules/list for suffix matching. For example, the following rules\n+     * creates such trie:\n+     *\n+     * <pre>{@code\n+     * com\n+     * s3.amazonaws.com\n+     * elb.amazonaws.com\n+     * *.compute.amazonaws.com\n+     * !foo.compute.amazonaws.com (this is imaginary)\n+     *\n+     *                  com\n+     *                   |\n+     *         ----- amazonaws -----\n+     *        |          |          \\\n+     *     s3(end)   elb(end)   *compute(end)\n+     *                                \\\n+     *                             !foo(end)\n+     * }</pre>\n+     *\n+     * <p>The node with '*' has {@code isWildcard = true}, meaning it matches up to {@code compute}, and\n+     * <b>one</b> more label on the left (can be anything). So a domain {@code a.compute.amazonaws.com}\n+     * matches this rule, but {@code a.b.compute.amazonaws.com} does not.</p>\n+     *\n+     * <p>The node with '!' has {@code isException = true}, meaning it overrides a wildcard matching. If\n+     * {@code !foo.compute.amazonaws.com} is not specified, {@code foo.compute.amazonaws.com} matches\n+     * {@code *.compute.amazonaws.com}, and thus is considered a public suffix. However with '!', it is not.\n+     * Exception always takes precedence over wildcard.\n+     *\n+     * <p>Note: In the specs, a wildcard '*' may appear anywhere in the rule. However, in practice and in the\n+     * Public Suffix List, it only appears in the leftmost position. There has been discussion on updating\n+     * the specs to reflect this reality and may soon be applied. See more at\n+     * <a href=\"https://github.com/publicsuffix/list/issues/145\">issue</a>.\n+     */\n+    private void buildTrie() {\n+        try (InputStream in = getClass().getClassLoader()\n+                                        .getResourceAsStream(\"com/linecorp/armeria/public_suffixes.txt\")) {\n+            checkState(in != null, \"public_suffixes.txt not found.\");\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {\n+                String line;\n+                while ((line = reader.readLine()) != null) {\n+                    final String[] labels = line.split(\"\\\\.\");\n+                    TrieNode node = trie;\n+                    for (int i = labels.length - 1; i >= 0; i--) {\n+                        // assume wildcard is at the first position, we don't need to create a new node for it\n+                        // but set the current node's isWildcard = true instead\n+                        if (labels[i].equals(\"*\")) {\n+                            node.isWildcard = true;\n+                            break;\n+                        }\n+                        if (node.children == null) {\n+                            node.children = new HashMap<>();\n+                        }\n+                        if (node.children.containsKey(labels[i])) {\n+                            node = node.children.get(labels[i]);\n+                        } else {\n+                            final TrieNode newNode = new TrieNode();\n+                            if (labels[i].charAt(0) == '!') {\n+                                newNode.isException = true;\n+                                node.children.put(labels[i].substring(1), newNode);\n+                            } else {\n+                                node.children.put(labels[i], newNode);\n+                            }\n+                            node = newNode;\n+                        }\n+                    }\n+                    node.isEnd = true;\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    /**\n+     * Returns whether a domain is a public suffix. Suffix matching is done as follow:\n+     * <ol>\n+     *     <li>Split the domain by dot '.' into labels. Leading and trailing dots are ignored.</li>\n+     *\n+     *     <li>Iterate from the last label to first, at the same time traverse the trie from root. At index i,\n+     *     current node's children should contain a node with key = labels[i]. If not, then the domain does\n+     *     not match any rule and thus is not a public suffix.</li>\n+     *\n+     *     <li>If the node has {@code isWildcard = true}, it can match any label at index i - 1. Since the\n+     *     wildcard is always the leftmost label, i should be 1, otherwise the domain does not match. For\n+     *     example, {@code *.ck} matches {@code a.ck}, but not {@code a.b.ck}.</li>\n+     *\n+     *     <li>If we have a wildcard match, we still need to check for exception. If label i - 1 matches the\n+     *     next node and that node has {@code isException = true}, the wildcard is rejected.</li>\n+     * </ol>\n+     *\n+     * @param domain A canonicalized domain. An internationalized domain name (IDN) should be Punycode\n+     *               encoded, for example, using {@link java.net.IDN#toASCII(String)}.\n+     */\n+    public boolean isPublicSuffix(String domain) {\n+        final String[] labels = domain.split(\"\\\\.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b721169470817379313a6f3e201f61d0cc81f45"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY1OTcxNg==", "bodyText": "Normalization could be helpful in domain matching too, we're also checking dots there. Should we do it earlier, maybe at ensureDomainAndPath?", "url": "https://github.com/line/armeria/pull/3118#discussion_r522659716", "createdAt": "2020-11-13T05:20:12Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/PublicSuffix.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.UncheckedIOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Utility class to determine if a domain is a public suffix. List of rules taken from\n+ * <a href=\"https://publicsuffix.org/list/public_suffix_list.dat\">Public Suffix List</a>.\n+ */\n+public final class PublicSuffix {\n+\n+    public static PublicSuffix get() {\n+        return PublicSuffixHolder.INSTANCE;\n+    }\n+\n+    private static final class PublicSuffixHolder {\n+        private static final PublicSuffix INSTANCE = new PublicSuffix();\n+    }\n+\n+    private final TrieNode trie;\n+\n+    private PublicSuffix() {\n+        trie = new TrieNode();\n+        buildTrie();\n+    }\n+\n+    /**\n+     * Builds a trie from the public suffix rules/list for suffix matching. For example, the following rules\n+     * creates such trie:\n+     *\n+     * <pre>{@code\n+     * com\n+     * s3.amazonaws.com\n+     * elb.amazonaws.com\n+     * *.compute.amazonaws.com\n+     * !foo.compute.amazonaws.com (this is imaginary)\n+     *\n+     *                  com\n+     *                   |\n+     *         ----- amazonaws -----\n+     *        |          |          \\\n+     *     s3(end)   elb(end)   *compute(end)\n+     *                                \\\n+     *                             !foo(end)\n+     * }</pre>\n+     *\n+     * <p>The node with '*' has {@code isWildcard = true}, meaning it matches up to {@code compute}, and\n+     * <b>one</b> more label on the left (can be anything). So a domain {@code a.compute.amazonaws.com}\n+     * matches this rule, but {@code a.b.compute.amazonaws.com} does not.</p>\n+     *\n+     * <p>The node with '!' has {@code isException = true}, meaning it overrides a wildcard matching. If\n+     * {@code !foo.compute.amazonaws.com} is not specified, {@code foo.compute.amazonaws.com} matches\n+     * {@code *.compute.amazonaws.com}, and thus is considered a public suffix. However with '!', it is not.\n+     * Exception always takes precedence over wildcard.\n+     *\n+     * <p>Note: In the specs, a wildcard '*' may appear anywhere in the rule. However, in practice and in the\n+     * Public Suffix List, it only appears in the leftmost position. There has been discussion on updating\n+     * the specs to reflect this reality and may soon be applied. See more at\n+     * <a href=\"https://github.com/publicsuffix/list/issues/145\">issue</a>.\n+     */\n+    private void buildTrie() {\n+        try (InputStream in = getClass().getClassLoader()\n+                                        .getResourceAsStream(\"com/linecorp/armeria/public_suffixes.txt\")) {\n+            checkState(in != null, \"public_suffixes.txt not found.\");\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {\n+                String line;\n+                while ((line = reader.readLine()) != null) {\n+                    final String[] labels = line.split(\"\\\\.\");\n+                    TrieNode node = trie;\n+                    for (int i = labels.length - 1; i >= 0; i--) {\n+                        // assume wildcard is at the first position, we don't need to create a new node for it\n+                        // but set the current node's isWildcard = true instead\n+                        if (labels[i].equals(\"*\")) {\n+                            node.isWildcard = true;\n+                            break;\n+                        }\n+                        if (node.children == null) {\n+                            node.children = new HashMap<>();\n+                        }\n+                        if (node.children.containsKey(labels[i])) {\n+                            node = node.children.get(labels[i]);\n+                        } else {\n+                            final TrieNode newNode = new TrieNode();\n+                            if (labels[i].charAt(0) == '!') {\n+                                newNode.isException = true;\n+                                node.children.put(labels[i].substring(1), newNode);\n+                            } else {\n+                                node.children.put(labels[i], newNode);\n+                            }\n+                            node = newNode;\n+                        }\n+                    }\n+                    node.isEnd = true;\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    /**\n+     * Returns whether a domain is a public suffix. Suffix matching is done as follow:\n+     * <ol>\n+     *     <li>Split the domain by dot '.' into labels. Leading and trailing dots are ignored.</li>\n+     *\n+     *     <li>Iterate from the last label to first, at the same time traverse the trie from root. At index i,\n+     *     current node's children should contain a node with key = labels[i]. If not, then the domain does\n+     *     not match any rule and thus is not a public suffix.</li>\n+     *\n+     *     <li>If the node has {@code isWildcard = true}, it can match any label at index i - 1. Since the\n+     *     wildcard is always the leftmost label, i should be 1, otherwise the domain does not match. For\n+     *     example, {@code *.ck} matches {@code a.ck}, but not {@code a.b.ck}.</li>\n+     *\n+     *     <li>If we have a wildcard match, we still need to check for exception. If label i - 1 matches the\n+     *     next node and that node has {@code isException = true}, the wildcard is rejected.</li>\n+     * </ol>\n+     *\n+     * @param domain A canonicalized domain. An internationalized domain name (IDN) should be Punycode\n+     *               encoded, for example, using {@link java.net.IDN#toASCII(String)}.\n+     */\n+    public boolean isPublicSuffix(String domain) {\n+        final String[] labels = domain.split(\"\\\\.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY1MjAyNw=="}, "originalCommit": {"oid": "5b721169470817379313a6f3e201f61d0cc81f45"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY2Nzk3MQ==", "bodyText": "Actually, there are things I think we could lift up the chain, normalization and procesing leading/trailing dots in cookie domain. Leading dot should be ignored, and trailing dot, actually as I reread it, should cause the client to ignore the attribute completely https://tools.ietf.org/html/rfc6265#section-4.1.2.3. This better be done at cookie creation, I think? An addition to CookieBuilder would be nice.", "url": "https://github.com/line/armeria/pull/3118#discussion_r522667971", "createdAt": "2020-11-13T05:45:02Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/PublicSuffix.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.UncheckedIOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Utility class to determine if a domain is a public suffix. List of rules taken from\n+ * <a href=\"https://publicsuffix.org/list/public_suffix_list.dat\">Public Suffix List</a>.\n+ */\n+public final class PublicSuffix {\n+\n+    public static PublicSuffix get() {\n+        return PublicSuffixHolder.INSTANCE;\n+    }\n+\n+    private static final class PublicSuffixHolder {\n+        private static final PublicSuffix INSTANCE = new PublicSuffix();\n+    }\n+\n+    private final TrieNode trie;\n+\n+    private PublicSuffix() {\n+        trie = new TrieNode();\n+        buildTrie();\n+    }\n+\n+    /**\n+     * Builds a trie from the public suffix rules/list for suffix matching. For example, the following rules\n+     * creates such trie:\n+     *\n+     * <pre>{@code\n+     * com\n+     * s3.amazonaws.com\n+     * elb.amazonaws.com\n+     * *.compute.amazonaws.com\n+     * !foo.compute.amazonaws.com (this is imaginary)\n+     *\n+     *                  com\n+     *                   |\n+     *         ----- amazonaws -----\n+     *        |          |          \\\n+     *     s3(end)   elb(end)   *compute(end)\n+     *                                \\\n+     *                             !foo(end)\n+     * }</pre>\n+     *\n+     * <p>The node with '*' has {@code isWildcard = true}, meaning it matches up to {@code compute}, and\n+     * <b>one</b> more label on the left (can be anything). So a domain {@code a.compute.amazonaws.com}\n+     * matches this rule, but {@code a.b.compute.amazonaws.com} does not.</p>\n+     *\n+     * <p>The node with '!' has {@code isException = true}, meaning it overrides a wildcard matching. If\n+     * {@code !foo.compute.amazonaws.com} is not specified, {@code foo.compute.amazonaws.com} matches\n+     * {@code *.compute.amazonaws.com}, and thus is considered a public suffix. However with '!', it is not.\n+     * Exception always takes precedence over wildcard.\n+     *\n+     * <p>Note: In the specs, a wildcard '*' may appear anywhere in the rule. However, in practice and in the\n+     * Public Suffix List, it only appears in the leftmost position. There has been discussion on updating\n+     * the specs to reflect this reality and may soon be applied. See more at\n+     * <a href=\"https://github.com/publicsuffix/list/issues/145\">issue</a>.\n+     */\n+    private void buildTrie() {\n+        try (InputStream in = getClass().getClassLoader()\n+                                        .getResourceAsStream(\"com/linecorp/armeria/public_suffixes.txt\")) {\n+            checkState(in != null, \"public_suffixes.txt not found.\");\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {\n+                String line;\n+                while ((line = reader.readLine()) != null) {\n+                    final String[] labels = line.split(\"\\\\.\");\n+                    TrieNode node = trie;\n+                    for (int i = labels.length - 1; i >= 0; i--) {\n+                        // assume wildcard is at the first position, we don't need to create a new node for it\n+                        // but set the current node's isWildcard = true instead\n+                        if (labels[i].equals(\"*\")) {\n+                            node.isWildcard = true;\n+                            break;\n+                        }\n+                        if (node.children == null) {\n+                            node.children = new HashMap<>();\n+                        }\n+                        if (node.children.containsKey(labels[i])) {\n+                            node = node.children.get(labels[i]);\n+                        } else {\n+                            final TrieNode newNode = new TrieNode();\n+                            if (labels[i].charAt(0) == '!') {\n+                                newNode.isException = true;\n+                                node.children.put(labels[i].substring(1), newNode);\n+                            } else {\n+                                node.children.put(labels[i], newNode);\n+                            }\n+                            node = newNode;\n+                        }\n+                    }\n+                    node.isEnd = true;\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    /**\n+     * Returns whether a domain is a public suffix. Suffix matching is done as follow:\n+     * <ol>\n+     *     <li>Split the domain by dot '.' into labels. Leading and trailing dots are ignored.</li>\n+     *\n+     *     <li>Iterate from the last label to first, at the same time traverse the trie from root. At index i,\n+     *     current node's children should contain a node with key = labels[i]. If not, then the domain does\n+     *     not match any rule and thus is not a public suffix.</li>\n+     *\n+     *     <li>If the node has {@code isWildcard = true}, it can match any label at index i - 1. Since the\n+     *     wildcard is always the leftmost label, i should be 1, otherwise the domain does not match. For\n+     *     example, {@code *.ck} matches {@code a.ck}, but not {@code a.b.ck}.</li>\n+     *\n+     *     <li>If we have a wildcard match, we still need to check for exception. If label i - 1 matches the\n+     *     next node and that node has {@code isException = true}, the wildcard is rejected.</li>\n+     * </ol>\n+     *\n+     * @param domain A canonicalized domain. An internationalized domain name (IDN) should be Punycode\n+     *               encoded, for example, using {@link java.net.IDN#toASCII(String)}.\n+     */\n+    public boolean isPublicSuffix(String domain) {\n+        final String[] labels = domain.split(\"\\\\.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY1MjAyNw=="}, "originalCommit": {"oid": "5b721169470817379313a6f3e201f61d0cc81f45"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY5MDczOQ==", "bodyText": "Should we do it earlier, maybe at ensureDomainAndPath?\n\nI think we need to normalize here because this method is called by CookiePolicy.domainMatches(...), which is a public API.\n\nLeading dot should be ignored, and trailing dot, actually as I reread it, should cause the client to ignore the attribute completely tools.ietf.org/html/rfc6265#section-4.1.2.3. This better be done at cookie creation, I think? An addition to CookieBuilder would be nice.\n\nI think it would be nice to add normalizing domain to CookieBuilder. Additionally, we can raise IllegalArgumentException if a domain attribute is a public suffix.", "url": "https://github.com/line/armeria/pull/3118#discussion_r522690739", "createdAt": "2020-11-13T06:46:38Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/PublicSuffix.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.UncheckedIOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Utility class to determine if a domain is a public suffix. List of rules taken from\n+ * <a href=\"https://publicsuffix.org/list/public_suffix_list.dat\">Public Suffix List</a>.\n+ */\n+public final class PublicSuffix {\n+\n+    public static PublicSuffix get() {\n+        return PublicSuffixHolder.INSTANCE;\n+    }\n+\n+    private static final class PublicSuffixHolder {\n+        private static final PublicSuffix INSTANCE = new PublicSuffix();\n+    }\n+\n+    private final TrieNode trie;\n+\n+    private PublicSuffix() {\n+        trie = new TrieNode();\n+        buildTrie();\n+    }\n+\n+    /**\n+     * Builds a trie from the public suffix rules/list for suffix matching. For example, the following rules\n+     * creates such trie:\n+     *\n+     * <pre>{@code\n+     * com\n+     * s3.amazonaws.com\n+     * elb.amazonaws.com\n+     * *.compute.amazonaws.com\n+     * !foo.compute.amazonaws.com (this is imaginary)\n+     *\n+     *                  com\n+     *                   |\n+     *         ----- amazonaws -----\n+     *        |          |          \\\n+     *     s3(end)   elb(end)   *compute(end)\n+     *                                \\\n+     *                             !foo(end)\n+     * }</pre>\n+     *\n+     * <p>The node with '*' has {@code isWildcard = true}, meaning it matches up to {@code compute}, and\n+     * <b>one</b> more label on the left (can be anything). So a domain {@code a.compute.amazonaws.com}\n+     * matches this rule, but {@code a.b.compute.amazonaws.com} does not.</p>\n+     *\n+     * <p>The node with '!' has {@code isException = true}, meaning it overrides a wildcard matching. If\n+     * {@code !foo.compute.amazonaws.com} is not specified, {@code foo.compute.amazonaws.com} matches\n+     * {@code *.compute.amazonaws.com}, and thus is considered a public suffix. However with '!', it is not.\n+     * Exception always takes precedence over wildcard.\n+     *\n+     * <p>Note: In the specs, a wildcard '*' may appear anywhere in the rule. However, in practice and in the\n+     * Public Suffix List, it only appears in the leftmost position. There has been discussion on updating\n+     * the specs to reflect this reality and may soon be applied. See more at\n+     * <a href=\"https://github.com/publicsuffix/list/issues/145\">issue</a>.\n+     */\n+    private void buildTrie() {\n+        try (InputStream in = getClass().getClassLoader()\n+                                        .getResourceAsStream(\"com/linecorp/armeria/public_suffixes.txt\")) {\n+            checkState(in != null, \"public_suffixes.txt not found.\");\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {\n+                String line;\n+                while ((line = reader.readLine()) != null) {\n+                    final String[] labels = line.split(\"\\\\.\");\n+                    TrieNode node = trie;\n+                    for (int i = labels.length - 1; i >= 0; i--) {\n+                        // assume wildcard is at the first position, we don't need to create a new node for it\n+                        // but set the current node's isWildcard = true instead\n+                        if (labels[i].equals(\"*\")) {\n+                            node.isWildcard = true;\n+                            break;\n+                        }\n+                        if (node.children == null) {\n+                            node.children = new HashMap<>();\n+                        }\n+                        if (node.children.containsKey(labels[i])) {\n+                            node = node.children.get(labels[i]);\n+                        } else {\n+                            final TrieNode newNode = new TrieNode();\n+                            if (labels[i].charAt(0) == '!') {\n+                                newNode.isException = true;\n+                                node.children.put(labels[i].substring(1), newNode);\n+                            } else {\n+                                node.children.put(labels[i], newNode);\n+                            }\n+                            node = newNode;\n+                        }\n+                    }\n+                    node.isEnd = true;\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    /**\n+     * Returns whether a domain is a public suffix. Suffix matching is done as follow:\n+     * <ol>\n+     *     <li>Split the domain by dot '.' into labels. Leading and trailing dots are ignored.</li>\n+     *\n+     *     <li>Iterate from the last label to first, at the same time traverse the trie from root. At index i,\n+     *     current node's children should contain a node with key = labels[i]. If not, then the domain does\n+     *     not match any rule and thus is not a public suffix.</li>\n+     *\n+     *     <li>If the node has {@code isWildcard = true}, it can match any label at index i - 1. Since the\n+     *     wildcard is always the leftmost label, i should be 1, otherwise the domain does not match. For\n+     *     example, {@code *.ck} matches {@code a.ck}, but not {@code a.b.ck}.</li>\n+     *\n+     *     <li>If we have a wildcard match, we still need to check for exception. If label i - 1 matches the\n+     *     next node and that node has {@code isException = true}, the wildcard is rejected.</li>\n+     * </ol>\n+     *\n+     * @param domain A canonicalized domain. An internationalized domain name (IDN) should be Punycode\n+     *               encoded, for example, using {@link java.net.IDN#toASCII(String)}.\n+     */\n+    public boolean isPublicSuffix(String domain) {\n+        final String[] labels = domain.split(\"\\\\.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY1MjAyNw=="}, "originalCommit": {"oid": "5b721169470817379313a6f3e201f61d0cc81f45"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4MDQxMg==", "bodyText": "Looks like cookie domain is already validated for unusual characters in Builder. Probably don't need to normalize here anymore I think? \n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/common/CookieBuilder.java\n    \n    \n         Line 42\n      in\n      2a27bd2\n    \n    \n    \n    \n\n        \n          \n           private static String validateAttributeValue(String value, String valueName) {", "url": "https://github.com/line/armeria/pull/3118#discussion_r523280412", "createdAt": "2020-11-13T23:15:53Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/PublicSuffix.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.UncheckedIOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Utility class to determine if a domain is a public suffix. List of rules taken from\n+ * <a href=\"https://publicsuffix.org/list/public_suffix_list.dat\">Public Suffix List</a>.\n+ */\n+public final class PublicSuffix {\n+\n+    public static PublicSuffix get() {\n+        return PublicSuffixHolder.INSTANCE;\n+    }\n+\n+    private static final class PublicSuffixHolder {\n+        private static final PublicSuffix INSTANCE = new PublicSuffix();\n+    }\n+\n+    private final TrieNode trie;\n+\n+    private PublicSuffix() {\n+        trie = new TrieNode();\n+        buildTrie();\n+    }\n+\n+    /**\n+     * Builds a trie from the public suffix rules/list for suffix matching. For example, the following rules\n+     * creates such trie:\n+     *\n+     * <pre>{@code\n+     * com\n+     * s3.amazonaws.com\n+     * elb.amazonaws.com\n+     * *.compute.amazonaws.com\n+     * !foo.compute.amazonaws.com (this is imaginary)\n+     *\n+     *                  com\n+     *                   |\n+     *         ----- amazonaws -----\n+     *        |          |          \\\n+     *     s3(end)   elb(end)   *compute(end)\n+     *                                \\\n+     *                             !foo(end)\n+     * }</pre>\n+     *\n+     * <p>The node with '*' has {@code isWildcard = true}, meaning it matches up to {@code compute}, and\n+     * <b>one</b> more label on the left (can be anything). So a domain {@code a.compute.amazonaws.com}\n+     * matches this rule, but {@code a.b.compute.amazonaws.com} does not.</p>\n+     *\n+     * <p>The node with '!' has {@code isException = true}, meaning it overrides a wildcard matching. If\n+     * {@code !foo.compute.amazonaws.com} is not specified, {@code foo.compute.amazonaws.com} matches\n+     * {@code *.compute.amazonaws.com}, and thus is considered a public suffix. However with '!', it is not.\n+     * Exception always takes precedence over wildcard.\n+     *\n+     * <p>Note: In the specs, a wildcard '*' may appear anywhere in the rule. However, in practice and in the\n+     * Public Suffix List, it only appears in the leftmost position. There has been discussion on updating\n+     * the specs to reflect this reality and may soon be applied. See more at\n+     * <a href=\"https://github.com/publicsuffix/list/issues/145\">issue</a>.\n+     */\n+    private void buildTrie() {\n+        try (InputStream in = getClass().getClassLoader()\n+                                        .getResourceAsStream(\"com/linecorp/armeria/public_suffixes.txt\")) {\n+            checkState(in != null, \"public_suffixes.txt not found.\");\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {\n+                String line;\n+                while ((line = reader.readLine()) != null) {\n+                    final String[] labels = line.split(\"\\\\.\");\n+                    TrieNode node = trie;\n+                    for (int i = labels.length - 1; i >= 0; i--) {\n+                        // assume wildcard is at the first position, we don't need to create a new node for it\n+                        // but set the current node's isWildcard = true instead\n+                        if (labels[i].equals(\"*\")) {\n+                            node.isWildcard = true;\n+                            break;\n+                        }\n+                        if (node.children == null) {\n+                            node.children = new HashMap<>();\n+                        }\n+                        if (node.children.containsKey(labels[i])) {\n+                            node = node.children.get(labels[i]);\n+                        } else {\n+                            final TrieNode newNode = new TrieNode();\n+                            if (labels[i].charAt(0) == '!') {\n+                                newNode.isException = true;\n+                                node.children.put(labels[i].substring(1), newNode);\n+                            } else {\n+                                node.children.put(labels[i], newNode);\n+                            }\n+                            node = newNode;\n+                        }\n+                    }\n+                    node.isEnd = true;\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    /**\n+     * Returns whether a domain is a public suffix. Suffix matching is done as follow:\n+     * <ol>\n+     *     <li>Split the domain by dot '.' into labels. Leading and trailing dots are ignored.</li>\n+     *\n+     *     <li>Iterate from the last label to first, at the same time traverse the trie from root. At index i,\n+     *     current node's children should contain a node with key = labels[i]. If not, then the domain does\n+     *     not match any rule and thus is not a public suffix.</li>\n+     *\n+     *     <li>If the node has {@code isWildcard = true}, it can match any label at index i - 1. Since the\n+     *     wildcard is always the leftmost label, i should be 1, otherwise the domain does not match. For\n+     *     example, {@code *.ck} matches {@code a.ck}, but not {@code a.b.ck}.</li>\n+     *\n+     *     <li>If we have a wildcard match, we still need to check for exception. If label i - 1 matches the\n+     *     next node and that node has {@code isException = true}, the wildcard is rejected.</li>\n+     * </ol>\n+     *\n+     * @param domain A canonicalized domain. An internationalized domain name (IDN) should be Punycode\n+     *               encoded, for example, using {@link java.net.IDN#toASCII(String)}.\n+     */\n+    public boolean isPublicSuffix(String domain) {\n+        final String[] labels = domain.split(\"\\\\.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY1MjAyNw=="}, "originalCommit": {"oid": "5b721169470817379313a6f3e201f61d0cc81f45"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg1NjU0Mw==", "bodyText": "I guess what @ikhoon says is that anyone can call this API with any invalid value via CookiePolicy.domainMatches().\nMaybe we could optimize the validation as suggested by @tumile, i.e. validate and normalize more aggressively in CookieBuilder.domain(String), if:\n\nwe hide domainMatches() somehow from the public API; or\nwe change domainMatches() accept a Cookie instead of a String.\n\nMakes sense?", "url": "https://github.com/line/armeria/pull/3118#discussion_r523856543", "createdAt": "2020-11-16T01:53:22Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/PublicSuffix.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.UncheckedIOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Utility class to determine if a domain is a public suffix. List of rules taken from\n+ * <a href=\"https://publicsuffix.org/list/public_suffix_list.dat\">Public Suffix List</a>.\n+ */\n+public final class PublicSuffix {\n+\n+    public static PublicSuffix get() {\n+        return PublicSuffixHolder.INSTANCE;\n+    }\n+\n+    private static final class PublicSuffixHolder {\n+        private static final PublicSuffix INSTANCE = new PublicSuffix();\n+    }\n+\n+    private final TrieNode trie;\n+\n+    private PublicSuffix() {\n+        trie = new TrieNode();\n+        buildTrie();\n+    }\n+\n+    /**\n+     * Builds a trie from the public suffix rules/list for suffix matching. For example, the following rules\n+     * creates such trie:\n+     *\n+     * <pre>{@code\n+     * com\n+     * s3.amazonaws.com\n+     * elb.amazonaws.com\n+     * *.compute.amazonaws.com\n+     * !foo.compute.amazonaws.com (this is imaginary)\n+     *\n+     *                  com\n+     *                   |\n+     *         ----- amazonaws -----\n+     *        |          |          \\\n+     *     s3(end)   elb(end)   *compute(end)\n+     *                                \\\n+     *                             !foo(end)\n+     * }</pre>\n+     *\n+     * <p>The node with '*' has {@code isWildcard = true}, meaning it matches up to {@code compute}, and\n+     * <b>one</b> more label on the left (can be anything). So a domain {@code a.compute.amazonaws.com}\n+     * matches this rule, but {@code a.b.compute.amazonaws.com} does not.</p>\n+     *\n+     * <p>The node with '!' has {@code isException = true}, meaning it overrides a wildcard matching. If\n+     * {@code !foo.compute.amazonaws.com} is not specified, {@code foo.compute.amazonaws.com} matches\n+     * {@code *.compute.amazonaws.com}, and thus is considered a public suffix. However with '!', it is not.\n+     * Exception always takes precedence over wildcard.\n+     *\n+     * <p>Note: In the specs, a wildcard '*' may appear anywhere in the rule. However, in practice and in the\n+     * Public Suffix List, it only appears in the leftmost position. There has been discussion on updating\n+     * the specs to reflect this reality and may soon be applied. See more at\n+     * <a href=\"https://github.com/publicsuffix/list/issues/145\">issue</a>.\n+     */\n+    private void buildTrie() {\n+        try (InputStream in = getClass().getClassLoader()\n+                                        .getResourceAsStream(\"com/linecorp/armeria/public_suffixes.txt\")) {\n+            checkState(in != null, \"public_suffixes.txt not found.\");\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {\n+                String line;\n+                while ((line = reader.readLine()) != null) {\n+                    final String[] labels = line.split(\"\\\\.\");\n+                    TrieNode node = trie;\n+                    for (int i = labels.length - 1; i >= 0; i--) {\n+                        // assume wildcard is at the first position, we don't need to create a new node for it\n+                        // but set the current node's isWildcard = true instead\n+                        if (labels[i].equals(\"*\")) {\n+                            node.isWildcard = true;\n+                            break;\n+                        }\n+                        if (node.children == null) {\n+                            node.children = new HashMap<>();\n+                        }\n+                        if (node.children.containsKey(labels[i])) {\n+                            node = node.children.get(labels[i]);\n+                        } else {\n+                            final TrieNode newNode = new TrieNode();\n+                            if (labels[i].charAt(0) == '!') {\n+                                newNode.isException = true;\n+                                node.children.put(labels[i].substring(1), newNode);\n+                            } else {\n+                                node.children.put(labels[i], newNode);\n+                            }\n+                            node = newNode;\n+                        }\n+                    }\n+                    node.isEnd = true;\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    /**\n+     * Returns whether a domain is a public suffix. Suffix matching is done as follow:\n+     * <ol>\n+     *     <li>Split the domain by dot '.' into labels. Leading and trailing dots are ignored.</li>\n+     *\n+     *     <li>Iterate from the last label to first, at the same time traverse the trie from root. At index i,\n+     *     current node's children should contain a node with key = labels[i]. If not, then the domain does\n+     *     not match any rule and thus is not a public suffix.</li>\n+     *\n+     *     <li>If the node has {@code isWildcard = true}, it can match any label at index i - 1. Since the\n+     *     wildcard is always the leftmost label, i should be 1, otherwise the domain does not match. For\n+     *     example, {@code *.ck} matches {@code a.ck}, but not {@code a.b.ck}.</li>\n+     *\n+     *     <li>If we have a wildcard match, we still need to check for exception. If label i - 1 matches the\n+     *     next node and that node has {@code isException = true}, the wildcard is rejected.</li>\n+     * </ol>\n+     *\n+     * @param domain A canonicalized domain. An internationalized domain name (IDN) should be Punycode\n+     *               encoded, for example, using {@link java.net.IDN#toASCII(String)}.\n+     */\n+    public boolean isPublicSuffix(String domain) {\n+        final String[] labels = domain.split(\"\\\\.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY1MjAyNw=="}, "originalCommit": {"oid": "5b721169470817379313a6f3e201f61d0cc81f45"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA4MDQ2Nw==", "bodyText": "I added the dots check into CookieBuilder. domainMatches is fairly simple so I made it private in both AcceptOriginPolicy and CookieJar. There's minor difference, like domain matching in CookieJar doesn't have to check for null domains, so I think that justifies the duplication.", "url": "https://github.com/line/armeria/pull/3118#discussion_r530080467", "createdAt": "2020-11-25T03:13:12Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/PublicSuffix.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.UncheckedIOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Utility class to determine if a domain is a public suffix. List of rules taken from\n+ * <a href=\"https://publicsuffix.org/list/public_suffix_list.dat\">Public Suffix List</a>.\n+ */\n+public final class PublicSuffix {\n+\n+    public static PublicSuffix get() {\n+        return PublicSuffixHolder.INSTANCE;\n+    }\n+\n+    private static final class PublicSuffixHolder {\n+        private static final PublicSuffix INSTANCE = new PublicSuffix();\n+    }\n+\n+    private final TrieNode trie;\n+\n+    private PublicSuffix() {\n+        trie = new TrieNode();\n+        buildTrie();\n+    }\n+\n+    /**\n+     * Builds a trie from the public suffix rules/list for suffix matching. For example, the following rules\n+     * creates such trie:\n+     *\n+     * <pre>{@code\n+     * com\n+     * s3.amazonaws.com\n+     * elb.amazonaws.com\n+     * *.compute.amazonaws.com\n+     * !foo.compute.amazonaws.com (this is imaginary)\n+     *\n+     *                  com\n+     *                   |\n+     *         ----- amazonaws -----\n+     *        |          |          \\\n+     *     s3(end)   elb(end)   *compute(end)\n+     *                                \\\n+     *                             !foo(end)\n+     * }</pre>\n+     *\n+     * <p>The node with '*' has {@code isWildcard = true}, meaning it matches up to {@code compute}, and\n+     * <b>one</b> more label on the left (can be anything). So a domain {@code a.compute.amazonaws.com}\n+     * matches this rule, but {@code a.b.compute.amazonaws.com} does not.</p>\n+     *\n+     * <p>The node with '!' has {@code isException = true}, meaning it overrides a wildcard matching. If\n+     * {@code !foo.compute.amazonaws.com} is not specified, {@code foo.compute.amazonaws.com} matches\n+     * {@code *.compute.amazonaws.com}, and thus is considered a public suffix. However with '!', it is not.\n+     * Exception always takes precedence over wildcard.\n+     *\n+     * <p>Note: In the specs, a wildcard '*' may appear anywhere in the rule. However, in practice and in the\n+     * Public Suffix List, it only appears in the leftmost position. There has been discussion on updating\n+     * the specs to reflect this reality and may soon be applied. See more at\n+     * <a href=\"https://github.com/publicsuffix/list/issues/145\">issue</a>.\n+     */\n+    private void buildTrie() {\n+        try (InputStream in = getClass().getClassLoader()\n+                                        .getResourceAsStream(\"com/linecorp/armeria/public_suffixes.txt\")) {\n+            checkState(in != null, \"public_suffixes.txt not found.\");\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {\n+                String line;\n+                while ((line = reader.readLine()) != null) {\n+                    final String[] labels = line.split(\"\\\\.\");\n+                    TrieNode node = trie;\n+                    for (int i = labels.length - 1; i >= 0; i--) {\n+                        // assume wildcard is at the first position, we don't need to create a new node for it\n+                        // but set the current node's isWildcard = true instead\n+                        if (labels[i].equals(\"*\")) {\n+                            node.isWildcard = true;\n+                            break;\n+                        }\n+                        if (node.children == null) {\n+                            node.children = new HashMap<>();\n+                        }\n+                        if (node.children.containsKey(labels[i])) {\n+                            node = node.children.get(labels[i]);\n+                        } else {\n+                            final TrieNode newNode = new TrieNode();\n+                            if (labels[i].charAt(0) == '!') {\n+                                newNode.isException = true;\n+                                node.children.put(labels[i].substring(1), newNode);\n+                            } else {\n+                                node.children.put(labels[i], newNode);\n+                            }\n+                            node = newNode;\n+                        }\n+                    }\n+                    node.isEnd = true;\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    /**\n+     * Returns whether a domain is a public suffix. Suffix matching is done as follow:\n+     * <ol>\n+     *     <li>Split the domain by dot '.' into labels. Leading and trailing dots are ignored.</li>\n+     *\n+     *     <li>Iterate from the last label to first, at the same time traverse the trie from root. At index i,\n+     *     current node's children should contain a node with key = labels[i]. If not, then the domain does\n+     *     not match any rule and thus is not a public suffix.</li>\n+     *\n+     *     <li>If the node has {@code isWildcard = true}, it can match any label at index i - 1. Since the\n+     *     wildcard is always the leftmost label, i should be 1, otherwise the domain does not match. For\n+     *     example, {@code *.ck} matches {@code a.ck}, but not {@code a.b.ck}.</li>\n+     *\n+     *     <li>If we have a wildcard match, we still need to check for exception. If label i - 1 matches the\n+     *     next node and that node has {@code isException = true}, the wildcard is rejected.</li>\n+     * </ol>\n+     *\n+     * @param domain A canonicalized domain. An internationalized domain name (IDN) should be Punycode\n+     *               encoded, for example, using {@link java.net.IDN#toASCII(String)}.\n+     */\n+    public boolean isPublicSuffix(String domain) {\n+        final String[] labels = domain.split(\"\\\\.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY1MjAyNw=="}, "originalCommit": {"oid": "5b721169470817379313a6f3e201f61d0cc81f45"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0MzY4Mw==", "bodyText": "SGTM.", "url": "https://github.com/line/armeria/pull/3118#discussion_r530143683", "createdAt": "2020-11-25T06:55:45Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/PublicSuffix.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.UncheckedIOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Utility class to determine if a domain is a public suffix. List of rules taken from\n+ * <a href=\"https://publicsuffix.org/list/public_suffix_list.dat\">Public Suffix List</a>.\n+ */\n+public final class PublicSuffix {\n+\n+    public static PublicSuffix get() {\n+        return PublicSuffixHolder.INSTANCE;\n+    }\n+\n+    private static final class PublicSuffixHolder {\n+        private static final PublicSuffix INSTANCE = new PublicSuffix();\n+    }\n+\n+    private final TrieNode trie;\n+\n+    private PublicSuffix() {\n+        trie = new TrieNode();\n+        buildTrie();\n+    }\n+\n+    /**\n+     * Builds a trie from the public suffix rules/list for suffix matching. For example, the following rules\n+     * creates such trie:\n+     *\n+     * <pre>{@code\n+     * com\n+     * s3.amazonaws.com\n+     * elb.amazonaws.com\n+     * *.compute.amazonaws.com\n+     * !foo.compute.amazonaws.com (this is imaginary)\n+     *\n+     *                  com\n+     *                   |\n+     *         ----- amazonaws -----\n+     *        |          |          \\\n+     *     s3(end)   elb(end)   *compute(end)\n+     *                                \\\n+     *                             !foo(end)\n+     * }</pre>\n+     *\n+     * <p>The node with '*' has {@code isWildcard = true}, meaning it matches up to {@code compute}, and\n+     * <b>one</b> more label on the left (can be anything). So a domain {@code a.compute.amazonaws.com}\n+     * matches this rule, but {@code a.b.compute.amazonaws.com} does not.</p>\n+     *\n+     * <p>The node with '!' has {@code isException = true}, meaning it overrides a wildcard matching. If\n+     * {@code !foo.compute.amazonaws.com} is not specified, {@code foo.compute.amazonaws.com} matches\n+     * {@code *.compute.amazonaws.com}, and thus is considered a public suffix. However with '!', it is not.\n+     * Exception always takes precedence over wildcard.\n+     *\n+     * <p>Note: In the specs, a wildcard '*' may appear anywhere in the rule. However, in practice and in the\n+     * Public Suffix List, it only appears in the leftmost position. There has been discussion on updating\n+     * the specs to reflect this reality and may soon be applied. See more at\n+     * <a href=\"https://github.com/publicsuffix/list/issues/145\">issue</a>.\n+     */\n+    private void buildTrie() {\n+        try (InputStream in = getClass().getClassLoader()\n+                                        .getResourceAsStream(\"com/linecorp/armeria/public_suffixes.txt\")) {\n+            checkState(in != null, \"public_suffixes.txt not found.\");\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {\n+                String line;\n+                while ((line = reader.readLine()) != null) {\n+                    final String[] labels = line.split(\"\\\\.\");\n+                    TrieNode node = trie;\n+                    for (int i = labels.length - 1; i >= 0; i--) {\n+                        // assume wildcard is at the first position, we don't need to create a new node for it\n+                        // but set the current node's isWildcard = true instead\n+                        if (labels[i].equals(\"*\")) {\n+                            node.isWildcard = true;\n+                            break;\n+                        }\n+                        if (node.children == null) {\n+                            node.children = new HashMap<>();\n+                        }\n+                        if (node.children.containsKey(labels[i])) {\n+                            node = node.children.get(labels[i]);\n+                        } else {\n+                            final TrieNode newNode = new TrieNode();\n+                            if (labels[i].charAt(0) == '!') {\n+                                newNode.isException = true;\n+                                node.children.put(labels[i].substring(1), newNode);\n+                            } else {\n+                                node.children.put(labels[i], newNode);\n+                            }\n+                            node = newNode;\n+                        }\n+                    }\n+                    node.isEnd = true;\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    /**\n+     * Returns whether a domain is a public suffix. Suffix matching is done as follow:\n+     * <ol>\n+     *     <li>Split the domain by dot '.' into labels. Leading and trailing dots are ignored.</li>\n+     *\n+     *     <li>Iterate from the last label to first, at the same time traverse the trie from root. At index i,\n+     *     current node's children should contain a node with key = labels[i]. If not, then the domain does\n+     *     not match any rule and thus is not a public suffix.</li>\n+     *\n+     *     <li>If the node has {@code isWildcard = true}, it can match any label at index i - 1. Since the\n+     *     wildcard is always the leftmost label, i should be 1, otherwise the domain does not match. For\n+     *     example, {@code *.ck} matches {@code a.ck}, but not {@code a.b.ck}.</li>\n+     *\n+     *     <li>If we have a wildcard match, we still need to check for exception. If label i - 1 matches the\n+     *     next node and that node has {@code isException = true}, the wildcard is rejected.</li>\n+     * </ol>\n+     *\n+     * @param domain A canonicalized domain. An internationalized domain name (IDN) should be Punycode\n+     *               encoded, for example, using {@link java.net.IDN#toASCII(String)}.\n+     */\n+    public boolean isPublicSuffix(String domain) {\n+        final String[] labels = domain.split(\"\\\\.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY1MjAyNw=="}, "originalCommit": {"oid": "5b721169470817379313a6f3e201f61d0cc81f45"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NDU0ODgyOnYy", "diffSide": "RIGHT", "path": "core/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwMTozNDozM1rOHzlcqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNDo0Njo0NlrOH5jE5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg1Mjk2OA==", "bodyText": "How about writing to src/main/resources/.. so we know when the suffix list changes? Please also add the generated file into this pull request.", "url": "https://github.com/line/armeria/pull/3118#discussion_r523852968", "createdAt": "2020-11-16T01:34:33Z", "author": {"login": "trustin"}, "path": "core/build.gradle", "diffHunk": "@@ -194,3 +196,43 @@ if (tasks.findByName('trimShadedJar')) {\n         dontnote\n     }\n }\n+\n+class PublicSuffixesTask extends DefaultTask {\n+    // Rebuild up to once in 7 days, unless cleaned.\n+    @Input\n+    final def days = (System.currentTimeMillis() / TimeUnit.DAYS.toMillis(7)).intValue()\n+    @OutputFile\n+    final def publicSuffixesFile = project.file(\"${project.buildDir}/resources/main/com/linecorp/armeria/public_suffixes.txt\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b721169470817379313a6f3e201f61d0cc81f45"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEwNTU3Mw==", "bodyText": "Yes the file is added. However when I changed OutputFile to projectDir/src/main/resources/... it couldn't find that file in the code. I wonder if that is because of this line \ud83e\udd14?\n  \n    \n      armeria/core/build.gradle\n    \n    \n         Line 232\n      in\n      d24db55\n    \n    \n    \n    \n\n        \n          \n           tasks.processResources.dependsOn publicSuffixes \n        \n    \n  \n\n\nhttps://ci.appveyor.com/project/line/armeria/builds/36497460/job/d0ji8ok3dnj2e384#L1121", "url": "https://github.com/line/armeria/pull/3118#discussion_r530105573", "createdAt": "2020-11-25T04:46:46Z", "author": {"login": "tumile"}, "path": "core/build.gradle", "diffHunk": "@@ -194,3 +196,43 @@ if (tasks.findByName('trimShadedJar')) {\n         dontnote\n     }\n }\n+\n+class PublicSuffixesTask extends DefaultTask {\n+    // Rebuild up to once in 7 days, unless cleaned.\n+    @Input\n+    final def days = (System.currentTimeMillis() / TimeUnit.DAYS.toMillis(7)).intValue()\n+    @OutputFile\n+    final def publicSuffixesFile = project.file(\"${project.buildDir}/resources/main/com/linecorp/armeria/public_suffixes.txt\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg1Mjk2OA=="}, "originalCommit": {"oid": "5b721169470817379313a6f3e201f61d0cc81f45"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NDU1MTE2OnYy", "diffSide": "RIGHT", "path": "core/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwMTozNTo1MVrOHzldxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwMTozNTo1MVrOHzldxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg1MzI1NQ==", "bodyText": "How about just warning and skipping when this happens, so that the build continues even if publicsuffix.org is down? It should be fine as long as we pushed the previously fetched one into the repository, as I suggested in the above comment.", "url": "https://github.com/line/armeria/pull/3118#discussion_r523853255", "createdAt": "2020-11-16T01:35:51Z", "author": {"login": "trustin"}, "path": "core/build.gradle", "diffHunk": "@@ -194,3 +196,43 @@ if (tasks.findByName('trimShadedJar')) {\n         dontnote\n     }\n }\n+\n+class PublicSuffixesTask extends DefaultTask {\n+    // Rebuild up to once in 7 days, unless cleaned.\n+    @Input\n+    final def days = (System.currentTimeMillis() / TimeUnit.DAYS.toMillis(7)).intValue()\n+    @OutputFile\n+    final def publicSuffixesFile = project.file(\"${project.buildDir}/resources/main/com/linecorp/armeria/public_suffixes.txt\")\n+\n+    @TaskAction\n+    def run() {\n+        try {\n+            def tempFile = File.createTempFile(\"public_suffixes\", null)\n+            println \"tempFile is created: ${tempFile}\"\n+\n+            def url = 'https://publicsuffix.org/list/public_suffix_list.dat'\n+            def req = new URL(url).openConnection()\n+            if (req.getResponseCode() != 200) {\n+                throw new Exception('Received a non-200 response from publicsuffix.org: ' +\n+                        \"${req.getResponseCode()}, ${req.getHeaderFields()}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b721169470817379313a6f3e201f61d0cc81f45"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NDU1MzcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwMTozODoxOFrOHzlfMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwMTozODoxOFrOHzlfMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg1MzYxNg==", "bodyText": "Should we accept Iterable<? extends Cookie> or Set<? extends Cookie> instead?", "url": "https://github.com/line/armeria/pull/3118#discussion_r523853616", "createdAt": "2020-11-16T01:38:18Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import java.net.URI;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.Cookies;\n+\n+/**\n+ * A {@link Cookie} container for a client.\n+ */\n+public interface CookieJar {\n+\n+    /**\n+     * Returns the {@link Cookies} for the specified {@link URI}.\n+     */\n+    Cookies get(URI uri);\n+\n+    /**\n+     * Stores the specified {@link Cookies} for the {@link URI}.\n+     */\n+    void set(URI uri, Cookies cookies);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b721169470817379313a6f3e201f61d0cc81f45"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NDU2Njg2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/DefaultCookie.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwMTo0ODoyNVrOHzlmkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNDo0Nzo1MFrOH5jF4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg1NTUwNQ==", "bodyText": "Similarly, it'd be nice if a user can specify the creation time when building a Cookie. How about adding methods like CookieBuilder.createdAt(long) and createdAt(Instant)? If not set, we could use System.currentTimeMillis().", "url": "https://github.com/line/armeria/pull/3118#discussion_r523855505", "createdAt": "2020-11-16T01:48:25Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/DefaultCookie.java", "diffHunk": "@@ -69,7 +72,9 @@\n         this.maxAge = maxAge;\n         this.secure = secure;\n         this.httpOnly = httpOnly;\n+        this.hostOnly = hostOnly;\n         this.sameSite = sameSite;\n+        createdMillis = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b721169470817379313a6f3e201f61d0cc81f45"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEwNTgyNA==", "bodyText": "Since we're handling expiry in cookie jar, I added a set method with a long createdTimeMillis.", "url": "https://github.com/line/armeria/pull/3118#discussion_r530105824", "createdAt": "2020-11-25T04:47:50Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/common/DefaultCookie.java", "diffHunk": "@@ -69,7 +72,9 @@\n         this.maxAge = maxAge;\n         this.secure = secure;\n         this.httpOnly = httpOnly;\n+        this.hostOnly = hostOnly;\n         this.sameSite = sameSite;\n+        createdMillis = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg1NTUwNQ=="}, "originalCommit": {"oid": "5b721169470817379313a6f3e201f61d0cc81f45"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDg5MzA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/CookieBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNjo1NDo0MVrOH5lYLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTowNzowN1rOH5peQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0MzI3OQ==", "bodyText": "Should we trim automatically or raise an exception?", "url": "https://github.com/line/armeria/pull/3118#discussion_r530143279", "createdAt": "2020-11-25T06:54:41Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/CookieBuilder.java", "diffHunk": "@@ -50,6 +50,17 @@ private static String validateAttributeValue(String value, String valueName) {\n         return value;\n     }\n \n+    @Nullable\n+    private static String trimDomainDot(String domain) {\n+        if (domain.charAt(domain.length() - 1) == '.') {\n+            return null;\n+        }\n+        if (domain.charAt(0) == '.') {\n+            return domain.substring(1);\n+        }\n+        return domain;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed80f146c4fa30b792eb4fbd9ab7b07ff5602898"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2NDYxNg==", "bodyText": "It's defined behavior in rfc6265 here so I think we can do it automatically.", "url": "https://github.com/line/armeria/pull/3118#discussion_r530164616", "createdAt": "2020-11-25T07:46:50Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/common/CookieBuilder.java", "diffHunk": "@@ -50,6 +50,17 @@ private static String validateAttributeValue(String value, String valueName) {\n         return value;\n     }\n \n+    @Nullable\n+    private static String trimDomainDot(String domain) {\n+        if (domain.charAt(domain.length() - 1) == '.') {\n+            return null;\n+        }\n+        if (domain.charAt(0) == '.') {\n+            return domain.substring(1);\n+        }\n+        return domain;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0MzI3OQ=="}, "originalCommit": {"oid": "ed80f146c4fa30b792eb4fbd9ab7b07ff5602898"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIxMDM3MQ==", "bodyText": "Great! How about adding a comment, then?\n// As per https://tools.ietf.org/html/rfc6265#section-4.1.2.3", "url": "https://github.com/line/armeria/pull/3118#discussion_r530210371", "createdAt": "2020-11-25T09:07:07Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/CookieBuilder.java", "diffHunk": "@@ -50,6 +50,17 @@ private static String validateAttributeValue(String value, String valueName) {\n         return value;\n     }\n \n+    @Nullable\n+    private static String trimDomainDot(String domain) {\n+        if (domain.charAt(domain.length() - 1) == '.') {\n+            return null;\n+        }\n+        if (domain.charAt(0) == '.') {\n+            return domain.substring(1);\n+        }\n+        return domain;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0MzI3OQ=="}, "originalCommit": {"oid": "ed80f146c4fa30b792eb4fbd9ab7b07ff5602898"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDkwNTk0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzowMDowNFrOH5lfsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzowMDowNFrOH5lfsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0NTIwMA==", "bodyText": "Could be a default method?", "url": "https://github.com/line/armeria/pull/3118#discussion_r530145200", "createdAt": "2020-11-25T07:00:04Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "diffHunk": "@@ -27,12 +27,29 @@\n public interface CookieJar {\n \n     /**\n-     * Returns the {@link Cookies} for the specified {@link URI}.\n+     * Returns the unexpired {@link Cookies} for the specified {@link URI}.\n      */\n     Cookies get(URI uri);\n \n     /**\n      * Stores the specified {@link Cookies} for the {@link URI}.\n      */\n-    void set(URI uri, Cookies cookies);\n+    void set(URI uri, Iterable<? extends Cookie> cookies);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d24db55953391e0101d2f59ede1c4c889ef6e0e9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDkwNjIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzowMDowOVrOH5lf1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzowMDowOVrOH5lf1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0NTIzNg==", "bodyText": "Could be a default method?", "url": "https://github.com/line/armeria/pull/3118#discussion_r530145236", "createdAt": "2020-11-25T07:00:09Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "diffHunk": "@@ -27,12 +27,29 @@\n public interface CookieJar {\n \n     /**\n-     * Returns the {@link Cookies} for the specified {@link URI}.\n+     * Returns the unexpired {@link Cookies} for the specified {@link URI}.\n      */\n     Cookies get(URI uri);\n \n     /**\n      * Stores the specified {@link Cookies} for the {@link URI}.\n      */\n-    void set(URI uri, Cookies cookies);\n+    void set(URI uri, Iterable<? extends Cookie> cookies);\n+\n+    /**\n+     * Stores the specified {@link Cookies} for the {@link URI} given the creation time.\n+     */\n+    void set(URI uri, Iterable<? extends Cookie> cookies, long createdTimeMillis);\n+\n+    /**\n+     * Determines if a cookie is expired. Throws an {@link IllegalArgumentException} if the cookie is not\n+     * found in the jar.\n+     */\n+    boolean isExpired(Cookie cookie);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d24db55953391e0101d2f59ede1c4c889ef6e0e9"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDkwODkwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzowMTowOVrOH5lhZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzowMTowOVrOH5lhZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0NTYzNg==", "bodyText": "How about defining an enum like CookieState rather than raising an exception?\npublic enum CookeState {\n  EXISTENT,\n  EXPIRED,\n  NON_EXISTENT\n}\nThen we could rename isExpired() to state()?", "url": "https://github.com/line/armeria/pull/3118#discussion_r530145636", "createdAt": "2020-11-25T07:01:09Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "diffHunk": "@@ -27,12 +27,29 @@\n public interface CookieJar {\n \n     /**\n-     * Returns the {@link Cookies} for the specified {@link URI}.\n+     * Returns the unexpired {@link Cookies} for the specified {@link URI}.\n      */\n     Cookies get(URI uri);\n \n     /**\n      * Stores the specified {@link Cookies} for the {@link URI}.\n      */\n-    void set(URI uri, Cookies cookies);\n+    void set(URI uri, Iterable<? extends Cookie> cookies);\n+\n+    /**\n+     * Stores the specified {@link Cookies} for the {@link URI} given the creation time.\n+     */\n+    void set(URI uri, Iterable<? extends Cookie> cookies, long createdTimeMillis);\n+\n+    /**\n+     * Determines if a cookie is expired. Throws an {@link IllegalArgumentException} if the cookie is not\n+     * found in the jar.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d24db55953391e0101d2f59ede1c4c889ef6e0e9"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDkxNzYyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzowNDo1MlrOH5lmcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzowNDo1MlrOH5lmcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0NjkyOQ==", "bodyText": "Could we handle this without containsKey()? Just a single get() will do.\nShouldn't we acquire a lock here as well?", "url": "https://github.com/line/armeria/pull/3118#discussion_r530146929", "createdAt": "2020-11-25T07:04:52Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -102,6 +108,30 @@ public void set(URI uri, Cookies cookies) {\n         }\n     }\n \n+    @Override\n+    public boolean isExpired(Cookie cookie) {\n+        return isExpired(cookie, System.currentTimeMillis());\n+    }\n+\n+    @Override\n+    public boolean isExpired(Cookie cookie, long currentTimeMillis) {\n+        if (!store.containsKey(cookie)) {\n+            throw new IllegalArgumentException(\"cookie not found.\");\n+        }\n+        return isExpired(cookie, store.get(cookie), currentTimeMillis);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d24db55953391e0101d2f59ede1c4c889ef6e0e9"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDkyNjI3OnYy", "diffSide": "RIGHT", "path": "core/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzowODowM1rOH5lrSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzowODowM1rOH5lrSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0ODE3MQ==", "bodyText": "How about sorting it first, so that we are sure we will generate the same file even if publicsuffix.org doesn't provide a sorted list, just in case?", "url": "https://github.com/line/armeria/pull/3118#discussion_r530148171", "createdAt": "2020-11-25T07:08:03Z", "author": {"login": "trustin"}, "path": "core/build.gradle", "diffHunk": "@@ -194,3 +196,37 @@ if (tasks.findByName('trimShadedJar')) {\n         dontnote\n     }\n }\n+\n+class PublicSuffixesTask extends DefaultTask {\n+    // Rebuild up to once in 7 days, unless cleaned.\n+    @Input\n+    final def days = (System.currentTimeMillis() / TimeUnit.DAYS.toMillis(7)).intValue()\n+    @OutputFile\n+    final def publicSuffixesFile = project.file(\"${project.projectDir}/src/main/resources/com/linecorp/armeria/public_suffixes.txt\")\n+\n+    @TaskAction\n+    def run() {\n+        try {\n+            def tempFile = File.createTempFile(\"public_suffixes\", null)\n+            def req = (HttpURLConnection) new URL('https://publicsuffix.org/list/public_suffix_list.dat').openConnection()\n+            def res = req.getInputStream()\n+            if (req.getResponseCode() != 200) {\n+                println \"received a non-200 response from publicsuffix.org: ${req.getResponseCode()}\"\n+                return\n+            }\n+            res.eachLine('UTF-8') {\n+                if (!it.isEmpty() && !it.startsWith(\"//\")) {\n+                    tempFile.append(IDN.toASCII(it) + \"\\n\")\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d24db55953391e0101d2f59ede1c4c889ef6e0e9"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDkzMDY4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzowOTo1MFrOH5luBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzowOTo1MFrOH5luBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0ODg3MQ==", "bodyText": "How about using it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap ?", "url": "https://github.com/line/armeria/pull/3118#discussion_r530148871", "createdAt": "2020-11-25T07:09:50Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.CookieBuilder;\n+import com.linecorp.armeria.common.Cookies;\n+\n+import io.netty.util.NetUtil;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation.\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private final Map<Cookie, Long> store;\n+    /**\n+     * Used to find cookies for a host that matches a domain. For example, if there is a domain example.com,\n+     * host example.com or foo.example.com will match all cookies in that entry.\n+     */\n+    private final Map<String, Set<Cookie>> filter;\n+    private final CookiePolicy cookiePolicy;\n+    private final ReentrantLock lock;\n+\n+    DefaultCookieJar() {\n+        this(CookiePolicy.acceptOriginOnly());\n+    }\n+\n+    DefaultCookieJar(CookiePolicy cookiePolicy) {\n+        this.cookiePolicy = cookiePolicy;\n+        store = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d24db55953391e0101d2f59ede1c4c889ef6e0e9"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDk1MjAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzoxNzo0MFrOH5l6ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzoxNzo0MFrOH5l6ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1MjA0Mg==", "bodyText": "Should we consider the schemes like the following?\n\nh2, h2c, h1 and h1c (Can be parsed with SessionProtocol.find())\nxxx+h2, etc. (Can be parsed with Scheme.tryParse())\n\ni.e.\nfinal SessionProtocol parsedProtocol;\nif (scheme.indexOf('+') >= 0) {\n    final Scheme parsedScheme = Scheme.tryParse(scheme);\n    parsedProtocol = parsedScheme != null ? parsedScheme.sessionProtocol() : null;\n} else {\n    parsedProtocol = SessionProtocol.find(scheme);\n}\nfinal boolean secure = parsedProtocol != null && parsedProtocol.isTls();", "url": "https://github.com/line/armeria/pull/3118#discussion_r530152042", "createdAt": "2020-11-25T07:17:40Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.CookieBuilder;\n+import com.linecorp.armeria.common.Cookies;\n+\n+import io.netty.util.NetUtil;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation.\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private final Map<Cookie, Long> store;\n+    /**\n+     * Used to find cookies for a host that matches a domain. For example, if there is a domain example.com,\n+     * host example.com or foo.example.com will match all cookies in that entry.\n+     */\n+    private final Map<String, Set<Cookie>> filter;\n+    private final CookiePolicy cookiePolicy;\n+    private final ReentrantLock lock;\n+\n+    DefaultCookieJar() {\n+        this(CookiePolicy.acceptOriginOnly());\n+    }\n+\n+    DefaultCookieJar(CookiePolicy cookiePolicy) {\n+        this.cookiePolicy = cookiePolicy;\n+        store = new HashMap<>();\n+        filter = new HashMap<>();\n+        lock = new ReentrantLock();\n+    }\n+\n+    @Override\n+    public Cookies get(URI uri) {\n+        requireNonNull(uri, \"uri\");\n+        if (store.isEmpty()) {\n+            return Cookies.of();\n+        }\n+        final String host = uri.getHost();\n+        final String path = uri.getPath().isEmpty() ? \"/\" : uri.getPath();\n+        final boolean secure = \"https\".equalsIgnoreCase(uri.getScheme());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d24db55953391e0101d2f59ede1c4c889ef6e0e9"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODk5Mjg4OnYy", "diffSide": "RIGHT", "path": "core/build.gradle", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDo1ODo0MVrOH6L5BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNzo0Mjo1NVrOH6PBUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3NDI3Ng==", "bodyText": "Isn't processResources better?", "url": "https://github.com/line/armeria/pull/3118#discussion_r530774276", "createdAt": "2020-11-26T04:58:41Z", "author": {"login": "trustin"}, "path": "core/build.gradle", "diffHunk": "@@ -229,4 +234,4 @@ class PublicSuffixesTask extends DefaultTask {\n }\n \n task publicSuffixes(type: PublicSuffixesTask)\n-tasks.processResources.dependsOn publicSuffixes\n+tasks.classes.dependsOn publicSuffixes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca3579d39300b7d483259ba78710a9da67c2fab"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgyMzQ5NA==", "bodyText": "When it was processResources the process couldn't find the txt file. Seemed like classes worked. I'm not proficient at this so please let me know what you think works \ud83d\ude2c.\nhttps://ci.appveyor.com/project/line/armeria/builds/36497460/job/d0ji8ok3dnj2e384#L966", "url": "https://github.com/line/armeria/pull/3118#discussion_r530823494", "createdAt": "2020-11-26T07:38:48Z", "author": {"login": "tumile"}, "path": "core/build.gradle", "diffHunk": "@@ -229,4 +234,4 @@ class PublicSuffixesTask extends DefaultTask {\n }\n \n task publicSuffixes(type: PublicSuffixesTask)\n-tasks.processResources.dependsOn publicSuffixes\n+tasks.classes.dependsOn publicSuffixes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3NDI3Ng=="}, "originalCommit": {"oid": "0ca3579d39300b7d483259ba78710a9da67c2fab"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgyNTU1NQ==", "bodyText": "Ah, OK. It's perhaps because we now write to src/main. Never mind, then.", "url": "https://github.com/line/armeria/pull/3118#discussion_r530825555", "createdAt": "2020-11-26T07:42:55Z", "author": {"login": "trustin"}, "path": "core/build.gradle", "diffHunk": "@@ -229,4 +234,4 @@ class PublicSuffixesTask extends DefaultTask {\n }\n \n task publicSuffixes(type: PublicSuffixesTask)\n-tasks.processResources.dependsOn publicSuffixes\n+tasks.classes.dependsOn publicSuffixes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3NDI3Ng=="}, "originalCommit": {"oid": "0ca3579d39300b7d483259ba78710a9da67c2fab"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODk5NDUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDo1OTo0MVrOH6L57g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDo1OTo0MVrOH6L57g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3NDUxMA==", "bodyText": "Could you move it to the top level?\nLet's add @see CookieJar#state(Cookie)", "url": "https://github.com/line/armeria/pull/3118#discussion_r530774510", "createdAt": "2020-11-26T04:59:41Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "diffHunk": "@@ -26,30 +26,43 @@\n  */\n public interface CookieJar {\n \n+    /**\n+     * The possible states of a cookie in the jar.\n+     */\n+    enum CookieState {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca3579d39300b7d483259ba78710a9da67c2fab"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODk5NDgyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDo1OTo1NFrOH6L6Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDo1OTo1NFrOH6L6Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3NDU3MQ==", "bodyText": "Could you add Javadoc for each value?", "url": "https://github.com/line/armeria/pull/3118#discussion_r530774571", "createdAt": "2020-11-26T04:59:54Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieJar.java", "diffHunk": "@@ -26,30 +26,43 @@\n  */\n public interface CookieJar {\n \n+    /**\n+     * The possible states of a cookie in the jar.\n+     */\n+    enum CookieState {\n+        EXISTENT,\n+        EXPIRED,\n+        NON_EXISTENT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca3579d39300b7d483259ba78710a9da67c2fab"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODk5Njc5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNTowMTowM1rOH6L7Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNzo1Mjo1MlrOH6PVJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3NDg2Nw==", "bodyText": "You have to change the type of store to Object2LongMap and use the methods that returns and accepts long instead of Long to take full advantage of this.", "url": "https://github.com/line/armeria/pull/3118#discussion_r530774867", "createdAt": "2020-11-26T05:01:03Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -56,7 +59,7 @@\n \n     DefaultCookieJar(CookiePolicy cookiePolicy) {\n         this.cookiePolicy = cookiePolicy;\n-        store = new HashMap<>();\n+        store = new Object2LongOpenHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca3579d39300b7d483259ba78710a9da67c2fab"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgzMDYyOA==", "bodyText": "Ya sorry this is new to me \ud83d\ude06", "url": "https://github.com/line/armeria/pull/3118#discussion_r530830628", "createdAt": "2020-11-26T07:52:52Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -56,7 +59,7 @@\n \n     DefaultCookieJar(CookiePolicy cookiePolicy) {\n         this.cookiePolicy = cookiePolicy;\n-        store = new HashMap<>();\n+        store = new Object2LongOpenHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3NDg2Nw=="}, "originalCommit": {"oid": "0ca3579d39300b7d483259ba78710a9da67c2fab"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODk5OTEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNTowMjozMFrOH6L8qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNTowMjozMFrOH6L8qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3NTIwOQ==", "bodyText": "Could use Object2LongMap.getOrDefault().", "url": "https://github.com/line/armeria/pull/3118#discussion_r530775209", "createdAt": "2020-11-26T05:02:30Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -109,16 +118,19 @@ public void set(URI uri, Iterable<? extends Cookie> cookies, long createdTimeMil\n     }\n \n     @Override\n-    public boolean isExpired(Cookie cookie) {\n-        return isExpired(cookie, System.currentTimeMillis());\n-    }\n-\n-    @Override\n-    public boolean isExpired(Cookie cookie, long currentTimeMillis) {\n-        if (!store.containsKey(cookie)) {\n-            throw new IllegalArgumentException(\"cookie not found.\");\n+    public CookieState state(Cookie cookie, long currentTimeMillis) {\n+        requireNonNull(cookie, \"cookie\");\n+        lock.lock();\n+        try {\n+            final Long createdTimeMillis = store.get(cookie);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca3579d39300b7d483259ba78710a9da67c2fab"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTAxMjAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNToxMDoxOFrOH6MDrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNToxMDoxOFrOH6MDrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3NzAwNw==", "bodyText": "Can we introduce an optimized version of state() here?\n\nWe could avoid lock re-entrance\nWe don't really care about distinguishing whether the cookie exists or not.", "url": "https://github.com/line/armeria/pull/3118#discussion_r530777007", "createdAt": "2020-11-26T05:10:18Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -177,7 +189,7 @@ private void filterGet(Set<Cookie> cookies, String host, String path, boolean se\n                         it.remove();\n                         break;\n                     }\n-                    if (isExpired(cookie)) {\n+                    if (state(cookie) == CookieState.EXPIRED) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca3579d39300b7d483259ba78710a9da67c2fab"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTcwMjIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOToxOToyOVrOH6SahQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOToxOToyOVrOH6SahQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg4MTE1Nw==", "bodyText": "a {@link Cookie} in a {@link CookieJar}. ?", "url": "https://github.com/line/armeria/pull/3118#discussion_r530881157", "createdAt": "2020-11-26T09:19:29Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/CookieState.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import com.linecorp.armeria.common.Cookie;\n+\n+/**\n+ * The possible states of a cookie in the jar.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40042e117ee2fd8168037c8610c91b7dc299bb51"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTcwODI2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOToyMDo1NVrOH6SeRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDozMDozOFrOH6VSrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg4MjExNw==", "bodyText": "Should we increment by 1 if (currentTimeMillis - createdTimeMillis) % 1000 != 0? \ud83e\udd14", "url": "https://github.com/line/armeria/pull/3118#discussion_r530882117", "createdAt": "2020-11-26T09:20:55Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -122,28 +123,18 @@ public CookieState state(Cookie cookie, long currentTimeMillis) {\n         requireNonNull(cookie, \"cookie\");\n         lock.lock();\n         try {\n-            final Long createdTimeMillis = store.get(cookie);\n-            if (createdTimeMillis == null) {\n+            final long createdTimeMillis = store.getOrDefault(cookie, Long.MIN_VALUE);\n+            if (createdTimeMillis == Long.MIN_VALUE) {\n                 return CookieState.NON_EXISTENT;\n             }\n-            return isExpired(cookie, createdTimeMillis, currentTimeMillis) ?\n+            final long timePassed = TimeUnit.MILLISECONDS.toSeconds(currentTimeMillis - createdTimeMillis);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40042e117ee2fd8168037c8610c91b7dc299bb51"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg4NTEzNg==", "bodyText": "Alternatively, we could convert maxAge to milliseconds instead of converting others to seconds.", "url": "https://github.com/line/armeria/pull/3118#discussion_r530885136", "createdAt": "2020-11-26T09:25:29Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -122,28 +123,18 @@ public CookieState state(Cookie cookie, long currentTimeMillis) {\n         requireNonNull(cookie, \"cookie\");\n         lock.lock();\n         try {\n-            final Long createdTimeMillis = store.get(cookie);\n-            if (createdTimeMillis == null) {\n+            final long createdTimeMillis = store.getOrDefault(cookie, Long.MIN_VALUE);\n+            if (createdTimeMillis == Long.MIN_VALUE) {\n                 return CookieState.NON_EXISTENT;\n             }\n-            return isExpired(cookie, createdTimeMillis, currentTimeMillis) ?\n+            final long timePassed = TimeUnit.MILLISECONDS.toSeconds(currentTimeMillis - createdTimeMillis);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg4MjExNw=="}, "originalCommit": {"oid": "40042e117ee2fd8168037c8610c91b7dc299bb51"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkyODMwMQ==", "bodyText": "Right, to milliseconds is better \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3118#discussion_r530928301", "createdAt": "2020-11-26T10:30:38Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -122,28 +123,18 @@ public CookieState state(Cookie cookie, long currentTimeMillis) {\n         requireNonNull(cookie, \"cookie\");\n         lock.lock();\n         try {\n-            final Long createdTimeMillis = store.get(cookie);\n-            if (createdTimeMillis == null) {\n+            final long createdTimeMillis = store.getOrDefault(cookie, Long.MIN_VALUE);\n+            if (createdTimeMillis == Long.MIN_VALUE) {\n                 return CookieState.NON_EXISTENT;\n             }\n-            return isExpired(cookie, createdTimeMillis, currentTimeMillis) ?\n+            final long timePassed = TimeUnit.MILLISECONDS.toSeconds(currentTimeMillis - createdTimeMillis);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg4MjExNw=="}, "originalCommit": {"oid": "40042e117ee2fd8168037c8610c91b7dc299bb51"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTcxMTgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOToyMTo0NlrOH6Sgkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOToyMTo0NlrOH6Sgkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg4MjcwNw==", "bodyText": "Ditto - maybe better extracting into a new private method.", "url": "https://github.com/line/armeria/pull/3118#discussion_r530882707", "createdAt": "2020-11-26T09:21:46Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -179,19 +170,23 @@ Cookie ensureDomainAndPath(Cookie cookie, URI uri) {\n     }\n \n     private void filterGet(Set<Cookie> cookies, String host, String path, boolean secure) {\n+        final long currentTimeMillis = System.currentTimeMillis();\n         for (Map.Entry<String, Set<Cookie>> entry : filter.entrySet()) {\n             if (domainMatches(entry.getKey(), host)) {\n                 final Iterator<Cookie> it = entry.getValue().iterator();\n                 while (it.hasNext()) {\n                     final Cookie cookie = it.next();\n-                    if (!store.containsKey(cookie)) {\n+                    final long createdTimeMillis = store.getOrDefault(cookie, Long.MIN_VALUE);\n+                    if (createdTimeMillis == Long.MIN_VALUE) {\n                         // the cookie has been removed from the main store so remove it from filter also\n                         it.remove();\n                         break;\n                     }\n-                    if (state(cookie) == CookieState.EXPIRED) {\n+                    final long timePassed =\n+                            TimeUnit.MILLISECONDS.toSeconds(currentTimeMillis - createdTimeMillis);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40042e117ee2fd8168037c8610c91b7dc299bb51"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTcxMzc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOToyMjoxOFrOH6ShzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOToyMjoxOFrOH6ShzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg4MzAyMA==", "bodyText": "Than, we can use >.", "url": "https://github.com/line/armeria/pull/3118#discussion_r530883020", "createdAt": "2020-11-26T09:22:18Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -122,28 +123,18 @@ public CookieState state(Cookie cookie, long currentTimeMillis) {\n         requireNonNull(cookie, \"cookie\");\n         lock.lock();\n         try {\n-            final Long createdTimeMillis = store.get(cookie);\n-            if (createdTimeMillis == null) {\n+            final long createdTimeMillis = store.getOrDefault(cookie, Long.MIN_VALUE);\n+            if (createdTimeMillis == Long.MIN_VALUE) {\n                 return CookieState.NON_EXISTENT;\n             }\n-            return isExpired(cookie, createdTimeMillis, currentTimeMillis) ?\n+            final long timePassed = TimeUnit.MILLISECONDS.toSeconds(currentTimeMillis - createdTimeMillis);\n+            return cookie.maxAge() != Cookie.UNDEFINED_MAX_AGE && timePassed >= cookie.maxAge() ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40042e117ee2fd8168037c8610c91b7dc299bb51"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTcxNTU2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/client/cookie/DefaultCookieJarTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOToyMjo0NlrOH6SjAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOToyMjo0NlrOH6SjAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg4MzMyOA==", "bodyText": "How about adding an assertion for the off-by-one case I mentioned above? e.g.\n\nMust be considered unexpired if timePassedMillis == maxAgeMillis == 1000\nMust be considered expired if timePassedMillis == 1001 and maxAgeMillis = 1000", "url": "https://github.com/line/armeria/pull/3118#discussion_r530883328", "createdAt": "2020-11-26T09:22:46Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/client/cookie/DefaultCookieJarTest.java", "diffHunk": "@@ -189,15 +189,15 @@ void cookieState() {\n         final Cookie cookie = Cookie.of(\"name\", \"value\");\n         final Cookie expectCookie = Cookie.builder(\"name\", \"value\").domain(\"foo.com\").path(\"/\").build();\n \n-        assertThat(cookieJar.state(cookie)).isEqualTo(CookieJar.CookieState.NON_EXISTENT);\n+        assertThat(cookieJar.state(cookie)).isEqualTo(CookieState.NON_EXISTENT);\n \n         cookieJar.set(foo, Cookies.of(cookie));\n-        assertThat(cookieJar.state(expectCookie)).isEqualTo(CookieJar.CookieState.EXISTENT);\n+        assertThat(cookieJar.state(expectCookie)).isEqualTo(CookieState.EXISTENT);\n \n         final Cookie expireCookie = expectCookie.toBuilder().maxAge(1).build();\n         cookieJar.set(foo, Cookies.of(cookie.toBuilder().maxAge(1).build()));\n-        assertThat(cookieJar.state(expireCookie)).isEqualTo(CookieJar.CookieState.EXISTENT);\n+        assertThat(cookieJar.state(expireCookie)).isEqualTo(CookieState.EXISTENT);\n         assertThat(cookieJar.state(expireCookie, System.currentTimeMillis() + 1000))\n-                .isEqualTo(CookieJar.CookieState.EXPIRED);\n+                .isEqualTo(CookieState.EXPIRED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40042e117ee2fd8168037c8610c91b7dc299bb51"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMjc1MDU4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwMjoxNjoyNlrOH6u-Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwMjoxNjoyNlrOH6u-Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM0OTAzMA==", "bodyText": "Could be static?", "url": "https://github.com/line/armeria/pull/3118#discussion_r531349030", "createdAt": "2020-11-27T02:16:26Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.CookieBuilder;\n+import com.linecorp.armeria.common.Cookies;\n+import com.linecorp.armeria.common.Scheme;\n+import com.linecorp.armeria.common.SessionProtocol;\n+\n+import io.netty.util.NetUtil;\n+import it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation.\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private final Object2LongOpenHashMap<Cookie> store;\n+    /**\n+     * Used to find cookies for a host that matches a domain. For example, if there is a domain example.com,\n+     * host example.com or foo.example.com will match all cookies in that entry.\n+     */\n+    private final Map<String, Set<Cookie>> filter;\n+    private final CookiePolicy cookiePolicy;\n+    private final ReentrantLock lock;\n+\n+    DefaultCookieJar() {\n+        this(CookiePolicy.acceptOriginOnly());\n+    }\n+\n+    DefaultCookieJar(CookiePolicy cookiePolicy) {\n+        this.cookiePolicy = cookiePolicy;\n+        store = new Object2LongOpenHashMap<>();\n+        filter = new HashMap<>();\n+        lock = new ReentrantLock();\n+    }\n+\n+    @Override\n+    public Cookies get(URI uri) {\n+        requireNonNull(uri, \"uri\");\n+        if (store.isEmpty()) {\n+            return Cookies.of();\n+        }\n+        final String host = uri.getHost();\n+        final String path = uri.getPath().isEmpty() ? \"/\" : uri.getPath();\n+        final boolean secure = isSecure(uri.getScheme());\n+        final Set<Cookie> cookies = new HashSet<>();\n+        lock.lock();\n+        try {\n+            filterGet(cookies, host, path, secure);\n+        } finally {\n+            lock.unlock();\n+        }\n+        return Cookies.of(cookies);\n+    }\n+\n+    private boolean isSecure(String scheme) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7faca472227b40126d340197c69daf5bf71e0c"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMjc1NTU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwMjoxOTo1NVrOH6vBDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwMjoxOTo1NVrOH6vBDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM0OTc3NA==", "bodyText": "Could we reduce the lock block? I think we can apply it for store.getOrDefault(cookie, Long.MIN_VALUE)", "url": "https://github.com/line/armeria/pull/3118#discussion_r531349774", "createdAt": "2020-11-27T02:19:55Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.cookie;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.common.Cookie;\n+import com.linecorp.armeria.common.CookieBuilder;\n+import com.linecorp.armeria.common.Cookies;\n+import com.linecorp.armeria.common.Scheme;\n+import com.linecorp.armeria.common.SessionProtocol;\n+\n+import io.netty.util.NetUtil;\n+import it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap;\n+\n+/**\n+ * A default in-memory {@link CookieJar} implementation.\n+ */\n+final class DefaultCookieJar implements CookieJar {\n+\n+    private final Object2LongOpenHashMap<Cookie> store;\n+    /**\n+     * Used to find cookies for a host that matches a domain. For example, if there is a domain example.com,\n+     * host example.com or foo.example.com will match all cookies in that entry.\n+     */\n+    private final Map<String, Set<Cookie>> filter;\n+    private final CookiePolicy cookiePolicy;\n+    private final ReentrantLock lock;\n+\n+    DefaultCookieJar() {\n+        this(CookiePolicy.acceptOriginOnly());\n+    }\n+\n+    DefaultCookieJar(CookiePolicy cookiePolicy) {\n+        this.cookiePolicy = cookiePolicy;\n+        store = new Object2LongOpenHashMap<>();\n+        filter = new HashMap<>();\n+        lock = new ReentrantLock();\n+    }\n+\n+    @Override\n+    public Cookies get(URI uri) {\n+        requireNonNull(uri, \"uri\");\n+        if (store.isEmpty()) {\n+            return Cookies.of();\n+        }\n+        final String host = uri.getHost();\n+        final String path = uri.getPath().isEmpty() ? \"/\" : uri.getPath();\n+        final boolean secure = isSecure(uri.getScheme());\n+        final Set<Cookie> cookies = new HashSet<>();\n+        lock.lock();\n+        try {\n+            filterGet(cookies, host, path, secure);\n+        } finally {\n+            lock.unlock();\n+        }\n+        return Cookies.of(cookies);\n+    }\n+\n+    private boolean isSecure(String scheme) {\n+        final SessionProtocol parsedProtocol;\n+        if (scheme.indexOf('+') >= 0) {\n+            final Scheme parsedScheme = Scheme.tryParse(scheme);\n+            parsedProtocol = parsedScheme != null ? parsedScheme.sessionProtocol() : null;\n+        } else {\n+            parsedProtocol = SessionProtocol.find(scheme);\n+        }\n+        return parsedProtocol != null && parsedProtocol.isTls();\n+    }\n+\n+    @Override\n+    public void set(URI uri, Iterable<? extends Cookie> cookies, long createdTimeMillis) {\n+        requireNonNull(uri, \"uri\");\n+        requireNonNull(cookies, \"cookies\");\n+        lock.lock();\n+        try {\n+            for (Cookie cookie : cookies) {\n+                cookie = ensureDomainAndPath(cookie, uri);\n+                // remove similar cookie if present\n+                store.removeLong(cookie);\n+                if ((cookie.maxAge() == Cookie.UNDEFINED_MAX_AGE || cookie.maxAge() > 0) &&\n+                    cookiePolicy.accept(uri, cookie)) {\n+                    store.put(cookie, createdTimeMillis);\n+                    final Set<Cookie> cookieSet = filter.computeIfAbsent(cookie.domain(), s -> new HashSet<>());\n+                    // remove similar cookie if present\n+                    cookieSet.remove(cookie);\n+                    cookieSet.add(cookie);\n+                }\n+            }\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    @Override\n+    public CookieState state(Cookie cookie, long currentTimeMillis) {\n+        requireNonNull(cookie, \"cookie\");\n+        lock.lock();\n+        try {\n+            final long createdTimeMillis = store.getOrDefault(cookie, Long.MIN_VALUE);\n+            if (createdTimeMillis == Long.MIN_VALUE) {\n+                return CookieState.NON_EXISTENT;\n+            }\n+            return isExpired(cookie, createdTimeMillis, currentTimeMillis) ?\n+                   CookieState.EXPIRED : CookieState.EXISTENT;\n+        } finally {\n+            lock.unlock();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7faca472227b40126d340197c69daf5bf71e0c"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMjc2Nzc5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/Cookie.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwMjoyODowN1rOH6vIMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNTo0MDowOVrOH6xnow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM1MTYwMA==", "bodyText": "Don't we need to make it default to keep binary compatibility just in case? \ud83e\uddd0 (Maybe no users implement this interface)", "url": "https://github.com/line/armeria/pull/3118#discussion_r531351600", "createdAt": "2020-11-27T02:28:07Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/Cookie.java", "diffHunk": "@@ -473,6 +473,13 @@ static Cookies fromSetCookieHeaders(boolean strict, Collection<String> setCookie\n     @Nullable\n     String sameSite();\n \n+    /**\n+     * Returns whether this {@link Cookie} should only match its original host in domain matching. If this\n+     * returns {@code true}, should {@link #domain()} returns a non-null value, it's going to be the original\n+     * request host.\n+     */\n+    boolean isHostOnly();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7faca472227b40126d340197c69daf5bf71e0c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM2NjEwOQ==", "bodyText": "How can it be made default \ud83e\udd14 ? The host only flag is in the implementation/", "url": "https://github.com/line/armeria/pull/3118#discussion_r531366109", "createdAt": "2020-11-27T03:34:14Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/common/Cookie.java", "diffHunk": "@@ -473,6 +473,13 @@ static Cookies fromSetCookieHeaders(boolean strict, Collection<String> setCookie\n     @Nullable\n     String sameSite();\n \n+    /**\n+     * Returns whether this {@link Cookie} should only match its original host in domain matching. If this\n+     * returns {@code true}, should {@link #domain()} returns a non-null value, it's going to be the original\n+     * request host.\n+     */\n+    boolean isHostOnly();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM1MTYwMA=="}, "originalCommit": {"oid": "2c7faca472227b40126d340197c69daf5bf71e0c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM2NzQ4MQ==", "bodyText": "Yeah. I thought we can make it return false because the default value of hostOnly in  CookieBuilder is false.\nBut it is not a good decision. On second thought, It'd better leave it as it is(abstract method).\nAny thoughts @trustin, @minwoox?", "url": "https://github.com/line/armeria/pull/3118#discussion_r531367481", "createdAt": "2020-11-27T03:40:52Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/Cookie.java", "diffHunk": "@@ -473,6 +473,13 @@ static Cookies fromSetCookieHeaders(boolean strict, Collection<String> setCookie\n     @Nullable\n     String sameSite();\n \n+    /**\n+     * Returns whether this {@link Cookie} should only match its original host in domain matching. If this\n+     * returns {@code true}, should {@link #domain()} returns a non-null value, it's going to be the original\n+     * request host.\n+     */\n+    boolean isHostOnly();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM1MTYwMA=="}, "originalCommit": {"oid": "2c7faca472227b40126d340197c69daf5bf71e0c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM4NjA5Nw==", "bodyText": "I'll push other changes first then", "url": "https://github.com/line/armeria/pull/3118#discussion_r531386097", "createdAt": "2020-11-27T05:12:40Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/common/Cookie.java", "diffHunk": "@@ -473,6 +473,13 @@ static Cookies fromSetCookieHeaders(boolean strict, Collection<String> setCookie\n     @Nullable\n     String sameSite();\n \n+    /**\n+     * Returns whether this {@link Cookie} should only match its original host in domain matching. If this\n+     * returns {@code true}, should {@link #domain()} returns a non-null value, it's going to be the original\n+     * request host.\n+     */\n+    boolean isHostOnly();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM1MTYwMA=="}, "originalCommit": {"oid": "2c7faca472227b40126d340197c69daf5bf71e0c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM5MjQxOQ==", "bodyText": "I guess it's fine because we update the minor version. \ud83e\udd14", "url": "https://github.com/line/armeria/pull/3118#discussion_r531392419", "createdAt": "2020-11-27T05:40:09Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/Cookie.java", "diffHunk": "@@ -473,6 +473,13 @@ static Cookies fromSetCookieHeaders(boolean strict, Collection<String> setCookie\n     @Nullable\n     String sameSite();\n \n+    /**\n+     * Returns whether this {@link Cookie} should only match its original host in domain matching. If this\n+     * returns {@code true}, should {@link #domain()} returns a non-null value, it's going to be the original\n+     * request host.\n+     */\n+    boolean isHostOnly();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM1MTYwMA=="}, "originalCommit": {"oid": "2c7faca472227b40126d340197c69daf5bf71e0c"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1968, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}