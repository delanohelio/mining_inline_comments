{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NDM5MTQ2", "number": 2752, "reviewThreads": {"totalCount": 47, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwNTozMzoyM1rOEBKBkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzo0NDo1MFrOEMXtWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjQ4Mjc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwNTozMzoyM1rOGc20yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMjozNjo0MVrOGc9YjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxMTU2MA==", "bodyText": "This can be up for debate.\nWhile users may expect DefaultProxySelector will be used out of the box, it's select implementation isn't very efficient (even for DIRECT cases) affecting normal client calls.\nhttps://github.com/openjdk/jdk/blob/6212aea580fd018b9b7edecad9821c8208d2a12e/src/java.base/share/classes/sun/net/spi/DefaultProxySelector.java#L153-L326", "url": "https://github.com/line/armeria/pull/2752#discussion_r432911560", "createdAt": "2020-05-31T05:33:23Z", "author": {"login": "jrhee17"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -578,6 +592,10 @@ private ClientFactoryOptions buildOptions() {\n             return ClientFactoryOption.ADDRESS_RESOLVER_GROUP_FACTORY.newValue(addressResolverGroupFactory);\n         });\n \n+        final ProxyConfigSelector selector = WrappingProxyConfigSelector.of(ProxySelector.getDefault());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fcdc87d25a837525315ba59aa338aaec29601ba"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxOTAyMA==", "bodyText": "That's a good question. It seems like JDK's default selector may not work with Armeria, either, because it doesn't understand schemes like h2c. Let's use DIRECT by default until we have a proper ProxyConfigSelector implementation.", "url": "https://github.com/line/armeria/pull/2752#discussion_r433019020", "createdAt": "2020-06-01T02:36:41Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -578,6 +592,10 @@ private ClientFactoryOptions buildOptions() {\n             return ClientFactoryOption.ADDRESS_RESOLVER_GROUP_FACTORY.newValue(addressResolverGroupFactory);\n         });\n \n+        final ProxyConfigSelector selector = WrappingProxyConfigSelector.of(ProxySelector.getDefault());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxMTU2MA=="}, "originalCommit": {"oid": "5fcdc87d25a837525315ba59aa338aaec29601ba"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzI1MjgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMjoyODoyMFrOGc9TfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMjoyODoyMFrOGc9TfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxNzcyNA==", "bodyText": "Could we also have an overloaded version that accepts ProxySelector, if WrappingProxyConfigSelector works with any custom ProxySelector implementations?\nHow about renaming this method to proxyConfig()? Because:\n\nIt's shorter.\nIt seems to me that there won't be any conflict between any proxyConfig() methods we may add in the future.", "url": "https://github.com/line/armeria/pull/2752#discussion_r433017724", "createdAt": "2020-06-01T02:28:20Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -512,7 +516,17 @@ public ClientFactoryBuilder meterRegistry(MeterRegistry meterRegistry) {\n      * The {@link ProxyConfig} which contains proxy related configuration.\n      */\n     public ClientFactoryBuilder proxyConfig(ProxyConfig proxyConfig) {\n-        option(ClientFactoryOption.PROXY_CONFIG, proxyConfig);\n+        requireNonNull(proxyConfig, \"proxyConfig\");\n+        option(ClientFactoryOption.PROXY_CONFIG_SELECTOR, StaticProxyConfigSelector.of(proxyConfig));\n+        return this;\n+    }\n+\n+    /**\n+     * The {@link ProxyConfigSelector} which contains proxy related configuration.\n+     */\n+    public ClientFactoryBuilder proxyConfigSelector(ProxyConfigSelector proxyConfigSelector) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fcdc87d25a837525315ba59aa338aaec29601ba"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzI1NjI2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMjozMjowMVrOGc9VcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMjozMjowMVrOGc9VcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxODIyNA==", "bodyText": "selector could be created inside this lambda expression to avoid unnecessary instantiation of WrappingProxyConfigSelector.", "url": "https://github.com/line/armeria/pull/2752#discussion_r433018224", "createdAt": "2020-06-01T02:32:01Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -578,6 +592,10 @@ private ClientFactoryOptions buildOptions() {\n             return ClientFactoryOption.ADDRESS_RESOLVER_GROUP_FACTORY.newValue(addressResolverGroupFactory);\n         });\n \n+        final ProxyConfigSelector selector = WrappingProxyConfigSelector.of(ProxySelector.getDefault());\n+        options.computeIfAbsent(ClientFactoryOption.PROXY_CONFIG_SELECTOR, k ->\n+                ClientFactoryOption.PROXY_CONFIG_SELECTOR.newValue(selector));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fcdc87d25a837525315ba59aa338aaec29601ba"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzI2NTc2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMjo0MToxMlrOGc9bSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMjo0MToxMlrOGc9bSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxOTcyMw==", "bodyText": "reqUri could come before the promise. (because it looks more organized? promise/future usually comes at the end (or the first) because it's a sort of an output parameter.)", "url": "https://github.com/line/armeria/pull/2752#discussion_r433019723", "createdAt": "2020-06-01T02:41:12Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "diffHunk": "@@ -373,14 +386,26 @@ private void connect(SessionProtocol desiredProtocol, PoolKey key, ChannelAcquis\n      * A low-level operation that triggers a new connection attempt. Used only by:\n      * <ul>\n      *   <li>{@link #connect(SessionProtocol, PoolKey, ChannelAcquisitionFuture,\n-     *       ClientConnectionTimingsBuilder)} - The pool has been exhausted.</li>\n+     *       ClientConnectionTimingsBuilder, URI)} - The pool has been exhausted.</li>\n      *   <li>{@link HttpSessionHandler} - HTTP/2 upgrade has failed.</li>\n      * </ul>\n      */\n     void connect(SocketAddress remoteAddress, SessionProtocol desiredProtocol,\n-                 Promise<Channel> sessionPromise) {\n+                 Promise<Channel> sessionPromise, URI reqUri) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fcdc87d25a837525315ba59aa338aaec29601ba"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzI2NjEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMjo0MTozM1rOGc9beg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMjo0MTozM1rOGc9beg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxOTc3MA==", "bodyText": "; falling back to DIRECT", "url": "https://github.com/line/armeria/pull/2752#discussion_r433019770", "createdAt": "2020-06-01T02:41:33Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "diffHunk": "@@ -373,14 +386,26 @@ private void connect(SessionProtocol desiredProtocol, PoolKey key, ChannelAcquis\n      * A low-level operation that triggers a new connection attempt. Used only by:\n      * <ul>\n      *   <li>{@link #connect(SessionProtocol, PoolKey, ChannelAcquisitionFuture,\n-     *       ClientConnectionTimingsBuilder)} - The pool has been exhausted.</li>\n+     *       ClientConnectionTimingsBuilder, URI)} - The pool has been exhausted.</li>\n      *   <li>{@link HttpSessionHandler} - HTTP/2 upgrade has failed.</li>\n      * </ul>\n      */\n     void connect(SocketAddress remoteAddress, SessionProtocol desiredProtocol,\n-                 Promise<Channel> sessionPromise) {\n+                 Promise<Channel> sessionPromise, URI reqUri) {\n+\n         final Bootstrap bootstrap = getBootstrap(desiredProtocol);\n-        final ChannelFuture connectFuture = bootstrap.connect(remoteAddress);\n+        ProxyConfig proxyConfig;\n+        try {\n+            proxyConfig = proxyConfigSelector.select(reqUri);\n+        } catch (Throwable t) {\n+            logger.warn(\"Failed to select ProxyConfig for <{}> \", reqUri, t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fcdc87d25a837525315ba59aa338aaec29601ba"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzI2OTA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/WrappingProxyConfigSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMjo0NDozOVrOGc9dUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMjo0NDozOVrOGc9dUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMDI0MA==", "bodyText": "Could be hidden from the public API and add a factory method to ProxyConfigSelector.", "url": "https://github.com/line/armeria/pull/2752#discussion_r433020240", "createdAt": "2020-06-01T02:44:39Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/WrappingProxyConfigSelector.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.ProxySelector;\n+import java.net.SocketAddress;\n+import java.net.URI;\n+import java.util.List;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * TODO: add javadocs.\n+ */\n+public final class WrappingProxyConfigSelector implements ProxyConfigSelector {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fcdc87d25a837525315ba59aa338aaec29601ba"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzI3NTMwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMjo1MDoxNlrOGc9g7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMjo1MDoxNlrOGc9g7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMTE2Nw==", "bodyText": "How about extracting into a method rather than into a field of function?", "url": "https://github.com/line/armeria/pull/2752#discussion_r433021167", "createdAt": "2020-06-01T02:50:16Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "diffHunk": "@@ -110,17 +118,17 @@\n \n         final Bootstrap baseBootstrap = clientFactory.newBootstrap();\n         baseBootstrap.group(eventLoop);\n+        sslContextSupplier = desiredProtocol ->\n+                desiredProtocol == SessionProtocol.H1 || desiredProtocol == SessionProtocol.H1C ?\n+                sslCtxHttp1Only : sslCtxHttp1Or2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fcdc87d25a837525315ba59aa338aaec29601ba"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzI4MDE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMjo1NDoyOFrOGc9jzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwNjoyOTo0MVrOGgHfQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMTkwMw==", "bodyText": "How about just storing ProxyConfig, so that we don't need to evaluate the request URI every time we retry a new connection?\nLooks like we have to use ProxyConfig as an additional field of PoolKey?", "url": "https://github.com/line/armeria/pull/2752#discussion_r433021903", "createdAt": "2020-06-01T02:54:28Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "diffHunk": "@@ -74,6 +77,8 @@\n     private static final Logger logger = LoggerFactory.getLogger(HttpChannelPool.class);\n     private static final Channel[] EMPTY_CHANNELS = new Channel[0];\n \n+    static final AttributeKey<URI> REQUEST_URI_KEY = AttributeKey.valueOf(URI.class, \"REQ_URI\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fcdc87d25a837525315ba59aa338aaec29601ba"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMzMDMwNw==", "bodyText": "we don't need to evaluate the request URI every time we retry a new connection?\n\nIn retrospect, I agree and think it makes more sense to evaluate for every request (not only for each connection attempt)\nThanks for pointing this out \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/2752#discussion_r436330307", "createdAt": "2020-06-07T06:29:41Z", "author": {"login": "jrhee17"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "diffHunk": "@@ -74,6 +77,8 @@\n     private static final Logger logger = LoggerFactory.getLogger(HttpChannelPool.class);\n     private static final Channel[] EMPTY_CHANNELS = new Channel[0];\n \n+    static final AttributeKey<URI> REQUEST_URI_KEY = AttributeKey.valueOf(URI.class, \"REQ_URI\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMTkwMw=="}, "originalCommit": {"oid": "5fcdc87d25a837525315ba59aa338aaec29601ba"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODgzNTAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ProxyContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMzowODo0M1rOGgOEFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMzowODo0M1rOGgOEFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzODAzNw==", "bodyText": "Could be final?", "url": "https://github.com/line/armeria/pull/2752#discussion_r436438037", "createdAt": "2020-06-08T03:08:43Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/ProxyContext.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import java.net.URI;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import com.linecorp.armeria.client.proxy.ProxyConfig;\n+\n+class ProxyContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eea39f080ce52128a9fcd9e163bca9e4d19963be"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODg0NjMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMzoxOToyMVrOGgOKnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMzoxOToyMVrOGgOKnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzOTcwOA==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns the proxy address. This value is {@code null} only for DIRECT proxies.\n          \n          \n            \n                 * Returns the proxy address. This value is {@code null} only for {@link ProxyType.DIRECT} proxies.", "url": "https://github.com/line/armeria/pull/2752#discussion_r436439708", "createdAt": "2020-06-08T03:19:21Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfig.java", "diffHunk": "@@ -124,6 +134,12 @@ public static ProxyConfig direct() {\n      */\n     public abstract ProxyType proxyType();\n \n+    /**\n+     * Returns the proxy address. This value is {@code null} only for DIRECT proxies.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eea39f080ce52128a9fcd9e163bca9e4d19963be"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODg3ODAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/WrappingProxyConfigSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMzo0Nzo0MlrOGgOc_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMzo0Nzo0MlrOGgOc_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ0NDQxNQ==", "bodyText": "Could be private?", "url": "https://github.com/line/armeria/pull/2752#discussion_r436444415", "createdAt": "2020-06-08T03:47:42Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/WrappingProxyConfigSelector.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.ProxySelector;\n+import java.net.SocketAddress;\n+import java.net.URI;\n+import java.util.List;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A simple class which wraps a {@link ProxySelector}. This class may have some limitations, most notably:\n+\n+ * 1. Some incompatibilities when used with sun's {@code DefaultProxySelector}\n+ *     - some fields like socksProxyVersion aren't used\n+ *     - this class doesn't attempt to resolve scheme format differences.\n+ * 2. Selecting multiple {@link Proxy} isn't supported.\n+ */\n+final class WrappingProxyConfigSelector implements ProxyConfigSelector {\n+    private static final Logger logger = LoggerFactory.getLogger(WrappingProxyConfigSelector.class);\n+\n+    private static InetSocketAddress resolve(InetSocketAddress inetSocketAddress) {\n+        if (!inetSocketAddress.isUnresolved()) {\n+            return inetSocketAddress;\n+        }\n+        return new InetSocketAddress(inetSocketAddress.getHostString(), inetSocketAddress.getPort());\n+    }\n+\n+    private static ProxyConfig toProxyConfig(@Nullable Proxy proxy) {\n+        if (proxy == null || proxy.address() == null) {\n+            return ProxyConfig.direct();\n+        }\n+        if (!(proxy.address() instanceof InetSocketAddress)) {\n+            logger.warn(\"Invalid proxy address for <{}>.\", proxy);\n+            return ProxyConfig.direct();\n+        }\n+\n+        final InetSocketAddress proxyAddress = (InetSocketAddress) proxy.address();\n+        switch (proxy.type()) {\n+            case HTTP:\n+                return ProxyConfig.connect(resolve(proxyAddress));\n+            case SOCKS:\n+                // NOTE: we may consider using {@code sun.net.SocksProxy} to determine the socksProxyVersion\n+                return ProxyConfig.socks5(resolve(proxyAddress));\n+            case DIRECT:\n+            default:\n+                return ProxyConfig.direct();\n+        }\n+    }\n+\n+    static WrappingProxyConfigSelector of(ProxySelector proxySelector) {\n+        return new WrappingProxyConfigSelector(proxySelector);\n+    }\n+\n+    final ProxySelector proxySelector;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eea39f080ce52128a9fcd9e163bca9e4d19963be"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODg4ODAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/WrappingProxyConfigSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMzo1Njo0MFrOGgOi8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMzo1Njo0MFrOGgOi8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ0NTkzNw==", "bodyText": "Check not-null for the arguments?", "url": "https://github.com/line/armeria/pull/2752#discussion_r436445937", "createdAt": "2020-06-08T03:56:40Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/WrappingProxyConfigSelector.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.ProxySelector;\n+import java.net.SocketAddress;\n+import java.net.URI;\n+import java.util.List;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A simple class which wraps a {@link ProxySelector}. This class may have some limitations, most notably:\n+\n+ * 1. Some incompatibilities when used with sun's {@code DefaultProxySelector}\n+ *     - some fields like socksProxyVersion aren't used\n+ *     - this class doesn't attempt to resolve scheme format differences.\n+ * 2. Selecting multiple {@link Proxy} isn't supported.\n+ */\n+final class WrappingProxyConfigSelector implements ProxyConfigSelector {\n+    private static final Logger logger = LoggerFactory.getLogger(WrappingProxyConfigSelector.class);\n+\n+    private static InetSocketAddress resolve(InetSocketAddress inetSocketAddress) {\n+        if (!inetSocketAddress.isUnresolved()) {\n+            return inetSocketAddress;\n+        }\n+        return new InetSocketAddress(inetSocketAddress.getHostString(), inetSocketAddress.getPort());\n+    }\n+\n+    private static ProxyConfig toProxyConfig(@Nullable Proxy proxy) {\n+        if (proxy == null || proxy.address() == null) {\n+            return ProxyConfig.direct();\n+        }\n+        if (!(proxy.address() instanceof InetSocketAddress)) {\n+            logger.warn(\"Invalid proxy address for <{}>.\", proxy);\n+            return ProxyConfig.direct();\n+        }\n+\n+        final InetSocketAddress proxyAddress = (InetSocketAddress) proxy.address();\n+        switch (proxy.type()) {\n+            case HTTP:\n+                return ProxyConfig.connect(resolve(proxyAddress));\n+            case SOCKS:\n+                // NOTE: we may consider using {@code sun.net.SocksProxy} to determine the socksProxyVersion\n+                return ProxyConfig.socks5(resolve(proxyAddress));\n+            case DIRECT:\n+            default:\n+                return ProxyConfig.direct();\n+        }\n+    }\n+\n+    static WrappingProxyConfigSelector of(ProxySelector proxySelector) {\n+        return new WrappingProxyConfigSelector(proxySelector);\n+    }\n+\n+    final ProxySelector proxySelector;\n+\n+    private WrappingProxyConfigSelector(ProxySelector proxySelector) {\n+        this.proxySelector = proxySelector;\n+    }\n+\n+    @Override\n+    public ProxyConfig select(URI uri) {\n+        final List<Proxy> proxies = proxySelector.select(uri);\n+        if (proxies == null || proxies.isEmpty()) {\n+            return ProxyConfig.direct();\n+        }\n+\n+        final Proxy proxy = proxies.get(0);\n+        if (proxies.size() > 1) {\n+            logger.debug(\"Using the first proxy <{}> of <{}>.\", proxy, proxies);\n+        }\n+        return toProxyConfig(proxy);\n+    }\n+\n+    @Override\n+    public void connectFailed(URI uri, SocketAddress sa, Throwable throwable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eea39f080ce52128a9fcd9e163bca9e4d19963be"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODg4ODY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/WrappingProxyConfigSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMzo1NzoxMVrOGgOjTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMzo1NzoxMVrOGgOjTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ0NjAyOQ==", "bodyText": "Check not-null?", "url": "https://github.com/line/armeria/pull/2752#discussion_r436446029", "createdAt": "2020-06-08T03:57:11Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/WrappingProxyConfigSelector.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.ProxySelector;\n+import java.net.SocketAddress;\n+import java.net.URI;\n+import java.util.List;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A simple class which wraps a {@link ProxySelector}. This class may have some limitations, most notably:\n+\n+ * 1. Some incompatibilities when used with sun's {@code DefaultProxySelector}\n+ *     - some fields like socksProxyVersion aren't used\n+ *     - this class doesn't attempt to resolve scheme format differences.\n+ * 2. Selecting multiple {@link Proxy} isn't supported.\n+ */\n+final class WrappingProxyConfigSelector implements ProxyConfigSelector {\n+    private static final Logger logger = LoggerFactory.getLogger(WrappingProxyConfigSelector.class);\n+\n+    private static InetSocketAddress resolve(InetSocketAddress inetSocketAddress) {\n+        if (!inetSocketAddress.isUnresolved()) {\n+            return inetSocketAddress;\n+        }\n+        return new InetSocketAddress(inetSocketAddress.getHostString(), inetSocketAddress.getPort());\n+    }\n+\n+    private static ProxyConfig toProxyConfig(@Nullable Proxy proxy) {\n+        if (proxy == null || proxy.address() == null) {\n+            return ProxyConfig.direct();\n+        }\n+        if (!(proxy.address() instanceof InetSocketAddress)) {\n+            logger.warn(\"Invalid proxy address for <{}>.\", proxy);\n+            return ProxyConfig.direct();\n+        }\n+\n+        final InetSocketAddress proxyAddress = (InetSocketAddress) proxy.address();\n+        switch (proxy.type()) {\n+            case HTTP:\n+                return ProxyConfig.connect(resolve(proxyAddress));\n+            case SOCKS:\n+                // NOTE: we may consider using {@code sun.net.SocksProxy} to determine the socksProxyVersion\n+                return ProxyConfig.socks5(resolve(proxyAddress));\n+            case DIRECT:\n+            default:\n+                return ProxyConfig.direct();\n+        }\n+    }\n+\n+    static WrappingProxyConfigSelector of(ProxySelector proxySelector) {\n+        return new WrappingProxyConfigSelector(proxySelector);\n+    }\n+\n+    final ProxySelector proxySelector;\n+\n+    private WrappingProxyConfigSelector(ProxySelector proxySelector) {\n+        this.proxySelector = proxySelector;\n+    }\n+\n+    @Override\n+    public ProxyConfig select(URI uri) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eea39f080ce52128a9fcd9e163bca9e4d19963be"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODk1OTg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/StaticProxyConfigSelector.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNDo1NzoxMVrOGgPNoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjoyNDo1OVrOGjv4_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1Njg2NA==", "bodyText": "How about making this factory method return a singleton instance for DirectProxyConfig?", "url": "https://github.com/line/armeria/pull/2752#discussion_r436456864", "createdAt": "2020-06-08T04:57:11Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/StaticProxyConfigSelector.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.SocketAddress;\n+import java.net.URI;\n+\n+/**\n+ * A {@link ProxyConfigSelector} which selects a static {@link ProxyConfig}\n+ * for all requests.\n+ */\n+public final class StaticProxyConfigSelector implements ProxyConfigSelector {\n+\n+    /**\n+     * Constructs a {@link ProxyConfigSelector} which selects a static {@link ProxyConfig}\n+     * for all requests.\n+     */\n+    public static StaticProxyConfigSelector of(ProxyConfig proxyConfig) {\n+        return new StaticProxyConfigSelector(proxyConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eea39f080ce52128a9fcd9e163bca9e4d19963be"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1MDgwNQ==", "bodyText": "Actually, what I intended was:\npublic static StaticProxyConfigSelector of(ProxyConfig proxyConfig) {\n   if (proxyConfig == ProxyConfig.config()) {\n       return DIRECT;\n   }\n   return new StaticProxyConfigSelector(proxyConfig);\n}\n\nThen we could make DIRECT private. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2752#discussion_r440050805", "createdAt": "2020-06-15T09:35:18Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/StaticProxyConfigSelector.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.SocketAddress;\n+import java.net.URI;\n+\n+/**\n+ * A {@link ProxyConfigSelector} which selects a static {@link ProxyConfig}\n+ * for all requests.\n+ */\n+public final class StaticProxyConfigSelector implements ProxyConfigSelector {\n+\n+    /**\n+     * Constructs a {@link ProxyConfigSelector} which selects a static {@link ProxyConfig}\n+     * for all requests.\n+     */\n+    public static StaticProxyConfigSelector of(ProxyConfig proxyConfig) {\n+        return new StaticProxyConfigSelector(proxyConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1Njg2NA=="}, "originalCommit": {"oid": "eea39f080ce52128a9fcd9e163bca9e4d19963be"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEzNzk4Mg==", "bodyText": "that was sloppy of me \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2752#discussion_r440137982", "createdAt": "2020-06-15T12:24:59Z", "author": {"login": "jrhee17"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/StaticProxyConfigSelector.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.SocketAddress;\n+import java.net.URI;\n+\n+/**\n+ * A {@link ProxyConfigSelector} which selects a static {@link ProxyConfig}\n+ * for all requests.\n+ */\n+public final class StaticProxyConfigSelector implements ProxyConfigSelector {\n+\n+    /**\n+     * Constructs a {@link ProxyConfigSelector} which selects a static {@link ProxyConfig}\n+     * for all requests.\n+     */\n+    public static StaticProxyConfigSelector of(ProxyConfig proxyConfig) {\n+        return new StaticProxyConfigSelector(proxyConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1Njg2NA=="}, "originalCommit": {"oid": "eea39f080ce52128a9fcd9e163bca9e4d19963be"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTAxNDg1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTozNTo1MlrOGgPu0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjowNzoyNVrOGkYP0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NTM2MQ==", "bodyText": "Question: I thought ProxyContext is working as a request-scoped object, not a channel-scoped object. Because ProxyContext contains a request URI. \ud83e\uddd0", "url": "https://github.com/line/armeria/pull/2752#discussion_r436465361", "createdAt": "2020-06-08T05:35:52Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "diffHunk": "@@ -373,24 +393,43 @@ private void connect(SessionProtocol desiredProtocol, PoolKey key, ChannelAcquis\n      * A low-level operation that triggers a new connection attempt. Used only by:\n      * <ul>\n      *   <li>{@link #connect(SessionProtocol, PoolKey, ChannelAcquisitionFuture,\n-     *       ClientConnectionTimingsBuilder)} - The pool has been exhausted.</li>\n+     *       ClientConnectionTimingsBuilder, ProxyContext)} - The pool has been exhausted.</li>\n      *   <li>{@link HttpSessionHandler} - HTTP/2 upgrade has failed.</li>\n      * </ul>\n      */\n     void connect(SocketAddress remoteAddress, SessionProtocol desiredProtocol,\n-                 Promise<Channel> sessionPromise) {\n+                 ProxyContext proxyContext, Promise<Channel> sessionPromise) {\n+\n         final Bootstrap bootstrap = getBootstrap(desiredProtocol);\n-        final ChannelFuture connectFuture = bootstrap.connect(remoteAddress);\n+\n+        final Channel channel = bootstrap.register().channel();\n+        channel.attr(PROXY_CONTEXT).set(proxyContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eea39f080ce52128a9fcd9e163bca9e4d19963be"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ3ODgzMQ==", "bodyText": "Yeah, ProxyConfig is connection-scoped though.", "url": "https://github.com/line/armeria/pull/2752#discussion_r436478831", "createdAt": "2020-06-08T06:25:01Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "diffHunk": "@@ -373,24 +393,43 @@ private void connect(SessionProtocol desiredProtocol, PoolKey key, ChannelAcquis\n      * A low-level operation that triggers a new connection attempt. Used only by:\n      * <ul>\n      *   <li>{@link #connect(SessionProtocol, PoolKey, ChannelAcquisitionFuture,\n-     *       ClientConnectionTimingsBuilder)} - The pool has been exhausted.</li>\n+     *       ClientConnectionTimingsBuilder, ProxyContext)} - The pool has been exhausted.</li>\n      *   <li>{@link HttpSessionHandler} - HTTP/2 upgrade has failed.</li>\n      * </ul>\n      */\n     void connect(SocketAddress remoteAddress, SessionProtocol desiredProtocol,\n-                 Promise<Channel> sessionPromise) {\n+                 ProxyContext proxyContext, Promise<Channel> sessionPromise) {\n+\n         final Bootstrap bootstrap = getBootstrap(desiredProtocol);\n-        final ChannelFuture connectFuture = bootstrap.connect(remoteAddress);\n+\n+        final Channel channel = bootstrap.register().channel();\n+        channel.attr(PROXY_CONTEXT).set(proxyContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NTM2MQ=="}, "originalCommit": {"oid": "eea39f080ce52128a9fcd9e163bca9e4d19963be"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxNzUwMw==", "bodyText": "\ud83e\udd14\nI agree the current code  may cause confusion.\n(As @ikhoon pointed out, reqUri is set for each connection indicating the URI used when opening the connection. This uri may have no relation with other requests that may use this connection, potentially leading to bugs or unexpected behavior)\nWe can't avoid using URI since ProxySelector API highly depends on it.\nInstead, I've tried to generify reqUri (by only leaving the host/port) and renamed it to connUri (or connectionUri).\nAdditionally, it seemed like PoolKey contains all related information needed (host, port), so I've modified channel.attr to remember PoolKey instead. (and removed ProxyContext)\nLet me know if this looks better than the previous impl.", "url": "https://github.com/line/armeria/pull/2752#discussion_r439717503", "createdAt": "2020-06-13T07:25:10Z", "author": {"login": "jrhee17"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "diffHunk": "@@ -373,24 +393,43 @@ private void connect(SessionProtocol desiredProtocol, PoolKey key, ChannelAcquis\n      * A low-level operation that triggers a new connection attempt. Used only by:\n      * <ul>\n      *   <li>{@link #connect(SessionProtocol, PoolKey, ChannelAcquisitionFuture,\n-     *       ClientConnectionTimingsBuilder)} - The pool has been exhausted.</li>\n+     *       ClientConnectionTimingsBuilder, ProxyContext)} - The pool has been exhausted.</li>\n      *   <li>{@link HttpSessionHandler} - HTTP/2 upgrade has failed.</li>\n      * </ul>\n      */\n     void connect(SocketAddress remoteAddress, SessionProtocol desiredProtocol,\n-                 Promise<Channel> sessionPromise) {\n+                 ProxyContext proxyContext, Promise<Channel> sessionPromise) {\n+\n         final Bootstrap bootstrap = getBootstrap(desiredProtocol);\n-        final ChannelFuture connectFuture = bootstrap.connect(remoteAddress);\n+\n+        final Channel channel = bootstrap.register().channel();\n+        channel.attr(PROXY_CONTEXT).set(proxyContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NTM2MQ=="}, "originalCommit": {"oid": "eea39f080ce52128a9fcd9e163bca9e4d19963be"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEzOTE0Mg==", "bodyText": "Alternatively, we may also choose to revert back to the previous impl., or explore abandoning compatibility with ProxySelector and see how it looks.", "url": "https://github.com/line/armeria/pull/2752#discussion_r440139142", "createdAt": "2020-06-15T12:27:01Z", "author": {"login": "jrhee17"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "diffHunk": "@@ -373,24 +393,43 @@ private void connect(SessionProtocol desiredProtocol, PoolKey key, ChannelAcquis\n      * A low-level operation that triggers a new connection attempt. Used only by:\n      * <ul>\n      *   <li>{@link #connect(SessionProtocol, PoolKey, ChannelAcquisitionFuture,\n-     *       ClientConnectionTimingsBuilder)} - The pool has been exhausted.</li>\n+     *       ClientConnectionTimingsBuilder, ProxyContext)} - The pool has been exhausted.</li>\n      *   <li>{@link HttpSessionHandler} - HTTP/2 upgrade has failed.</li>\n      * </ul>\n      */\n     void connect(SocketAddress remoteAddress, SessionProtocol desiredProtocol,\n-                 Promise<Channel> sessionPromise) {\n+                 ProxyContext proxyContext, Promise<Channel> sessionPromise) {\n+\n         final Bootstrap bootstrap = getBootstrap(desiredProtocol);\n-        final ChannelFuture connectFuture = bootstrap.connect(remoteAddress);\n+\n+        final Channel channel = bootstrap.register().channel();\n+        channel.attr(PROXY_CONTEXT).set(proxyContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NTM2MQ=="}, "originalCommit": {"oid": "eea39f080ce52128a9fcd9e163bca9e4d19963be"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc5OTE4NA==", "bodyText": "That's a good point, @jrhee17. I'm not sure ProxySelector will ever need to look into anything other than (SessionProtocol, authority (or host and port)). How about this:\n\nMake ProxyConfigSelector require SessionProtocol and Endpoint only.\nWhen calling ProxySelector, create a URI whose path is /, e.g. http://foo.com/", "url": "https://github.com/line/armeria/pull/2752#discussion_r440799184", "createdAt": "2020-06-16T12:07:25Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "diffHunk": "@@ -373,24 +393,43 @@ private void connect(SessionProtocol desiredProtocol, PoolKey key, ChannelAcquis\n      * A low-level operation that triggers a new connection attempt. Used only by:\n      * <ul>\n      *   <li>{@link #connect(SessionProtocol, PoolKey, ChannelAcquisitionFuture,\n-     *       ClientConnectionTimingsBuilder)} - The pool has been exhausted.</li>\n+     *       ClientConnectionTimingsBuilder, ProxyContext)} - The pool has been exhausted.</li>\n      *   <li>{@link HttpSessionHandler} - HTTP/2 upgrade has failed.</li>\n      * </ul>\n      */\n     void connect(SocketAddress remoteAddress, SessionProtocol desiredProtocol,\n-                 Promise<Channel> sessionPromise) {\n+                 ProxyContext proxyContext, Promise<Channel> sessionPromise) {\n+\n         final Bootstrap bootstrap = getBootstrap(desiredProtocol);\n-        final ChannelFuture connectFuture = bootstrap.connect(remoteAddress);\n+\n+        final Channel channel = bootstrap.register().channel();\n+        channel.attr(PROXY_CONTEXT).set(proxyContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NTM2MQ=="}, "originalCommit": {"oid": "eea39f080ce52128a9fcd9e163bca9e4d19963be"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDczMTc5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwODoyNTo1M1rOGmleqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMTo0MDoyMFrOGtGkkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzExMzEzMA==", "bodyText": "I am yet to be convinced this.protocol will always be non-null.\nI'll look into this more, but any feedback is also welcome", "url": "https://github.com/line/armeria/pull/2752#discussion_r443113130", "createdAt": "2020-06-20T08:25:53Z", "author": {"login": "jrhee17"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java", "diffHunk": "@@ -427,6 +431,9 @@ public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n     @Override\n     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n         if (cause instanceof ProxyConnectException) {\n+            final PoolKey poolKey = ctx.channel().attr(POOL_KEY).get();\n+            final SessionProtocol protocol = this.protocol != null ? this.protocol : desiredProtocol;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03870f3decc0f34fc44dec988c10c244ade40cdb"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk0Njc3MQ==", "bodyText": "I think it's possible.", "url": "https://github.com/line/armeria/pull/2752#discussion_r449946771", "createdAt": "2020-07-06T01:40:20Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java", "diffHunk": "@@ -427,6 +431,9 @@ public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n     @Override\n     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n         if (cause instanceof ProxyConnectException) {\n+            final PoolKey poolKey = ctx.channel().attr(POOL_KEY).get();\n+            final SessionProtocol protocol = this.protocol != null ? this.protocol : desiredProtocol;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzExMzEzMA=="}, "originalCommit": {"oid": "03870f3decc0f34fc44dec988c10c244ade40cdb"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjAzMDQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjowNDoyOVrOGmwAJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjowNDoyOVrOGmwAJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4NTU0MA==", "bodyText": "This looks a breaking change. Could you add the changes to a PR description?", "url": "https://github.com/line/armeria/pull/2752#discussion_r443285540", "createdAt": "2020-06-22T02:04:29Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java", "diffHunk": "@@ -260,9 +261,9 @@ public MeterRegistry meterRegistry() {\n     }\n \n     /**\n-     * The {@link ProxyConfig} which contains the proxy configuration.\n+     * The {@link ProxyConfigSelector} which determines the {@link ProxyConfig} to be used.\n      */\n-    public ProxyConfig proxyConfig() {\n-        return get(ClientFactoryOption.PROXY_CONFIG);\n+    public ProxyConfigSelector proxyConfigSelector() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33fac7396309e49c67731fc14e76d19beaaec8b4"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjAzMDY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryOption.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjowNDo0MlrOGmwAPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjowNDo0MlrOGmwAPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4NTU2Ng==", "bodyText": "Ditto, This looks a breaking change. Could you add the changes to a PR description?", "url": "https://github.com/line/armeria/pull/2752#discussion_r443285566", "createdAt": "2020-06-22T02:04:42Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryOption.java", "diffHunk": "@@ -216,10 +218,10 @@\n             define(\"METER_REGISTRY\", Metrics.globalRegistry);\n \n     /**\n-     * The {@link ProxyConfig} which contains proxy related configuration.\n+     * The {@link ProxyConfigSelector} which determines the {@link ProxyConfig} to be used.\n      */\n-    public static final ClientFactoryOption<ProxyConfig> PROXY_CONFIG =\n-            define(\"PROXY_CONFIG\", ProxyConfig.direct());\n+    public static final ClientFactoryOption<ProxyConfigSelector> PROXY_CONFIG_SELECTOR =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33fac7396309e49c67731fc14e76d19beaaec8b4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjEzMjEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/StaticProxyConfigSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMzozMDozOVrOGmw9Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMzozMDozOVrOGmw9Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMTE5OA==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Constructs a {@link ProxyConfigSelector} which selects a static {@link ProxyConfig}\n          \n          \n            \n                 * Returns a {@link ProxyConfigSelector} which selects a static {@link ProxyConfig}", "url": "https://github.com/line/armeria/pull/2752#discussion_r443301198", "createdAt": "2020-06-22T03:30:39Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/StaticProxyConfigSelector.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.SocketAddress;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.SessionProtocol;\n+\n+/**\n+ * A {@link ProxyConfigSelector} which selects a static {@link ProxyConfig}\n+ * for all requests.\n+ */\n+public final class StaticProxyConfigSelector implements ProxyConfigSelector {\n+\n+    private static final StaticProxyConfigSelector DIRECT = new StaticProxyConfigSelector(ProxyConfig.direct());\n+\n+    /**\n+     * Constructs a {@link ProxyConfigSelector} which selects a static {@link ProxyConfig}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33fac7396309e49c67731fc14e76d19beaaec8b4"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjEzNzQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfigSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMzozNTowOVrOGmxAXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMzozNTowOVrOGmxAXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMTk4Mw==", "bodyText": "WrappingProxyConfigSelector is a package-private class.\nDo we need to copy the details?", "url": "https://github.com/line/armeria/pull/2752#discussion_r443301983", "createdAt": "2020-06-22T03:35:09Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfigSelector.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.ProxySelector;\n+import java.net.SocketAddress;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+/**\n+ * Selects the {@link ProxyConfig} to use when connecting to a network\n+ * resource specified by the {@link SessionProtocol} and {@link Endpoint} parameter.\n+ * This class may be used to dynamically control what proxy configuration\n+ * to use for each request.\n+\n+ * <p>It should be noted that the only guarantee provided is for a single request,\n+ * the {@link Endpoint} called with {@code select} will be equal to the {@link Endpoint}\n+ * called with {@code connectFailed}.</p>\n+ *\n+ * <p>For instance, the invoked {@link SessionProtocol} may change depending on the result of\n+ * protocol negotiation.\n+ * Additionally, we should note the {@link Endpoint} used to construct the request will not\n+ * necessarily be equal to the {@link Endpoint} in either callback method parameter.</p>\n+ */\n+@UnstableApi\n+public interface ProxyConfigSelector {\n+\n+    /**\n+     * Selects the {@link ProxyConfig} to use when connecting to a network\n+     * resource specified by the {@link SessionProtocol} and {@link Endpoint} parameter.\n+     *\n+     * @param protocol the protocol associated with the endpoint\n+     * @param endpoint an endpoint containing the requested host and port\n+     * @return the selected proxy config which should be non-null\n+     */\n+    ProxyConfig select(SessionProtocol protocol, Endpoint endpoint);\n+\n+    /**\n+     * Called to indicate a connection attempt to the specified {@link SessionProtocol}\n+     * and {@link Endpoint} has failed.\n+     *\n+     * @param protocol the protocol associated with the endpoint\n+     * @param endpoint an endpoint containing the requested host and port\n+     * @param sa the remote socket address of the proxy server\n+     * @param throwable the cause of the failure\n+     */\n+    void connectFailed(SessionProtocol protocol, Endpoint endpoint,\n+                       SocketAddress sa, Throwable throwable);\n+\n+    /**\n+     * Provides a way to re-use an existing {@link ProxySelector} with some limitations.\n+     * See {@link WrappingProxyConfigSelector} for more details.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33fac7396309e49c67731fc14e76d19beaaec8b4"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjEzOTAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMzozNjoyMVrOGmxBQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMzozNjoyMVrOGmxBQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMjIwOA==", "bodyText": "nit: Could remove This value is?", "url": "https://github.com/line/armeria/pull/2752#discussion_r443302208", "createdAt": "2020-06-22T03:36:21Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfig.java", "diffHunk": "@@ -124,6 +134,12 @@ public static ProxyConfig direct() {\n      */\n     public abstract ProxyType proxyType();\n \n+    /**\n+     * Returns the proxy address. This value is {@code null} only for {@link ProxyType#DIRECT}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33fac7396309e49c67731fc14e76d19beaaec8b4"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjE0NTEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ConnectProxyConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMzo0MToxM1rOGmxE4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMzo0MToxM1rOGmxE4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMzEzOA==", "bodyText": "Could be removed now?", "url": "https://github.com/line/armeria/pull/2752#discussion_r443303138", "createdAt": "2020-06-22T03:41:13Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ConnectProxyConfig.java", "diffHunk": "@@ -48,6 +49,7 @@\n     /**\n      * Returns the configured proxy address.\n      */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33fac7396309e49c67731fc14e76d19beaaec8b4"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjE1MjUxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMzo0NzoyM1rOGmxJGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwNjowOTo0OFrOGpzn2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwNDIxNg==", "bodyText": "Question: Could we pass the poolKey to the constructor of this class?", "url": "https://github.com/line/armeria/pull/2752#discussion_r443304216", "createdAt": "2020-06-22T03:47:23Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java", "diffHunk": "@@ -131,16 +132,18 @@\n         this.useHttp1Pipelining = useHttp1Pipelining;\n         this.idleTimeoutMillis = idleTimeoutMillis;\n         this.pingIntervalMillis = pingIntervalMillis;\n+        this.desiredProtocol = desiredProtocol;\n+    }\n \n-        switch (proxyConfig.proxyType()) {\n+    private static boolean useProxyConnection(ChannelHandlerContext ctx) {\n+        final PoolKey poolKey = ctx.channel().attr(POOL_KEY).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33fac7396309e49c67731fc14e76d19beaaec8b4"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ5MDU4Ng==", "bodyText": "Good point \ud83d\udc4d  Modified to use poolKey directly for (slightly) better performance", "url": "https://github.com/line/armeria/pull/2752#discussion_r446490586", "createdAt": "2020-06-27T06:09:48Z", "author": {"login": "jrhee17"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java", "diffHunk": "@@ -131,16 +132,18 @@\n         this.useHttp1Pipelining = useHttp1Pipelining;\n         this.idleTimeoutMillis = idleTimeoutMillis;\n         this.pingIntervalMillis = pingIntervalMillis;\n+        this.desiredProtocol = desiredProtocol;\n+    }\n \n-        switch (proxyConfig.proxyType()) {\n+    private static boolean useProxyConnection(ChannelHandlerContext ctx) {\n+        final PoolKey poolKey = ctx.channel().attr(POOL_KEY).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwNDIxNg=="}, "originalCommit": {"oid": "33fac7396309e49c67731fc14e76d19beaaec8b4"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTE1MDk2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODozNjo1N1rOGqx8Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODozNjo1N1rOGqx8Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxMTU4Nw==", "bodyText": "Use UnprocessedRequestException.of(cause)?\nThat was introduced recently. https://github.com/line/armeria/pull/2836/files#diff-718d120dd1a90039dc7f172f71f2f6bc", "url": "https://github.com/line/armeria/pull/2752#discussion_r447511587", "createdAt": "2020-06-30T08:36:57Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "diffHunk": "@@ -382,27 +394,49 @@ private void connect(SessionProtocol desiredProtocol, PoolKey key, ChannelAcquis\n      * </ul>\n      */\n     void connect(SocketAddress remoteAddress, SessionProtocol desiredProtocol,\n-                 Promise<Channel> sessionPromise) {\n+                 PoolKey poolKey, Promise<Channel> sessionPromise) {\n+\n         final Bootstrap bootstrap = getBootstrap(desiredProtocol);\n-        final ChannelFuture connectFuture = bootstrap.connect(remoteAddress);\n+\n+        final Channel channel = bootstrap.register().channel();\n+        configureProxy(channel, poolKey.proxyConfig, desiredProtocol);\n+        final ChannelFuture connectFuture = channel.connect(remoteAddress);\n \n         connectFuture.addListener((ChannelFuture future) -> {\n             if (future.isSuccess()) {\n-                initSession(desiredProtocol, future, sessionPromise);\n+                initSession(desiredProtocol, poolKey, future, sessionPromise);\n             } else {\n+                invokeProxyConnectFailed(desiredProtocol, poolKey, future.cause());\n                 sessionPromise.tryFailure(future.cause());\n             }\n         });\n     }\n \n+    void invokeProxyConnectFailed(SessionProtocol protocol, PoolKey poolKey, Throwable cause) {\n+        try {\n+            final ProxyConfig proxyConfig = poolKey.proxyConfig;\n+            if (proxyConfig.proxyType() != ProxyType.DIRECT) {\n+                final InetSocketAddress proxyAddress = proxyConfig.proxyAddress();\n+                assert proxyAddress != null;\n+                if (!(cause instanceof UnprocessedRequestException)) {\n+                    cause = new UnprocessedRequestException(cause);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fdca12183cded4c065be69d2b2e96beac1eaa73"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTE2NTQ2OnYy", "diffSide": "LEFT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODo0MDoyMFrOGqyFJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDoxNToyNVrOGrfz1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxMzg5NQ==", "bodyText": "Could you revert this? Refer to #2801 (comment) for the reason. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2752#discussion_r447513895", "createdAt": "2020-06-30T08:40:20Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java", "diffHunk": "@@ -120,30 +122,19 @@\n \n     HttpSessionHandler(HttpChannelPool channelPool, Channel channel,\n                        Promise<Channel> sessionPromise, ScheduledFuture<?> sessionTimeoutFuture,\n-                       MeterRegistry meterRegistry, boolean useHttp1Pipelining,\n-                       long idleTimeoutMillis, long pingIntervalMillis, ProxyConfig proxyConfig) {\n+                       MeterRegistry meterRegistry, SessionProtocol desiredProtocol, PoolKey poolKey,\n+                       boolean useHttp1Pipelining, long idleTimeoutMillis, long pingIntervalMillis) {\n         this.channelPool = requireNonNull(channelPool, \"channelPool\");\n         this.channel = requireNonNull(channel, \"channel\");\n         remoteAddress = channel.remoteAddress();\n         this.sessionPromise = requireNonNull(sessionPromise, \"sessionPromise\");\n         this.sessionTimeoutFuture = requireNonNull(sessionTimeoutFuture, \"sessionTimeoutFuture\");\n         this.meterRegistry = meterRegistry;\n+        this.desiredProtocol = desiredProtocol;\n+        this.poolKey = poolKey;\n         this.useHttp1Pipelining = useHttp1Pipelining;\n         this.idleTimeoutMillis = idleTimeoutMillis;\n         this.pingIntervalMillis = pingIntervalMillis;\n-\n-        switch (proxyConfig.proxyType()) {\n-            case DIRECT:\n-                useProxyConnection = false;\n-                break;\n-            case SOCKS4:\n-            case SOCKS5:\n-            case CONNECT:\n-                useProxyConnection = true;\n-                break;\n-            default:\n-                throw new Error(); // Should never reach here.\n-        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fdca12183cded4c065be69d2b2e96beac1eaa73"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYwMzMwNw==", "bodyText": "@ikhoon, it seems like ProxyConfig is not referred here anymore. What do you suggest specifically?", "url": "https://github.com/line/armeria/pull/2752#discussion_r447603307", "createdAt": "2020-06-30T11:12:54Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java", "diffHunk": "@@ -120,30 +122,19 @@\n \n     HttpSessionHandler(HttpChannelPool channelPool, Channel channel,\n                        Promise<Channel> sessionPromise, ScheduledFuture<?> sessionTimeoutFuture,\n-                       MeterRegistry meterRegistry, boolean useHttp1Pipelining,\n-                       long idleTimeoutMillis, long pingIntervalMillis, ProxyConfig proxyConfig) {\n+                       MeterRegistry meterRegistry, SessionProtocol desiredProtocol, PoolKey poolKey,\n+                       boolean useHttp1Pipelining, long idleTimeoutMillis, long pingIntervalMillis) {\n         this.channelPool = requireNonNull(channelPool, \"channelPool\");\n         this.channel = requireNonNull(channel, \"channel\");\n         remoteAddress = channel.remoteAddress();\n         this.sessionPromise = requireNonNull(sessionPromise, \"sessionPromise\");\n         this.sessionTimeoutFuture = requireNonNull(sessionTimeoutFuture, \"sessionTimeoutFuture\");\n         this.meterRegistry = meterRegistry;\n+        this.desiredProtocol = desiredProtocol;\n+        this.poolKey = poolKey;\n         this.useHttp1Pipelining = useHttp1Pipelining;\n         this.idleTimeoutMillis = idleTimeoutMillis;\n         this.pingIntervalMillis = pingIntervalMillis;\n-\n-        switch (proxyConfig.proxyType()) {\n-            case DIRECT:\n-                useProxyConnection = false;\n-                break;\n-            case SOCKS4:\n-            case SOCKS5:\n-            case CONNECT:\n-                useProxyConnection = true;\n-                break;\n-            default:\n-                throw new Error(); // Should never reach here.\n-        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxMzg5NQ=="}, "originalCommit": {"oid": "9fdca12183cded4c065be69d2b2e96beac1eaa73"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI2MzEyNw==", "bodyText": "I thought ProxyConfig could be accessed by PoolKey. Now, I realized the ProxyConfig.ProxyType is validated for the default case at configureProxy(...).\nYou don't need to revert this. ;-)", "url": "https://github.com/line/armeria/pull/2752#discussion_r448263127", "createdAt": "2020-07-01T10:15:25Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java", "diffHunk": "@@ -120,30 +122,19 @@\n \n     HttpSessionHandler(HttpChannelPool channelPool, Channel channel,\n                        Promise<Channel> sessionPromise, ScheduledFuture<?> sessionTimeoutFuture,\n-                       MeterRegistry meterRegistry, boolean useHttp1Pipelining,\n-                       long idleTimeoutMillis, long pingIntervalMillis, ProxyConfig proxyConfig) {\n+                       MeterRegistry meterRegistry, SessionProtocol desiredProtocol, PoolKey poolKey,\n+                       boolean useHttp1Pipelining, long idleTimeoutMillis, long pingIntervalMillis) {\n         this.channelPool = requireNonNull(channelPool, \"channelPool\");\n         this.channel = requireNonNull(channel, \"channel\");\n         remoteAddress = channel.remoteAddress();\n         this.sessionPromise = requireNonNull(sessionPromise, \"sessionPromise\");\n         this.sessionTimeoutFuture = requireNonNull(sessionTimeoutFuture, \"sessionTimeoutFuture\");\n         this.meterRegistry = meterRegistry;\n+        this.desiredProtocol = desiredProtocol;\n+        this.poolKey = poolKey;\n         this.useHttp1Pipelining = useHttp1Pipelining;\n         this.idleTimeoutMillis = idleTimeoutMillis;\n         this.pingIntervalMillis = pingIntervalMillis;\n-\n-        switch (proxyConfig.proxyType()) {\n-            case DIRECT:\n-                useProxyConnection = false;\n-                break;\n-            case SOCKS4:\n-            case SOCKS5:\n-            case CONNECT:\n-                useProxyConnection = true;\n-                break;\n-            default:\n-                throw new Error(); // Should never reach here.\n-        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxMzg5NQ=="}, "originalCommit": {"oid": "9fdca12183cded4c065be69d2b2e96beac1eaa73"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTI0MDM0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/DirectProxyConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODo1ODoyOVrOGqyz6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODo1ODoyOVrOGqyz6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUyNTg2Ng==", "bodyText": "nit: Could make this statically DirectProxyConfig{proxyType=DIRECT}.", "url": "https://github.com/line/armeria/pull/2752#discussion_r447525866", "createdAt": "2020-06-30T08:58:29Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/DirectProxyConfig.java", "diffHunk": "@@ -33,8 +37,23 @@ public ProxyType proxyType() {\n         return ProxyType.DIRECT;\n     }\n \n+    @Override\n+    public InetSocketAddress proxyAddress() {\n+        return null;\n+    }\n+\n     @Override\n     public String toString() {\n         return MoreObjects.toStringHelper(this).add(\"proxyType\", proxyType()).toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e52bc67c86208f8b55ca3d7b0b38218d4a2bdb2d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzM3MjczOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzozMjoxOVrOGraOLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzozMjoxOVrOGraOLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3MTU2Ng==", "bodyText": "We don't use <> to indicate the parameter. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2752#discussion_r448171566", "createdAt": "2020-07-01T07:32:19Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "diffHunk": "@@ -382,27 +394,49 @@ private void connect(SessionProtocol desiredProtocol, PoolKey key, ChannelAcquis\n      * </ul>\n      */\n     void connect(SocketAddress remoteAddress, SessionProtocol desiredProtocol,\n-                 Promise<Channel> sessionPromise) {\n+                 PoolKey poolKey, Promise<Channel> sessionPromise) {\n+\n         final Bootstrap bootstrap = getBootstrap(desiredProtocol);\n-        final ChannelFuture connectFuture = bootstrap.connect(remoteAddress);\n+\n+        final Channel channel = bootstrap.register().channel();\n+        configureProxy(channel, poolKey.proxyConfig, desiredProtocol);\n+        final ChannelFuture connectFuture = channel.connect(remoteAddress);\n \n         connectFuture.addListener((ChannelFuture future) -> {\n             if (future.isSuccess()) {\n-                initSession(desiredProtocol, future, sessionPromise);\n+                initSession(desiredProtocol, poolKey, future, sessionPromise);\n             } else {\n+                invokeProxyConnectFailed(desiredProtocol, poolKey, future.cause());\n                 sessionPromise.tryFailure(future.cause());\n             }\n         });\n     }\n \n+    void invokeProxyConnectFailed(SessionProtocol protocol, PoolKey poolKey, Throwable cause) {\n+        try {\n+            final ProxyConfig proxyConfig = poolKey.proxyConfig;\n+            if (proxyConfig.proxyType() != ProxyType.DIRECT) {\n+                final InetSocketAddress proxyAddress = proxyConfig.proxyAddress();\n+                assert proxyAddress != null;\n+                if (!(cause instanceof UnprocessedRequestException)) {\n+                    cause = new UnprocessedRequestException(cause);\n+                }\n+                proxyConfigSelector.connectFailed(protocol, Endpoint.of(poolKey.host, poolKey.port),\n+                                                  proxyAddress, cause);\n+            }\n+        } catch (Throwable t) {\n+            logger.warn(\"Exception while invoking proxy connectFailed for <{}> \", poolKey, t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70c5c8cedd773e6e74efa2806ffc64f57de0d1af"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzQxMTcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/WrappingProxyConfigSelector.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzo0NDoyN1rOGram4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjoxMTowM1rOGtG5xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3Nzg5MQ==", "bodyText": "Question: Is it okay not to consider H1C and HTTP?", "url": "https://github.com/line/armeria/pull/2752#discussion_r448177891", "createdAt": "2020-07-01T07:44:27Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/WrappingProxyConfigSelector.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.ProxySelector;\n+import java.net.SocketAddress;\n+import java.util.List;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.SessionProtocol;\n+\n+/**\n+ * See {@link ProxyConfigSelector#wrap(ProxySelector)} for more information.\n+ */\n+final class WrappingProxyConfigSelector implements ProxyConfigSelector {\n+    private static final Logger logger = LoggerFactory.getLogger(WrappingProxyConfigSelector.class);\n+\n+    private static InetSocketAddress resolve(InetSocketAddress inetSocketAddress) {\n+        if (!inetSocketAddress.isUnresolved()) {\n+            return inetSocketAddress;\n+        }\n+        return new InetSocketAddress(inetSocketAddress.getHostString(), inetSocketAddress.getPort());\n+    }\n+\n+    private static ProxyConfig toProxyConfig(@Nullable Proxy proxy) {\n+        if (proxy == null || proxy.address() == null) {\n+            return ProxyConfig.direct();\n+        }\n+\n+        final InetSocketAddress proxyAddress = (InetSocketAddress) proxy.address();\n+        switch (proxy.type()) {\n+            case HTTP:\n+                return ProxyConfig.connect(resolve(proxyAddress));\n+            case SOCKS:\n+                // NOTE: we may consider using {@code sun.net.SocksProxy} to determine the socksProxyVersion\n+                return ProxyConfig.socks5(resolve(proxyAddress));\n+            case DIRECT:\n+            default:\n+                return ProxyConfig.direct();\n+        }\n+    }\n+\n+    static WrappingProxyConfigSelector of(ProxySelector proxySelector) {\n+        return new WrappingProxyConfigSelector(proxySelector);\n+    }\n+\n+    private final ProxySelector proxySelector;\n+\n+    private WrappingProxyConfigSelector(ProxySelector proxySelector) {\n+        this.proxySelector = proxySelector;\n+    }\n+\n+    @Override\n+    public ProxyConfig select(SessionProtocol protocol, Endpoint endpoint) {\n+        requireNonNull(protocol, \"protocol\");\n+        requireNonNull(endpoint, \"endpoint\");\n+        final List<Proxy> proxies = proxySelector.select(endpoint.toUri(protocol));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70c5c8cedd773e6e74efa2806ffc64f57de0d1af"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc0ODU1Mw==", "bodyText": "not sure I understand \ud83e\udd14\nI would expect H1C, HTTP to behave normally -- is there a specific scenario you had in mind?", "url": "https://github.com/line/armeria/pull/2752#discussion_r449748553", "createdAt": "2020-07-04T07:24:21Z", "author": {"login": "jrhee17"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/WrappingProxyConfigSelector.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.ProxySelector;\n+import java.net.SocketAddress;\n+import java.util.List;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.SessionProtocol;\n+\n+/**\n+ * See {@link ProxyConfigSelector#wrap(ProxySelector)} for more information.\n+ */\n+final class WrappingProxyConfigSelector implements ProxyConfigSelector {\n+    private static final Logger logger = LoggerFactory.getLogger(WrappingProxyConfigSelector.class);\n+\n+    private static InetSocketAddress resolve(InetSocketAddress inetSocketAddress) {\n+        if (!inetSocketAddress.isUnresolved()) {\n+            return inetSocketAddress;\n+        }\n+        return new InetSocketAddress(inetSocketAddress.getHostString(), inetSocketAddress.getPort());\n+    }\n+\n+    private static ProxyConfig toProxyConfig(@Nullable Proxy proxy) {\n+        if (proxy == null || proxy.address() == null) {\n+            return ProxyConfig.direct();\n+        }\n+\n+        final InetSocketAddress proxyAddress = (InetSocketAddress) proxy.address();\n+        switch (proxy.type()) {\n+            case HTTP:\n+                return ProxyConfig.connect(resolve(proxyAddress));\n+            case SOCKS:\n+                // NOTE: we may consider using {@code sun.net.SocksProxy} to determine the socksProxyVersion\n+                return ProxyConfig.socks5(resolve(proxyAddress));\n+            case DIRECT:\n+            default:\n+                return ProxyConfig.direct();\n+        }\n+    }\n+\n+    static WrappingProxyConfigSelector of(ProxySelector proxySelector) {\n+        return new WrappingProxyConfigSelector(proxySelector);\n+    }\n+\n+    private final ProxySelector proxySelector;\n+\n+    private WrappingProxyConfigSelector(ProxySelector proxySelector) {\n+        this.proxySelector = proxySelector;\n+    }\n+\n+    @Override\n+    public ProxyConfig select(SessionProtocol protocol, Endpoint endpoint) {\n+        requireNonNull(protocol, \"protocol\");\n+        requireNonNull(endpoint, \"endpoint\");\n+        final List<Proxy> proxies = proxySelector.select(endpoint.toUri(protocol));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3Nzg5MQ=="}, "originalCommit": {"oid": "70c5c8cedd773e6e74efa2806ffc64f57de0d1af"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk1MjE5Nw==", "bodyText": "Ah, I was sort of thinking generalizing the session protocol to H1C or H2C when the protocol is HTTP. But I guess it's possible and it's the job of ProxyConfigSelector so we don't have to worry about it. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2752#discussion_r449952197", "createdAt": "2020-07-06T02:11:03Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/WrappingProxyConfigSelector.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.ProxySelector;\n+import java.net.SocketAddress;\n+import java.util.List;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.SessionProtocol;\n+\n+/**\n+ * See {@link ProxyConfigSelector#wrap(ProxySelector)} for more information.\n+ */\n+final class WrappingProxyConfigSelector implements ProxyConfigSelector {\n+    private static final Logger logger = LoggerFactory.getLogger(WrappingProxyConfigSelector.class);\n+\n+    private static InetSocketAddress resolve(InetSocketAddress inetSocketAddress) {\n+        if (!inetSocketAddress.isUnresolved()) {\n+            return inetSocketAddress;\n+        }\n+        return new InetSocketAddress(inetSocketAddress.getHostString(), inetSocketAddress.getPort());\n+    }\n+\n+    private static ProxyConfig toProxyConfig(@Nullable Proxy proxy) {\n+        if (proxy == null || proxy.address() == null) {\n+            return ProxyConfig.direct();\n+        }\n+\n+        final InetSocketAddress proxyAddress = (InetSocketAddress) proxy.address();\n+        switch (proxy.type()) {\n+            case HTTP:\n+                return ProxyConfig.connect(resolve(proxyAddress));\n+            case SOCKS:\n+                // NOTE: we may consider using {@code sun.net.SocksProxy} to determine the socksProxyVersion\n+                return ProxyConfig.socks5(resolve(proxyAddress));\n+            case DIRECT:\n+            default:\n+                return ProxyConfig.direct();\n+        }\n+    }\n+\n+    static WrappingProxyConfigSelector of(ProxySelector proxySelector) {\n+        return new WrappingProxyConfigSelector(proxySelector);\n+    }\n+\n+    private final ProxySelector proxySelector;\n+\n+    private WrappingProxyConfigSelector(ProxySelector proxySelector) {\n+        this.proxySelector = proxySelector;\n+    }\n+\n+    @Override\n+    public ProxyConfig select(SessionProtocol protocol, Endpoint endpoint) {\n+        requireNonNull(protocol, \"protocol\");\n+        requireNonNull(endpoint, \"endpoint\");\n+        final List<Proxy> proxies = proxySelector.select(endpoint.toUri(protocol));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3Nzg5MQ=="}, "originalCommit": {"oid": "70c5c8cedd773e6e74efa2806ffc64f57de0d1af"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzQxNjI1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/WrappingProxyConfigSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzo0NTo1NlrOGrapug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzo0NTo1NlrOGrapug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3ODYxOA==", "bodyText": "Question: Is it okay not to call the default ProxySelector to check? as the doc suggested?\nhttps://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html\nOops, forget about this. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2752#discussion_r448178618", "createdAt": "2020-07-01T07:45:56Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/WrappingProxyConfigSelector.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.ProxySelector;\n+import java.net.SocketAddress;\n+import java.util.List;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.SessionProtocol;\n+\n+/**\n+ * See {@link ProxyConfigSelector#wrap(ProxySelector)} for more information.\n+ */\n+final class WrappingProxyConfigSelector implements ProxyConfigSelector {\n+    private static final Logger logger = LoggerFactory.getLogger(WrappingProxyConfigSelector.class);\n+\n+    private static InetSocketAddress resolve(InetSocketAddress inetSocketAddress) {\n+        if (!inetSocketAddress.isUnresolved()) {\n+            return inetSocketAddress;\n+        }\n+        return new InetSocketAddress(inetSocketAddress.getHostString(), inetSocketAddress.getPort());\n+    }\n+\n+    private static ProxyConfig toProxyConfig(@Nullable Proxy proxy) {\n+        if (proxy == null || proxy.address() == null) {\n+            return ProxyConfig.direct();\n+        }\n+\n+        final InetSocketAddress proxyAddress = (InetSocketAddress) proxy.address();\n+        switch (proxy.type()) {\n+            case HTTP:\n+                return ProxyConfig.connect(resolve(proxyAddress));\n+            case SOCKS:\n+                // NOTE: we may consider using {@code sun.net.SocksProxy} to determine the socksProxyVersion\n+                return ProxyConfig.socks5(resolve(proxyAddress));\n+            case DIRECT:\n+            default:\n+                return ProxyConfig.direct();\n+        }\n+    }\n+\n+    static WrappingProxyConfigSelector of(ProxySelector proxySelector) {\n+        return new WrappingProxyConfigSelector(proxySelector);\n+    }\n+\n+    private final ProxySelector proxySelector;\n+\n+    private WrappingProxyConfigSelector(ProxySelector proxySelector) {\n+        this.proxySelector = proxySelector;\n+    }\n+\n+    @Override\n+    public ProxyConfig select(SessionProtocol protocol, Endpoint endpoint) {\n+        requireNonNull(protocol, \"protocol\");\n+        requireNonNull(endpoint, \"endpoint\");\n+        final List<Proxy> proxies = proxySelector.select(endpoint.toUri(protocol));\n+        if (proxies == null || proxies.isEmpty()) {\n+            return ProxyConfig.direct();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70c5c8cedd773e6e74efa2806ffc64f57de0d1af"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTQxNTY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODowODowNFrOGsnr8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODowODowNFrOGsnr8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ0MDc1NA==", "bodyText": "Could use <ul> and <li> tags\nHow about JDK's default {@link ProxySelector} implementation instead of sun's {@code DefaultProxySelector}?", "url": "https://github.com/line/armeria/pull/2752#discussion_r449440754", "createdAt": "2020-07-03T08:08:04Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -509,10 +512,34 @@ public ClientFactoryBuilder meterRegistry(MeterRegistry meterRegistry) {\n     }\n \n     /**\n-     * The {@link ProxyConfig} which contains proxy related configuration.\n+     * Sets the {@link ProxyConfig} which contains proxy related configuration.\n      */\n     public ClientFactoryBuilder proxyConfig(ProxyConfig proxyConfig) {\n-        option(ClientFactoryOption.PROXY_CONFIG, proxyConfig);\n+        requireNonNull(proxyConfig, \"proxyConfig\");\n+        option(ClientFactoryOption.PROXY_CONFIG_SELECTOR, StaticProxyConfigSelector.of(proxyConfig));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@link ProxySelector} which determines the {@link ProxyConfig} to be used.\n+     *\n+     * <p>This method makes a best effort to provide compatibility with {@link ProxySelector}.\n+     * Some known limitations include:\n+     * 1) Limited compatibility with sun's {@code DefaultProxySelector}\n+     * 2) Only selecting a single {@link ProxyConfig} is supported</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70c5c8cedd773e6e74efa2806ffc64f57de0d1af"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTU1Mjk2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ConnectProxyConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1MjowOFrOGspBMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1MjowOFrOGspBMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2MjU3OQ==", "bodyText": "Would you mind moving equals and hashCode() so they come before toString()?", "url": "https://github.com/line/armeria/pull/2752#discussion_r449462579", "createdAt": "2020-07-03T08:52:08Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ConnectProxyConfig.java", "diffHunk": "@@ -91,4 +90,24 @@ public String toString() {\n                           .omitNullValues()\n                           .toString();\n     }\n+\n+    @Override\n+    public boolean equals(@Nullable Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70c5c8cedd773e6e74efa2806ffc64f57de0d1af"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTU1Mzc2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/DirectProxyConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1MjoyMlrOGspBqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1MjoyMlrOGspBqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2MjY5OQ==", "bodyText": "Ditto - Please move up.", "url": "https://github.com/line/armeria/pull/2752#discussion_r449462699", "createdAt": "2020-07-03T08:52:22Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/DirectProxyConfig.java", "diffHunk": "@@ -33,8 +37,23 @@ public ProxyType proxyType() {\n         return ProxyType.DIRECT;\n     }\n \n+    @Override\n+    public InetSocketAddress proxyAddress() {\n+        return null;\n+    }\n+\n     @Override\n     public String toString() {\n         return MoreObjects.toStringHelper(this).add(\"proxyType\", proxyType()).toString();\n     }\n+\n+    @Override\n+    public boolean equals(@Nullable Object obj) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70c5c8cedd773e6e74efa2806ffc64f57de0d1af"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTU2MDI1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfigSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1NDoyMFrOGspFyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1NDoyMFrOGspFyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2Mzc1Mw==", "bodyText": "{@link #select(...)}", "url": "https://github.com/line/armeria/pull/2752#discussion_r449463753", "createdAt": "2020-07-03T08:54:20Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfigSelector.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.Proxy;\n+import java.net.ProxySelector;\n+import java.net.SocketAddress;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+/**\n+ * Selects the {@link ProxyConfig} to use when connecting to a network\n+ * resource specified by the {@link SessionProtocol} and {@link Endpoint} parameter.\n+ * This class may be used to dynamically control what proxy configuration\n+ * to use for each request.\n+\n+ * <p>It should be noted that the only guarantee provided is for a single request,\n+ * the {@link Endpoint} called with {@code select} will be equal to the {@link Endpoint}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70c5c8cedd773e6e74efa2806ffc64f57de0d1af"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTU2MTA1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfigSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1NDozMlrOGspGPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1NDozMlrOGspGPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2Mzg2OQ==", "bodyText": "{@link #connectFailed(...)}", "url": "https://github.com/line/armeria/pull/2752#discussion_r449463869", "createdAt": "2020-07-03T08:54:32Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfigSelector.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.Proxy;\n+import java.net.ProxySelector;\n+import java.net.SocketAddress;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+/**\n+ * Selects the {@link ProxyConfig} to use when connecting to a network\n+ * resource specified by the {@link SessionProtocol} and {@link Endpoint} parameter.\n+ * This class may be used to dynamically control what proxy configuration\n+ * to use for each request.\n+\n+ * <p>It should be noted that the only guarantee provided is for a single request,\n+ * the {@link Endpoint} called with {@code select} will be equal to the {@link Endpoint}\n+ * called with {@code connectFailed}.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70c5c8cedd773e6e74efa2806ffc64f57de0d1af"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTU3MjEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfigSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1NzozOFrOGspM5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1NzozOFrOGspM5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NTU3Mg==", "bodyText": "How about this:\n<p>For instance, the actual {@link SessionProtocol} of the connection may differ from\nthe originally requested {@link SessionProtocol} depending on the result of protocol negotiation.\nSimilarly, the actual {@link Endpoint} of the request may differ from the originally requested\n{@link Endpoint}.\n\nDoes the new paragraph make sense and convey what you were trying to tell?", "url": "https://github.com/line/armeria/pull/2752#discussion_r449465572", "createdAt": "2020-07-03T08:57:38Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfigSelector.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.Proxy;\n+import java.net.ProxySelector;\n+import java.net.SocketAddress;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+/**\n+ * Selects the {@link ProxyConfig} to use when connecting to a network\n+ * resource specified by the {@link SessionProtocol} and {@link Endpoint} parameter.\n+ * This class may be used to dynamically control what proxy configuration\n+ * to use for each request.\n+\n+ * <p>It should be noted that the only guarantee provided is for a single request,\n+ * the {@link Endpoint} called with {@code select} will be equal to the {@link Endpoint}\n+ * called with {@code connectFailed}.</p>\n+ *\n+ * <p>For instance, the invoked {@link SessionProtocol} may change depending on the result of\n+ * protocol negotiation.\n+ * Additionally, we should note the {@link Endpoint} used to construct the request will not\n+ * necessarily be equal to the {@link Endpoint} in either callback method parameter.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70c5c8cedd773e6e74efa2806ffc64f57de0d1af"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTU3NjQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfigSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1OTowMlrOGspPqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1OTowMlrOGspPqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NjI4MA==", "bodyText": "Use <ul> and <li>.\nInstead of mentioning 'sun', could say like: JDK's default {@link ProxySelector} implementation", "url": "https://github.com/line/armeria/pull/2752#discussion_r449466280", "createdAt": "2020-07-03T08:59:02Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfigSelector.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.Proxy;\n+import java.net.ProxySelector;\n+import java.net.SocketAddress;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+/**\n+ * Selects the {@link ProxyConfig} to use when connecting to a network\n+ * resource specified by the {@link SessionProtocol} and {@link Endpoint} parameter.\n+ * This class may be used to dynamically control what proxy configuration\n+ * to use for each request.\n+\n+ * <p>It should be noted that the only guarantee provided is for a single request,\n+ * the {@link Endpoint} called with {@code select} will be equal to the {@link Endpoint}\n+ * called with {@code connectFailed}.</p>\n+ *\n+ * <p>For instance, the invoked {@link SessionProtocol} may change depending on the result of\n+ * protocol negotiation.\n+ * Additionally, we should note the {@link Endpoint} used to construct the request will not\n+ * necessarily be equal to the {@link Endpoint} in either callback method parameter.</p>\n+ */\n+@UnstableApi\n+public interface ProxyConfigSelector {\n+\n+    /**\n+     * Selects the {@link ProxyConfig} to use when connecting to a network\n+     * resource specified by the {@link SessionProtocol} and {@link Endpoint} parameter.\n+     *\n+     * @param protocol the protocol associated with the endpoint\n+     * @param endpoint an endpoint containing the requested host and port\n+     * @return the selected proxy config which should be non-null\n+     */\n+    ProxyConfig select(SessionProtocol protocol, Endpoint endpoint);\n+\n+    /**\n+     * Called to indicate a connection attempt to the specified {@link SessionProtocol}\n+     * and {@link Endpoint} has failed.\n+     *\n+     * @param protocol the protocol associated with the endpoint\n+     * @param endpoint an endpoint containing the requested host and port\n+     * @param sa the remote socket address of the proxy server\n+     * @param throwable the cause of the failure\n+     */\n+    void connectFailed(SessionProtocol protocol, Endpoint endpoint,\n+                       SocketAddress sa, Throwable throwable);\n+\n+    /**\n+     * Provides a way to re-use an existing {@link ProxySelector} with some limitations:\n+     * 1. Some incompatibilities when used with sun's {@code DefaultProxySelector}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70c5c8cedd773e6e74efa2806ffc64f57de0d1af"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTU3NjkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/Socks4ProxyConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1OToxM1rOGspP-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1OToxM1rOGspP-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NjM2Mw==", "bodyText": "Ditto - please move up.", "url": "https://github.com/line/armeria/pull/2752#discussion_r449466363", "createdAt": "2020-07-03T08:59:13Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/Socks4ProxyConfig.java", "diffHunk": "@@ -65,4 +64,22 @@ public String toString() {\n                           .add(\"username\", username())\n                           .toString();\n     }\n+\n+    @Override\n+    public boolean equals(@Nullable Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70c5c8cedd773e6e74efa2806ffc64f57de0d1af"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTU3NzcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/Socks5ProxyConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1OToyNVrOGspQcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1OToyNVrOGspQcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NjQ4Mw==", "bodyText": "Ditto - please move up.", "url": "https://github.com/line/armeria/pull/2752#discussion_r449466483", "createdAt": "2020-07-03T08:59:25Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/Socks5ProxyConfig.java", "diffHunk": "@@ -80,4 +79,23 @@ public String toString() {\n                           .omitNullValues()\n                           .toString();\n     }\n+\n+    @Override\n+    public boolean equals(@Nullable Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70c5c8cedd773e6e74efa2806ffc64f57de0d1af"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTU3OTAxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/StaticProxyConfigSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1OTo0NlrOGspRMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1OTo0NlrOGspRMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NjY3NA==", "bodyText": "Could be hidden from the public API?", "url": "https://github.com/line/armeria/pull/2752#discussion_r449466674", "createdAt": "2020-07-03T08:59:46Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/StaticProxyConfigSelector.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.SocketAddress;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.SessionProtocol;\n+\n+/**\n+ * A {@link ProxyConfigSelector} which selects a static {@link ProxyConfig}\n+ * for all requests.\n+ */\n+public final class StaticProxyConfigSelector implements ProxyConfigSelector {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70c5c8cedd773e6e74efa2806ffc64f57de0d1af"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDE3NzMwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/WrappingProxyConfigSelector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQwMzozNjoyMlrOGs_cWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMTozMjo0M1rOGtGfTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyOTk3OQ==", "bodyText": "I feel like this change deserves some explanation:\nEndpoint.toUri requires a serialization format (which was always none before introducing this method)\nHowever, serialization format may not necessarily be none. (i.e. tbinary calls with proxy)\nOn the other hand, a session shouldn't necessarily only use a single serialization format, hence I moved away from using Scheme for the callback methods.\nHence, I'd decided to omit SerializationFormat entirely from the uri scheme.", "url": "https://github.com/line/armeria/pull/2752#discussion_r449829979", "createdAt": "2020-07-05T03:36:22Z", "author": {"login": "jrhee17"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/WrappingProxyConfigSelector.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.ProxySelector;\n+import java.net.SocketAddress;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.SessionProtocol;\n+\n+/**\n+ * See {@link ProxyConfigSelector#of(ProxySelector)} for more information.\n+ */\n+final class WrappingProxyConfigSelector implements ProxyConfigSelector {\n+    private static final Logger logger = LoggerFactory.getLogger(WrappingProxyConfigSelector.class);\n+\n+    /**\n+     * Converts {@link SessionProtocol}, {@link Endpoint} to a uri without serialization format.\n+     */\n+    private static URI toUri(SessionProtocol sessionProtocol, Endpoint endpoint) {\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7a97c66e761c6396a6c3c6ee68298cc61d08e9"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk0NTQyMg==", "bodyText": "OK!", "url": "https://github.com/line/armeria/pull/2752#discussion_r449945422", "createdAt": "2020-07-06T01:32:43Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/WrappingProxyConfigSelector.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.ProxySelector;\n+import java.net.SocketAddress;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.SessionProtocol;\n+\n+/**\n+ * See {@link ProxyConfigSelector#of(ProxySelector)} for more information.\n+ */\n+final class WrappingProxyConfigSelector implements ProxyConfigSelector {\n+    private static final Logger logger = LoggerFactory.getLogger(WrappingProxyConfigSelector.class);\n+\n+    /**\n+     * Converts {@link SessionProtocol}, {@link Endpoint} to a uri without serialization format.\n+     */\n+    private static URI toUri(SessionProtocol sessionProtocol, Endpoint endpoint) {\n+        try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyOTk3OQ=="}, "originalCommit": {"oid": "8f7a97c66e761c6396a6c3c6ee68298cc61d08e9"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTA5NTMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfigSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMTozMTozNlrOGtGepA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMTozMTozNlrOGtGepA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk0NTI1Mg==", "bodyText": "re-use -> reuse\nInconsistent indentation. Could you use 2-space indentation for HTML tags?", "url": "https://github.com/line/armeria/pull/2752#discussion_r449945252", "createdAt": "2020-07-06T01:31:36Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfigSelector.java", "diffHunk": "@@ -67,16 +68,27 @@ void connectFailed(SessionProtocol protocol, Endpoint endpoint,\n                        SocketAddress sa, Throwable throwable);\n \n     /**\n-     * Provides a way to re-use an existing {@link ProxySelector} with some limitations:\n-     * 1. Some incompatibilities when used with sun's {@code DefaultProxySelector}\n-     *     - Some properties like socksProxyVersion aren't respected\n-     *     - This class doesn't attempt to resolve scheme format differences.\n-     *       For instance, sun's {@code DefaultProxySelector} requires basic scheme formats \"http\", \"https\".\n-     *       However, armeria uses scheme formats including serialization format (\"none+http\", \"tbinary+h1c\").\n-     *       This may be a source of unexpected behavior.\n-     * 2. Selecting multiple {@link Proxy} isn't supported.\n+     * Provides a way to re-use an existing {@link ProxySelector} with some limitations.\n+     * <ul>\n+     *     <li>Incompatibilities when used with JDK's default {@link ProxySelector} implementation:\n+     *       <ul>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f13eb963f9fe1f2dd6f97d015d86ce61a848d474"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTEwMDE4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMTozNjowOFrOGtGhhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMTozNjowOFrOGtGhhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk0NTk5MQ==", "bodyText": "How about making it clear that it's not fully compatible?\n<p>This method makes a best effort to provide compatibility with .., but it has some limitations.\nSee ...", "url": "https://github.com/line/armeria/pull/2752#discussion_r449945991", "createdAt": "2020-07-06T01:36:08Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -509,10 +511,32 @@ public ClientFactoryBuilder meterRegistry(MeterRegistry meterRegistry) {\n     }\n \n     /**\n-     * The {@link ProxyConfig} which contains proxy related configuration.\n+     * Sets the {@link ProxyConfig} which contains proxy related configuration.\n      */\n     public ClientFactoryBuilder proxyConfig(ProxyConfig proxyConfig) {\n-        option(ClientFactoryOption.PROXY_CONFIG, proxyConfig);\n+        requireNonNull(proxyConfig, \"proxyConfig\");\n+        option(ClientFactoryOption.PROXY_CONFIG_SELECTOR, ProxyConfigSelector.of(proxyConfig));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@link ProxySelector} which determines the {@link ProxyConfig} to be used.\n+     *\n+     * <p>This method makes a best effort to provide compatibility with {@link ProxySelector}.\n+     * See {@link ProxyConfigSelector#of(ProxySelector)} for more information.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7a97c66e761c6396a6c3c6ee68298cc61d08e9"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTEwMjYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMTozODoxMVrOGtGi-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMTozODoxMVrOGtGi-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk0NjM2MQ==", "bodyText": "\"Exception while invoking {}.connectFailed() for {}\",\nProxyConfigSelector.class.getSimpleName(), poolKey, t", "url": "https://github.com/line/armeria/pull/2752#discussion_r449946361", "createdAt": "2020-07-06T01:38:11Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "diffHunk": "@@ -382,27 +394,46 @@ private void connect(SessionProtocol desiredProtocol, PoolKey key, ChannelAcquis\n      * </ul>\n      */\n     void connect(SocketAddress remoteAddress, SessionProtocol desiredProtocol,\n-                 Promise<Channel> sessionPromise) {\n+                 PoolKey poolKey, Promise<Channel> sessionPromise) {\n+\n         final Bootstrap bootstrap = getBootstrap(desiredProtocol);\n-        final ChannelFuture connectFuture = bootstrap.connect(remoteAddress);\n+\n+        final Channel channel = bootstrap.register().channel();\n+        configureProxy(channel, poolKey.proxyConfig, desiredProtocol);\n+        final ChannelFuture connectFuture = channel.connect(remoteAddress);\n \n         connectFuture.addListener((ChannelFuture future) -> {\n             if (future.isSuccess()) {\n-                initSession(desiredProtocol, future, sessionPromise);\n+                initSession(desiredProtocol, poolKey, future, sessionPromise);\n             } else {\n+                invokeProxyConnectFailed(desiredProtocol, poolKey, future.cause());\n                 sessionPromise.tryFailure(future.cause());\n             }\n         });\n     }\n \n+    void invokeProxyConnectFailed(SessionProtocol protocol, PoolKey poolKey, Throwable cause) {\n+        try {\n+            final ProxyConfig proxyConfig = poolKey.proxyConfig;\n+            if (proxyConfig.proxyType() != ProxyType.DIRECT) {\n+                final InetSocketAddress proxyAddress = proxyConfig.proxyAddress();\n+                assert proxyAddress != null;\n+                proxyConfigSelector.connectFailed(protocol, Endpoint.of(poolKey.host, poolKey.port),\n+                                                  proxyAddress, UnprocessedRequestException.of(cause));\n+            }\n+        } catch (Throwable t) {\n+            logger.warn(\"Exception while invoking proxy connectFailed for {}\", poolKey, t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7a97c66e761c6396a6c3c6ee68298cc61d08e9"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTEwNzAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/DirectProxyConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMTo0MToyOFrOGtGlgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMTo0MToyOFrOGtGlgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk0NzAwOQ==", "bodyText": "OK to leave these methods as they are, but looks redundant.", "url": "https://github.com/line/armeria/pull/2752#discussion_r449947009", "createdAt": "2020-07-06T01:41:28Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/proxy/DirectProxyConfig.java", "diffHunk": "@@ -33,8 +35,23 @@ public ProxyType proxyType() {\n         return ProxyType.DIRECT;\n     }\n \n+    @Override\n+    public InetSocketAddress proxyAddress() {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean equals(@Nullable Object obj) {\n+        return this == obj;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return System.identityHashCode(this);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7a97c66e761c6396a6c3c6ee68298cc61d08e9"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTEwOTUyOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMTo0Mzo0N1rOGtGm9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMTo0Mzo0N1rOGtGm9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk0NzM4Mw==", "bodyText": "IIRC we don't need this at all. If no port is specified, it automatically adds this for you.", "url": "https://github.com/line/armeria/pull/2752#discussion_r449947383", "createdAt": "2020-07-06T01:43:47Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java", "diffHunk": "@@ -118,7 +131,7 @@\n     static ServerExtension backendServer = new ServerExtension() {\n         @Override\n         protected void configure(ServerBuilder sb) throws Exception {\n-            sb.port(0, SessionProtocol.HTTP);\n+            sb.port(0, HTTP);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7a97c66e761c6396a6c3c6ee68298cc61d08e9"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDAzMzgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzozNDo1NFrOGubtOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNDoyNzo1NVrOGuqyAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0MTYyNA==", "bodyText": "Question: What happens if sslCtx is applied twice? here and in HttpClientPipelineConfigurator?", "url": "https://github.com/line/armeria/pull/2752#discussion_r451341624", "createdAt": "2020-07-08T07:34:54Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "diffHunk": "@@ -139,43 +143,51 @@ protected void initChannel(Channel ch) throws Exception {\n         useHttp1Pipelining = clientFactory.useHttp1Pipelining();\n         idleTimeoutMillis = clientFactory.idleTimeoutMillis();\n         pingIntervalMillis = clientFactory.pingIntervalMillis();\n-        proxyConfig = clientFactory.proxyConfig();\n+        proxyConfigSelector = clientFactory.proxyConfigSelector();\n+    }\n+\n+    private SslContext determineSslContext(SessionProtocol desiredProtocol) {\n+        return desiredProtocol == SessionProtocol.H1 || desiredProtocol == SessionProtocol.H1C ?\n+               sslCtxHttp1Only : sslCtxHttp1Or2;\n     }\n \n-    private void configureProxy(Channel ch, ProxyConfig proxyConfig, SslContext sslCtx) {\n+    private void configureProxy(Channel ch, ProxyConfig proxyConfig, SessionProtocol desiredProtocol) {\n+        if (proxyConfig.proxyType() == ProxyType.DIRECT) {\n+            return;\n+        }\n         final ProxyHandler proxyHandler;\n+        final InetSocketAddress proxyAddress = proxyConfig.proxyAddress();\n+        assert proxyAddress != null;\n         switch (proxyConfig.proxyType()) {\n-            case DIRECT:\n-                return;\n             case SOCKS4:\n                 final Socks4ProxyConfig socks4ProxyConfig = (Socks4ProxyConfig) proxyConfig;\n-                proxyHandler = new Socks4ProxyHandler(socks4ProxyConfig.proxyAddress(),\n-                                                      socks4ProxyConfig.username());\n+                proxyHandler = new Socks4ProxyHandler(proxyAddress, socks4ProxyConfig.username());\n                 break;\n             case SOCKS5:\n                 final Socks5ProxyConfig socks5ProxyConfig = (Socks5ProxyConfig) proxyConfig;\n-                proxyHandler = new Socks5ProxyHandler(\n-                        socks5ProxyConfig.proxyAddress(), socks5ProxyConfig.username(),\n-                        socks5ProxyConfig.password());\n+                proxyHandler = new Socks5ProxyHandler(proxyAddress, socks5ProxyConfig.username(),\n+                                                      socks5ProxyConfig.password());\n                 break;\n             case CONNECT:\n                 final ConnectProxyConfig connectProxyConfig = (ConnectProxyConfig) proxyConfig;\n                 final String username = connectProxyConfig.username();\n                 final String password = connectProxyConfig.password();\n                 if (username == null || password == null) {\n-                    proxyHandler = new HttpProxyHandler(connectProxyConfig.proxyAddress());\n+                    proxyHandler = new HttpProxyHandler(proxyAddress);\n                 } else {\n-                    proxyHandler = new HttpProxyHandler(connectProxyConfig.proxyAddress(), username, password);\n-                }\n-                if (connectProxyConfig.useTls()) {\n-                    ch.pipeline().addLast(sslCtx.newHandler(ch.alloc()));\n+                    proxyHandler = new HttpProxyHandler(proxyAddress, username, password);\n                 }\n                 break;\n             default:\n                 throw new Error(); // Should never reach here.\n         }\n         proxyHandler.setConnectTimeoutMillis(connectTimeoutMillis);\n-        ch.pipeline().addLast(proxyHandler);\n+        ch.pipeline().addFirst(proxyHandler);\n+\n+        if (proxyConfig instanceof ConnectProxyConfig && ((ConnectProxyConfig) proxyConfig).useTls()) {\n+            final SslContext sslCtx = determineSslContext(desiredProtocol);\n+            ch.pipeline().addFirst(sslCtx.newHandler(ch.alloc()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f375edf8940b63bf54fdd751a19165475092807c"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQzNTkwNQ==", "bodyText": "Nothing interesting \ud83d\ude04  just ssl is applied twice.\nLet me add an integration test to make sure this behavior isn't broken in the future though", "url": "https://github.com/line/armeria/pull/2752#discussion_r451435905", "createdAt": "2020-07-08T10:16:30Z", "author": {"login": "jrhee17"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "diffHunk": "@@ -139,43 +143,51 @@ protected void initChannel(Channel ch) throws Exception {\n         useHttp1Pipelining = clientFactory.useHttp1Pipelining();\n         idleTimeoutMillis = clientFactory.idleTimeoutMillis();\n         pingIntervalMillis = clientFactory.pingIntervalMillis();\n-        proxyConfig = clientFactory.proxyConfig();\n+        proxyConfigSelector = clientFactory.proxyConfigSelector();\n+    }\n+\n+    private SslContext determineSslContext(SessionProtocol desiredProtocol) {\n+        return desiredProtocol == SessionProtocol.H1 || desiredProtocol == SessionProtocol.H1C ?\n+               sslCtxHttp1Only : sslCtxHttp1Or2;\n     }\n \n-    private void configureProxy(Channel ch, ProxyConfig proxyConfig, SslContext sslCtx) {\n+    private void configureProxy(Channel ch, ProxyConfig proxyConfig, SessionProtocol desiredProtocol) {\n+        if (proxyConfig.proxyType() == ProxyType.DIRECT) {\n+            return;\n+        }\n         final ProxyHandler proxyHandler;\n+        final InetSocketAddress proxyAddress = proxyConfig.proxyAddress();\n+        assert proxyAddress != null;\n         switch (proxyConfig.proxyType()) {\n-            case DIRECT:\n-                return;\n             case SOCKS4:\n                 final Socks4ProxyConfig socks4ProxyConfig = (Socks4ProxyConfig) proxyConfig;\n-                proxyHandler = new Socks4ProxyHandler(socks4ProxyConfig.proxyAddress(),\n-                                                      socks4ProxyConfig.username());\n+                proxyHandler = new Socks4ProxyHandler(proxyAddress, socks4ProxyConfig.username());\n                 break;\n             case SOCKS5:\n                 final Socks5ProxyConfig socks5ProxyConfig = (Socks5ProxyConfig) proxyConfig;\n-                proxyHandler = new Socks5ProxyHandler(\n-                        socks5ProxyConfig.proxyAddress(), socks5ProxyConfig.username(),\n-                        socks5ProxyConfig.password());\n+                proxyHandler = new Socks5ProxyHandler(proxyAddress, socks5ProxyConfig.username(),\n+                                                      socks5ProxyConfig.password());\n                 break;\n             case CONNECT:\n                 final ConnectProxyConfig connectProxyConfig = (ConnectProxyConfig) proxyConfig;\n                 final String username = connectProxyConfig.username();\n                 final String password = connectProxyConfig.password();\n                 if (username == null || password == null) {\n-                    proxyHandler = new HttpProxyHandler(connectProxyConfig.proxyAddress());\n+                    proxyHandler = new HttpProxyHandler(proxyAddress);\n                 } else {\n-                    proxyHandler = new HttpProxyHandler(connectProxyConfig.proxyAddress(), username, password);\n-                }\n-                if (connectProxyConfig.useTls()) {\n-                    ch.pipeline().addLast(sslCtx.newHandler(ch.alloc()));\n+                    proxyHandler = new HttpProxyHandler(proxyAddress, username, password);\n                 }\n                 break;\n             default:\n                 throw new Error(); // Should never reach here.\n         }\n         proxyHandler.setConnectTimeoutMillis(connectTimeoutMillis);\n-        ch.pipeline().addLast(proxyHandler);\n+        ch.pipeline().addFirst(proxyHandler);\n+\n+        if (proxyConfig instanceof ConnectProxyConfig && ((ConnectProxyConfig) proxyConfig).useTls()) {\n+            final SslContext sslCtx = determineSslContext(desiredProtocol);\n+            ch.pipeline().addFirst(sslCtx.newHandler(ch.alloc()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0MTYyNA=="}, "originalCommit": {"oid": "f375edf8940b63bf54fdd751a19165475092807c"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU4ODYxMQ==", "bodyText": "This is embarrassing... but found a bug thanks to your comment \ud83d\udc4d\nLet me handle this issue in a separate PR \ud83d\ude47", "url": "https://github.com/line/armeria/pull/2752#discussion_r451588611", "createdAt": "2020-07-08T14:27:55Z", "author": {"login": "jrhee17"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "diffHunk": "@@ -139,43 +143,51 @@ protected void initChannel(Channel ch) throws Exception {\n         useHttp1Pipelining = clientFactory.useHttp1Pipelining();\n         idleTimeoutMillis = clientFactory.idleTimeoutMillis();\n         pingIntervalMillis = clientFactory.pingIntervalMillis();\n-        proxyConfig = clientFactory.proxyConfig();\n+        proxyConfigSelector = clientFactory.proxyConfigSelector();\n+    }\n+\n+    private SslContext determineSslContext(SessionProtocol desiredProtocol) {\n+        return desiredProtocol == SessionProtocol.H1 || desiredProtocol == SessionProtocol.H1C ?\n+               sslCtxHttp1Only : sslCtxHttp1Or2;\n     }\n \n-    private void configureProxy(Channel ch, ProxyConfig proxyConfig, SslContext sslCtx) {\n+    private void configureProxy(Channel ch, ProxyConfig proxyConfig, SessionProtocol desiredProtocol) {\n+        if (proxyConfig.proxyType() == ProxyType.DIRECT) {\n+            return;\n+        }\n         final ProxyHandler proxyHandler;\n+        final InetSocketAddress proxyAddress = proxyConfig.proxyAddress();\n+        assert proxyAddress != null;\n         switch (proxyConfig.proxyType()) {\n-            case DIRECT:\n-                return;\n             case SOCKS4:\n                 final Socks4ProxyConfig socks4ProxyConfig = (Socks4ProxyConfig) proxyConfig;\n-                proxyHandler = new Socks4ProxyHandler(socks4ProxyConfig.proxyAddress(),\n-                                                      socks4ProxyConfig.username());\n+                proxyHandler = new Socks4ProxyHandler(proxyAddress, socks4ProxyConfig.username());\n                 break;\n             case SOCKS5:\n                 final Socks5ProxyConfig socks5ProxyConfig = (Socks5ProxyConfig) proxyConfig;\n-                proxyHandler = new Socks5ProxyHandler(\n-                        socks5ProxyConfig.proxyAddress(), socks5ProxyConfig.username(),\n-                        socks5ProxyConfig.password());\n+                proxyHandler = new Socks5ProxyHandler(proxyAddress, socks5ProxyConfig.username(),\n+                                                      socks5ProxyConfig.password());\n                 break;\n             case CONNECT:\n                 final ConnectProxyConfig connectProxyConfig = (ConnectProxyConfig) proxyConfig;\n                 final String username = connectProxyConfig.username();\n                 final String password = connectProxyConfig.password();\n                 if (username == null || password == null) {\n-                    proxyHandler = new HttpProxyHandler(connectProxyConfig.proxyAddress());\n+                    proxyHandler = new HttpProxyHandler(proxyAddress);\n                 } else {\n-                    proxyHandler = new HttpProxyHandler(connectProxyConfig.proxyAddress(), username, password);\n-                }\n-                if (connectProxyConfig.useTls()) {\n-                    ch.pipeline().addLast(sslCtx.newHandler(ch.alloc()));\n+                    proxyHandler = new HttpProxyHandler(proxyAddress, username, password);\n                 }\n                 break;\n             default:\n                 throw new Error(); // Should never reach here.\n         }\n         proxyHandler.setConnectTimeoutMillis(connectTimeoutMillis);\n-        ch.pipeline().addLast(proxyHandler);\n+        ch.pipeline().addFirst(proxyHandler);\n+\n+        if (proxyConfig instanceof ConnectProxyConfig && ((ConnectProxyConfig) proxyConfig).useTls()) {\n+            final SslContext sslCtx = determineSslContext(desiredProtocol);\n+            ch.pipeline().addFirst(sslCtx.newHandler(ch.alloc()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0MTYyNA=="}, "originalCommit": {"oid": "f375edf8940b63bf54fdd751a19165475092807c"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDA2ODA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzo0NDo1MFrOGucCRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMDo1Mjo0NlrOGu9-3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0NzAxMw==", "bodyText": "Let's just return here.\nAnd we should use handleEarlyRequestException() if the proxyConfig is null instead of throwing an NPE.", "url": "https://github.com/line/armeria/pull/2752#discussion_r451347013", "createdAt": "2020-07-08T07:44:50Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java", "diffHunk": "@@ -159,6 +165,20 @@ private void acquireConnectionAndExecute(ClientRequestContext ctx, Endpoint endp\n         }\n     }\n \n+    private ProxyConfig selectProxyConfig(SessionProtocol sessionProtocol, String host, int port) {\n+        ProxyConfig proxyConfig;\n+        try {\n+            final Endpoint endpoint = Endpoint.of(host, port);\n+            proxyConfig = factory.proxyConfigSelector().select(sessionProtocol, endpoint);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f375edf8940b63bf54fdd751a19165475092807c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0ODkzMw==", "bodyText": "Ah, I forgot that the exception is caught by the below line. \ud83d\ude05\nSo I guess it's okay then. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2752#discussion_r451348933", "createdAt": "2020-07-08T07:48:24Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java", "diffHunk": "@@ -159,6 +165,20 @@ private void acquireConnectionAndExecute(ClientRequestContext ctx, Endpoint endp\n         }\n     }\n \n+    private ProxyConfig selectProxyConfig(SessionProtocol sessionProtocol, String host, int port) {\n+        ProxyConfig proxyConfig;\n+        try {\n+            final Endpoint endpoint = Endpoint.of(host, port);\n+            proxyConfig = factory.proxyConfigSelector().select(sessionProtocol, endpoint);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0NzAxMw=="}, "originalCommit": {"oid": "f375edf8940b63bf54fdd751a19165475092807c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQzNTU0Ng==", "bodyText": "Sorry reviewers\nThis comment actually made me realize the API might be cleaner if we just throw as @minwoox suggested.\nAs a user, I don't think I would want random direct requests.\nLet me work on a quick fix to just fail immediately in a separate revertable commit -- meanwhile any feedback is appreciated", "url": "https://github.com/line/armeria/pull/2752#discussion_r451435546", "createdAt": "2020-07-08T10:15:44Z", "author": {"login": "jrhee17"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java", "diffHunk": "@@ -159,6 +165,20 @@ private void acquireConnectionAndExecute(ClientRequestContext ctx, Endpoint endp\n         }\n     }\n \n+    private ProxyConfig selectProxyConfig(SessionProtocol sessionProtocol, String host, int port) {\n+        ProxyConfig proxyConfig;\n+        try {\n+            final Endpoint endpoint = Endpoint.of(host, port);\n+            proxyConfig = factory.proxyConfigSelector().select(sessionProtocol, endpoint);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0NzAxMw=="}, "originalCommit": {"oid": "f375edf8940b63bf54fdd751a19165475092807c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYxMTg0Ng==", "bodyText": "Pushed a small commit: f5c687e\nDo let me know if you guys prefer the previous behavior though..", "url": "https://github.com/line/armeria/pull/2752#discussion_r451611846", "createdAt": "2020-07-08T14:58:54Z", "author": {"login": "jrhee17"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java", "diffHunk": "@@ -159,6 +165,20 @@ private void acquireConnectionAndExecute(ClientRequestContext ctx, Endpoint endp\n         }\n     }\n \n+    private ProxyConfig selectProxyConfig(SessionProtocol sessionProtocol, String host, int port) {\n+        ProxyConfig proxyConfig;\n+        try {\n+            final Endpoint endpoint = Endpoint.of(host, port);\n+            proxyConfig = factory.proxyConfigSelector().select(sessionProtocol, endpoint);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0NzAxMw=="}, "originalCommit": {"oid": "f375edf8940b63bf54fdd751a19165475092807c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYzMjY1NQ==", "bodyText": "Still LGTM", "url": "https://github.com/line/armeria/pull/2752#discussion_r451632655", "createdAt": "2020-07-08T15:27:38Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java", "diffHunk": "@@ -159,6 +165,20 @@ private void acquireConnectionAndExecute(ClientRequestContext ctx, Endpoint endp\n         }\n     }\n \n+    private ProxyConfig selectProxyConfig(SessionProtocol sessionProtocol, String host, int port) {\n+        ProxyConfig proxyConfig;\n+        try {\n+            final Endpoint endpoint = Endpoint.of(host, port);\n+            proxyConfig = factory.proxyConfigSelector().select(sessionProtocol, endpoint);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0NzAxMw=="}, "originalCommit": {"oid": "f375edf8940b63bf54fdd751a19165475092807c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwMzE5Nw==", "bodyText": "\ud83d\udc4d \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/2752#discussion_r451903197", "createdAt": "2020-07-09T00:52:46Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java", "diffHunk": "@@ -159,6 +165,20 @@ private void acquireConnectionAndExecute(ClientRequestContext ctx, Endpoint endp\n         }\n     }\n \n+    private ProxyConfig selectProxyConfig(SessionProtocol sessionProtocol, String host, int port) {\n+        ProxyConfig proxyConfig;\n+        try {\n+            final Endpoint endpoint = Endpoint.of(host, port);\n+            proxyConfig = factory.proxyConfigSelector().select(sessionProtocol, endpoint);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0NzAxMw=="}, "originalCommit": {"oid": "f375edf8940b63bf54fdd751a19165475092807c"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2296, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}