{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NzYyNzYz", "number": 2954, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNjo1MDozNFrOET8vzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODo1ODoxNlrOEUhiIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzUzNjc5OnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConvertersConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNjo1MDozNFrOG593og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOTozNjoxN1rOG6CXIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNTY4Mg==", "bodyText": "Could we use org.springframework.format.FormatterRegistrar just like  org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar did?", "url": "https://github.com/line/armeria/pull/2954#discussion_r463435682", "createdAt": "2020-07-31T06:50:34Z", "author": {"login": "trustin"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConvertersConfiguration.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import java.util.List;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.support.ConversionServiceFactoryBean;\n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.convert.converter.Converter;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Provides useful {@link Converter}s.\n+ */\n+@Configuration\n+public class ArmeriaSpringBoot1ConvertersConfiguration {\n+\n+    /**\n+     * Create an {@link ConversionService} bean.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean(ConversionService.class)\n+    public ConversionServiceFactoryBean conversionService(List<Converter> converterList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0001df9ee9b0b45fef171807e23b2c108709b6e7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwOTI4Mw==", "bodyText": "I added ArmeriaSpringBoot1FormatterRegistrar \ud83d\ude0a", "url": "https://github.com/line/armeria/pull/2954#discussion_r463509283", "createdAt": "2020-07-31T09:36:17Z", "author": {"login": "heowc"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConvertersConfiguration.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import java.util.List;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.support.ConversionServiceFactoryBean;\n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.convert.converter.Converter;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Provides useful {@link Converter}s.\n+ */\n+@Configuration\n+public class ArmeriaSpringBoot1ConvertersConfiguration {\n+\n+    /**\n+     * Create an {@link ConversionService} bean.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean(ConversionService.class)\n+    public ConversionServiceFactoryBean conversionService(List<Converter> converterList) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNTY4Mg=="}, "originalCommit": {"oid": "0001df9ee9b0b45fef171807e23b2c108709b6e7"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzUzODUwOnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNjo1MToyMlrOG594qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOTozNjoyNFrOG6CXSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNTk0Nw==", "bodyText": "Please add their license header after ours if you forked.", "url": "https://github.com/line/armeria/pull/2954#discussion_r463435947", "createdAt": "2020-07-31T06:51:22Z", "author": {"login": "trustin"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ *\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0001df9ee9b0b45fef171807e23b2c108709b6e7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwOTMyMQ==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2954#discussion_r463509321", "createdAt": "2020-07-31T09:36:24Z", "author": {"login": "heowc"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ *\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNTk0Nw=="}, "originalCommit": {"oid": "0001df9ee9b0b45fef171807e23b2c108709b6e7"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzU0MDMyOnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/StringToDurationConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNjo1MjowNlrOG595rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOTozNjozM1rOG6CXkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNjIwNA==", "bodyText": "Is it possible to hide this class from the public API, i.e. remove public?", "url": "https://github.com/line/armeria/pull/2954#discussion_r463436204", "createdAt": "2020-07-31T06:52:06Z", "author": {"login": "trustin"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/StringToDurationConverter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+\n+import org.springframework.core.convert.converter.Converter;\n+\n+/**\n+ * Convert {@link String} to {@link Duration}.\n+ */\n+public class StringToDurationConverter implements Converter<String, Duration> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0001df9ee9b0b45fef171807e23b2c108709b6e7"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwOTM5Mg==", "bodyText": "Removed", "url": "https://github.com/line/armeria/pull/2954#discussion_r463509392", "createdAt": "2020-07-31T09:36:33Z", "author": {"login": "heowc"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/StringToDurationConverter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+\n+import org.springframework.core.convert.converter.Converter;\n+\n+/**\n+ * Convert {@link String} to {@link Duration}.\n+ */\n+public class StringToDurationConverter implements Converter<String, Duration> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNjIwNA=="}, "originalCommit": {"oid": "0001df9ee9b0b45fef171807e23b2c108709b6e7"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzU0NDA1OnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNjo1Mzo0NFrOG5976A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOTozNjozNVrOG6CXog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNjc3Ng==", "bodyText": "Could we remove public from all members? DurationStyle is package-local, so there's no point of putting public in this class.", "url": "https://github.com/line/armeria/pull/2954#discussion_r463436776", "createdAt": "2020-07-31T06:53:44Z", "author": {"login": "trustin"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ *\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+\n+        @Override\n+        public Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            }\n+            catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        public String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+\n+        @Override\n+        public Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            }\n+            catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        public String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    public Duration parse(String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0001df9ee9b0b45fef171807e23b2c108709b6e7"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwOTQxMA==", "bodyText": "Removed", "url": "https://github.com/line/armeria/pull/2954#discussion_r463509410", "createdAt": "2020-07-31T09:36:35Z", "author": {"login": "heowc"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ *\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+\n+        @Override\n+        public Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            }\n+            catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        public String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+\n+        @Override\n+        public Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            }\n+            catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        public String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    public Duration parse(String value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNjc3Ng=="}, "originalCommit": {"oid": "0001df9ee9b0b45fef171807e23b2c108709b6e7"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDcyNTI3OnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo0Mjo0MVrOG6JBMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDo1ODowNVrOG6LqPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYxODM1Mw==", "bodyText": "nit: Could remove empty lines", "url": "https://github.com/line/armeria/pull/2954#discussion_r463618353", "createdAt": "2020-07-31T13:42:41Z", "author": {"login": "trustin"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ *\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {\n+        return detectAndParse(value, null);\n+    }\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value, ChronoUnit unit) {\n+        return detect(value).parse(value, unit);\n+    }\n+\n+    /**\n+     * Detect the style from the given source value.\n+     * @param value the source value\n+     * @return the duration style\n+     * @throws IllegalArgumentException if the value is not a known style\n+     */\n+    static DurationStyle detect(String value) {\n+        Assert.notNull(value, \"Value must not be null\");\n+        for (DurationStyle candidate : values()) {\n+            if (candidate.matches(value)) {\n+                return candidate;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"'\" + value + \"' is not a valid duration\");\n+    }\n+\n+    /**\n+     * Units that we support.\n+     */\n+    enum Unit {\n+\n+        /**\n+         * Nanoseconds.\n+         */\n+        NANOS(ChronoUnit.NANOS, \"ns\", Duration::toNanos),\n+\n+        /**\n+         * Microseconds.\n+         */\n+        MICROS(ChronoUnit.MICROS, \"us\", (duration) -> duration.toMillis() * 1000L),\n+\n+        /**\n+         * Milliseconds.\n+         */\n+        MILLIS(ChronoUnit.MILLIS, \"ms\", Duration::toMillis),\n+\n+        /**\n+         * Seconds.\n+         */\n+        SECONDS(ChronoUnit.SECONDS, \"s\", Duration::getSeconds),\n+\n+        /**\n+         * Minutes.\n+         */\n+        MINUTES(ChronoUnit.MINUTES, \"m\", Duration::toMinutes),\n+\n+        /**\n+         * Hours.\n+         */\n+        HOURS(ChronoUnit.HOURS, \"h\", Duration::toHours),\n+\n+        /**\n+         * Days.\n+         */\n+        DAYS(ChronoUnit.DAYS, \"d\", Duration::toDays);\n+\n+        private final ChronoUnit chronoUnit;\n+\n+        private final String suffix;\n+\n+        private Function<Duration, Long> longValue;\n+\n+        Unit(ChronoUnit chronoUnit, String suffix, Function<Duration, Long> toUnit) {\n+            this.chronoUnit = chronoUnit;\n+            this.suffix = suffix;\n+            this.longValue = toUnit;\n+        }\n+\n+        Duration parse(String value) {\n+            return Duration.of(Long.parseLong(value), this.chronoUnit);\n+        }\n+\n+        String print(Duration value) {\n+            return longValue(value) + this.suffix;\n+        }\n+\n+        long longValue(Duration value) {\n+            return this.longValue.apply(value);\n+        }\n+\n+        static Unit fromChronoUnit(ChronoUnit chronoUnit) {\n+            if (chronoUnit == null) {\n+                return Unit.MILLIS;\n+            }\n+            for (Unit candidate : values()) {\n+                if (candidate.chronoUnit == chronoUnit) {\n+                    return candidate;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"Unknown unit \" + chronoUnit);\n+        }\n+\n+        static Unit fromSuffix(String suffix) {\n+            for (Unit candidate : values()) {\n+                if (candidate.suffix.equalsIgnoreCase(suffix)) {\n+                    return candidate;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"Unknown unit '\" + suffix + \"'\");\n+        }\n+\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65abd723a14d76d358b2c797a78f9959f8931ccb"}, "originalPosition": 271}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2MTYzMA==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2954#discussion_r463661630", "createdAt": "2020-07-31T14:58:05Z", "author": {"login": "heowc"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ *\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {\n+        return detectAndParse(value, null);\n+    }\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value, ChronoUnit unit) {\n+        return detect(value).parse(value, unit);\n+    }\n+\n+    /**\n+     * Detect the style from the given source value.\n+     * @param value the source value\n+     * @return the duration style\n+     * @throws IllegalArgumentException if the value is not a known style\n+     */\n+    static DurationStyle detect(String value) {\n+        Assert.notNull(value, \"Value must not be null\");\n+        for (DurationStyle candidate : values()) {\n+            if (candidate.matches(value)) {\n+                return candidate;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"'\" + value + \"' is not a valid duration\");\n+    }\n+\n+    /**\n+     * Units that we support.\n+     */\n+    enum Unit {\n+\n+        /**\n+         * Nanoseconds.\n+         */\n+        NANOS(ChronoUnit.NANOS, \"ns\", Duration::toNanos),\n+\n+        /**\n+         * Microseconds.\n+         */\n+        MICROS(ChronoUnit.MICROS, \"us\", (duration) -> duration.toMillis() * 1000L),\n+\n+        /**\n+         * Milliseconds.\n+         */\n+        MILLIS(ChronoUnit.MILLIS, \"ms\", Duration::toMillis),\n+\n+        /**\n+         * Seconds.\n+         */\n+        SECONDS(ChronoUnit.SECONDS, \"s\", Duration::getSeconds),\n+\n+        /**\n+         * Minutes.\n+         */\n+        MINUTES(ChronoUnit.MINUTES, \"m\", Duration::toMinutes),\n+\n+        /**\n+         * Hours.\n+         */\n+        HOURS(ChronoUnit.HOURS, \"h\", Duration::toHours),\n+\n+        /**\n+         * Days.\n+         */\n+        DAYS(ChronoUnit.DAYS, \"d\", Duration::toDays);\n+\n+        private final ChronoUnit chronoUnit;\n+\n+        private final String suffix;\n+\n+        private Function<Duration, Long> longValue;\n+\n+        Unit(ChronoUnit chronoUnit, String suffix, Function<Duration, Long> toUnit) {\n+            this.chronoUnit = chronoUnit;\n+            this.suffix = suffix;\n+            this.longValue = toUnit;\n+        }\n+\n+        Duration parse(String value) {\n+            return Duration.of(Long.parseLong(value), this.chronoUnit);\n+        }\n+\n+        String print(Duration value) {\n+            return longValue(value) + this.suffix;\n+        }\n+\n+        long longValue(Duration value) {\n+            return this.longValue.apply(value);\n+        }\n+\n+        static Unit fromChronoUnit(ChronoUnit chronoUnit) {\n+            if (chronoUnit == null) {\n+                return Unit.MILLIS;\n+            }\n+            for (Unit candidate : values()) {\n+                if (candidate.chronoUnit == chronoUnit) {\n+                    return candidate;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"Unknown unit \" + chronoUnit);\n+        }\n+\n+        static Unit fromSuffix(String suffix) {\n+            for (Unit candidate : values()) {\n+                if (candidate.suffix.equalsIgnoreCase(suffix)) {\n+                    return candidate;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"Unknown unit '\" + suffix + \"'\");\n+        }\n+\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYxODM1Mw=="}, "originalCommit": {"oid": "65abd723a14d76d358b2c797a78f9959f8931ccb"}, "originalPosition": 271}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDc2ODM5OnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConversionServiceConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo1Mzo0NlrOG6Jaqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDo1ODoxMFrOG6LqZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNDg3NQ==", "bodyText": "Creates a new", "url": "https://github.com/line/armeria/pull/2954#discussion_r463624875", "createdAt": "2020-07-31T13:53:46Z", "author": {"login": "trustin"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConversionServiceConfiguration.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.format.support.FormattingConversionService;\n+import org.springframework.format.support.FormattingConversionServiceFactoryBean;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Provides useful {@link ConversionService}.\n+ */\n+@Configuration\n+public class ArmeriaSpringBoot1ConversionServiceConfiguration {\n+\n+    /**\n+     * Create an {@link ConversionService} bean.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65abd723a14d76d358b2c797a78f9959f8931ccb"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2MTY3MQ==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2954#discussion_r463661671", "createdAt": "2020-07-31T14:58:10Z", "author": {"login": "heowc"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConversionServiceConfiguration.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.format.support.FormattingConversionService;\n+import org.springframework.format.support.FormattingConversionServiceFactoryBean;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Provides useful {@link ConversionService}.\n+ */\n+@Configuration\n+public class ArmeriaSpringBoot1ConversionServiceConfiguration {\n+\n+    /**\n+     * Create an {@link ConversionService} bean.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNDg3NQ=="}, "originalCommit": {"oid": "65abd723a14d76d358b2c797a78f9959f8931ccb"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDc3Mjg3OnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConversionServiceConfiguration.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo1NDo1M1rOG6JdWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzo1ODoyNVrOG6rb7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNTU2MA==", "bodyText": "Creates a new\nI don't understand what the second sentence means. Could you explain?", "url": "https://github.com/line/armeria/pull/2954#discussion_r463625560", "createdAt": "2020-07-31T13:54:53Z", "author": {"login": "trustin"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConversionServiceConfiguration.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.format.support.FormattingConversionService;\n+import org.springframework.format.support.FormattingConversionServiceFactoryBean;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Provides useful {@link ConversionService}.\n+ */\n+@Configuration\n+public class ArmeriaSpringBoot1ConversionServiceConfiguration {\n+\n+    /**\n+     * Create an {@link ConversionService} bean.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean(ConversionService.class)\n+    public FormattingConversionService conversionService() {\n+        final FormattingConversionServiceFactoryBean factoryBean = new FormattingConversionServiceFactoryBean();\n+        factoryBean.setFormatterRegistrars(Sets.newHashSet(new ArmeriaSpringBoot1FormatterRegistrar()));\n+        factoryBean.afterPropertiesSet();\n+        return factoryBean.getObject();\n+    }\n+\n+    /**\n+     * Create an {@link StringToDurationConverter} bean. If {@link ConversionService} is already registered,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65abd723a14d76d358b2c797a78f9959f8931ccb"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2MTA1OQ==", "bodyText": "Because ConversionService can only make one bean, StringToDurationConverter may not be registered if you add it in other settings. That's why I provided a way to register it with different settings.", "url": "https://github.com/line/armeria/pull/2954#discussion_r463661059", "createdAt": "2020-07-31T14:57:05Z", "author": {"login": "heowc"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConversionServiceConfiguration.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.format.support.FormattingConversionService;\n+import org.springframework.format.support.FormattingConversionServiceFactoryBean;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Provides useful {@link ConversionService}.\n+ */\n+@Configuration\n+public class ArmeriaSpringBoot1ConversionServiceConfiguration {\n+\n+    /**\n+     * Create an {@link ConversionService} bean.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean(ConversionService.class)\n+    public FormattingConversionService conversionService() {\n+        final FormattingConversionServiceFactoryBean factoryBean = new FormattingConversionServiceFactoryBean();\n+        factoryBean.setFormatterRegistrars(Sets.newHashSet(new ArmeriaSpringBoot1FormatterRegistrar()));\n+        factoryBean.afterPropertiesSet();\n+        return factoryBean.getObject();\n+    }\n+\n+    /**\n+     * Create an {@link StringToDurationConverter} bean. If {@link ConversionService} is already registered,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNTU2MA=="}, "originalCommit": {"oid": "65abd723a14d76d358b2c797a78f9959f8931ccb"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE4MjI1NQ==", "bodyText": "I deleted this javadoc. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2954#discussion_r464182255", "createdAt": "2020-08-03T03:58:25Z", "author": {"login": "heowc"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConversionServiceConfiguration.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.format.support.FormattingConversionService;\n+import org.springframework.format.support.FormattingConversionServiceFactoryBean;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Provides useful {@link ConversionService}.\n+ */\n+@Configuration\n+public class ArmeriaSpringBoot1ConversionServiceConfiguration {\n+\n+    /**\n+     * Create an {@link ConversionService} bean.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean(ConversionService.class)\n+    public FormattingConversionService conversionService() {\n+        final FormattingConversionServiceFactoryBean factoryBean = new FormattingConversionServiceFactoryBean();\n+        factoryBean.setFormatterRegistrars(Sets.newHashSet(new ArmeriaSpringBoot1FormatterRegistrar()));\n+        factoryBean.afterPropertiesSet();\n+        return factoryBean.getObject();\n+    }\n+\n+    /**\n+     * Create an {@link StringToDurationConverter} bean. If {@link ConversionService} is already registered,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNTU2MA=="}, "originalCommit": {"oid": "65abd723a14d76d358b2c797a78f9959f8931ccb"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDc3NDIwOnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1FormatterRegistrar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo1NToxNFrOG6JeJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDo1ODoxNVrOG6LqlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNTc2NA==", "bodyText": "Could just inline this method?", "url": "https://github.com/line/armeria/pull/2954#discussion_r463625764", "createdAt": "2020-07-31T13:55:14Z", "author": {"login": "trustin"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1FormatterRegistrar.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.format.FormatterRegistrar;\n+import org.springframework.format.FormatterRegistry;\n+\n+/**\n+ * Configures useful formatting system for use with Spring.\n+ */\n+class ArmeriaSpringBoot1FormatterRegistrar implements FormatterRegistrar {\n+\n+    @Override\n+    public void registerFormatters(FormatterRegistry registry) {\n+        registerConverters(registry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65abd723a14d76d358b2c797a78f9959f8931ccb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2MTcxNw==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2954#discussion_r463661717", "createdAt": "2020-07-31T14:58:15Z", "author": {"login": "heowc"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1FormatterRegistrar.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.format.FormatterRegistrar;\n+import org.springframework.format.FormatterRegistry;\n+\n+/**\n+ * Configures useful formatting system for use with Spring.\n+ */\n+class ArmeriaSpringBoot1FormatterRegistrar implements FormatterRegistrar {\n+\n+    @Override\n+    public void registerFormatters(FormatterRegistry registry) {\n+        registerConverters(registry);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNTc2NA=="}, "originalCommit": {"oid": "65abd723a14d76d358b2c797a78f9959f8931ccb"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDc3NTM1OnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo1NTozNFrOG6Je5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDo1ODoyMVrOG6Lqyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNTk1Ng==", "bodyText": "Remove an empty line?", "url": "https://github.com/line/armeria/pull/2954#discussion_r463625956", "createdAt": "2020-07-31T13:55:34Z", "author": {"login": "trustin"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65abd723a14d76d358b2c797a78f9959f8931ccb"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2MTc3MQ==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2954#discussion_r463661771", "createdAt": "2020-07-31T14:58:21Z", "author": {"login": "heowc"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNTk1Ng=="}, "originalCommit": {"oid": "65abd723a14d76d358b2c797a78f9959f8931ccb"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDc3NzgzOnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/StringToDurationConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo1NjoyMVrOG6Jgbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDo1ODoyNlrOG6Lq-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNjM1MQ==", "bodyText": "Could remove an empty line", "url": "https://github.com/line/armeria/pull/2954#discussion_r463626351", "createdAt": "2020-07-31T13:56:21Z", "author": {"login": "trustin"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/StringToDurationConverter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+\n+import org.springframework.core.convert.converter.Converter;\n+\n+/**\n+ * Convert {@link String} to {@link Duration}.\n+ */\n+class StringToDurationConverter implements Converter<String, Duration> {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65abd723a14d76d358b2c797a78f9959f8931ccb"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2MTgxOQ==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2954#discussion_r463661819", "createdAt": "2020-07-31T14:58:26Z", "author": {"login": "heowc"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/StringToDurationConverter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+\n+import org.springframework.core.convert.converter.Converter;\n+\n+/**\n+ * Convert {@link String} to {@link Duration}.\n+ */\n+class StringToDurationConverter implements Converter<String, Duration> {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNjM1MQ=="}, "originalCommit": {"oid": "65abd723a14d76d358b2c797a78f9959f8931ccb"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODgwMTY4OnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMjo1MjozM1rOG6qnwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMjo1MjozM1rOG6qnwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE2ODg5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Matcher matcher = matcher(value);\n          \n          \n            \n                            final Matcher matcher = matcher(value);", "url": "https://github.com/line/armeria/pull/2954#discussion_r464168896", "createdAt": "2020-08-03T02:52:33Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODgxMzUxOnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowMDo1NlrOG6qujA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowMDo1NlrOG6qujA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MDYzNg==", "bodyText": "Use Preconditions.checkState()?", "url": "https://github.com/line/armeria/pull/2954#discussion_r464170636", "createdAt": "2020-08-03T03:00:56Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODgxMzgwOnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowMTowN1rOG6qutg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowMTowN1rOG6qutg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MDY3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String suffix = matcher.group(2);\n          \n          \n            \n                            final String suffix = matcher.group(2);", "url": "https://github.com/line/armeria/pull/2954#discussion_r464170678", "createdAt": "2020-08-03T03:01:07Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODgxNDEyOnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowMToyNlrOG6qu8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowMToyNlrOG6qu8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MDczOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n          \n          \n            \n                            throw new IllegalArgumentException('\\'' + value + \"' is not a valid simple duration\", ex);", "url": "https://github.com/line/armeria/pull/2954#discussion_r464170738", "createdAt": "2020-08-03T03:01:26Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODgxNTI5OnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowMjowOFrOG6qvlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowMjowOFrOG6qvlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MDkwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n          \n          \n            \n                            throw new IllegalArgumentException('\\'' + value + \"' is not a valid ISO-8601 duration\", ex);", "url": "https://github.com/line/armeria/pull/2954#discussion_r464170900", "createdAt": "2020-08-03T03:02:08Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODgxNjc5OnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowMzowOVrOG6qwZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowMzowOVrOG6qwZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MTEwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Assert.notNull(value, \"Value must not be null\");\n          \n          \n            \n                    requireNonNull(value, \"value\");", "url": "https://github.com/line/armeria/pull/2954#discussion_r464171109", "createdAt": "2020-08-03T03:03:09Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {\n+        return detectAndParse(value, null);\n+    }\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value, ChronoUnit unit) {\n+        return detect(value).parse(value, unit);\n+    }\n+\n+    /**\n+     * Detect the style from the given source value.\n+     * @param value the source value\n+     * @return the duration style\n+     * @throws IllegalArgumentException if the value is not a known style\n+     */\n+    static DurationStyle detect(String value) {\n+        Assert.notNull(value, \"Value must not be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODgxNzAwOnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowMzoyM1rOG6qwjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowMzoyM1rOG6qwjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MTE0OQ==", "bodyText": "Ditto", "url": "https://github.com/line/armeria/pull/2954#discussion_r464171149", "createdAt": "2020-08-03T03:03:23Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {\n+        return detectAndParse(value, null);\n+    }\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value, ChronoUnit unit) {\n+        return detect(value).parse(value, unit);\n+    }\n+\n+    /**\n+     * Detect the style from the given source value.\n+     * @param value the source value\n+     * @return the duration style\n+     * @throws IllegalArgumentException if the value is not a known style\n+     */\n+    static DurationStyle detect(String value) {\n+        Assert.notNull(value, \"Value must not be null\");\n+        for (DurationStyle candidate : values()) {\n+            if (candidate.matches(value)) {\n+                return candidate;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"'\" + value + \"' is not a valid duration\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODgyMDE4OnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowNToyN1rOG6qyRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowNToyN1rOG6qyRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MTU4OA==", "bodyText": "Global comments: Could you use third-person singular verb -s and so on.", "url": "https://github.com/line/armeria/pull/2954#discussion_r464171588", "createdAt": "2020-08-03T03:05:27Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {\n+        return detectAndParse(value, null);\n+    }\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODgyMTQ5OnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowNjozNFrOG6qy_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowNjozNFrOG6qy_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MTc3NA==", "bodyText": "Ditto", "url": "https://github.com/line/armeria/pull/2954#discussion_r464171774", "createdAt": "2020-08-03T03:06:34Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {\n+        return detectAndParse(value, null);\n+    }\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value, ChronoUnit unit) {\n+        return detect(value).parse(value, unit);\n+    }\n+\n+    /**\n+     * Detect the style from the given source value.\n+     * @param value the source value\n+     * @return the duration style\n+     * @throws IllegalArgumentException if the value is not a known style\n+     */\n+    static DurationStyle detect(String value) {\n+        Assert.notNull(value, \"Value must not be null\");\n+        for (DurationStyle candidate : values()) {\n+            if (candidate.matches(value)) {\n+                return candidate;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"'\" + value + \"' is not a valid duration\");\n+    }\n+\n+    /**\n+     * Units that we support.\n+     */\n+    enum Unit {\n+\n+        /**\n+         * Nanoseconds.\n+         */\n+        NANOS(ChronoUnit.NANOS, \"ns\", Duration::toNanos),\n+\n+        /**\n+         * Microseconds.\n+         */\n+        MICROS(ChronoUnit.MICROS, \"us\", (duration) -> duration.toMillis() * 1000L),\n+\n+        /**\n+         * Milliseconds.\n+         */\n+        MILLIS(ChronoUnit.MILLIS, \"ms\", Duration::toMillis),\n+\n+        /**\n+         * Seconds.\n+         */\n+        SECONDS(ChronoUnit.SECONDS, \"s\", Duration::getSeconds),\n+\n+        /**\n+         * Minutes.\n+         */\n+        MINUTES(ChronoUnit.MINUTES, \"m\", Duration::toMinutes),\n+\n+        /**\n+         * Hours.\n+         */\n+        HOURS(ChronoUnit.HOURS, \"h\", Duration::toHours),\n+\n+        /**\n+         * Days.\n+         */\n+        DAYS(ChronoUnit.DAYS, \"d\", Duration::toDays);\n+\n+        private final ChronoUnit chronoUnit;\n+\n+        private final String suffix;\n+\n+        private Function<Duration, Long> longValue;\n+\n+        Unit(ChronoUnit chronoUnit, String suffix, Function<Duration, Long> toUnit) {\n+            this.chronoUnit = chronoUnit;\n+            this.suffix = suffix;\n+            this.longValue = toUnit;\n+        }\n+\n+        Duration parse(String value) {\n+            return Duration.of(Long.parseLong(value), this.chronoUnit);\n+        }\n+\n+        String print(Duration value) {\n+            return longValue(value) + this.suffix;\n+        }\n+\n+        long longValue(Duration value) {\n+            return this.longValue.apply(value);\n+        }\n+\n+        static Unit fromChronoUnit(ChronoUnit chronoUnit) {\n+            if (chronoUnit == null) {\n+                return Unit.MILLIS;\n+            }\n+            for (Unit candidate : values()) {\n+                if (candidate.chronoUnit == chronoUnit) {\n+                    return candidate;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"Unknown unit \" + chronoUnit);\n+        }\n+\n+        static Unit fromSuffix(String suffix) {\n+            for (Unit candidate : values()) {\n+                if (candidate.suffix.equalsIgnoreCase(suffix)) {\n+                    return candidate;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"Unknown unit '\" + suffix + \"'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 265}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODgyMjYwOnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowNzoyM1rOG6qzmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowNzoyM1rOG6qzmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MTkzMA==", "bodyText": "Could be removed?", "url": "https://github.com/line/armeria/pull/2954#discussion_r464171930", "createdAt": "2020-08-03T03:07:23Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODgyMjg4OnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowNzozNlrOG6qzyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowNzozNlrOG6qzyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MTk3Ng==", "bodyText": "Could be removed?", "url": "https://github.com/line/armeria/pull/2954#discussion_r464171976", "createdAt": "2020-08-03T03:07:36Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {\n+        return detectAndParse(value, null);\n+    }\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value, ChronoUnit unit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODgyNDA3OnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowODozM1rOG6q0eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowODozM1rOG6q0eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MjE1Mg==", "bodyText": "Could be removed?", "url": "https://github.com/line/armeria/pull/2954#discussion_r464172152", "createdAt": "2020-08-03T03:08:33Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODgyNTQ5OnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowOTozN1rOG6q1Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowOTozN1rOG6q1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MjM0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return Unit.MILLIS;\n          \n          \n            \n                            return MILLIS;", "url": "https://github.com/line/armeria/pull/2954#discussion_r464172343", "createdAt": "2020-08-03T03:09:37Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {\n+        return detectAndParse(value, null);\n+    }\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value, ChronoUnit unit) {\n+        return detect(value).parse(value, unit);\n+    }\n+\n+    /**\n+     * Detect the style from the given source value.\n+     * @param value the source value\n+     * @return the duration style\n+     * @throws IllegalArgumentException if the value is not a known style\n+     */\n+    static DurationStyle detect(String value) {\n+        Assert.notNull(value, \"Value must not be null\");\n+        for (DurationStyle candidate : values()) {\n+            if (candidate.matches(value)) {\n+                return candidate;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"'\" + value + \"' is not a valid duration\");\n+    }\n+\n+    /**\n+     * Units that we support.\n+     */\n+    enum Unit {\n+\n+        /**\n+         * Nanoseconds.\n+         */\n+        NANOS(ChronoUnit.NANOS, \"ns\", Duration::toNanos),\n+\n+        /**\n+         * Microseconds.\n+         */\n+        MICROS(ChronoUnit.MICROS, \"us\", (duration) -> duration.toMillis() * 1000L),\n+\n+        /**\n+         * Milliseconds.\n+         */\n+        MILLIS(ChronoUnit.MILLIS, \"ms\", Duration::toMillis),\n+\n+        /**\n+         * Seconds.\n+         */\n+        SECONDS(ChronoUnit.SECONDS, \"s\", Duration::getSeconds),\n+\n+        /**\n+         * Minutes.\n+         */\n+        MINUTES(ChronoUnit.MINUTES, \"m\", Duration::toMinutes),\n+\n+        /**\n+         * Hours.\n+         */\n+        HOURS(ChronoUnit.HOURS, \"h\", Duration::toHours),\n+\n+        /**\n+         * Days.\n+         */\n+        DAYS(ChronoUnit.DAYS, \"d\", Duration::toDays);\n+\n+        private final ChronoUnit chronoUnit;\n+\n+        private final String suffix;\n+\n+        private Function<Duration, Long> longValue;\n+\n+        Unit(ChronoUnit chronoUnit, String suffix, Function<Duration, Long> toUnit) {\n+            this.chronoUnit = chronoUnit;\n+            this.suffix = suffix;\n+            this.longValue = toUnit;\n+        }\n+\n+        Duration parse(String value) {\n+            return Duration.of(Long.parseLong(value), this.chronoUnit);\n+        }\n+\n+        String print(Duration value) {\n+            return longValue(value) + this.suffix;\n+        }\n+\n+        long longValue(Duration value) {\n+            return this.longValue.apply(value);\n+        }\n+\n+        static Unit fromChronoUnit(ChronoUnit chronoUnit) {\n+            if (chronoUnit == null) {\n+                return Unit.MILLIS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODgyOTI5OnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzoxMjowMFrOG6q3RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzoxMjowMFrOG6q3RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3Mjg2OA==", "bodyText": "Could you create package-info.java that contains NonNullByDefault.\nAnd add\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                abstract Duration parse(String value, ChronoUnit unit);\n          \n          \n            \n                abstract Duration parse(String value, @Nullable ChronoUnit unit);", "url": "https://github.com/line/armeria/pull/2954#discussion_r464172868", "createdAt": "2020-08-03T03:12:00Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODkxMjAzOnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConversionServiceConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNDoxMTozNFrOG6rmdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNToxNjowOVrOG6sasQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE4NDk1MA==", "bodyText": "How about making this as singleton by using @Scope or making enum singleton?", "url": "https://github.com/line/armeria/pull/2954#discussion_r464184950", "createdAt": "2020-08-03T04:11:34Z", "author": {"login": "minwoox"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConversionServiceConfiguration.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.format.FormatterRegistrar;\n+import org.springframework.format.support.FormattingConversionService;\n+import org.springframework.format.support.FormattingConversionServiceFactoryBean;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Provides useful {@link ConversionService}.\n+ */\n+@Configuration\n+public class ArmeriaSpringBoot1ConversionServiceConfiguration {\n+\n+    /**\n+     * Create a new {@link ConversionService} bean.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean(ConversionService.class)\n+    public FormattingConversionService conversionService(ListableBeanFactory beanFactory) {\n+        final FormattingConversionServiceFactoryBean factoryBean = new FormattingConversionServiceFactoryBean();\n+        final FormatterRegistrar formatterRegistrar = new ArmeriaSpringBoot1FormatterRegistrar(beanFactory);\n+        factoryBean.setFormatterRegistrars(Sets.newHashSet(formatterRegistrar));\n+        factoryBean.afterPropertiesSet();\n+        return factoryBean.getObject();\n+    }\n+\n+    /**\n+     * Create a new {@link StringToDurationConverter} bean.\n+     */\n+    @Bean\n+    public StringToDurationConverter armeriaSpringBoot1StringDurationConverter() {\n+        return new StringToDurationConverter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb34c8df20f1000e7f0cb24cff43436bbe683208"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE5ODMyMQ==", "bodyText": "Since we have to make it as Bean, we will use @Scope.\n@Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)", "url": "https://github.com/line/armeria/pull/2954#discussion_r464198321", "createdAt": "2020-08-03T05:16:09Z", "author": {"login": "heowc"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConversionServiceConfiguration.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.format.FormatterRegistrar;\n+import org.springframework.format.support.FormattingConversionService;\n+import org.springframework.format.support.FormattingConversionServiceFactoryBean;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Provides useful {@link ConversionService}.\n+ */\n+@Configuration\n+public class ArmeriaSpringBoot1ConversionServiceConfiguration {\n+\n+    /**\n+     * Create a new {@link ConversionService} bean.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean(ConversionService.class)\n+    public FormattingConversionService conversionService(ListableBeanFactory beanFactory) {\n+        final FormattingConversionServiceFactoryBean factoryBean = new FormattingConversionServiceFactoryBean();\n+        final FormatterRegistrar formatterRegistrar = new ArmeriaSpringBoot1FormatterRegistrar(beanFactory);\n+        factoryBean.setFormatterRegistrars(Sets.newHashSet(formatterRegistrar));\n+        factoryBean.afterPropertiesSet();\n+        return factoryBean.getObject();\n+    }\n+\n+    /**\n+     * Create a new {@link StringToDurationConverter} bean.\n+     */\n+    @Bean\n+    public StringToDurationConverter armeriaSpringBoot1StringDurationConverter() {\n+        return new StringToDurationConverter();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE4NDk1MA=="}, "originalCommit": {"oid": "cb34c8df20f1000e7f0cb24cff43436bbe683208"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODkxNjgzOnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNDoxNTozMVrOG6rpOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODoyNToyNVrOG6wh4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE4NTY1OQ==", "bodyText": "Can we fork some tests as well to see what is possible?", "url": "https://github.com/line/armeria/pull/2954#discussion_r464185659", "createdAt": "2020-08-03T04:15:31Z", "author": {"login": "minwoox"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.annotation.Nullable;\n+\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb34c8df20f1000e7f0cb24cff43436bbe683208"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE5NzQ0Ng==", "bodyText": "How about forking the test?", "url": "https://github.com/line/armeria/pull/2954#discussion_r464197446", "createdAt": "2020-08-03T05:12:14Z", "author": {"login": "heowc"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.annotation.Nullable;\n+\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE4NTY1OQ=="}, "originalCommit": {"oid": "cb34c8df20f1000e7f0cb24cff43436bbe683208"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE5ODg3OA==", "bodyText": "Yeah, let's do that. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2954#discussion_r464198878", "createdAt": "2020-08-03T05:18:55Z", "author": {"login": "minwoox"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.annotation.Nullable;\n+\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE4NTY1OQ=="}, "originalCommit": {"oid": "cb34c8df20f1000e7f0cb24cff43436bbe683208"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI2NTY5Nw==", "bodyText": "Add 2c08560", "url": "https://github.com/line/armeria/pull/2954#discussion_r464265697", "createdAt": "2020-08-03T08:25:25Z", "author": {"login": "heowc"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.annotation.Nullable;\n+\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE4NTY1OQ=="}, "originalCommit": {"oid": "cb34c8df20f1000e7f0cb24cff43436bbe683208"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTQ3MjEyOnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConversionServiceConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODozMToyNFrOG6wtjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODozNDozMVrOG6wzxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI2ODY4NA==", "bodyText": "nit: Returns the {@link StringToDurationConverter} bean because it's now a singleton. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2954#discussion_r464268684", "createdAt": "2020-08-03T08:31:24Z", "author": {"login": "minwoox"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConversionServiceConfiguration.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.format.FormatterRegistrar;\n+import org.springframework.format.support.FormattingConversionService;\n+import org.springframework.format.support.FormattingConversionServiceFactoryBean;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Provides useful {@link ConversionService}.\n+ */\n+@Configuration\n+public class ArmeriaSpringBoot1ConversionServiceConfiguration {\n+\n+    /**\n+     * Create a new {@link ConversionService} bean.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean(ConversionService.class)\n+    public FormattingConversionService conversionService(ListableBeanFactory beanFactory) {\n+        final FormattingConversionServiceFactoryBean factoryBean = new FormattingConversionServiceFactoryBean();\n+        final FormatterRegistrar formatterRegistrar = new ArmeriaSpringBoot1FormatterRegistrar(beanFactory);\n+        factoryBean.setFormatterRegistrars(Sets.newHashSet(formatterRegistrar));\n+        factoryBean.afterPropertiesSet();\n+        return factoryBean.getObject();\n+    }\n+\n+    /**\n+     * Create a new {@link StringToDurationConverter} bean.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c08560024f7b36ec8dd1e52f35de101a6774441"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI3MDI3Nw==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2954#discussion_r464270277", "createdAt": "2020-08-03T08:34:31Z", "author": {"login": "heowc"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConversionServiceConfiguration.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.format.FormatterRegistrar;\n+import org.springframework.format.support.FormattingConversionService;\n+import org.springframework.format.support.FormattingConversionServiceFactoryBean;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Provides useful {@link ConversionService}.\n+ */\n+@Configuration\n+public class ArmeriaSpringBoot1ConversionServiceConfiguration {\n+\n+    /**\n+     * Create a new {@link ConversionService} bean.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean(ConversionService.class)\n+    public FormattingConversionService conversionService(ListableBeanFactory beanFactory) {\n+        final FormattingConversionServiceFactoryBean factoryBean = new FormattingConversionServiceFactoryBean();\n+        final FormatterRegistrar formatterRegistrar = new ArmeriaSpringBoot1FormatterRegistrar(beanFactory);\n+        factoryBean.setFormatterRegistrars(Sets.newHashSet(formatterRegistrar));\n+        factoryBean.afterPropertiesSet();\n+        return factoryBean.getObject();\n+    }\n+\n+    /**\n+     * Create a new {@link StringToDurationConverter} bean.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI2ODY4NA=="}, "originalCommit": {"oid": "2c08560024f7b36ec8dd1e52f35de101a6774441"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTU2Mzg3OnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1FormatterRegistrar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODo1ODoxNlrOG6xlAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOTozNzowMlrOG6y2qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI4Mjg4MA==", "bodyText": "nit: Add final?", "url": "https://github.com/line/armeria/pull/2954#discussion_r464282880", "createdAt": "2020-08-03T08:58:16Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1FormatterRegistrar.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.format.FormatterRegistrar;\n+import org.springframework.format.FormatterRegistry;\n+\n+/**\n+ * Configures useful formatting system for use with Spring.\n+ */\n+class ArmeriaSpringBoot1FormatterRegistrar implements FormatterRegistrar {\n+\n+    private ListableBeanFactory beanFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4882039c57e32220f605b8747f31ac7e872639"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMwMzc4Ng==", "bodyText": "Add c1be73a", "url": "https://github.com/line/armeria/pull/2954#discussion_r464303786", "createdAt": "2020-08-03T09:37:02Z", "author": {"login": "heowc"}, "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1FormatterRegistrar.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.format.FormatterRegistrar;\n+import org.springframework.format.FormatterRegistry;\n+\n+/**\n+ * Configures useful formatting system for use with Spring.\n+ */\n+class ArmeriaSpringBoot1FormatterRegistrar implements FormatterRegistrar {\n+\n+    private ListableBeanFactory beanFactory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI4Mjg4MA=="}, "originalCommit": {"oid": "3e4882039c57e32220f605b8747f31ac7e872639"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2163, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}