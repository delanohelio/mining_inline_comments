{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzMzQ3Nzkz", "number": 2866, "title": "Add 0.99.8 release note", "bodyText": "", "createdAt": "2020-07-02T08:05:41Z", "url": "https://github.com/line/armeria/pull/2866", "merged": true, "mergeCommit": {"oid": "9d29ba4dd5b257e845ce6066aa6b2d5986179e2f"}, "closed": true, "closedAt": "2020-07-02T12:36:39Z", "author": {"login": "minwoox"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcw6NBjAH2gAyNDQzMzQ3NzkzOmFhMDYwMDk4NzYxODY1M2JiMmZmZTYwYjk4MDg5MzFjNDI4ZDM3MTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcw9PBkAFqTQ0MTU5MzM1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "aa0600987618653bb2ffe60b9808931c428d3718", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/aa0600987618653bb2ffe60b9808931c428d3718", "committedDate": "2020-07-02T08:03:10Z", "message": "Add 0.99.8 release note"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNDYxNzky", "url": "https://github.com/line/armeria/pull/2866#pullrequestreview-441461792", "createdAt": "2020-07-02T08:30:16Z", "commit": {"oid": "aa0600987618653bb2ffe60b9808931c428d3718"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwODozMDoxNlrOGsCzSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwODo0MTo1NVrOGsDQdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzNjQyNA==", "bodyText": "nit: ident with two spaces?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               // synchronous selection!\n          \n          \n            \n              // synchronous selection!", "url": "https://github.com/line/armeria/pull/2866#discussion_r448836424", "createdAt": "2020-07-02T08:30:16Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/0.99.8.mdx", "diffHunk": "@@ -0,0 +1,188 @@\n+## \ud83c\udf1f New features\n+\n+- You can now use <type://ClientRequestContext> to build a complex <type://RetryRule> and\n+  <type://CircuitBreakerRule>. #2851\n+  ```java\n+  RetryRuleWithContent.<RpcResponse>builder()\n+                      .onServerErrorStatus()\n+                       // Now it's the BiPredicate that takes ctx as well.\n+                      .onException((ctx, ex) -> {\n+                          RpcRequest request = ctx.rpcRequest();\n+                          if (request != null &&\n+                              !safeMethods.contains(request.method())) {\n+                              return isRetryableException(throwable);\n+                          } else {\n+                              return false;\n+                          }\n+                      })\n+                      .thenBackoff(backoff);\n+  ```\n+- You can now run the gRPC server/client stubs generated by ScalaPB with Armeria. #2719\n+  - Please refer to the fully working [example](https://github.com/line/armeria/tree/master/examples/grpc-scala).\n+- You can now parse a response trailers from a response body for gRPC-Web using\n+  <type://GrpcWebUtil#parseTrailers(HttpData)>. #2848\n+  ```java\n+  Clients.builder(...)\n+         .decorator(RetryingClient.newDecorator(\n+                 RetryRuleWithContent.onResponse(response -> {\n+                     return response.aggregate().thenApply(aggregated -> {\n+                        HttpHeaders trailers =\n+                            GrpcWebUtil.parseTrailers(aggregated.content());\n+                        // Retry if the 'grpc-status' is not equal to 0.\n+                        return trailers != null &&\n+                               trailers.getInt(GrpcHeaderNames.GRPC_STATUS) != 0;\n+                    });\n+                })))\n+        .build(MyGrpcStub.class);\n+  ```\n+- You can now access the metadata of <type://HttpFile> and <type://FileService> asynchronously. #1668 #2845\n+  ```java\n+  HttpFile httpFile = HttpFile.of(...);\n+  CompletableFuture<HttpFileAttributes> attrs =\n+      httpFile.readAttributes(CommonPools.blockingTaskExecutor());\n+  CompletableFuture<ResponseHeaders> headers =\n+      httpFile.readHeaders(CommonPools.blockingTaskExecutor());\n+  ```\n+- You can now easily customize <type://MeterIdPrefixFunction> using\n+  <type://MeterIdPrefixFunction#andThen(MeterIdPrefixFunctionCustomizer)>. #2839\n+  ```java\n+  MeterIdPrefixFunction\n+          .ofDefault(\"hoge\")\n+          .andThen((registry, log, id) -> {\n+              return id.withTags(\"grpc-status\", log.responseTrailers().get(\"grpc-status\"));\n+          });\n+  ```\n+- Both synchronous and asynchronous APIs to select an <type://Endpoint> are added to\n+  <type://EndpointSelector> and thus <type://EndpointGroup> which is a sub-interface. #1910 #2837\n+  ```java\n+  ClientRequestContext ctx = ...\n+  EndpointGroup group = ...\n+   // synchronous selection!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa0600987618653bb2ffe60b9808931c428d3718"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzNjcyMQ==", "bodyText": "Ditto.", "url": "https://github.com/line/armeria/pull/2866#discussion_r448836721", "createdAt": "2020-07-02T08:30:47Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/0.99.8.mdx", "diffHunk": "@@ -0,0 +1,188 @@\n+## \ud83c\udf1f New features\n+\n+- You can now use <type://ClientRequestContext> to build a complex <type://RetryRule> and\n+  <type://CircuitBreakerRule>. #2851\n+  ```java\n+  RetryRuleWithContent.<RpcResponse>builder()\n+                      .onServerErrorStatus()\n+                       // Now it's the BiPredicate that takes ctx as well.\n+                      .onException((ctx, ex) -> {\n+                          RpcRequest request = ctx.rpcRequest();\n+                          if (request != null &&\n+                              !safeMethods.contains(request.method())) {\n+                              return isRetryableException(throwable);\n+                          } else {\n+                              return false;\n+                          }\n+                      })\n+                      .thenBackoff(backoff);\n+  ```\n+- You can now run the gRPC server/client stubs generated by ScalaPB with Armeria. #2719\n+  - Please refer to the fully working [example](https://github.com/line/armeria/tree/master/examples/grpc-scala).\n+- You can now parse a response trailers from a response body for gRPC-Web using\n+  <type://GrpcWebUtil#parseTrailers(HttpData)>. #2848\n+  ```java\n+  Clients.builder(...)\n+         .decorator(RetryingClient.newDecorator(\n+                 RetryRuleWithContent.onResponse(response -> {\n+                     return response.aggregate().thenApply(aggregated -> {\n+                        HttpHeaders trailers =\n+                            GrpcWebUtil.parseTrailers(aggregated.content());\n+                        // Retry if the 'grpc-status' is not equal to 0.\n+                        return trailers != null &&\n+                               trailers.getInt(GrpcHeaderNames.GRPC_STATUS) != 0;\n+                    });\n+                })))\n+        .build(MyGrpcStub.class);\n+  ```\n+- You can now access the metadata of <type://HttpFile> and <type://FileService> asynchronously. #1668 #2845\n+  ```java\n+  HttpFile httpFile = HttpFile.of(...);\n+  CompletableFuture<HttpFileAttributes> attrs =\n+      httpFile.readAttributes(CommonPools.blockingTaskExecutor());\n+  CompletableFuture<ResponseHeaders> headers =\n+      httpFile.readHeaders(CommonPools.blockingTaskExecutor());\n+  ```\n+- You can now easily customize <type://MeterIdPrefixFunction> using\n+  <type://MeterIdPrefixFunction#andThen(MeterIdPrefixFunctionCustomizer)>. #2839\n+  ```java\n+  MeterIdPrefixFunction\n+          .ofDefault(\"hoge\")\n+          .andThen((registry, log, id) -> {\n+              return id.withTags(\"grpc-status\", log.responseTrailers().get(\"grpc-status\"));\n+          });\n+  ```\n+- Both synchronous and asynchronous APIs to select an <type://Endpoint> are added to\n+  <type://EndpointSelector> and thus <type://EndpointGroup> which is a sub-interface. #1910 #2837\n+  ```java\n+  ClientRequestContext ctx = ...\n+  EndpointGroup group = ...\n+   // synchronous selection!\n+  Endpoint endpoint = group.selectNow(ctx);\n+   // asynchronous selection!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa0600987618653bb2ffe60b9808931c428d3718"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzODMzNw==", "bodyText": "Move to Improvements section? Because the API is not changed at all.", "url": "https://github.com/line/armeria/pull/2866#discussion_r448838337", "createdAt": "2020-07-02T08:33:15Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/0.99.8.mdx", "diffHunk": "@@ -0,0 +1,188 @@\n+## \ud83c\udf1f New features\n+\n+- You can now use <type://ClientRequestContext> to build a complex <type://RetryRule> and\n+  <type://CircuitBreakerRule>. #2851\n+  ```java\n+  RetryRuleWithContent.<RpcResponse>builder()\n+                      .onServerErrorStatus()\n+                       // Now it's the BiPredicate that takes ctx as well.\n+                      .onException((ctx, ex) -> {\n+                          RpcRequest request = ctx.rpcRequest();\n+                          if (request != null &&\n+                              !safeMethods.contains(request.method())) {\n+                              return isRetryableException(throwable);\n+                          } else {\n+                              return false;\n+                          }\n+                      })\n+                      .thenBackoff(backoff);\n+  ```\n+- You can now run the gRPC server/client stubs generated by ScalaPB with Armeria. #2719\n+  - Please refer to the fully working [example](https://github.com/line/armeria/tree/master/examples/grpc-scala).\n+- You can now parse a response trailers from a response body for gRPC-Web using\n+  <type://GrpcWebUtil#parseTrailers(HttpData)>. #2848\n+  ```java\n+  Clients.builder(...)\n+         .decorator(RetryingClient.newDecorator(\n+                 RetryRuleWithContent.onResponse(response -> {\n+                     return response.aggregate().thenApply(aggregated -> {\n+                        HttpHeaders trailers =\n+                            GrpcWebUtil.parseTrailers(aggregated.content());\n+                        // Retry if the 'grpc-status' is not equal to 0.\n+                        return trailers != null &&\n+                               trailers.getInt(GrpcHeaderNames.GRPC_STATUS) != 0;\n+                    });\n+                })))\n+        .build(MyGrpcStub.class);\n+  ```\n+- You can now access the metadata of <type://HttpFile> and <type://FileService> asynchronously. #1668 #2845\n+  ```java\n+  HttpFile httpFile = HttpFile.of(...);\n+  CompletableFuture<HttpFileAttributes> attrs =\n+      httpFile.readAttributes(CommonPools.blockingTaskExecutor());\n+  CompletableFuture<ResponseHeaders> headers =\n+      httpFile.readHeaders(CommonPools.blockingTaskExecutor());\n+  ```\n+- You can now easily customize <type://MeterIdPrefixFunction> using\n+  <type://MeterIdPrefixFunction#andThen(MeterIdPrefixFunctionCustomizer)>. #2839\n+  ```java\n+  MeterIdPrefixFunction\n+          .ofDefault(\"hoge\")\n+          .andThen((registry, log, id) -> {\n+              return id.withTags(\"grpc-status\", log.responseTrailers().get(\"grpc-status\"));\n+          });\n+  ```\n+- Both synchronous and asynchronous APIs to select an <type://Endpoint> are added to\n+  <type://EndpointSelector> and thus <type://EndpointGroup> which is a sub-interface. #1910 #2837\n+  ```java\n+  ClientRequestContext ctx = ...\n+  EndpointGroup group = ...\n+   // synchronous selection!\n+  Endpoint endpoint = group.selectNow(ctx);\n+   // asynchronous selection!\n+  CompletableFuture<Endpoint> future = group.select(ctx, ctx.eventLoop(), 1000 /* timeout */ );\n+  ```\n+  - Thanks to this change, you can now avoid the <type://EmptyEndpointGroupException> at least\n+    for the case where the <typeplural://Endpoint> disappear temporarily.\n+- You can now get the snapshot status of circuit breakers from monitoring system. #2841\n+- You can now schedule a request timeout in nanoseconds. #2864\n+  - <type://ServiceRequestContext#setRequestTimeout(TimeoutMode,Duration)>\n+  - <type://ClientRequestContext#setResponseTimeout(TimeoutMode,Duration)>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa0600987618653bb2ffe60b9808931c428d3718"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg0MDE3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - You no longer see `Http2Exception: failed to consume a HEADE` error. #2832\n          \n          \n            \n            - You no longer see `Http2Exception: failed to consume a HEADERS frame` error. #2832", "url": "https://github.com/line/armeria/pull/2866#discussion_r448840175", "createdAt": "2020-07-02T08:36:09Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/0.99.8.mdx", "diffHunk": "@@ -0,0 +1,188 @@\n+## \ud83c\udf1f New features\n+\n+- You can now use <type://ClientRequestContext> to build a complex <type://RetryRule> and\n+  <type://CircuitBreakerRule>. #2851\n+  ```java\n+  RetryRuleWithContent.<RpcResponse>builder()\n+                      .onServerErrorStatus()\n+                       // Now it's the BiPredicate that takes ctx as well.\n+                      .onException((ctx, ex) -> {\n+                          RpcRequest request = ctx.rpcRequest();\n+                          if (request != null &&\n+                              !safeMethods.contains(request.method())) {\n+                              return isRetryableException(throwable);\n+                          } else {\n+                              return false;\n+                          }\n+                      })\n+                      .thenBackoff(backoff);\n+  ```\n+- You can now run the gRPC server/client stubs generated by ScalaPB with Armeria. #2719\n+  - Please refer to the fully working [example](https://github.com/line/armeria/tree/master/examples/grpc-scala).\n+- You can now parse a response trailers from a response body for gRPC-Web using\n+  <type://GrpcWebUtil#parseTrailers(HttpData)>. #2848\n+  ```java\n+  Clients.builder(...)\n+         .decorator(RetryingClient.newDecorator(\n+                 RetryRuleWithContent.onResponse(response -> {\n+                     return response.aggregate().thenApply(aggregated -> {\n+                        HttpHeaders trailers =\n+                            GrpcWebUtil.parseTrailers(aggregated.content());\n+                        // Retry if the 'grpc-status' is not equal to 0.\n+                        return trailers != null &&\n+                               trailers.getInt(GrpcHeaderNames.GRPC_STATUS) != 0;\n+                    });\n+                })))\n+        .build(MyGrpcStub.class);\n+  ```\n+- You can now access the metadata of <type://HttpFile> and <type://FileService> asynchronously. #1668 #2845\n+  ```java\n+  HttpFile httpFile = HttpFile.of(...);\n+  CompletableFuture<HttpFileAttributes> attrs =\n+      httpFile.readAttributes(CommonPools.blockingTaskExecutor());\n+  CompletableFuture<ResponseHeaders> headers =\n+      httpFile.readHeaders(CommonPools.blockingTaskExecutor());\n+  ```\n+- You can now easily customize <type://MeterIdPrefixFunction> using\n+  <type://MeterIdPrefixFunction#andThen(MeterIdPrefixFunctionCustomizer)>. #2839\n+  ```java\n+  MeterIdPrefixFunction\n+          .ofDefault(\"hoge\")\n+          .andThen((registry, log, id) -> {\n+              return id.withTags(\"grpc-status\", log.responseTrailers().get(\"grpc-status\"));\n+          });\n+  ```\n+- Both synchronous and asynchronous APIs to select an <type://Endpoint> are added to\n+  <type://EndpointSelector> and thus <type://EndpointGroup> which is a sub-interface. #1910 #2837\n+  ```java\n+  ClientRequestContext ctx = ...\n+  EndpointGroup group = ...\n+   // synchronous selection!\n+  Endpoint endpoint = group.selectNow(ctx);\n+   // asynchronous selection!\n+  CompletableFuture<Endpoint> future = group.select(ctx, ctx.eventLoop(), 1000 /* timeout */ );\n+  ```\n+  - Thanks to this change, you can now avoid the <type://EmptyEndpointGroupException> at least\n+    for the case where the <typeplural://Endpoint> disappear temporarily.\n+- You can now get the snapshot status of circuit breakers from monitoring system. #2841\n+- You can now schedule a request timeout in nanoseconds. #2864\n+  - <type://ServiceRequestContext#setRequestTimeout(TimeoutMode,Duration)>\n+  - <type://ClientRequestContext#setResponseTimeout(TimeoutMode,Duration)>\n+\n+## \ud83d\udcc8 Improvements\n+\n+- You can now see the error message by `ResourceLeakDetector` if the `DefaultClientFactory` is not closed\n+  properly. #2847\n+- The initial connection latency is lowered by giving up hopeless HTTP/1.1 connection early when\n+  HTTP/2 upgrade request fails. #2852\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- Armeria server does not convert the `Host` header to `:authority` header anymore. #2846 #2850\n+  - <type://RequestHeaders#authority()> looks into `Host` header if `:authority` header is missing.\n+- You can retry when <type://DnsTimeoutException> is raised using <type://RetryRule#onUnprocessed()>. #2836\n+- You no longer see `Http2Exception: failed to consume a HEADE` error. #2832", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa0600987618653bb2ffe60b9808931c428d3718"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg0MjgyNw==", "bodyText": "MeterIdPrefixFunctionFactory has been deprecated in favor of RequestLog.serviceName(). #2780 #2820", "url": "https://github.com/line/armeria/pull/2866#discussion_r448842827", "createdAt": "2020-07-02T08:40:18Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/0.99.8.mdx", "diffHunk": "@@ -0,0 +1,188 @@\n+## \ud83c\udf1f New features\n+\n+- You can now use <type://ClientRequestContext> to build a complex <type://RetryRule> and\n+  <type://CircuitBreakerRule>. #2851\n+  ```java\n+  RetryRuleWithContent.<RpcResponse>builder()\n+                      .onServerErrorStatus()\n+                       // Now it's the BiPredicate that takes ctx as well.\n+                      .onException((ctx, ex) -> {\n+                          RpcRequest request = ctx.rpcRequest();\n+                          if (request != null &&\n+                              !safeMethods.contains(request.method())) {\n+                              return isRetryableException(throwable);\n+                          } else {\n+                              return false;\n+                          }\n+                      })\n+                      .thenBackoff(backoff);\n+  ```\n+- You can now run the gRPC server/client stubs generated by ScalaPB with Armeria. #2719\n+  - Please refer to the fully working [example](https://github.com/line/armeria/tree/master/examples/grpc-scala).\n+- You can now parse a response trailers from a response body for gRPC-Web using\n+  <type://GrpcWebUtil#parseTrailers(HttpData)>. #2848\n+  ```java\n+  Clients.builder(...)\n+         .decorator(RetryingClient.newDecorator(\n+                 RetryRuleWithContent.onResponse(response -> {\n+                     return response.aggregate().thenApply(aggregated -> {\n+                        HttpHeaders trailers =\n+                            GrpcWebUtil.parseTrailers(aggregated.content());\n+                        // Retry if the 'grpc-status' is not equal to 0.\n+                        return trailers != null &&\n+                               trailers.getInt(GrpcHeaderNames.GRPC_STATUS) != 0;\n+                    });\n+                })))\n+        .build(MyGrpcStub.class);\n+  ```\n+- You can now access the metadata of <type://HttpFile> and <type://FileService> asynchronously. #1668 #2845\n+  ```java\n+  HttpFile httpFile = HttpFile.of(...);\n+  CompletableFuture<HttpFileAttributes> attrs =\n+      httpFile.readAttributes(CommonPools.blockingTaskExecutor());\n+  CompletableFuture<ResponseHeaders> headers =\n+      httpFile.readHeaders(CommonPools.blockingTaskExecutor());\n+  ```\n+- You can now easily customize <type://MeterIdPrefixFunction> using\n+  <type://MeterIdPrefixFunction#andThen(MeterIdPrefixFunctionCustomizer)>. #2839\n+  ```java\n+  MeterIdPrefixFunction\n+          .ofDefault(\"hoge\")\n+          .andThen((registry, log, id) -> {\n+              return id.withTags(\"grpc-status\", log.responseTrailers().get(\"grpc-status\"));\n+          });\n+  ```\n+- Both synchronous and asynchronous APIs to select an <type://Endpoint> are added to\n+  <type://EndpointSelector> and thus <type://EndpointGroup> which is a sub-interface. #1910 #2837\n+  ```java\n+  ClientRequestContext ctx = ...\n+  EndpointGroup group = ...\n+   // synchronous selection!\n+  Endpoint endpoint = group.selectNow(ctx);\n+   // asynchronous selection!\n+  CompletableFuture<Endpoint> future = group.select(ctx, ctx.eventLoop(), 1000 /* timeout */ );\n+  ```\n+  - Thanks to this change, you can now avoid the <type://EmptyEndpointGroupException> at least\n+    for the case where the <typeplural://Endpoint> disappear temporarily.\n+- You can now get the snapshot status of circuit breakers from monitoring system. #2841\n+- You can now schedule a request timeout in nanoseconds. #2864\n+  - <type://ServiceRequestContext#setRequestTimeout(TimeoutMode,Duration)>\n+  - <type://ClientRequestContext#setResponseTimeout(TimeoutMode,Duration)>\n+\n+## \ud83d\udcc8 Improvements\n+\n+- You can now see the error message by `ResourceLeakDetector` if the `DefaultClientFactory` is not closed\n+  properly. #2847\n+- The initial connection latency is lowered by giving up hopeless HTTP/1.1 connection early when\n+  HTTP/2 upgrade request fails. #2852\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- Armeria server does not convert the `Host` header to `:authority` header anymore. #2846 #2850\n+  - <type://RequestHeaders#authority()> looks into `Host` header if `:authority` header is missing.\n+- You can retry when <type://DnsTimeoutException> is raised using <type://RetryRule#onUnprocessed()>. #2836\n+- You no longer see `Http2Exception: failed to consume a HEADE` error. #2832\n+- You no longer see `You tried to set the content preview twice` warning unless\n+  you really did apply content previewing decorator twice. #2830 #2832\n+- A non-base <type://WebClient> respects the user defined scheme correctly. #2835\n+- The specified port when building <type://EurekaUpdatingListener> and <type://ZooKeeperUpdatingListener>\n+  is used in the registration information of an Armeria server. #2826\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+\n+- All Spring registration beans are deprecated. Use <type://ArmeriaServerConfigurator> and\n+  <type://DocServiceConfigurator> instead. #2787 #2838\n+  - Deprecated beans: `HttpServiceRegistrationBean`, `AnnotatedServiceRegistrationBean`,\n+    `GrpcServiceRegistrationBean` and `ThriftServiceRegistrationBean`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa0600987618653bb2ffe60b9808931c428d3718"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg0MzYyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - `RequestLogBuilder.defer*Content*()` and `isDefer*Content*Set()`` have been deprecated in favor of\n          \n          \n            \n            - `RequestLogBuilder.defer*Content*()` and `isDefer*Content*Set()` have been deprecated in favor of", "url": "https://github.com/line/armeria/pull/2866#discussion_r448843625", "createdAt": "2020-07-02T08:41:27Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/0.99.8.mdx", "diffHunk": "@@ -0,0 +1,188 @@\n+## \ud83c\udf1f New features\n+\n+- You can now use <type://ClientRequestContext> to build a complex <type://RetryRule> and\n+  <type://CircuitBreakerRule>. #2851\n+  ```java\n+  RetryRuleWithContent.<RpcResponse>builder()\n+                      .onServerErrorStatus()\n+                       // Now it's the BiPredicate that takes ctx as well.\n+                      .onException((ctx, ex) -> {\n+                          RpcRequest request = ctx.rpcRequest();\n+                          if (request != null &&\n+                              !safeMethods.contains(request.method())) {\n+                              return isRetryableException(throwable);\n+                          } else {\n+                              return false;\n+                          }\n+                      })\n+                      .thenBackoff(backoff);\n+  ```\n+- You can now run the gRPC server/client stubs generated by ScalaPB with Armeria. #2719\n+  - Please refer to the fully working [example](https://github.com/line/armeria/tree/master/examples/grpc-scala).\n+- You can now parse a response trailers from a response body for gRPC-Web using\n+  <type://GrpcWebUtil#parseTrailers(HttpData)>. #2848\n+  ```java\n+  Clients.builder(...)\n+         .decorator(RetryingClient.newDecorator(\n+                 RetryRuleWithContent.onResponse(response -> {\n+                     return response.aggregate().thenApply(aggregated -> {\n+                        HttpHeaders trailers =\n+                            GrpcWebUtil.parseTrailers(aggregated.content());\n+                        // Retry if the 'grpc-status' is not equal to 0.\n+                        return trailers != null &&\n+                               trailers.getInt(GrpcHeaderNames.GRPC_STATUS) != 0;\n+                    });\n+                })))\n+        .build(MyGrpcStub.class);\n+  ```\n+- You can now access the metadata of <type://HttpFile> and <type://FileService> asynchronously. #1668 #2845\n+  ```java\n+  HttpFile httpFile = HttpFile.of(...);\n+  CompletableFuture<HttpFileAttributes> attrs =\n+      httpFile.readAttributes(CommonPools.blockingTaskExecutor());\n+  CompletableFuture<ResponseHeaders> headers =\n+      httpFile.readHeaders(CommonPools.blockingTaskExecutor());\n+  ```\n+- You can now easily customize <type://MeterIdPrefixFunction> using\n+  <type://MeterIdPrefixFunction#andThen(MeterIdPrefixFunctionCustomizer)>. #2839\n+  ```java\n+  MeterIdPrefixFunction\n+          .ofDefault(\"hoge\")\n+          .andThen((registry, log, id) -> {\n+              return id.withTags(\"grpc-status\", log.responseTrailers().get(\"grpc-status\"));\n+          });\n+  ```\n+- Both synchronous and asynchronous APIs to select an <type://Endpoint> are added to\n+  <type://EndpointSelector> and thus <type://EndpointGroup> which is a sub-interface. #1910 #2837\n+  ```java\n+  ClientRequestContext ctx = ...\n+  EndpointGroup group = ...\n+   // synchronous selection!\n+  Endpoint endpoint = group.selectNow(ctx);\n+   // asynchronous selection!\n+  CompletableFuture<Endpoint> future = group.select(ctx, ctx.eventLoop(), 1000 /* timeout */ );\n+  ```\n+  - Thanks to this change, you can now avoid the <type://EmptyEndpointGroupException> at least\n+    for the case where the <typeplural://Endpoint> disappear temporarily.\n+- You can now get the snapshot status of circuit breakers from monitoring system. #2841\n+- You can now schedule a request timeout in nanoseconds. #2864\n+  - <type://ServiceRequestContext#setRequestTimeout(TimeoutMode,Duration)>\n+  - <type://ClientRequestContext#setResponseTimeout(TimeoutMode,Duration)>\n+\n+## \ud83d\udcc8 Improvements\n+\n+- You can now see the error message by `ResourceLeakDetector` if the `DefaultClientFactory` is not closed\n+  properly. #2847\n+- The initial connection latency is lowered by giving up hopeless HTTP/1.1 connection early when\n+  HTTP/2 upgrade request fails. #2852\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- Armeria server does not convert the `Host` header to `:authority` header anymore. #2846 #2850\n+  - <type://RequestHeaders#authority()> looks into `Host` header if `:authority` header is missing.\n+- You can retry when <type://DnsTimeoutException> is raised using <type://RetryRule#onUnprocessed()>. #2836\n+- You no longer see `Http2Exception: failed to consume a HEADE` error. #2832\n+- You no longer see `You tried to set the content preview twice` warning unless\n+  you really did apply content previewing decorator twice. #2830 #2832\n+- A non-base <type://WebClient> respects the user defined scheme correctly. #2835\n+- The specified port when building <type://EurekaUpdatingListener> and <type://ZooKeeperUpdatingListener>\n+  is used in the registration information of an Armeria server. #2826\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+\n+- All Spring registration beans are deprecated. Use <type://ArmeriaServerConfigurator> and\n+  <type://DocServiceConfigurator> instead. #2787 #2838\n+  - Deprecated beans: `HttpServiceRegistrationBean`, `AnnotatedServiceRegistrationBean`,\n+    `GrpcServiceRegistrationBean` and `ThriftServiceRegistrationBean`\n+- `executor()`, `contextAwareExecutor()` and `contextAwareEventLoop()` methods in\n+  <type://RequestContext> are deprecated. #2834\n+- `on*(Predicate)` methods in the followings classes are deprecated. #2851\n+  - <type://RetryRule> and <type://RetryRuleBuilder>\n+  - <type://RetryRuleWithContent> and <type://RetryRuleWithContentBuilder>\n+  - <type://CircuitBreakerRule> and <type://CircuitBreakerRuleBuilder>\n+  - <type://CircuitBreakerRuleWithContent> and <type://CircuitBreakerRuleWithContentBuilder>\n+  - Use `on*(BiPredicate)` methods instead.\n+- `RequestLogBuilder.defer*Content*()` and `isDefer*Content*Set()`` have been deprecated in favor of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa0600987618653bb2ffe60b9808931c428d3718"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg0Mzg5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              `Use <type://UnprocessedRequestException#of(Throwable)> instead. #2836\n          \n          \n            \n              Use <type://UnprocessedRequestException#of(Throwable)> instead. #2836", "url": "https://github.com/line/armeria/pull/2866#discussion_r448843893", "createdAt": "2020-07-02T08:41:55Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/0.99.8.mdx", "diffHunk": "@@ -0,0 +1,188 @@\n+## \ud83c\udf1f New features\n+\n+- You can now use <type://ClientRequestContext> to build a complex <type://RetryRule> and\n+  <type://CircuitBreakerRule>. #2851\n+  ```java\n+  RetryRuleWithContent.<RpcResponse>builder()\n+                      .onServerErrorStatus()\n+                       // Now it's the BiPredicate that takes ctx as well.\n+                      .onException((ctx, ex) -> {\n+                          RpcRequest request = ctx.rpcRequest();\n+                          if (request != null &&\n+                              !safeMethods.contains(request.method())) {\n+                              return isRetryableException(throwable);\n+                          } else {\n+                              return false;\n+                          }\n+                      })\n+                      .thenBackoff(backoff);\n+  ```\n+- You can now run the gRPC server/client stubs generated by ScalaPB with Armeria. #2719\n+  - Please refer to the fully working [example](https://github.com/line/armeria/tree/master/examples/grpc-scala).\n+- You can now parse a response trailers from a response body for gRPC-Web using\n+  <type://GrpcWebUtil#parseTrailers(HttpData)>. #2848\n+  ```java\n+  Clients.builder(...)\n+         .decorator(RetryingClient.newDecorator(\n+                 RetryRuleWithContent.onResponse(response -> {\n+                     return response.aggregate().thenApply(aggregated -> {\n+                        HttpHeaders trailers =\n+                            GrpcWebUtil.parseTrailers(aggregated.content());\n+                        // Retry if the 'grpc-status' is not equal to 0.\n+                        return trailers != null &&\n+                               trailers.getInt(GrpcHeaderNames.GRPC_STATUS) != 0;\n+                    });\n+                })))\n+        .build(MyGrpcStub.class);\n+  ```\n+- You can now access the metadata of <type://HttpFile> and <type://FileService> asynchronously. #1668 #2845\n+  ```java\n+  HttpFile httpFile = HttpFile.of(...);\n+  CompletableFuture<HttpFileAttributes> attrs =\n+      httpFile.readAttributes(CommonPools.blockingTaskExecutor());\n+  CompletableFuture<ResponseHeaders> headers =\n+      httpFile.readHeaders(CommonPools.blockingTaskExecutor());\n+  ```\n+- You can now easily customize <type://MeterIdPrefixFunction> using\n+  <type://MeterIdPrefixFunction#andThen(MeterIdPrefixFunctionCustomizer)>. #2839\n+  ```java\n+  MeterIdPrefixFunction\n+          .ofDefault(\"hoge\")\n+          .andThen((registry, log, id) -> {\n+              return id.withTags(\"grpc-status\", log.responseTrailers().get(\"grpc-status\"));\n+          });\n+  ```\n+- Both synchronous and asynchronous APIs to select an <type://Endpoint> are added to\n+  <type://EndpointSelector> and thus <type://EndpointGroup> which is a sub-interface. #1910 #2837\n+  ```java\n+  ClientRequestContext ctx = ...\n+  EndpointGroup group = ...\n+   // synchronous selection!\n+  Endpoint endpoint = group.selectNow(ctx);\n+   // asynchronous selection!\n+  CompletableFuture<Endpoint> future = group.select(ctx, ctx.eventLoop(), 1000 /* timeout */ );\n+  ```\n+  - Thanks to this change, you can now avoid the <type://EmptyEndpointGroupException> at least\n+    for the case where the <typeplural://Endpoint> disappear temporarily.\n+- You can now get the snapshot status of circuit breakers from monitoring system. #2841\n+- You can now schedule a request timeout in nanoseconds. #2864\n+  - <type://ServiceRequestContext#setRequestTimeout(TimeoutMode,Duration)>\n+  - <type://ClientRequestContext#setResponseTimeout(TimeoutMode,Duration)>\n+\n+## \ud83d\udcc8 Improvements\n+\n+- You can now see the error message by `ResourceLeakDetector` if the `DefaultClientFactory` is not closed\n+  properly. #2847\n+- The initial connection latency is lowered by giving up hopeless HTTP/1.1 connection early when\n+  HTTP/2 upgrade request fails. #2852\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- Armeria server does not convert the `Host` header to `:authority` header anymore. #2846 #2850\n+  - <type://RequestHeaders#authority()> looks into `Host` header if `:authority` header is missing.\n+- You can retry when <type://DnsTimeoutException> is raised using <type://RetryRule#onUnprocessed()>. #2836\n+- You no longer see `Http2Exception: failed to consume a HEADE` error. #2832\n+- You no longer see `You tried to set the content preview twice` warning unless\n+  you really did apply content previewing decorator twice. #2830 #2832\n+- A non-base <type://WebClient> respects the user defined scheme correctly. #2835\n+- The specified port when building <type://EurekaUpdatingListener> and <type://ZooKeeperUpdatingListener>\n+  is used in the registration information of an Armeria server. #2826\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+\n+- All Spring registration beans are deprecated. Use <type://ArmeriaServerConfigurator> and\n+  <type://DocServiceConfigurator> instead. #2787 #2838\n+  - Deprecated beans: `HttpServiceRegistrationBean`, `AnnotatedServiceRegistrationBean`,\n+    `GrpcServiceRegistrationBean` and `ThriftServiceRegistrationBean`\n+- `executor()`, `contextAwareExecutor()` and `contextAwareEventLoop()` methods in\n+  <type://RequestContext> are deprecated. #2834\n+- `on*(Predicate)` methods in the followings classes are deprecated. #2851\n+  - <type://RetryRule> and <type://RetryRuleBuilder>\n+  - <type://RetryRuleWithContent> and <type://RetryRuleWithContentBuilder>\n+  - <type://CircuitBreakerRule> and <type://CircuitBreakerRuleBuilder>\n+  - <type://CircuitBreakerRuleWithContent> and <type://CircuitBreakerRuleWithContentBuilder>\n+  - Use `on*(BiPredicate)` methods instead.\n+- `RequestLogBuilder.defer*Content*()` and `isDefer*Content*Set()`` have been deprecated in favor of\n+  `defer(RequestLogProperty)` and `isDeferred(RequestLogProperty)`. #2832\n+- `MeterIdPrefixFunction.andThen(BiFunction<MeterRegistry, MeterIdPrefix, MeterIdPrefix>` is deprecated. #2839\n+- `UnprocessedRequestException(Throwable)` constructor is deprecated.\n+  `Use <type://UnprocessedRequestException#of(Throwable)> instead. #2836", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa0600987618653bb2ffe60b9808931c428d3718"}, "originalPosition": 109}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d2267b418f10b867374e468f3dde50657f554cc", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/7d2267b418f10b867374e468f3dde50657f554cc", "committedDate": "2020-07-02T09:03:46Z", "message": "Address comments by @ikhoon"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNDgzNDIw", "url": "https://github.com/line/armeria/pull/2866#pullrequestreview-441483420", "createdAt": "2020-07-02T08:57:10Z", "commit": {"oid": "aa0600987618653bb2ffe60b9808931c428d3718"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwODo1NzoxMFrOGsD1fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOTowNjo1N1rOGsEMdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg1MzM3NA==", "bodyText": "How about mentioning the following in here or Bug fixes?\n\nHttpFileService.serve() is not blocked by ClassLoader lock anymore", "url": "https://github.com/line/armeria/pull/2866#discussion_r448853374", "createdAt": "2020-07-02T08:57:10Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/0.99.8.mdx", "diffHunk": "@@ -0,0 +1,188 @@\n+## \ud83c\udf1f New features\n+\n+- You can now use <type://ClientRequestContext> to build a complex <type://RetryRule> and\n+  <type://CircuitBreakerRule>. #2851\n+  ```java\n+  RetryRuleWithContent.<RpcResponse>builder()\n+                      .onServerErrorStatus()\n+                       // Now it's the BiPredicate that takes ctx as well.\n+                      .onException((ctx, ex) -> {\n+                          RpcRequest request = ctx.rpcRequest();\n+                          if (request != null &&\n+                              !safeMethods.contains(request.method())) {\n+                              return isRetryableException(throwable);\n+                          } else {\n+                              return false;\n+                          }\n+                      })\n+                      .thenBackoff(backoff);\n+  ```\n+- You can now run the gRPC server/client stubs generated by ScalaPB with Armeria. #2719\n+  - Please refer to the fully working [example](https://github.com/line/armeria/tree/master/examples/grpc-scala).\n+- You can now parse a response trailers from a response body for gRPC-Web using\n+  <type://GrpcWebUtil#parseTrailers(HttpData)>. #2848\n+  ```java\n+  Clients.builder(...)\n+         .decorator(RetryingClient.newDecorator(\n+                 RetryRuleWithContent.onResponse(response -> {\n+                     return response.aggregate().thenApply(aggregated -> {\n+                        HttpHeaders trailers =\n+                            GrpcWebUtil.parseTrailers(aggregated.content());\n+                        // Retry if the 'grpc-status' is not equal to 0.\n+                        return trailers != null &&\n+                               trailers.getInt(GrpcHeaderNames.GRPC_STATUS) != 0;\n+                    });\n+                })))\n+        .build(MyGrpcStub.class);\n+  ```\n+- You can now access the metadata of <type://HttpFile> and <type://FileService> asynchronously. #1668 #2845", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa0600987618653bb2ffe60b9808931c428d3718"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg1NjE5OQ==", "bodyText": "ScalaPB and monix_reactive are newly-introduced at this version. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2866#discussion_r448856199", "createdAt": "2020-07-02T09:01:46Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/0.99.8.mdx", "diffHunk": "@@ -0,0 +1,188 @@\n+## \ud83c\udf1f New features\n+\n+- You can now use <type://ClientRequestContext> to build a complex <type://RetryRule> and\n+  <type://CircuitBreakerRule>. #2851\n+  ```java\n+  RetryRuleWithContent.<RpcResponse>builder()\n+                      .onServerErrorStatus()\n+                       // Now it's the BiPredicate that takes ctx as well.\n+                      .onException((ctx, ex) -> {\n+                          RpcRequest request = ctx.rpcRequest();\n+                          if (request != null &&\n+                              !safeMethods.contains(request.method())) {\n+                              return isRetryableException(throwable);\n+                          } else {\n+                              return false;\n+                          }\n+                      })\n+                      .thenBackoff(backoff);\n+  ```\n+- You can now run the gRPC server/client stubs generated by ScalaPB with Armeria. #2719\n+  - Please refer to the fully working [example](https://github.com/line/armeria/tree/master/examples/grpc-scala).\n+- You can now parse a response trailers from a response body for gRPC-Web using\n+  <type://GrpcWebUtil#parseTrailers(HttpData)>. #2848\n+  ```java\n+  Clients.builder(...)\n+         .decorator(RetryingClient.newDecorator(\n+                 RetryRuleWithContent.onResponse(response -> {\n+                     return response.aggregate().thenApply(aggregated -> {\n+                        HttpHeaders trailers =\n+                            GrpcWebUtil.parseTrailers(aggregated.content());\n+                        // Retry if the 'grpc-status' is not equal to 0.\n+                        return trailers != null &&\n+                               trailers.getInt(GrpcHeaderNames.GRPC_STATUS) != 0;\n+                    });\n+                })))\n+        .build(MyGrpcStub.class);\n+  ```\n+- You can now access the metadata of <type://HttpFile> and <type://FileService> asynchronously. #1668 #2845\n+  ```java\n+  HttpFile httpFile = HttpFile.of(...);\n+  CompletableFuture<HttpFileAttributes> attrs =\n+      httpFile.readAttributes(CommonPools.blockingTaskExecutor());\n+  CompletableFuture<ResponseHeaders> headers =\n+      httpFile.readHeaders(CommonPools.blockingTaskExecutor());\n+  ```\n+- You can now easily customize <type://MeterIdPrefixFunction> using\n+  <type://MeterIdPrefixFunction#andThen(MeterIdPrefixFunctionCustomizer)>. #2839\n+  ```java\n+  MeterIdPrefixFunction\n+          .ofDefault(\"hoge\")\n+          .andThen((registry, log, id) -> {\n+              return id.withTags(\"grpc-status\", log.responseTrailers().get(\"grpc-status\"));\n+          });\n+  ```\n+- Both synchronous and asynchronous APIs to select an <type://Endpoint> are added to\n+  <type://EndpointSelector> and thus <type://EndpointGroup> which is a sub-interface. #1910 #2837\n+  ```java\n+  ClientRequestContext ctx = ...\n+  EndpointGroup group = ...\n+   // synchronous selection!\n+  Endpoint endpoint = group.selectNow(ctx);\n+   // asynchronous selection!\n+  CompletableFuture<Endpoint> future = group.select(ctx, ctx.eventLoop(), 1000 /* timeout */ );\n+  ```\n+  - Thanks to this change, you can now avoid the <type://EmptyEndpointGroupException> at least\n+    for the case where the <typeplural://Endpoint> disappear temporarily.\n+- You can now get the snapshot status of circuit breakers from monitoring system. #2841\n+- You can now schedule a request timeout in nanoseconds. #2864\n+  - <type://ServiceRequestContext#setRequestTimeout(TimeoutMode,Duration)>\n+  - <type://ClientRequestContext#setResponseTimeout(TimeoutMode,Duration)>\n+\n+## \ud83d\udcc8 Improvements\n+\n+- You can now see the error message by `ResourceLeakDetector` if the `DefaultClientFactory` is not closed\n+  properly. #2847\n+- The initial connection latency is lowered by giving up hopeless HTTP/1.1 connection early when\n+  HTTP/2 upgrade request fails. #2852\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- Armeria server does not convert the `Host` header to `:authority` header anymore. #2846 #2850\n+  - <type://RequestHeaders#authority()> looks into `Host` header if `:authority` header is missing.\n+- You can retry when <type://DnsTimeoutException> is raised using <type://RetryRule#onUnprocessed()>. #2836\n+- You no longer see `Http2Exception: failed to consume a HEADE` error. #2832\n+- You no longer see `You tried to set the content preview twice` warning unless\n+  you really did apply content previewing decorator twice. #2830 #2832\n+- A non-base <type://WebClient> respects the user defined scheme correctly. #2835\n+- The specified port when building <type://EurekaUpdatingListener> and <type://ZooKeeperUpdatingListener>\n+  is used in the registration information of an Armeria server. #2826\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+\n+- All Spring registration beans are deprecated. Use <type://ArmeriaServerConfigurator> and\n+  <type://DocServiceConfigurator> instead. #2787 #2838\n+  - Deprecated beans: `HttpServiceRegistrationBean`, `AnnotatedServiceRegistrationBean`,\n+    `GrpcServiceRegistrationBean` and `ThriftServiceRegistrationBean`\n+- `executor()`, `contextAwareExecutor()` and `contextAwareEventLoop()` methods in\n+  <type://RequestContext> are deprecated. #2834\n+- `on*(Predicate)` methods in the followings classes are deprecated. #2851\n+  - <type://RetryRule> and <type://RetryRuleBuilder>\n+  - <type://RetryRuleWithContent> and <type://RetryRuleWithContentBuilder>\n+  - <type://CircuitBreakerRule> and <type://CircuitBreakerRuleBuilder>\n+  - <type://CircuitBreakerRuleWithContent> and <type://CircuitBreakerRuleWithContentBuilder>\n+  - Use `on*(BiPredicate)` methods instead.\n+- `RequestLogBuilder.defer*Content*()` and `isDefer*Content*Set()`` have been deprecated in favor of\n+  `defer(RequestLogProperty)` and `isDeferred(RequestLogProperty)`. #2832\n+- `MeterIdPrefixFunction.andThen(BiFunction<MeterRegistry, MeterIdPrefix, MeterIdPrefix>` is deprecated. #2839\n+- `UnprocessedRequestException(Throwable)` constructor is deprecated.\n+  `Use <type://UnprocessedRequestException#of(Throwable)> instead. #2836\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- The names of various artifacts are changed. #2676 #2677 #2829 #2843\n+  - `armeria-dropwizard` is now `armeria-dropwizard2`.\n+  - `armeria-jetty` is now `armeria-jetty9`.\n+  - `armeria-rxjava` is now `armeria-rxjava3`.\n+    - `rxjava` package is renamed to `rxjava3`.\n+  - `armeria-spring-boot-actuator-autoconfigure` is now `armeria-spring-boot2-actuator-autoconfigure`.\n+  - `armeria-spring-boot-actuator-starter` is now `armeria-spring-boot2-actuator-starter`.\n+  - `armeria-spring-boot-autoconfigure` is now `armeria-spring-boot2-autoconfigure`.\n+  - `armeria-spring-boot-starter` is now `armeria-spring-boot2-starter`.\n+  - `armeria-spring-boot-webflux-autoconfigure` is now `armeria-spring-boot2-webflux-autoconfigure`.\n+  - `armeria-spring-boot-webflux-starter` is now `armeria-spring-boot2-webflux-starter`.\n+  - `armeria-testing-common` has been removed.\n+  - `armeria-testing-junit4` is now `armeria-junit4`.\n+  - `armeria-testing-junit` is now `armeria-junit5`.\n+    - `junit` package is renamed to `junit5`.\n+  - `armeria-thrift` is now `armeria-thrift0.13`.\n+  - `armeria-tomcat` is now `armeria-tomcat9`.\n+  - `armeria-zookeeper` is now `armeria-zookeeper3`.\n+- <type://RequestContext#eventLoop()> now returns <type://ContextAwareEventLoop> which always set the\n+  <type://RequestContext> before executing any submitted tasks. #2629 #2834\n+- The default logging level for successful requests and response has been changed. #2696 #2855\n+  - `INFO` to `DEBUG` for `Logging{Client,Service}.newDecorator()`\n+  - `TRACE` to `DEBUG` for `Logging{Client,Service}Builder`\n+- The APIs of <type://HttpFile> and <type://HttpVfs> have been changed. #1668 #2845 #2861\n+- <type://AggregatedHttpFile> does not extend <type://HttpFile> anymore. #2861\n+- <type://AbstractHttpFile#headers()> is now <type://AbstractHttpFile#additionalHeaders()>. #2861\n+- <type://EndpointSelector> API has been changed. #2837  #1910\n+  - It is not a functional interface anymore.\n+  - `select()` has been renamed to <type://EndpointSelector#selectNow(ClientRequestContext)>.\n+  - An asynchronous <type://EndpointSelector#select(ClientRequestContext,ScheduledExecutorService,long)>\n+    has been added.\n+- <type://UserClient> API has been changed. #2837\n+  - Its constructor requires more parameters.\n+  - `execute()` requires less parameters.\n+- `StreamMessage.drainAll()` and its variants have been removed. #2782 #2827\n+  - They are only used for unit tests and you can use `reactor.test.StepVerifier` instead.\n+- `UnprocessedRequestException(String, Throwable)` constructor has been removed without replacement. #2836\n+- Deprecated timeout APIs in `{Service,Client}RequestContext` have been removed. #2864\n+  - `extend{Request,Response}TimeoutMillis(long)` and `extend{Request,Response}Timeout(Duration)`\n+  - `set{Request,Response}TimeoutAfterMillis(long)` and `set{Request,Response}TimeoutAfter(Duration)`\n+  - `set{Request,Response}TimeoutAtMillis(long)` and `set{Request,Response}TimeoutAt(Duration)`\n+\n+## \u26d3 Dependencies\n+\n+- gRPC-Java 1.30.1 -> 1.30.2\n+- Jackson 2.11.0 -> 2.11.1\n+- Kafka 1.1.1 -> 2.5.0\n+- Micrometer 1.5.1 -> 1.5.2\n+- Reactor 3.3.6 -> 3.3.7\n+- Shaded dependencies\n+  - Caffeine 2.8.4 -> 2.8.5\n+- Examples:\n+  - Dagger 2.28 -> 2.28.1\n+  - monix_reactive 3.2.1 -> 3.2.2\n+  - ScalaPB 0.10.1 -> 0.10.6", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa0600987618653bb2ffe60b9808931c428d3718"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg1OTI1Mg==", "bodyText": "Add @gary-lo because of #2690", "url": "https://github.com/line/armeria/pull/2866#discussion_r448859252", "createdAt": "2020-07-02T09:06:57Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/0.99.8.mdx", "diffHunk": "@@ -0,0 +1,188 @@\n+## \ud83c\udf1f New features\n+\n+- You can now use <type://ClientRequestContext> to build a complex <type://RetryRule> and\n+  <type://CircuitBreakerRule>. #2851\n+  ```java\n+  RetryRuleWithContent.<RpcResponse>builder()\n+                      .onServerErrorStatus()\n+                       // Now it's the BiPredicate that takes ctx as well.\n+                      .onException((ctx, ex) -> {\n+                          RpcRequest request = ctx.rpcRequest();\n+                          if (request != null &&\n+                              !safeMethods.contains(request.method())) {\n+                              return isRetryableException(throwable);\n+                          } else {\n+                              return false;\n+                          }\n+                      })\n+                      .thenBackoff(backoff);\n+  ```\n+- You can now run the gRPC server/client stubs generated by ScalaPB with Armeria. #2719\n+  - Please refer to the fully working [example](https://github.com/line/armeria/tree/master/examples/grpc-scala).\n+- You can now parse a response trailers from a response body for gRPC-Web using\n+  <type://GrpcWebUtil#parseTrailers(HttpData)>. #2848\n+  ```java\n+  Clients.builder(...)\n+         .decorator(RetryingClient.newDecorator(\n+                 RetryRuleWithContent.onResponse(response -> {\n+                     return response.aggregate().thenApply(aggregated -> {\n+                        HttpHeaders trailers =\n+                            GrpcWebUtil.parseTrailers(aggregated.content());\n+                        // Retry if the 'grpc-status' is not equal to 0.\n+                        return trailers != null &&\n+                               trailers.getInt(GrpcHeaderNames.GRPC_STATUS) != 0;\n+                    });\n+                })))\n+        .build(MyGrpcStub.class);\n+  ```\n+- You can now access the metadata of <type://HttpFile> and <type://FileService> asynchronously. #1668 #2845\n+  ```java\n+  HttpFile httpFile = HttpFile.of(...);\n+  CompletableFuture<HttpFileAttributes> attrs =\n+      httpFile.readAttributes(CommonPools.blockingTaskExecutor());\n+  CompletableFuture<ResponseHeaders> headers =\n+      httpFile.readHeaders(CommonPools.blockingTaskExecutor());\n+  ```\n+- You can now easily customize <type://MeterIdPrefixFunction> using\n+  <type://MeterIdPrefixFunction#andThen(MeterIdPrefixFunctionCustomizer)>. #2839\n+  ```java\n+  MeterIdPrefixFunction\n+          .ofDefault(\"hoge\")\n+          .andThen((registry, log, id) -> {\n+              return id.withTags(\"grpc-status\", log.responseTrailers().get(\"grpc-status\"));\n+          });\n+  ```\n+- Both synchronous and asynchronous APIs to select an <type://Endpoint> are added to\n+  <type://EndpointSelector> and thus <type://EndpointGroup> which is a sub-interface. #1910 #2837\n+  ```java\n+  ClientRequestContext ctx = ...\n+  EndpointGroup group = ...\n+   // synchronous selection!\n+  Endpoint endpoint = group.selectNow(ctx);\n+   // asynchronous selection!\n+  CompletableFuture<Endpoint> future = group.select(ctx, ctx.eventLoop(), 1000 /* timeout */ );\n+  ```\n+  - Thanks to this change, you can now avoid the <type://EmptyEndpointGroupException> at least\n+    for the case where the <typeplural://Endpoint> disappear temporarily.\n+- You can now get the snapshot status of circuit breakers from monitoring system. #2841\n+- You can now schedule a request timeout in nanoseconds. #2864\n+  - <type://ServiceRequestContext#setRequestTimeout(TimeoutMode,Duration)>\n+  - <type://ClientRequestContext#setResponseTimeout(TimeoutMode,Duration)>\n+\n+## \ud83d\udcc8 Improvements\n+\n+- You can now see the error message by `ResourceLeakDetector` if the `DefaultClientFactory` is not closed\n+  properly. #2847\n+- The initial connection latency is lowered by giving up hopeless HTTP/1.1 connection early when\n+  HTTP/2 upgrade request fails. #2852\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- Armeria server does not convert the `Host` header to `:authority` header anymore. #2846 #2850\n+  - <type://RequestHeaders#authority()> looks into `Host` header if `:authority` header is missing.\n+- You can retry when <type://DnsTimeoutException> is raised using <type://RetryRule#onUnprocessed()>. #2836\n+- You no longer see `Http2Exception: failed to consume a HEADE` error. #2832\n+- You no longer see `You tried to set the content preview twice` warning unless\n+  you really did apply content previewing decorator twice. #2830 #2832\n+- A non-base <type://WebClient> respects the user defined scheme correctly. #2835\n+- The specified port when building <type://EurekaUpdatingListener> and <type://ZooKeeperUpdatingListener>\n+  is used in the registration information of an Armeria server. #2826\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+\n+- All Spring registration beans are deprecated. Use <type://ArmeriaServerConfigurator> and\n+  <type://DocServiceConfigurator> instead. #2787 #2838\n+  - Deprecated beans: `HttpServiceRegistrationBean`, `AnnotatedServiceRegistrationBean`,\n+    `GrpcServiceRegistrationBean` and `ThriftServiceRegistrationBean`\n+- `executor()`, `contextAwareExecutor()` and `contextAwareEventLoop()` methods in\n+  <type://RequestContext> are deprecated. #2834\n+- `on*(Predicate)` methods in the followings classes are deprecated. #2851\n+  - <type://RetryRule> and <type://RetryRuleBuilder>\n+  - <type://RetryRuleWithContent> and <type://RetryRuleWithContentBuilder>\n+  - <type://CircuitBreakerRule> and <type://CircuitBreakerRuleBuilder>\n+  - <type://CircuitBreakerRuleWithContent> and <type://CircuitBreakerRuleWithContentBuilder>\n+  - Use `on*(BiPredicate)` methods instead.\n+- `RequestLogBuilder.defer*Content*()` and `isDefer*Content*Set()`` have been deprecated in favor of\n+  `defer(RequestLogProperty)` and `isDeferred(RequestLogProperty)`. #2832\n+- `MeterIdPrefixFunction.andThen(BiFunction<MeterRegistry, MeterIdPrefix, MeterIdPrefix>` is deprecated. #2839\n+- `UnprocessedRequestException(Throwable)` constructor is deprecated.\n+  `Use <type://UnprocessedRequestException#of(Throwable)> instead. #2836\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- The names of various artifacts are changed. #2676 #2677 #2829 #2843\n+  - `armeria-dropwizard` is now `armeria-dropwizard2`.\n+  - `armeria-jetty` is now `armeria-jetty9`.\n+  - `armeria-rxjava` is now `armeria-rxjava3`.\n+    - `rxjava` package is renamed to `rxjava3`.\n+  - `armeria-spring-boot-actuator-autoconfigure` is now `armeria-spring-boot2-actuator-autoconfigure`.\n+  - `armeria-spring-boot-actuator-starter` is now `armeria-spring-boot2-actuator-starter`.\n+  - `armeria-spring-boot-autoconfigure` is now `armeria-spring-boot2-autoconfigure`.\n+  - `armeria-spring-boot-starter` is now `armeria-spring-boot2-starter`.\n+  - `armeria-spring-boot-webflux-autoconfigure` is now `armeria-spring-boot2-webflux-autoconfigure`.\n+  - `armeria-spring-boot-webflux-starter` is now `armeria-spring-boot2-webflux-starter`.\n+  - `armeria-testing-common` has been removed.\n+  - `armeria-testing-junit4` is now `armeria-junit4`.\n+  - `armeria-testing-junit` is now `armeria-junit5`.\n+    - `junit` package is renamed to `junit5`.\n+  - `armeria-thrift` is now `armeria-thrift0.13`.\n+  - `armeria-tomcat` is now `armeria-tomcat9`.\n+  - `armeria-zookeeper` is now `armeria-zookeeper3`.\n+- <type://RequestContext#eventLoop()> now returns <type://ContextAwareEventLoop> which always set the\n+  <type://RequestContext> before executing any submitted tasks. #2629 #2834\n+- The default logging level for successful requests and response has been changed. #2696 #2855\n+  - `INFO` to `DEBUG` for `Logging{Client,Service}.newDecorator()`\n+  - `TRACE` to `DEBUG` for `Logging{Client,Service}Builder`\n+- The APIs of <type://HttpFile> and <type://HttpVfs> have been changed. #1668 #2845 #2861\n+- <type://AggregatedHttpFile> does not extend <type://HttpFile> anymore. #2861\n+- <type://AbstractHttpFile#headers()> is now <type://AbstractHttpFile#additionalHeaders()>. #2861\n+- <type://EndpointSelector> API has been changed. #2837  #1910\n+  - It is not a functional interface anymore.\n+  - `select()` has been renamed to <type://EndpointSelector#selectNow(ClientRequestContext)>.\n+  - An asynchronous <type://EndpointSelector#select(ClientRequestContext,ScheduledExecutorService,long)>\n+    has been added.\n+- <type://UserClient> API has been changed. #2837\n+  - Its constructor requires more parameters.\n+  - `execute()` requires less parameters.\n+- `StreamMessage.drainAll()` and its variants have been removed. #2782 #2827\n+  - They are only used for unit tests and you can use `reactor.test.StepVerifier` instead.\n+- `UnprocessedRequestException(String, Throwable)` constructor has been removed without replacement. #2836\n+- Deprecated timeout APIs in `{Service,Client}RequestContext` have been removed. #2864\n+  - `extend{Request,Response}TimeoutMillis(long)` and `extend{Request,Response}Timeout(Duration)`\n+  - `set{Request,Response}TimeoutAfterMillis(long)` and `set{Request,Response}TimeoutAfter(Duration)`\n+  - `set{Request,Response}TimeoutAtMillis(long)` and `set{Request,Response}TimeoutAt(Duration)`\n+\n+## \u26d3 Dependencies\n+\n+- gRPC-Java 1.30.1 -> 1.30.2\n+- Jackson 2.11.0 -> 2.11.1\n+- Kafka 1.1.1 -> 2.5.0\n+- Micrometer 1.5.1 -> 1.5.2\n+- Reactor 3.3.6 -> 3.3.7\n+- Shaded dependencies\n+  - Caffeine 2.8.4 -> 2.8.5\n+- Examples:\n+  - Dagger 2.28 -> 2.28.1\n+  - monix_reactive 3.2.1 -> 3.2.2\n+  - ScalaPB 0.10.1 -> 0.10.6\n+- Build:\n+  - Checkstyle 8.33 -> 8.34\n+  - Eureka 1.9.23 -> 1.9.25\n+  - Finagle ServerSets 20.5.0 -> 20.6.0\n+  - Gradle 6.5 -> 6.5.1\n+  - gRPC-Kotlin 0.1.3 -> 0.1.4\n+\n+## \ud83d\ude47 Thank you\n+\n+<ThankYou\n+  usernames={[\n+    'anuraaga',\n+    'heowc',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa0600987618653bb2ffe60b9808931c428d3718"}, "originalPosition": 180}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ec5ef6a355a90b16c4c3708669ded3185f36cec", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/4ec5ef6a355a90b16c4c3708669ded3185f36cec", "committedDate": "2020-07-02T09:12:45Z", "message": "Address comments one more"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d992328e665a3b5162727b94b7542f6084c179e9", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/d992328e665a3b5162727b94b7542f6084c179e9", "committedDate": "2020-07-02T09:14:23Z", "message": "Add more"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNDk4MjI1", "url": "https://github.com/line/armeria/pull/2866#pullrequestreview-441498225", "createdAt": "2020-07-02T09:16:19Z", "commit": {"oid": "d992328e665a3b5162727b94b7542f6084c179e9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "faa4c963a0c23bf1c9c62211d3729be60a21701b", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/faa4c963a0c23bf1c9c62211d3729be60a21701b", "committedDate": "2020-07-02T10:38:52Z", "message": "Add comma"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eb1e15453816200680071920e0ca074c3a7eaea", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/7eb1e15453816200680071920e0ca074c3a7eaea", "committedDate": "2020-07-02T11:13:58Z", "message": "Fix indent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "943546b647c439d6b4c343d7532839b07652fe12", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/943546b647c439d6b4c343d7532839b07652fe12", "committedDate": "2020-07-02T11:34:20Z", "message": "`->` to `\u2192`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNTkzMzU3", "url": "https://github.com/line/armeria/pull/2866#pullrequestreview-441593357", "createdAt": "2020-07-02T11:35:04Z", "commit": {"oid": "943546b647c439d6b4c343d7532839b07652fe12"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 348, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}