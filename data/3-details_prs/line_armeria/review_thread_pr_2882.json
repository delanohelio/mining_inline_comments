{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1NTIyNjEy", "number": 2882, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMzoxOTo1OVrOEMUJZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMjo1Njo1NVrOEMuTXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzQ4NDU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/unsafe/PooledHttpData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMzoxOTo1OVrOGuWqiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjozNDoyNVrOGvDfag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1OTAxNw==", "bodyText": "I don't think a user can be guaranteed to have a PooledHttpData even when aggregating with pooled objects if downstream doesn't pool (wrapping into pooled was one of the features of the new API so users don't have to always use instanceof for safety). Are you going to make DefaultHttpData implement PooledHttpData too as a no-op? Otherwise, I think we can remove SafeCloseable and potentially PooledHttpData, it doesn't add anything over ByteBufHolder", "url": "https://github.com/line/armeria/pull/2882#discussion_r451259017", "createdAt": "2020-07-08T03:19:59Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/unsafe/PooledHttpData.java", "diffHunk": "@@ -38,24 +47,30 @@\n  * you should only use this class in performance-sensitive situations and after being ready to deal with these\n  * very hard-to-debug issues.\n  *\n- * <p>You may interact with {@link PooledHttpData} when using objects that return pooled objects, such as\n- * {@link PooledWebClient}. If you don't use such objects, you will never see a {@link PooledHttpData} and don't\n- * need to read further.\n+ * <p>You may interact with {@link PooledHttpData} when using operations that return pooled objects, such as:\n+ * <ul>\n+ *   <li>{@link StreamMessage#subscribe(Subscriber, SubscriptionOption...)} with\n+ *       {@link SubscriptionOption#WITH_POOLED_OBJECTS}</li>\n+ *   <li>{@link HttpRequest#aggregateWithPooledObjects(ByteBufAllocator)}</li>\n+ *   <li>{@link HttpResponse#aggregateWithPooledObjects(ByteBufAllocator)}</li>\n+ *   <li>{@link HttpFile#aggregateWithPooledObjects(Executor, ByteBufAllocator)}</li>\n+ * </ul>\n+ * If you don't use such operations, you will never see a {@link PooledHttpData} and don't need to read further.\n  *\n  * <h3>Impact of pooled buffers</h3>\n  *\n- * <p>Any time you receive a {@link PooledHttpData} it will have a single reference that must be released -\n- * failure to release the reference will result in a memory leak and poor performance. You must make sure to do\n- * this by calling {@link PooledHttpData#close()}, usually in a try-with-resources structure to avoid side\n- * effects.\n+ * <p>Any time you receive a {@link PooledHttpData} it will have a single reference of {@link ByteBuf} that\n+ * must be released - failure to release the {@link ByteBuf} will result in a memory leak and poor performance.\n+ * You must make sure to do this by calling {@link PooledHttpData#close()}, usually in a try-with-resources\n+ * structure to avoid side effects.\n  *\n  * <p>For example, <pre>{@code\n- * PooledHttpResponse res = PooledHttpResponse.of(client.get(\"/\"));\n+ * HttpResponse res = client.get(\"/\");\n  * res.aggregateWithPooledObjects(ctx.alloc(), ctx.executor())\n  *    .thenApply(aggResp -> {\n  *        // try-with-resources here ensures the content is released\n  *        // if it is a ByteBufHttpData, or otherwise is a no-op if it is not.\n- *        try (PooledHttpData content = aggResp.content()) {\n+ *        try (PooledHttpData content = (PooledHttpData) aggResp.content()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715e88c769ac5ed30e6af8fd976de94611a61483"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk5MzQ1MA==", "bodyText": "Let me handle this in a follow-up PR I'm working on now.", "url": "https://github.com/line/armeria/pull/2882#discussion_r451993450", "createdAt": "2020-07-09T06:34:25Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/unsafe/PooledHttpData.java", "diffHunk": "@@ -38,24 +47,30 @@\n  * you should only use this class in performance-sensitive situations and after being ready to deal with these\n  * very hard-to-debug issues.\n  *\n- * <p>You may interact with {@link PooledHttpData} when using objects that return pooled objects, such as\n- * {@link PooledWebClient}. If you don't use such objects, you will never see a {@link PooledHttpData} and don't\n- * need to read further.\n+ * <p>You may interact with {@link PooledHttpData} when using operations that return pooled objects, such as:\n+ * <ul>\n+ *   <li>{@link StreamMessage#subscribe(Subscriber, SubscriptionOption...)} with\n+ *       {@link SubscriptionOption#WITH_POOLED_OBJECTS}</li>\n+ *   <li>{@link HttpRequest#aggregateWithPooledObjects(ByteBufAllocator)}</li>\n+ *   <li>{@link HttpResponse#aggregateWithPooledObjects(ByteBufAllocator)}</li>\n+ *   <li>{@link HttpFile#aggregateWithPooledObjects(Executor, ByteBufAllocator)}</li>\n+ * </ul>\n+ * If you don't use such operations, you will never see a {@link PooledHttpData} and don't need to read further.\n  *\n  * <h3>Impact of pooled buffers</h3>\n  *\n- * <p>Any time you receive a {@link PooledHttpData} it will have a single reference that must be released -\n- * failure to release the reference will result in a memory leak and poor performance. You must make sure to do\n- * this by calling {@link PooledHttpData#close()}, usually in a try-with-resources structure to avoid side\n- * effects.\n+ * <p>Any time you receive a {@link PooledHttpData} it will have a single reference of {@link ByteBuf} that\n+ * must be released - failure to release the {@link ByteBuf} will result in a memory leak and poor performance.\n+ * You must make sure to do this by calling {@link PooledHttpData#close()}, usually in a try-with-resources\n+ * structure to avoid side effects.\n  *\n  * <p>For example, <pre>{@code\n- * PooledHttpResponse res = PooledHttpResponse.of(client.get(\"/\"));\n+ * HttpResponse res = client.get(\"/\");\n  * res.aggregateWithPooledObjects(ctx.alloc(), ctx.executor())\n  *    .thenApply(aggResp -> {\n  *        // try-with-resources here ensures the content is released\n  *        // if it is a ByteBufHttpData, or otherwise is a no-op if it is not.\n- *        try (PooledHttpData content = aggResp.content()) {\n+ *        try (PooledHttpData content = (PooledHttpData) aggResp.content()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1OTAxNw=="}, "originalCommit": {"oid": "715e88c769ac5ed30e6af8fd976de94611a61483"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzQ4OTQzOnYy", "diffSide": "RIGHT", "path": "grpc-protocol/src/main/java/com/linecorp/armeria/client/grpc/protocol/UnaryGrpcClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMzoyMzowMFrOGuWtSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTo1MzowN1rOGugrxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1OTcyMQ==", "bodyText": "This is the pattern which is annoying currently unless we guarantee msg is always a ByteBufHolder or PooledHttpData, possibly by having non-pooled also implement the interface using no-op / wrapping", "url": "https://github.com/line/armeria/pull/2882#discussion_r451259721", "createdAt": "2020-07-08T03:23:00Z", "author": {"login": "anuraaga"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/client/grpc/protocol/UnaryGrpcClient.java", "diffHunk": "@@ -127,31 +127,33 @@ private static void checkGrpcStatus(@Nullable String grpcStatus, HttpHeaders hea\n         }\n     }\n \n-    private static final class GrpcFramingDecorator extends SimplePooledDecoratingHttpClient {\n+    private static final class GrpcFramingDecorator extends SimpleDecoratingHttpClient {\n \n         private GrpcFramingDecorator(HttpClient delegate) {\n             super(delegate);\n         }\n \n         @Override\n-        public HttpResponse execute(\n-                PooledHttpClient client, ClientRequestContext ctx, PooledHttpRequest req) {\n+        public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) {\n             return HttpResponse.from(\n                     req.aggregateWithPooledObjects(ctx.eventLoop(), ctx.alloc())\n                        .thenCompose(\n                                msg -> {\n-                                   final ByteBuf buf = msg.content().content();\n-                                   final PooledHttpData framed;\n+                                   final ByteBuf buf;\n+                                   if (msg.content() instanceof ByteBufHolder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715e88c769ac5ed30e6af8fd976de94611a61483"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQyMzE3Mw==", "bodyText": "Let me think about this and send a follow up pull request if I find something. Thanks for suggestion.", "url": "https://github.com/line/armeria/pull/2882#discussion_r451423173", "createdAt": "2020-07-08T09:53:07Z", "author": {"login": "trustin"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/client/grpc/protocol/UnaryGrpcClient.java", "diffHunk": "@@ -127,31 +127,33 @@ private static void checkGrpcStatus(@Nullable String grpcStatus, HttpHeaders hea\n         }\n     }\n \n-    private static final class GrpcFramingDecorator extends SimplePooledDecoratingHttpClient {\n+    private static final class GrpcFramingDecorator extends SimpleDecoratingHttpClient {\n \n         private GrpcFramingDecorator(HttpClient delegate) {\n             super(delegate);\n         }\n \n         @Override\n-        public HttpResponse execute(\n-                PooledHttpClient client, ClientRequestContext ctx, PooledHttpRequest req) {\n+        public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) {\n             return HttpResponse.from(\n                     req.aggregateWithPooledObjects(ctx.eventLoop(), ctx.alloc())\n                        .thenCompose(\n                                msg -> {\n-                                   final ByteBuf buf = msg.content().content();\n-                                   final PooledHttpData framed;\n+                                   final ByteBuf buf;\n+                                   if (msg.content() instanceof ByteBufHolder) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1OTcyMQ=="}, "originalCommit": {"oid": "715e88c769ac5ed30e6af8fd976de94611a61483"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzc2OTg5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/common/unsafe/ByteBufHttpDataTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMjo1Njo1NVrOGu_9ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjozNTowNFrOGvDgVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkzNTU4OQ==", "bodyText": "How about just using isOne()?", "url": "https://github.com/line/armeria/pull/2882#discussion_r451935589", "createdAt": "2020-07-09T02:56:55Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/common/unsafe/ByteBufHttpDataTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.unsafe;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.io.ByteStreams;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.buffer.Unpooled;\n+\n+class ByteBufHttpDataTest {\n+\n+    @Test\n+    void empty() {\n+        final ByteBufHttpData data = ByteBufHttpData.EMPTY;\n+        assertThat(data.array()).isEmpty();\n+        assertThat(data.content()).isSameAs(Unpooled.EMPTY_BUFFER);\n+        assertThat(data.isEmpty()).isTrue();\n+        assertThat(data.isEndOfStream()).isFalse();\n+        assertThat(data.withEndOfStream()).isSameAs(ByteBufHttpData.EMPTY_EOS);\n+        assertThat(data.withEndOfStream(false)).isSameAs(data);\n+\n+        for (int i = 0; i < 2; i++) {\n+            // close() should not release anything.\n+            data.close();\n+            assertThat(data.content().refCnt()).isGreaterThan(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715e88c769ac5ed30e6af8fd976de94611a61483"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk5MzY4Nw==", "bodyText": "Let me handle this in a follow-up PR as well, to avoid a conflict with my working copy. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2882#discussion_r451993687", "createdAt": "2020-07-09T06:35:04Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/unsafe/ByteBufHttpDataTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.unsafe;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.io.ByteStreams;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.buffer.Unpooled;\n+\n+class ByteBufHttpDataTest {\n+\n+    @Test\n+    void empty() {\n+        final ByteBufHttpData data = ByteBufHttpData.EMPTY;\n+        assertThat(data.array()).isEmpty();\n+        assertThat(data.content()).isSameAs(Unpooled.EMPTY_BUFFER);\n+        assertThat(data.isEmpty()).isTrue();\n+        assertThat(data.isEndOfStream()).isFalse();\n+        assertThat(data.withEndOfStream()).isSameAs(ByteBufHttpData.EMPTY_EOS);\n+        assertThat(data.withEndOfStream(false)).isSameAs(data);\n+\n+        for (int i = 0; i < 2; i++) {\n+            // close() should not release anything.\n+            data.close();\n+            assertThat(data.content().refCnt()).isGreaterThan(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkzNTU4OQ=="}, "originalCommit": {"oid": "715e88c769ac5ed30e6af8fd976de94611a61483"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2496, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}