{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMDcxMjYw", "number": 2729, "title": "Make `RequestScopedMdc` properties are inherited", "bodyText": "Motivation:\nA user will expect the following case works:\nServiceRequestContext sctx = ...;\ntry (SafeCloseable ignored = sctx.push()) {\n    RequestScopedMdc.put(sctx, \"transactionId\", \"1234\");\n\n    ClientRequestContext cctx = ...;\n    try (SafeCloseable ignored2 = cctx.push()) {\n        assert MDC.get(\"transactionId\").equals(\"1234\");\n    }\n}\n\n.. which does not work currently, because RequestScopedMdc does not\nlook up the root context's map.\nModifications:\n\nMake RequestScopedMdc.get(), getAll() and getCopyOfContextMap()\nlook for the root context map.\nReduced the memory footprint of overall map iteration by using\nonly Object2ObjectMaps.\n\nObject2ObjectMap uses a special variant of Iterator when iterating\nover other Object2ObjectMaps.\n\n\nReduced the memory footprint of copyAll() and getCopyOfContextMap()\nby using getPropertyMap().\n\nResult:\n\nRequestScopedMdc properties are inherited from the root context.", "createdAt": "2020-05-19T11:57:39Z", "url": "https://github.com/line/armeria/pull/2729", "merged": true, "mergeCommit": {"oid": "f3b96e0783f9e154032ee94b48f225497938e853"}, "closed": true, "closedAt": "2020-05-20T04:19:05Z", "author": {"login": "trustin"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcizIaJgH2gAyNDIwMDcxMjYwOjk4YjViMjJiOTM4ZDNjMGNjZjQyNTQ5MTY2OTEyZDc2ZDBjNDQ4ODI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjBGtgAFqTQxNDk3ODk3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "98b5b22b938d3c0ccf42549166912d76d0c44882", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/98b5b22b938d3c0ccf42549166912d76d0c44882", "committedDate": "2020-05-19T11:53:51Z", "message": "Make `RequestScopedMdc` properties are inherited\n\nMotivation:\n\nA user will expect the following case works:\n\n    ServiceRequestContext sctx = ...;\n    try (SafeCloseable ignored = sctx.push()) {\n        RequestScopedMdc.put(sctx, \"transactionId\", \"1234\");\n\n        ClientRequestContext cctx = ...;\n        try (SafeCloseable ignored2 = cctx.push()) {\n            assert MDC.get(\"transactionId\").equals(\"1234\");\n        }\n    }\n\n.. which does not work currently, because `RequestScopedMdc` does not\nlook up the root context's map.\n\nModifications:\n\n- Make `RequestScopedMdc.get()`, `getAll()` and `getCopyOfContextMap()`\n  look for the root context map.\n\nResult:\n\n- `RequestScopedMdc` properties are inherited from the root context."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2f1f1f16f55e63deaecd6279c5f8281a809a721", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/a2f1f1f16f55e63deaecd6279c5f8281a809a721", "committedDate": "2020-05-19T12:14:21Z", "message": "Use `Object2ObjectMap` consistently throughout `RequestScopedMdc`\n\nfor faster `putAll()` iteration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01426c2b46252deb63049f308a40493fbf8517d0", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/01426c2b46252deb63049f308a40493fbf8517d0", "committedDate": "2020-05-19T12:33:47Z", "message": "Use `getPropertyMap()` when possible"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89d8cda2094520d87c0de429a9a7f8a1f563f1b2", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/89d8cda2094520d87c0de429a9a7f8a1f563f1b2", "committedDate": "2020-05-19T12:42:14Z", "message": "Less memory footprint for `getCopyOfContextMap()`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1df2221389c019ca13cfa9c9c36b5e3690e92220", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/1df2221389c019ca13cfa9c9c36b5e3690e92220", "committedDate": "2020-05-19T12:43:56Z", "message": "Fix imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a79f3616b69c1af8cd765d1f6cf5e221d26d9271", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/a79f3616b69c1af8cd765d1f6cf5e221d26d9271", "committedDate": "2020-05-19T12:45:08Z", "message": "Logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9be4bae1f6bc9a526297f6fde440ecf542a7012d", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/9be4bae1f6bc9a526297f6fde440ecf542a7012d", "committedDate": "2020-05-19T12:54:50Z", "message": "Do not copy when returning if `getPropertyMap()` is not available."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a806d589b81132c88bea0bbe3e5f3b1d8da4a6b1", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/a806d589b81132c88bea0bbe3e5f3b1d8da4a6b1", "committedDate": "2020-05-19T12:59:41Z", "message": "Comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTQ5MzM0", "url": "https://github.com/line/armeria/pull/2729#pullrequestreview-414949334", "createdAt": "2020-05-20T02:25:25Z", "commit": {"oid": "a806d589b81132c88bea0bbe3e5f3b1d8da4a6b1"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjoyNToyNVrOGX5GXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjozNjoxNVrOGX5RQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwNTk0OQ==", "bodyText": "Isn't it better to log (maybe once?) and return delegate.getCopyOfContextMap(); in this case?", "url": "https://github.com/line/armeria/pull/2729#discussion_r427705949", "createdAt": "2020-05-20T02:25:25Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RequestScopedMdc.java", "diffHunk": "@@ -224,24 +284,28 @@ public static void copy(RequestContext ctx, String key) {\n     public static void copyAll(RequestContext ctx) {\n         requireNonNull(ctx, \"ctx\");\n         checkState(delegate != null, ERROR_MESSAGE);\n-\n-        final Map<String, String> map = delegate.getCopyOfContextMap();\n-        if (map == null || map.isEmpty()) {\n-            return;\n+        final Map<String, String> map = getDelegateContextMap();\n+        if (map != null) {\n+            putAll(ctx, map);\n         }\n+    }\n \n-        synchronized (ctx) {\n-            final Map<String, String> oldMap = getMap(ctx);\n-            final Map<String, String> newMap;\n-            if (oldMap.isEmpty()) {\n-                newMap = map;\n-            } else {\n-                newMap = new Object2ObjectOpenHashMap<>(oldMap.size() + map.size());\n-                newMap.putAll(oldMap);\n-                newMap.putAll(map);\n+    @Nullable\n+    private static Map<String, String> getDelegateContextMap() {\n+        assert delegate != null;\n+        try {\n+            // Try to use `LogbackMDCAdapter.getPropertyMap()` which does not make a copy.\n+            @SuppressWarnings(\"unchecked\")\n+            final Map<String, String> map =\n+                    delegateGetPropertyMap != null ? (Map<String, String>) delegateGetPropertyMap.invokeExact()\n+                                                   : delegate.getCopyOfContextMap();\n+            if (map != null) {\n+                return map;\n             }\n-            ctx.setAttr(MAP, Collections.unmodifiableMap(newMap));\n+        } catch (Throwable t) {\n+            Exceptions.throwUnsafely(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a806d589b81132c88bea0bbe3e5f3b1d8da4a6b1"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwNjAzOQ==", "bodyText": "We can just return map.", "url": "https://github.com/line/armeria/pull/2729#discussion_r427706039", "createdAt": "2020-05-20T02:25:45Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RequestScopedMdc.java", "diffHunk": "@@ -224,24 +284,28 @@ public static void copy(RequestContext ctx, String key) {\n     public static void copyAll(RequestContext ctx) {\n         requireNonNull(ctx, \"ctx\");\n         checkState(delegate != null, ERROR_MESSAGE);\n-\n-        final Map<String, String> map = delegate.getCopyOfContextMap();\n-        if (map == null || map.isEmpty()) {\n-            return;\n+        final Map<String, String> map = getDelegateContextMap();\n+        if (map != null) {\n+            putAll(ctx, map);\n         }\n+    }\n \n-        synchronized (ctx) {\n-            final Map<String, String> oldMap = getMap(ctx);\n-            final Map<String, String> newMap;\n-            if (oldMap.isEmpty()) {\n-                newMap = map;\n-            } else {\n-                newMap = new Object2ObjectOpenHashMap<>(oldMap.size() + map.size());\n-                newMap.putAll(oldMap);\n-                newMap.putAll(map);\n+    @Nullable\n+    private static Map<String, String> getDelegateContextMap() {\n+        assert delegate != null;\n+        try {\n+            // Try to use `LogbackMDCAdapter.getPropertyMap()` which does not make a copy.\n+            @SuppressWarnings(\"unchecked\")\n+            final Map<String, String> map =\n+                    delegateGetPropertyMap != null ? (Map<String, String>) delegateGetPropertyMap.invokeExact()\n+                                                   : delegate.getCopyOfContextMap();\n+            if (map != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a806d589b81132c88bea0bbe3e5f3b1d8da4a6b1"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwODczNw==", "bodyText": "Isn't this unmodifiable if the map is returned from here? https://github.com/line/armeria/pull/2729/files#diff-b35989b7cd6a82522044209c418a377dR193", "url": "https://github.com/line/armeria/pull/2729#discussion_r427708737", "createdAt": "2020-05-20T02:36:15Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RequestScopedMdc.java", "diffHunk": "@@ -319,35 +383,52 @@ public String get(String key) {\n \n         @Override\n         public Map<String, String> getCopyOfContextMap() {\n-            final Map<String, String> threadLocalMap =\n-                    firstNonNull(delegate.getCopyOfContextMap(), Collections.emptyMap());\n+            final Map<String, String> threadLocalMap = getDelegateContextMap();\n             final RequestContext ctx = RequestContext.currentOrNull();\n             if (ctx == null) {\n                 // No context available\n-                return threadLocalMap;\n+                if (threadLocalMap != null) {\n+                    return maybeCloneThreadLocalMap(threadLocalMap);\n+                } else {\n+                    return Object2ObjectMaps.emptyMap();\n+                }\n             }\n \n-            final Map<String, String> requestScopedMap =\n-                    firstNonNull(getMap(ctx), Collections.emptyMap());\n-            if (threadLocalMap.isEmpty()) {\n+            // Retrieve the request-scoped properties.\n+            // Note that this map is 1) unmodifiable and shared 2) or modifiable yet unshared,\n+            // which means it's OK to return as it is or mutate it.\n+            final Map<String, String> requestScopedMap = getAll(ctx);\n+            if (threadLocalMap == null || threadLocalMap.isEmpty()) {\n                 // No thread-local map available\n                 return requestScopedMap;\n             }\n \n             // Thread-local map available\n             if (requestScopedMap.isEmpty()) {\n                 // Only thread-local map available\n-                return threadLocalMap;\n+                return maybeCloneThreadLocalMap(threadLocalMap);\n             }\n \n             // Both thread-local and request-scoped map available\n-            final Map<String, String> merged =\n-                    new Object2ObjectOpenHashMap<>(threadLocalMap.size() + requestScopedMap.size());\n-            merged.putAll(threadLocalMap);\n-            merged.putAll(requestScopedMap);\n+            final Object2ObjectOpenHashMap<String, String> merged;\n+            if (requestScopedMap instanceof Object2ObjectOpenHashMap) {\n+                // Reuse the mutable copy returned by getAll() for less memory footprint.\n+                merged = (Object2ObjectOpenHashMap<String, String>) requestScopedMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a806d589b81132c88bea0bbe3e5f3b1d8da4a6b1"}, "originalPosition": 313}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92a2cad3d3e97dc80430130794d45918d6fe24d1", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/92a2cad3d3e97dc80430130794d45918d6fe24d1", "committedDate": "2020-05-20T03:57:57Z", "message": "Address the comments from @minwoox"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTc2ODc0", "url": "https://github.com/line/armeria/pull/2729#pullrequestreview-414976874", "createdAt": "2020-05-20T04:02:49Z", "commit": {"oid": "92a2cad3d3e97dc80430130794d45918d6fe24d1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTc4OTcy", "url": "https://github.com/line/armeria/pull/2729#pullrequestreview-414978972", "createdAt": "2020-05-20T04:10:40Z", "commit": {"oid": "92a2cad3d3e97dc80430130794d45918d6fe24d1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 528, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}