{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MTgyNTg1", "number": 2983, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMjo1Mzo1MFrOEWpCdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDoxODoxNlrOEZxGPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTc2NTAyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMjo1Mzo1MFrOG-AKlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjoxNDo0MFrOG-CY_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2NzYwNg==", "bodyText": "Hello, @okue.\nThis looks good and Kotlin users could use Armeria well with the Coroutine after this PR is merged.\nHowever, this will bring additional dependencies to the users who don't use Kotlin.\nSo, we have to make a dedicated module for this purpose.\nThen, if the dependency is in the class path, we can enable Coroutine support.\nThis is one of the approaches we do for checking the dependencies:\nhttps://github.com/line/armeria/blob/master/spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/ArmeriaConfigurationUtil.java#L127\nThis is an example to call a method using MethodHandles\nhttps://github.com/line/armeria/blob/master/spring/boot2-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/WebOperationService.java#L96\nPlease note that the method handle is initialized only once, so that we don't do expensive operations every time we call invoke.", "url": "https://github.com/line/armeria/pull/2983#discussion_r467667606", "createdAt": "2020-08-10T02:53:50Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java", "diffHunk": "@@ -300,7 +304,14 @@ private Object invoke(ServiceRequestContext ctx, HttpRequest req,\n         try (SafeCloseable ignored = ctx.push()) {\n             final ResolverContext resolverContext = new ResolverContext(ctx, req, aggregatedRequest);\n             final Object[] arguments = AnnotatedValueResolver.toArguments(resolvers, resolverContext);\n-            return method.invoke(object, arguments);\n+            if (CoroutineUtil.isSuspendingFunction(method)) {\n+                return CoroutineUtil.invokeSuspendingFunction(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b35b2839994c83ec99c8c8e9f927b3019390ad"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2OTk4Mg==", "bodyText": "Thanks for a nice advice \ud83d\ude4f\nTests failed due to the problem you mentioned.", "url": "https://github.com/line/armeria/pull/2983#discussion_r467669982", "createdAt": "2020-08-10T03:07:39Z", "author": {"login": "okue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java", "diffHunk": "@@ -300,7 +304,14 @@ private Object invoke(ServiceRequestContext ctx, HttpRequest req,\n         try (SafeCloseable ignored = ctx.push()) {\n             final ResolverContext resolverContext = new ResolverContext(ctx, req, aggregatedRequest);\n             final Object[] arguments = AnnotatedValueResolver.toArguments(resolvers, resolverContext);\n-            return method.invoke(object, arguments);\n+            if (CoroutineUtil.isSuspendingFunction(method)) {\n+                return CoroutineUtil.invokeSuspendingFunction(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2NzYwNg=="}, "originalCommit": {"oid": "a1b35b2839994c83ec99c8c8e9f927b3019390ad"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwNDA2Mg==", "bodyText": "What I meant was that making a separate module not a package so that we can put\nimplementation \"org.jetbrains.kotlinx:kotlinx-coroutines-jdk8\"\nimplementation \"org.jetbrains.kotlin:kotlin-reflect\"\n\nthese dependencies and the related code into that module so that core module does not depend on Kotlin. \ud83d\ude04\nWe might name the module as kotlin /cc @trustin, @ikhoon", "url": "https://github.com/line/armeria/pull/2983#discussion_r467704062", "createdAt": "2020-08-10T06:14:40Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java", "diffHunk": "@@ -300,7 +304,14 @@ private Object invoke(ServiceRequestContext ctx, HttpRequest req,\n         try (SafeCloseable ignored = ctx.push()) {\n             final ResolverContext resolverContext = new ResolverContext(ctx, req, aggregatedRequest);\n             final Object[] arguments = AnnotatedValueResolver.toArguments(resolvers, resolverContext);\n-            return method.invoke(object, arguments);\n+            if (CoroutineUtil.isSuspendingFunction(method)) {\n+                return CoroutineUtil.invokeSuspendingFunction(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2NzYwNg=="}, "originalCommit": {"oid": "a1b35b2839994c83ec99c8c8e9f927b3019390ad"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjAzMjIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNDoyMDo0MVrOG-n1XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNDoyMDo0MVrOG-n1XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMxNzUzMw==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Boolean isKotlinSuspendingMethod;\n          \n          \n            \n                private final boolean isKotlinSuspendingMethod;", "url": "https://github.com/line/armeria/pull/2983#discussion_r468317533", "createdAt": "2020-08-11T04:20:41Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java", "diffHunk": "@@ -97,6 +99,7 @@\n \n     private final Object object;\n     private final Method method;\n+    private final Boolean isKotlinSuspendingMethod;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72af8215e42202830e1f8443bcd13f97b147f83d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjA1ODM0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/kotlin/CoroutineContextService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNDozNjo1NVrOG-oEUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNDozNjo1NVrOG-oEUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMyMTM2MA==", "bodyText": "nit: requireNonNull(provider, \"provider\")", "url": "https://github.com/line/armeria/pull/2983#discussion_r468321360", "createdAt": "2020-08-11T04:36:55Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/kotlin/CoroutineContextService.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.kotlin;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n+\n+/**\n+ * Decorates an {@link HttpService} to configure the coroutine context which is used as an initial context\n+ * of annotated services' suspending functions.\n+ *\n+ * <p>Example:\n+ * <pre>{@code\n+ * > serverBuilder\n+ * >     .annotatedService(object {\n+ * >         @Get(\"/users/{uid}\")\n+ * >         suspend fun foo(@Param(\"uid\") uid: String): HttpResponse {\n+ * >             ...\n+ * >         }\n+ * >     })\n+ * >     .decorator(CoroutineContextService.newDecorator { ctx ->\n+ * >         ctx.eventLoop().asCoroutineDispatcher() +\n+ * >             CoroutineName(ctx.config().defaultServiceName() ?: \"none\")\n+ * >     })\n+ * }\n+ * </pre>\n+ */\n+public class CoroutineContextService extends SimpleDecoratingHttpService {\n+\n+    /**\n+     * Returns a new {@link HttpService} decorator that injects into annotated services the coroutine context\n+     * provided by the specified {@code provider}.\n+     */\n+    public static Function<? super HttpService, CoroutineContextService> newDecorator(\n+            CoroutineContextProvider provider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72af8215e42202830e1f8443bcd13f97b147f83d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjA2MjQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/kotlin/CoroutineContextUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNDozOTozN1rOG-oGuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNDozOTozN1rOG-oGuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMyMTk3OQ==", "bodyText": "nit: requireNonNull", "url": "https://github.com/line/armeria/pull/2983#discussion_r468321979", "createdAt": "2020-08-11T04:39:37Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/kotlin/CoroutineContextUtil.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.kotlin;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.internal.server.annotation.AnnotatedService;\n+\n+import io.netty.util.AttributeKey;\n+import kotlin.coroutines.CoroutineContext;\n+\n+/**\n+ * Configures a coroutine context for annotated services and Kotlin suspending functions.\n+ *\n+ * @see CoroutineContextService\n+ */\n+public final class CoroutineContextUtil {\n+\n+    /**\n+     * {@link AnnotatedService} uses a coroutine context associated with this attribute\n+     * when calling suspending functions.\n+     */\n+    public static final AttributeKey<CoroutineContext> COROUTINE_CONTEXT_KEY =\n+            AttributeKey.valueOf(CoroutineContextUtil.class, \"COROUTINE_CONTEXT_KEY\");\n+\n+    /**\n+     * Associates the given coroutine context with {@code COROUTINE_CONTEXT_KEY} attribute in the context.\n+     */\n+    public static void setCoroutineContext(RequestContext ctx, CoroutineContext coroutineContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72af8215e42202830e1f8443bcd13f97b147f83d"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjA3MzE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/kotlin/CoroutineContextService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNDo0NjowOVrOG-oNQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNDo0NjowOVrOG-oNQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMyMzY1MA==", "bodyText": "Add check for the returned value? such as\nrequiredNonNull(provider.provide(ctx), \"provider returned null\")", "url": "https://github.com/line/armeria/pull/2983#discussion_r468323650", "createdAt": "2020-08-11T04:46:09Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/kotlin/CoroutineContextService.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.kotlin;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n+\n+/**\n+ * Decorates an {@link HttpService} to configure the coroutine context which is used as an initial context\n+ * of annotated services' suspending functions.\n+ *\n+ * <p>Example:\n+ * <pre>{@code\n+ * > serverBuilder\n+ * >     .annotatedService(object {\n+ * >         @Get(\"/users/{uid}\")\n+ * >         suspend fun foo(@Param(\"uid\") uid: String): HttpResponse {\n+ * >             ...\n+ * >         }\n+ * >     })\n+ * >     .decorator(CoroutineContextService.newDecorator { ctx ->\n+ * >         ctx.eventLoop().asCoroutineDispatcher() +\n+ * >             CoroutineName(ctx.config().defaultServiceName() ?: \"none\")\n+ * >     })\n+ * }\n+ * </pre>\n+ */\n+public class CoroutineContextService extends SimpleDecoratingHttpService {\n+\n+    /**\n+     * Returns a new {@link HttpService} decorator that injects into annotated services the coroutine context\n+     * provided by the specified {@code provider}.\n+     */\n+    public static Function<? super HttpService, CoroutineContextService> newDecorator(\n+            CoroutineContextProvider provider) {\n+        return delegate -> new CoroutineContextService(delegate, provider);\n+    }\n+\n+    private final CoroutineContextProvider provider;\n+\n+    CoroutineContextService(HttpService delegate, CoroutineContextProvider provider) {\n+        super(delegate);\n+        this.provider = provider;\n+    }\n+\n+    @Override\n+    public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {\n+        CoroutineContextUtil.setCoroutineContext(ctx, provider.provide(ctx));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72af8215e42202830e1f8443bcd13f97b147f83d"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjA3OTQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/kotlin/CoroutineContextUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNDo1MDoxM1rOG-oRLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNDo1MDoxM1rOG-oRLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMyNDY1NQ==", "bodyText": "ditto", "url": "https://github.com/line/armeria/pull/2983#discussion_r468324655", "createdAt": "2020-08-11T04:50:13Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/kotlin/CoroutineContextUtil.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.kotlin;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.internal.server.annotation.AnnotatedService;\n+\n+import io.netty.util.AttributeKey;\n+import kotlin.coroutines.CoroutineContext;\n+\n+/**\n+ * Configures a coroutine context for annotated services and Kotlin suspending functions.\n+ *\n+ * @see CoroutineContextService\n+ */\n+public final class CoroutineContextUtil {\n+\n+    /**\n+     * {@link AnnotatedService} uses a coroutine context associated with this attribute\n+     * when calling suspending functions.\n+     */\n+    public static final AttributeKey<CoroutineContext> COROUTINE_CONTEXT_KEY =\n+            AttributeKey.valueOf(CoroutineContextUtil.class, \"COROUTINE_CONTEXT_KEY\");\n+\n+    /**\n+     * Associates the given coroutine context with {@code COROUTINE_CONTEXT_KEY} attribute in the context.\n+     */\n+    public static void setCoroutineContext(RequestContext ctx, CoroutineContext coroutineContext) {\n+        ctx.setAttr(COROUTINE_CONTEXT_KEY, coroutineContext);\n+    }\n+\n+    /**\n+     * Returns the coroutine context mapped to {@code COROUTINE_CONTEXT_KEY} in the context.\n+     */\n+    @Nullable\n+    public static CoroutineContext getCoroutineContext(RequestContext ctx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72af8215e42202830e1f8443bcd13f97b147f83d"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDM1NzcwOnYy", "diffSide": "RIGHT", "path": "kotlin/src/main/java/com/linecorp/armeria/common/kotlin/CoroutineContextUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMzo1Mjo1NVrOG_Q2jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMzo1Mjo1NVrOG_Q2jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk4OTU4MQ==", "bodyText": "Could be private?", "url": "https://github.com/line/armeria/pull/2983#discussion_r468989581", "createdAt": "2020-08-12T03:52:55Z", "author": {"login": "trustin"}, "path": "kotlin/src/main/java/com/linecorp/armeria/common/kotlin/CoroutineContextUtil.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.kotlin;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.internal.server.annotation.AnnotatedService;\n+import com.linecorp.armeria.server.kotlin.CoroutineContextService;\n+\n+import io.netty.util.AttributeKey;\n+import kotlin.coroutines.CoroutineContext;\n+\n+/**\n+ * Configures a coroutine context for annotated services and Kotlin suspending functions.\n+ *\n+ * @see CoroutineContextService\n+ */\n+public final class CoroutineContextUtil {\n+\n+    /**\n+     * {@link AnnotatedService} uses a coroutine context associated with this attribute\n+     * when calling suspending functions.\n+     */\n+    public static final AttributeKey<CoroutineContext> COROUTINE_CONTEXT_KEY =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9204a243fa0a83e4736b023976cf613a43e1f5ca"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDM1ODQ4OnYy", "diffSide": "RIGHT", "path": "kotlin/src/main/java/com/linecorp/armeria/common/kotlin/CoroutineContextUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMzo1MzoyNVrOG_Q2_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMzo1MzoyNVrOG_Q2_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk4OTY5Mg==", "bodyText": "How about CoroutineContexts unless there's a class with the same name in Kotlin?", "url": "https://github.com/line/armeria/pull/2983#discussion_r468989692", "createdAt": "2020-08-12T03:53:25Z", "author": {"login": "trustin"}, "path": "kotlin/src/main/java/com/linecorp/armeria/common/kotlin/CoroutineContextUtil.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.kotlin;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.internal.server.annotation.AnnotatedService;\n+import com.linecorp.armeria.server.kotlin.CoroutineContextService;\n+\n+import io.netty.util.AttributeKey;\n+import kotlin.coroutines.CoroutineContext;\n+\n+/**\n+ * Configures a coroutine context for annotated services and Kotlin suspending functions.\n+ *\n+ * @see CoroutineContextService\n+ */\n+public final class CoroutineContextUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9204a243fa0a83e4736b023976cf613a43e1f5ca"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDM2MDE1OnYy", "diffSide": "RIGHT", "path": "kotlin/src/main/java/com/linecorp/armeria/common/kotlin/package-info.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMzo1NDoyNlrOG_Q38g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMzo1NDoyNlrOG_Q38g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk4OTkzOA==", "bodyText": "Update Javadoc?", "url": "https://github.com/line/armeria/pull/2983#discussion_r468989938", "createdAt": "2020-08-12T03:54:26Z", "author": {"login": "trustin"}, "path": "kotlin/src/main/java/com/linecorp/armeria/common/kotlin/package-info.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Various classes used internally. Anything in this package can be changed or removed at any time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9204a243fa0a83e4736b023976cf613a43e1f5ca"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDM2MTcyOnYy", "diffSide": "RIGHT", "path": "kotlin/src/main/java/com/linecorp/armeria/server/kotlin/package-info.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMzo1NToxOFrOG_Q40g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMzo1NToxOFrOG_Q40g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk5MDE2Mg==", "bodyText": "Update Javadoc?", "url": "https://github.com/line/armeria/pull/2983#discussion_r468990162", "createdAt": "2020-08-12T03:55:18Z", "author": {"login": "trustin"}, "path": "kotlin/src/main/java/com/linecorp/armeria/server/kotlin/package-info.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Various classes used internally. Anything in this package can be changed or removed at any time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9204a243fa0a83e4736b023976cf613a43e1f5ca"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDM2MjQ3OnYy", "diffSide": "RIGHT", "path": "kotlin/src/main/kotlin/com/linecorp/armeria/internal/common/kotlin/CoroutineUtil.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMzo1NTo0M1rOG_Q5Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMzo1NTo0M1rOG_Q5Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk5MDI4Mg==", "bodyText": "'is not a'", "url": "https://github.com/line/armeria/pull/2983#discussion_r468990282", "createdAt": "2020-08-12T03:55:43Z", "author": {"login": "trustin"}, "path": "kotlin/src/main/kotlin/com/linecorp/armeria/internal/common/kotlin/CoroutineUtil.kt", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+@file:JvmName(\"CoroutineUtil\")\n+\n+package com.linecorp.armeria.internal.common.kotlin\n+\n+import com.linecorp.armeria.common.RequestContext\n+import com.linecorp.armeria.common.kotlin.CoroutineContextUtil\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.GlobalScope\n+import kotlinx.coroutines.future.future\n+import java.lang.reflect.Method\n+import java.util.concurrent.CompletableFuture\n+import kotlin.coroutines.EmptyCoroutineContext\n+import kotlin.reflect.full.callSuspend\n+import kotlin.reflect.jvm.kotlinFunction\n+\n+/**\n+ * Invokes a suspending function and returns [CompletableFuture].\n+ */\n+fun callKotlinSuspendingMethod(\n+    method: Method,\n+    obj: Any,\n+    args: Array<Any>,\n+    ctx: RequestContext\n+): CompletableFuture<Any?> {\n+    val kFunction = checkNotNull(method.kotlinFunction) { \"method is not suspending function\" }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9204a243fa0a83e4736b023976cf613a43e1f5ca"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTk1MTY5OnYy", "diffSide": "RIGHT", "path": "kotlin/src/main/kotlin/com/linecorp/armeria/internal/common/kotlin/CoroutineUtil.kt", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo1MjowN1rOG_f3EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMDowNzowM1rOHCMn2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzNTQ3Mg==", "bodyText": "Question: Is it possible to cache executorService.asCoroutineDispatcher()?", "url": "https://github.com/line/armeria/pull/2983#discussion_r469235472", "createdAt": "2020-08-12T12:52:07Z", "author": {"login": "trustin"}, "path": "kotlin/src/main/kotlin/com/linecorp/armeria/internal/common/kotlin/CoroutineUtil.kt", "diffHunk": "@@ -36,11 +37,12 @@ fun callKotlinSuspendingMethod(\n     method: Method,\n     obj: Any,\n     args: Array<Any>,\n+    executorService: ExecutorService,\n     ctx: RequestContext\n ): CompletableFuture<Any?> {\n     val kFunction = checkNotNull(method.kotlinFunction) { \"method is not a suspending function\" }\n-    val coroutineContext = CoroutineContexts.getCoroutineContext(ctx)\n-    val newContext = Dispatchers.Unconfined + (coroutineContext ?: EmptyCoroutineContext)\n+    val coroutineContext = CoroutineContexts.getCoroutineContext(ctx) ?: EmptyCoroutineContext\n+    val newContext = executorService.asCoroutineDispatcher() + coroutineContext", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967ca03e4790b2641dc83a5f11d30be1f4f56d6f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYyODE3NQ==", "bodyText": "Do you mean we should, for example,\n\nmake a constant of a coroutine dispatcher of armeria event loop (which is not context-aware)\nand ctx.push at the dispatched thread before executing controller methods", "url": "https://github.com/line/armeria/pull/2983#discussion_r469628175", "createdAt": "2020-08-13T00:43:07Z", "author": {"login": "okue"}, "path": "kotlin/src/main/kotlin/com/linecorp/armeria/internal/common/kotlin/CoroutineUtil.kt", "diffHunk": "@@ -36,11 +37,12 @@ fun callKotlinSuspendingMethod(\n     method: Method,\n     obj: Any,\n     args: Array<Any>,\n+    executorService: ExecutorService,\n     ctx: RequestContext\n ): CompletableFuture<Any?> {\n     val kFunction = checkNotNull(method.kotlinFunction) { \"method is not a suspending function\" }\n-    val coroutineContext = CoroutineContexts.getCoroutineContext(ctx)\n-    val newContext = Dispatchers.Unconfined + (coroutineContext ?: EmptyCoroutineContext)\n+    val coroutineContext = CoroutineContexts.getCoroutineContext(ctx) ?: EmptyCoroutineContext\n+    val newContext = executorService.asCoroutineDispatcher() + coroutineContext", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzNTQ3Mg=="}, "originalCommit": {"oid": "967ca03e4790b2641dc83a5f11d30be1f4f56d6f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY0NDQyNw==", "bodyText": "Yes.", "url": "https://github.com/line/armeria/pull/2983#discussion_r470644427", "createdAt": "2020-08-14T14:05:35Z", "author": {"login": "trustin"}, "path": "kotlin/src/main/kotlin/com/linecorp/armeria/internal/common/kotlin/CoroutineUtil.kt", "diffHunk": "@@ -36,11 +37,12 @@ fun callKotlinSuspendingMethod(\n     method: Method,\n     obj: Any,\n     args: Array<Any>,\n+    executorService: ExecutorService,\n     ctx: RequestContext\n ): CompletableFuture<Any?> {\n     val kFunction = checkNotNull(method.kotlinFunction) { \"method is not a suspending function\" }\n-    val coroutineContext = CoroutineContexts.getCoroutineContext(ctx)\n-    val newContext = Dispatchers.Unconfined + (coroutineContext ?: EmptyCoroutineContext)\n+    val coroutineContext = CoroutineContexts.getCoroutineContext(ctx) ?: EmptyCoroutineContext\n+    val newContext = executorService.asCoroutineDispatcher() + coroutineContext", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzNTQ3Mg=="}, "originalCommit": {"oid": "967ca03e4790b2641dc83a5f11d30be1f4f56d6f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk0ODM2MQ==", "bodyText": "For example...\nimport com.linecorp.armeria.common.CommonPools\nimport com.linecorp.armeria.common.RequestContext\nimport com.linecorp.armeria.common.kotlin.CoroutineContexts\nimport com.linecorp.armeria.common.util.SafeCloseable\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.ThreadContextElement\nimport kotlinx.coroutines.asCoroutineDispatcher\nimport kotlinx.coroutines.future.future\nimport java.lang.reflect.Method\nimport java.util.concurrent.CompletableFuture\nimport kotlin.coroutines.AbstractCoroutineContextElement\nimport kotlin.coroutines.CoroutineContext\nimport kotlin.coroutines.EmptyCoroutineContext\nimport kotlin.reflect.full.callSuspend\nimport kotlin.reflect.jvm.kotlinFunction\n\nval armeriaDispatcher = CommonPools.workerGroup().asCoroutineDispatcher()\n\nclass ArmeriaRequestContext(\n    private val requestContext: RequestContext\n) : ThreadContextElement<SafeCloseable>, AbstractCoroutineContextElement(Key) {\n\n    companion object Key : CoroutineContext.Key<ArmeriaRequestContext>\n\n    override fun updateThreadContext(context: CoroutineContext): SafeCloseable {\n        return requestContext.push()\n    }\n\n    override fun restoreThreadContext(context: CoroutineContext, oldState: SafeCloseable) {\n        oldState.close()\n    }\n}\n\n/**\n * Invokes a suspending function and returns [CompletableFuture].\n */\nfun callKotlinSuspendingMethod(\n    method: Method,\n    obj: Any,\n    args: Array<Any>,\n    ctx: RequestContext\n): CompletableFuture<Any?> {\n    val kFunction = checkNotNull(method.kotlinFunction) { \"method is not a suspending function\" }\n    val coroutineContext = CoroutineContexts.get(ctx) ?: EmptyCoroutineContext\n    // if `coroutineContext` contains a coroutine dispatcher, executorService is not used.\n    val newContext = armeriaDispatcher + ArmeriaRequestContext(ctx) + coroutineContext\n    return GlobalScope.future(newContext) {\n        kFunction\n            .callSuspend(obj, *args)\n            .let { if (it == Unit) null else it }\n    }\n}", "url": "https://github.com/line/armeria/pull/2983#discussion_r470948361", "createdAt": "2020-08-15T07:13:35Z", "author": {"login": "okue"}, "path": "kotlin/src/main/kotlin/com/linecorp/armeria/internal/common/kotlin/CoroutineUtil.kt", "diffHunk": "@@ -36,11 +37,12 @@ fun callKotlinSuspendingMethod(\n     method: Method,\n     obj: Any,\n     args: Array<Any>,\n+    executorService: ExecutorService,\n     ctx: RequestContext\n ): CompletableFuture<Any?> {\n     val kFunction = checkNotNull(method.kotlinFunction) { \"method is not a suspending function\" }\n-    val coroutineContext = CoroutineContexts.getCoroutineContext(ctx)\n-    val newContext = Dispatchers.Unconfined + (coroutineContext ?: EmptyCoroutineContext)\n+    val coroutineContext = CoroutineContexts.getCoroutineContext(ctx) ?: EmptyCoroutineContext\n+    val newContext = executorService.asCoroutineDispatcher() + coroutineContext", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzNTQ3Mg=="}, "originalCommit": {"oid": "967ca03e4790b2641dc83a5f11d30be1f4f56d6f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk4NTg5Nw==", "bodyText": "Is this addressed? What's the result? \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2983#discussion_r471985897", "createdAt": "2020-08-18T07:53:11Z", "author": {"login": "minwoox"}, "path": "kotlin/src/main/kotlin/com/linecorp/armeria/internal/common/kotlin/CoroutineUtil.kt", "diffHunk": "@@ -36,11 +37,12 @@ fun callKotlinSuspendingMethod(\n     method: Method,\n     obj: Any,\n     args: Array<Any>,\n+    executorService: ExecutorService,\n     ctx: RequestContext\n ): CompletableFuture<Any?> {\n     val kFunction = checkNotNull(method.kotlinFunction) { \"method is not a suspending function\" }\n-    val coroutineContext = CoroutineContexts.getCoroutineContext(ctx)\n-    val newContext = Dispatchers.Unconfined + (coroutineContext ?: EmptyCoroutineContext)\n+    val coroutineContext = CoroutineContexts.getCoroutineContext(ctx) ?: EmptyCoroutineContext\n+    val newContext = executorService.asCoroutineDispatcher() + coroutineContext", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzNTQ3Mg=="}, "originalCommit": {"oid": "967ca03e4790b2641dc83a5f11d30be1f4f56d6f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAwNjMyNQ==", "bodyText": "I don't apply this change yet.", "url": "https://github.com/line/armeria/pull/2983#discussion_r472006325", "createdAt": "2020-08-18T08:27:32Z", "author": {"login": "okue"}, "path": "kotlin/src/main/kotlin/com/linecorp/armeria/internal/common/kotlin/CoroutineUtil.kt", "diffHunk": "@@ -36,11 +37,12 @@ fun callKotlinSuspendingMethod(\n     method: Method,\n     obj: Any,\n     args: Array<Any>,\n+    executorService: ExecutorService,\n     ctx: RequestContext\n ): CompletableFuture<Any?> {\n     val kFunction = checkNotNull(method.kotlinFunction) { \"method is not a suspending function\" }\n-    val coroutineContext = CoroutineContexts.getCoroutineContext(ctx)\n-    val newContext = Dispatchers.Unconfined + (coroutineContext ?: EmptyCoroutineContext)\n+    val coroutineContext = CoroutineContexts.getCoroutineContext(ctx) ?: EmptyCoroutineContext\n+    val newContext = executorService.asCoroutineDispatcher() + coroutineContext", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzNTQ3Mg=="}, "originalCommit": {"oid": "967ca03e4790b2641dc83a5f11d30be1f4f56d6f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAwOTc1Nw==", "bodyText": "Ah, I think we can make a separate PR for this if you want. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2983#discussion_r472009757", "createdAt": "2020-08-18T08:32:57Z", "author": {"login": "minwoox"}, "path": "kotlin/src/main/kotlin/com/linecorp/armeria/internal/common/kotlin/CoroutineUtil.kt", "diffHunk": "@@ -36,11 +37,12 @@ fun callKotlinSuspendingMethod(\n     method: Method,\n     obj: Any,\n     args: Array<Any>,\n+    executorService: ExecutorService,\n     ctx: RequestContext\n ): CompletableFuture<Any?> {\n     val kFunction = checkNotNull(method.kotlinFunction) { \"method is not a suspending function\" }\n-    val coroutineContext = CoroutineContexts.getCoroutineContext(ctx)\n-    val newContext = Dispatchers.Unconfined + (coroutineContext ?: EmptyCoroutineContext)\n+    val coroutineContext = CoroutineContexts.getCoroutineContext(ctx) ?: EmptyCoroutineContext\n+    val newContext = executorService.asCoroutineDispatcher() + coroutineContext", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzNTQ3Mg=="}, "originalCommit": {"oid": "967ca03e4790b2641dc83a5f11d30be1f4f56d6f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA2NjAwOA==", "bodyText": "Thanks. I want to separate this change from this PR.", "url": "https://github.com/line/armeria/pull/2983#discussion_r472066008", "createdAt": "2020-08-18T10:07:03Z", "author": {"login": "okue"}, "path": "kotlin/src/main/kotlin/com/linecorp/armeria/internal/common/kotlin/CoroutineUtil.kt", "diffHunk": "@@ -36,11 +37,12 @@ fun callKotlinSuspendingMethod(\n     method: Method,\n     obj: Any,\n     args: Array<Any>,\n+    executorService: ExecutorService,\n     ctx: RequestContext\n ): CompletableFuture<Any?> {\n     val kFunction = checkNotNull(method.kotlinFunction) { \"method is not a suspending function\" }\n-    val coroutineContext = CoroutineContexts.getCoroutineContext(ctx)\n-    val newContext = Dispatchers.Unconfined + (coroutineContext ?: EmptyCoroutineContext)\n+    val coroutineContext = CoroutineContexts.getCoroutineContext(ctx) ?: EmptyCoroutineContext\n+    val newContext = executorService.asCoroutineDispatcher() + coroutineContext", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzNTQ3Mg=="}, "originalCommit": {"oid": "967ca03e4790b2641dc83a5f11d30be1f4f56d6f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTA2NTU4OnYy", "diffSide": "RIGHT", "path": "examples/annotated-http-service-kotlin/src/main/kotlin/example/armeria/server/annotated/kotlin/ContextAwareService.kt", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDowMzo0NlrOHA1ytg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNzoxNDo0NFrOHBIaVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY0MzM4Mg==", "bodyText": "Out of curiosity: Does ServiceRequestContext.current() work?", "url": "https://github.com/line/armeria/pull/2983#discussion_r470643382", "createdAt": "2020-08-14T14:03:46Z", "author": {"login": "trustin"}, "path": "examples/annotated-http-service-kotlin/src/main/kotlin/example/armeria/server/annotated/kotlin/ContextAwareService.kt", "diffHunk": "@@ -0,0 +1,57 @@\n+package example.armeria.server.annotated.kotlin\n+\n+import com.linecorp.armeria.common.RequestContext\n+import com.linecorp.armeria.server.ServiceRequestContext\n+import com.linecorp.armeria.server.annotation.Get\n+import com.linecorp.armeria.server.annotation.Param\n+import com.linecorp.armeria.server.annotation.ProducesJson\n+import kotlinx.coroutines.asCoroutineDispatcher\n+import kotlinx.coroutines.withContext\n+import org.slf4j.LoggerFactory\n+import java.util.concurrent.Executors\n+\n+class ContextAwareService {\n+\n+    @Get(\"/foo\")\n+    @ProducesJson\n+    suspend fun foo(@Param(\"name\") name: String, @Param(\"id\") id: Int): FooResponse {\n+        log.info(\"Hello $name\")\n+        // Make sure that current thread is request context aware\n+        RequestContext.current<ServiceRequestContext>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c29d1edfcf6dd931eebe36495142a0ead249664a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg1MDk1Nw==", "bodyText": "Yes.", "url": "https://github.com/line/armeria/pull/2983#discussion_r470850957", "createdAt": "2020-08-14T20:29:14Z", "author": {"login": "okue"}, "path": "examples/annotated-http-service-kotlin/src/main/kotlin/example/armeria/server/annotated/kotlin/ContextAwareService.kt", "diffHunk": "@@ -0,0 +1,57 @@\n+package example.armeria.server.annotated.kotlin\n+\n+import com.linecorp.armeria.common.RequestContext\n+import com.linecorp.armeria.server.ServiceRequestContext\n+import com.linecorp.armeria.server.annotation.Get\n+import com.linecorp.armeria.server.annotation.Param\n+import com.linecorp.armeria.server.annotation.ProducesJson\n+import kotlinx.coroutines.asCoroutineDispatcher\n+import kotlinx.coroutines.withContext\n+import org.slf4j.LoggerFactory\n+import java.util.concurrent.Executors\n+\n+class ContextAwareService {\n+\n+    @Get(\"/foo\")\n+    @ProducesJson\n+    suspend fun foo(@Param(\"name\") name: String, @Param(\"id\") id: Int): FooResponse {\n+        log.info(\"Hello $name\")\n+        // Make sure that current thread is request context aware\n+        RequestContext.current<ServiceRequestContext>()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY0MzM4Mg=="}, "originalCommit": {"oid": "c29d1edfcf6dd931eebe36495142a0ead249664a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzOTQ1Mw==", "bodyText": "Then how about using ServiceRequestContext.current() for brevity?", "url": "https://github.com/line/armeria/pull/2983#discussion_r470939453", "createdAt": "2020-08-15T05:11:58Z", "author": {"login": "trustin"}, "path": "examples/annotated-http-service-kotlin/src/main/kotlin/example/armeria/server/annotated/kotlin/ContextAwareService.kt", "diffHunk": "@@ -0,0 +1,57 @@\n+package example.armeria.server.annotated.kotlin\n+\n+import com.linecorp.armeria.common.RequestContext\n+import com.linecorp.armeria.server.ServiceRequestContext\n+import com.linecorp.armeria.server.annotation.Get\n+import com.linecorp.armeria.server.annotation.Param\n+import com.linecorp.armeria.server.annotation.ProducesJson\n+import kotlinx.coroutines.asCoroutineDispatcher\n+import kotlinx.coroutines.withContext\n+import org.slf4j.LoggerFactory\n+import java.util.concurrent.Executors\n+\n+class ContextAwareService {\n+\n+    @Get(\"/foo\")\n+    @ProducesJson\n+    suspend fun foo(@Param(\"name\") name: String, @Param(\"id\") id: Int): FooResponse {\n+        log.info(\"Hello $name\")\n+        // Make sure that current thread is request context aware\n+        RequestContext.current<ServiceRequestContext>()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY0MzM4Mg=="}, "originalCommit": {"oid": "c29d1edfcf6dd931eebe36495142a0ead249664a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk0ODQzOQ==", "bodyText": "OK :)", "url": "https://github.com/line/armeria/pull/2983#discussion_r470948439", "createdAt": "2020-08-15T07:14:44Z", "author": {"login": "okue"}, "path": "examples/annotated-http-service-kotlin/src/main/kotlin/example/armeria/server/annotated/kotlin/ContextAwareService.kt", "diffHunk": "@@ -0,0 +1,57 @@\n+package example.armeria.server.annotated.kotlin\n+\n+import com.linecorp.armeria.common.RequestContext\n+import com.linecorp.armeria.server.ServiceRequestContext\n+import com.linecorp.armeria.server.annotation.Get\n+import com.linecorp.armeria.server.annotation.Param\n+import com.linecorp.armeria.server.annotation.ProducesJson\n+import kotlinx.coroutines.asCoroutineDispatcher\n+import kotlinx.coroutines.withContext\n+import org.slf4j.LoggerFactory\n+import java.util.concurrent.Executors\n+\n+class ContextAwareService {\n+\n+    @Get(\"/foo\")\n+    @ProducesJson\n+    suspend fun foo(@Param(\"name\") name: String, @Param(\"id\") id: Int): FooResponse {\n+        log.info(\"Hello $name\")\n+        // Make sure that current thread is request context aware\n+        RequestContext.current<ServiceRequestContext>()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY0MzM4Mg=="}, "originalCommit": {"oid": "c29d1edfcf6dd931eebe36495142a0ead249664a"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTA2ODExOnYy", "diffSide": "RIGHT", "path": "kotlin/src/main/java/com/linecorp/armeria/common/kotlin/CoroutineContexts.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDowNDozM1rOHA10UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDowNDozM1rOHA10UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY0Mzc5Mg==", "bodyText": "Would it be better naming these methods as get() and set()?", "url": "https://github.com/line/armeria/pull/2983#discussion_r470643792", "createdAt": "2020-08-14T14:04:33Z", "author": {"login": "trustin"}, "path": "kotlin/src/main/java/com/linecorp/armeria/common/kotlin/CoroutineContexts.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.kotlin;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.internal.server.annotation.AnnotatedService;\n+import com.linecorp.armeria.server.kotlin.CoroutineContextService;\n+\n+import io.netty.util.AttributeKey;\n+import kotlin.coroutines.CoroutineContext;\n+\n+/**\n+ * Configures a coroutine context for annotated services and Kotlin suspending functions.\n+ *\n+ * @see CoroutineContextService\n+ */\n+public final class CoroutineContexts {\n+\n+    /**\n+     * {@link AnnotatedService} uses a coroutine context associated with this attribute\n+     * when calling suspending functions.\n+     */\n+    private static final AttributeKey<CoroutineContext> COROUTINE_CONTEXT_KEY =\n+            AttributeKey.valueOf(CoroutineContexts.class, \"COROUTINE_CONTEXT_KEY\");\n+\n+    /**\n+     * Associates the given coroutine context with {@code COROUTINE_CONTEXT_KEY} attribute in the context.\n+     */\n+    public static void setCoroutineContext(RequestContext ctx, CoroutineContext coroutineContext) {\n+        requireNonNull(ctx, \"ctx\");\n+        requireNonNull(coroutineContext, \"coroutineContext\");\n+        ctx.setAttr(COROUTINE_CONTEXT_KEY, coroutineContext);\n+    }\n+\n+    /**\n+     * Returns the coroutine context mapped to {@code COROUTINE_CONTEXT_KEY} in the context.\n+     */\n+    @Nullable\n+    public static CoroutineContext getCoroutineContext(RequestContext ctx) {\n+        requireNonNull(ctx, \"ctx\");\n+        return ctx.attr(COROUTINE_CONTEXT_KEY);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c29d1edfcf6dd931eebe36495142a0ead249664a"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTA3MDMyOnYy", "diffSide": "RIGHT", "path": "kotlin/src/main/java/com/linecorp/armeria/server/kotlin/CoroutineContextService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDowNTowNVrOHA11sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDowNTowNVrOHA11sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY0NDE0Nw==", "bodyText": "Could you add final to all classes if possible?", "url": "https://github.com/line/armeria/pull/2983#discussion_r470644147", "createdAt": "2020-08-14T14:05:05Z", "author": {"login": "trustin"}, "path": "kotlin/src/main/java/com/linecorp/armeria/server/kotlin/CoroutineContextService.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.kotlin;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.function.Function;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.kotlin.CoroutineContextProvider;\n+import com.linecorp.armeria.common.kotlin.CoroutineContexts;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n+\n+/**\n+ * Decorates an {@link HttpService} to configure the coroutine context which is used as an initial context\n+ * of annotated services' suspending functions.\n+ *\n+ * <p>Example:\n+ * <pre>{@code\n+ * > serverBuilder\n+ * >     .annotatedService(object {\n+ * >         @Get(\"/users/{uid}\")\n+ * >         suspend fun foo(@Param(\"uid\") uid: String): HttpResponse {\n+ * >             ...\n+ * >         }\n+ * >     })\n+ * >     .decorator(CoroutineContextService.newDecorator { ctx ->\n+ * >         ctx.eventLoop().asCoroutineDispatcher() +\n+ * >             CoroutineName(ctx.config().defaultServiceName() ?: \"none\")\n+ * >     })\n+ * }\n+ * </pre>\n+ */\n+public class CoroutineContextService extends SimpleDecoratingHttpService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c29d1edfcf6dd931eebe36495142a0ead249664a"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzExMzQ1OnYy", "diffSide": "RIGHT", "path": "examples/annotated-http-service-kotlin/src/main/kotlin/example/armeria/server/annotated/kotlin/ContextAwareService.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNzozOToxMVrOHBIhjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNzo1OToxMlrOHBInog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk1MDI4NA==", "bodyText": "Does a user need to do this? Can't Armeria make sure the function is run with a request context dispatcher?", "url": "https://github.com/line/armeria/pull/2983#discussion_r470950284", "createdAt": "2020-08-15T07:39:11Z", "author": {"login": "anuraaga"}, "path": "examples/annotated-http-service-kotlin/src/main/kotlin/example/armeria/server/annotated/kotlin/ContextAwareService.kt", "diffHunk": "@@ -0,0 +1,56 @@\n+package example.armeria.server.annotated.kotlin\n+\n+import com.linecorp.armeria.server.ServiceRequestContext\n+import com.linecorp.armeria.server.annotation.Get\n+import com.linecorp.armeria.server.annotation.Param\n+import com.linecorp.armeria.server.annotation.ProducesJson\n+import kotlinx.coroutines.asCoroutineDispatcher\n+import kotlinx.coroutines.withContext\n+import org.slf4j.LoggerFactory\n+import java.util.concurrent.Executors\n+\n+class ContextAwareService {\n+\n+    @Get(\"/foo\")\n+    @ProducesJson\n+    suspend fun foo(@Param(\"name\") name: String, @Param(\"id\") id: Int): FooResponse {\n+        log.info(\"Hello $name\")\n+        // Make sure that current thread is request context aware\n+        ServiceRequestContext.current()\n+\n+        // Propagate armeria request context\n+        withContext(ArmeriaRequestContext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ae6f69eacb467d64cb7cdcfa05689a2c9a87ddb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk1MTg0Mg==", "bodyText": "In this example, BusinessLogic.blockingTask is designed to executed in myDispatcher to limit the number of parallel executions.\nAs we cannot dispatch to a request context dispatcher, then I pass a request context as ThreadContextElement.\nPossibly this is a rare case..", "url": "https://github.com/line/armeria/pull/2983#discussion_r470951842", "createdAt": "2020-08-15T07:59:12Z", "author": {"login": "okue"}, "path": "examples/annotated-http-service-kotlin/src/main/kotlin/example/armeria/server/annotated/kotlin/ContextAwareService.kt", "diffHunk": "@@ -0,0 +1,56 @@\n+package example.armeria.server.annotated.kotlin\n+\n+import com.linecorp.armeria.server.ServiceRequestContext\n+import com.linecorp.armeria.server.annotation.Get\n+import com.linecorp.armeria.server.annotation.Param\n+import com.linecorp.armeria.server.annotation.ProducesJson\n+import kotlinx.coroutines.asCoroutineDispatcher\n+import kotlinx.coroutines.withContext\n+import org.slf4j.LoggerFactory\n+import java.util.concurrent.Executors\n+\n+class ContextAwareService {\n+\n+    @Get(\"/foo\")\n+    @ProducesJson\n+    suspend fun foo(@Param(\"name\") name: String, @Param(\"id\") id: Int): FooResponse {\n+        log.info(\"Hello $name\")\n+        // Make sure that current thread is request context aware\n+        ServiceRequestContext.current()\n+\n+        // Propagate armeria request context\n+        withContext(ArmeriaRequestContext()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk1MDI4NA=="}, "originalCommit": {"oid": "2ae6f69eacb467d64cb7cdcfa05689a2c9a87ddb"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDQ0Mzc5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzo1MToxM1rOHCwiSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzo1MToxM1rOHCwiSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY1NDQwOA==", "bodyText": "Could introduce a local variable for parameters.get(0)? Then it can be used at https://github.com/line/armeria/pull/2983/files#diff-f13d04b42f9611da57e897603ce21ff8R220", "url": "https://github.com/line/armeria/pull/2983#discussion_r472654408", "createdAt": "2020-08-19T03:51:13Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "diffHunk": "@@ -208,23 +211,23 @@ static AnnotatedValueResolver ofBeanField(Field field, Set<String> pathParams,\n             // @Param\n             // void setter(@Header String name) { ... }\n             //\n-            if (isAnnotationPresent(parameters[0])) {\n+            if (isAnnotationPresent(parameters.get(0))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f0af0868c6ac8aae005f27fbfe030960d235be5"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDQ2NDY2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzo1Njo1NFrOHCwv-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzo1Njo1NFrOHCwv-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY1NzkxNA==", "bodyText": "How about introducing a local variable for the size of parameters and reuse it here and later.", "url": "https://github.com/line/armeria/pull/2983#discussion_r472657914", "createdAt": "2020-08-19T03:56:54Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "diffHunk": "@@ -174,8 +174,11 @@ static AnnotatedValueResolver ofBeanField(Field field, Set<String> pathParams,\n                                                    List<RequestObjectResolver> objectResolvers,\n                                                    boolean implicitRequestObjectAnnotation,\n                                                    boolean isServiceMethod) {\n-        final Parameter[] parameters = constructorOrMethod.getParameters();\n-        if (parameters.length == 0) {\n+        final ImmutableList<Parameter> parameters =\n+                Arrays.stream(constructorOrMethod.getParameters())\n+                      .filter(it -> !KotlinUtil.isContinuation(it.getType()))\n+                      .collect(toImmutableList());\n+        if (parameters.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f0af0868c6ac8aae005f27fbfe030960d235be5"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDQ5NTQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/KotlinUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDowNTo0MlrOHCxEtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDowNTo0MlrOHCxEtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY2MzIyMw==", "bodyText": "nit: Check IS_KOTLIN_REFLECTION_PRESENT first because it looks cheaper. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2983#discussion_r472663223", "createdAt": "2020-08-19T04:05:42Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/KotlinUtil.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.server.annotation;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.lang.reflect.Method;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+\n+@SuppressWarnings(\"unchecked\")\n+final class KotlinUtil {\n+\n+    private static final boolean IS_KOTLIN_REFLECTION_PRESENT;\n+\n+    @Nullable\n+    private static final Class<? extends Annotation> METADATA_CLASS;\n+\n+    @Nullable\n+    private static final MethodHandle CALL_KOTLIN_SUSPENDING_METHOD;\n+\n+    @Nullable\n+    private static final Method IS_SUSPENDING_FUNCTION;\n+\n+    @Nullable\n+    private static final Method IS_CONTINUATION;\n+\n+    @Nullable\n+    private static final Method IS_RETURN_TYPE_UNIT;\n+\n+    static {\n+        MethodHandle callKotlinSuspendingMethod = null;\n+        try {\n+            final Class<?> coroutineUtilClass =\n+                    getClass(\"com.linecorp.armeria.internal.common.kotlin.CoroutineUtil\");\n+\n+            callKotlinSuspendingMethod = MethodHandles.lookup().findStatic(\n+                    coroutineUtilClass, \"callKotlinSuspendingMethod\",\n+                    MethodType.methodType(\n+                            CompletableFuture.class,\n+                            ImmutableList.of(Method.class, Object.class,\n+                                             Object[].class, ExecutorService.class,\n+                                             RequestContext.class))\n+            );\n+        } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException e) {\n+            // ignore\n+        } finally {\n+            CALL_KOTLIN_SUSPENDING_METHOD = callKotlinSuspendingMethod;\n+        }\n+\n+        Method isContinuation = null;\n+        Method isSuspendingFunction = null;\n+        Method isReturnTypeUnit = null;\n+        try {\n+            final Class<?> kotlinUtilClass =\n+                    getClass(\"com.linecorp.armeria.internal.common.kotlin.KotlinUtil\");\n+\n+            isContinuation = kotlinUtilClass.getMethod(\"isContinuation\", Class.class);\n+            isSuspendingFunction = kotlinUtilClass.getMethod(\"isSuspendingFunction\", Method.class);\n+            isReturnTypeUnit = kotlinUtilClass.getMethod(\"isReturnTypeUnit\", Method.class);\n+        } catch (ClassNotFoundException | NoSuchMethodException e) {\n+            // ignore\n+        } finally {\n+            IS_CONTINUATION = isContinuation;\n+            IS_SUSPENDING_FUNCTION = isSuspendingFunction;\n+            IS_RETURN_TYPE_UNIT = isReturnTypeUnit;\n+        }\n+\n+        boolean isKotlinReflectionPresent = false;\n+        try {\n+            getClass(\"kotlin.reflect.full.KClasses\");\n+            isKotlinReflectionPresent = true;\n+        } catch (ClassNotFoundException e) {\n+            // ignore\n+        } finally {\n+            IS_KOTLIN_REFLECTION_PRESENT = isKotlinReflectionPresent;\n+        }\n+\n+        Class<? extends Annotation> metadataClass = null;\n+        try {\n+            metadataClass = (Class<? extends Annotation>) getClass(\"kotlin.Metadata\");\n+        } catch (ClassNotFoundException e) {\n+            // ignore\n+        } finally {\n+            METADATA_CLASS = metadataClass;\n+        }\n+    }\n+\n+    /**\n+     * Returns a method which invokes Kotlin suspending functions.\n+     */\n+    @Nullable\n+    static MethodHandle getCallKotlinSuspendingMethod() {\n+        return CALL_KOTLIN_SUSPENDING_METHOD;\n+    }\n+\n+    /**\n+     * Returns true if a method is written in Kotlin.\n+     */\n+    static boolean isKotlinMethod(Method method) {\n+        return METADATA_CLASS != null &&\n+               method.getDeclaringClass().getAnnotation(METADATA_CLASS) != null;\n+    }\n+\n+    /**\n+     * Returns true if a method is a suspending function.\n+     */\n+    static boolean isSuspendingFunction(Method method) {\n+        try {\n+            return isKotlinMethod(method) &&\n+                   IS_KOTLIN_REFLECTION_PRESENT &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f0af0868c6ac8aae005f27fbfe030960d235be5"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDUwMjQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/KotlinUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDowNzo0MVrOHCxJSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDowNzo0MVrOHCxJSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY2NDM5Mw==", "bodyText": "Is it possible to return boolean? The returned value of IS_CONTINUATION is casted to boolean.", "url": "https://github.com/line/armeria/pull/2983#discussion_r472664393", "createdAt": "2020-08-19T04:07:41Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/KotlinUtil.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.server.annotation;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.lang.reflect.Method;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+\n+@SuppressWarnings(\"unchecked\")\n+final class KotlinUtil {\n+\n+    private static final boolean IS_KOTLIN_REFLECTION_PRESENT;\n+\n+    @Nullable\n+    private static final Class<? extends Annotation> METADATA_CLASS;\n+\n+    @Nullable\n+    private static final MethodHandle CALL_KOTLIN_SUSPENDING_METHOD;\n+\n+    @Nullable\n+    private static final Method IS_SUSPENDING_FUNCTION;\n+\n+    @Nullable\n+    private static final Method IS_CONTINUATION;\n+\n+    @Nullable\n+    private static final Method IS_RETURN_TYPE_UNIT;\n+\n+    static {\n+        MethodHandle callKotlinSuspendingMethod = null;\n+        try {\n+            final Class<?> coroutineUtilClass =\n+                    getClass(\"com.linecorp.armeria.internal.common.kotlin.CoroutineUtil\");\n+\n+            callKotlinSuspendingMethod = MethodHandles.lookup().findStatic(\n+                    coroutineUtilClass, \"callKotlinSuspendingMethod\",\n+                    MethodType.methodType(\n+                            CompletableFuture.class,\n+                            ImmutableList.of(Method.class, Object.class,\n+                                             Object[].class, ExecutorService.class,\n+                                             RequestContext.class))\n+            );\n+        } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException e) {\n+            // ignore\n+        } finally {\n+            CALL_KOTLIN_SUSPENDING_METHOD = callKotlinSuspendingMethod;\n+        }\n+\n+        Method isContinuation = null;\n+        Method isSuspendingFunction = null;\n+        Method isReturnTypeUnit = null;\n+        try {\n+            final Class<?> kotlinUtilClass =\n+                    getClass(\"com.linecorp.armeria.internal.common.kotlin.KotlinUtil\");\n+\n+            isContinuation = kotlinUtilClass.getMethod(\"isContinuation\", Class.class);\n+            isSuspendingFunction = kotlinUtilClass.getMethod(\"isSuspendingFunction\", Method.class);\n+            isReturnTypeUnit = kotlinUtilClass.getMethod(\"isReturnTypeUnit\", Method.class);\n+        } catch (ClassNotFoundException | NoSuchMethodException e) {\n+            // ignore\n+        } finally {\n+            IS_CONTINUATION = isContinuation;\n+            IS_SUSPENDING_FUNCTION = isSuspendingFunction;\n+            IS_RETURN_TYPE_UNIT = isReturnTypeUnit;\n+        }\n+\n+        boolean isKotlinReflectionPresent = false;\n+        try {\n+            getClass(\"kotlin.reflect.full.KClasses\");\n+            isKotlinReflectionPresent = true;\n+        } catch (ClassNotFoundException e) {\n+            // ignore\n+        } finally {\n+            IS_KOTLIN_REFLECTION_PRESENT = isKotlinReflectionPresent;\n+        }\n+\n+        Class<? extends Annotation> metadataClass = null;\n+        try {\n+            metadataClass = (Class<? extends Annotation>) getClass(\"kotlin.Metadata\");\n+        } catch (ClassNotFoundException e) {\n+            // ignore\n+        } finally {\n+            METADATA_CLASS = metadataClass;\n+        }\n+    }\n+\n+    /**\n+     * Returns a method which invokes Kotlin suspending functions.\n+     */\n+    @Nullable\n+    static MethodHandle getCallKotlinSuspendingMethod() {\n+        return CALL_KOTLIN_SUSPENDING_METHOD;\n+    }\n+\n+    /**\n+     * Returns true if a method is written in Kotlin.\n+     */\n+    static boolean isKotlinMethod(Method method) {\n+        return METADATA_CLASS != null &&\n+               method.getDeclaringClass().getAnnotation(METADATA_CLASS) != null;\n+    }\n+\n+    /**\n+     * Returns true if a method is a suspending function.\n+     */\n+    static boolean isSuspendingFunction(Method method) {\n+        try {\n+            return isKotlinMethod(method) &&\n+                   IS_KOTLIN_REFLECTION_PRESENT &&\n+                   IS_SUSPENDING_FUNCTION != null &&\n+                   (Boolean) IS_SUSPENDING_FUNCTION.invoke(null, method);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f0af0868c6ac8aae005f27fbfe030960d235be5"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDUwNjE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/KotlinUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDowODo0MlrOHCxLvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDowODo0MlrOHCxLvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY2NTAyMg==", "bodyText": "nit: Merge two lines?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private KotlinUtil() {\n          \n          \n            \n                }\n          \n          \n            \n                private KotlinUtil() {}", "url": "https://github.com/line/armeria/pull/2983#discussion_r472665022", "createdAt": "2020-08-19T04:08:42Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/KotlinUtil.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.server.annotation;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.lang.reflect.Method;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+\n+@SuppressWarnings(\"unchecked\")\n+final class KotlinUtil {\n+\n+    private static final boolean IS_KOTLIN_REFLECTION_PRESENT;\n+\n+    @Nullable\n+    private static final Class<? extends Annotation> METADATA_CLASS;\n+\n+    @Nullable\n+    private static final MethodHandle CALL_KOTLIN_SUSPENDING_METHOD;\n+\n+    @Nullable\n+    private static final Method IS_SUSPENDING_FUNCTION;\n+\n+    @Nullable\n+    private static final Method IS_CONTINUATION;\n+\n+    @Nullable\n+    private static final Method IS_RETURN_TYPE_UNIT;\n+\n+    static {\n+        MethodHandle callKotlinSuspendingMethod = null;\n+        try {\n+            final Class<?> coroutineUtilClass =\n+                    getClass(\"com.linecorp.armeria.internal.common.kotlin.CoroutineUtil\");\n+\n+            callKotlinSuspendingMethod = MethodHandles.lookup().findStatic(\n+                    coroutineUtilClass, \"callKotlinSuspendingMethod\",\n+                    MethodType.methodType(\n+                            CompletableFuture.class,\n+                            ImmutableList.of(Method.class, Object.class,\n+                                             Object[].class, ExecutorService.class,\n+                                             RequestContext.class))\n+            );\n+        } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException e) {\n+            // ignore\n+        } finally {\n+            CALL_KOTLIN_SUSPENDING_METHOD = callKotlinSuspendingMethod;\n+        }\n+\n+        Method isContinuation = null;\n+        Method isSuspendingFunction = null;\n+        Method isReturnTypeUnit = null;\n+        try {\n+            final Class<?> kotlinUtilClass =\n+                    getClass(\"com.linecorp.armeria.internal.common.kotlin.KotlinUtil\");\n+\n+            isContinuation = kotlinUtilClass.getMethod(\"isContinuation\", Class.class);\n+            isSuspendingFunction = kotlinUtilClass.getMethod(\"isSuspendingFunction\", Method.class);\n+            isReturnTypeUnit = kotlinUtilClass.getMethod(\"isReturnTypeUnit\", Method.class);\n+        } catch (ClassNotFoundException | NoSuchMethodException e) {\n+            // ignore\n+        } finally {\n+            IS_CONTINUATION = isContinuation;\n+            IS_SUSPENDING_FUNCTION = isSuspendingFunction;\n+            IS_RETURN_TYPE_UNIT = isReturnTypeUnit;\n+        }\n+\n+        boolean isKotlinReflectionPresent = false;\n+        try {\n+            getClass(\"kotlin.reflect.full.KClasses\");\n+            isKotlinReflectionPresent = true;\n+        } catch (ClassNotFoundException e) {\n+            // ignore\n+        } finally {\n+            IS_KOTLIN_REFLECTION_PRESENT = isKotlinReflectionPresent;\n+        }\n+\n+        Class<? extends Annotation> metadataClass = null;\n+        try {\n+            metadataClass = (Class<? extends Annotation>) getClass(\"kotlin.Metadata\");\n+        } catch (ClassNotFoundException e) {\n+            // ignore\n+        } finally {\n+            METADATA_CLASS = metadataClass;\n+        }\n+    }\n+\n+    /**\n+     * Returns a method which invokes Kotlin suspending functions.\n+     */\n+    @Nullable\n+    static MethodHandle getCallKotlinSuspendingMethod() {\n+        return CALL_KOTLIN_SUSPENDING_METHOD;\n+    }\n+\n+    /**\n+     * Returns true if a method is written in Kotlin.\n+     */\n+    static boolean isKotlinMethod(Method method) {\n+        return METADATA_CLASS != null &&\n+               method.getDeclaringClass().getAnnotation(METADATA_CLASS) != null;\n+    }\n+\n+    /**\n+     * Returns true if a method is a suspending function.\n+     */\n+    static boolean isSuspendingFunction(Method method) {\n+        try {\n+            return isKotlinMethod(method) &&\n+                   IS_KOTLIN_REFLECTION_PRESENT &&\n+                   IS_SUSPENDING_FUNCTION != null &&\n+                   (Boolean) IS_SUSPENDING_FUNCTION.invoke(null, method);\n+        } catch (Exception e) {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Returns true if a class is kotlin.coroutines.Continuation.\n+     */\n+    static boolean isContinuation(Class<?> type) {\n+        try {\n+            return IS_CONTINUATION != null &&\n+                   (boolean) IS_CONTINUATION.invoke(null, type);\n+        } catch (Exception e) {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Returns true if a method is suspending function and it returns kotlin.Unit.\n+     */\n+    static boolean isSuspendingAndReturnTypeUnit(Method method) {\n+        try {\n+            return isSuspendingFunction(method) &&\n+                   IS_RETURN_TYPE_UNIT != null &&\n+                   (boolean) IS_RETURN_TYPE_UNIT.invoke(null, method);\n+        } catch (Exception e) {\n+            return false;\n+        }\n+    }\n+\n+    private static Class<?> getClass(String name) throws ClassNotFoundException {\n+        return Class.forName(name, true, KotlinUtil.class.getClassLoader());\n+    }\n+\n+    private KotlinUtil() {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f0af0868c6ac8aae005f27fbfe030960d235be5"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDUwNzUwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/KotlinUtilTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDowOTowNVrOHCxMqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzo1MzoyNlrOHC6_cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY2NTI1OQ==", "bodyText": "Cruft?", "url": "https://github.com/line/armeria/pull/2983#discussion_r472665259", "createdAt": "2020-08-19T04:09:05Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/KotlinUtilTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.server.annotation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Method;\n+\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Without kotlin dependencies, all functions return false or null safely.\n+ */\n+class KotlinUtilTest {\n+\n+    @Test\n+    void getCallKotlinSuspendingMethod() {\n+        assertThat(KotlinUtil.getCallKotlinSuspendingMethod()).isNull();\n+    }\n+\n+    @Test\n+    void isContinuation() {\n+        assertThat(KotlinUtil.isContinuation(String.class)).isFalse();\n+    }\n+\n+    @Test\n+    void isKotlinMethod() throws NoSuchMethodException {\n+        final Method testMethod = KotlinUtilTest.class.getDeclaredMethod(\"testMethod\");\n+        assertThat(KotlinUtil.isKotlinMethod(testMethod)).isFalse();\n+    }\n+\n+    @Test\n+    void isSuspendingFunction() throws NoSuchMethodException {\n+        final Method testMethod = KotlinUtilTest.class.getDeclaredMethod(\"testMethod\");\n+        assertThat(KotlinUtil.isSuspendingFunction(testMethod)).isFalse();\n+    }\n+\n+    @Test\n+    void isSuspendingAndReturnTypeUnit() throws NoSuchMethodException {\n+        final Method testMethod = KotlinUtilTest.class.getDeclaredMethod(\"testMethod\");\n+        assertThat(KotlinUtil.isSuspendingAndReturnTypeUnit(testMethod)).isFalse();\n+    }\n+\n+    void testMethod() {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f0af0868c6ac8aae005f27fbfe030960d235be5"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY5ODc1Mg==", "bodyText": "This function is used for testing KotlinUtil methods.\nTo make the intention clear, replace it with\n    private static class DummyService {\n        void testMethod() {\n        }\n    }", "url": "https://github.com/line/armeria/pull/2983#discussion_r472698752", "createdAt": "2020-08-19T05:03:38Z", "author": {"login": "okue"}, "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/KotlinUtilTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.server.annotation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Method;\n+\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Without kotlin dependencies, all functions return false or null safely.\n+ */\n+class KotlinUtilTest {\n+\n+    @Test\n+    void getCallKotlinSuspendingMethod() {\n+        assertThat(KotlinUtil.getCallKotlinSuspendingMethod()).isNull();\n+    }\n+\n+    @Test\n+    void isContinuation() {\n+        assertThat(KotlinUtil.isContinuation(String.class)).isFalse();\n+    }\n+\n+    @Test\n+    void isKotlinMethod() throws NoSuchMethodException {\n+        final Method testMethod = KotlinUtilTest.class.getDeclaredMethod(\"testMethod\");\n+        assertThat(KotlinUtil.isKotlinMethod(testMethod)).isFalse();\n+    }\n+\n+    @Test\n+    void isSuspendingFunction() throws NoSuchMethodException {\n+        final Method testMethod = KotlinUtilTest.class.getDeclaredMethod(\"testMethod\");\n+        assertThat(KotlinUtil.isSuspendingFunction(testMethod)).isFalse();\n+    }\n+\n+    @Test\n+    void isSuspendingAndReturnTypeUnit() throws NoSuchMethodException {\n+        final Method testMethod = KotlinUtilTest.class.getDeclaredMethod(\"testMethod\");\n+        assertThat(KotlinUtil.isSuspendingAndReturnTypeUnit(testMethod)).isFalse();\n+    }\n+\n+    void testMethod() {\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY2NTI1OQ=="}, "originalCommit": {"oid": "1f0af0868c6ac8aae005f27fbfe030960d235be5"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgyNTcxNQ==", "bodyText": "Oops... I missed that. \ud83d\ude31\nBy the way the new version looks good.", "url": "https://github.com/line/armeria/pull/2983#discussion_r472825715", "createdAt": "2020-08-19T07:53:26Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/KotlinUtilTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.server.annotation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Method;\n+\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Without kotlin dependencies, all functions return false or null safely.\n+ */\n+class KotlinUtilTest {\n+\n+    @Test\n+    void getCallKotlinSuspendingMethod() {\n+        assertThat(KotlinUtil.getCallKotlinSuspendingMethod()).isNull();\n+    }\n+\n+    @Test\n+    void isContinuation() {\n+        assertThat(KotlinUtil.isContinuation(String.class)).isFalse();\n+    }\n+\n+    @Test\n+    void isKotlinMethod() throws NoSuchMethodException {\n+        final Method testMethod = KotlinUtilTest.class.getDeclaredMethod(\"testMethod\");\n+        assertThat(KotlinUtil.isKotlinMethod(testMethod)).isFalse();\n+    }\n+\n+    @Test\n+    void isSuspendingFunction() throws NoSuchMethodException {\n+        final Method testMethod = KotlinUtilTest.class.getDeclaredMethod(\"testMethod\");\n+        assertThat(KotlinUtil.isSuspendingFunction(testMethod)).isFalse();\n+    }\n+\n+    @Test\n+    void isSuspendingAndReturnTypeUnit() throws NoSuchMethodException {\n+        final Method testMethod = KotlinUtilTest.class.getDeclaredMethod(\"testMethod\");\n+        assertThat(KotlinUtil.isSuspendingAndReturnTypeUnit(testMethod)).isFalse();\n+    }\n+\n+    void testMethod() {\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY2NTI1OQ=="}, "originalCommit": {"oid": "1f0af0868c6ac8aae005f27fbfe030960d235be5"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDUxNTgwOnYy", "diffSide": "RIGHT", "path": "examples/annotated-http-service-kotlin/src/main/kotlin/example/armeria/server/annotated/kotlin/ArmeriaRequestContext.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDoxMDo1OFrOHCxRmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDoxMDo1OFrOHCxRmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY2NjUyMw==", "bodyText": "Could be simplified?\nreturn requestContext?.push()", "url": "https://github.com/line/armeria/pull/2983#discussion_r472666523", "createdAt": "2020-08-19T04:10:58Z", "author": {"login": "ikhoon"}, "path": "examples/annotated-http-service-kotlin/src/main/kotlin/example/armeria/server/annotated/kotlin/ArmeriaRequestContext.kt", "diffHunk": "@@ -0,0 +1,26 @@\n+package example.armeria.server.annotated.kotlin\n+\n+import com.linecorp.armeria.common.util.SafeCloseable\n+import com.linecorp.armeria.server.ServiceRequestContext\n+import kotlinx.coroutines.ThreadContextElement\n+import kotlin.coroutines.AbstractCoroutineContextElement\n+import kotlin.coroutines.CoroutineContext\n+\n+/**\n+ * Propagates [ServiceRequestContext] over coroutines.\n+ */\n+class ArmeriaRequestContext(\n+    private val requestContext: ServiceRequestContext? = ServiceRequestContext.currentOrNull()\n+) : ThreadContextElement<SafeCloseable?>, AbstractCoroutineContextElement(Key) {\n+\n+    companion object Key : CoroutineContext.Key<ArmeriaRequestContext>\n+\n+    override fun updateThreadContext(context: CoroutineContext): SafeCloseable? {\n+        if (requestContext == null) return null\n+        return requestContext.push()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f0af0868c6ac8aae005f27fbfe030960d235be5"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDUzOTQ0OnYy", "diffSide": "RIGHT", "path": "kotlin/src/test/java/com/linecorp/armeria/internal/server/annotation/KotlinUtilWithKotlinDependenciesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDoxNzoyMFrOHCxhPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDoxNzoyMFrOHCxhPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY3MDUyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class KotlinUtilWithKotlinDependenciesTest {\n          \n          \n            \n            class KotlinUtilWithKotlinDependenciesTest {", "url": "https://github.com/line/armeria/pull/2983#discussion_r472670526", "createdAt": "2020-08-19T04:17:20Z", "author": {"login": "ikhoon"}, "path": "kotlin/src/test/java/com/linecorp/armeria/internal/server/annotation/KotlinUtilWithKotlinDependenciesTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.server.annotation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.reflect.Method;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.server.ExampleService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import kotlin.coroutines.Continuation;\n+\n+public class KotlinUtilWithKotlinDependenciesTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f0af0868c6ac8aae005f27fbfe030960d235be5"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDUzOTk5OnYy", "diffSide": "RIGHT", "path": "kotlin/src/test/java/com/linecorp/armeria/internal/server/annotation/KotlinUtilWithKotlinDependenciesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDoxNzozMFrOHCxhlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDoxNzozMFrOHCxhlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY3MDYxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public KotlinUtilWithKotlinDependenciesTest() throws NoSuchMethodException {\n          \n          \n            \n                KotlinUtilWithKotlinDependenciesTest() throws NoSuchMethodException {", "url": "https://github.com/line/armeria/pull/2983#discussion_r472670615", "createdAt": "2020-08-19T04:17:30Z", "author": {"login": "ikhoon"}, "path": "kotlin/src/test/java/com/linecorp/armeria/internal/server/annotation/KotlinUtilWithKotlinDependenciesTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.server.annotation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.reflect.Method;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.server.ExampleService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import kotlin.coroutines.Continuation;\n+\n+public class KotlinUtilWithKotlinDependenciesTest {\n+    final ExampleService exampleService;\n+    final Method normal;\n+    final Method suspendingUnit;\n+    final Method suspendingInt;\n+\n+    public KotlinUtilWithKotlinDependenciesTest() throws NoSuchMethodException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f0af0868c6ac8aae005f27fbfe030960d235be5"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDU0MTc0OnYy", "diffSide": "RIGHT", "path": "kotlin/src/test/java/com/linecorp/armeria/internal/server/annotation/KotlinUtilWithKotlinDependenciesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDoxNzo1OVrOHCxivw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDoxNzo1OVrOHCxivw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY3MDkxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(res.get()).isEqualTo(null);\n          \n          \n            \n                    assertThat(res.get()).isNull();", "url": "https://github.com/line/armeria/pull/2983#discussion_r472670911", "createdAt": "2020-08-19T04:17:59Z", "author": {"login": "ikhoon"}, "path": "kotlin/src/test/java/com/linecorp/armeria/internal/server/annotation/KotlinUtilWithKotlinDependenciesTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.server.annotation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.reflect.Method;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.server.ExampleService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import kotlin.coroutines.Continuation;\n+\n+public class KotlinUtilWithKotlinDependenciesTest {\n+    final ExampleService exampleService;\n+    final Method normal;\n+    final Method suspendingUnit;\n+    final Method suspendingInt;\n+\n+    public KotlinUtilWithKotlinDependenciesTest() throws NoSuchMethodException {\n+        exampleService = new ExampleService();\n+        normal = ExampleService.class.getDeclaredMethod(\"normal\");\n+        suspendingUnit = ExampleService.class.getDeclaredMethod(\"suspendingUnit\", Continuation.class);\n+        suspendingInt = ExampleService.class.getDeclaredMethod(\"suspendingInt\", Continuation.class);\n+    }\n+\n+    @Test\n+    void getCallKotlinSuspendingMethod() {\n+        assertThat(KotlinUtil.getCallKotlinSuspendingMethod()).isNotNull();\n+    }\n+\n+    @Test\n+    void invokeSuspendingInt() throws Throwable {\n+        final MethodHandle callSuspendingMethod = KotlinUtil.getCallKotlinSuspendingMethod();\n+\n+        final RequestContext ctx = getRequestContext();\n+        final CompletableFuture<?> res =\n+                (CompletableFuture<?>) callSuspendingMethod.invoke(suspendingInt, exampleService,\n+                                                                   new Object[0], ctx.eventLoop(), ctx);\n+        assertThat(res.get()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    void invokeSuspendingUnit() throws Throwable {\n+        final MethodHandle callSuspendingMethod = KotlinUtil.getCallKotlinSuspendingMethod();\n+\n+        final RequestContext ctx = getRequestContext();\n+        final CompletableFuture<?> res =\n+                (CompletableFuture<?>) callSuspendingMethod.invoke(suspendingUnit, exampleService,\n+                                                                   new Object[0], ctx.eventLoop(), ctx);\n+        assertThat(res.get()).isEqualTo(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f0af0868c6ac8aae005f27fbfe030960d235be5"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDU0MjY4OnYy", "diffSide": "RIGHT", "path": "kotlin/src/test/java/com/linecorp/armeria/internal/server/annotation/KotlinUtilWithKotlinDependenciesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDoxODoxNlrOHCxjbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDoxODoxNlrOHCxjbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY3MTA4Ng==", "bodyText": "Could be static?", "url": "https://github.com/line/armeria/pull/2983#discussion_r472671086", "createdAt": "2020-08-19T04:18:16Z", "author": {"login": "ikhoon"}, "path": "kotlin/src/test/java/com/linecorp/armeria/internal/server/annotation/KotlinUtilWithKotlinDependenciesTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.server.annotation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.reflect.Method;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.server.ExampleService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import kotlin.coroutines.Continuation;\n+\n+public class KotlinUtilWithKotlinDependenciesTest {\n+    final ExampleService exampleService;\n+    final Method normal;\n+    final Method suspendingUnit;\n+    final Method suspendingInt;\n+\n+    public KotlinUtilWithKotlinDependenciesTest() throws NoSuchMethodException {\n+        exampleService = new ExampleService();\n+        normal = ExampleService.class.getDeclaredMethod(\"normal\");\n+        suspendingUnit = ExampleService.class.getDeclaredMethod(\"suspendingUnit\", Continuation.class);\n+        suspendingInt = ExampleService.class.getDeclaredMethod(\"suspendingInt\", Continuation.class);\n+    }\n+\n+    @Test\n+    void getCallKotlinSuspendingMethod() {\n+        assertThat(KotlinUtil.getCallKotlinSuspendingMethod()).isNotNull();\n+    }\n+\n+    @Test\n+    void invokeSuspendingInt() throws Throwable {\n+        final MethodHandle callSuspendingMethod = KotlinUtil.getCallKotlinSuspendingMethod();\n+\n+        final RequestContext ctx = getRequestContext();\n+        final CompletableFuture<?> res =\n+                (CompletableFuture<?>) callSuspendingMethod.invoke(suspendingInt, exampleService,\n+                                                                   new Object[0], ctx.eventLoop(), ctx);\n+        assertThat(res.get()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    void invokeSuspendingUnit() throws Throwable {\n+        final MethodHandle callSuspendingMethod = KotlinUtil.getCallKotlinSuspendingMethod();\n+\n+        final RequestContext ctx = getRequestContext();\n+        final CompletableFuture<?> res =\n+                (CompletableFuture<?>) callSuspendingMethod.invoke(suspendingUnit, exampleService,\n+                                                                   new Object[0], ctx.eventLoop(), ctx);\n+        assertThat(res.get()).isEqualTo(null);\n+    }\n+\n+    @Test\n+    void isContinuation() {\n+        assertThat(KotlinUtil.isContinuation(String.class)).isFalse();\n+        assertThat(KotlinUtil.isContinuation(Continuation.class)).isTrue();\n+    }\n+\n+    @Test\n+    void isKotlinMethod() {\n+        assertThat(KotlinUtil.isKotlinMethod(normal)).isTrue();\n+        assertThat(KotlinUtil.isKotlinMethod(suspendingInt)).isTrue();\n+        assertThat(KotlinUtil.isKotlinMethod(suspendingUnit)).isTrue();\n+    }\n+\n+    @Test\n+    void isSuspendingFunction() {\n+        assertThat(KotlinUtil.isSuspendingFunction(normal)).isFalse();\n+        assertThat(KotlinUtil.isSuspendingFunction(suspendingInt)).isTrue();\n+        assertThat(KotlinUtil.isSuspendingFunction(suspendingUnit)).isTrue();\n+    }\n+\n+    @Test\n+    void isSuspendingAndReturnTypeUnit() {\n+        assertThat(KotlinUtil.isSuspendingAndReturnTypeUnit(normal)).isFalse();\n+        assertThat(KotlinUtil.isSuspendingAndReturnTypeUnit(suspendingInt)).isFalse();\n+        assertThat(KotlinUtil.isSuspendingAndReturnTypeUnit(suspendingUnit)).isTrue();\n+    }\n+\n+    private RequestContext getRequestContext() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f0af0868c6ac8aae005f27fbfe030960d235be5"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2212, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}