{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5MzU0OTQ1", "number": 3207, "reviewThreads": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0MzoyOFrOE-h13w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMjoxNTo0OVrOE-oI9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDAxNjMxOnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0MzoyOFrOH7u74w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0MzoyOFrOH7u74w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5NzAyNw==", "bodyText": "Netty's `io_uring` transport is currently experimental, so you should be careful using this feature.", "url": "https://github.com/line/armeria/pull/3207#discussion_r532397027", "createdAt": "2020-11-30T07:43:28Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDAxODI5OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0NDowM1rOH7u87w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0NDowM1rOH7u87w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5NzI5NQ==", "bodyText": "now not collected by default -> not collected anymore by default", "url": "https://github.com/line/armeria/pull/3207#discussion_r532397295", "createdAt": "2020-11-30T07:44:03Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDAyMTM2OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0NToxMVrOH7u-uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0NToxMVrOH7u-uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5Nzc1Mw==", "bodyText": "This is not a real example. Use a real service.\nCould we list the services that implement TransientService for users' convenience.", "url": "https://github.com/line/armeria/pull/3207#discussion_r532397753", "createdAt": "2020-11-30T07:45:11Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDAyMjUxOnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0NTozMVrOH7u_Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0NTozMVrOH7u_Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5NzkxMQ==", "bodyText": "Hyperlink ScalaPB", "url": "https://github.com/line/armeria/pull/3207#discussion_r532397911", "createdAt": "2020-11-30T07:45:31Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDAyMzQ3OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0NTo1NFrOH7u_4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0NTo1NFrOH7u_4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5ODA0OQ==", "bodyText": "an annotated service or annotated services\ncomma could be removed", "url": "https://github.com/line/armeria/pull/3207#discussion_r532398049", "createdAt": "2020-11-30T07:45:54Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDAyNTU2OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0Njo0NVrOH7vBFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0Njo0NVrOH7vBFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5ODM1OA==", "bodyText": "HttpDeframer.of(...)", "url": "https://github.com/line/armeria/pull/3207#discussion_r532398358", "createdAt": "2020-11-30T07:46:45Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDAyNzI4OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0NzoxNVrOH7vB-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0NzoxNVrOH7vB-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5ODU4Nw==", "bodyText": "?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - Spring 5.2.9.RELEASE \u2192 5.3.1\n          \n          \n            \n            - Spring 5.2.9.RELEASE \u2192 5.3.1.RELEASE", "url": "https://github.com/line/armeria/pull/3207#discussion_r532398587", "createdAt": "2020-11-30T07:47:15Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n+  ```xml\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```\n+- You can now use the unsafe TLS cipher using <type://ClientFactoryBuilder#tlsAllowUnsafeCiphers(boolean)>.\n+  #3157, #3172\n+- You can now specify an arbitrary type for <type://@Header> and <type://@Param> if the\n+  type has one of following static methods or the constructor. #2574, #3143, #3164\n+  - `public static T of(String) { ... }`\n+  - `public static T valueOf(String) { ... }`\n+  - `public static T fromString(String) { ... }`\n+  - `public T(String) { ... } // constructor`\n+  ```java\n+  public class UserService {\n+\n+      @Get(\"/api\")\n+      public HttpResponse get(@Param User user) {\n+          ...\n+      }\n+\n+      private static class User {\n+          User(String userId) { ... } // This constructor is used to create User.\n+          ...\n+      }\n+  }\n+  ```\n+- You can now build an <type://HttpRequest> fluently. #3110\n+  ```java\n+  // Creates a POST HttpRequest whose URI is \"/foo?q=bar\"\n+  // with headers \"cookie: name=value\" and \"authorization: value\" and a JSON body.\n+  HttpRequest.builder()\n+             .post(\"/{resource}\")\n+             .pathParam(\"resource\", \"foo\")\n+             .queryParam(\"q\", \"bar\")\n+             .cookie(Cookie.of(\"name\", \"value\"))\n+             .header(\"authorization\", \"value\")\n+             .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\"));\n+  // You can also use WebClient.prepare().\n+  WebClient client = ...\n+  client.prepare()\n+        .post(\"/{resource}\")\n+        .pathParam(\"resource\", \"foo\")\n+        .queryParam(\"q\", \"bar\")\n+        .cookie(Cookie.of(\"name\", \"value\"))\n+        .header(\"authorization\", \"value\")\n+        .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\")\n+        .execute();\n+  ```\n+- You can now easily handle cookies by applying <type://CookieClient#newDecorator()>. #2637, #3118\n+- You can now use the custom Thrift protocol by using <type://ThriftProtocolFactoryProvider> and SPI. #3183\n+  ```java\n+  public class TTupleFactoryProvider extends ThriftProtocolFactoryProvider {\n+      @Override\n+      public Set<ThriftProtocolFactoryProvider.Entry> entries() {\n+          return ImmutableSet.of(new ThriftProtocolFactoryProvider.Entry(\n+                  SerializationFormat.of(\"ttuple\"), new TTupleProtocol.Factory()));\n+      }\n+  }\n+  ```\n+- You can now collect more detailed DNS metrics such as success or failure, query type, etc. #1887, #2935\n+- You can now customize the <type://HealthCheckService> when using Spring integration. #3144\n+  ```java\n+  @Bean\n+  public HealthCheckServiceConfigurator healthCheckServiceConfigurator() {\n+      return builder -> builder.updatable(true);\n+  }\n+  ```\n+- You can now use <type://RequestHeaders#acceptLanguage()> to choose language. #3177, #3179\n+## \ud83d\udcc8 Improvements\n+\n+- Various improvements for Doc service. #3149, #3150, #3167, #3188\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+- <type://HealthCheckedEndpointGroup#endpoints()> now returns healthy endpoints properly even when\n+  <type://EndpointGroup#orElse(EndpointGroup)> is used. #3181\n+- `ServletRequest.getProtocol()` now returns the proper value when using <type://TomcatService> and\n+  <type://JettyService>. #3194\n+- The route decorators are now evaluated in the reverse order they applied. #3160, #3166\n+- You now get the FORBIDDEN status if your service does not handle preflight requests regardless of\n+  route decorators. #3152\n+- A gRPC `ServerCall` is now closed exactly only once. #3153\n+- You no longer see `AnnotatedConnectException` when the <type://Endpoint> is created with an\n+  IPv6 scope ID. #3158, #3178\n+- Armeria server does not reject the request path whose first segment includes a colon anymore. #3154\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+- <type://CircuitBreakerClient#newPerHostAndMethodDecorator(BiFunction,CircuitBreakerRule)> is now deprecated.\n+  #31356\n+  - Use <type://CircuitBreakerClient#newDecorator(CircuitBreakerMapping,CircuitBreakerRule)> with the customized\n+    <type://CircuitBreakerMapping> using <type://CircuitBreakerMapping#builder()>.\n+- The response timeout and max total attempts setters in <type://RetryingClientBuilder> is now deprecated.\n+  #3128 #3145\n+  - The static factory methods that take those parameters in <type://RetryingClient> are now deprecated as well.\n+  - Use <type://RetryConfigMapping> and <type://RetryConfig>.\n+- <type://Route#apply(RoutingContext)?full> is deprecated. #3152\n+  - Use <type://Route#apply(RoutingContext,boolean)?full>.\n+- The constructor of <type://PrometheusExpositionService> is now deprecated. #3081\n+  - Use <type://PrometheusExpositionService#of(CollectorRegistry)>.\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- N/A\n+\n+## \u26d3 Dependencies\n+\n+- completalbe-futures 0.3.3 \u2192 0.3.4\n+- dropwizard-core 2.0.13 \u2192 2.0.16\n+- Fastutil 8.4.2 \u2192 8.4.3\n+- gRPC 1.33.0 \u2192 1.33.1\n+- grpc-kotlin-stub 0.2.0 \u2192 0.2.1\n+- io.dropwizard.metrics 4.1.13 \u2192 4.1.15\n+- Jackson 2.11.2 \u2192 2.12.0\n+- Jctools 3.1.0 \u2192 3.2.0\n+- javax.annotation-api 1.3.2\n+- Micrometer 1.5.5 \u2192 1.6.1\n+- Netty 4.1.53.Final \u2192 4.1.54.Final\n+- org.bouncycastle 1.66 \u2192 1.67\n+- Reactor 3.3.10.RELEASE \u2192 3.4.0\n+- Spring Boot 2.3.4.RELEASE \u2192 2.4.0\n+- Spring 5.2.9.RELEASE \u2192 5.3.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDAyOTIyOnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0ODowMVrOH7vDHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwOTo1NzowOFrOH7zgZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5ODg3OA==", "bodyText": "Example?", "url": "https://github.com/line/armeria/pull/3207#discussion_r532398878", "createdAt": "2020-11-30T07:48:01Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQzOTgzNQ==", "bodyText": "How about? (I'm not 100% sure that this is a good example. \ud83d\ude05)\nHttpResponse response = ...\nSplitHttpResponse splitHttpResponse = response.split();\nCompletableFuture<ResponseHeaders> headersFuture = splitHttpResponse.headers();\nStreamMessage<HttpData> bodyStream = splitHttpResponse.body();\nheadersFuture.thenApply(headers -> {\n    if (headers.contentType() == MediaType.JSON_SEQ) {\n        // Subscribe to a stream of HttpData to JSON\n        Flux.from(bodyStream)\n            .map(httpData -> {\n                // Convert HttpData to your domain object\n            })\n            ...\n    } else {\n        // Aggregate a response body and use it.\n        Flux.from(splitHttpResponse.body())\n            .collectList()\n            ...\n    }\n});\nOr, remove the else part? Because the example is long a bit.\nHttpResponse response = ...\nSplitHttpResponse splitHttpResponse = response.split();\nCompletableFuture<ResponseHeaders> headersFuture = splitHttpResponse.headers();\nStreamMessage<HttpData> bodyStream = splitHttpResponse.body();\n\nheadersFuture.thenApply(headers -> {\n    if (headers.contentType() == MediaType.JSON_SEQ) {\n        // Subscribe to a stream of HttpData to JSON\n        Flux.from(bodyStream)\n            .map(httpData -> {\n                // Convert HttpData to your domain object\n            })\n            ...\n    }\n});", "url": "https://github.com/line/armeria/pull/3207#discussion_r532439835", "createdAt": "2020-11-30T09:05:52Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5ODg3OA=="}, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ3MTkwOA==", "bodyText": "Thanks let me use that. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3207#discussion_r532471908", "createdAt": "2020-11-30T09:57:08Z", "author": {"login": "minwoox"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5ODg3OA=="}, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDAzMTExOnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0ODo0MFrOH7vEJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0ODo0MFrOH7vEJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5OTE0Mw==", "bodyText": "resolver -> resolver cache", "url": "https://github.com/line/armeria/pull/3207#discussion_r532399143", "createdAt": "2020-11-30T07:48:40Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDAzMTYzOnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0ODo1MFrOH7vEaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0ODo1MFrOH7vEaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5OTIwOQ==", "bodyText": "fo -> for", "url": "https://github.com/line/armeria/pull/3207#discussion_r532399209", "createdAt": "2020-11-30T07:48:50Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDAzMjY3OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0OToxMVrOH7vFEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMToyMjoyOFrOH72t5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5OTM3Nw==", "bodyText": "A real example please", "url": "https://github.com/line/armeria/pull/3207#discussion_r532399377", "createdAt": "2020-11-30T07:49:11Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n+  ```xml\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ3Nzc4OA==", "bodyText": "Copied from the documentation. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3207#discussion_r532477788", "createdAt": "2020-11-30T10:06:11Z", "author": {"login": "minwoox"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n+  ```xml\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5OTM3Nw=="}, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ5MTkwOQ==", "bodyText": "Oops! Then could we update the documentation as well? \ud83d\ude05", "url": "https://github.com/line/armeria/pull/3207#discussion_r532491909", "createdAt": "2020-11-30T10:28:21Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n+  ```xml\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5OTM3Nw=="}, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUyNDUxNw==", "bodyText": "Oops, I should've left the comment after I pushed the change. Sorry. \ud83d\ude05", "url": "https://github.com/line/armeria/pull/3207#discussion_r532524517", "createdAt": "2020-11-30T11:22:28Z", "author": {"login": "minwoox"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n+  ```xml\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5OTM3Nw=="}, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDAzNDA1OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0OTo0MVrOH7vF3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo0OTo0MVrOH7vF3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5OTU4MQ==", "bodyText": "Global comment - No comma", "url": "https://github.com/line/armeria/pull/3207#discussion_r532399581", "createdAt": "2020-11-30T07:49:41Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n+  ```xml\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```\n+- You can now use the unsafe TLS cipher using <type://ClientFactoryBuilder#tlsAllowUnsafeCiphers(boolean)>.\n+  #3157, #3172", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDAzNTg0OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1MDoyMVrOH7vG6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1MDoyMVrOH7vG6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5OTg1MA==", "bodyText": "build and execute", "url": "https://github.com/line/armeria/pull/3207#discussion_r532399850", "createdAt": "2020-11-30T07:50:21Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n+  ```xml\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```\n+- You can now use the unsafe TLS cipher using <type://ClientFactoryBuilder#tlsAllowUnsafeCiphers(boolean)>.\n+  #3157, #3172\n+- You can now specify an arbitrary type for <type://@Header> and <type://@Param> if the\n+  type has one of following static methods or the constructor. #2574, #3143, #3164\n+  - `public static T of(String) { ... }`\n+  - `public static T valueOf(String) { ... }`\n+  - `public static T fromString(String) { ... }`\n+  - `public T(String) { ... } // constructor`\n+  ```java\n+  public class UserService {\n+\n+      @Get(\"/api\")\n+      public HttpResponse get(@Param User user) {\n+          ...\n+      }\n+\n+      private static class User {\n+          User(String userId) { ... } // This constructor is used to create User.\n+          ...\n+      }\n+  }\n+  ```\n+- You can now build an <type://HttpRequest> fluently. #3110", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDAzNjk4OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1MDozN1rOH7vHfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1MDozN1rOH7vHfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM5OTk5Nw==", "bodyText": "Example", "url": "https://github.com/line/armeria/pull/3207#discussion_r532399997", "createdAt": "2020-11-30T07:50:37Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n+  ```xml\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```\n+- You can now use the unsafe TLS cipher using <type://ClientFactoryBuilder#tlsAllowUnsafeCiphers(boolean)>.\n+  #3157, #3172\n+- You can now specify an arbitrary type for <type://@Header> and <type://@Param> if the\n+  type has one of following static methods or the constructor. #2574, #3143, #3164\n+  - `public static T of(String) { ... }`\n+  - `public static T valueOf(String) { ... }`\n+  - `public static T fromString(String) { ... }`\n+  - `public T(String) { ... } // constructor`\n+  ```java\n+  public class UserService {\n+\n+      @Get(\"/api\")\n+      public HttpResponse get(@Param User user) {\n+          ...\n+      }\n+\n+      private static class User {\n+          User(String userId) { ... } // This constructor is used to create User.\n+          ...\n+      }\n+  }\n+  ```\n+- You can now build an <type://HttpRequest> fluently. #3110\n+  ```java\n+  // Creates a POST HttpRequest whose URI is \"/foo?q=bar\"\n+  // with headers \"cookie: name=value\" and \"authorization: value\" and a JSON body.\n+  HttpRequest.builder()\n+             .post(\"/{resource}\")\n+             .pathParam(\"resource\", \"foo\")\n+             .queryParam(\"q\", \"bar\")\n+             .cookie(Cookie.of(\"name\", \"value\"))\n+             .header(\"authorization\", \"value\")\n+             .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\"));\n+  // You can also use WebClient.prepare().\n+  WebClient client = ...\n+  client.prepare()\n+        .post(\"/{resource}\")\n+        .pathParam(\"resource\", \"foo\")\n+        .queryParam(\"q\", \"bar\")\n+        .cookie(Cookie.of(\"name\", \"value\"))\n+        .header(\"authorization\", \"value\")\n+        .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\")\n+        .execute();\n+  ```\n+- You can now easily handle cookies by applying <type://CookieClient#newDecorator()>. #2637, #3118", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDAzOTI2OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1MToyMVrOH7vI2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1MToyMVrOH7vI2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwMDM0NA==", "bodyText": "List a few example meter IDs please", "url": "https://github.com/line/armeria/pull/3207#discussion_r532400344", "createdAt": "2020-11-30T07:51:21Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n+  ```xml\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```\n+- You can now use the unsafe TLS cipher using <type://ClientFactoryBuilder#tlsAllowUnsafeCiphers(boolean)>.\n+  #3157, #3172\n+- You can now specify an arbitrary type for <type://@Header> and <type://@Param> if the\n+  type has one of following static methods or the constructor. #2574, #3143, #3164\n+  - `public static T of(String) { ... }`\n+  - `public static T valueOf(String) { ... }`\n+  - `public static T fromString(String) { ... }`\n+  - `public T(String) { ... } // constructor`\n+  ```java\n+  public class UserService {\n+\n+      @Get(\"/api\")\n+      public HttpResponse get(@Param User user) {\n+          ...\n+      }\n+\n+      private static class User {\n+          User(String userId) { ... } // This constructor is used to create User.\n+          ...\n+      }\n+  }\n+  ```\n+- You can now build an <type://HttpRequest> fluently. #3110\n+  ```java\n+  // Creates a POST HttpRequest whose URI is \"/foo?q=bar\"\n+  // with headers \"cookie: name=value\" and \"authorization: value\" and a JSON body.\n+  HttpRequest.builder()\n+             .post(\"/{resource}\")\n+             .pathParam(\"resource\", \"foo\")\n+             .queryParam(\"q\", \"bar\")\n+             .cookie(Cookie.of(\"name\", \"value\"))\n+             .header(\"authorization\", \"value\")\n+             .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\"));\n+  // You can also use WebClient.prepare().\n+  WebClient client = ...\n+  client.prepare()\n+        .post(\"/{resource}\")\n+        .pathParam(\"resource\", \"foo\")\n+        .queryParam(\"q\", \"bar\")\n+        .cookie(Cookie.of(\"name\", \"value\"))\n+        .header(\"authorization\", \"value\")\n+        .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\")\n+        .execute();\n+  ```\n+- You can now easily handle cookies by applying <type://CookieClient#newDecorator()>. #2637, #3118\n+- You can now use the custom Thrift protocol by using <type://ThriftProtocolFactoryProvider> and SPI. #3183\n+  ```java\n+  public class TTupleFactoryProvider extends ThriftProtocolFactoryProvider {\n+      @Override\n+      public Set<ThriftProtocolFactoryProvider.Entry> entries() {\n+          return ImmutableSet.of(new ThriftProtocolFactoryProvider.Entry(\n+                  SerializationFormat.of(\"ttuple\"), new TTupleProtocol.Factory()));\n+      }\n+  }\n+  ```\n+- You can now collect more detailed DNS metrics such as success or failure, query type, etc. #1887, #2935", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDA0MDQ1OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1MTo0M1rOH7vJiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1MTo0M1rOH7vJiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwMDUyMQ==", "bodyText": "<type://DocService> ?", "url": "https://github.com/line/armeria/pull/3207#discussion_r532400521", "createdAt": "2020-11-30T07:51:43Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n+  ```xml\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```\n+- You can now use the unsafe TLS cipher using <type://ClientFactoryBuilder#tlsAllowUnsafeCiphers(boolean)>.\n+  #3157, #3172\n+- You can now specify an arbitrary type for <type://@Header> and <type://@Param> if the\n+  type has one of following static methods or the constructor. #2574, #3143, #3164\n+  - `public static T of(String) { ... }`\n+  - `public static T valueOf(String) { ... }`\n+  - `public static T fromString(String) { ... }`\n+  - `public T(String) { ... } // constructor`\n+  ```java\n+  public class UserService {\n+\n+      @Get(\"/api\")\n+      public HttpResponse get(@Param User user) {\n+          ...\n+      }\n+\n+      private static class User {\n+          User(String userId) { ... } // This constructor is used to create User.\n+          ...\n+      }\n+  }\n+  ```\n+- You can now build an <type://HttpRequest> fluently. #3110\n+  ```java\n+  // Creates a POST HttpRequest whose URI is \"/foo?q=bar\"\n+  // with headers \"cookie: name=value\" and \"authorization: value\" and a JSON body.\n+  HttpRequest.builder()\n+             .post(\"/{resource}\")\n+             .pathParam(\"resource\", \"foo\")\n+             .queryParam(\"q\", \"bar\")\n+             .cookie(Cookie.of(\"name\", \"value\"))\n+             .header(\"authorization\", \"value\")\n+             .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\"));\n+  // You can also use WebClient.prepare().\n+  WebClient client = ...\n+  client.prepare()\n+        .post(\"/{resource}\")\n+        .pathParam(\"resource\", \"foo\")\n+        .queryParam(\"q\", \"bar\")\n+        .cookie(Cookie.of(\"name\", \"value\"))\n+        .header(\"authorization\", \"value\")\n+        .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\")\n+        .execute();\n+  ```\n+- You can now easily handle cookies by applying <type://CookieClient#newDecorator()>. #2637, #3118\n+- You can now use the custom Thrift protocol by using <type://ThriftProtocolFactoryProvider> and SPI. #3183\n+  ```java\n+  public class TTupleFactoryProvider extends ThriftProtocolFactoryProvider {\n+      @Override\n+      public Set<ThriftProtocolFactoryProvider.Entry> entries() {\n+          return ImmutableSet.of(new ThriftProtocolFactoryProvider.Entry(\n+                  SerializationFormat.of(\"ttuple\"), new TTupleProtocol.Factory()));\n+      }\n+  }\n+  ```\n+- You can now collect more detailed DNS metrics such as success or failure, query type, etc. #1887, #2935\n+- You can now customize the <type://HealthCheckService> when using Spring integration. #3144\n+  ```java\n+  @Bean\n+  public HealthCheckServiceConfigurator healthCheckServiceConfigurator() {\n+      return builder -> builder.updatable(true);\n+  }\n+  ```\n+- You can now use <type://RequestHeaders#acceptLanguage()> to choose language. #3177, #3179\n+## \ud83d\udcc8 Improvements\n+\n+- Various improvements for Doc service. #3149, #3150, #3167, #3188", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDA0MzUzOnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1Mjo1NFrOH7vLhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1Mjo1NFrOH7vLhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwMTAzMQ==", "bodyText": "completable\nThis is shaded, so you don't have to list it here.", "url": "https://github.com/line/armeria/pull/3207#discussion_r532401031", "createdAt": "2020-11-30T07:52:54Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n+  ```xml\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```\n+- You can now use the unsafe TLS cipher using <type://ClientFactoryBuilder#tlsAllowUnsafeCiphers(boolean)>.\n+  #3157, #3172\n+- You can now specify an arbitrary type for <type://@Header> and <type://@Param> if the\n+  type has one of following static methods or the constructor. #2574, #3143, #3164\n+  - `public static T of(String) { ... }`\n+  - `public static T valueOf(String) { ... }`\n+  - `public static T fromString(String) { ... }`\n+  - `public T(String) { ... } // constructor`\n+  ```java\n+  public class UserService {\n+\n+      @Get(\"/api\")\n+      public HttpResponse get(@Param User user) {\n+          ...\n+      }\n+\n+      private static class User {\n+          User(String userId) { ... } // This constructor is used to create User.\n+          ...\n+      }\n+  }\n+  ```\n+- You can now build an <type://HttpRequest> fluently. #3110\n+  ```java\n+  // Creates a POST HttpRequest whose URI is \"/foo?q=bar\"\n+  // with headers \"cookie: name=value\" and \"authorization: value\" and a JSON body.\n+  HttpRequest.builder()\n+             .post(\"/{resource}\")\n+             .pathParam(\"resource\", \"foo\")\n+             .queryParam(\"q\", \"bar\")\n+             .cookie(Cookie.of(\"name\", \"value\"))\n+             .header(\"authorization\", \"value\")\n+             .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\"));\n+  // You can also use WebClient.prepare().\n+  WebClient client = ...\n+  client.prepare()\n+        .post(\"/{resource}\")\n+        .pathParam(\"resource\", \"foo\")\n+        .queryParam(\"q\", \"bar\")\n+        .cookie(Cookie.of(\"name\", \"value\"))\n+        .header(\"authorization\", \"value\")\n+        .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\")\n+        .execute();\n+  ```\n+- You can now easily handle cookies by applying <type://CookieClient#newDecorator()>. #2637, #3118\n+- You can now use the custom Thrift protocol by using <type://ThriftProtocolFactoryProvider> and SPI. #3183\n+  ```java\n+  public class TTupleFactoryProvider extends ThriftProtocolFactoryProvider {\n+      @Override\n+      public Set<ThriftProtocolFactoryProvider.Entry> entries() {\n+          return ImmutableSet.of(new ThriftProtocolFactoryProvider.Entry(\n+                  SerializationFormat.of(\"ttuple\"), new TTupleProtocol.Factory()));\n+      }\n+  }\n+  ```\n+- You can now collect more detailed DNS metrics such as success or failure, query type, etc. #1887, #2935\n+- You can now customize the <type://HealthCheckService> when using Spring integration. #3144\n+  ```java\n+  @Bean\n+  public HealthCheckServiceConfigurator healthCheckServiceConfigurator() {\n+      return builder -> builder.updatable(true);\n+  }\n+  ```\n+- You can now use <type://RequestHeaders#acceptLanguage()> to choose language. #3177, #3179\n+## \ud83d\udcc8 Improvements\n+\n+- Various improvements for Doc service. #3149, #3150, #3167, #3188\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+- <type://HealthCheckedEndpointGroup#endpoints()> now returns healthy endpoints properly even when\n+  <type://EndpointGroup#orElse(EndpointGroup)> is used. #3181\n+- `ServletRequest.getProtocol()` now returns the proper value when using <type://TomcatService> and\n+  <type://JettyService>. #3194\n+- The route decorators are now evaluated in the reverse order they applied. #3160, #3166\n+- You now get the FORBIDDEN status if your service does not handle preflight requests regardless of\n+  route decorators. #3152\n+- A gRPC `ServerCall` is now closed exactly only once. #3153\n+- You no longer see `AnnotatedConnectException` when the <type://Endpoint> is created with an\n+  IPv6 scope ID. #3158, #3178\n+- Armeria server does not reject the request path whose first segment includes a colon anymore. #3154\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+- <type://CircuitBreakerClient#newPerHostAndMethodDecorator(BiFunction,CircuitBreakerRule)> is now deprecated.\n+  #31356\n+  - Use <type://CircuitBreakerClient#newDecorator(CircuitBreakerMapping,CircuitBreakerRule)> with the customized\n+    <type://CircuitBreakerMapping> using <type://CircuitBreakerMapping#builder()>.\n+- The response timeout and max total attempts setters in <type://RetryingClientBuilder> is now deprecated.\n+  #3128 #3145\n+  - The static factory methods that take those parameters in <type://RetryingClient> are now deprecated as well.\n+  - Use <type://RetryConfigMapping> and <type://RetryConfig>.\n+- <type://Route#apply(RoutingContext)?full> is deprecated. #3152\n+  - Use <type://Route#apply(RoutingContext,boolean)?full>.\n+- The constructor of <type://PrometheusExpositionService> is now deprecated. #3081\n+  - Use <type://PrometheusExpositionService#of(CollectorRegistry)>.\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- N/A\n+\n+## \u26d3 Dependencies\n+\n+- completalbe-futures 0.3.3 \u2192 0.3.4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDA0NDM1OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1MzoxM1rOH7vMFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1MzoxM1rOH7vMFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwMTE3Mg==", "bodyText": "Dropwizard", "url": "https://github.com/line/armeria/pull/3207#discussion_r532401172", "createdAt": "2020-11-30T07:53:13Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n+  ```xml\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```\n+- You can now use the unsafe TLS cipher using <type://ClientFactoryBuilder#tlsAllowUnsafeCiphers(boolean)>.\n+  #3157, #3172\n+- You can now specify an arbitrary type for <type://@Header> and <type://@Param> if the\n+  type has one of following static methods or the constructor. #2574, #3143, #3164\n+  - `public static T of(String) { ... }`\n+  - `public static T valueOf(String) { ... }`\n+  - `public static T fromString(String) { ... }`\n+  - `public T(String) { ... } // constructor`\n+  ```java\n+  public class UserService {\n+\n+      @Get(\"/api\")\n+      public HttpResponse get(@Param User user) {\n+          ...\n+      }\n+\n+      private static class User {\n+          User(String userId) { ... } // This constructor is used to create User.\n+          ...\n+      }\n+  }\n+  ```\n+- You can now build an <type://HttpRequest> fluently. #3110\n+  ```java\n+  // Creates a POST HttpRequest whose URI is \"/foo?q=bar\"\n+  // with headers \"cookie: name=value\" and \"authorization: value\" and a JSON body.\n+  HttpRequest.builder()\n+             .post(\"/{resource}\")\n+             .pathParam(\"resource\", \"foo\")\n+             .queryParam(\"q\", \"bar\")\n+             .cookie(Cookie.of(\"name\", \"value\"))\n+             .header(\"authorization\", \"value\")\n+             .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\"));\n+  // You can also use WebClient.prepare().\n+  WebClient client = ...\n+  client.prepare()\n+        .post(\"/{resource}\")\n+        .pathParam(\"resource\", \"foo\")\n+        .queryParam(\"q\", \"bar\")\n+        .cookie(Cookie.of(\"name\", \"value\"))\n+        .header(\"authorization\", \"value\")\n+        .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\")\n+        .execute();\n+  ```\n+- You can now easily handle cookies by applying <type://CookieClient#newDecorator()>. #2637, #3118\n+- You can now use the custom Thrift protocol by using <type://ThriftProtocolFactoryProvider> and SPI. #3183\n+  ```java\n+  public class TTupleFactoryProvider extends ThriftProtocolFactoryProvider {\n+      @Override\n+      public Set<ThriftProtocolFactoryProvider.Entry> entries() {\n+          return ImmutableSet.of(new ThriftProtocolFactoryProvider.Entry(\n+                  SerializationFormat.of(\"ttuple\"), new TTupleProtocol.Factory()));\n+      }\n+  }\n+  ```\n+- You can now collect more detailed DNS metrics such as success or failure, query type, etc. #1887, #2935\n+- You can now customize the <type://HealthCheckService> when using Spring integration. #3144\n+  ```java\n+  @Bean\n+  public HealthCheckServiceConfigurator healthCheckServiceConfigurator() {\n+      return builder -> builder.updatable(true);\n+  }\n+  ```\n+- You can now use <type://RequestHeaders#acceptLanguage()> to choose language. #3177, #3179\n+## \ud83d\udcc8 Improvements\n+\n+- Various improvements for Doc service. #3149, #3150, #3167, #3188\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+- <type://HealthCheckedEndpointGroup#endpoints()> now returns healthy endpoints properly even when\n+  <type://EndpointGroup#orElse(EndpointGroup)> is used. #3181\n+- `ServletRequest.getProtocol()` now returns the proper value when using <type://TomcatService> and\n+  <type://JettyService>. #3194\n+- The route decorators are now evaluated in the reverse order they applied. #3160, #3166\n+- You now get the FORBIDDEN status if your service does not handle preflight requests regardless of\n+  route decorators. #3152\n+- A gRPC `ServerCall` is now closed exactly only once. #3153\n+- You no longer see `AnnotatedConnectException` when the <type://Endpoint> is created with an\n+  IPv6 scope ID. #3158, #3178\n+- Armeria server does not reject the request path whose first segment includes a colon anymore. #3154\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+- <type://CircuitBreakerClient#newPerHostAndMethodDecorator(BiFunction,CircuitBreakerRule)> is now deprecated.\n+  #31356\n+  - Use <type://CircuitBreakerClient#newDecorator(CircuitBreakerMapping,CircuitBreakerRule)> with the customized\n+    <type://CircuitBreakerMapping> using <type://CircuitBreakerMapping#builder()>.\n+- The response timeout and max total attempts setters in <type://RetryingClientBuilder> is now deprecated.\n+  #3128 #3145\n+  - The static factory methods that take those parameters in <type://RetryingClient> are now deprecated as well.\n+  - Use <type://RetryConfigMapping> and <type://RetryConfig>.\n+- <type://Route#apply(RoutingContext)?full> is deprecated. #3152\n+  - Use <type://Route#apply(RoutingContext,boolean)?full>.\n+- The constructor of <type://PrometheusExpositionService> is now deprecated. #3081\n+  - Use <type://PrometheusExpositionService#of(CollectorRegistry)>.\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- N/A\n+\n+## \u26d3 Dependencies\n+\n+- completalbe-futures 0.3.3 \u2192 0.3.4\n+- dropwizard-core 2.0.13 \u2192 2.0.16", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDA0NDkwOnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1MzoyOVrOH7vMfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1MzoyOVrOH7vMfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwMTI3Nw==", "bodyText": "Dropwizard Metrics", "url": "https://github.com/line/armeria/pull/3207#discussion_r532401277", "createdAt": "2020-11-30T07:53:29Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n+  ```xml\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```\n+- You can now use the unsafe TLS cipher using <type://ClientFactoryBuilder#tlsAllowUnsafeCiphers(boolean)>.\n+  #3157, #3172\n+- You can now specify an arbitrary type for <type://@Header> and <type://@Param> if the\n+  type has one of following static methods or the constructor. #2574, #3143, #3164\n+  - `public static T of(String) { ... }`\n+  - `public static T valueOf(String) { ... }`\n+  - `public static T fromString(String) { ... }`\n+  - `public T(String) { ... } // constructor`\n+  ```java\n+  public class UserService {\n+\n+      @Get(\"/api\")\n+      public HttpResponse get(@Param User user) {\n+          ...\n+      }\n+\n+      private static class User {\n+          User(String userId) { ... } // This constructor is used to create User.\n+          ...\n+      }\n+  }\n+  ```\n+- You can now build an <type://HttpRequest> fluently. #3110\n+  ```java\n+  // Creates a POST HttpRequest whose URI is \"/foo?q=bar\"\n+  // with headers \"cookie: name=value\" and \"authorization: value\" and a JSON body.\n+  HttpRequest.builder()\n+             .post(\"/{resource}\")\n+             .pathParam(\"resource\", \"foo\")\n+             .queryParam(\"q\", \"bar\")\n+             .cookie(Cookie.of(\"name\", \"value\"))\n+             .header(\"authorization\", \"value\")\n+             .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\"));\n+  // You can also use WebClient.prepare().\n+  WebClient client = ...\n+  client.prepare()\n+        .post(\"/{resource}\")\n+        .pathParam(\"resource\", \"foo\")\n+        .queryParam(\"q\", \"bar\")\n+        .cookie(Cookie.of(\"name\", \"value\"))\n+        .header(\"authorization\", \"value\")\n+        .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\")\n+        .execute();\n+  ```\n+- You can now easily handle cookies by applying <type://CookieClient#newDecorator()>. #2637, #3118\n+- You can now use the custom Thrift protocol by using <type://ThriftProtocolFactoryProvider> and SPI. #3183\n+  ```java\n+  public class TTupleFactoryProvider extends ThriftProtocolFactoryProvider {\n+      @Override\n+      public Set<ThriftProtocolFactoryProvider.Entry> entries() {\n+          return ImmutableSet.of(new ThriftProtocolFactoryProvider.Entry(\n+                  SerializationFormat.of(\"ttuple\"), new TTupleProtocol.Factory()));\n+      }\n+  }\n+  ```\n+- You can now collect more detailed DNS metrics such as success or failure, query type, etc. #1887, #2935\n+- You can now customize the <type://HealthCheckService> when using Spring integration. #3144\n+  ```java\n+  @Bean\n+  public HealthCheckServiceConfigurator healthCheckServiceConfigurator() {\n+      return builder -> builder.updatable(true);\n+  }\n+  ```\n+- You can now use <type://RequestHeaders#acceptLanguage()> to choose language. #3177, #3179\n+## \ud83d\udcc8 Improvements\n+\n+- Various improvements for Doc service. #3149, #3150, #3167, #3188\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+- <type://HealthCheckedEndpointGroup#endpoints()> now returns healthy endpoints properly even when\n+  <type://EndpointGroup#orElse(EndpointGroup)> is used. #3181\n+- `ServletRequest.getProtocol()` now returns the proper value when using <type://TomcatService> and\n+  <type://JettyService>. #3194\n+- The route decorators are now evaluated in the reverse order they applied. #3160, #3166\n+- You now get the FORBIDDEN status if your service does not handle preflight requests regardless of\n+  route decorators. #3152\n+- A gRPC `ServerCall` is now closed exactly only once. #3153\n+- You no longer see `AnnotatedConnectException` when the <type://Endpoint> is created with an\n+  IPv6 scope ID. #3158, #3178\n+- Armeria server does not reject the request path whose first segment includes a colon anymore. #3154\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+- <type://CircuitBreakerClient#newPerHostAndMethodDecorator(BiFunction,CircuitBreakerRule)> is now deprecated.\n+  #31356\n+  - Use <type://CircuitBreakerClient#newDecorator(CircuitBreakerMapping,CircuitBreakerRule)> with the customized\n+    <type://CircuitBreakerMapping> using <type://CircuitBreakerMapping#builder()>.\n+- The response timeout and max total attempts setters in <type://RetryingClientBuilder> is now deprecated.\n+  #3128 #3145\n+  - The static factory methods that take those parameters in <type://RetryingClient> are now deprecated as well.\n+  - Use <type://RetryConfigMapping> and <type://RetryConfig>.\n+- <type://Route#apply(RoutingContext)?full> is deprecated. #3152\n+  - Use <type://Route#apply(RoutingContext,boolean)?full>.\n+- The constructor of <type://PrometheusExpositionService> is now deprecated. #3081\n+  - Use <type://PrometheusExpositionService#of(CollectorRegistry)>.\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- N/A\n+\n+## \u26d3 Dependencies\n+\n+- completalbe-futures 0.3.3 \u2192 0.3.4\n+- dropwizard-core 2.0.13 \u2192 2.0.16\n+- Fastutil 8.4.2 \u2192 8.4.3\n+- gRPC 1.33.0 \u2192 1.33.1\n+- grpc-kotlin-stub 0.2.0 \u2192 0.2.1\n+- io.dropwizard.metrics 4.1.13 \u2192 4.1.15", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDA0NTI5OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1MzozNlrOH7vMtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1MzozNlrOH7vMtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwMTMzNA==", "bodyText": "JCTools", "url": "https://github.com/line/armeria/pull/3207#discussion_r532401334", "createdAt": "2020-11-30T07:53:36Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n+  ```xml\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```\n+- You can now use the unsafe TLS cipher using <type://ClientFactoryBuilder#tlsAllowUnsafeCiphers(boolean)>.\n+  #3157, #3172\n+- You can now specify an arbitrary type for <type://@Header> and <type://@Param> if the\n+  type has one of following static methods or the constructor. #2574, #3143, #3164\n+  - `public static T of(String) { ... }`\n+  - `public static T valueOf(String) { ... }`\n+  - `public static T fromString(String) { ... }`\n+  - `public T(String) { ... } // constructor`\n+  ```java\n+  public class UserService {\n+\n+      @Get(\"/api\")\n+      public HttpResponse get(@Param User user) {\n+          ...\n+      }\n+\n+      private static class User {\n+          User(String userId) { ... } // This constructor is used to create User.\n+          ...\n+      }\n+  }\n+  ```\n+- You can now build an <type://HttpRequest> fluently. #3110\n+  ```java\n+  // Creates a POST HttpRequest whose URI is \"/foo?q=bar\"\n+  // with headers \"cookie: name=value\" and \"authorization: value\" and a JSON body.\n+  HttpRequest.builder()\n+             .post(\"/{resource}\")\n+             .pathParam(\"resource\", \"foo\")\n+             .queryParam(\"q\", \"bar\")\n+             .cookie(Cookie.of(\"name\", \"value\"))\n+             .header(\"authorization\", \"value\")\n+             .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\"));\n+  // You can also use WebClient.prepare().\n+  WebClient client = ...\n+  client.prepare()\n+        .post(\"/{resource}\")\n+        .pathParam(\"resource\", \"foo\")\n+        .queryParam(\"q\", \"bar\")\n+        .cookie(Cookie.of(\"name\", \"value\"))\n+        .header(\"authorization\", \"value\")\n+        .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\")\n+        .execute();\n+  ```\n+- You can now easily handle cookies by applying <type://CookieClient#newDecorator()>. #2637, #3118\n+- You can now use the custom Thrift protocol by using <type://ThriftProtocolFactoryProvider> and SPI. #3183\n+  ```java\n+  public class TTupleFactoryProvider extends ThriftProtocolFactoryProvider {\n+      @Override\n+      public Set<ThriftProtocolFactoryProvider.Entry> entries() {\n+          return ImmutableSet.of(new ThriftProtocolFactoryProvider.Entry(\n+                  SerializationFormat.of(\"ttuple\"), new TTupleProtocol.Factory()));\n+      }\n+  }\n+  ```\n+- You can now collect more detailed DNS metrics such as success or failure, query type, etc. #1887, #2935\n+- You can now customize the <type://HealthCheckService> when using Spring integration. #3144\n+  ```java\n+  @Bean\n+  public HealthCheckServiceConfigurator healthCheckServiceConfigurator() {\n+      return builder -> builder.updatable(true);\n+  }\n+  ```\n+- You can now use <type://RequestHeaders#acceptLanguage()> to choose language. #3177, #3179\n+## \ud83d\udcc8 Improvements\n+\n+- Various improvements for Doc service. #3149, #3150, #3167, #3188\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+- <type://HealthCheckedEndpointGroup#endpoints()> now returns healthy endpoints properly even when\n+  <type://EndpointGroup#orElse(EndpointGroup)> is used. #3181\n+- `ServletRequest.getProtocol()` now returns the proper value when using <type://TomcatService> and\n+  <type://JettyService>. #3194\n+- The route decorators are now evaluated in the reverse order they applied. #3160, #3166\n+- You now get the FORBIDDEN status if your service does not handle preflight requests regardless of\n+  route decorators. #3152\n+- A gRPC `ServerCall` is now closed exactly only once. #3153\n+- You no longer see `AnnotatedConnectException` when the <type://Endpoint> is created with an\n+  IPv6 scope ID. #3158, #3178\n+- Armeria server does not reject the request path whose first segment includes a colon anymore. #3154\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+- <type://CircuitBreakerClient#newPerHostAndMethodDecorator(BiFunction,CircuitBreakerRule)> is now deprecated.\n+  #31356\n+  - Use <type://CircuitBreakerClient#newDecorator(CircuitBreakerMapping,CircuitBreakerRule)> with the customized\n+    <type://CircuitBreakerMapping> using <type://CircuitBreakerMapping#builder()>.\n+- The response timeout and max total attempts setters in <type://RetryingClientBuilder> is now deprecated.\n+  #3128 #3145\n+  - The static factory methods that take those parameters in <type://RetryingClient> are now deprecated as well.\n+  - Use <type://RetryConfigMapping> and <type://RetryConfig>.\n+- <type://Route#apply(RoutingContext)?full> is deprecated. #3152\n+  - Use <type://Route#apply(RoutingContext,boolean)?full>.\n+- The constructor of <type://PrometheusExpositionService> is now deprecated. #3081\n+  - Use <type://PrometheusExpositionService#of(CollectorRegistry)>.\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- N/A\n+\n+## \u26d3 Dependencies\n+\n+- completalbe-futures 0.3.3 \u2192 0.3.4\n+- dropwizard-core 2.0.13 \u2192 2.0.16\n+- Fastutil 8.4.2 \u2192 8.4.3\n+- gRPC 1.33.0 \u2192 1.33.1\n+- grpc-kotlin-stub 0.2.0 \u2192 0.2.1\n+- io.dropwizard.metrics 4.1.13 \u2192 4.1.15\n+- Jackson 2.11.2 \u2192 2.12.0\n+- Jctools 3.1.0 \u2192 3.2.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDA0Njc4OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1NDoxMlrOH7vNug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1NDoxMlrOH7vNug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwMTU5NA==", "bodyText": "Could you add some details about this? We moved from jakartaee to javax.", "url": "https://github.com/line/armeria/pull/3207#discussion_r532401594", "createdAt": "2020-11-30T07:54:12Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n+  ```xml\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```\n+- You can now use the unsafe TLS cipher using <type://ClientFactoryBuilder#tlsAllowUnsafeCiphers(boolean)>.\n+  #3157, #3172\n+- You can now specify an arbitrary type for <type://@Header> and <type://@Param> if the\n+  type has one of following static methods or the constructor. #2574, #3143, #3164\n+  - `public static T of(String) { ... }`\n+  - `public static T valueOf(String) { ... }`\n+  - `public static T fromString(String) { ... }`\n+  - `public T(String) { ... } // constructor`\n+  ```java\n+  public class UserService {\n+\n+      @Get(\"/api\")\n+      public HttpResponse get(@Param User user) {\n+          ...\n+      }\n+\n+      private static class User {\n+          User(String userId) { ... } // This constructor is used to create User.\n+          ...\n+      }\n+  }\n+  ```\n+- You can now build an <type://HttpRequest> fluently. #3110\n+  ```java\n+  // Creates a POST HttpRequest whose URI is \"/foo?q=bar\"\n+  // with headers \"cookie: name=value\" and \"authorization: value\" and a JSON body.\n+  HttpRequest.builder()\n+             .post(\"/{resource}\")\n+             .pathParam(\"resource\", \"foo\")\n+             .queryParam(\"q\", \"bar\")\n+             .cookie(Cookie.of(\"name\", \"value\"))\n+             .header(\"authorization\", \"value\")\n+             .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\"));\n+  // You can also use WebClient.prepare().\n+  WebClient client = ...\n+  client.prepare()\n+        .post(\"/{resource}\")\n+        .pathParam(\"resource\", \"foo\")\n+        .queryParam(\"q\", \"bar\")\n+        .cookie(Cookie.of(\"name\", \"value\"))\n+        .header(\"authorization\", \"value\")\n+        .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\")\n+        .execute();\n+  ```\n+- You can now easily handle cookies by applying <type://CookieClient#newDecorator()>. #2637, #3118\n+- You can now use the custom Thrift protocol by using <type://ThriftProtocolFactoryProvider> and SPI. #3183\n+  ```java\n+  public class TTupleFactoryProvider extends ThriftProtocolFactoryProvider {\n+      @Override\n+      public Set<ThriftProtocolFactoryProvider.Entry> entries() {\n+          return ImmutableSet.of(new ThriftProtocolFactoryProvider.Entry(\n+                  SerializationFormat.of(\"ttuple\"), new TTupleProtocol.Factory()));\n+      }\n+  }\n+  ```\n+- You can now collect more detailed DNS metrics such as success or failure, query type, etc. #1887, #2935\n+- You can now customize the <type://HealthCheckService> when using Spring integration. #3144\n+  ```java\n+  @Bean\n+  public HealthCheckServiceConfigurator healthCheckServiceConfigurator() {\n+      return builder -> builder.updatable(true);\n+  }\n+  ```\n+- You can now use <type://RequestHeaders#acceptLanguage()> to choose language. #3177, #3179\n+## \ud83d\udcc8 Improvements\n+\n+- Various improvements for Doc service. #3149, #3150, #3167, #3188\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+- <type://HealthCheckedEndpointGroup#endpoints()> now returns healthy endpoints properly even when\n+  <type://EndpointGroup#orElse(EndpointGroup)> is used. #3181\n+- `ServletRequest.getProtocol()` now returns the proper value when using <type://TomcatService> and\n+  <type://JettyService>. #3194\n+- The route decorators are now evaluated in the reverse order they applied. #3160, #3166\n+- You now get the FORBIDDEN status if your service does not handle preflight requests regardless of\n+  route decorators. #3152\n+- A gRPC `ServerCall` is now closed exactly only once. #3153\n+- You no longer see `AnnotatedConnectException` when the <type://Endpoint> is created with an\n+  IPv6 scope ID. #3158, #3178\n+- Armeria server does not reject the request path whose first segment includes a colon anymore. #3154\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+- <type://CircuitBreakerClient#newPerHostAndMethodDecorator(BiFunction,CircuitBreakerRule)> is now deprecated.\n+  #31356\n+  - Use <type://CircuitBreakerClient#newDecorator(CircuitBreakerMapping,CircuitBreakerRule)> with the customized\n+    <type://CircuitBreakerMapping> using <type://CircuitBreakerMapping#builder()>.\n+- The response timeout and max total attempts setters in <type://RetryingClientBuilder> is now deprecated.\n+  #3128 #3145\n+  - The static factory methods that take those parameters in <type://RetryingClient> are now deprecated as well.\n+  - Use <type://RetryConfigMapping> and <type://RetryConfig>.\n+- <type://Route#apply(RoutingContext)?full> is deprecated. #3152\n+  - Use <type://Route#apply(RoutingContext,boolean)?full>.\n+- The constructor of <type://PrometheusExpositionService> is now deprecated. #3081\n+  - Use <type://PrometheusExpositionService#of(CollectorRegistry)>.\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- N/A\n+\n+## \u26d3 Dependencies\n+\n+- completalbe-futures 0.3.3 \u2192 0.3.4\n+- dropwizard-core 2.0.13 \u2192 2.0.16\n+- Fastutil 8.4.2 \u2192 8.4.3\n+- gRPC 1.33.0 \u2192 1.33.1\n+- grpc-kotlin-stub 0.2.0 \u2192 0.2.1\n+- io.dropwizard.metrics 4.1.13 \u2192 4.1.15\n+- Jackson 2.11.2 \u2192 2.12.0\n+- Jctools 3.1.0 \u2192 3.2.0\n+- javax.annotation-api 1.3.2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDA0Nzk4OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1NDozM1rOH7vOZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1NDozM1rOH7vOZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwMTc2Ng==", "bodyText": "BouncyCastle", "url": "https://github.com/line/armeria/pull/3207#discussion_r532401766", "createdAt": "2020-11-30T07:54:33Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n+  ```xml\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```\n+- You can now use the unsafe TLS cipher using <type://ClientFactoryBuilder#tlsAllowUnsafeCiphers(boolean)>.\n+  #3157, #3172\n+- You can now specify an arbitrary type for <type://@Header> and <type://@Param> if the\n+  type has one of following static methods or the constructor. #2574, #3143, #3164\n+  - `public static T of(String) { ... }`\n+  - `public static T valueOf(String) { ... }`\n+  - `public static T fromString(String) { ... }`\n+  - `public T(String) { ... } // constructor`\n+  ```java\n+  public class UserService {\n+\n+      @Get(\"/api\")\n+      public HttpResponse get(@Param User user) {\n+          ...\n+      }\n+\n+      private static class User {\n+          User(String userId) { ... } // This constructor is used to create User.\n+          ...\n+      }\n+  }\n+  ```\n+- You can now build an <type://HttpRequest> fluently. #3110\n+  ```java\n+  // Creates a POST HttpRequest whose URI is \"/foo?q=bar\"\n+  // with headers \"cookie: name=value\" and \"authorization: value\" and a JSON body.\n+  HttpRequest.builder()\n+             .post(\"/{resource}\")\n+             .pathParam(\"resource\", \"foo\")\n+             .queryParam(\"q\", \"bar\")\n+             .cookie(Cookie.of(\"name\", \"value\"))\n+             .header(\"authorization\", \"value\")\n+             .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\"));\n+  // You can also use WebClient.prepare().\n+  WebClient client = ...\n+  client.prepare()\n+        .post(\"/{resource}\")\n+        .pathParam(\"resource\", \"foo\")\n+        .queryParam(\"q\", \"bar\")\n+        .cookie(Cookie.of(\"name\", \"value\"))\n+        .header(\"authorization\", \"value\")\n+        .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\")\n+        .execute();\n+  ```\n+- You can now easily handle cookies by applying <type://CookieClient#newDecorator()>. #2637, #3118\n+- You can now use the custom Thrift protocol by using <type://ThriftProtocolFactoryProvider> and SPI. #3183\n+  ```java\n+  public class TTupleFactoryProvider extends ThriftProtocolFactoryProvider {\n+      @Override\n+      public Set<ThriftProtocolFactoryProvider.Entry> entries() {\n+          return ImmutableSet.of(new ThriftProtocolFactoryProvider.Entry(\n+                  SerializationFormat.of(\"ttuple\"), new TTupleProtocol.Factory()));\n+      }\n+  }\n+  ```\n+- You can now collect more detailed DNS metrics such as success or failure, query type, etc. #1887, #2935\n+- You can now customize the <type://HealthCheckService> when using Spring integration. #3144\n+  ```java\n+  @Bean\n+  public HealthCheckServiceConfigurator healthCheckServiceConfigurator() {\n+      return builder -> builder.updatable(true);\n+  }\n+  ```\n+- You can now use <type://RequestHeaders#acceptLanguage()> to choose language. #3177, #3179\n+## \ud83d\udcc8 Improvements\n+\n+- Various improvements for Doc service. #3149, #3150, #3167, #3188\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+- <type://HealthCheckedEndpointGroup#endpoints()> now returns healthy endpoints properly even when\n+  <type://EndpointGroup#orElse(EndpointGroup)> is used. #3181\n+- `ServletRequest.getProtocol()` now returns the proper value when using <type://TomcatService> and\n+  <type://JettyService>. #3194\n+- The route decorators are now evaluated in the reverse order they applied. #3160, #3166\n+- You now get the FORBIDDEN status if your service does not handle preflight requests regardless of\n+  route decorators. #3152\n+- A gRPC `ServerCall` is now closed exactly only once. #3153\n+- You no longer see `AnnotatedConnectException` when the <type://Endpoint> is created with an\n+  IPv6 scope ID. #3158, #3178\n+- Armeria server does not reject the request path whose first segment includes a colon anymore. #3154\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+- <type://CircuitBreakerClient#newPerHostAndMethodDecorator(BiFunction,CircuitBreakerRule)> is now deprecated.\n+  #31356\n+  - Use <type://CircuitBreakerClient#newDecorator(CircuitBreakerMapping,CircuitBreakerRule)> with the customized\n+    <type://CircuitBreakerMapping> using <type://CircuitBreakerMapping#builder()>.\n+- The response timeout and max total attempts setters in <type://RetryingClientBuilder> is now deprecated.\n+  #3128 #3145\n+  - The static factory methods that take those parameters in <type://RetryingClient> are now deprecated as well.\n+  - Use <type://RetryConfigMapping> and <type://RetryConfig>.\n+- <type://Route#apply(RoutingContext)?full> is deprecated. #3152\n+  - Use <type://Route#apply(RoutingContext,boolean)?full>.\n+- The constructor of <type://PrometheusExpositionService> is now deprecated. #3081\n+  - Use <type://PrometheusExpositionService#of(CollectorRegistry)>.\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- N/A\n+\n+## \u26d3 Dependencies\n+\n+- completalbe-futures 0.3.3 \u2192 0.3.4\n+- dropwizard-core 2.0.13 \u2192 2.0.16\n+- Fastutil 8.4.2 \u2192 8.4.3\n+- gRPC 1.33.0 \u2192 1.33.1\n+- grpc-kotlin-stub 0.2.0 \u2192 0.2.1\n+- io.dropwizard.metrics 4.1.13 \u2192 4.1.15\n+- Jackson 2.11.2 \u2192 2.12.0\n+- Jctools 3.1.0 \u2192 3.2.0\n+- javax.annotation-api 1.3.2\n+- Micrometer 1.5.5 \u2192 1.6.1\n+- Netty 4.1.53.Final \u2192 4.1.54.Final\n+- org.bouncycastle 1.66 \u2192 1.67", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDA0OTg2OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1NTowMlrOH7vPZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1NTowMlrOH7vPZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwMjAyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                                   .build(factory)\n          \n          \n            \n                                                                   .build(factory);", "url": "https://github.com/line/armeria/pull/3207#discussion_r532402023", "createdAt": "2020-11-30T07:55:02Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDA1MTIwOnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1NToyNlrOH7vQHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMDoyODo1NFrOH70v5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwMjIwNA==", "bodyText": "You want to add RELEASE or not? How about removing them from both sides for consistency?", "url": "https://github.com/line/armeria/pull/3207#discussion_r532402204", "createdAt": "2020-11-30T07:55:26Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n+  ```xml\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```\n+- You can now use the unsafe TLS cipher using <type://ClientFactoryBuilder#tlsAllowUnsafeCiphers(boolean)>.\n+  #3157, #3172\n+- You can now specify an arbitrary type for <type://@Header> and <type://@Param> if the\n+  type has one of following static methods or the constructor. #2574, #3143, #3164\n+  - `public static T of(String) { ... }`\n+  - `public static T valueOf(String) { ... }`\n+  - `public static T fromString(String) { ... }`\n+  - `public T(String) { ... } // constructor`\n+  ```java\n+  public class UserService {\n+\n+      @Get(\"/api\")\n+      public HttpResponse get(@Param User user) {\n+          ...\n+      }\n+\n+      private static class User {\n+          User(String userId) { ... } // This constructor is used to create User.\n+          ...\n+      }\n+  }\n+  ```\n+- You can now build an <type://HttpRequest> fluently. #3110\n+  ```java\n+  // Creates a POST HttpRequest whose URI is \"/foo?q=bar\"\n+  // with headers \"cookie: name=value\" and \"authorization: value\" and a JSON body.\n+  HttpRequest.builder()\n+             .post(\"/{resource}\")\n+             .pathParam(\"resource\", \"foo\")\n+             .queryParam(\"q\", \"bar\")\n+             .cookie(Cookie.of(\"name\", \"value\"))\n+             .header(\"authorization\", \"value\")\n+             .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\"));\n+  // You can also use WebClient.prepare().\n+  WebClient client = ...\n+  client.prepare()\n+        .post(\"/{resource}\")\n+        .pathParam(\"resource\", \"foo\")\n+        .queryParam(\"q\", \"bar\")\n+        .cookie(Cookie.of(\"name\", \"value\"))\n+        .header(\"authorization\", \"value\")\n+        .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\")\n+        .execute();\n+  ```\n+- You can now easily handle cookies by applying <type://CookieClient#newDecorator()>. #2637, #3118\n+- You can now use the custom Thrift protocol by using <type://ThriftProtocolFactoryProvider> and SPI. #3183\n+  ```java\n+  public class TTupleFactoryProvider extends ThriftProtocolFactoryProvider {\n+      @Override\n+      public Set<ThriftProtocolFactoryProvider.Entry> entries() {\n+          return ImmutableSet.of(new ThriftProtocolFactoryProvider.Entry(\n+                  SerializationFormat.of(\"ttuple\"), new TTupleProtocol.Factory()));\n+      }\n+  }\n+  ```\n+- You can now collect more detailed DNS metrics such as success or failure, query type, etc. #1887, #2935\n+- You can now customize the <type://HealthCheckService> when using Spring integration. #3144\n+  ```java\n+  @Bean\n+  public HealthCheckServiceConfigurator healthCheckServiceConfigurator() {\n+      return builder -> builder.updatable(true);\n+  }\n+  ```\n+- You can now use <type://RequestHeaders#acceptLanguage()> to choose language. #3177, #3179\n+## \ud83d\udcc8 Improvements\n+\n+- Various improvements for Doc service. #3149, #3150, #3167, #3188\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+- <type://HealthCheckedEndpointGroup#endpoints()> now returns healthy endpoints properly even when\n+  <type://EndpointGroup#orElse(EndpointGroup)> is used. #3181\n+- `ServletRequest.getProtocol()` now returns the proper value when using <type://TomcatService> and\n+  <type://JettyService>. #3194\n+- The route decorators are now evaluated in the reverse order they applied. #3160, #3166\n+- You now get the FORBIDDEN status if your service does not handle preflight requests regardless of\n+  route decorators. #3152\n+- A gRPC `ServerCall` is now closed exactly only once. #3153\n+- You no longer see `AnnotatedConnectException` when the <type://Endpoint> is created with an\n+  IPv6 scope ID. #3158, #3178\n+- Armeria server does not reject the request path whose first segment includes a colon anymore. #3154\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+- <type://CircuitBreakerClient#newPerHostAndMethodDecorator(BiFunction,CircuitBreakerRule)> is now deprecated.\n+  #31356\n+  - Use <type://CircuitBreakerClient#newDecorator(CircuitBreakerMapping,CircuitBreakerRule)> with the customized\n+    <type://CircuitBreakerMapping> using <type://CircuitBreakerMapping#builder()>.\n+- The response timeout and max total attempts setters in <type://RetryingClientBuilder> is now deprecated.\n+  #3128 #3145\n+  - The static factory methods that take those parameters in <type://RetryingClient> are now deprecated as well.\n+  - Use <type://RetryConfigMapping> and <type://RetryConfig>.\n+- <type://Route#apply(RoutingContext)?full> is deprecated. #3152\n+  - Use <type://Route#apply(RoutingContext,boolean)?full>.\n+- The constructor of <type://PrometheusExpositionService> is now deprecated. #3081\n+  - Use <type://PrometheusExpositionService#of(CollectorRegistry)>.\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- N/A\n+\n+## \u26d3 Dependencies\n+\n+- completalbe-futures 0.3.3 \u2192 0.3.4\n+- dropwizard-core 2.0.13 \u2192 2.0.16\n+- Fastutil 8.4.2 \u2192 8.4.3\n+- gRPC 1.33.0 \u2192 1.33.1\n+- grpc-kotlin-stub 0.2.0 \u2192 0.2.1\n+- io.dropwizard.metrics 4.1.13 \u2192 4.1.15\n+- Jackson 2.11.2 \u2192 2.12.0\n+- Jctools 3.1.0 \u2192 3.2.0\n+- javax.annotation-api 1.3.2\n+- Micrometer 1.5.5 \u2192 1.6.1\n+- Netty 4.1.53.Final \u2192 4.1.54.Final\n+- org.bouncycastle 1.66 \u2192 1.67\n+- Reactor 3.3.10.RELEASE \u2192 3.4.0\n+- Spring Boot 2.3.4.RELEASE \u2192 2.4.0\n+- Spring 5.2.9.RELEASE \u2192 5.3.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwNTkxMg==", "bodyText": "Spring Boot removed RELEASE from the artifact name since 2.4.0.\nhttps://search.maven.org/artifact/org.springframework.boot/spring-boot-starter-jdbc\nI agree that we don't need to write the detail.", "url": "https://github.com/line/armeria/pull/3207#discussion_r532405912", "createdAt": "2020-11-30T08:03:21Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n+  ```xml\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```\n+- You can now use the unsafe TLS cipher using <type://ClientFactoryBuilder#tlsAllowUnsafeCiphers(boolean)>.\n+  #3157, #3172\n+- You can now specify an arbitrary type for <type://@Header> and <type://@Param> if the\n+  type has one of following static methods or the constructor. #2574, #3143, #3164\n+  - `public static T of(String) { ... }`\n+  - `public static T valueOf(String) { ... }`\n+  - `public static T fromString(String) { ... }`\n+  - `public T(String) { ... } // constructor`\n+  ```java\n+  public class UserService {\n+\n+      @Get(\"/api\")\n+      public HttpResponse get(@Param User user) {\n+          ...\n+      }\n+\n+      private static class User {\n+          User(String userId) { ... } // This constructor is used to create User.\n+          ...\n+      }\n+  }\n+  ```\n+- You can now build an <type://HttpRequest> fluently. #3110\n+  ```java\n+  // Creates a POST HttpRequest whose URI is \"/foo?q=bar\"\n+  // with headers \"cookie: name=value\" and \"authorization: value\" and a JSON body.\n+  HttpRequest.builder()\n+             .post(\"/{resource}\")\n+             .pathParam(\"resource\", \"foo\")\n+             .queryParam(\"q\", \"bar\")\n+             .cookie(Cookie.of(\"name\", \"value\"))\n+             .header(\"authorization\", \"value\")\n+             .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\"));\n+  // You can also use WebClient.prepare().\n+  WebClient client = ...\n+  client.prepare()\n+        .post(\"/{resource}\")\n+        .pathParam(\"resource\", \"foo\")\n+        .queryParam(\"q\", \"bar\")\n+        .cookie(Cookie.of(\"name\", \"value\"))\n+        .header(\"authorization\", \"value\")\n+        .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\")\n+        .execute();\n+  ```\n+- You can now easily handle cookies by applying <type://CookieClient#newDecorator()>. #2637, #3118\n+- You can now use the custom Thrift protocol by using <type://ThriftProtocolFactoryProvider> and SPI. #3183\n+  ```java\n+  public class TTupleFactoryProvider extends ThriftProtocolFactoryProvider {\n+      @Override\n+      public Set<ThriftProtocolFactoryProvider.Entry> entries() {\n+          return ImmutableSet.of(new ThriftProtocolFactoryProvider.Entry(\n+                  SerializationFormat.of(\"ttuple\"), new TTupleProtocol.Factory()));\n+      }\n+  }\n+  ```\n+- You can now collect more detailed DNS metrics such as success or failure, query type, etc. #1887, #2935\n+- You can now customize the <type://HealthCheckService> when using Spring integration. #3144\n+  ```java\n+  @Bean\n+  public HealthCheckServiceConfigurator healthCheckServiceConfigurator() {\n+      return builder -> builder.updatable(true);\n+  }\n+  ```\n+- You can now use <type://RequestHeaders#acceptLanguage()> to choose language. #3177, #3179\n+## \ud83d\udcc8 Improvements\n+\n+- Various improvements for Doc service. #3149, #3150, #3167, #3188\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+- <type://HealthCheckedEndpointGroup#endpoints()> now returns healthy endpoints properly even when\n+  <type://EndpointGroup#orElse(EndpointGroup)> is used. #3181\n+- `ServletRequest.getProtocol()` now returns the proper value when using <type://TomcatService> and\n+  <type://JettyService>. #3194\n+- The route decorators are now evaluated in the reverse order they applied. #3160, #3166\n+- You now get the FORBIDDEN status if your service does not handle preflight requests regardless of\n+  route decorators. #3152\n+- A gRPC `ServerCall` is now closed exactly only once. #3153\n+- You no longer see `AnnotatedConnectException` when the <type://Endpoint> is created with an\n+  IPv6 scope ID. #3158, #3178\n+- Armeria server does not reject the request path whose first segment includes a colon anymore. #3154\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+- <type://CircuitBreakerClient#newPerHostAndMethodDecorator(BiFunction,CircuitBreakerRule)> is now deprecated.\n+  #31356\n+  - Use <type://CircuitBreakerClient#newDecorator(CircuitBreakerMapping,CircuitBreakerRule)> with the customized\n+    <type://CircuitBreakerMapping> using <type://CircuitBreakerMapping#builder()>.\n+- The response timeout and max total attempts setters in <type://RetryingClientBuilder> is now deprecated.\n+  #3128 #3145\n+  - The static factory methods that take those parameters in <type://RetryingClient> are now deprecated as well.\n+  - Use <type://RetryConfigMapping> and <type://RetryConfig>.\n+- <type://Route#apply(RoutingContext)?full> is deprecated. #3152\n+  - Use <type://Route#apply(RoutingContext,boolean)?full>.\n+- The constructor of <type://PrometheusExpositionService> is now deprecated. #3081\n+  - Use <type://PrometheusExpositionService#of(CollectorRegistry)>.\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- N/A\n+\n+## \u26d3 Dependencies\n+\n+- completalbe-futures 0.3.3 \u2192 0.3.4\n+- dropwizard-core 2.0.13 \u2192 2.0.16\n+- Fastutil 8.4.2 \u2192 8.4.3\n+- gRPC 1.33.0 \u2192 1.33.1\n+- grpc-kotlin-stub 0.2.0 \u2192 0.2.1\n+- io.dropwizard.metrics 4.1.13 \u2192 4.1.15\n+- Jackson 2.11.2 \u2192 2.12.0\n+- Jctools 3.1.0 \u2192 3.2.0\n+- javax.annotation-api 1.3.2\n+- Micrometer 1.5.5 \u2192 1.6.1\n+- Netty 4.1.53.Final \u2192 4.1.54.Final\n+- org.bouncycastle 1.66 \u2192 1.67\n+- Reactor 3.3.10.RELEASE \u2192 3.4.0\n+- Spring Boot 2.3.4.RELEASE \u2192 2.4.0\n+- Spring 5.2.9.RELEASE \u2192 5.3.1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwMjIwNA=="}, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwNzIyMg==", "bodyText": "By the way, we specified the Netty version from the artifact version.", "url": "https://github.com/line/armeria/pull/3207#discussion_r532407222", "createdAt": "2020-11-30T08:06:04Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n+  ```xml\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```\n+- You can now use the unsafe TLS cipher using <type://ClientFactoryBuilder#tlsAllowUnsafeCiphers(boolean)>.\n+  #3157, #3172\n+- You can now specify an arbitrary type for <type://@Header> and <type://@Param> if the\n+  type has one of following static methods or the constructor. #2574, #3143, #3164\n+  - `public static T of(String) { ... }`\n+  - `public static T valueOf(String) { ... }`\n+  - `public static T fromString(String) { ... }`\n+  - `public T(String) { ... } // constructor`\n+  ```java\n+  public class UserService {\n+\n+      @Get(\"/api\")\n+      public HttpResponse get(@Param User user) {\n+          ...\n+      }\n+\n+      private static class User {\n+          User(String userId) { ... } // This constructor is used to create User.\n+          ...\n+      }\n+  }\n+  ```\n+- You can now build an <type://HttpRequest> fluently. #3110\n+  ```java\n+  // Creates a POST HttpRequest whose URI is \"/foo?q=bar\"\n+  // with headers \"cookie: name=value\" and \"authorization: value\" and a JSON body.\n+  HttpRequest.builder()\n+             .post(\"/{resource}\")\n+             .pathParam(\"resource\", \"foo\")\n+             .queryParam(\"q\", \"bar\")\n+             .cookie(Cookie.of(\"name\", \"value\"))\n+             .header(\"authorization\", \"value\")\n+             .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\"));\n+  // You can also use WebClient.prepare().\n+  WebClient client = ...\n+  client.prepare()\n+        .post(\"/{resource}\")\n+        .pathParam(\"resource\", \"foo\")\n+        .queryParam(\"q\", \"bar\")\n+        .cookie(Cookie.of(\"name\", \"value\"))\n+        .header(\"authorization\", \"value\")\n+        .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\")\n+        .execute();\n+  ```\n+- You can now easily handle cookies by applying <type://CookieClient#newDecorator()>. #2637, #3118\n+- You can now use the custom Thrift protocol by using <type://ThriftProtocolFactoryProvider> and SPI. #3183\n+  ```java\n+  public class TTupleFactoryProvider extends ThriftProtocolFactoryProvider {\n+      @Override\n+      public Set<ThriftProtocolFactoryProvider.Entry> entries() {\n+          return ImmutableSet.of(new ThriftProtocolFactoryProvider.Entry(\n+                  SerializationFormat.of(\"ttuple\"), new TTupleProtocol.Factory()));\n+      }\n+  }\n+  ```\n+- You can now collect more detailed DNS metrics such as success or failure, query type, etc. #1887, #2935\n+- You can now customize the <type://HealthCheckService> when using Spring integration. #3144\n+  ```java\n+  @Bean\n+  public HealthCheckServiceConfigurator healthCheckServiceConfigurator() {\n+      return builder -> builder.updatable(true);\n+  }\n+  ```\n+- You can now use <type://RequestHeaders#acceptLanguage()> to choose language. #3177, #3179\n+## \ud83d\udcc8 Improvements\n+\n+- Various improvements for Doc service. #3149, #3150, #3167, #3188\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+- <type://HealthCheckedEndpointGroup#endpoints()> now returns healthy endpoints properly even when\n+  <type://EndpointGroup#orElse(EndpointGroup)> is used. #3181\n+- `ServletRequest.getProtocol()` now returns the proper value when using <type://TomcatService> and\n+  <type://JettyService>. #3194\n+- The route decorators are now evaluated in the reverse order they applied. #3160, #3166\n+- You now get the FORBIDDEN status if your service does not handle preflight requests regardless of\n+  route decorators. #3152\n+- A gRPC `ServerCall` is now closed exactly only once. #3153\n+- You no longer see `AnnotatedConnectException` when the <type://Endpoint> is created with an\n+  IPv6 scope ID. #3158, #3178\n+- Armeria server does not reject the request path whose first segment includes a colon anymore. #3154\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+- <type://CircuitBreakerClient#newPerHostAndMethodDecorator(BiFunction,CircuitBreakerRule)> is now deprecated.\n+  #31356\n+  - Use <type://CircuitBreakerClient#newDecorator(CircuitBreakerMapping,CircuitBreakerRule)> with the customized\n+    <type://CircuitBreakerMapping> using <type://CircuitBreakerMapping#builder()>.\n+- The response timeout and max total attempts setters in <type://RetryingClientBuilder> is now deprecated.\n+  #3128 #3145\n+  - The static factory methods that take those parameters in <type://RetryingClient> are now deprecated as well.\n+  - Use <type://RetryConfigMapping> and <type://RetryConfig>.\n+- <type://Route#apply(RoutingContext)?full> is deprecated. #3152\n+  - Use <type://Route#apply(RoutingContext,boolean)?full>.\n+- The constructor of <type://PrometheusExpositionService> is now deprecated. #3081\n+  - Use <type://PrometheusExpositionService#of(CollectorRegistry)>.\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- N/A\n+\n+## \u26d3 Dependencies\n+\n+- completalbe-futures 0.3.3 \u2192 0.3.4\n+- dropwizard-core 2.0.13 \u2192 2.0.16\n+- Fastutil 8.4.2 \u2192 8.4.3\n+- gRPC 1.33.0 \u2192 1.33.1\n+- grpc-kotlin-stub 0.2.0 \u2192 0.2.1\n+- io.dropwizard.metrics 4.1.13 \u2192 4.1.15\n+- Jackson 2.11.2 \u2192 2.12.0\n+- Jctools 3.1.0 \u2192 3.2.0\n+- javax.annotation-api 1.3.2\n+- Micrometer 1.5.5 \u2192 1.6.1\n+- Netty 4.1.53.Final \u2192 4.1.54.Final\n+- org.bouncycastle 1.66 \u2192 1.67\n+- Reactor 3.3.10.RELEASE \u2192 3.4.0\n+- Spring Boot 2.3.4.RELEASE \u2192 2.4.0\n+- Spring 5.2.9.RELEASE \u2192 5.3.1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwMjIwNA=="}, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ2ODc1NA==", "bodyText": "Can't we just use what they are using?", "url": "https://github.com/line/armeria/pull/3207#discussion_r532468754", "createdAt": "2020-11-30T09:52:24Z", "author": {"login": "minwoox"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n+  ```xml\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```\n+- You can now use the unsafe TLS cipher using <type://ClientFactoryBuilder#tlsAllowUnsafeCiphers(boolean)>.\n+  #3157, #3172\n+- You can now specify an arbitrary type for <type://@Header> and <type://@Param> if the\n+  type has one of following static methods or the constructor. #2574, #3143, #3164\n+  - `public static T of(String) { ... }`\n+  - `public static T valueOf(String) { ... }`\n+  - `public static T fromString(String) { ... }`\n+  - `public T(String) { ... } // constructor`\n+  ```java\n+  public class UserService {\n+\n+      @Get(\"/api\")\n+      public HttpResponse get(@Param User user) {\n+          ...\n+      }\n+\n+      private static class User {\n+          User(String userId) { ... } // This constructor is used to create User.\n+          ...\n+      }\n+  }\n+  ```\n+- You can now build an <type://HttpRequest> fluently. #3110\n+  ```java\n+  // Creates a POST HttpRequest whose URI is \"/foo?q=bar\"\n+  // with headers \"cookie: name=value\" and \"authorization: value\" and a JSON body.\n+  HttpRequest.builder()\n+             .post(\"/{resource}\")\n+             .pathParam(\"resource\", \"foo\")\n+             .queryParam(\"q\", \"bar\")\n+             .cookie(Cookie.of(\"name\", \"value\"))\n+             .header(\"authorization\", \"value\")\n+             .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\"));\n+  // You can also use WebClient.prepare().\n+  WebClient client = ...\n+  client.prepare()\n+        .post(\"/{resource}\")\n+        .pathParam(\"resource\", \"foo\")\n+        .queryParam(\"q\", \"bar\")\n+        .cookie(Cookie.of(\"name\", \"value\"))\n+        .header(\"authorization\", \"value\")\n+        .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\")\n+        .execute();\n+  ```\n+- You can now easily handle cookies by applying <type://CookieClient#newDecorator()>. #2637, #3118\n+- You can now use the custom Thrift protocol by using <type://ThriftProtocolFactoryProvider> and SPI. #3183\n+  ```java\n+  public class TTupleFactoryProvider extends ThriftProtocolFactoryProvider {\n+      @Override\n+      public Set<ThriftProtocolFactoryProvider.Entry> entries() {\n+          return ImmutableSet.of(new ThriftProtocolFactoryProvider.Entry(\n+                  SerializationFormat.of(\"ttuple\"), new TTupleProtocol.Factory()));\n+      }\n+  }\n+  ```\n+- You can now collect more detailed DNS metrics such as success or failure, query type, etc. #1887, #2935\n+- You can now customize the <type://HealthCheckService> when using Spring integration. #3144\n+  ```java\n+  @Bean\n+  public HealthCheckServiceConfigurator healthCheckServiceConfigurator() {\n+      return builder -> builder.updatable(true);\n+  }\n+  ```\n+- You can now use <type://RequestHeaders#acceptLanguage()> to choose language. #3177, #3179\n+## \ud83d\udcc8 Improvements\n+\n+- Various improvements for Doc service. #3149, #3150, #3167, #3188\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+- <type://HealthCheckedEndpointGroup#endpoints()> now returns healthy endpoints properly even when\n+  <type://EndpointGroup#orElse(EndpointGroup)> is used. #3181\n+- `ServletRequest.getProtocol()` now returns the proper value when using <type://TomcatService> and\n+  <type://JettyService>. #3194\n+- The route decorators are now evaluated in the reverse order they applied. #3160, #3166\n+- You now get the FORBIDDEN status if your service does not handle preflight requests regardless of\n+  route decorators. #3152\n+- A gRPC `ServerCall` is now closed exactly only once. #3153\n+- You no longer see `AnnotatedConnectException` when the <type://Endpoint> is created with an\n+  IPv6 scope ID. #3158, #3178\n+- Armeria server does not reject the request path whose first segment includes a colon anymore. #3154\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+- <type://CircuitBreakerClient#newPerHostAndMethodDecorator(BiFunction,CircuitBreakerRule)> is now deprecated.\n+  #31356\n+  - Use <type://CircuitBreakerClient#newDecorator(CircuitBreakerMapping,CircuitBreakerRule)> with the customized\n+    <type://CircuitBreakerMapping> using <type://CircuitBreakerMapping#builder()>.\n+- The response timeout and max total attempts setters in <type://RetryingClientBuilder> is now deprecated.\n+  #3128 #3145\n+  - The static factory methods that take those parameters in <type://RetryingClient> are now deprecated as well.\n+  - Use <type://RetryConfigMapping> and <type://RetryConfig>.\n+- <type://Route#apply(RoutingContext)?full> is deprecated. #3152\n+  - Use <type://Route#apply(RoutingContext,boolean)?full>.\n+- The constructor of <type://PrometheusExpositionService> is now deprecated. #3081\n+  - Use <type://PrometheusExpositionService#of(CollectorRegistry)>.\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- N/A\n+\n+## \u26d3 Dependencies\n+\n+- completalbe-futures 0.3.3 \u2192 0.3.4\n+- dropwizard-core 2.0.13 \u2192 2.0.16\n+- Fastutil 8.4.2 \u2192 8.4.3\n+- gRPC 1.33.0 \u2192 1.33.1\n+- grpc-kotlin-stub 0.2.0 \u2192 0.2.1\n+- io.dropwizard.metrics 4.1.13 \u2192 4.1.15\n+- Jackson 2.11.2 \u2192 2.12.0\n+- Jctools 3.1.0 \u2192 3.2.0\n+- javax.annotation-api 1.3.2\n+- Micrometer 1.5.5 \u2192 1.6.1\n+- Netty 4.1.53.Final \u2192 4.1.54.Final\n+- org.bouncycastle 1.66 \u2192 1.67\n+- Reactor 3.3.10.RELEASE \u2192 3.4.0\n+- Spring Boot 2.3.4.RELEASE \u2192 2.4.0\n+- Spring 5.2.9.RELEASE \u2192 5.3.1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwMjIwNA=="}, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ5MjI2MQ==", "bodyText": "I'm fine with either.", "url": "https://github.com/line/armeria/pull/3207#discussion_r532492261", "createdAt": "2020-11-30T10:28:54Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n+  ```xml\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```\n+- You can now use the unsafe TLS cipher using <type://ClientFactoryBuilder#tlsAllowUnsafeCiphers(boolean)>.\n+  #3157, #3172\n+- You can now specify an arbitrary type for <type://@Header> and <type://@Param> if the\n+  type has one of following static methods or the constructor. #2574, #3143, #3164\n+  - `public static T of(String) { ... }`\n+  - `public static T valueOf(String) { ... }`\n+  - `public static T fromString(String) { ... }`\n+  - `public T(String) { ... } // constructor`\n+  ```java\n+  public class UserService {\n+\n+      @Get(\"/api\")\n+      public HttpResponse get(@Param User user) {\n+          ...\n+      }\n+\n+      private static class User {\n+          User(String userId) { ... } // This constructor is used to create User.\n+          ...\n+      }\n+  }\n+  ```\n+- You can now build an <type://HttpRequest> fluently. #3110\n+  ```java\n+  // Creates a POST HttpRequest whose URI is \"/foo?q=bar\"\n+  // with headers \"cookie: name=value\" and \"authorization: value\" and a JSON body.\n+  HttpRequest.builder()\n+             .post(\"/{resource}\")\n+             .pathParam(\"resource\", \"foo\")\n+             .queryParam(\"q\", \"bar\")\n+             .cookie(Cookie.of(\"name\", \"value\"))\n+             .header(\"authorization\", \"value\")\n+             .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\"));\n+  // You can also use WebClient.prepare().\n+  WebClient client = ...\n+  client.prepare()\n+        .post(\"/{resource}\")\n+        .pathParam(\"resource\", \"foo\")\n+        .queryParam(\"q\", \"bar\")\n+        .cookie(Cookie.of(\"name\", \"value\"))\n+        .header(\"authorization\", \"value\")\n+        .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\")\n+        .execute();\n+  ```\n+- You can now easily handle cookies by applying <type://CookieClient#newDecorator()>. #2637, #3118\n+- You can now use the custom Thrift protocol by using <type://ThriftProtocolFactoryProvider> and SPI. #3183\n+  ```java\n+  public class TTupleFactoryProvider extends ThriftProtocolFactoryProvider {\n+      @Override\n+      public Set<ThriftProtocolFactoryProvider.Entry> entries() {\n+          return ImmutableSet.of(new ThriftProtocolFactoryProvider.Entry(\n+                  SerializationFormat.of(\"ttuple\"), new TTupleProtocol.Factory()));\n+      }\n+  }\n+  ```\n+- You can now collect more detailed DNS metrics such as success or failure, query type, etc. #1887, #2935\n+- You can now customize the <type://HealthCheckService> when using Spring integration. #3144\n+  ```java\n+  @Bean\n+  public HealthCheckServiceConfigurator healthCheckServiceConfigurator() {\n+      return builder -> builder.updatable(true);\n+  }\n+  ```\n+- You can now use <type://RequestHeaders#acceptLanguage()> to choose language. #3177, #3179\n+## \ud83d\udcc8 Improvements\n+\n+- Various improvements for Doc service. #3149, #3150, #3167, #3188\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+- <type://HealthCheckedEndpointGroup#endpoints()> now returns healthy endpoints properly even when\n+  <type://EndpointGroup#orElse(EndpointGroup)> is used. #3181\n+- `ServletRequest.getProtocol()` now returns the proper value when using <type://TomcatService> and\n+  <type://JettyService>. #3194\n+- The route decorators are now evaluated in the reverse order they applied. #3160, #3166\n+- You now get the FORBIDDEN status if your service does not handle preflight requests regardless of\n+  route decorators. #3152\n+- A gRPC `ServerCall` is now closed exactly only once. #3153\n+- You no longer see `AnnotatedConnectException` when the <type://Endpoint> is created with an\n+  IPv6 scope ID. #3158, #3178\n+- Armeria server does not reject the request path whose first segment includes a colon anymore. #3154\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+- <type://CircuitBreakerClient#newPerHostAndMethodDecorator(BiFunction,CircuitBreakerRule)> is now deprecated.\n+  #31356\n+  - Use <type://CircuitBreakerClient#newDecorator(CircuitBreakerMapping,CircuitBreakerRule)> with the customized\n+    <type://CircuitBreakerMapping> using <type://CircuitBreakerMapping#builder()>.\n+- The response timeout and max total attempts setters in <type://RetryingClientBuilder> is now deprecated.\n+  #3128 #3145\n+  - The static factory methods that take those parameters in <type://RetryingClient> are now deprecated as well.\n+  - Use <type://RetryConfigMapping> and <type://RetryConfig>.\n+- <type://Route#apply(RoutingContext)?full> is deprecated. #3152\n+  - Use <type://Route#apply(RoutingContext,boolean)?full>.\n+- The constructor of <type://PrometheusExpositionService> is now deprecated. #3081\n+  - Use <type://PrometheusExpositionService#of(CollectorRegistry)>.\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- N/A\n+\n+## \u26d3 Dependencies\n+\n+- completalbe-futures 0.3.3 \u2192 0.3.4\n+- dropwizard-core 2.0.13 \u2192 2.0.16\n+- Fastutil 8.4.2 \u2192 8.4.3\n+- gRPC 1.33.0 \u2192 1.33.1\n+- grpc-kotlin-stub 0.2.0 \u2192 0.2.1\n+- io.dropwizard.metrics 4.1.13 \u2192 4.1.15\n+- Jackson 2.11.2 \u2192 2.12.0\n+- Jctools 3.1.0 \u2192 3.2.0\n+- javax.annotation-api 1.3.2\n+- Micrometer 1.5.5 \u2192 1.6.1\n+- Netty 4.1.53.Final \u2192 4.1.54.Final\n+- org.bouncycastle 1.66 \u2192 1.67\n+- Reactor 3.3.10.RELEASE \u2192 3.4.0\n+- Spring Boot 2.3.4.RELEASE \u2192 2.4.0\n+- Spring 5.2.9.RELEASE \u2192 5.3.1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwMjIwNA=="}, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDA1MTQ5OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1NTozM1rOH7vQSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1NTozM1rOH7vQSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwMjI1MA==", "bodyText": "Tomcat", "url": "https://github.com/line/armeria/pull/3207#discussion_r532402250", "createdAt": "2020-11-30T07:55:33Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n+  ```xml\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```\n+- You can now use the unsafe TLS cipher using <type://ClientFactoryBuilder#tlsAllowUnsafeCiphers(boolean)>.\n+  #3157, #3172\n+- You can now specify an arbitrary type for <type://@Header> and <type://@Param> if the\n+  type has one of following static methods or the constructor. #2574, #3143, #3164\n+  - `public static T of(String) { ... }`\n+  - `public static T valueOf(String) { ... }`\n+  - `public static T fromString(String) { ... }`\n+  - `public T(String) { ... } // constructor`\n+  ```java\n+  public class UserService {\n+\n+      @Get(\"/api\")\n+      public HttpResponse get(@Param User user) {\n+          ...\n+      }\n+\n+      private static class User {\n+          User(String userId) { ... } // This constructor is used to create User.\n+          ...\n+      }\n+  }\n+  ```\n+- You can now build an <type://HttpRequest> fluently. #3110\n+  ```java\n+  // Creates a POST HttpRequest whose URI is \"/foo?q=bar\"\n+  // with headers \"cookie: name=value\" and \"authorization: value\" and a JSON body.\n+  HttpRequest.builder()\n+             .post(\"/{resource}\")\n+             .pathParam(\"resource\", \"foo\")\n+             .queryParam(\"q\", \"bar\")\n+             .cookie(Cookie.of(\"name\", \"value\"))\n+             .header(\"authorization\", \"value\")\n+             .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\"));\n+  // You can also use WebClient.prepare().\n+  WebClient client = ...\n+  client.prepare()\n+        .post(\"/{resource}\")\n+        .pathParam(\"resource\", \"foo\")\n+        .queryParam(\"q\", \"bar\")\n+        .cookie(Cookie.of(\"name\", \"value\"))\n+        .header(\"authorization\", \"value\")\n+        .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\")\n+        .execute();\n+  ```\n+- You can now easily handle cookies by applying <type://CookieClient#newDecorator()>. #2637, #3118\n+- You can now use the custom Thrift protocol by using <type://ThriftProtocolFactoryProvider> and SPI. #3183\n+  ```java\n+  public class TTupleFactoryProvider extends ThriftProtocolFactoryProvider {\n+      @Override\n+      public Set<ThriftProtocolFactoryProvider.Entry> entries() {\n+          return ImmutableSet.of(new ThriftProtocolFactoryProvider.Entry(\n+                  SerializationFormat.of(\"ttuple\"), new TTupleProtocol.Factory()));\n+      }\n+  }\n+  ```\n+- You can now collect more detailed DNS metrics such as success or failure, query type, etc. #1887, #2935\n+- You can now customize the <type://HealthCheckService> when using Spring integration. #3144\n+  ```java\n+  @Bean\n+  public HealthCheckServiceConfigurator healthCheckServiceConfigurator() {\n+      return builder -> builder.updatable(true);\n+  }\n+  ```\n+- You can now use <type://RequestHeaders#acceptLanguage()> to choose language. #3177, #3179\n+## \ud83d\udcc8 Improvements\n+\n+- Various improvements for Doc service. #3149, #3150, #3167, #3188\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+- <type://HealthCheckedEndpointGroup#endpoints()> now returns healthy endpoints properly even when\n+  <type://EndpointGroup#orElse(EndpointGroup)> is used. #3181\n+- `ServletRequest.getProtocol()` now returns the proper value when using <type://TomcatService> and\n+  <type://JettyService>. #3194\n+- The route decorators are now evaluated in the reverse order they applied. #3160, #3166\n+- You now get the FORBIDDEN status if your service does not handle preflight requests regardless of\n+  route decorators. #3152\n+- A gRPC `ServerCall` is now closed exactly only once. #3153\n+- You no longer see `AnnotatedConnectException` when the <type://Endpoint> is created with an\n+  IPv6 scope ID. #3158, #3178\n+- Armeria server does not reject the request path whose first segment includes a colon anymore. #3154\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+- <type://CircuitBreakerClient#newPerHostAndMethodDecorator(BiFunction,CircuitBreakerRule)> is now deprecated.\n+  #31356\n+  - Use <type://CircuitBreakerClient#newDecorator(CircuitBreakerMapping,CircuitBreakerRule)> with the customized\n+    <type://CircuitBreakerMapping> using <type://CircuitBreakerMapping#builder()>.\n+- The response timeout and max total attempts setters in <type://RetryingClientBuilder> is now deprecated.\n+  #3128 #3145\n+  - The static factory methods that take those parameters in <type://RetryingClient> are now deprecated as well.\n+  - Use <type://RetryConfigMapping> and <type://RetryConfig>.\n+- <type://Route#apply(RoutingContext)?full> is deprecated. #3152\n+  - Use <type://Route#apply(RoutingContext,boolean)?full>.\n+- The constructor of <type://PrometheusExpositionService> is now deprecated. #3081\n+  - Use <type://PrometheusExpositionService#of(CollectorRegistry)>.\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- N/A\n+\n+## \u26d3 Dependencies\n+\n+- completalbe-futures 0.3.3 \u2192 0.3.4\n+- dropwizard-core 2.0.13 \u2192 2.0.16\n+- Fastutil 8.4.2 \u2192 8.4.3\n+- gRPC 1.33.0 \u2192 1.33.1\n+- grpc-kotlin-stub 0.2.0 \u2192 0.2.1\n+- io.dropwizard.metrics 4.1.13 \u2192 4.1.15\n+- Jackson 2.11.2 \u2192 2.12.0\n+- Jctools 3.1.0 \u2192 3.2.0\n+- javax.annotation-api 1.3.2\n+- Micrometer 1.5.5 \u2192 1.6.1\n+- Netty 4.1.53.Final \u2192 4.1.54.Final\n+- org.bouncycastle 1.66 \u2192 1.67\n+- Reactor 3.3.10.RELEASE \u2192 3.4.0\n+- Spring Boot 2.3.4.RELEASE \u2192 2.4.0\n+- Spring 5.2.9.RELEASE \u2192 5.3.1\n+- tomcat-embed-core 9.0.39 \u2192 9.0.40", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDA1Mzk3OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1NjoxNVrOH7vRng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1NjoxNVrOH7vRng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwMjU5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n          \n          \n            \n            - You can now specify a prefix for MDC keys using the `<prefix>` element. #3086, #3112", "url": "https://github.com/line/armeria/pull/3207#discussion_r532402590", "createdAt": "2020-11-30T07:56:15Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDA1Njk0OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1NzoxMVrOH7vTaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1NzoxMVrOH7vTaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwMzA0OQ==", "bodyText": "Isn't it better to write a realistic example?", "url": "https://github.com/line/armeria/pull/3207#discussion_r532403049", "createdAt": "2020-11-30T07:57:11Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n+  ```xml\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDA2MzE3OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1OToxOVrOH7vXGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1OToxOVrOH7vXGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwMzk5Mw==", "bodyText": "Add a blank line?", "url": "https://github.com/line/armeria/pull/3207#discussion_r532403993", "createdAt": "2020-11-30T07:59:19Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path\n+                                                       .perHost()\n+                                                       .build(factory)\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+- You can now specify the Caffeine spec for the DNS resolver. #2970, #3007\n+- You can now specify a prefix fo MDC keys using the `<prefix>` element. #3086, #3112\n+  ```xml\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```\n+- You can now use the unsafe TLS cipher using <type://ClientFactoryBuilder#tlsAllowUnsafeCiphers(boolean)>.\n+  #3157, #3172\n+- You can now specify an arbitrary type for <type://@Header> and <type://@Param> if the\n+  type has one of following static methods or the constructor. #2574, #3143, #3164\n+  - `public static T of(String) { ... }`\n+  - `public static T valueOf(String) { ... }`\n+  - `public static T fromString(String) { ... }`\n+  - `public T(String) { ... } // constructor`\n+  ```java\n+  public class UserService {\n+\n+      @Get(\"/api\")\n+      public HttpResponse get(@Param User user) {\n+          ...\n+      }\n+\n+      private static class User {\n+          User(String userId) { ... } // This constructor is used to create User.\n+          ...\n+      }\n+  }\n+  ```\n+- You can now build an <type://HttpRequest> fluently. #3110\n+  ```java\n+  // Creates a POST HttpRequest whose URI is \"/foo?q=bar\"\n+  // with headers \"cookie: name=value\" and \"authorization: value\" and a JSON body.\n+  HttpRequest.builder()\n+             .post(\"/{resource}\")\n+             .pathParam(\"resource\", \"foo\")\n+             .queryParam(\"q\", \"bar\")\n+             .cookie(Cookie.of(\"name\", \"value\"))\n+             .header(\"authorization\", \"value\")\n+             .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\"));\n+  // You can also use WebClient.prepare().\n+  WebClient client = ...\n+  client.prepare()\n+        .post(\"/{resource}\")\n+        .pathParam(\"resource\", \"foo\")\n+        .queryParam(\"q\", \"bar\")\n+        .cookie(Cookie.of(\"name\", \"value\"))\n+        .header(\"authorization\", \"value\")\n+        .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\")\n+        .execute();\n+  ```\n+- You can now easily handle cookies by applying <type://CookieClient#newDecorator()>. #2637, #3118\n+- You can now use the custom Thrift protocol by using <type://ThriftProtocolFactoryProvider> and SPI. #3183\n+  ```java\n+  public class TTupleFactoryProvider extends ThriftProtocolFactoryProvider {\n+      @Override\n+      public Set<ThriftProtocolFactoryProvider.Entry> entries() {\n+          return ImmutableSet.of(new ThriftProtocolFactoryProvider.Entry(\n+                  SerializationFormat.of(\"ttuple\"), new TTupleProtocol.Factory()));\n+      }\n+  }\n+  ```\n+- You can now collect more detailed DNS metrics such as success or failure, query type, etc. #1887, #2935\n+- You can now customize the <type://HealthCheckService> when using Spring integration. #3144\n+  ```java\n+  @Bean\n+  public HealthCheckServiceConfigurator healthCheckServiceConfigurator() {\n+      return builder -> builder.updatable(true);\n+  }\n+  ```\n+- You can now use <type://RequestHeaders#acceptLanguage()> to choose language. #3177, #3179\n+## \ud83d\udcc8 Improvements", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDE0Nzk3OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwODoyNToxNFrOH7wI-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwODoyNToxNFrOH7wI-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQxNjc2MA==", "bodyText": "nit: The right comment seems to make a horizontal scroll", "url": "https://github.com/line/armeria/pull/3207#discussion_r532416760", "createdAt": "2020-11-30T08:25:14Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,231 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - This is the early stage of development so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are now not collected by default. #3061, #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    TransientServiceBuilder.transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                                    TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                                    TransientServiceOption.WITH_ACCESS_LOGGING)\n+    ```\n+- You can now use Protobuf's `Message` and ScalaPB's `GeneratedMessage` as a request/response object in\n+  annotated service. #3088 #3124, #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = new HttpDeframer<>(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath() // per the combination of host and path", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7ce97643949b780c75ca33319ff29376cf9f0e"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDk3NTgyOnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMTo1NTo0MlrOH732EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMTo1NTo0MlrOH732EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU0Mjk5Mg==", "bodyText": "nit: Markdown syntax? []() \ud83d\ude09", "url": "https://github.com/line/armeria/pull/3207#discussion_r532542992", "createdAt": "2020-11-30T11:55:42Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,295 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - Netty's `io_uring` transport is currently experimental, so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are not collected anymore by default. #3061 #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    HealthCheckService.builder()\n+                      .transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                               TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                               TransientServiceOption.WITH_ACCESS_LOGGING)\n+                      .build();\n+    ```\n+  - Currently, <type://HealthCheckService> and <type://PrometheusExpositionService> are\n+    <typeplural://TransientService>.\n+- You can now use Protobuf's `Message` and <a href=\"https://github.com/scalapb/ScalaPB\">ScalaPB's</a>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82c6c364cee70f1dc485cba842aaf290792105ef"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDk4NTU4OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMTo1ODozM1rOH737_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMTo1ODozM1rOH737_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU0NDUxMQ==", "bodyText": "Oops... Remove to JSON? \ud83d\ude05", "url": "https://github.com/line/armeria/pull/3207#discussion_r532544511", "createdAt": "2020-11-30T11:58:33Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,295 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - Netty's `io_uring` transport is currently experimental, so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are not collected anymore by default. #3061 #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    HealthCheckService.builder()\n+                      .transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                               TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                               TransientServiceOption.WITH_ACCESS_LOGGING)\n+                      .build();\n+    ```\n+  - Currently, <type://HealthCheckService> and <type://PrometheusExpositionService> are\n+    <typeplural://TransientService>.\n+- You can now use Protobuf's `Message` and <a href=\"https://github.com/scalapb/ScalaPB\">ScalaPB's</a>\n+  `GeneratedMessage` as a request/response object in an annotated service. #3088 #3124 #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in an annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = HttpDeframer.of(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  - See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  // CircuitBreaker is applied per the combination of host and path.\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath()\n+                                                       .perHost()\n+                                                       .build(factory);\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+  ```java\n+  HttpResponse response = ...\n+  SplitHttpResponse splitHttpResponse = response.split();\n+  CompletableFuture<ResponseHeaders> headersFuture = splitHttpResponse.headers();\n+  StreamMessage<HttpData> bodyStream = splitHttpResponse.body();\n+\n+  headersFuture.thenApply(headers -> {\n+      if (headers.contentType() == MediaType.JSON_SEQ) {\n+          // Subscribe to a stream of HttpData to JSON", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82c6c364cee70f1dc485cba842aaf290792105ef"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDk5MDkyOnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMTo1OTo1NlrOH73_KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMjoyMDo1M1rOH74sJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU0NTMyMA==", "bodyText": "Now we can remove this?", "url": "https://github.com/line/armeria/pull/3207#discussion_r532545320", "createdAt": "2020-11-30T11:59:56Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,295 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - Netty's `io_uring` transport is currently experimental, so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are not collected anymore by default. #3061 #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    HealthCheckService.builder()\n+                      .transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                               TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                               TransientServiceOption.WITH_ACCESS_LOGGING)\n+                      .build();\n+    ```\n+  - Currently, <type://HealthCheckService> and <type://PrometheusExpositionService> are\n+    <typeplural://TransientService>.\n+- You can now use Protobuf's `Message` and <a href=\"https://github.com/scalapb/ScalaPB\">ScalaPB's</a>\n+  `GeneratedMessage` as a request/response object in an annotated service. #3088 #3124 #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in an annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = HttpDeframer.of(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  - See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  // CircuitBreaker is applied per the combination of host and path.\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath()\n+                                                       .perHost()\n+                                                       .build(factory);\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+  ```java\n+  HttpResponse response = ...\n+  SplitHttpResponse splitHttpResponse = response.split();\n+  CompletableFuture<ResponseHeaders> headersFuture = splitHttpResponse.headers();\n+  StreamMessage<HttpData> bodyStream = splitHttpResponse.body();\n+\n+  headersFuture.thenApply(headers -> {\n+      if (headers.contentType() == MediaType.JSON_SEQ) {\n+          // Subscribe to a stream of HttpData to JSON\n+          Flux.from(bodyStream)\n+              .map(httpData -> {\n+                  // Convert HttpData to your domain object\n+              });\n+              ...\n+      }\n+  });\n+  ```\n+- You can now specify the Caffeine spec for the DNS resolver cache. #2970 #3007\n+- You can now specify a prefix for MDC keys using the `<prefix>` element. #3086 #3112\n+  ```xml\n+  <configuration>\n+    ...\n+    <appender name=\"RCEA\" class=\"com.linecorp.armeria.common.logback.RequestContextExportingAppender\">\n+      ...\n+      <!-- set the prefix of exports which is not wrapped with the <exportGroup> element -->\n+      <prefix>armeria.</prefix>\n+      <export>remote.id</export>\n+      <export>req.headers.user-agent</export>\n+      ...\n+      <exportGroup>\n+        <!-- set the prefix of exports in this <exportGroup> -->\n+        <prefix>some_prefix.</prefix>\n+        <export>some_value=attr:com.example.AttrKeys#SOME_KEY</export>\n+        ...\n+      </exportGroup>\n+      <exportGroup>\n+        <!-- if <prefix> is not defined, no prefix is added to exports -->\n+        <export>tracking_id=attr:com.example.AttrKeys#TRACKING_ID_KEY</export>\n+        ...\n+      </exportGroup>\n+    </appender>\n+    ...\n+  </configuration>\n+\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82c6c364cee70f1dc485cba842aaf290792105ef"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU1NjgzNg==", "bodyText": "\ud83d\ude31", "url": "https://github.com/line/armeria/pull/3207#discussion_r532556836", "createdAt": "2020-11-30T12:20:53Z", "author": {"login": "minwoox"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,295 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - Netty's `io_uring` transport is currently experimental, so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are not collected anymore by default. #3061 #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    HealthCheckService.builder()\n+                      .transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                               TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                               TransientServiceOption.WITH_ACCESS_LOGGING)\n+                      .build();\n+    ```\n+  - Currently, <type://HealthCheckService> and <type://PrometheusExpositionService> are\n+    <typeplural://TransientService>.\n+- You can now use Protobuf's `Message` and <a href=\"https://github.com/scalapb/ScalaPB\">ScalaPB's</a>\n+  `GeneratedMessage` as a request/response object in an annotated service. #3088 #3124 #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in an annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = HttpDeframer.of(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  - See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  // CircuitBreaker is applied per the combination of host and path.\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath()\n+                                                       .perHost()\n+                                                       .build(factory);\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+  ```java\n+  HttpResponse response = ...\n+  SplitHttpResponse splitHttpResponse = response.split();\n+  CompletableFuture<ResponseHeaders> headersFuture = splitHttpResponse.headers();\n+  StreamMessage<HttpData> bodyStream = splitHttpResponse.body();\n+\n+  headersFuture.thenApply(headers -> {\n+      if (headers.contentType() == MediaType.JSON_SEQ) {\n+          // Subscribe to a stream of HttpData to JSON\n+          Flux.from(bodyStream)\n+              .map(httpData -> {\n+                  // Convert HttpData to your domain object\n+              });\n+              ...\n+      }\n+  });\n+  ```\n+- You can now specify the Caffeine spec for the DNS resolver cache. #2970 #3007\n+- You can now specify a prefix for MDC keys using the `<prefix>` element. #3086 #3112\n+  ```xml\n+  <configuration>\n+    ...\n+    <appender name=\"RCEA\" class=\"com.linecorp.armeria.common.logback.RequestContextExportingAppender\">\n+      ...\n+      <!-- set the prefix of exports which is not wrapped with the <exportGroup> element -->\n+      <prefix>armeria.</prefix>\n+      <export>remote.id</export>\n+      <export>req.headers.user-agent</export>\n+      ...\n+      <exportGroup>\n+        <!-- set the prefix of exports in this <exportGroup> -->\n+        <prefix>some_prefix.</prefix>\n+        <export>some_value=attr:com.example.AttrKeys#SOME_KEY</export>\n+        ...\n+      </exportGroup>\n+      <exportGroup>\n+        <!-- if <prefix> is not defined, no prefix is added to exports -->\n+        <export>tracking_id=attr:com.example.AttrKeys#TRACKING_ID_KEY</export>\n+        ...\n+      </exportGroup>\n+    </appender>\n+    ...\n+  </configuration>\n+\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU0NTMyMA=="}, "originalCommit": {"oid": "82c6c364cee70f1dc485cba842aaf290792105ef"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTAwNzMxOnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMjowNDozM1rOH74JEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMjowNDozM1rOH74JEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU0Nzg1Nw==", "bodyText": "nit: use Markdown syntax?", "url": "https://github.com/line/armeria/pull/3207#discussion_r532547857", "createdAt": "2020-11-30T12:04:33Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,295 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82c6c364cee70f1dc485cba842aaf290792105ef"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTA0ODIwOnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.3.0.mdx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMjoxNTo0OVrOH74heg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMjoyMTo1MFrOH74uGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU1NDEwNg==", "bodyText": "is -> are", "url": "https://github.com/line/armeria/pull/3207#discussion_r532554106", "createdAt": "2020-11-30T12:15:49Z", "author": {"login": "KarboniteKream"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,295 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - Netty's `io_uring` transport is currently experimental, so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are not collected anymore by default. #3061 #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    HealthCheckService.builder()\n+                      .transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                               TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                               TransientServiceOption.WITH_ACCESS_LOGGING)\n+                      .build();\n+    ```\n+  - Currently, <type://HealthCheckService> and <type://PrometheusExpositionService> are\n+    <typeplural://TransientService>.\n+- You can now use Protobuf's `Message` and <a href=\"https://github.com/scalapb/ScalaPB\">ScalaPB's</a>\n+  `GeneratedMessage` as a request/response object in an annotated service. #3088 #3124 #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in an annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = HttpDeframer.of(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  - See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  // CircuitBreaker is applied per the combination of host and path.\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath()\n+                                                       .perHost()\n+                                                       .build(factory);\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+  ```java\n+  HttpResponse response = ...\n+  SplitHttpResponse splitHttpResponse = response.split();\n+  CompletableFuture<ResponseHeaders> headersFuture = splitHttpResponse.headers();\n+  StreamMessage<HttpData> bodyStream = splitHttpResponse.body();\n+\n+  headersFuture.thenApply(headers -> {\n+      if (headers.contentType() == MediaType.JSON_SEQ) {\n+          // Subscribe to a stream of HttpData to JSON\n+          Flux.from(bodyStream)\n+              .map(httpData -> {\n+                  // Convert HttpData to your domain object\n+              });\n+              ...\n+      }\n+  });\n+  ```\n+- You can now specify the Caffeine spec for the DNS resolver cache. #2970 #3007\n+- You can now specify a prefix for MDC keys using the `<prefix>` element. #3086 #3112\n+  ```xml\n+  <configuration>\n+    ...\n+    <appender name=\"RCEA\" class=\"com.linecorp.armeria.common.logback.RequestContextExportingAppender\">\n+      ...\n+      <!-- set the prefix of exports which is not wrapped with the <exportGroup> element -->\n+      <prefix>armeria.</prefix>\n+      <export>remote.id</export>\n+      <export>req.headers.user-agent</export>\n+      ...\n+      <exportGroup>\n+        <!-- set the prefix of exports in this <exportGroup> -->\n+        <prefix>some_prefix.</prefix>\n+        <export>some_value=attr:com.example.AttrKeys#SOME_KEY</export>\n+        ...\n+      </exportGroup>\n+      <exportGroup>\n+        <!-- if <prefix> is not defined, no prefix is added to exports -->\n+        <export>tracking_id=attr:com.example.AttrKeys#TRACKING_ID_KEY</export>\n+        ...\n+      </exportGroup>\n+    </appender>\n+    ...\n+  </configuration>\n+\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```\n+- You can now use the unsafe TLS cipher using <type://ClientFactoryBuilder#tlsAllowUnsafeCiphers(boolean)>.\n+  #3157 #3172\n+- You can now specify an arbitrary type for <type://@Header> and <type://@Param> if the\n+  type has one of following static methods or the constructor. #2574 #3143 #3164\n+  - `public static T of(String) { ... }`\n+  - `public static T valueOf(String) { ... }`\n+  - `public static T fromString(String) { ... }`\n+  - `public T(String) { ... } // constructor`\n+  ```java\n+  public class UserService {\n+\n+      @Get(\"/api\")\n+      public HttpResponse get(@Param User user) {\n+          ...\n+      }\n+\n+      private static class User {\n+          User(String userId) { ... } // This constructor is used to create User.\n+          ...\n+      }\n+  }\n+  ```\n+- You can now build and execute an <type://HttpRequest> fluently. #3110\n+  ```java\n+  // Creates a POST HttpRequest whose URI is \"/foo?q=bar\"\n+  // with headers \"cookie: name=value\" and \"authorization: value\" and a JSON body.\n+  HttpRequest.builder()\n+             .post(\"/{resource}\")\n+             .pathParam(\"resource\", \"foo\")\n+             .queryParam(\"q\", \"bar\")\n+             .cookie(Cookie.of(\"name\", \"value\"))\n+             .header(\"authorization\", \"value\")\n+             .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\"));\n+  // You can also use WebClient.prepare().\n+  WebClient client = ...\n+  client.prepare()\n+        .post(\"/{resource}\")\n+        .pathParam(\"resource\", \"foo\")\n+        .queryParam(\"q\", \"bar\")\n+        .cookie(Cookie.of(\"name\", \"value\"))\n+        .header(\"authorization\", \"value\")\n+        .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\")\n+        .execute();\n+  ```\n+- You can now easily handle cookies by applying <type://CookieClient#newDecorator()>. #2637 #3118\n+  ```java\n+  WebClient client = WebClient.builder()\n+                              .factory(factory)\n+                              .decorator(CookieClient.newDecorator())\n+                              .build();\n+  client.get(...); // The cookies that are received from the origin server\n+                   // are added to the request headers.\n+  ```\n+- You can now use the custom Thrift protocol by using <type://ThriftProtocolFactoryProvider> and SPI. #3183\n+  ```java\n+  public class TTupleFactoryProvider extends ThriftProtocolFactoryProvider {\n+      @Override\n+      public Set<ThriftProtocolFactoryProvider.Entry> entries() {\n+          return ImmutableSet.of(new ThriftProtocolFactoryProvider.Entry(\n+                  SerializationFormat.of(\"ttuple\"), new TTupleProtocol.Factory()));\n+      }\n+  }\n+  ```\n+- You can now collect more detailed DNS metrics. #1887 #2935\n+  - `armeria.client.dns.queries#count{...,result=success}`\n+  - `armeria.client.dns.queries#count{...,result=failure}`\n+  - `armeria.client.dns.queries.written#count{...}`\n+  - `armeria.client.dns.queries.cancelled#count{...}`\n+  - `armeria.client.dns.queries.redirected#count{...}`\n+  - `armeria.client.dns.queries.cnamed#count{...}`\n+  - `armeria.client.dns.queries.noanswer#count{...}`\n+- You can now customize the <type://HealthCheckService> when using Spring integration. #3144\n+  ```java\n+  @Bean\n+  public HealthCheckServiceConfigurator healthCheckServiceConfigurator() {\n+      return builder -> builder.updatable(true);\n+  }\n+  ```\n+- You can now use <type://RequestHeaders#acceptLanguage()> to choose language. #3177 #3179\n+\n+## \ud83d\udcc8 Improvements\n+\n+- Various improvements for <type://DocService>. #3149 #3150 #3167 #3188\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- <type://HealthCheckedEndpointGroup#endpoints()> now returns healthy endpoints properly even when\n+  <type://EndpointGroup#orElse(EndpointGroup)> is used. #3181\n+- `ServletRequest.getProtocol()` now returns the proper value when using <type://TomcatService> and\n+  <type://JettyService>. #3194\n+- The route decorators are now evaluated in the reverse order they applied. #3160 #3166\n+- You now get the FORBIDDEN status if your service does not handle preflight requests regardless of\n+  route decorators. #3152\n+- A gRPC `ServerCall` is now closed exactly only once. #3153\n+- You no longer see `AnnotatedConnectException` when the <type://Endpoint> is created with an\n+  IPv6 scope ID. #3158 #3178\n+- Armeria server does not reject the request path whose first segment includes a colon anymore. #3154\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+\n+- <type://CircuitBreakerClient#newPerHostAndMethodDecorator(BiFunction,CircuitBreakerRule)> is now deprecated.\n+  #31356\n+  - Use <type://CircuitBreakerClient#newDecorator(CircuitBreakerMapping,CircuitBreakerRule)> with the customized\n+    <type://CircuitBreakerMapping> using <type://CircuitBreakerMapping#builder()>.\n+- The response timeout and max total attempts setters in <type://RetryingClientBuilder> is now deprecated.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82c6c364cee70f1dc485cba842aaf290792105ef"}, "originalPosition": 237}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU1NzMzNw==", "bodyText": "Thanks, fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/3207#discussion_r532557337", "createdAt": "2020-11-30T12:21:50Z", "author": {"login": "minwoox"}, "path": "site/src/pages/release-notes/1.3.0.mdx", "diffHunk": "@@ -0,0 +1,295 @@\n+---\n+date: 2020-11-30\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now use <a href=\"https://unixism.net/loti/what_is_io_uring.html\">io_uring</a> for efficient I/O\n+  processing in Linux. #3182\n+  - Specify the `-Dcom.linecorp.armeria.transportType=io_uring` JVM option to enable it.\n+  - Netty's `io_uring` transport is currently experimental, so you should be careful using the feature.\n+- The metrics of requests to a <type://TransientService> are not collected anymore by default. #3061 #3081\n+  - Access logs and service logs are not recorded as well.\n+  - You should use <type://TransientServiceOption> to enable them.\n+    ```java\n+    HealthCheckService.builder()\n+                      .transientServiceOptions(TransientServiceOption.WITH_METRIC_COLLECTION,\n+                                               TransientServiceOption.WITH_SERVICE_LOGGING,\n+                                               TransientServiceOption.WITH_ACCESS_LOGGING)\n+                      .build();\n+    ```\n+  - Currently, <type://HealthCheckService> and <type://PrometheusExpositionService> are\n+    <typeplural://TransientService>.\n+- You can now use Protobuf's `Message` and <a href=\"https://github.com/scalapb/ScalaPB\">ScalaPB's</a>\n+  `GeneratedMessage` as a request/response object in an annotated service. #3088 #3124 #3192\n+  - Use `armeria-protobuf`, `armeria-scalapb_2.12` or `armeria-scalapb_2.13` dependencies.\n+  - See [Supporting ScalaPB in annotated services](/docs/advanced-scalapb#supporting-scalapb-in-annotated-services)\n+    for more information.\n+- You can now use Scala `Future` in an annotated service. #3189\n+  ```scala\n+  @Get(\"/items/{id}\")\n+  def items(@Param id: Int)(implicit ec: ExecutionContext): Future[String] = {\n+    Future {\n+      // Perform asynchronous task using Armeria's event loop.\n+      ...\n+    }\n+  }\n+  ```\n+- You can now use <type://HttpDeframer> to conveniently decode a stream of <typeplural://HttpObject>\n+  to N objects. #2981\n+  ```java\n+  HttpDeframerHandler<String> decoder = ...\n+  HttpDeframer<String> deframer = HttpDeframer.of(decoder, ByteBufAllocator.DEFAULT);\n+  HttpRequest request = ...;\n+  request.subscribe(deframer);\n+  ```\n+  - See <type://HttpDeframer> for more information.\n+- You can now apply <type://CircuitBreaker> per request path. #3134, #3135\n+  ```java\n+  CircuitBreakerFactory factory = ...\n+  // CircuitBreaker is applied per the combination of host and path.\n+  CircuitBreakerMapping mapping = CircuitBreakerMapping.builder()\n+                                                       .perPath()\n+                                                       .perHost()\n+                                                       .build(factory);\n+  CircuitBreakerRule rule = ...\n+  CircuitBreakerClient.newDecorator(mapping, rule);\n+  ```\n+- You can now apply the different `maxTotalAttempts` and `responseTimeout` for <type://RetryingClient>\n+  using <type://RetryConfig>. #3145\n+  ```java\n+  BiFunction<ClientRequestContext, Request, String> keyFactory =\n+      (ctx, req) -> ctx.endpoint().host();\n+  BiFunction<ClientRequestContext, Request, RetryConfig<HttpResponse>> configFactory = (ctx, req) -> {\n+      String host = ctx.endpoint().host();\n+      RetryConfigBuilder builder = RetryConfig.<HttpResponse>builder(RetryRule.onException());\n+      if (host.equals(\"host1\")) {\n+          builder.maxTotalAttempts(2);\n+      } else if (host.equals(\"host2\")) {\n+          builder.maxTotalAttempts(4);\n+      } else {\n+          builder.maxTotalAttempts(1);\n+      }\n+      return builder.build();\n+  };\n+  RetryConfigMapping mapping = RetryConfigMapping.of(keyFactory, configFactory);\n+  RetryingClient.newDecoratorWithMapping(mapping);\n+  ```\n+- You can now split the <type://ResponseHeaders> and bodies using <type://HttpResponse#split()>. #3038\n+  ```java\n+  HttpResponse response = ...\n+  SplitHttpResponse splitHttpResponse = response.split();\n+  CompletableFuture<ResponseHeaders> headersFuture = splitHttpResponse.headers();\n+  StreamMessage<HttpData> bodyStream = splitHttpResponse.body();\n+\n+  headersFuture.thenApply(headers -> {\n+      if (headers.contentType() == MediaType.JSON_SEQ) {\n+          // Subscribe to a stream of HttpData to JSON\n+          Flux.from(bodyStream)\n+              .map(httpData -> {\n+                  // Convert HttpData to your domain object\n+              });\n+              ...\n+      }\n+  });\n+  ```\n+- You can now specify the Caffeine spec for the DNS resolver cache. #2970 #3007\n+- You can now specify a prefix for MDC keys using the `<prefix>` element. #3086 #3112\n+  ```xml\n+  <configuration>\n+    ...\n+    <appender name=\"RCEA\" class=\"com.linecorp.armeria.common.logback.RequestContextExportingAppender\">\n+      ...\n+      <!-- set the prefix of exports which is not wrapped with the <exportGroup> element -->\n+      <prefix>armeria.</prefix>\n+      <export>remote.id</export>\n+      <export>req.headers.user-agent</export>\n+      ...\n+      <exportGroup>\n+        <!-- set the prefix of exports in this <exportGroup> -->\n+        <prefix>some_prefix.</prefix>\n+        <export>some_value=attr:com.example.AttrKeys#SOME_KEY</export>\n+        ...\n+      </exportGroup>\n+      <exportGroup>\n+        <!-- if <prefix> is not defined, no prefix is added to exports -->\n+        <export>tracking_id=attr:com.example.AttrKeys#TRACKING_ID_KEY</export>\n+        ...\n+      </exportGroup>\n+    </appender>\n+    ...\n+  </configuration>\n+\n+  <prefix>...</prefix> <!-- The default prefix -->\n+  <export>...</export>\n+  <exports>...</exports>\n+\n+  <exportGroup>\n+    <prefix>...</prefix> <!-- The prefix for the export group. -->\n+    <export>...</export>\n+    <exports>...</exports>\n+  </exportGroup>\n+  ```\n+- You can now use the unsafe TLS cipher using <type://ClientFactoryBuilder#tlsAllowUnsafeCiphers(boolean)>.\n+  #3157 #3172\n+- You can now specify an arbitrary type for <type://@Header> and <type://@Param> if the\n+  type has one of following static methods or the constructor. #2574 #3143 #3164\n+  - `public static T of(String) { ... }`\n+  - `public static T valueOf(String) { ... }`\n+  - `public static T fromString(String) { ... }`\n+  - `public T(String) { ... } // constructor`\n+  ```java\n+  public class UserService {\n+\n+      @Get(\"/api\")\n+      public HttpResponse get(@Param User user) {\n+          ...\n+      }\n+\n+      private static class User {\n+          User(String userId) { ... } // This constructor is used to create User.\n+          ...\n+      }\n+  }\n+  ```\n+- You can now build and execute an <type://HttpRequest> fluently. #3110\n+  ```java\n+  // Creates a POST HttpRequest whose URI is \"/foo?q=bar\"\n+  // with headers \"cookie: name=value\" and \"authorization: value\" and a JSON body.\n+  HttpRequest.builder()\n+             .post(\"/{resource}\")\n+             .pathParam(\"resource\", \"foo\")\n+             .queryParam(\"q\", \"bar\")\n+             .cookie(Cookie.of(\"name\", \"value\"))\n+             .header(\"authorization\", \"value\")\n+             .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\"));\n+  // You can also use WebClient.prepare().\n+  WebClient client = ...\n+  client.prepare()\n+        .post(\"/{resource}\")\n+        .pathParam(\"resource\", \"foo\")\n+        .queryParam(\"q\", \"bar\")\n+        .cookie(Cookie.of(\"name\", \"value\"))\n+        .header(\"authorization\", \"value\")\n+        .content(MediaType.JSON, \"{\\\"foo\\\":\\\"bar\\\"}\")\n+        .execute();\n+  ```\n+- You can now easily handle cookies by applying <type://CookieClient#newDecorator()>. #2637 #3118\n+  ```java\n+  WebClient client = WebClient.builder()\n+                              .factory(factory)\n+                              .decorator(CookieClient.newDecorator())\n+                              .build();\n+  client.get(...); // The cookies that are received from the origin server\n+                   // are added to the request headers.\n+  ```\n+- You can now use the custom Thrift protocol by using <type://ThriftProtocolFactoryProvider> and SPI. #3183\n+  ```java\n+  public class TTupleFactoryProvider extends ThriftProtocolFactoryProvider {\n+      @Override\n+      public Set<ThriftProtocolFactoryProvider.Entry> entries() {\n+          return ImmutableSet.of(new ThriftProtocolFactoryProvider.Entry(\n+                  SerializationFormat.of(\"ttuple\"), new TTupleProtocol.Factory()));\n+      }\n+  }\n+  ```\n+- You can now collect more detailed DNS metrics. #1887 #2935\n+  - `armeria.client.dns.queries#count{...,result=success}`\n+  - `armeria.client.dns.queries#count{...,result=failure}`\n+  - `armeria.client.dns.queries.written#count{...}`\n+  - `armeria.client.dns.queries.cancelled#count{...}`\n+  - `armeria.client.dns.queries.redirected#count{...}`\n+  - `armeria.client.dns.queries.cnamed#count{...}`\n+  - `armeria.client.dns.queries.noanswer#count{...}`\n+- You can now customize the <type://HealthCheckService> when using Spring integration. #3144\n+  ```java\n+  @Bean\n+  public HealthCheckServiceConfigurator healthCheckServiceConfigurator() {\n+      return builder -> builder.updatable(true);\n+  }\n+  ```\n+- You can now use <type://RequestHeaders#acceptLanguage()> to choose language. #3177 #3179\n+\n+## \ud83d\udcc8 Improvements\n+\n+- Various improvements for <type://DocService>. #3149 #3150 #3167 #3188\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- <type://HealthCheckedEndpointGroup#endpoints()> now returns healthy endpoints properly even when\n+  <type://EndpointGroup#orElse(EndpointGroup)> is used. #3181\n+- `ServletRequest.getProtocol()` now returns the proper value when using <type://TomcatService> and\n+  <type://JettyService>. #3194\n+- The route decorators are now evaluated in the reverse order they applied. #3160 #3166\n+- You now get the FORBIDDEN status if your service does not handle preflight requests regardless of\n+  route decorators. #3152\n+- A gRPC `ServerCall` is now closed exactly only once. #3153\n+- You no longer see `AnnotatedConnectException` when the <type://Endpoint> is created with an\n+  IPv6 scope ID. #3158 #3178\n+- Armeria server does not reject the request path whose first segment includes a colon anymore. #3154\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+\n+- <type://CircuitBreakerClient#newPerHostAndMethodDecorator(BiFunction,CircuitBreakerRule)> is now deprecated.\n+  #31356\n+  - Use <type://CircuitBreakerClient#newDecorator(CircuitBreakerMapping,CircuitBreakerRule)> with the customized\n+    <type://CircuitBreakerMapping> using <type://CircuitBreakerMapping#builder()>.\n+- The response timeout and max total attempts setters in <type://RetryingClientBuilder> is now deprecated.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU1NDEwNg=="}, "originalCommit": {"oid": "82c6c364cee70f1dc485cba842aaf290792105ef"}, "originalPosition": 237}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1772, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}