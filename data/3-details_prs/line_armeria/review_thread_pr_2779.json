{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MzY2OTM1", "number": 2779, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNDowNjo0NVrOEDS2lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMDoxNjoyNFrOEDYfdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODkwMDY5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNDowNjo0NVrOGgOqTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNDowNjo0NVrOGgOqTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ0NzgyMA==", "bodyText": "I'm wondering if we need to warn when @Nullable is specified as well.", "url": "https://github.com/line/armeria/pull/2779#discussion_r436447820", "createdAt": "2020-06-08T04:06:45Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "diffHunk": "@@ -1013,7 +966,7 @@ private AnnotatedValueResolver build() {\n             if (aDefault != null) {\n                 if (supportDefault) {\n                     // Warn unusual usage. e.g. @Param @Default(\"a\") Optional<String> param\n-                    if (shouldWrapValueAsOptional) {\n+                    if (isOptional) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6010bb591f567e0d7d617ec9af8a73c462385d2d"}, "originalPosition": 306}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODkxNzI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNDoyMDo1NVrOGgO0FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNzo0Njo1MFrOGg8xIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1MDMyNQ==", "bodyText": "Can we support Map, GenericArrayType and arrays as we do in the DocService? \ud83e\udd14\nSupporting Map is maybe too much because we have to use varagrs for expectedParameterizedResultType though. \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2779#discussion_r436450325", "createdAt": "2020-06-08T04:20:55Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "diffHunk": "@@ -1094,16 +1039,116 @@ private AnnotatedValueResolver build() {\n                 // - QueryParams (or HttpParameters)\n                 // - User classes which can be converted by request converter\n                 //\n-                // So the container type should be 'null'.\n-                //\n-                types = new SimpleImmutableEntry<>(null, (Class<?>) type);\n+                if (unwrappedParameterizedType instanceof Class) {\n+                    elementType = (Class<?>) unwrappedParameterizedType;\n+                    parameterizedElementType = null;\n+                } else if (unwrappedParameterizedType instanceof ParameterizedType) {\n+                    parameterizedElementType = (ParameterizedType) unwrappedParameterizedType;\n+                    elementType = (Class<?>) parameterizedElementType.getRawType();\n+                } else {\n+                    throw new IllegalArgumentException(\"Unsupported parameter type: \" +\n+                                                       unwrappedParameterizedType.getTypeName());\n+                }\n             }\n \n             return new AnnotatedValueResolver(annotationType, httpElementName, pathVariable, shouldExist,\n-                                              shouldWrapValueAsOptional, types.getKey(), types.getValue(),\n-                                              defaultValue, description, resolver,\n+                                              isOptional, containerType, elementType,\n+                                              parameterizedElementType, defaultValue, description, resolver,\n                                               beanFactoryId, aggregation);\n         }\n+\n+        @Nullable\n+        private Class<?> getContainerType(Type parameterizedType) {\n+            final Class<?> rawType = toRawType(parameterizedType);\n+            if (pathVariable) {\n+                if (Iterable.class.isAssignableFrom(rawType)) {\n+                    throw new IllegalArgumentException(\n+                            \"Container type is not supported for a path variable: \" + httpElementName +\n+                            \" (\" + parameterizedType + ')');\n+                }\n+            }\n+\n+            if (!supportContainer) {\n+                return null;\n+            }\n+\n+            if (rawType == Iterable.class ||\n+                rawType == List.class ||\n+                rawType == Collection.class) {\n+                return ArrayList.class;\n+            }\n+\n+            if (rawType == Set.class) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6010bb591f567e0d7d617ec9af8a73c462385d2d"}, "originalPosition": 411}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ3MTg4Ng==", "bodyText": "Not sure about Map, but I think it's a good idea to support arrays. Maybe later in another PR? \ud83d\ude01", "url": "https://github.com/line/armeria/pull/2779#discussion_r436471886", "createdAt": "2020-06-08T06:00:48Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "diffHunk": "@@ -1094,16 +1039,116 @@ private AnnotatedValueResolver build() {\n                 // - QueryParams (or HttpParameters)\n                 // - User classes which can be converted by request converter\n                 //\n-                // So the container type should be 'null'.\n-                //\n-                types = new SimpleImmutableEntry<>(null, (Class<?>) type);\n+                if (unwrappedParameterizedType instanceof Class) {\n+                    elementType = (Class<?>) unwrappedParameterizedType;\n+                    parameterizedElementType = null;\n+                } else if (unwrappedParameterizedType instanceof ParameterizedType) {\n+                    parameterizedElementType = (ParameterizedType) unwrappedParameterizedType;\n+                    elementType = (Class<?>) parameterizedElementType.getRawType();\n+                } else {\n+                    throw new IllegalArgumentException(\"Unsupported parameter type: \" +\n+                                                       unwrappedParameterizedType.getTypeName());\n+                }\n             }\n \n             return new AnnotatedValueResolver(annotationType, httpElementName, pathVariable, shouldExist,\n-                                              shouldWrapValueAsOptional, types.getKey(), types.getValue(),\n-                                              defaultValue, description, resolver,\n+                                              isOptional, containerType, elementType,\n+                                              parameterizedElementType, defaultValue, description, resolver,\n                                               beanFactoryId, aggregation);\n         }\n+\n+        @Nullable\n+        private Class<?> getContainerType(Type parameterizedType) {\n+            final Class<?> rawType = toRawType(parameterizedType);\n+            if (pathVariable) {\n+                if (Iterable.class.isAssignableFrom(rawType)) {\n+                    throw new IllegalArgumentException(\n+                            \"Container type is not supported for a path variable: \" + httpElementName +\n+                            \" (\" + parameterizedType + ')');\n+                }\n+            }\n+\n+            if (!supportContainer) {\n+                return null;\n+            }\n+\n+            if (rawType == Iterable.class ||\n+                rawType == List.class ||\n+                rawType == Collection.class) {\n+                return ArrayList.class;\n+            }\n+\n+            if (rawType == Set.class) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1MDMyNQ=="}, "originalCommit": {"oid": "6010bb591f567e0d7d617ec9af8a73c462385d2d"}, "originalPosition": 411}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIwMzIzNQ==", "bodyText": "#2790", "url": "https://github.com/line/armeria/pull/2779#discussion_r437203235", "createdAt": "2020-06-09T07:46:50Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "diffHunk": "@@ -1094,16 +1039,116 @@ private AnnotatedValueResolver build() {\n                 // - QueryParams (or HttpParameters)\n                 // - User classes which can be converted by request converter\n                 //\n-                // So the container type should be 'null'.\n-                //\n-                types = new SimpleImmutableEntry<>(null, (Class<?>) type);\n+                if (unwrappedParameterizedType instanceof Class) {\n+                    elementType = (Class<?>) unwrappedParameterizedType;\n+                    parameterizedElementType = null;\n+                } else if (unwrappedParameterizedType instanceof ParameterizedType) {\n+                    parameterizedElementType = (ParameterizedType) unwrappedParameterizedType;\n+                    elementType = (Class<?>) parameterizedElementType.getRawType();\n+                } else {\n+                    throw new IllegalArgumentException(\"Unsupported parameter type: \" +\n+                                                       unwrappedParameterizedType.getTypeName());\n+                }\n             }\n \n             return new AnnotatedValueResolver(annotationType, httpElementName, pathVariable, shouldExist,\n-                                              shouldWrapValueAsOptional, types.getKey(), types.getValue(),\n-                                              defaultValue, description, resolver,\n+                                              isOptional, containerType, elementType,\n+                                              parameterizedElementType, defaultValue, description, resolver,\n                                               beanFactoryId, aggregation);\n         }\n+\n+        @Nullable\n+        private Class<?> getContainerType(Type parameterizedType) {\n+            final Class<?> rawType = toRawType(parameterizedType);\n+            if (pathVariable) {\n+                if (Iterable.class.isAssignableFrom(rawType)) {\n+                    throw new IllegalArgumentException(\n+                            \"Container type is not supported for a path variable: \" + httpElementName +\n+                            \" (\" + parameterizedType + ')');\n+                }\n+            }\n+\n+            if (!supportContainer) {\n+                return null;\n+            }\n+\n+            if (rawType == Iterable.class ||\n+                rawType == List.class ||\n+                rawType == Collection.class) {\n+                return ArrayList.class;\n+            }\n+\n+            if (rawType == Set.class) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1MDMyNQ=="}, "originalCommit": {"oid": "6010bb591f567e0d7d617ec9af8a73c462385d2d"}, "originalPosition": 411}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTgyNDUzOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceRequestConverterTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMDoxNjoyNFrOGgXiPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNjowNzoxNFrOGkMdTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU5MzIxNA==", "bodyText": "Question: What is the expected behavior if String nullable is not annotated by @Nullable?\nnull value is injected into nullable.", "url": "https://github.com/line/armeria/pull/2779#discussion_r436593214", "createdAt": "2020-06-08T10:16:24Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceRequestConverterTest.java", "diffHunk": "@@ -100,14 +101,19 @@ public String convert2(RequestJsonObj1 obj1) {\n         }\n \n         @Post(\"/convert3\")\n-        public String convert3(@RequestConverter(TestRequestConverterOptional1.class)\n-                                       Optional<RequestJsonObj1> obj1,\n-                               @RequestConverter(TestRequestConverterOptional2.class)\n-                                       Optional<RequestJsonObj2> obj2) {\n+        public String convert3(@RequestConverter(TestRequestConverter1.class) Optional<RequestJsonObj1> obj1,\n+                               @RequestConverter(TestRequestConverter2.class) Optional<RequestJsonObj2> obj2) {\n             assertThat(obj1.isPresent()).isTrue();\n             assertThat(obj2.isPresent()).isTrue();\n             return obj2.get().strVal();\n         }\n+\n+        @Post(\"/convert4\")\n+        @RequestConverter(NullReturningConverter.class)\n+        public void convert4(Optional<String> optional, @Nullable String nullable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08aac908c8253364229e1153f4ec9d474feed53"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU5NTM1Nw==", "bodyText": "By the way, NullReturningConverter returns null. It looks like a correct test.", "url": "https://github.com/line/armeria/pull/2779#discussion_r436595357", "createdAt": "2020-06-08T10:20:33Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceRequestConverterTest.java", "diffHunk": "@@ -100,14 +101,19 @@ public String convert2(RequestJsonObj1 obj1) {\n         }\n \n         @Post(\"/convert3\")\n-        public String convert3(@RequestConverter(TestRequestConverterOptional1.class)\n-                                       Optional<RequestJsonObj1> obj1,\n-                               @RequestConverter(TestRequestConverterOptional2.class)\n-                                       Optional<RequestJsonObj2> obj2) {\n+        public String convert3(@RequestConverter(TestRequestConverter1.class) Optional<RequestJsonObj1> obj1,\n+                               @RequestConverter(TestRequestConverter2.class) Optional<RequestJsonObj2> obj2) {\n             assertThat(obj1.isPresent()).isTrue();\n             assertThat(obj2.isPresent()).isTrue();\n             return obj2.get().strVal();\n         }\n+\n+        @Post(\"/convert4\")\n+        @RequestConverter(NullReturningConverter.class)\n+        public void convert4(Optional<String> optional, @Nullable String nullable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU5MzIxNA=="}, "originalCommit": {"oid": "c08aac908c8253364229e1153f4ec9d474feed53"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYwNjAyOA==", "bodyText": "I added another method with non-null parameter which is expected to fail with a 400 Bad Request error.", "url": "https://github.com/line/armeria/pull/2779#discussion_r440606028", "createdAt": "2020-06-16T06:07:14Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceRequestConverterTest.java", "diffHunk": "@@ -100,14 +101,19 @@ public String convert2(RequestJsonObj1 obj1) {\n         }\n \n         @Post(\"/convert3\")\n-        public String convert3(@RequestConverter(TestRequestConverterOptional1.class)\n-                                       Optional<RequestJsonObj1> obj1,\n-                               @RequestConverter(TestRequestConverterOptional2.class)\n-                                       Optional<RequestJsonObj2> obj2) {\n+        public String convert3(@RequestConverter(TestRequestConverter1.class) Optional<RequestJsonObj1> obj1,\n+                               @RequestConverter(TestRequestConverter2.class) Optional<RequestJsonObj2> obj2) {\n             assertThat(obj1.isPresent()).isTrue();\n             assertThat(obj2.isPresent()).isTrue();\n             return obj2.get().strVal();\n         }\n+\n+        @Post(\"/convert4\")\n+        @RequestConverter(NullReturningConverter.class)\n+        public void convert4(Optional<String> optional, @Nullable String nullable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU5MzIxNA=="}, "originalCommit": {"oid": "c08aac908c8253364229e1153f4ec9d474feed53"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2324, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}