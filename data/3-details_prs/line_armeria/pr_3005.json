{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMDg1NDIw", "number": 3005, "title": "Add Reactor context-propagation example", "bodyText": "It would be nice if we have the Reactor context-propagation example as we have one for Rxjava.", "createdAt": "2020-08-19T10:52:58Z", "url": "https://github.com/line/armeria/pull/3005", "merged": true, "mergeCommit": {"oid": "97ee35c59560d44ab4529ba5d6916f47c572ec03"}, "closed": true, "closedAt": "2020-08-20T03:32:45Z", "author": {"login": "minwoox"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAZYrYgH2gAyNDcwMDg1NDIwOjA3NjMxOTUwMTMzYTFhOTBiZjlkOTZmZDRjM2ZhZDcxMTFiZWZmMzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAnP7kAH2gAyNDcwMDg1NDIwOmY2MDE4Y2RjNmYzMWY3YzdiNTNhZWI5MmIyODNjNTI4ZmJhMmM5OTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "07631950133a1a90bf9d96fd4c3fad7111beff31", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/07631950133a1a90bf9d96fd4c3fad7111beff31", "committedDate": "2020-08-19T10:51:49Z", "message": "Add Reactor context-propagation example\nIt would be nice if we have the Reactor context-propagation example as we have one for Rxjava."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2a15ba7e79b9bdcbb8f5667041cb7b05c0063f9", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/e2a15ba7e79b9bdcbb8f5667041cb7b05c0063f9", "committedDate": "2020-08-19T13:03:57Z", "message": "Merge branch 'master' into reactor_example"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNDUxMjUz", "url": "https://github.com/line/armeria/pull/3005#pullrequestreview-470451253", "createdAt": "2020-08-19T13:22:31Z", "commit": {"oid": "e2a15ba7e79b9bdcbb8f5667041cb7b05c0063f9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNDUyNTIz", "url": "https://github.com/line/armeria/pull/3005#pullrequestreview-470452523", "createdAt": "2020-08-19T13:23:58Z", "commit": {"oid": "e2a15ba7e79b9bdcbb8f5667041cb7b05c0063f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzoyMzo1OFrOHDHNFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzoyMzo1OFrOHDHNFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAyNTgxMg==", "bodyText": "context executor -> context-aware event loop? (probably need to update other examples.)", "url": "https://github.com/line/armeria/pull/3005#discussion_r473025812", "createdAt": "2020-08-19T13:23:58Z", "author": {"login": "trustin"}, "path": "examples/context-propagation/reactor/src/main/java/example/armeria/contextpropagation/reactor/MainService.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package example.armeria.contextpropagation.reactor;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Scheduler;\n+import reactor.core.scheduler.Schedulers;\n+\n+public class MainService implements HttpService {\n+\n+    private final WebClient backendClient;\n+\n+    public MainService(WebClient backendClient) {\n+        this.backendClient = requireNonNull(backendClient, \"backendClient\");\n+    }\n+\n+    @Override\n+    public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) {\n+        final Scheduler contextAwareScheduler = Schedulers.fromExecutor(ctx.eventLoop());\n+\n+        // This logic mimics using a blocking method, which would usually be something like a MySQL\n+        // database query using JDBC.\n+        final Flux<Long> fetchNumsFromFakeDb =\n+                Mono.fromCallable(\n+                        () -> {\n+                            // The context is mounted in a thread-local, meaning it is available to all\n+                            // logic such as tracing.\n+                            assert ServiceRequestContext.current() == ctx;\n+                            assert !ctx.eventLoop().inEventLoop();\n+\n+                            try {\n+                                // Simulate a blocking API call.\n+                                Thread.sleep(50);\n+                            } catch (Exception ignored) {\n+                                // Do nothing.\n+                            }\n+                            return Arrays.asList(23L, -23L);\n+                        })\n+                    // Always run blocking logic on the blocking task executor. By using\n+                    // ServiceRequestContext.blockingTaskExecutor, you also ensure the context is mounted\n+                    // inside the logic (e.g., your DB call will be traced!).\n+                    .subscribeOn(Schedulers.fromExecutor(ctx.blockingTaskExecutor()))\n+                    .flatMapIterable(l -> l);\n+\n+        final Flux<Long> extractNumsFromRequest =\n+                Mono.fromCompletionStage(req.aggregate())\n+                    // Unless you know what you're doing, always use subscribeOn with the context\n+                    // executor to have the context mounted and stay on a single thread to reduce", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2a15ba7e79b9bdcbb8f5667041cb7b05c0063f9"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aee3dfa2807d14468f87dc490d1237285d45f6d7", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/aee3dfa2807d14468f87dc490d1237285d45f6d7", "committedDate": "2020-08-20T01:11:20Z", "message": "Address the comment by @trustin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMDc5OTk2", "url": "https://github.com/line/armeria/pull/3005#pullrequestreview-471079996", "createdAt": "2020-08-20T02:11:47Z", "commit": {"oid": "aee3dfa2807d14468f87dc490d1237285d45f6d7"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMjoxMTo0OFrOHDmgNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMjoxMTo0OFrOHDmgNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUzODYxMg==", "bodyText": "nit: Could be ignored :-)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .flatMapIterable(l -> l);\n          \n          \n            \n                                .flatMapIterable(Function.identity());", "url": "https://github.com/line/armeria/pull/3005#discussion_r473538612", "createdAt": "2020-08-20T02:11:48Z", "author": {"login": "ikhoon"}, "path": "examples/context-propagation/reactor/src/main/java/example/armeria/contextpropagation/reactor/MainService.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package example.armeria.contextpropagation.reactor;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Scheduler;\n+import reactor.core.scheduler.Schedulers;\n+\n+public class MainService implements HttpService {\n+\n+    private final WebClient backendClient;\n+\n+    public MainService(WebClient backendClient) {\n+        this.backendClient = requireNonNull(backendClient, \"backendClient\");\n+    }\n+\n+    @Override\n+    public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) {\n+        final Scheduler contextAwareScheduler = Schedulers.fromExecutor(ctx.eventLoop());\n+\n+        // This logic mimics using a blocking method, which would usually be something like a MySQL\n+        // database query using JDBC.\n+        final Flux<Long> fetchNumsFromFakeDb =\n+                Mono.fromCallable(\n+                        () -> {\n+                            // The context is mounted in a thread-local, meaning it is available to all\n+                            // logic such as tracing.\n+                            assert ServiceRequestContext.current() == ctx;\n+                            assert !ctx.eventLoop().inEventLoop();\n+\n+                            try {\n+                                // Simulate a blocking API call.\n+                                Thread.sleep(50);\n+                            } catch (Exception ignored) {\n+                                // Do nothing.\n+                            }\n+                            return Arrays.asList(23L, -23L);\n+                        })\n+                    // Always run blocking logic on the blocking task executor. By using\n+                    // ServiceRequestContext.blockingTaskExecutor, you also ensure the context is mounted\n+                    // inside the logic (e.g., your DB call will be traced!).\n+                    .subscribeOn(Schedulers.fromExecutor(ctx.blockingTaskExecutor()))\n+                    .flatMapIterable(l -> l);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee3dfa2807d14468f87dc490d1237285d45f6d7"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6018cdc6f31f7c7b53aeb92b283c528fba2c999", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/f6018cdc6f31f7c7b53aeb92b283c528fba2c999", "committedDate": "2020-08-20T03:00:56Z", "message": "Address the comment by @ikhoon"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 97, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}