{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNjg4Nzk4", "number": 3102, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMTowODo0NFrOEs_HMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNTowMjo0NFrOEuTGyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjA2ODMyOnYy", "diffSide": "RIGHT", "path": "it/spring/boot2-tomcat9/build.gradle", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMTowODo0NFrOHghZYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzowOTowMVrOHglzew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2MzY1MQ==", "bodyText": "Is this to make sure MVC is used when both starter-web and webflux-starter are present in the class path? I think this is somewhat confusing. How about adding a separate integration test module dedicated to such a scenario? e.g. it/spring/boot2-mixed?", "url": "https://github.com/line/armeria/pull/3102#discussion_r503863651", "createdAt": "2020-10-13T11:08:44Z", "author": {"login": "trustin"}, "path": "it/spring/boot2-tomcat9/build.gradle", "diffHunk": "@@ -1,5 +1,6 @@\n dependencies {\n     implementation project(':spring:boot2-starter')\n+    implementation project(':spring:boot2-webflux-starter')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d423b54e7ba0c10a0d04b1f18049af895c9d3f2b"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg5MDk4OA==", "bodyText": "good idea. \ud83d\udc4d\nIn addition to this, it seems necessary to remove the dependency of boot2-webflux-autoconfigure from boot2-autoconfigure and separate it into another module for testing.\ne.g.\n\nit/spring/boot2-mixed\nit/spring/boot2-mixed-tomcat9", "url": "https://github.com/line/armeria/pull/3102#discussion_r503890988", "createdAt": "2020-10-13T11:58:04Z", "author": {"login": "heowc"}, "path": "it/spring/boot2-tomcat9/build.gradle", "diffHunk": "@@ -1,5 +1,6 @@\n dependencies {\n     implementation project(':spring:boot2-starter')\n+    implementation project(':spring:boot2-webflux-starter')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2MzY1MQ=="}, "originalCommit": {"oid": "d423b54e7ba0c10a0d04b1f18049af895c9d3f2b"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkzNTg2Nw==", "bodyText": "SGTM. Please go ahead \ud83d\ude47", "url": "https://github.com/line/armeria/pull/3102#discussion_r503935867", "createdAt": "2020-10-13T13:09:01Z", "author": {"login": "trustin"}, "path": "it/spring/boot2-tomcat9/build.gradle", "diffHunk": "@@ -1,5 +1,6 @@\n dependencies {\n     implementation project(':spring:boot2-starter')\n+    implementation project(':spring:boot2-webflux-starter')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2MzY1MQ=="}, "originalCommit": {"oid": "d423b54e7ba0c10a0d04b1f18049af895c9d3f2b"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDQxNTY3OnYy", "diffSide": "RIGHT", "path": "it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/package-info.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTozNzowMFrOHhKrGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzowNDowM1rOHhR76w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzOTkzMQ==", "bodyText": "nit: 2020", "url": "https://github.com/line/armeria/pull/3102#discussion_r504539931", "createdAt": "2020-10-14T09:37:00Z", "author": {"login": "minwoox"}, "path": "it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/package-info.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2018 LINE Corporation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e0eea3be9fe631e5f5da21e144e606dae10271"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY1ODkyMw==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/3102#discussion_r504658923", "createdAt": "2020-10-14T13:04:03Z", "author": {"login": "heowc"}, "path": "it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/package-info.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2018 LINE Corporation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzOTkzMQ=="}, "originalCommit": {"oid": "f1e0eea3be9fe631e5f5da21e144e606dae10271"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDQ1NjAzOnYy", "diffSide": "RIGHT", "path": "it/spring/boot2-mixed-tomcat9/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTo0NzoxNlrOHhLEJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzowNzozOVrOHhSGBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NjM0MA==", "bodyText": "Question: What happens if we don't exclude this dependency?\nI'm also wondering if we should exclude the dependency in our example.\nhttps://github.com/line/armeria/blob/master/examples/spring-boot-tomcat/build.gradle", "url": "https://github.com/line/armeria/pull/3102#discussion_r504546340", "createdAt": "2020-10-14T09:47:16Z", "author": {"login": "minwoox"}, "path": "it/spring/boot2-mixed-tomcat9/build.gradle", "diffHunk": "@@ -0,0 +1,10 @@\n+dependencies {\n+    implementation project(':spring:boot2-starter')\n+    implementation project(':spring:boot2-webflux-starter')\n+    implementation project(':tomcat9')\n+    implementation('org.springframework.boot:spring-boot-starter-web') {\n+        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e0eea3be9fe631e5f5da21e144e606dae10271"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2MTUxMA==", "bodyText": "I refer to it/spring/boot2-tomcat9/build.gradle.\nSince spring-boot-starter-tomcat only has dependencies, I think this is simply a tomcat-embed-core version difference. The behavior will be the same.", "url": "https://github.com/line/armeria/pull/3102#discussion_r504661510", "createdAt": "2020-10-14T13:07:39Z", "author": {"login": "heowc"}, "path": "it/spring/boot2-mixed-tomcat9/build.gradle", "diffHunk": "@@ -0,0 +1,10 @@\n+dependencies {\n+    implementation project(':spring:boot2-starter')\n+    implementation project(':spring:boot2-webflux-starter')\n+    implementation project(':tomcat9')\n+    implementation('org.springframework.boot:spring-boot-starter-web') {\n+        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NjM0MA=="}, "originalCommit": {"oid": "f1e0eea3be9fe631e5f5da21e144e606dae10271"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTA5OTYzOnYy", "diffSide": "RIGHT", "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaAutoConfiguration.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjo0NjowM1rOHhRL9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDowMDoxOFrOHhUjdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0NjY0Nw==", "bodyText": "Question: Could you tell me how this works please? \ud83d\ude05", "url": "https://github.com/line/armeria/pull/3102#discussion_r504646647", "createdAt": "2020-10-14T12:46:03Z", "author": {"login": "minwoox"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaAutoConfiguration.java", "diffHunk": "@@ -16,132 +16,35 @@\n \n package com.linecorp.armeria.spring;\n \n-import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationNetUtil.configurePorts;\n-import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configureServerWithArmeriaSettings;\n-\n-import java.time.Duration;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.function.Consumer;\n-\n-import javax.annotation.Nullable;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.condition.NoneNestedConditions;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n \n-import com.google.common.base.Strings;\n-\n-import com.linecorp.armeria.common.SessionProtocol;\n-import com.linecorp.armeria.common.metric.MeterIdPrefixFunction;\n import com.linecorp.armeria.server.Server;\n-import com.linecorp.armeria.server.ServerBuilder;\n-import com.linecorp.armeria.server.ServerPort;\n-import com.linecorp.armeria.server.docs.DocService;\n-import com.linecorp.armeria.server.docs.DocServiceBuilder;\n-import com.linecorp.armeria.server.healthcheck.HealthChecker;\n-import com.linecorp.armeria.spring.ArmeriaSettings.Port;\n-\n-import io.micrometer.core.instrument.MeterRegistry;\n-import io.micrometer.core.instrument.Metrics;\n+import com.linecorp.armeria.spring.ArmeriaAutoConfiguration.NonReactiveWebApplicationCondition;\n \n /**\n  * Spring Boot {@link Configuration} that provides Armeria integration.\n  */\n @Configuration\n+@Conditional(NonReactiveWebApplicationCondition.class)\n @EnableConfigurationProperties(ArmeriaSettings.class)\n @ConditionalOnMissingBean(Server.class)\n-public class ArmeriaAutoConfiguration {\n-    private static final Logger logger = LoggerFactory.getLogger(ArmeriaAutoConfiguration.class);\n-\n-    private static final Port DEFAULT_PORT = new Port().setPort(8080)\n-                                                       .setProtocol(SessionProtocol.HTTP);\n-\n-    private static final String GRACEFUL_SHUTDOWN = \"graceful\";\n+public class ArmeriaAutoConfiguration extends AbstractArmeriaAutoConfiguration {\n \n     /**\n-     * Create a started {@link Server} bean.\n+     * Condition for non-reactive web application type.\n      */\n-    @Bean\n-    @Nullable\n-    public Server armeriaServer(\n-            ArmeriaSettings armeriaSettings,\n-            Optional<MeterRegistry> meterRegistry,\n-            Optional<List<HealthChecker>> healthCheckers,\n-            Optional<MeterIdPrefixFunction> meterIdPrefixFunction,\n-            Optional<List<ArmeriaServerConfigurator>> armeriaServerConfigurators,\n-            Optional<List<Consumer<ServerBuilder>>> armeriaServerBuilderConsumers,\n-            Optional<List<DocServiceConfigurator>> docServiceConfigurators) {\n-\n-        if (!armeriaServerConfigurators.isPresent() &&\n-            !armeriaServerBuilderConsumers.isPresent()) {\n-            // No services to register, no need to start up armeria server.\n-            return null;\n-        }\n-\n-        final ServerBuilder serverBuilder = Server.builder();\n-\n-        final List<Port> ports = armeriaSettings.getPorts();\n-        if (ports.isEmpty()) {\n-            serverBuilder.port(new ServerPort(DEFAULT_PORT.getPort(), DEFAULT_PORT.getProtocols()));\n-        } else {\n-            configurePorts(serverBuilder, ports);\n-        }\n-\n-        final DocServiceBuilder docServiceBuilder = DocService.builder();\n-        docServiceConfigurators.ifPresent(\n-                configurators -> configurators.forEach(\n-                        configurator -> configurator.configure(docServiceBuilder)));\n-\n-        final String docsPath = armeriaSettings.getDocsPath();\n-        configureServerWithArmeriaSettings(serverBuilder, armeriaSettings,\n-                                           meterRegistry.orElse(Metrics.globalRegistry),\n-                                           healthCheckers.orElseGet(Collections::emptyList),\n-                                           meterIdPrefixFunction.orElse(\n-                                                   MeterIdPrefixFunction.ofDefault(\"armeria.server\")));\n+    static class NonReactiveWebApplicationCondition extends NoneNestedConditions {\n \n-        armeriaServerConfigurators.ifPresent(\n-                configurators -> configurators.forEach(\n-                        configurator -> configurator.configure(serverBuilder)));\n-\n-        armeriaServerBuilderConsumers.ifPresent(\n-                consumers -> consumers.forEach(\n-                        consumer -> consumer.accept(serverBuilder)));\n-\n-        if (!Strings.isNullOrEmpty(docsPath)) {\n-            serverBuilder.serviceUnder(docsPath, docServiceBuilder.build());\n+        NonReactiveWebApplicationCondition() {\n+            super(ConfigurationPhase.PARSE_CONFIGURATION);\n         }\n \n-        final Server server = serverBuilder.build();\n-\n-        server.start().handle((result, t) -> {\n-            if (t != null) {\n-                throw new IllegalStateException(\"Armeria server failed to start\", t);\n-            }\n-            return result;\n-        }).join();\n-        logger.info(\"Armeria server started at ports: {}\", server.activePorts());\n-        return server;\n-    }\n-\n-    /**\n-     * A user can configure a {@link Server} by providing an {@link ArmeriaServerConfigurator} bean.\n-     */\n-    @Bean\n-    @ConditionalOnProperty(\"server.shutdown\")\n-    public ArmeriaServerConfigurator gracefulShutdownServerConfigurator(\n-            @Value(\"${server.shutdown}\") String shutdown,\n-            @Value(\"${spring.lifecycle.timeout-per-shutdown-phase:30s}\") Duration duration) {\n-        if (GRACEFUL_SHUTDOWN.equalsIgnoreCase(shutdown)) {\n-            return sb -> sb.gracefulShutdownTimeout(duration, duration);\n-        } else {\n-            return sb -> {};\n-        }\n+        @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n+        static class ReactiveWebApplication {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e0eea3be9fe631e5f5da21e144e606dae10271"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2ODEyNA==", "bodyText": "Looking at @ConditionalOnWebApplication alone, when the application is launched, it determines whether to create a bean according to the web application type. This means that if users has webflux as a dependency and there is no explicit configuration, the web application type is reactive.\nIn this case, it is a negative condition because I used NoneNestedConditions. So when the web application type is reactive, Spring don't make ArmeriaAutoConfiguration a bean.", "url": "https://github.com/line/armeria/pull/3102#discussion_r504668124", "createdAt": "2020-10-14T13:16:49Z", "author": {"login": "heowc"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaAutoConfiguration.java", "diffHunk": "@@ -16,132 +16,35 @@\n \n package com.linecorp.armeria.spring;\n \n-import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationNetUtil.configurePorts;\n-import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configureServerWithArmeriaSettings;\n-\n-import java.time.Duration;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.function.Consumer;\n-\n-import javax.annotation.Nullable;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.condition.NoneNestedConditions;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n \n-import com.google.common.base.Strings;\n-\n-import com.linecorp.armeria.common.SessionProtocol;\n-import com.linecorp.armeria.common.metric.MeterIdPrefixFunction;\n import com.linecorp.armeria.server.Server;\n-import com.linecorp.armeria.server.ServerBuilder;\n-import com.linecorp.armeria.server.ServerPort;\n-import com.linecorp.armeria.server.docs.DocService;\n-import com.linecorp.armeria.server.docs.DocServiceBuilder;\n-import com.linecorp.armeria.server.healthcheck.HealthChecker;\n-import com.linecorp.armeria.spring.ArmeriaSettings.Port;\n-\n-import io.micrometer.core.instrument.MeterRegistry;\n-import io.micrometer.core.instrument.Metrics;\n+import com.linecorp.armeria.spring.ArmeriaAutoConfiguration.NonReactiveWebApplicationCondition;\n \n /**\n  * Spring Boot {@link Configuration} that provides Armeria integration.\n  */\n @Configuration\n+@Conditional(NonReactiveWebApplicationCondition.class)\n @EnableConfigurationProperties(ArmeriaSettings.class)\n @ConditionalOnMissingBean(Server.class)\n-public class ArmeriaAutoConfiguration {\n-    private static final Logger logger = LoggerFactory.getLogger(ArmeriaAutoConfiguration.class);\n-\n-    private static final Port DEFAULT_PORT = new Port().setPort(8080)\n-                                                       .setProtocol(SessionProtocol.HTTP);\n-\n-    private static final String GRACEFUL_SHUTDOWN = \"graceful\";\n+public class ArmeriaAutoConfiguration extends AbstractArmeriaAutoConfiguration {\n \n     /**\n-     * Create a started {@link Server} bean.\n+     * Condition for non-reactive web application type.\n      */\n-    @Bean\n-    @Nullable\n-    public Server armeriaServer(\n-            ArmeriaSettings armeriaSettings,\n-            Optional<MeterRegistry> meterRegistry,\n-            Optional<List<HealthChecker>> healthCheckers,\n-            Optional<MeterIdPrefixFunction> meterIdPrefixFunction,\n-            Optional<List<ArmeriaServerConfigurator>> armeriaServerConfigurators,\n-            Optional<List<Consumer<ServerBuilder>>> armeriaServerBuilderConsumers,\n-            Optional<List<DocServiceConfigurator>> docServiceConfigurators) {\n-\n-        if (!armeriaServerConfigurators.isPresent() &&\n-            !armeriaServerBuilderConsumers.isPresent()) {\n-            // No services to register, no need to start up armeria server.\n-            return null;\n-        }\n-\n-        final ServerBuilder serverBuilder = Server.builder();\n-\n-        final List<Port> ports = armeriaSettings.getPorts();\n-        if (ports.isEmpty()) {\n-            serverBuilder.port(new ServerPort(DEFAULT_PORT.getPort(), DEFAULT_PORT.getProtocols()));\n-        } else {\n-            configurePorts(serverBuilder, ports);\n-        }\n-\n-        final DocServiceBuilder docServiceBuilder = DocService.builder();\n-        docServiceConfigurators.ifPresent(\n-                configurators -> configurators.forEach(\n-                        configurator -> configurator.configure(docServiceBuilder)));\n-\n-        final String docsPath = armeriaSettings.getDocsPath();\n-        configureServerWithArmeriaSettings(serverBuilder, armeriaSettings,\n-                                           meterRegistry.orElse(Metrics.globalRegistry),\n-                                           healthCheckers.orElseGet(Collections::emptyList),\n-                                           meterIdPrefixFunction.orElse(\n-                                                   MeterIdPrefixFunction.ofDefault(\"armeria.server\")));\n+    static class NonReactiveWebApplicationCondition extends NoneNestedConditions {\n \n-        armeriaServerConfigurators.ifPresent(\n-                configurators -> configurators.forEach(\n-                        configurator -> configurator.configure(serverBuilder)));\n-\n-        armeriaServerBuilderConsumers.ifPresent(\n-                consumers -> consumers.forEach(\n-                        consumer -> consumer.accept(serverBuilder)));\n-\n-        if (!Strings.isNullOrEmpty(docsPath)) {\n-            serverBuilder.serviceUnder(docsPath, docServiceBuilder.build());\n+        NonReactiveWebApplicationCondition() {\n+            super(ConfigurationPhase.PARSE_CONFIGURATION);\n         }\n \n-        final Server server = serverBuilder.build();\n-\n-        server.start().handle((result, t) -> {\n-            if (t != null) {\n-                throw new IllegalStateException(\"Armeria server failed to start\", t);\n-            }\n-            return result;\n-        }).join();\n-        logger.info(\"Armeria server started at ports: {}\", server.activePorts());\n-        return server;\n-    }\n-\n-    /**\n-     * A user can configure a {@link Server} by providing an {@link ArmeriaServerConfigurator} bean.\n-     */\n-    @Bean\n-    @ConditionalOnProperty(\"server.shutdown\")\n-    public ArmeriaServerConfigurator gracefulShutdownServerConfigurator(\n-            @Value(\"${server.shutdown}\") String shutdown,\n-            @Value(\"${spring.lifecycle.timeout-per-shutdown-phase:30s}\") Duration duration) {\n-        if (GRACEFUL_SHUTDOWN.equalsIgnoreCase(shutdown)) {\n-            return sb -> sb.gracefulShutdownTimeout(duration, duration);\n-        } else {\n-            return sb -> {};\n-        }\n+        @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n+        static class ReactiveWebApplication {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0NjY0Nw=="}, "originalCommit": {"oid": "f1e0eea3be9fe631e5f5da21e144e606dae10271"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3MDM5MA==", "bodyText": "These settings can also be seen in spring boot code", "url": "https://github.com/line/armeria/pull/3102#discussion_r504670390", "createdAt": "2020-10-14T13:19:58Z", "author": {"login": "heowc"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaAutoConfiguration.java", "diffHunk": "@@ -16,132 +16,35 @@\n \n package com.linecorp.armeria.spring;\n \n-import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationNetUtil.configurePorts;\n-import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configureServerWithArmeriaSettings;\n-\n-import java.time.Duration;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.function.Consumer;\n-\n-import javax.annotation.Nullable;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.condition.NoneNestedConditions;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n \n-import com.google.common.base.Strings;\n-\n-import com.linecorp.armeria.common.SessionProtocol;\n-import com.linecorp.armeria.common.metric.MeterIdPrefixFunction;\n import com.linecorp.armeria.server.Server;\n-import com.linecorp.armeria.server.ServerBuilder;\n-import com.linecorp.armeria.server.ServerPort;\n-import com.linecorp.armeria.server.docs.DocService;\n-import com.linecorp.armeria.server.docs.DocServiceBuilder;\n-import com.linecorp.armeria.server.healthcheck.HealthChecker;\n-import com.linecorp.armeria.spring.ArmeriaSettings.Port;\n-\n-import io.micrometer.core.instrument.MeterRegistry;\n-import io.micrometer.core.instrument.Metrics;\n+import com.linecorp.armeria.spring.ArmeriaAutoConfiguration.NonReactiveWebApplicationCondition;\n \n /**\n  * Spring Boot {@link Configuration} that provides Armeria integration.\n  */\n @Configuration\n+@Conditional(NonReactiveWebApplicationCondition.class)\n @EnableConfigurationProperties(ArmeriaSettings.class)\n @ConditionalOnMissingBean(Server.class)\n-public class ArmeriaAutoConfiguration {\n-    private static final Logger logger = LoggerFactory.getLogger(ArmeriaAutoConfiguration.class);\n-\n-    private static final Port DEFAULT_PORT = new Port().setPort(8080)\n-                                                       .setProtocol(SessionProtocol.HTTP);\n-\n-    private static final String GRACEFUL_SHUTDOWN = \"graceful\";\n+public class ArmeriaAutoConfiguration extends AbstractArmeriaAutoConfiguration {\n \n     /**\n-     * Create a started {@link Server} bean.\n+     * Condition for non-reactive web application type.\n      */\n-    @Bean\n-    @Nullable\n-    public Server armeriaServer(\n-            ArmeriaSettings armeriaSettings,\n-            Optional<MeterRegistry> meterRegistry,\n-            Optional<List<HealthChecker>> healthCheckers,\n-            Optional<MeterIdPrefixFunction> meterIdPrefixFunction,\n-            Optional<List<ArmeriaServerConfigurator>> armeriaServerConfigurators,\n-            Optional<List<Consumer<ServerBuilder>>> armeriaServerBuilderConsumers,\n-            Optional<List<DocServiceConfigurator>> docServiceConfigurators) {\n-\n-        if (!armeriaServerConfigurators.isPresent() &&\n-            !armeriaServerBuilderConsumers.isPresent()) {\n-            // No services to register, no need to start up armeria server.\n-            return null;\n-        }\n-\n-        final ServerBuilder serverBuilder = Server.builder();\n-\n-        final List<Port> ports = armeriaSettings.getPorts();\n-        if (ports.isEmpty()) {\n-            serverBuilder.port(new ServerPort(DEFAULT_PORT.getPort(), DEFAULT_PORT.getProtocols()));\n-        } else {\n-            configurePorts(serverBuilder, ports);\n-        }\n-\n-        final DocServiceBuilder docServiceBuilder = DocService.builder();\n-        docServiceConfigurators.ifPresent(\n-                configurators -> configurators.forEach(\n-                        configurator -> configurator.configure(docServiceBuilder)));\n-\n-        final String docsPath = armeriaSettings.getDocsPath();\n-        configureServerWithArmeriaSettings(serverBuilder, armeriaSettings,\n-                                           meterRegistry.orElse(Metrics.globalRegistry),\n-                                           healthCheckers.orElseGet(Collections::emptyList),\n-                                           meterIdPrefixFunction.orElse(\n-                                                   MeterIdPrefixFunction.ofDefault(\"armeria.server\")));\n+    static class NonReactiveWebApplicationCondition extends NoneNestedConditions {\n \n-        armeriaServerConfigurators.ifPresent(\n-                configurators -> configurators.forEach(\n-                        configurator -> configurator.configure(serverBuilder)));\n-\n-        armeriaServerBuilderConsumers.ifPresent(\n-                consumers -> consumers.forEach(\n-                        consumer -> consumer.accept(serverBuilder)));\n-\n-        if (!Strings.isNullOrEmpty(docsPath)) {\n-            serverBuilder.serviceUnder(docsPath, docServiceBuilder.build());\n+        NonReactiveWebApplicationCondition() {\n+            super(ConfigurationPhase.PARSE_CONFIGURATION);\n         }\n \n-        final Server server = serverBuilder.build();\n-\n-        server.start().handle((result, t) -> {\n-            if (t != null) {\n-                throw new IllegalStateException(\"Armeria server failed to start\", t);\n-            }\n-            return result;\n-        }).join();\n-        logger.info(\"Armeria server started at ports: {}\", server.activePorts());\n-        return server;\n-    }\n-\n-    /**\n-     * A user can configure a {@link Server} by providing an {@link ArmeriaServerConfigurator} bean.\n-     */\n-    @Bean\n-    @ConditionalOnProperty(\"server.shutdown\")\n-    public ArmeriaServerConfigurator gracefulShutdownServerConfigurator(\n-            @Value(\"${server.shutdown}\") String shutdown,\n-            @Value(\"${spring.lifecycle.timeout-per-shutdown-phase:30s}\") Duration duration) {\n-        if (GRACEFUL_SHUTDOWN.equalsIgnoreCase(shutdown)) {\n-            return sb -> sb.gracefulShutdownTimeout(duration, duration);\n-        } else {\n-            return sb -> {};\n-        }\n+        @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n+        static class ReactiveWebApplication {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0NjY0Nw=="}, "originalCommit": {"oid": "f1e0eea3be9fe631e5f5da21e144e606dae10271"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcwMTgxMw==", "bodyText": "Thanks for the education. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3102#discussion_r504701813", "createdAt": "2020-10-14T14:00:18Z", "author": {"login": "minwoox"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaAutoConfiguration.java", "diffHunk": "@@ -16,132 +16,35 @@\n \n package com.linecorp.armeria.spring;\n \n-import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationNetUtil.configurePorts;\n-import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configureServerWithArmeriaSettings;\n-\n-import java.time.Duration;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.function.Consumer;\n-\n-import javax.annotation.Nullable;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n+import org.springframework.boot.autoconfigure.condition.NoneNestedConditions;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n \n-import com.google.common.base.Strings;\n-\n-import com.linecorp.armeria.common.SessionProtocol;\n-import com.linecorp.armeria.common.metric.MeterIdPrefixFunction;\n import com.linecorp.armeria.server.Server;\n-import com.linecorp.armeria.server.ServerBuilder;\n-import com.linecorp.armeria.server.ServerPort;\n-import com.linecorp.armeria.server.docs.DocService;\n-import com.linecorp.armeria.server.docs.DocServiceBuilder;\n-import com.linecorp.armeria.server.healthcheck.HealthChecker;\n-import com.linecorp.armeria.spring.ArmeriaSettings.Port;\n-\n-import io.micrometer.core.instrument.MeterRegistry;\n-import io.micrometer.core.instrument.Metrics;\n+import com.linecorp.armeria.spring.ArmeriaAutoConfiguration.NonReactiveWebApplicationCondition;\n \n /**\n  * Spring Boot {@link Configuration} that provides Armeria integration.\n  */\n @Configuration\n+@Conditional(NonReactiveWebApplicationCondition.class)\n @EnableConfigurationProperties(ArmeriaSettings.class)\n @ConditionalOnMissingBean(Server.class)\n-public class ArmeriaAutoConfiguration {\n-    private static final Logger logger = LoggerFactory.getLogger(ArmeriaAutoConfiguration.class);\n-\n-    private static final Port DEFAULT_PORT = new Port().setPort(8080)\n-                                                       .setProtocol(SessionProtocol.HTTP);\n-\n-    private static final String GRACEFUL_SHUTDOWN = \"graceful\";\n+public class ArmeriaAutoConfiguration extends AbstractArmeriaAutoConfiguration {\n \n     /**\n-     * Create a started {@link Server} bean.\n+     * Condition for non-reactive web application type.\n      */\n-    @Bean\n-    @Nullable\n-    public Server armeriaServer(\n-            ArmeriaSettings armeriaSettings,\n-            Optional<MeterRegistry> meterRegistry,\n-            Optional<List<HealthChecker>> healthCheckers,\n-            Optional<MeterIdPrefixFunction> meterIdPrefixFunction,\n-            Optional<List<ArmeriaServerConfigurator>> armeriaServerConfigurators,\n-            Optional<List<Consumer<ServerBuilder>>> armeriaServerBuilderConsumers,\n-            Optional<List<DocServiceConfigurator>> docServiceConfigurators) {\n-\n-        if (!armeriaServerConfigurators.isPresent() &&\n-            !armeriaServerBuilderConsumers.isPresent()) {\n-            // No services to register, no need to start up armeria server.\n-            return null;\n-        }\n-\n-        final ServerBuilder serverBuilder = Server.builder();\n-\n-        final List<Port> ports = armeriaSettings.getPorts();\n-        if (ports.isEmpty()) {\n-            serverBuilder.port(new ServerPort(DEFAULT_PORT.getPort(), DEFAULT_PORT.getProtocols()));\n-        } else {\n-            configurePorts(serverBuilder, ports);\n-        }\n-\n-        final DocServiceBuilder docServiceBuilder = DocService.builder();\n-        docServiceConfigurators.ifPresent(\n-                configurators -> configurators.forEach(\n-                        configurator -> configurator.configure(docServiceBuilder)));\n-\n-        final String docsPath = armeriaSettings.getDocsPath();\n-        configureServerWithArmeriaSettings(serverBuilder, armeriaSettings,\n-                                           meterRegistry.orElse(Metrics.globalRegistry),\n-                                           healthCheckers.orElseGet(Collections::emptyList),\n-                                           meterIdPrefixFunction.orElse(\n-                                                   MeterIdPrefixFunction.ofDefault(\"armeria.server\")));\n+    static class NonReactiveWebApplicationCondition extends NoneNestedConditions {\n \n-        armeriaServerConfigurators.ifPresent(\n-                configurators -> configurators.forEach(\n-                        configurator -> configurator.configure(serverBuilder)));\n-\n-        armeriaServerBuilderConsumers.ifPresent(\n-                consumers -> consumers.forEach(\n-                        consumer -> consumer.accept(serverBuilder)));\n-\n-        if (!Strings.isNullOrEmpty(docsPath)) {\n-            serverBuilder.serviceUnder(docsPath, docServiceBuilder.build());\n+        NonReactiveWebApplicationCondition() {\n+            super(ConfigurationPhase.PARSE_CONFIGURATION);\n         }\n \n-        final Server server = serverBuilder.build();\n-\n-        server.start().handle((result, t) -> {\n-            if (t != null) {\n-                throw new IllegalStateException(\"Armeria server failed to start\", t);\n-            }\n-            return result;\n-        }).join();\n-        logger.info(\"Armeria server started at ports: {}\", server.activePorts());\n-        return server;\n-    }\n-\n-    /**\n-     * A user can configure a {@link Server} by providing an {@link ArmeriaServerConfigurator} bean.\n-     */\n-    @Bean\n-    @ConditionalOnProperty(\"server.shutdown\")\n-    public ArmeriaServerConfigurator gracefulShutdownServerConfigurator(\n-            @Value(\"${server.shutdown}\") String shutdown,\n-            @Value(\"${spring.lifecycle.timeout-per-shutdown-phase:30s}\") Duration duration) {\n-        if (GRACEFUL_SHUTDOWN.equalsIgnoreCase(shutdown)) {\n-            return sb -> sb.gracefulShutdownTimeout(duration, duration);\n-        } else {\n-            return sb -> {};\n-        }\n+        @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n+        static class ReactiveWebApplication {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0NjY0Nw=="}, "originalCommit": {"oid": "f1e0eea3be9fe631e5f5da21e144e606dae10271"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjAxNzI4OnYy", "diffSide": "RIGHT", "path": "it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTo1Njo0MlrOHhaEyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjozNDowN1rOHhbnGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5MjI2NQ==", "bodyText": "nit: Could use serviceUnder(\"/tomcat/api/rest/v1\", ...)?", "url": "https://github.com/line/armeria/pull/3102#discussion_r504792265", "createdAt": "2020-10-14T15:56:42Z", "author": {"login": "ikhoon"}, "path": "it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring.mixed.tomcat;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.catalina.startup.Tomcat;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.web.context.WebServerApplicationContext;\n+import org.springframework.boot.web.embedded.tomcat.TomcatWebServer;\n+import org.springframework.boot.web.server.WebServer;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+\n+import com.linecorp.armeria.server.tomcat.TomcatService;\n+import com.linecorp.armeria.spring.ArmeriaServerConfigurator;\n+\n+@SpringBootApplication\n+public class SpringTomcatApplication {\n+\n+    @Inject\n+    private ApplicationContext applicationContext;\n+\n+    /**\n+     * Bean to configure Armeria Tomcat service.\n+     * @return configuration bean.\n+     */\n+    @Bean\n+    public ArmeriaServerConfigurator armeriaTomcat() {\n+        final WebServer webServer = ((WebServerApplicationContext) applicationContext).getWebServer();\n+        if (webServer instanceof TomcatWebServer) {\n+            final Tomcat tomcat = ((TomcatWebServer) webServer).getTomcat();\n+\n+            return serverBuilder -> serverBuilder.service(\"prefix:/tomcat/api/rest/v1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ddddec3027a1cc5c1849d239360cb02287f8abd"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgxNzQzNA==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/3102#discussion_r504817434", "createdAt": "2020-10-14T16:34:07Z", "author": {"login": "heowc"}, "path": "it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring.mixed.tomcat;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.catalina.startup.Tomcat;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.web.context.WebServerApplicationContext;\n+import org.springframework.boot.web.embedded.tomcat.TomcatWebServer;\n+import org.springframework.boot.web.server.WebServer;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+\n+import com.linecorp.armeria.server.tomcat.TomcatService;\n+import com.linecorp.armeria.spring.ArmeriaServerConfigurator;\n+\n+@SpringBootApplication\n+public class SpringTomcatApplication {\n+\n+    @Inject\n+    private ApplicationContext applicationContext;\n+\n+    /**\n+     * Bean to configure Armeria Tomcat service.\n+     * @return configuration bean.\n+     */\n+    @Bean\n+    public ArmeriaServerConfigurator armeriaTomcat() {\n+        final WebServer webServer = ((WebServerApplicationContext) applicationContext).getWebServer();\n+        if (webServer instanceof TomcatWebServer) {\n+            final Tomcat tomcat = ((TomcatWebServer) webServer).getTomcat();\n+\n+            return serverBuilder -> serverBuilder.service(\"prefix:/tomcat/api/rest/v1\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5MjI2NQ=="}, "originalCommit": {"oid": "1ddddec3027a1cc5c1849d239360cb02287f8abd"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjAyMTAzOnYy", "diffSide": "RIGHT", "path": "it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTo1NzoyOFrOHhaHEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjozNDoxNVrOHhbncw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5Mjg1MQ==", "bodyText": "nit: Remove white space?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return serverBuilder -> { };\n          \n          \n            \n                    return serverBuilder -> {};", "url": "https://github.com/line/armeria/pull/3102#discussion_r504792851", "createdAt": "2020-10-14T15:57:28Z", "author": {"login": "ikhoon"}, "path": "it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring.mixed.tomcat;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.catalina.startup.Tomcat;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.web.context.WebServerApplicationContext;\n+import org.springframework.boot.web.embedded.tomcat.TomcatWebServer;\n+import org.springframework.boot.web.server.WebServer;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+\n+import com.linecorp.armeria.server.tomcat.TomcatService;\n+import com.linecorp.armeria.spring.ArmeriaServerConfigurator;\n+\n+@SpringBootApplication\n+public class SpringTomcatApplication {\n+\n+    @Inject\n+    private ApplicationContext applicationContext;\n+\n+    /**\n+     * Bean to configure Armeria Tomcat service.\n+     * @return configuration bean.\n+     */\n+    @Bean\n+    public ArmeriaServerConfigurator armeriaTomcat() {\n+        final WebServer webServer = ((WebServerApplicationContext) applicationContext).getWebServer();\n+        if (webServer instanceof TomcatWebServer) {\n+            final Tomcat tomcat = ((TomcatWebServer) webServer).getTomcat();\n+\n+            return serverBuilder -> serverBuilder.service(\"prefix:/tomcat/api/rest/v1\",\n+                                                          TomcatService.of(tomcat));\n+        }\n+        return serverBuilder -> { };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ddddec3027a1cc5c1849d239360cb02287f8abd"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgxNzUyMw==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/3102#discussion_r504817523", "createdAt": "2020-10-14T16:34:15Z", "author": {"login": "heowc"}, "path": "it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring.mixed.tomcat;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.catalina.startup.Tomcat;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.web.context.WebServerApplicationContext;\n+import org.springframework.boot.web.embedded.tomcat.TomcatWebServer;\n+import org.springframework.boot.web.server.WebServer;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+\n+import com.linecorp.armeria.server.tomcat.TomcatService;\n+import com.linecorp.armeria.spring.ArmeriaServerConfigurator;\n+\n+@SpringBootApplication\n+public class SpringTomcatApplication {\n+\n+    @Inject\n+    private ApplicationContext applicationContext;\n+\n+    /**\n+     * Bean to configure Armeria Tomcat service.\n+     * @return configuration bean.\n+     */\n+    @Bean\n+    public ArmeriaServerConfigurator armeriaTomcat() {\n+        final WebServer webServer = ((WebServerApplicationContext) applicationContext).getWebServer();\n+        if (webServer instanceof TomcatWebServer) {\n+            final Tomcat tomcat = ((TomcatWebServer) webServer).getTomcat();\n+\n+            return serverBuilder -> serverBuilder.service(\"prefix:/tomcat/api/rest/v1\",\n+                                                          TomcatService.of(tomcat));\n+        }\n+        return serverBuilder -> { };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5Mjg1MQ=="}, "originalCommit": {"oid": "1ddddec3027a1cc5c1849d239360cb02287f8abd"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjA0MzQwOnYy", "diffSide": "RIGHT", "path": "spring/boot1-autoconfigure/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjowMjozMVrOHhaVNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjozNDoyN1rOHhbn_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5NjQ2OA==", "bodyText": "Is there any chance users use this class directly?\nIf so, don't we need to rename ArmeriaSpringBoot1AutoConfiguration to ArmeriaAutoConfiguration for avoiding breaking changes?", "url": "https://github.com/line/armeria/pull/3102#discussion_r504796468", "createdAt": "2020-10-14T16:02:31Z", "author": {"login": "ikhoon"}, "path": "spring/boot1-autoconfigure/build.gradle", "diffHunk": "@@ -64,6 +64,7 @@ def autoconfigureProjectDir = \"${rootProject.projectDir}/spring/boot2-autoconfig\n task generateSources(type: Copy) {\n     from \"${autoconfigureProjectDir}/src/main/java\"\n     into \"${project.ext.genSrcDir}/main/java\"\n+    exclude '**/ArmeriaAutoConfiguration.java'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ddddec3027a1cc5c1849d239360cb02287f8abd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgxNzY2MA==", "bodyText": "Good idea! \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/3102#discussion_r504817660", "createdAt": "2020-10-14T16:34:27Z", "author": {"login": "heowc"}, "path": "spring/boot1-autoconfigure/build.gradle", "diffHunk": "@@ -64,6 +64,7 @@ def autoconfigureProjectDir = \"${rootProject.projectDir}/spring/boot2-autoconfig\n task generateSources(type: Copy) {\n     from \"${autoconfigureProjectDir}/src/main/java\"\n     into \"${project.ext.genSrcDir}/main/java\"\n+    exclude '**/ArmeriaAutoConfiguration.java'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5NjQ2OA=="}, "originalCommit": {"oid": "1ddddec3027a1cc5c1849d239360cb02287f8abd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTgyOTg0OnYy", "diffSide": "RIGHT", "path": "it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNTowMjo0NFrOHinCNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNToyMjo1OFrOHinWyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1MzE3NQ==", "bodyText": "nit: Intention? \ud83d\ude06", "url": "https://github.com/line/armeria/pull/3102#discussion_r506053175", "createdAt": "2020-10-16T05:02:44Z", "author": {"login": "ikhoon"}, "path": "it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring.mixed.tomcat;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.catalina.startup.Tomcat;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.web.context.WebServerApplicationContext;\n+import org.springframework.boot.web.embedded.tomcat.TomcatWebServer;\n+import org.springframework.boot.web.server.WebServer;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+\n+import com.linecorp.armeria.server.tomcat.TomcatService;\n+import com.linecorp.armeria.spring.ArmeriaServerConfigurator;\n+\n+@SpringBootApplication\n+public class SpringTomcatApplication {\n+\n+    @Inject\n+    private ApplicationContext applicationContext;\n+\n+    /**\n+     * Bean to configure Armeria Tomcat service.\n+     * @return configuration bean.\n+     */\n+    @Bean\n+    public ArmeriaServerConfigurator armeriaTomcat() {\n+        final WebServer webServer = ((WebServerApplicationContext) applicationContext).getWebServer();\n+        if (webServer instanceof TomcatWebServer) {\n+            final Tomcat tomcat = ((TomcatWebServer) webServer).getTomcat();\n+\n+            return serverBuilder -> serverBuilder.serviceUnder(\"/tomcat/api/rest/v1\",\n+                                                          TomcatService.of(tomcat));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9d29e84ac603cf2603305920af4ec0bf753e9cf"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1ODQ0MA==", "bodyText": "Oops... Fixed :)", "url": "https://github.com/line/armeria/pull/3102#discussion_r506058440", "createdAt": "2020-10-16T05:22:58Z", "author": {"login": "heowc"}, "path": "it/spring/boot2-mixed-tomcat9/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring.mixed.tomcat;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.catalina.startup.Tomcat;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.web.context.WebServerApplicationContext;\n+import org.springframework.boot.web.embedded.tomcat.TomcatWebServer;\n+import org.springframework.boot.web.server.WebServer;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+\n+import com.linecorp.armeria.server.tomcat.TomcatService;\n+import com.linecorp.armeria.spring.ArmeriaServerConfigurator;\n+\n+@SpringBootApplication\n+public class SpringTomcatApplication {\n+\n+    @Inject\n+    private ApplicationContext applicationContext;\n+\n+    /**\n+     * Bean to configure Armeria Tomcat service.\n+     * @return configuration bean.\n+     */\n+    @Bean\n+    public ArmeriaServerConfigurator armeriaTomcat() {\n+        final WebServer webServer = ((WebServerApplicationContext) applicationContext).getWebServer();\n+        if (webServer instanceof TomcatWebServer) {\n+            final Tomcat tomcat = ((TomcatWebServer) webServer).getTomcat();\n+\n+            return serverBuilder -> serverBuilder.serviceUnder(\"/tomcat/api/rest/v1\",\n+                                                          TomcatService.of(tomcat));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1MzE3NQ=="}, "originalCommit": {"oid": "e9d29e84ac603cf2603305920af4ec0bf753e9cf"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1929, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}