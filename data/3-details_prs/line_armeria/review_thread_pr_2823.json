{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NzE1NjM1", "number": 2823, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNjozOToyMFrOEHccUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzoyOToxMlrOEHdQjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjQxNDg5OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/0.99.7.mdx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNjozOToyMFrOGmznGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNjo1OTozOFrOGm0GGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NDY2Nw==", "bodyText": "Should mention the removal of some of the unsafe APIs in favor of the new one.", "url": "https://github.com/line/armeria/pull/2823#discussion_r443344667", "createdAt": "2020-06-22T06:39:20Z", "author": {"login": "anuraaga"}, "path": "site/src/pages/release-notes/0.99.7.mdx", "diffHunk": "@@ -0,0 +1,243 @@\n+## \ud83c\udf1f New features\n+\n+- You can now specify the maximum lifespan of server-side connections using\n+  <type://ServerBuilder#maxConnectionAge(Duration)>. This is useful when you have to deal with a load balancer\n+  without HTTP/2 support. #2747 #2796\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .maxConnectionAge(Duration.ofMinutes(1))\n+            ...\n+            .build();\n+  ```\n+- You can now record the name of the service that handled a request into <type://RequestOnlyLog#serviceName()>.\n+  #2768 #2780 #2809 #2820\n+  - By using <type://ServiceBindingBuilder#defaultServiceName(String)>:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .route().path(\"/service\")\n+                      .defaultServiceName(\"my-service\")\n+                      .build(new MyService())\n+              .build();\n+    ```\n+  - By using <type://@ServiceName>:\n+    ```java\n+    @ServiceName(\"my-service\")\n+    public class MyAnnotatedService {\n+        @Get(\"/get\")\n+        public String get() { ... }\n+\n+        @Post(\"/set\")\n+        @ServiceName(\"my-post-service\")\n+        public String post(@Param String value) { ... }\n+    }\n+    ```\n+  - Programmatically:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .service(\"/service\", (ctx, req) -> {\n+                  ctx.logBuilder().serviceName(\"my-service\");\n+              })\n+              .build();\n+    ```\n+  - Armeria will use the FQCN of the service class if you did not specify a service name.\n+- You can now use `@Nullable` annotation to specify an optional parameter or request object in annotated\n+  services. Previously, only the parameters with <type://@Default> annotation or `Optional` type were accepted.\n+  #2773\n+  ```java\n+  public class MyAnnotatedService {\n+      // null will be injected into 'value' instead of returning\n+      // '400 Bad Request' when 'value' is missing.\n+      @Get(\"/get\")\n+      public String get(@Param @Nullable String value) { ... }\n+  }\n+  ```\n+- You can now use the classes in the `java.time` package in annotated services. #2760 #2783 #2792 #2799\n+  ```java\n+  public class MyAnnotatedService {\n+      @Get(\"/sleep/{duration}\")\n+      public void sleep(@Param Duration duration) { ... }\n+  }\n+  ```\n+- You can now determine whether a request was successful or not from HTTP trailers in\n+  <type://CircuitBreakerClient> and <type://RetryingClient> using `onResponseTrailers()` method.\n+  This can be useful when you work with gRPC, whose status code is encoded in the `grpc-status` trailer. #2816\n+  ```java\n+  CircuitBreaker cb = CircuitBreaker.of(\"my-service\");\n+  CircuitBreakerRule cbr =\n+      CircuitBreakerRule.builder()\n+                        .onResponseTrailers(trailers -> {\n+                            return trailers.getInt(\"grpc-status\", -1) != 0;\n+                        })\n+                        .thenFailure()\n+                        .build();\n+\n+  MyServiceStub myService =\n+      Clients.builder(\"gproto+h2c://example.com/\")\n+             .decorator(CircuitBreakerClient.newDecorator(cb, cbr))\n+             .build(MyServiceStub.class);\n+  ```\n+- <type://RequestLog> sanitizers now accept <type://RequestContext> as an additional input, so that\n+  the sanitizers can behave differently depending on the current path, etc. #2803\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .decorator(LoggingService.builder()\n+                                     .headersSanitizer((ctx, headers) -> {\n+                                         if (ctx.path().startsWith(\"/secret/\")) {\n+                                             return \"<secret>\";\n+                                         } else {\n+                                             return headers;\n+                                         }\n+                                     })\n+                                     .newDecorator())\n+            ...\n+            .build();\n+  ```\n+- Armeria now supports service discovery and registration for\n+  [Curator Service Discovery](https://curator.apache.org/curator-x-discovery/index.html) and\n+  [Finagle ServerSets](http://stevenskelton.ca/finagle-serverset-clusters-using-zookeeper/). #2673 #2749 #2791\n+  ```java\n+  CuratorFramework curator = ...;\n+  // Client side:\n+  //// Curator Service Discovery:\n+  EndpointGroup curatorEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/curator\",\n+                                ZooKeeperDiscoverySpec.curator(\"my-service\"));\n+  //// Finagle ServerSets:\n+  EndpointGroup serverSetsEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/serversets\"\n+                                ZooKeeperDiscoverySpec.serverSets());\n+\n+  // Server-side:\n+  Server server = ...;\n+  //// Curator Service Discovery\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/curator\",\n+      ZooKeeperRegistrationSpec.curator(\"my-service\")));\n+  //// Finagle ServerSets:\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/serversets\",\n+      ZooKeeperRegistrationSpec.serverSets()));\n+  ```\n+- You can now build <type://OAuth1aToken> more conveniently using the builder API. #2770\n+  ```java\n+  OAuth1aToken token =\n+      OAuth1aToken.builder()\n+                  .realm(\"...\")\n+                  .consumerKey(\"...\")\n+                  .token(\"...\")\n+                  ...\n+                  .build();\n+  ```\n+- The Spring Boot integration now hides all services under `/internal/` for non-management ports when\n+  `management.server.port` property is set. #2408 #2502\n+- The Spring Boot integration now supports\n+  [the new graceful shutdown properties](https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/reference/html/spring-boot-features.html#boot-features-graceful-shutdown)\n+  introduced in Spring Boot 2.3. #2784 #2802\n+- Added a new API for handling reference counted or pooled objects such as <type://PooledHttpData>) in\n+  a relatively safer way. #2448\n+  - See <type://PooledHttpData>, <type://PooledWebClient>, <type://PooledHttpRequest> and\n+    <type://PooledHttpResponse> for more information.\n+\n+## \ud83d\udcc8 Improvements\n+\n+- Cleaned up minor issues reported by [errorprone](https://errorprone.info/). #2772\n+- Made some exception messages more user-friendly. #2751\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- It's now allowed to specify an absolute URL *only when* an <type://WebClient> was created *without* a base\n+  URL. #2757\n+  ```java\n+  WebClient clientWithoutBaseUrl = WebClient.of();\n+  WebClient clientWithBaseUrl = WebClient.of(\"https://example.com/\");\n+  // Good\n+  clientWithBaseUrl.get(\"/bar\");\n+  clientWithoutBaseUrl.get(\"https://foo.com/\");\n+  // Bad\n+  clientWithBaseUrl.get(\"https://foo.com/\");\n+  clientWithoutBaseUrl.get(\"/bar\");\n+  ```\n+- Boolean parameter conversion became more strict in annotated services. #2767 #2774\n+  - Only `true`, `false`, `1` and `0` are accepted. Other values will cause a `400 Bad Request` response.\n+- <type://DocService> web UI now shows the 'request body' field for `DELETE` and `PATCH` methods in the debug\n+  form. #2756 #2819\n+- <type://JacksonRequestConverterFunction> now handles the case where the target type has a type parameter,\n+  e.g. `List<Long>`. #2769 #2779\n+- Fixed a bug where the current <type://ServiceRequestContext> is not pushed when invoking\n+  <type://ResponseConverterFunction#convertResponse(ServiceRequestContext,ResponseHeaders,Object,HttpHeaders)>.\n+  #2789\n+- <type://RequestContextExportingAppender> now handles the `<exports />` tag correctly. #2781\n+- Fixed a bug where some Reactive Streams `Subscriber` implementations violate the specification. #2815\n+- You no longer get sporadic <type://WriteTimeoutException> from proxied connections. #2801 #2805\n+- You no longer get a <type://CancelledSubscriptionException> unnecessarily when using\n+  <type://PublisherBasedStreamMessage>. #2797\n+- You no longer get sporadic `EncoderException`s from HTTP/1 connections. #2765\n+- It's now disallowed to specify the following headers in gRPC `Metadata`. #2718\n+  - `:status`\n+  - `grpc-message`\n+  - `grpc-status`\n+  - `armeria.grpc.ThrowableProto-bin`\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+\n+- <type://AbstractUnwrappable#delegate()> has been deprecated in favor of <type://Unwrappable#unwrap()>.\n+\n+## \u2622\ufe0f Breaking changes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acf6b8e2c51198fc4062515cf8e1cdd6541ebe4"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM1MjYwMw==", "bodyText": "Fixed. Let me know if we need to add more. \ud83d\ude47", "url": "https://github.com/line/armeria/pull/2823#discussion_r443352603", "createdAt": "2020-06-22T06:59:38Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/0.99.7.mdx", "diffHunk": "@@ -0,0 +1,243 @@\n+## \ud83c\udf1f New features\n+\n+- You can now specify the maximum lifespan of server-side connections using\n+  <type://ServerBuilder#maxConnectionAge(Duration)>. This is useful when you have to deal with a load balancer\n+  without HTTP/2 support. #2747 #2796\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .maxConnectionAge(Duration.ofMinutes(1))\n+            ...\n+            .build();\n+  ```\n+- You can now record the name of the service that handled a request into <type://RequestOnlyLog#serviceName()>.\n+  #2768 #2780 #2809 #2820\n+  - By using <type://ServiceBindingBuilder#defaultServiceName(String)>:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .route().path(\"/service\")\n+                      .defaultServiceName(\"my-service\")\n+                      .build(new MyService())\n+              .build();\n+    ```\n+  - By using <type://@ServiceName>:\n+    ```java\n+    @ServiceName(\"my-service\")\n+    public class MyAnnotatedService {\n+        @Get(\"/get\")\n+        public String get() { ... }\n+\n+        @Post(\"/set\")\n+        @ServiceName(\"my-post-service\")\n+        public String post(@Param String value) { ... }\n+    }\n+    ```\n+  - Programmatically:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .service(\"/service\", (ctx, req) -> {\n+                  ctx.logBuilder().serviceName(\"my-service\");\n+              })\n+              .build();\n+    ```\n+  - Armeria will use the FQCN of the service class if you did not specify a service name.\n+- You can now use `@Nullable` annotation to specify an optional parameter or request object in annotated\n+  services. Previously, only the parameters with <type://@Default> annotation or `Optional` type were accepted.\n+  #2773\n+  ```java\n+  public class MyAnnotatedService {\n+      // null will be injected into 'value' instead of returning\n+      // '400 Bad Request' when 'value' is missing.\n+      @Get(\"/get\")\n+      public String get(@Param @Nullable String value) { ... }\n+  }\n+  ```\n+- You can now use the classes in the `java.time` package in annotated services. #2760 #2783 #2792 #2799\n+  ```java\n+  public class MyAnnotatedService {\n+      @Get(\"/sleep/{duration}\")\n+      public void sleep(@Param Duration duration) { ... }\n+  }\n+  ```\n+- You can now determine whether a request was successful or not from HTTP trailers in\n+  <type://CircuitBreakerClient> and <type://RetryingClient> using `onResponseTrailers()` method.\n+  This can be useful when you work with gRPC, whose status code is encoded in the `grpc-status` trailer. #2816\n+  ```java\n+  CircuitBreaker cb = CircuitBreaker.of(\"my-service\");\n+  CircuitBreakerRule cbr =\n+      CircuitBreakerRule.builder()\n+                        .onResponseTrailers(trailers -> {\n+                            return trailers.getInt(\"grpc-status\", -1) != 0;\n+                        })\n+                        .thenFailure()\n+                        .build();\n+\n+  MyServiceStub myService =\n+      Clients.builder(\"gproto+h2c://example.com/\")\n+             .decorator(CircuitBreakerClient.newDecorator(cb, cbr))\n+             .build(MyServiceStub.class);\n+  ```\n+- <type://RequestLog> sanitizers now accept <type://RequestContext> as an additional input, so that\n+  the sanitizers can behave differently depending on the current path, etc. #2803\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .decorator(LoggingService.builder()\n+                                     .headersSanitizer((ctx, headers) -> {\n+                                         if (ctx.path().startsWith(\"/secret/\")) {\n+                                             return \"<secret>\";\n+                                         } else {\n+                                             return headers;\n+                                         }\n+                                     })\n+                                     .newDecorator())\n+            ...\n+            .build();\n+  ```\n+- Armeria now supports service discovery and registration for\n+  [Curator Service Discovery](https://curator.apache.org/curator-x-discovery/index.html) and\n+  [Finagle ServerSets](http://stevenskelton.ca/finagle-serverset-clusters-using-zookeeper/). #2673 #2749 #2791\n+  ```java\n+  CuratorFramework curator = ...;\n+  // Client side:\n+  //// Curator Service Discovery:\n+  EndpointGroup curatorEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/curator\",\n+                                ZooKeeperDiscoverySpec.curator(\"my-service\"));\n+  //// Finagle ServerSets:\n+  EndpointGroup serverSetsEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/serversets\"\n+                                ZooKeeperDiscoverySpec.serverSets());\n+\n+  // Server-side:\n+  Server server = ...;\n+  //// Curator Service Discovery\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/curator\",\n+      ZooKeeperRegistrationSpec.curator(\"my-service\")));\n+  //// Finagle ServerSets:\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/serversets\",\n+      ZooKeeperRegistrationSpec.serverSets()));\n+  ```\n+- You can now build <type://OAuth1aToken> more conveniently using the builder API. #2770\n+  ```java\n+  OAuth1aToken token =\n+      OAuth1aToken.builder()\n+                  .realm(\"...\")\n+                  .consumerKey(\"...\")\n+                  .token(\"...\")\n+                  ...\n+                  .build();\n+  ```\n+- The Spring Boot integration now hides all services under `/internal/` for non-management ports when\n+  `management.server.port` property is set. #2408 #2502\n+- The Spring Boot integration now supports\n+  [the new graceful shutdown properties](https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/reference/html/spring-boot-features.html#boot-features-graceful-shutdown)\n+  introduced in Spring Boot 2.3. #2784 #2802\n+- Added a new API for handling reference counted or pooled objects such as <type://PooledHttpData>) in\n+  a relatively safer way. #2448\n+  - See <type://PooledHttpData>, <type://PooledWebClient>, <type://PooledHttpRequest> and\n+    <type://PooledHttpResponse> for more information.\n+\n+## \ud83d\udcc8 Improvements\n+\n+- Cleaned up minor issues reported by [errorprone](https://errorprone.info/). #2772\n+- Made some exception messages more user-friendly. #2751\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- It's now allowed to specify an absolute URL *only when* an <type://WebClient> was created *without* a base\n+  URL. #2757\n+  ```java\n+  WebClient clientWithoutBaseUrl = WebClient.of();\n+  WebClient clientWithBaseUrl = WebClient.of(\"https://example.com/\");\n+  // Good\n+  clientWithBaseUrl.get(\"/bar\");\n+  clientWithoutBaseUrl.get(\"https://foo.com/\");\n+  // Bad\n+  clientWithBaseUrl.get(\"https://foo.com/\");\n+  clientWithoutBaseUrl.get(\"/bar\");\n+  ```\n+- Boolean parameter conversion became more strict in annotated services. #2767 #2774\n+  - Only `true`, `false`, `1` and `0` are accepted. Other values will cause a `400 Bad Request` response.\n+- <type://DocService> web UI now shows the 'request body' field for `DELETE` and `PATCH` methods in the debug\n+  form. #2756 #2819\n+- <type://JacksonRequestConverterFunction> now handles the case where the target type has a type parameter,\n+  e.g. `List<Long>`. #2769 #2779\n+- Fixed a bug where the current <type://ServiceRequestContext> is not pushed when invoking\n+  <type://ResponseConverterFunction#convertResponse(ServiceRequestContext,ResponseHeaders,Object,HttpHeaders)>.\n+  #2789\n+- <type://RequestContextExportingAppender> now handles the `<exports />` tag correctly. #2781\n+- Fixed a bug where some Reactive Streams `Subscriber` implementations violate the specification. #2815\n+- You no longer get sporadic <type://WriteTimeoutException> from proxied connections. #2801 #2805\n+- You no longer get a <type://CancelledSubscriptionException> unnecessarily when using\n+  <type://PublisherBasedStreamMessage>. #2797\n+- You no longer get sporadic `EncoderException`s from HTTP/1 connections. #2765\n+- It's now disallowed to specify the following headers in gRPC `Metadata`. #2718\n+  - `:status`\n+  - `grpc-message`\n+  - `grpc-status`\n+  - `armeria.grpc.ThrowableProto-bin`\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+\n+- <type://AbstractUnwrappable#delegate()> has been deprecated in favor of <type://Unwrappable#unwrap()>.\n+\n+## \u2622\ufe0f Breaking changes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NDY2Nw=="}, "originalCommit": {"oid": "1acf6b8e2c51198fc4062515cf8e1cdd6541ebe4"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjQxOTgxOnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/0.99.7.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNjo0MTo0MFrOGmzqNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNjo0MTo0MFrOGmzqNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NTQ2Mg==", "bodyText": "nit: an -> a", "url": "https://github.com/line/armeria/pull/2823#discussion_r443345462", "createdAt": "2020-06-22T06:41:40Z", "author": {"login": "minwoox"}, "path": "site/src/pages/release-notes/0.99.7.mdx", "diffHunk": "@@ -0,0 +1,243 @@\n+## \ud83c\udf1f New features\n+\n+- You can now specify the maximum lifespan of server-side connections using\n+  <type://ServerBuilder#maxConnectionAge(Duration)>. This is useful when you have to deal with a load balancer\n+  without HTTP/2 support. #2747 #2796\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .maxConnectionAge(Duration.ofMinutes(1))\n+            ...\n+            .build();\n+  ```\n+- You can now record the name of the service that handled a request into <type://RequestOnlyLog#serviceName()>.\n+  #2768 #2780 #2809 #2820\n+  - By using <type://ServiceBindingBuilder#defaultServiceName(String)>:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .route().path(\"/service\")\n+                      .defaultServiceName(\"my-service\")\n+                      .build(new MyService())\n+              .build();\n+    ```\n+  - By using <type://@ServiceName>:\n+    ```java\n+    @ServiceName(\"my-service\")\n+    public class MyAnnotatedService {\n+        @Get(\"/get\")\n+        public String get() { ... }\n+\n+        @Post(\"/set\")\n+        @ServiceName(\"my-post-service\")\n+        public String post(@Param String value) { ... }\n+    }\n+    ```\n+  - Programmatically:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .service(\"/service\", (ctx, req) -> {\n+                  ctx.logBuilder().serviceName(\"my-service\");\n+              })\n+              .build();\n+    ```\n+  - Armeria will use the FQCN of the service class if you did not specify a service name.\n+- You can now use `@Nullable` annotation to specify an optional parameter or request object in annotated\n+  services. Previously, only the parameters with <type://@Default> annotation or `Optional` type were accepted.\n+  #2773\n+  ```java\n+  public class MyAnnotatedService {\n+      // null will be injected into 'value' instead of returning\n+      // '400 Bad Request' when 'value' is missing.\n+      @Get(\"/get\")\n+      public String get(@Param @Nullable String value) { ... }\n+  }\n+  ```\n+- You can now use the classes in the `java.time` package in annotated services. #2760 #2783 #2792 #2799\n+  ```java\n+  public class MyAnnotatedService {\n+      @Get(\"/sleep/{duration}\")\n+      public void sleep(@Param Duration duration) { ... }\n+  }\n+  ```\n+- You can now determine whether a request was successful or not from HTTP trailers in\n+  <type://CircuitBreakerClient> and <type://RetryingClient> using `onResponseTrailers()` method.\n+  This can be useful when you work with gRPC, whose status code is encoded in the `grpc-status` trailer. #2816\n+  ```java\n+  CircuitBreaker cb = CircuitBreaker.of(\"my-service\");\n+  CircuitBreakerRule cbr =\n+      CircuitBreakerRule.builder()\n+                        .onResponseTrailers(trailers -> {\n+                            return trailers.getInt(\"grpc-status\", -1) != 0;\n+                        })\n+                        .thenFailure()\n+                        .build();\n+\n+  MyServiceStub myService =\n+      Clients.builder(\"gproto+h2c://example.com/\")\n+             .decorator(CircuitBreakerClient.newDecorator(cb, cbr))\n+             .build(MyServiceStub.class);\n+  ```\n+- <type://RequestLog> sanitizers now accept <type://RequestContext> as an additional input, so that\n+  the sanitizers can behave differently depending on the current path, etc. #2803\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .decorator(LoggingService.builder()\n+                                     .headersSanitizer((ctx, headers) -> {\n+                                         if (ctx.path().startsWith(\"/secret/\")) {\n+                                             return \"<secret>\";\n+                                         } else {\n+                                             return headers;\n+                                         }\n+                                     })\n+                                     .newDecorator())\n+            ...\n+            .build();\n+  ```\n+- Armeria now supports service discovery and registration for\n+  [Curator Service Discovery](https://curator.apache.org/curator-x-discovery/index.html) and\n+  [Finagle ServerSets](http://stevenskelton.ca/finagle-serverset-clusters-using-zookeeper/). #2673 #2749 #2791\n+  ```java\n+  CuratorFramework curator = ...;\n+  // Client side:\n+  //// Curator Service Discovery:\n+  EndpointGroup curatorEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/curator\",\n+                                ZooKeeperDiscoverySpec.curator(\"my-service\"));\n+  //// Finagle ServerSets:\n+  EndpointGroup serverSetsEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/serversets\"\n+                                ZooKeeperDiscoverySpec.serverSets());\n+\n+  // Server-side:\n+  Server server = ...;\n+  //// Curator Service Discovery\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/curator\",\n+      ZooKeeperRegistrationSpec.curator(\"my-service\")));\n+  //// Finagle ServerSets:\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/serversets\",\n+      ZooKeeperRegistrationSpec.serverSets()));\n+  ```\n+- You can now build <type://OAuth1aToken> more conveniently using the builder API. #2770\n+  ```java\n+  OAuth1aToken token =\n+      OAuth1aToken.builder()\n+                  .realm(\"...\")\n+                  .consumerKey(\"...\")\n+                  .token(\"...\")\n+                  ...\n+                  .build();\n+  ```\n+- The Spring Boot integration now hides all services under `/internal/` for non-management ports when\n+  `management.server.port` property is set. #2408 #2502\n+- The Spring Boot integration now supports\n+  [the new graceful shutdown properties](https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/reference/html/spring-boot-features.html#boot-features-graceful-shutdown)\n+  introduced in Spring Boot 2.3. #2784 #2802\n+- Added a new API for handling reference counted or pooled objects such as <type://PooledHttpData>) in\n+  a relatively safer way. #2448\n+  - See <type://PooledHttpData>, <type://PooledWebClient>, <type://PooledHttpRequest> and\n+    <type://PooledHttpResponse> for more information.\n+\n+## \ud83d\udcc8 Improvements\n+\n+- Cleaned up minor issues reported by [errorprone](https://errorprone.info/). #2772\n+- Made some exception messages more user-friendly. #2751\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- It's now allowed to specify an absolute URL *only when* an <type://WebClient> was created *without* a base", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acf6b8e2c51198fc4062515cf8e1cdd6541ebe4"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjQyOTU4OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/0.99.7.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNjo0NTozOFrOGmzv5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNjo0NTozOFrOGmzv5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NjkxOQ==", "bodyText": "Should remove ` after >", "url": "https://github.com/line/armeria/pull/2823#discussion_r443346919", "createdAt": "2020-06-22T06:45:38Z", "author": {"login": "minwoox"}, "path": "site/src/pages/release-notes/0.99.7.mdx", "diffHunk": "@@ -0,0 +1,243 @@\n+## \ud83c\udf1f New features\n+\n+- You can now specify the maximum lifespan of server-side connections using\n+  <type://ServerBuilder#maxConnectionAge(Duration)>. This is useful when you have to deal with a load balancer\n+  without HTTP/2 support. #2747 #2796\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .maxConnectionAge(Duration.ofMinutes(1))\n+            ...\n+            .build();\n+  ```\n+- You can now record the name of the service that handled a request into <type://RequestOnlyLog#serviceName()>.\n+  #2768 #2780 #2809 #2820\n+  - By using <type://ServiceBindingBuilder#defaultServiceName(String)>:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .route().path(\"/service\")\n+                      .defaultServiceName(\"my-service\")\n+                      .build(new MyService())\n+              .build();\n+    ```\n+  - By using <type://@ServiceName>:\n+    ```java\n+    @ServiceName(\"my-service\")\n+    public class MyAnnotatedService {\n+        @Get(\"/get\")\n+        public String get() { ... }\n+\n+        @Post(\"/set\")\n+        @ServiceName(\"my-post-service\")\n+        public String post(@Param String value) { ... }\n+    }\n+    ```\n+  - Programmatically:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .service(\"/service\", (ctx, req) -> {\n+                  ctx.logBuilder().serviceName(\"my-service\");\n+              })\n+              .build();\n+    ```\n+  - Armeria will use the FQCN of the service class if you did not specify a service name.\n+- You can now use `@Nullable` annotation to specify an optional parameter or request object in annotated\n+  services. Previously, only the parameters with <type://@Default> annotation or `Optional` type were accepted.\n+  #2773\n+  ```java\n+  public class MyAnnotatedService {\n+      // null will be injected into 'value' instead of returning\n+      // '400 Bad Request' when 'value' is missing.\n+      @Get(\"/get\")\n+      public String get(@Param @Nullable String value) { ... }\n+  }\n+  ```\n+- You can now use the classes in the `java.time` package in annotated services. #2760 #2783 #2792 #2799\n+  ```java\n+  public class MyAnnotatedService {\n+      @Get(\"/sleep/{duration}\")\n+      public void sleep(@Param Duration duration) { ... }\n+  }\n+  ```\n+- You can now determine whether a request was successful or not from HTTP trailers in\n+  <type://CircuitBreakerClient> and <type://RetryingClient> using `onResponseTrailers()` method.\n+  This can be useful when you work with gRPC, whose status code is encoded in the `grpc-status` trailer. #2816\n+  ```java\n+  CircuitBreaker cb = CircuitBreaker.of(\"my-service\");\n+  CircuitBreakerRule cbr =\n+      CircuitBreakerRule.builder()\n+                        .onResponseTrailers(trailers -> {\n+                            return trailers.getInt(\"grpc-status\", -1) != 0;\n+                        })\n+                        .thenFailure()\n+                        .build();\n+\n+  MyServiceStub myService =\n+      Clients.builder(\"gproto+h2c://example.com/\")\n+             .decorator(CircuitBreakerClient.newDecorator(cb, cbr))\n+             .build(MyServiceStub.class);\n+  ```\n+- <type://RequestLog> sanitizers now accept <type://RequestContext> as an additional input, so that\n+  the sanitizers can behave differently depending on the current path, etc. #2803\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .decorator(LoggingService.builder()\n+                                     .headersSanitizer((ctx, headers) -> {\n+                                         if (ctx.path().startsWith(\"/secret/\")) {\n+                                             return \"<secret>\";\n+                                         } else {\n+                                             return headers;\n+                                         }\n+                                     })\n+                                     .newDecorator())\n+            ...\n+            .build();\n+  ```\n+- Armeria now supports service discovery and registration for\n+  [Curator Service Discovery](https://curator.apache.org/curator-x-discovery/index.html) and\n+  [Finagle ServerSets](http://stevenskelton.ca/finagle-serverset-clusters-using-zookeeper/). #2673 #2749 #2791\n+  ```java\n+  CuratorFramework curator = ...;\n+  // Client side:\n+  //// Curator Service Discovery:\n+  EndpointGroup curatorEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/curator\",\n+                                ZooKeeperDiscoverySpec.curator(\"my-service\"));\n+  //// Finagle ServerSets:\n+  EndpointGroup serverSetsEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/serversets\"\n+                                ZooKeeperDiscoverySpec.serverSets());\n+\n+  // Server-side:\n+  Server server = ...;\n+  //// Curator Service Discovery\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/curator\",\n+      ZooKeeperRegistrationSpec.curator(\"my-service\")));\n+  //// Finagle ServerSets:\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/serversets\",\n+      ZooKeeperRegistrationSpec.serverSets()));\n+  ```\n+- You can now build <type://OAuth1aToken> more conveniently using the builder API. #2770\n+  ```java\n+  OAuth1aToken token =\n+      OAuth1aToken.builder()\n+                  .realm(\"...\")\n+                  .consumerKey(\"...\")\n+                  .token(\"...\")\n+                  ...\n+                  .build();\n+  ```\n+- The Spring Boot integration now hides all services under `/internal/` for non-management ports when\n+  `management.server.port` property is set. #2408 #2502\n+- The Spring Boot integration now supports\n+  [the new graceful shutdown properties](https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/reference/html/spring-boot-features.html#boot-features-graceful-shutdown)\n+  introduced in Spring Boot 2.3. #2784 #2802\n+- Added a new API for handling reference counted or pooled objects such as <type://PooledHttpData>) in\n+  a relatively safer way. #2448\n+  - See <type://PooledHttpData>, <type://PooledWebClient>, <type://PooledHttpRequest> and\n+    <type://PooledHttpResponse> for more information.\n+\n+## \ud83d\udcc8 Improvements\n+\n+- Cleaned up minor issues reported by [errorprone](https://errorprone.info/). #2772\n+- Made some exception messages more user-friendly. #2751\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- It's now allowed to specify an absolute URL *only when* an <type://WebClient> was created *without* a base\n+  URL. #2757\n+  ```java\n+  WebClient clientWithoutBaseUrl = WebClient.of();\n+  WebClient clientWithBaseUrl = WebClient.of(\"https://example.com/\");\n+  // Good\n+  clientWithBaseUrl.get(\"/bar\");\n+  clientWithoutBaseUrl.get(\"https://foo.com/\");\n+  // Bad\n+  clientWithBaseUrl.get(\"https://foo.com/\");\n+  clientWithoutBaseUrl.get(\"/bar\");\n+  ```\n+- Boolean parameter conversion became more strict in annotated services. #2767 #2774\n+  - Only `true`, `false`, `1` and `0` are accepted. Other values will cause a `400 Bad Request` response.\n+- <type://DocService> web UI now shows the 'request body' field for `DELETE` and `PATCH` methods in the debug\n+  form. #2756 #2819\n+- <type://JacksonRequestConverterFunction> now handles the case where the target type has a type parameter,\n+  e.g. `List<Long>`. #2769 #2779\n+- Fixed a bug where the current <type://ServiceRequestContext> is not pushed when invoking\n+  <type://ResponseConverterFunction#convertResponse(ServiceRequestContext,ResponseHeaders,Object,HttpHeaders)>.\n+  #2789\n+- <type://RequestContextExportingAppender> now handles the `<exports />` tag correctly. #2781\n+- Fixed a bug where some Reactive Streams `Subscriber` implementations violate the specification. #2815\n+- You no longer get sporadic <type://WriteTimeoutException> from proxied connections. #2801 #2805\n+- You no longer get a <type://CancelledSubscriptionException> unnecessarily when using\n+  <type://PublisherBasedStreamMessage>. #2797\n+- You no longer get sporadic `EncoderException`s from HTTP/1 connections. #2765\n+- It's now disallowed to specify the following headers in gRPC `Metadata`. #2718\n+  - `:status`\n+  - `grpc-message`\n+  - `grpc-status`\n+  - `armeria.grpc.ThrowableProto-bin`\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+\n+- <type://AbstractUnwrappable#delegate()> has been deprecated in favor of <type://Unwrappable#unwrap()>.\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- You can specify an absolute URL *only when* a <type://WebClient> was created *without* a base URL.\n+  It was previously allowed to specify an absolute URL even when created with a base URL. #2757\n+- The method signature of\n+  <type://RequestConverterFunction#convertRequest(ServiceRequestContext,AggregatedHttpRequest,Class,ParameterizedType)>\n+  has been changed to support parameterized types. #2779\n+- The default <type://MeterIdPrefixFunction>` returned by <type://MeterIdPrefixFunction#ofDefault(String)>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acf6b8e2c51198fc4062515cf8e1cdd6541ebe4"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjQzNTAyOnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/0.99.7.mdx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNjo0NzozMVrOGmzy-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNjo1MDo0M1rOGmz3wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NzcwNQ==", "bodyText": "We can remove this sentence because the classes aren't published in the previous version.", "url": "https://github.com/line/armeria/pull/2823#discussion_r443347705", "createdAt": "2020-06-22T06:47:31Z", "author": {"login": "minwoox"}, "path": "site/src/pages/release-notes/0.99.7.mdx", "diffHunk": "@@ -0,0 +1,243 @@\n+## \ud83c\udf1f New features\n+\n+- You can now specify the maximum lifespan of server-side connections using\n+  <type://ServerBuilder#maxConnectionAge(Duration)>. This is useful when you have to deal with a load balancer\n+  without HTTP/2 support. #2747 #2796\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .maxConnectionAge(Duration.ofMinutes(1))\n+            ...\n+            .build();\n+  ```\n+- You can now record the name of the service that handled a request into <type://RequestOnlyLog#serviceName()>.\n+  #2768 #2780 #2809 #2820\n+  - By using <type://ServiceBindingBuilder#defaultServiceName(String)>:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .route().path(\"/service\")\n+                      .defaultServiceName(\"my-service\")\n+                      .build(new MyService())\n+              .build();\n+    ```\n+  - By using <type://@ServiceName>:\n+    ```java\n+    @ServiceName(\"my-service\")\n+    public class MyAnnotatedService {\n+        @Get(\"/get\")\n+        public String get() { ... }\n+\n+        @Post(\"/set\")\n+        @ServiceName(\"my-post-service\")\n+        public String post(@Param String value) { ... }\n+    }\n+    ```\n+  - Programmatically:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .service(\"/service\", (ctx, req) -> {\n+                  ctx.logBuilder().serviceName(\"my-service\");\n+              })\n+              .build();\n+    ```\n+  - Armeria will use the FQCN of the service class if you did not specify a service name.\n+- You can now use `@Nullable` annotation to specify an optional parameter or request object in annotated\n+  services. Previously, only the parameters with <type://@Default> annotation or `Optional` type were accepted.\n+  #2773\n+  ```java\n+  public class MyAnnotatedService {\n+      // null will be injected into 'value' instead of returning\n+      // '400 Bad Request' when 'value' is missing.\n+      @Get(\"/get\")\n+      public String get(@Param @Nullable String value) { ... }\n+  }\n+  ```\n+- You can now use the classes in the `java.time` package in annotated services. #2760 #2783 #2792 #2799\n+  ```java\n+  public class MyAnnotatedService {\n+      @Get(\"/sleep/{duration}\")\n+      public void sleep(@Param Duration duration) { ... }\n+  }\n+  ```\n+- You can now determine whether a request was successful or not from HTTP trailers in\n+  <type://CircuitBreakerClient> and <type://RetryingClient> using `onResponseTrailers()` method.\n+  This can be useful when you work with gRPC, whose status code is encoded in the `grpc-status` trailer. #2816\n+  ```java\n+  CircuitBreaker cb = CircuitBreaker.of(\"my-service\");\n+  CircuitBreakerRule cbr =\n+      CircuitBreakerRule.builder()\n+                        .onResponseTrailers(trailers -> {\n+                            return trailers.getInt(\"grpc-status\", -1) != 0;\n+                        })\n+                        .thenFailure()\n+                        .build();\n+\n+  MyServiceStub myService =\n+      Clients.builder(\"gproto+h2c://example.com/\")\n+             .decorator(CircuitBreakerClient.newDecorator(cb, cbr))\n+             .build(MyServiceStub.class);\n+  ```\n+- <type://RequestLog> sanitizers now accept <type://RequestContext> as an additional input, so that\n+  the sanitizers can behave differently depending on the current path, etc. #2803\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .decorator(LoggingService.builder()\n+                                     .headersSanitizer((ctx, headers) -> {\n+                                         if (ctx.path().startsWith(\"/secret/\")) {\n+                                             return \"<secret>\";\n+                                         } else {\n+                                             return headers;\n+                                         }\n+                                     })\n+                                     .newDecorator())\n+            ...\n+            .build();\n+  ```\n+- Armeria now supports service discovery and registration for\n+  [Curator Service Discovery](https://curator.apache.org/curator-x-discovery/index.html) and\n+  [Finagle ServerSets](http://stevenskelton.ca/finagle-serverset-clusters-using-zookeeper/). #2673 #2749 #2791\n+  ```java\n+  CuratorFramework curator = ...;\n+  // Client side:\n+  //// Curator Service Discovery:\n+  EndpointGroup curatorEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/curator\",\n+                                ZooKeeperDiscoverySpec.curator(\"my-service\"));\n+  //// Finagle ServerSets:\n+  EndpointGroup serverSetsEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/serversets\"\n+                                ZooKeeperDiscoverySpec.serverSets());\n+\n+  // Server-side:\n+  Server server = ...;\n+  //// Curator Service Discovery\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/curator\",\n+      ZooKeeperRegistrationSpec.curator(\"my-service\")));\n+  //// Finagle ServerSets:\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/serversets\",\n+      ZooKeeperRegistrationSpec.serverSets()));\n+  ```\n+- You can now build <type://OAuth1aToken> more conveniently using the builder API. #2770\n+  ```java\n+  OAuth1aToken token =\n+      OAuth1aToken.builder()\n+                  .realm(\"...\")\n+                  .consumerKey(\"...\")\n+                  .token(\"...\")\n+                  ...\n+                  .build();\n+  ```\n+- The Spring Boot integration now hides all services under `/internal/` for non-management ports when\n+  `management.server.port` property is set. #2408 #2502\n+- The Spring Boot integration now supports\n+  [the new graceful shutdown properties](https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/reference/html/spring-boot-features.html#boot-features-graceful-shutdown)\n+  introduced in Spring Boot 2.3. #2784 #2802\n+- Added a new API for handling reference counted or pooled objects such as <type://PooledHttpData>) in\n+  a relatively safer way. #2448\n+  - See <type://PooledHttpData>, <type://PooledWebClient>, <type://PooledHttpRequest> and\n+    <type://PooledHttpResponse> for more information.\n+\n+## \ud83d\udcc8 Improvements\n+\n+- Cleaned up minor issues reported by [errorprone](https://errorprone.info/). #2772\n+- Made some exception messages more user-friendly. #2751\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- It's now allowed to specify an absolute URL *only when* an <type://WebClient> was created *without* a base\n+  URL. #2757\n+  ```java\n+  WebClient clientWithoutBaseUrl = WebClient.of();\n+  WebClient clientWithBaseUrl = WebClient.of(\"https://example.com/\");\n+  // Good\n+  clientWithBaseUrl.get(\"/bar\");\n+  clientWithoutBaseUrl.get(\"https://foo.com/\");\n+  // Bad\n+  clientWithBaseUrl.get(\"https://foo.com/\");\n+  clientWithoutBaseUrl.get(\"/bar\");\n+  ```\n+- Boolean parameter conversion became more strict in annotated services. #2767 #2774\n+  - Only `true`, `false`, `1` and `0` are accepted. Other values will cause a `400 Bad Request` response.\n+- <type://DocService> web UI now shows the 'request body' field for `DELETE` and `PATCH` methods in the debug\n+  form. #2756 #2819\n+- <type://JacksonRequestConverterFunction> now handles the case where the target type has a type parameter,\n+  e.g. `List<Long>`. #2769 #2779\n+- Fixed a bug where the current <type://ServiceRequestContext> is not pushed when invoking\n+  <type://ResponseConverterFunction#convertResponse(ServiceRequestContext,ResponseHeaders,Object,HttpHeaders)>.\n+  #2789\n+- <type://RequestContextExportingAppender> now handles the `<exports />` tag correctly. #2781\n+- Fixed a bug where some Reactive Streams `Subscriber` implementations violate the specification. #2815\n+- You no longer get sporadic <type://WriteTimeoutException> from proxied connections. #2801 #2805\n+- You no longer get a <type://CancelledSubscriptionException> unnecessarily when using\n+  <type://PublisherBasedStreamMessage>. #2797\n+- You no longer get sporadic `EncoderException`s from HTTP/1 connections. #2765\n+- It's now disallowed to specify the following headers in gRPC `Metadata`. #2718\n+  - `:status`\n+  - `grpc-message`\n+  - `grpc-status`\n+  - `armeria.grpc.ThrowableProto-bin`\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+\n+- <type://AbstractUnwrappable#delegate()> has been deprecated in favor of <type://Unwrappable#unwrap()>.\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- You can specify an absolute URL *only when* a <type://WebClient> was created *without* a base URL.\n+  It was previously allowed to specify an absolute URL even when created with a base URL. #2757\n+- The method signature of\n+  <type://RequestConverterFunction#convertRequest(ServiceRequestContext,AggregatedHttpRequest,Class,ParameterizedType)>\n+  has been changed to support parameterized types. #2779\n+- The default <type://MeterIdPrefixFunction>` returned by <type://MeterIdPrefixFunction#ofDefault(String)>\n+  now generates the meter IDs with different tags. #2780\n+  - The `route` tag has been replaced with the `service` tag.\n+- `RetrofitMeterIdPrefixFunctionBuilder` has been removed and superseded by\n+  <type://RequestOnlyLog#serviceName()>. #2780\n+- ZooKeeper-based service discovery: #2749 #2791\n+  - Renamed all classes to use `ZooKeeper` instead of `Zookeeper`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acf6b8e2c51198fc4062515cf8e1cdd6541ebe4"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0ODU3OQ==", "bodyText": "ZooKeeperEndpointGroup?", "url": "https://github.com/line/armeria/pull/2823#discussion_r443348579", "createdAt": "2020-06-22T06:49:49Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/0.99.7.mdx", "diffHunk": "@@ -0,0 +1,243 @@\n+## \ud83c\udf1f New features\n+\n+- You can now specify the maximum lifespan of server-side connections using\n+  <type://ServerBuilder#maxConnectionAge(Duration)>. This is useful when you have to deal with a load balancer\n+  without HTTP/2 support. #2747 #2796\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .maxConnectionAge(Duration.ofMinutes(1))\n+            ...\n+            .build();\n+  ```\n+- You can now record the name of the service that handled a request into <type://RequestOnlyLog#serviceName()>.\n+  #2768 #2780 #2809 #2820\n+  - By using <type://ServiceBindingBuilder#defaultServiceName(String)>:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .route().path(\"/service\")\n+                      .defaultServiceName(\"my-service\")\n+                      .build(new MyService())\n+              .build();\n+    ```\n+  - By using <type://@ServiceName>:\n+    ```java\n+    @ServiceName(\"my-service\")\n+    public class MyAnnotatedService {\n+        @Get(\"/get\")\n+        public String get() { ... }\n+\n+        @Post(\"/set\")\n+        @ServiceName(\"my-post-service\")\n+        public String post(@Param String value) { ... }\n+    }\n+    ```\n+  - Programmatically:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .service(\"/service\", (ctx, req) -> {\n+                  ctx.logBuilder().serviceName(\"my-service\");\n+              })\n+              .build();\n+    ```\n+  - Armeria will use the FQCN of the service class if you did not specify a service name.\n+- You can now use `@Nullable` annotation to specify an optional parameter or request object in annotated\n+  services. Previously, only the parameters with <type://@Default> annotation or `Optional` type were accepted.\n+  #2773\n+  ```java\n+  public class MyAnnotatedService {\n+      // null will be injected into 'value' instead of returning\n+      // '400 Bad Request' when 'value' is missing.\n+      @Get(\"/get\")\n+      public String get(@Param @Nullable String value) { ... }\n+  }\n+  ```\n+- You can now use the classes in the `java.time` package in annotated services. #2760 #2783 #2792 #2799\n+  ```java\n+  public class MyAnnotatedService {\n+      @Get(\"/sleep/{duration}\")\n+      public void sleep(@Param Duration duration) { ... }\n+  }\n+  ```\n+- You can now determine whether a request was successful or not from HTTP trailers in\n+  <type://CircuitBreakerClient> and <type://RetryingClient> using `onResponseTrailers()` method.\n+  This can be useful when you work with gRPC, whose status code is encoded in the `grpc-status` trailer. #2816\n+  ```java\n+  CircuitBreaker cb = CircuitBreaker.of(\"my-service\");\n+  CircuitBreakerRule cbr =\n+      CircuitBreakerRule.builder()\n+                        .onResponseTrailers(trailers -> {\n+                            return trailers.getInt(\"grpc-status\", -1) != 0;\n+                        })\n+                        .thenFailure()\n+                        .build();\n+\n+  MyServiceStub myService =\n+      Clients.builder(\"gproto+h2c://example.com/\")\n+             .decorator(CircuitBreakerClient.newDecorator(cb, cbr))\n+             .build(MyServiceStub.class);\n+  ```\n+- <type://RequestLog> sanitizers now accept <type://RequestContext> as an additional input, so that\n+  the sanitizers can behave differently depending on the current path, etc. #2803\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .decorator(LoggingService.builder()\n+                                     .headersSanitizer((ctx, headers) -> {\n+                                         if (ctx.path().startsWith(\"/secret/\")) {\n+                                             return \"<secret>\";\n+                                         } else {\n+                                             return headers;\n+                                         }\n+                                     })\n+                                     .newDecorator())\n+            ...\n+            .build();\n+  ```\n+- Armeria now supports service discovery and registration for\n+  [Curator Service Discovery](https://curator.apache.org/curator-x-discovery/index.html) and\n+  [Finagle ServerSets](http://stevenskelton.ca/finagle-serverset-clusters-using-zookeeper/). #2673 #2749 #2791\n+  ```java\n+  CuratorFramework curator = ...;\n+  // Client side:\n+  //// Curator Service Discovery:\n+  EndpointGroup curatorEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/curator\",\n+                                ZooKeeperDiscoverySpec.curator(\"my-service\"));\n+  //// Finagle ServerSets:\n+  EndpointGroup serverSetsEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/serversets\"\n+                                ZooKeeperDiscoverySpec.serverSets());\n+\n+  // Server-side:\n+  Server server = ...;\n+  //// Curator Service Discovery\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/curator\",\n+      ZooKeeperRegistrationSpec.curator(\"my-service\")));\n+  //// Finagle ServerSets:\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/serversets\",\n+      ZooKeeperRegistrationSpec.serverSets()));\n+  ```\n+- You can now build <type://OAuth1aToken> more conveniently using the builder API. #2770\n+  ```java\n+  OAuth1aToken token =\n+      OAuth1aToken.builder()\n+                  .realm(\"...\")\n+                  .consumerKey(\"...\")\n+                  .token(\"...\")\n+                  ...\n+                  .build();\n+  ```\n+- The Spring Boot integration now hides all services under `/internal/` for non-management ports when\n+  `management.server.port` property is set. #2408 #2502\n+- The Spring Boot integration now supports\n+  [the new graceful shutdown properties](https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/reference/html/spring-boot-features.html#boot-features-graceful-shutdown)\n+  introduced in Spring Boot 2.3. #2784 #2802\n+- Added a new API for handling reference counted or pooled objects such as <type://PooledHttpData>) in\n+  a relatively safer way. #2448\n+  - See <type://PooledHttpData>, <type://PooledWebClient>, <type://PooledHttpRequest> and\n+    <type://PooledHttpResponse> for more information.\n+\n+## \ud83d\udcc8 Improvements\n+\n+- Cleaned up minor issues reported by [errorprone](https://errorprone.info/). #2772\n+- Made some exception messages more user-friendly. #2751\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- It's now allowed to specify an absolute URL *only when* an <type://WebClient> was created *without* a base\n+  URL. #2757\n+  ```java\n+  WebClient clientWithoutBaseUrl = WebClient.of();\n+  WebClient clientWithBaseUrl = WebClient.of(\"https://example.com/\");\n+  // Good\n+  clientWithBaseUrl.get(\"/bar\");\n+  clientWithoutBaseUrl.get(\"https://foo.com/\");\n+  // Bad\n+  clientWithBaseUrl.get(\"https://foo.com/\");\n+  clientWithoutBaseUrl.get(\"/bar\");\n+  ```\n+- Boolean parameter conversion became more strict in annotated services. #2767 #2774\n+  - Only `true`, `false`, `1` and `0` are accepted. Other values will cause a `400 Bad Request` response.\n+- <type://DocService> web UI now shows the 'request body' field for `DELETE` and `PATCH` methods in the debug\n+  form. #2756 #2819\n+- <type://JacksonRequestConverterFunction> now handles the case where the target type has a type parameter,\n+  e.g. `List<Long>`. #2769 #2779\n+- Fixed a bug where the current <type://ServiceRequestContext> is not pushed when invoking\n+  <type://ResponseConverterFunction#convertResponse(ServiceRequestContext,ResponseHeaders,Object,HttpHeaders)>.\n+  #2789\n+- <type://RequestContextExportingAppender> now handles the `<exports />` tag correctly. #2781\n+- Fixed a bug where some Reactive Streams `Subscriber` implementations violate the specification. #2815\n+- You no longer get sporadic <type://WriteTimeoutException> from proxied connections. #2801 #2805\n+- You no longer get a <type://CancelledSubscriptionException> unnecessarily when using\n+  <type://PublisherBasedStreamMessage>. #2797\n+- You no longer get sporadic `EncoderException`s from HTTP/1 connections. #2765\n+- It's now disallowed to specify the following headers in gRPC `Metadata`. #2718\n+  - `:status`\n+  - `grpc-message`\n+  - `grpc-status`\n+  - `armeria.grpc.ThrowableProto-bin`\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+\n+- <type://AbstractUnwrappable#delegate()> has been deprecated in favor of <type://Unwrappable#unwrap()>.\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- You can specify an absolute URL *only when* a <type://WebClient> was created *without* a base URL.\n+  It was previously allowed to specify an absolute URL even when created with a base URL. #2757\n+- The method signature of\n+  <type://RequestConverterFunction#convertRequest(ServiceRequestContext,AggregatedHttpRequest,Class,ParameterizedType)>\n+  has been changed to support parameterized types. #2779\n+- The default <type://MeterIdPrefixFunction>` returned by <type://MeterIdPrefixFunction#ofDefault(String)>\n+  now generates the meter IDs with different tags. #2780\n+  - The `route` tag has been replaced with the `service` tag.\n+- `RetrofitMeterIdPrefixFunctionBuilder` has been removed and superseded by\n+  <type://RequestOnlyLog#serviceName()>. #2780\n+- ZooKeeper-based service discovery: #2749 #2791\n+  - Renamed all classes to use `ZooKeeper` instead of `Zookeeper`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NzcwNQ=="}, "originalCommit": {"oid": "1acf6b8e2c51198fc4062515cf8e1cdd6541ebe4"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0ODkyOA==", "bodyText": "Ah, they are already named correctly.", "url": "https://github.com/line/armeria/pull/2823#discussion_r443348928", "createdAt": "2020-06-22T06:50:43Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/0.99.7.mdx", "diffHunk": "@@ -0,0 +1,243 @@\n+## \ud83c\udf1f New features\n+\n+- You can now specify the maximum lifespan of server-side connections using\n+  <type://ServerBuilder#maxConnectionAge(Duration)>. This is useful when you have to deal with a load balancer\n+  without HTTP/2 support. #2747 #2796\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .maxConnectionAge(Duration.ofMinutes(1))\n+            ...\n+            .build();\n+  ```\n+- You can now record the name of the service that handled a request into <type://RequestOnlyLog#serviceName()>.\n+  #2768 #2780 #2809 #2820\n+  - By using <type://ServiceBindingBuilder#defaultServiceName(String)>:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .route().path(\"/service\")\n+                      .defaultServiceName(\"my-service\")\n+                      .build(new MyService())\n+              .build();\n+    ```\n+  - By using <type://@ServiceName>:\n+    ```java\n+    @ServiceName(\"my-service\")\n+    public class MyAnnotatedService {\n+        @Get(\"/get\")\n+        public String get() { ... }\n+\n+        @Post(\"/set\")\n+        @ServiceName(\"my-post-service\")\n+        public String post(@Param String value) { ... }\n+    }\n+    ```\n+  - Programmatically:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .service(\"/service\", (ctx, req) -> {\n+                  ctx.logBuilder().serviceName(\"my-service\");\n+              })\n+              .build();\n+    ```\n+  - Armeria will use the FQCN of the service class if you did not specify a service name.\n+- You can now use `@Nullable` annotation to specify an optional parameter or request object in annotated\n+  services. Previously, only the parameters with <type://@Default> annotation or `Optional` type were accepted.\n+  #2773\n+  ```java\n+  public class MyAnnotatedService {\n+      // null will be injected into 'value' instead of returning\n+      // '400 Bad Request' when 'value' is missing.\n+      @Get(\"/get\")\n+      public String get(@Param @Nullable String value) { ... }\n+  }\n+  ```\n+- You can now use the classes in the `java.time` package in annotated services. #2760 #2783 #2792 #2799\n+  ```java\n+  public class MyAnnotatedService {\n+      @Get(\"/sleep/{duration}\")\n+      public void sleep(@Param Duration duration) { ... }\n+  }\n+  ```\n+- You can now determine whether a request was successful or not from HTTP trailers in\n+  <type://CircuitBreakerClient> and <type://RetryingClient> using `onResponseTrailers()` method.\n+  This can be useful when you work with gRPC, whose status code is encoded in the `grpc-status` trailer. #2816\n+  ```java\n+  CircuitBreaker cb = CircuitBreaker.of(\"my-service\");\n+  CircuitBreakerRule cbr =\n+      CircuitBreakerRule.builder()\n+                        .onResponseTrailers(trailers -> {\n+                            return trailers.getInt(\"grpc-status\", -1) != 0;\n+                        })\n+                        .thenFailure()\n+                        .build();\n+\n+  MyServiceStub myService =\n+      Clients.builder(\"gproto+h2c://example.com/\")\n+             .decorator(CircuitBreakerClient.newDecorator(cb, cbr))\n+             .build(MyServiceStub.class);\n+  ```\n+- <type://RequestLog> sanitizers now accept <type://RequestContext> as an additional input, so that\n+  the sanitizers can behave differently depending on the current path, etc. #2803\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .decorator(LoggingService.builder()\n+                                     .headersSanitizer((ctx, headers) -> {\n+                                         if (ctx.path().startsWith(\"/secret/\")) {\n+                                             return \"<secret>\";\n+                                         } else {\n+                                             return headers;\n+                                         }\n+                                     })\n+                                     .newDecorator())\n+            ...\n+            .build();\n+  ```\n+- Armeria now supports service discovery and registration for\n+  [Curator Service Discovery](https://curator.apache.org/curator-x-discovery/index.html) and\n+  [Finagle ServerSets](http://stevenskelton.ca/finagle-serverset-clusters-using-zookeeper/). #2673 #2749 #2791\n+  ```java\n+  CuratorFramework curator = ...;\n+  // Client side:\n+  //// Curator Service Discovery:\n+  EndpointGroup curatorEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/curator\",\n+                                ZooKeeperDiscoverySpec.curator(\"my-service\"));\n+  //// Finagle ServerSets:\n+  EndpointGroup serverSetsEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/serversets\"\n+                                ZooKeeperDiscoverySpec.serverSets());\n+\n+  // Server-side:\n+  Server server = ...;\n+  //// Curator Service Discovery\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/curator\",\n+      ZooKeeperRegistrationSpec.curator(\"my-service\")));\n+  //// Finagle ServerSets:\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/serversets\",\n+      ZooKeeperRegistrationSpec.serverSets()));\n+  ```\n+- You can now build <type://OAuth1aToken> more conveniently using the builder API. #2770\n+  ```java\n+  OAuth1aToken token =\n+      OAuth1aToken.builder()\n+                  .realm(\"...\")\n+                  .consumerKey(\"...\")\n+                  .token(\"...\")\n+                  ...\n+                  .build();\n+  ```\n+- The Spring Boot integration now hides all services under `/internal/` for non-management ports when\n+  `management.server.port` property is set. #2408 #2502\n+- The Spring Boot integration now supports\n+  [the new graceful shutdown properties](https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/reference/html/spring-boot-features.html#boot-features-graceful-shutdown)\n+  introduced in Spring Boot 2.3. #2784 #2802\n+- Added a new API for handling reference counted or pooled objects such as <type://PooledHttpData>) in\n+  a relatively safer way. #2448\n+  - See <type://PooledHttpData>, <type://PooledWebClient>, <type://PooledHttpRequest> and\n+    <type://PooledHttpResponse> for more information.\n+\n+## \ud83d\udcc8 Improvements\n+\n+- Cleaned up minor issues reported by [errorprone](https://errorprone.info/). #2772\n+- Made some exception messages more user-friendly. #2751\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- It's now allowed to specify an absolute URL *only when* an <type://WebClient> was created *without* a base\n+  URL. #2757\n+  ```java\n+  WebClient clientWithoutBaseUrl = WebClient.of();\n+  WebClient clientWithBaseUrl = WebClient.of(\"https://example.com/\");\n+  // Good\n+  clientWithBaseUrl.get(\"/bar\");\n+  clientWithoutBaseUrl.get(\"https://foo.com/\");\n+  // Bad\n+  clientWithBaseUrl.get(\"https://foo.com/\");\n+  clientWithoutBaseUrl.get(\"/bar\");\n+  ```\n+- Boolean parameter conversion became more strict in annotated services. #2767 #2774\n+  - Only `true`, `false`, `1` and `0` are accepted. Other values will cause a `400 Bad Request` response.\n+- <type://DocService> web UI now shows the 'request body' field for `DELETE` and `PATCH` methods in the debug\n+  form. #2756 #2819\n+- <type://JacksonRequestConverterFunction> now handles the case where the target type has a type parameter,\n+  e.g. `List<Long>`. #2769 #2779\n+- Fixed a bug where the current <type://ServiceRequestContext> is not pushed when invoking\n+  <type://ResponseConverterFunction#convertResponse(ServiceRequestContext,ResponseHeaders,Object,HttpHeaders)>.\n+  #2789\n+- <type://RequestContextExportingAppender> now handles the `<exports />` tag correctly. #2781\n+- Fixed a bug where some Reactive Streams `Subscriber` implementations violate the specification. #2815\n+- You no longer get sporadic <type://WriteTimeoutException> from proxied connections. #2801 #2805\n+- You no longer get a <type://CancelledSubscriptionException> unnecessarily when using\n+  <type://PublisherBasedStreamMessage>. #2797\n+- You no longer get sporadic `EncoderException`s from HTTP/1 connections. #2765\n+- It's now disallowed to specify the following headers in gRPC `Metadata`. #2718\n+  - `:status`\n+  - `grpc-message`\n+  - `grpc-status`\n+  - `armeria.grpc.ThrowableProto-bin`\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+\n+- <type://AbstractUnwrappable#delegate()> has been deprecated in favor of <type://Unwrappable#unwrap()>.\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- You can specify an absolute URL *only when* a <type://WebClient> was created *without* a base URL.\n+  It was previously allowed to specify an absolute URL even when created with a base URL. #2757\n+- The method signature of\n+  <type://RequestConverterFunction#convertRequest(ServiceRequestContext,AggregatedHttpRequest,Class,ParameterizedType)>\n+  has been changed to support parameterized types. #2779\n+- The default <type://MeterIdPrefixFunction>` returned by <type://MeterIdPrefixFunction#ofDefault(String)>\n+  now generates the meter IDs with different tags. #2780\n+  - The `route` tag has been replaced with the `service` tag.\n+- `RetrofitMeterIdPrefixFunctionBuilder` has been removed and superseded by\n+  <type://RequestOnlyLog#serviceName()>. #2780\n+- ZooKeeper-based service discovery: #2749 #2791\n+  - Renamed all classes to use `ZooKeeper` instead of `Zookeeper`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NzcwNQ=="}, "originalCommit": {"oid": "1acf6b8e2c51198fc4062515cf8e1cdd6541ebe4"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjQzODU5OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/0.99.7.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNjo0ODo1OFrOGmz1IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNjo0ODo1OFrOGmz1IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0ODI1Nw==", "bodyText": "Should remove )", "url": "https://github.com/line/armeria/pull/2823#discussion_r443348257", "createdAt": "2020-06-22T06:48:58Z", "author": {"login": "minwoox"}, "path": "site/src/pages/release-notes/0.99.7.mdx", "diffHunk": "@@ -0,0 +1,243 @@\n+## \ud83c\udf1f New features\n+\n+- You can now specify the maximum lifespan of server-side connections using\n+  <type://ServerBuilder#maxConnectionAge(Duration)>. This is useful when you have to deal with a load balancer\n+  without HTTP/2 support. #2747 #2796\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .maxConnectionAge(Duration.ofMinutes(1))\n+            ...\n+            .build();\n+  ```\n+- You can now record the name of the service that handled a request into <type://RequestOnlyLog#serviceName()>.\n+  #2768 #2780 #2809 #2820\n+  - By using <type://ServiceBindingBuilder#defaultServiceName(String)>:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .route().path(\"/service\")\n+                      .defaultServiceName(\"my-service\")\n+                      .build(new MyService())\n+              .build();\n+    ```\n+  - By using <type://@ServiceName>:\n+    ```java\n+    @ServiceName(\"my-service\")\n+    public class MyAnnotatedService {\n+        @Get(\"/get\")\n+        public String get() { ... }\n+\n+        @Post(\"/set\")\n+        @ServiceName(\"my-post-service\")\n+        public String post(@Param String value) { ... }\n+    }\n+    ```\n+  - Programmatically:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .service(\"/service\", (ctx, req) -> {\n+                  ctx.logBuilder().serviceName(\"my-service\");\n+              })\n+              .build();\n+    ```\n+  - Armeria will use the FQCN of the service class if you did not specify a service name.\n+- You can now use `@Nullable` annotation to specify an optional parameter or request object in annotated\n+  services. Previously, only the parameters with <type://@Default> annotation or `Optional` type were accepted.\n+  #2773\n+  ```java\n+  public class MyAnnotatedService {\n+      // null will be injected into 'value' instead of returning\n+      // '400 Bad Request' when 'value' is missing.\n+      @Get(\"/get\")\n+      public String get(@Param @Nullable String value) { ... }\n+  }\n+  ```\n+- You can now use the classes in the `java.time` package in annotated services. #2760 #2783 #2792 #2799\n+  ```java\n+  public class MyAnnotatedService {\n+      @Get(\"/sleep/{duration}\")\n+      public void sleep(@Param Duration duration) { ... }\n+  }\n+  ```\n+- You can now determine whether a request was successful or not from HTTP trailers in\n+  <type://CircuitBreakerClient> and <type://RetryingClient> using `onResponseTrailers()` method.\n+  This can be useful when you work with gRPC, whose status code is encoded in the `grpc-status` trailer. #2816\n+  ```java\n+  CircuitBreaker cb = CircuitBreaker.of(\"my-service\");\n+  CircuitBreakerRule cbr =\n+      CircuitBreakerRule.builder()\n+                        .onResponseTrailers(trailers -> {\n+                            return trailers.getInt(\"grpc-status\", -1) != 0;\n+                        })\n+                        .thenFailure()\n+                        .build();\n+\n+  MyServiceStub myService =\n+      Clients.builder(\"gproto+h2c://example.com/\")\n+             .decorator(CircuitBreakerClient.newDecorator(cb, cbr))\n+             .build(MyServiceStub.class);\n+  ```\n+- <type://RequestLog> sanitizers now accept <type://RequestContext> as an additional input, so that\n+  the sanitizers can behave differently depending on the current path, etc. #2803\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .decorator(LoggingService.builder()\n+                                     .headersSanitizer((ctx, headers) -> {\n+                                         if (ctx.path().startsWith(\"/secret/\")) {\n+                                             return \"<secret>\";\n+                                         } else {\n+                                             return headers;\n+                                         }\n+                                     })\n+                                     .newDecorator())\n+            ...\n+            .build();\n+  ```\n+- Armeria now supports service discovery and registration for\n+  [Curator Service Discovery](https://curator.apache.org/curator-x-discovery/index.html) and\n+  [Finagle ServerSets](http://stevenskelton.ca/finagle-serverset-clusters-using-zookeeper/). #2673 #2749 #2791\n+  ```java\n+  CuratorFramework curator = ...;\n+  // Client side:\n+  //// Curator Service Discovery:\n+  EndpointGroup curatorEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/curator\",\n+                                ZooKeeperDiscoverySpec.curator(\"my-service\"));\n+  //// Finagle ServerSets:\n+  EndpointGroup serverSetsEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/serversets\"\n+                                ZooKeeperDiscoverySpec.serverSets());\n+\n+  // Server-side:\n+  Server server = ...;\n+  //// Curator Service Discovery\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/curator\",\n+      ZooKeeperRegistrationSpec.curator(\"my-service\")));\n+  //// Finagle ServerSets:\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/serversets\",\n+      ZooKeeperRegistrationSpec.serverSets()));\n+  ```\n+- You can now build <type://OAuth1aToken> more conveniently using the builder API. #2770\n+  ```java\n+  OAuth1aToken token =\n+      OAuth1aToken.builder()\n+                  .realm(\"...\")\n+                  .consumerKey(\"...\")\n+                  .token(\"...\")\n+                  ...\n+                  .build();\n+  ```\n+- The Spring Boot integration now hides all services under `/internal/` for non-management ports when\n+  `management.server.port` property is set. #2408 #2502\n+- The Spring Boot integration now supports\n+  [the new graceful shutdown properties](https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/reference/html/spring-boot-features.html#boot-features-graceful-shutdown)\n+  introduced in Spring Boot 2.3. #2784 #2802\n+- Added a new API for handling reference counted or pooled objects such as <type://PooledHttpData>) in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1acf6b8e2c51198fc4062515cf8e1cdd6541ebe4"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjQ2ODQ5OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/0.99.7.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzowMDozOFrOGm0HpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzowMDozOFrOGm0HpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM1Mjk5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              //// Curator Service Discovery\n          \n          \n            \n              //// Curator Service Discovery:", "url": "https://github.com/line/armeria/pull/2823#discussion_r443352997", "createdAt": "2020-06-22T07:00:38Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/0.99.7.mdx", "diffHunk": "@@ -0,0 +1,245 @@\n+## \ud83c\udf1f New features\n+\n+- You can now specify the maximum lifespan of server-side connections using\n+  <type://ServerBuilder#maxConnectionAge(Duration)>. This is useful when you have to deal with a load balancer\n+  without HTTP/2 support. #2747 #2796\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .maxConnectionAge(Duration.ofMinutes(1))\n+            ...\n+            .build();\n+  ```\n+- You can now record the name of the service that handled a request into <type://RequestOnlyLog#serviceName()>.\n+  #2768 #2780 #2809 #2820\n+  - By using <type://ServiceBindingBuilder#defaultServiceName(String)>:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .route().path(\"/service\")\n+                      .defaultServiceName(\"my-service\")\n+                      .build(new MyService())\n+              .build();\n+    ```\n+  - By using <type://@ServiceName>:\n+    ```java\n+    @ServiceName(\"my-service\")\n+    public class MyAnnotatedService {\n+        @Get(\"/get\")\n+        public String get() { ... }\n+\n+        @Post(\"/set\")\n+        @ServiceName(\"my-post-service\")\n+        public String post(@Param String value) { ... }\n+    }\n+    ```\n+  - Programmatically:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .service(\"/service\", (ctx, req) -> {\n+                  ctx.logBuilder().serviceName(\"my-service\");\n+              })\n+              .build();\n+    ```\n+  - Armeria will use the FQCN of the service class if you did not specify a service name.\n+- You can now use `@Nullable` annotation to specify an optional parameter or request object in annotated\n+  services. Previously, only the parameters with <type://@Default> annotation or `Optional` type were accepted.\n+  #2773\n+  ```java\n+  public class MyAnnotatedService {\n+      // null will be injected into 'value' instead of returning\n+      // '400 Bad Request' when 'value' is missing.\n+      @Get(\"/get\")\n+      public String get(@Param @Nullable String value) { ... }\n+  }\n+  ```\n+- You can now use the classes in the `java.time` package in annotated services. #2760 #2783 #2792 #2799\n+  ```java\n+  public class MyAnnotatedService {\n+      @Get(\"/sleep/{duration}\")\n+      public void sleep(@Param Duration duration) { ... }\n+  }\n+  ```\n+- You can now determine whether a request was successful or not from HTTP trailers in\n+  <type://CircuitBreakerClient> and <type://RetryingClient> using `onResponseTrailers()` method.\n+  This can be useful when you work with gRPC, whose status code is encoded in the `grpc-status` trailer. #2816\n+  ```java\n+  CircuitBreaker cb = CircuitBreaker.of(\"my-service\");\n+  CircuitBreakerRule cbr =\n+      CircuitBreakerRule.builder()\n+                        .onResponseTrailers(trailers -> {\n+                            return trailers.getInt(\"grpc-status\", -1) != 0;\n+                        })\n+                        .thenFailure()\n+                        .build();\n+\n+  MyServiceStub myService =\n+      Clients.builder(\"gproto+h2c://example.com/\")\n+             .decorator(CircuitBreakerClient.newDecorator(cb, cbr))\n+             .build(MyServiceStub.class);\n+  ```\n+- <type://RequestLog> sanitizers now accept <type://RequestContext> as an additional input, so that\n+  the sanitizers can behave differently depending on the current path, etc. #2803\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .decorator(LoggingService.builder()\n+                                     .headersSanitizer((ctx, headers) -> {\n+                                         if (ctx.path().startsWith(\"/secret/\")) {\n+                                             return \"<secret>\";\n+                                         } else {\n+                                             return headers;\n+                                         }\n+                                     })\n+                                     .newDecorator())\n+            ...\n+            .build();\n+  ```\n+- Armeria now supports service discovery and registration for\n+  [Curator Service Discovery](https://curator.apache.org/curator-x-discovery/index.html) and\n+  [Finagle ServerSets](http://stevenskelton.ca/finagle-serverset-clusters-using-zookeeper/). #2673 #2749 #2791\n+  ```java\n+  CuratorFramework curator = ...;\n+  // Client side:\n+  //// Curator Service Discovery:\n+  EndpointGroup curatorEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/curator\",\n+                                ZooKeeperDiscoverySpec.curator(\"my-service\"));\n+  //// Finagle ServerSets:\n+  EndpointGroup serverSetsEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/serversets\"\n+                                ZooKeeperDiscoverySpec.serverSets());\n+\n+  // Server-side:\n+  Server server = ...;\n+  //// Curator Service Discovery", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f7f95d7a8f4061cbb8ee82c3461c76c6c0991ba"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjQ4MDQwOnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/0.99.7.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzowNTozMlrOGm0O-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzowNTozMlrOGm0O-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM1NDg3NA==", "bodyText": "Add @joonhaeng to here? because he reported #2797 in the Slack channel", "url": "https://github.com/line/armeria/pull/2823#discussion_r443354874", "createdAt": "2020-06-22T07:05:32Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/release-notes/0.99.7.mdx", "diffHunk": "@@ -0,0 +1,245 @@\n+## \ud83c\udf1f New features\n+\n+- You can now specify the maximum lifespan of server-side connections using\n+  <type://ServerBuilder#maxConnectionAge(Duration)>. This is useful when you have to deal with a load balancer\n+  without HTTP/2 support. #2747 #2796\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .maxConnectionAge(Duration.ofMinutes(1))\n+            ...\n+            .build();\n+  ```\n+- You can now record the name of the service that handled a request into <type://RequestOnlyLog#serviceName()>.\n+  #2768 #2780 #2809 #2820\n+  - By using <type://ServiceBindingBuilder#defaultServiceName(String)>:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .route().path(\"/service\")\n+                      .defaultServiceName(\"my-service\")\n+                      .build(new MyService())\n+              .build();\n+    ```\n+  - By using <type://@ServiceName>:\n+    ```java\n+    @ServiceName(\"my-service\")\n+    public class MyAnnotatedService {\n+        @Get(\"/get\")\n+        public String get() { ... }\n+\n+        @Post(\"/set\")\n+        @ServiceName(\"my-post-service\")\n+        public String post(@Param String value) { ... }\n+    }\n+    ```\n+  - Programmatically:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .service(\"/service\", (ctx, req) -> {\n+                  ctx.logBuilder().serviceName(\"my-service\");\n+              })\n+              .build();\n+    ```\n+  - Armeria will use the FQCN of the service class if you did not specify a service name.\n+- You can now use `@Nullable` annotation to specify an optional parameter or request object in annotated\n+  services. Previously, only the parameters with <type://@Default> annotation or `Optional` type were accepted.\n+  #2773\n+  ```java\n+  public class MyAnnotatedService {\n+      // null will be injected into 'value' instead of returning\n+      // '400 Bad Request' when 'value' is missing.\n+      @Get(\"/get\")\n+      public String get(@Param @Nullable String value) { ... }\n+  }\n+  ```\n+- You can now use the classes in the `java.time` package in annotated services. #2760 #2783 #2792 #2799\n+  ```java\n+  public class MyAnnotatedService {\n+      @Get(\"/sleep/{duration}\")\n+      public void sleep(@Param Duration duration) { ... }\n+  }\n+  ```\n+- You can now determine whether a request was successful or not from HTTP trailers in\n+  <type://CircuitBreakerClient> and <type://RetryingClient> using `onResponseTrailers()` method.\n+  This can be useful when you work with gRPC, whose status code is encoded in the `grpc-status` trailer. #2816\n+  ```java\n+  CircuitBreaker cb = CircuitBreaker.of(\"my-service\");\n+  CircuitBreakerRule cbr =\n+      CircuitBreakerRule.builder()\n+                        .onResponseTrailers(trailers -> {\n+                            return trailers.getInt(\"grpc-status\", -1) != 0;\n+                        })\n+                        .thenFailure()\n+                        .build();\n+\n+  MyServiceStub myService =\n+      Clients.builder(\"gproto+h2c://example.com/\")\n+             .decorator(CircuitBreakerClient.newDecorator(cb, cbr))\n+             .build(MyServiceStub.class);\n+  ```\n+- <type://RequestLog> sanitizers now accept <type://RequestContext> as an additional input, so that\n+  the sanitizers can behave differently depending on the current path, etc. #2803\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .decorator(LoggingService.builder()\n+                                     .headersSanitizer((ctx, headers) -> {\n+                                         if (ctx.path().startsWith(\"/secret/\")) {\n+                                             return \"<secret>\";\n+                                         } else {\n+                                             return headers;\n+                                         }\n+                                     })\n+                                     .newDecorator())\n+            ...\n+            .build();\n+  ```\n+- Armeria now supports service discovery and registration for\n+  [Curator Service Discovery](https://curator.apache.org/curator-x-discovery/index.html) and\n+  [Finagle ServerSets](http://stevenskelton.ca/finagle-serverset-clusters-using-zookeeper/). #2673 #2749 #2791\n+  ```java\n+  CuratorFramework curator = ...;\n+  // Client side:\n+  //// Curator Service Discovery:\n+  EndpointGroup curatorEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/curator\",\n+                                ZooKeeperDiscoverySpec.curator(\"my-service\"));\n+  //// Finagle ServerSets:\n+  EndpointGroup serverSetsEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/serversets\"\n+                                ZooKeeperDiscoverySpec.serverSets());\n+\n+  // Server-side:\n+  Server server = ...;\n+  //// Curator Service Discovery\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/curator\",\n+      ZooKeeperRegistrationSpec.curator(\"my-service\")));\n+  //// Finagle ServerSets:\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/serversets\",\n+      ZooKeeperRegistrationSpec.serverSets()));\n+  ```\n+- You can now build <type://OAuth1aToken> more conveniently using the builder API. #2770\n+  ```java\n+  OAuth1aToken token =\n+      OAuth1aToken.builder()\n+                  .realm(\"...\")\n+                  .consumerKey(\"...\")\n+                  .token(\"...\")\n+                  ...\n+                  .build();\n+  ```\n+- The Spring Boot integration now hides all services under `/internal/` for non-management ports when\n+  `management.server.port` property is set. #2408 #2502\n+- The Spring Boot integration now supports\n+  [the new graceful shutdown properties](https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/reference/html/spring-boot-features.html#boot-features-graceful-shutdown)\n+  introduced in Spring Boot 2.3. #2784 #2802\n+- Added a new API for handling reference counted or pooled objects such as <type://PooledHttpData> in\n+  a relatively safer way. #2448\n+  - See <type://PooledHttpData>, <type://PooledWebClient>, <type://PooledHttpRequest> and\n+    <type://PooledHttpResponse> for more information.\n+\n+## \ud83d\udcc8 Improvements\n+\n+- Cleaned up minor issues reported by [errorprone](https://errorprone.info/). #2772\n+- Made some exception messages more user-friendly. #2751\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- It's now allowed to specify an absolute URL *only when* a <type://WebClient> was created *without* a base\n+  URL. #2757\n+  ```java\n+  WebClient clientWithoutBaseUrl = WebClient.of();\n+  WebClient clientWithBaseUrl = WebClient.of(\"https://example.com/\");\n+  // Good\n+  clientWithBaseUrl.get(\"/bar\");\n+  clientWithoutBaseUrl.get(\"https://foo.com/\");\n+  // Bad\n+  clientWithBaseUrl.get(\"https://foo.com/\");\n+  clientWithoutBaseUrl.get(\"/bar\");\n+  ```\n+- Boolean parameter conversion became more strict in annotated services. #2767 #2774\n+  - Only `true`, `false`, `1` and `0` are accepted. Other values will cause a `400 Bad Request` response.\n+- <type://DocService> web UI now shows the 'request body' field for `DELETE` and `PATCH` methods in the debug\n+  form. #2756 #2819\n+- <type://JacksonRequestConverterFunction> now handles the case where the target type has a type parameter,\n+  e.g. `List<Long>`. #2769 #2779\n+- Fixed a bug where the current <type://ServiceRequestContext> is not pushed when invoking\n+  <type://ResponseConverterFunction#convertResponse(ServiceRequestContext,ResponseHeaders,Object,HttpHeaders)>.\n+  #2789\n+- <type://RequestContextExportingAppender> now handles the `<exports />` tag correctly. #2781\n+- Fixed a bug where some Reactive Streams `Subscriber` implementations violate the specification. #2815\n+- You no longer get sporadic <type://WriteTimeoutException> from proxied connections. #2801 #2805\n+- You no longer get a <type://CancelledSubscriptionException> unnecessarily when using\n+  <type://PublisherBasedStreamMessage>. #2797\n+- You no longer get sporadic `EncoderException`s from HTTP/1 connections. #2765\n+- It's now disallowed to specify the following headers in gRPC `Metadata`. #2718\n+  - `:status`\n+  - `grpc-message`\n+  - `grpc-status`\n+  - `armeria.grpc.ThrowableProto-bin`\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+\n+- <type://AbstractUnwrappable#delegate()> has been deprecated in favor of <type://Unwrappable#unwrap()>.\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- You can specify an absolute URL *only when* a <type://WebClient> was created *without* a base URL.\n+  It was previously allowed to specify an absolute URL even when created with a base URL. #2757\n+- The method signature of\n+  <type://RequestConverterFunction#convertRequest(ServiceRequestContext,AggregatedHttpRequest,Class,ParameterizedType)>\n+  has been changed to support parameterized types. #2779\n+- The default <type://MeterIdPrefixFunction> returned by <type://MeterIdPrefixFunction#ofDefault(String)>\n+  now generates the meter IDs with different tags. #2780\n+  - The `route` tag has been replaced with the `service` tag.\n+- `RetrofitMeterIdPrefixFunctionBuilder` has been removed and superseded by\n+  <type://RequestOnlyLog#serviceName()>. #2780\n+- ZooKeeper-based service discovery: #2749 #2791\n+  - You now must specify <type://ZooKeeperRegistrationSpec> or <type://ZooKeeperDiscoverySpec> when creating\n+    <type://ZooKeeperUpdatingListener> or <type://ZooKeeperEndpointGroup>.\n+  - `NodeValueCodec` has been removed.\n+  - `ZooKeeperEndpointGroupBuilder.codec()` and `ZooKeeperUpdatingListenerBuilder.codec()` have been removed.\n+- `ByteBufHttpData` has been replaced with <type://PooledHttpData>. #2448\n+- `SubscriptionOption.WITH_POOLED_OBJECTS` has been replaced with <type://PooledHttpRequest> and\n+  <type://PooledHttpResponse>. #2448\n+\n+## \u26d3 Dependencies\n+\n+- Bouncy Castle 1.65 \u2192 1.65.01\n+- Dropwizard 2.0.9 \u2192 2.0.10\n+- gRPC 1.29.0 \u2192 1.30.0\n+- Jetty 9.4.29 \u2192 9.4.30\n+- Reactor 3.3.5 \u2192 3.3.6\n+- Spring Boot 2.3.0 \u2192 2.3.1, 2.1.14 \u2192 2.1.15\n+- Tomcat 9.0.35 \u2192 9.0.36, 8.5.55 \u2192 8.5.56\n+- Example dependencies\n+  - Dagger 2.27 \u2192 2.28\n+  - grpc-kotlin-stub 0.1.2 \u2192 0.1.3\n+\n+## \ud83d\ude47 Thank you\n+\n+<ThankYou\n+  usernames={[\n+    'anuraaga',\n+    'cbornet',\n+    'eonezhang',\n+    'ghkim3221',\n+    'heowc',\n+    'huydx',\n+    'ikhoon',\n+    'jongmin92',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f7f95d7a8f4061cbb8ee82c3461c76c6c0991ba"}, "originalPosition": 234}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjU0ODYzOnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/0.99.7.mdx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzoyOToxMlrOGm05IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzozNzozMlrOGm1Ibg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2NTY2NA==", "bodyText": "I guess aggregateWithPooledObjects is the most commonly used so might be worth mentioning it.", "url": "https://github.com/line/armeria/pull/2823#discussion_r443365664", "createdAt": "2020-06-22T07:29:12Z", "author": {"login": "anuraaga"}, "path": "site/src/pages/release-notes/0.99.7.mdx", "diffHunk": "@@ -0,0 +1,246 @@\n+## \ud83c\udf1f New features\n+\n+- You can now specify the maximum lifespan of server-side connections using\n+  <type://ServerBuilder#maxConnectionAge(Duration)>. This is useful when you have to deal with a load balancer\n+  without HTTP/2 support. #2747 #2796\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .maxConnectionAge(Duration.ofMinutes(1))\n+            ...\n+            .build();\n+  ```\n+- You can now record the name of the service that handled a request into <type://RequestOnlyLog#serviceName()>.\n+  #2768 #2780 #2809 #2820\n+  - By using <type://ServiceBindingBuilder#defaultServiceName(String)>:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .route().path(\"/service\")\n+                      .defaultServiceName(\"my-service\")\n+                      .build(new MyService())\n+              .build();\n+    ```\n+  - By using <type://@ServiceName>:\n+    ```java\n+    @ServiceName(\"my-service\")\n+    public class MyAnnotatedService {\n+        @Get(\"/get\")\n+        public String get() { ... }\n+\n+        @Post(\"/set\")\n+        @ServiceName(\"my-post-service\")\n+        public String post(@Param String value) { ... }\n+    }\n+    ```\n+  - Programmatically:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .service(\"/service\", (ctx, req) -> {\n+                  ctx.logBuilder().serviceName(\"my-service\");\n+              })\n+              .build();\n+    ```\n+  - Armeria will use the FQCN of the service class if you did not specify a service name.\n+- You can now use `@Nullable` annotation to specify an optional parameter or request object in annotated\n+  services. Previously, only the parameters with <type://@Default> annotation or `Optional` type were accepted.\n+  #2773\n+  ```java\n+  public class MyAnnotatedService {\n+      // null will be injected into 'value' instead of returning\n+      // '400 Bad Request' when 'value' is missing.\n+      @Get(\"/get\")\n+      public String get(@Param @Nullable String value) { ... }\n+  }\n+  ```\n+- You can now use the classes in the `java.time` package in annotated services. #2760 #2783 #2792 #2799\n+  ```java\n+  public class MyAnnotatedService {\n+      @Get(\"/sleep/{duration}\")\n+      public void sleep(@Param Duration duration) { ... }\n+  }\n+  ```\n+- You can now determine whether a request was successful or not from HTTP trailers in\n+  <type://CircuitBreakerClient> and <type://RetryingClient> using `onResponseTrailers()` method.\n+  This can be useful when you work with gRPC, whose status code is encoded in the `grpc-status` trailer. #2816\n+  ```java\n+  CircuitBreaker cb = CircuitBreaker.of(\"my-service\");\n+  CircuitBreakerRule cbr =\n+      CircuitBreakerRule.builder()\n+                        .onResponseTrailers(trailers -> {\n+                            return trailers.getInt(\"grpc-status\", -1) != 0;\n+                        })\n+                        .thenFailure()\n+                        .build();\n+\n+  MyServiceStub myService =\n+      Clients.builder(\"gproto+h2c://example.com/\")\n+             .decorator(CircuitBreakerClient.newDecorator(cb, cbr))\n+             .build(MyServiceStub.class);\n+  ```\n+- <type://RequestLog> sanitizers now accept <type://RequestContext> as an additional input, so that\n+  the sanitizers can behave differently depending on the current path, etc. #2803\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .decorator(LoggingService.builder()\n+                                     .headersSanitizer((ctx, headers) -> {\n+                                         if (ctx.path().startsWith(\"/secret/\")) {\n+                                             return \"<secret>\";\n+                                         } else {\n+                                             return headers;\n+                                         }\n+                                     })\n+                                     .newDecorator())\n+            ...\n+            .build();\n+  ```\n+- Armeria now supports service discovery and registration for\n+  [Curator Service Discovery](https://curator.apache.org/curator-x-discovery/index.html) and\n+  [Finagle ServerSets](http://stevenskelton.ca/finagle-serverset-clusters-using-zookeeper/). #2673 #2749 #2791\n+  ```java\n+  CuratorFramework curator = ...;\n+  // Client side:\n+  //// Curator Service Discovery:\n+  EndpointGroup curatorEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/curator\",\n+                                ZooKeeperDiscoverySpec.curator(\"my-service\"));\n+  //// Finagle ServerSets:\n+  EndpointGroup serverSetsEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/serversets\"\n+                                ZooKeeperDiscoverySpec.serverSets());\n+\n+  // Server-side:\n+  Server server = ...;\n+  //// Curator Service Discovery:\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/curator\",\n+      ZooKeeperRegistrationSpec.curator(\"my-service\")));\n+  //// Finagle ServerSets:\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/serversets\",\n+      ZooKeeperRegistrationSpec.serverSets()));\n+  ```\n+- You can now build <type://OAuth1aToken> more conveniently using the builder API. #2770\n+  ```java\n+  OAuth1aToken token =\n+      OAuth1aToken.builder()\n+                  .realm(\"...\")\n+                  .consumerKey(\"...\")\n+                  .token(\"...\")\n+                  ...\n+                  .build();\n+  ```\n+- The Spring Boot integration now hides all services under `/internal/` for non-management ports when\n+  `management.server.port` property is set. #2408 #2502\n+- The Spring Boot integration now supports\n+  [the new graceful shutdown properties](https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/reference/html/spring-boot-features.html#boot-features-graceful-shutdown)\n+  introduced in Spring Boot 2.3. #2784 #2802\n+- Added a new API for handling reference counted or pooled objects such as <type://PooledHttpData> in\n+  a relatively safer way. #2448\n+  - See <type://PooledHttpData>, <type://PooledWebClient>, <type://PooledHttpRequest> and\n+    <type://PooledHttpResponse> for more information.\n+\n+## \ud83d\udcc8 Improvements\n+\n+- Cleaned up minor issues reported by [errorprone](https://errorprone.info/). #2772\n+- Made some exception messages more user-friendly. #2751\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- It's now allowed to specify an absolute URL *only when* a <type://WebClient> was created *without* a base\n+  URL. #2757\n+  ```java\n+  WebClient clientWithoutBaseUrl = WebClient.of();\n+  WebClient clientWithBaseUrl = WebClient.of(\"https://example.com/\");\n+  // Good\n+  clientWithBaseUrl.get(\"/bar\");\n+  clientWithoutBaseUrl.get(\"https://foo.com/\");\n+  // Bad\n+  clientWithBaseUrl.get(\"https://foo.com/\");\n+  clientWithoutBaseUrl.get(\"/bar\");\n+  ```\n+- Boolean parameter conversion became more strict in annotated services. #2767 #2774\n+  - Only `true`, `false`, `1` and `0` are accepted. Other values will cause a `400 Bad Request` response.\n+- <type://DocService> web UI now shows the 'request body' field for `DELETE` and `PATCH` methods in the debug\n+  form. #2756 #2819\n+- <type://JacksonRequestConverterFunction> now handles the case where the target type has a type parameter,\n+  e.g. `List<Long>`. #2769 #2779\n+- Fixed a bug where the current <type://ServiceRequestContext> is not pushed when invoking\n+  <type://ResponseConverterFunction#convertResponse(ServiceRequestContext,ResponseHeaders,Object,HttpHeaders)>.\n+  #2789\n+- <type://RequestContextExportingAppender> now handles the `<exports />` tag correctly. #2781\n+- Fixed a bug where some Reactive Streams `Subscriber` implementations violate the specification. #2815\n+- You no longer get sporadic <type://WriteTimeoutException> from proxied connections. #2801 #2805\n+- You no longer get a <type://CancelledSubscriptionException> unnecessarily when using\n+  <type://PublisherBasedStreamMessage>. #2797\n+- You no longer get sporadic `EncoderException`s from HTTP/1 connections. #2765\n+- It's now disallowed to specify the following headers in gRPC `Metadata`. #2718\n+  - `:status`\n+  - `grpc-message`\n+  - `grpc-status`\n+  - `armeria.grpc.ThrowableProto-bin`\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+\n+- <type://AbstractUnwrappable#delegate()> has been deprecated in favor of <type://Unwrappable#unwrap()>.\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- You can specify an absolute URL *only when* a <type://WebClient> was created *without* a base URL.\n+  It was previously allowed to specify an absolute URL even when created with a base URL. #2757\n+- The method signature of\n+  <type://RequestConverterFunction#convertRequest(ServiceRequestContext,AggregatedHttpRequest,Class,ParameterizedType)>\n+  has been changed to support parameterized types. #2779\n+- The default <type://MeterIdPrefixFunction> returned by <type://MeterIdPrefixFunction#ofDefault(String)>\n+  now generates the meter IDs with different tags. #2780\n+  - The `route` tag has been replaced with the `service` tag.\n+- `RetrofitMeterIdPrefixFunctionBuilder` has been removed and superseded by\n+  <type://RequestOnlyLog#serviceName()>. #2780\n+- ZooKeeper-based service discovery: #2749 #2791\n+  - You now must specify <type://ZooKeeperRegistrationSpec> or <type://ZooKeeperDiscoverySpec> when creating\n+    <type://ZooKeeperUpdatingListener> or <type://ZooKeeperEndpointGroup>.\n+  - `NodeValueCodec` has been removed.\n+  - `ZooKeeperEndpointGroupBuilder.codec()` and `ZooKeeperUpdatingListenerBuilder.codec()` have been removed.\n+- `ByteBufHttpData` has been replaced with <type://PooledHttpData>. #2448\n+- `SubscriptionOption.WITH_POOLED_OBJECTS` has been replaced with <type://PooledHttpRequest> and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "063ead00e57423dbb1bb9bcf5e178a550c416b99"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2OTU4Mg==", "bodyText": "Good point. Updated.", "url": "https://github.com/line/armeria/pull/2823#discussion_r443369582", "createdAt": "2020-06-22T07:37:32Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/0.99.7.mdx", "diffHunk": "@@ -0,0 +1,246 @@\n+## \ud83c\udf1f New features\n+\n+- You can now specify the maximum lifespan of server-side connections using\n+  <type://ServerBuilder#maxConnectionAge(Duration)>. This is useful when you have to deal with a load balancer\n+  without HTTP/2 support. #2747 #2796\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .maxConnectionAge(Duration.ofMinutes(1))\n+            ...\n+            .build();\n+  ```\n+- You can now record the name of the service that handled a request into <type://RequestOnlyLog#serviceName()>.\n+  #2768 #2780 #2809 #2820\n+  - By using <type://ServiceBindingBuilder#defaultServiceName(String)>:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .route().path(\"/service\")\n+                      .defaultServiceName(\"my-service\")\n+                      .build(new MyService())\n+              .build();\n+    ```\n+  - By using <type://@ServiceName>:\n+    ```java\n+    @ServiceName(\"my-service\")\n+    public class MyAnnotatedService {\n+        @Get(\"/get\")\n+        public String get() { ... }\n+\n+        @Post(\"/set\")\n+        @ServiceName(\"my-post-service\")\n+        public String post(@Param String value) { ... }\n+    }\n+    ```\n+  - Programmatically:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .service(\"/service\", (ctx, req) -> {\n+                  ctx.logBuilder().serviceName(\"my-service\");\n+              })\n+              .build();\n+    ```\n+  - Armeria will use the FQCN of the service class if you did not specify a service name.\n+- You can now use `@Nullable` annotation to specify an optional parameter or request object in annotated\n+  services. Previously, only the parameters with <type://@Default> annotation or `Optional` type were accepted.\n+  #2773\n+  ```java\n+  public class MyAnnotatedService {\n+      // null will be injected into 'value' instead of returning\n+      // '400 Bad Request' when 'value' is missing.\n+      @Get(\"/get\")\n+      public String get(@Param @Nullable String value) { ... }\n+  }\n+  ```\n+- You can now use the classes in the `java.time` package in annotated services. #2760 #2783 #2792 #2799\n+  ```java\n+  public class MyAnnotatedService {\n+      @Get(\"/sleep/{duration}\")\n+      public void sleep(@Param Duration duration) { ... }\n+  }\n+  ```\n+- You can now determine whether a request was successful or not from HTTP trailers in\n+  <type://CircuitBreakerClient> and <type://RetryingClient> using `onResponseTrailers()` method.\n+  This can be useful when you work with gRPC, whose status code is encoded in the `grpc-status` trailer. #2816\n+  ```java\n+  CircuitBreaker cb = CircuitBreaker.of(\"my-service\");\n+  CircuitBreakerRule cbr =\n+      CircuitBreakerRule.builder()\n+                        .onResponseTrailers(trailers -> {\n+                            return trailers.getInt(\"grpc-status\", -1) != 0;\n+                        })\n+                        .thenFailure()\n+                        .build();\n+\n+  MyServiceStub myService =\n+      Clients.builder(\"gproto+h2c://example.com/\")\n+             .decorator(CircuitBreakerClient.newDecorator(cb, cbr))\n+             .build(MyServiceStub.class);\n+  ```\n+- <type://RequestLog> sanitizers now accept <type://RequestContext> as an additional input, so that\n+  the sanitizers can behave differently depending on the current path, etc. #2803\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .decorator(LoggingService.builder()\n+                                     .headersSanitizer((ctx, headers) -> {\n+                                         if (ctx.path().startsWith(\"/secret/\")) {\n+                                             return \"<secret>\";\n+                                         } else {\n+                                             return headers;\n+                                         }\n+                                     })\n+                                     .newDecorator())\n+            ...\n+            .build();\n+  ```\n+- Armeria now supports service discovery and registration for\n+  [Curator Service Discovery](https://curator.apache.org/curator-x-discovery/index.html) and\n+  [Finagle ServerSets](http://stevenskelton.ca/finagle-serverset-clusters-using-zookeeper/). #2673 #2749 #2791\n+  ```java\n+  CuratorFramework curator = ...;\n+  // Client side:\n+  //// Curator Service Discovery:\n+  EndpointGroup curatorEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/curator\",\n+                                ZooKeeperDiscoverySpec.curator(\"my-service\"));\n+  //// Finagle ServerSets:\n+  EndpointGroup serverSetsEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/serversets\"\n+                                ZooKeeperDiscoverySpec.serverSets());\n+\n+  // Server-side:\n+  Server server = ...;\n+  //// Curator Service Discovery:\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/curator\",\n+      ZooKeeperRegistrationSpec.curator(\"my-service\")));\n+  //// Finagle ServerSets:\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/serversets\",\n+      ZooKeeperRegistrationSpec.serverSets()));\n+  ```\n+- You can now build <type://OAuth1aToken> more conveniently using the builder API. #2770\n+  ```java\n+  OAuth1aToken token =\n+      OAuth1aToken.builder()\n+                  .realm(\"...\")\n+                  .consumerKey(\"...\")\n+                  .token(\"...\")\n+                  ...\n+                  .build();\n+  ```\n+- The Spring Boot integration now hides all services under `/internal/` for non-management ports when\n+  `management.server.port` property is set. #2408 #2502\n+- The Spring Boot integration now supports\n+  [the new graceful shutdown properties](https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/reference/html/spring-boot-features.html#boot-features-graceful-shutdown)\n+  introduced in Spring Boot 2.3. #2784 #2802\n+- Added a new API for handling reference counted or pooled objects such as <type://PooledHttpData> in\n+  a relatively safer way. #2448\n+  - See <type://PooledHttpData>, <type://PooledWebClient>, <type://PooledHttpRequest> and\n+    <type://PooledHttpResponse> for more information.\n+\n+## \ud83d\udcc8 Improvements\n+\n+- Cleaned up minor issues reported by [errorprone](https://errorprone.info/). #2772\n+- Made some exception messages more user-friendly. #2751\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- It's now allowed to specify an absolute URL *only when* a <type://WebClient> was created *without* a base\n+  URL. #2757\n+  ```java\n+  WebClient clientWithoutBaseUrl = WebClient.of();\n+  WebClient clientWithBaseUrl = WebClient.of(\"https://example.com/\");\n+  // Good\n+  clientWithBaseUrl.get(\"/bar\");\n+  clientWithoutBaseUrl.get(\"https://foo.com/\");\n+  // Bad\n+  clientWithBaseUrl.get(\"https://foo.com/\");\n+  clientWithoutBaseUrl.get(\"/bar\");\n+  ```\n+- Boolean parameter conversion became more strict in annotated services. #2767 #2774\n+  - Only `true`, `false`, `1` and `0` are accepted. Other values will cause a `400 Bad Request` response.\n+- <type://DocService> web UI now shows the 'request body' field for `DELETE` and `PATCH` methods in the debug\n+  form. #2756 #2819\n+- <type://JacksonRequestConverterFunction> now handles the case where the target type has a type parameter,\n+  e.g. `List<Long>`. #2769 #2779\n+- Fixed a bug where the current <type://ServiceRequestContext> is not pushed when invoking\n+  <type://ResponseConverterFunction#convertResponse(ServiceRequestContext,ResponseHeaders,Object,HttpHeaders)>.\n+  #2789\n+- <type://RequestContextExportingAppender> now handles the `<exports />` tag correctly. #2781\n+- Fixed a bug where some Reactive Streams `Subscriber` implementations violate the specification. #2815\n+- You no longer get sporadic <type://WriteTimeoutException> from proxied connections. #2801 #2805\n+- You no longer get a <type://CancelledSubscriptionException> unnecessarily when using\n+  <type://PublisherBasedStreamMessage>. #2797\n+- You no longer get sporadic `EncoderException`s from HTTP/1 connections. #2765\n+- It's now disallowed to specify the following headers in gRPC `Metadata`. #2718\n+  - `:status`\n+  - `grpc-message`\n+  - `grpc-status`\n+  - `armeria.grpc.ThrowableProto-bin`\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+\n+- <type://AbstractUnwrappable#delegate()> has been deprecated in favor of <type://Unwrappable#unwrap()>.\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- You can specify an absolute URL *only when* a <type://WebClient> was created *without* a base URL.\n+  It was previously allowed to specify an absolute URL even when created with a base URL. #2757\n+- The method signature of\n+  <type://RequestConverterFunction#convertRequest(ServiceRequestContext,AggregatedHttpRequest,Class,ParameterizedType)>\n+  has been changed to support parameterized types. #2779\n+- The default <type://MeterIdPrefixFunction> returned by <type://MeterIdPrefixFunction#ofDefault(String)>\n+  now generates the meter IDs with different tags. #2780\n+  - The `route` tag has been replaced with the `service` tag.\n+- `RetrofitMeterIdPrefixFunctionBuilder` has been removed and superseded by\n+  <type://RequestOnlyLog#serviceName()>. #2780\n+- ZooKeeper-based service discovery: #2749 #2791\n+  - You now must specify <type://ZooKeeperRegistrationSpec> or <type://ZooKeeperDiscoverySpec> when creating\n+    <type://ZooKeeperUpdatingListener> or <type://ZooKeeperEndpointGroup>.\n+  - `NodeValueCodec` has been removed.\n+  - `ZooKeeperEndpointGroupBuilder.codec()` and `ZooKeeperUpdatingListenerBuilder.codec()` have been removed.\n+- `ByteBufHttpData` has been replaced with <type://PooledHttpData>. #2448\n+- `SubscriptionOption.WITH_POOLED_OBJECTS` has been replaced with <type://PooledHttpRequest> and", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2NTY2NA=="}, "originalCommit": {"oid": "063ead00e57423dbb1bb9bcf5e178a550c416b99"}, "originalPosition": 207}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2382, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}