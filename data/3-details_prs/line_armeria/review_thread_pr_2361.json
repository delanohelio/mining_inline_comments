{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NTgyMjc5", "number": 2361, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQwOTowOTo0NFrODVZ4cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMTo0ODozN1rODVlK1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzNzcwNzM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/WebClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQwOTowOTo0NFrOFZnf-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQwOTowOTo0NFrOFZnf-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQwNTg4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns a new {@link WebClient} client that connects to the specified {@link Endpoint} with\n          \n          \n            \n                 * Returns a new {@link WebClient} that connects to the specified {@link Endpoint} with", "url": "https://github.com/line/armeria/pull/2361#discussion_r362405882", "createdAt": "2020-01-02T09:09:44Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/WebClient.java", "diffHunk": "@@ -36,168 +36,248 @@\n public interface WebClient extends ClientBuilderParams, Unwrappable {\n \n     /**\n-     * Creates a new web client without a base URI using the default {@link ClientFactory} and\n+     * Returns a {@link WebClient} without a base URI using the default {@link ClientFactory} and\n      * the default {@link ClientOptions}.\n      */\n     static WebClient of() {\n-        return builder().options(ClientOptions.of()).build();\n+        return DefaultWebClient.DEFAULT;\n     }\n \n     /**\n-     * Creates a new web client that connects to the specified {@code uri} using the default\n+     * Returns a new {@link WebClient} that connects to the specified {@code uri} using the default options.\n+     *\n+     * @param uri the URI of the server endpoint\n+     *\n+     * @throws IllegalArgumentException if the scheme of the specified {@code uri} is not an HTTP scheme\n+     */\n+    static WebClient of(String uri) {\n+        return builder(uri).build();\n+    }\n+\n+    /**\n+     * Returns a new {@link WebClient} that connects to the specified {@link URI} using the default options.\n+     *\n+     * @param uri the {@link URI} of the server endpoint\n+     *\n+     * @throws IllegalArgumentException if the scheme of the specified {@link URI} is not an HTTP scheme\n+     */\n+    static WebClient of(URI uri) {\n+        return builder(uri).build();\n+    }\n+\n+    /**\n+     * Returns a new {@link WebClient} client that connects to the specified {@link Endpoint} with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfb510a9a087541b6a84901306f0b826fe090d44"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzNzcwODg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/WebClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQwOToxMDozMlrOFZng0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQwOToxMDozMlrOFZng0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQwNjA5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns a new web client that connects to the specified {@code uri} using the default\n          \n          \n            \n                 * Returns a new {@link WebClient} that connects to the specified {@code uri} using the default", "url": "https://github.com/line/armeria/pull/2361#discussion_r362406097", "createdAt": "2020-01-02T09:10:32Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/WebClient.java", "diffHunk": "@@ -36,168 +36,248 @@\n public interface WebClient extends ClientBuilderParams, Unwrappable {\n \n     /**\n-     * Creates a new web client without a base URI using the default {@link ClientFactory} and\n+     * Returns a {@link WebClient} without a base URI using the default {@link ClientFactory} and\n      * the default {@link ClientOptions}.\n      */\n     static WebClient of() {\n-        return builder().options(ClientOptions.of()).build();\n+        return DefaultWebClient.DEFAULT;\n     }\n \n     /**\n-     * Creates a new web client that connects to the specified {@code uri} using the default\n+     * Returns a new {@link WebClient} that connects to the specified {@code uri} using the default options.\n+     *\n+     * @param uri the URI of the server endpoint\n+     *\n+     * @throws IllegalArgumentException if the scheme of the specified {@code uri} is not an HTTP scheme\n+     */\n+    static WebClient of(String uri) {\n+        return builder(uri).build();\n+    }\n+\n+    /**\n+     * Returns a new {@link WebClient} that connects to the specified {@link URI} using the default options.\n+     *\n+     * @param uri the {@link URI} of the server endpoint\n+     *\n+     * @throws IllegalArgumentException if the scheme of the specified {@link URI} is not an HTTP scheme\n+     */\n+    static WebClient of(URI uri) {\n+        return builder(uri).build();\n+    }\n+\n+    /**\n+     * Returns a new {@link WebClient} client that connects to the specified {@link Endpoint} with\n+     * the {@link SessionProtocol} using the default {@link ClientFactory} and the default\n+     * {@link ClientOptions}.\n+     *\n+     * @param protocol the {@link SessionProtocol} of the {@link Endpoint}\n+     * @param endpoint the server {@link Endpoint}\n+     */\n+    static WebClient of(SessionProtocol protocol, Endpoint endpoint) {\n+        return builder(protocol, endpoint).build();\n+    }\n+\n+    /**\n+     * Returns a new {@link WebClient} that connects to the specified {@code uri} using the default\n      * {@link ClientFactory}.\n      *\n      * @param uri the URI of the server endpoint\n      * @param options the {@link ClientOptionValue}s\n      *\n      * @throws IllegalArgumentException if the scheme of the specified {@code uri} is not an HTTP scheme\n+     *\n+     * @deprecated Use {@link #builder(String)} and {@link WebClientBuilder#option(ClientOptionValue)}.\n      */\n+    @Deprecated\n     static WebClient of(String uri, ClientOptionValue<?>... options) {\n-        return of(ClientFactory.ofDefault(), uri, options);\n+        return builder(uri).options(options).build();\n     }\n \n     /**\n-     * Creates a new web client that connects to the specified {@code uri} using the default\n+     * Returns a new web client that connects to the specified {@code uri} using the default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfb510a9a087541b6a84901306f0b826fe090d44"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzNzcwOTg5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/WebClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQwOToxMTowMFrOFZnhRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQwOToxMTowMFrOFZnhRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQwNjIxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns a new web client that connects to the specified {@code uri} using an alternative\n          \n          \n            \n                 * Returns a new {@link WebClient} that connects to the specified {@code uri} using an alternative", "url": "https://github.com/line/armeria/pull/2361#discussion_r362406214", "createdAt": "2020-01-02T09:11:00Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/WebClient.java", "diffHunk": "@@ -36,168 +36,248 @@\n public interface WebClient extends ClientBuilderParams, Unwrappable {\n \n     /**\n-     * Creates a new web client without a base URI using the default {@link ClientFactory} and\n+     * Returns a {@link WebClient} without a base URI using the default {@link ClientFactory} and\n      * the default {@link ClientOptions}.\n      */\n     static WebClient of() {\n-        return builder().options(ClientOptions.of()).build();\n+        return DefaultWebClient.DEFAULT;\n     }\n \n     /**\n-     * Creates a new web client that connects to the specified {@code uri} using the default\n+     * Returns a new {@link WebClient} that connects to the specified {@code uri} using the default options.\n+     *\n+     * @param uri the URI of the server endpoint\n+     *\n+     * @throws IllegalArgumentException if the scheme of the specified {@code uri} is not an HTTP scheme\n+     */\n+    static WebClient of(String uri) {\n+        return builder(uri).build();\n+    }\n+\n+    /**\n+     * Returns a new {@link WebClient} that connects to the specified {@link URI} using the default options.\n+     *\n+     * @param uri the {@link URI} of the server endpoint\n+     *\n+     * @throws IllegalArgumentException if the scheme of the specified {@link URI} is not an HTTP scheme\n+     */\n+    static WebClient of(URI uri) {\n+        return builder(uri).build();\n+    }\n+\n+    /**\n+     * Returns a new {@link WebClient} client that connects to the specified {@link Endpoint} with\n+     * the {@link SessionProtocol} using the default {@link ClientFactory} and the default\n+     * {@link ClientOptions}.\n+     *\n+     * @param protocol the {@link SessionProtocol} of the {@link Endpoint}\n+     * @param endpoint the server {@link Endpoint}\n+     */\n+    static WebClient of(SessionProtocol protocol, Endpoint endpoint) {\n+        return builder(protocol, endpoint).build();\n+    }\n+\n+    /**\n+     * Returns a new {@link WebClient} that connects to the specified {@code uri} using the default\n      * {@link ClientFactory}.\n      *\n      * @param uri the URI of the server endpoint\n      * @param options the {@link ClientOptionValue}s\n      *\n      * @throws IllegalArgumentException if the scheme of the specified {@code uri} is not an HTTP scheme\n+     *\n+     * @deprecated Use {@link #builder(String)} and {@link WebClientBuilder#option(ClientOptionValue)}.\n      */\n+    @Deprecated\n     static WebClient of(String uri, ClientOptionValue<?>... options) {\n-        return of(ClientFactory.ofDefault(), uri, options);\n+        return builder(uri).options(options).build();\n     }\n \n     /**\n-     * Creates a new web client that connects to the specified {@code uri} using the default\n+     * Returns a new web client that connects to the specified {@code uri} using the default\n      * {@link ClientFactory}.\n      *\n      * @param uri the URI of the server endpoint\n      * @param options the {@link ClientOptions}\n      *\n      * @throws IllegalArgumentException if the scheme of the specified {@code uri} is not an HTTP scheme\n+     *\n+     * @deprecated Use {@link #builder(String)} and {@link WebClientBuilder#options(ClientOptions)}.\n      */\n+    @Deprecated\n     static WebClient of(String uri, ClientOptions options) {\n-        return of(ClientFactory.ofDefault(), uri, options);\n+        return builder(uri).options(options).build();\n     }\n \n     /**\n-     * Creates a new web client that connects to the specified {@code uri} using an alternative\n+     * Returns a new web client that connects to the specified {@code uri} using an alternative", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfb510a9a087541b6a84901306f0b826fe090d44"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzNzcxMjYwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/WebClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQwOToxMjoyMFrOFZnirA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQwOToxMjoyMFrOFZnirA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQwNjU3Mg==", "bodyText": "s/new web client/new {@link WebClient} \ud83d\ude00", "url": "https://github.com/line/armeria/pull/2361#discussion_r362406572", "createdAt": "2020-01-02T09:12:20Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/WebClient.java", "diffHunk": "@@ -36,168 +36,248 @@\n public interface WebClient extends ClientBuilderParams, Unwrappable {\n \n     /**\n-     * Creates a new web client without a base URI using the default {@link ClientFactory} and\n+     * Returns a {@link WebClient} without a base URI using the default {@link ClientFactory} and\n      * the default {@link ClientOptions}.\n      */\n     static WebClient of() {\n-        return builder().options(ClientOptions.of()).build();\n+        return DefaultWebClient.DEFAULT;\n     }\n \n     /**\n-     * Creates a new web client that connects to the specified {@code uri} using the default\n+     * Returns a new {@link WebClient} that connects to the specified {@code uri} using the default options.\n+     *\n+     * @param uri the URI of the server endpoint\n+     *\n+     * @throws IllegalArgumentException if the scheme of the specified {@code uri} is not an HTTP scheme\n+     */\n+    static WebClient of(String uri) {\n+        return builder(uri).build();\n+    }\n+\n+    /**\n+     * Returns a new {@link WebClient} that connects to the specified {@link URI} using the default options.\n+     *\n+     * @param uri the {@link URI} of the server endpoint\n+     *\n+     * @throws IllegalArgumentException if the scheme of the specified {@link URI} is not an HTTP scheme\n+     */\n+    static WebClient of(URI uri) {\n+        return builder(uri).build();\n+    }\n+\n+    /**\n+     * Returns a new {@link WebClient} client that connects to the specified {@link Endpoint} with\n+     * the {@link SessionProtocol} using the default {@link ClientFactory} and the default\n+     * {@link ClientOptions}.\n+     *\n+     * @param protocol the {@link SessionProtocol} of the {@link Endpoint}\n+     * @param endpoint the server {@link Endpoint}\n+     */\n+    static WebClient of(SessionProtocol protocol, Endpoint endpoint) {\n+        return builder(protocol, endpoint).build();\n+    }\n+\n+    /**\n+     * Returns a new {@link WebClient} that connects to the specified {@code uri} using the default\n      * {@link ClientFactory}.\n      *\n      * @param uri the URI of the server endpoint\n      * @param options the {@link ClientOptionValue}s\n      *\n      * @throws IllegalArgumentException if the scheme of the specified {@code uri} is not an HTTP scheme\n+     *\n+     * @deprecated Use {@link #builder(String)} and {@link WebClientBuilder#option(ClientOptionValue)}.\n      */\n+    @Deprecated\n     static WebClient of(String uri, ClientOptionValue<?>... options) {\n-        return of(ClientFactory.ofDefault(), uri, options);\n+        return builder(uri).options(options).build();\n     }\n \n     /**\n-     * Creates a new web client that connects to the specified {@code uri} using the default\n+     * Returns a new web client that connects to the specified {@code uri} using the default\n      * {@link ClientFactory}.\n      *\n      * @param uri the URI of the server endpoint\n      * @param options the {@link ClientOptions}\n      *\n      * @throws IllegalArgumentException if the scheme of the specified {@code uri} is not an HTTP scheme\n+     *\n+     * @deprecated Use {@link #builder(String)} and {@link WebClientBuilder#options(ClientOptions)}.\n      */\n+    @Deprecated\n     static WebClient of(String uri, ClientOptions options) {\n-        return of(ClientFactory.ofDefault(), uri, options);\n+        return builder(uri).options(options).build();\n     }\n \n     /**\n-     * Creates a new web client that connects to the specified {@code uri} using an alternative\n+     * Returns a new web client that connects to the specified {@code uri} using an alternative\n      * {@link ClientFactory}.\n      *\n      * @param factory an alternative {@link ClientFactory}\n      * @param uri the URI of the server endpoint\n      * @param options the {@link ClientOptionValue}s\n      *\n      * @throws IllegalArgumentException if the scheme of the specified {@code uri} is not an HTTP scheme\n+     *\n+     * @deprecated Use {@link #builder(String)}, {@link WebClientBuilder#factory(ClientFactory)}\n+     *             and {@link WebClientBuilder#options(ClientOptionValue[])}.\n      */\n+    @Deprecated\n     static WebClient of(ClientFactory factory, String uri, ClientOptionValue<?>... options) {\n         return builder(uri).factory(factory).options(options).build();\n     }\n \n     /**\n-     * Creates a new web client that connects to the specified {@code uri} using an alternative\n+     * Returns a new web client that connects to the specified {@code uri} using an alternative", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfb510a9a087541b6a84901306f0b826fe090d44"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTU1MDIyOnYy", "diffSide": "RIGHT", "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/UnaryGrpcClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMTo0MDowN1rOFZ4rrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMTo0MDowN1rOFZ4rrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY4NzQwNQ==", "bodyText": "Clients?", "url": "https://github.com/line/armeria/pull/2361#discussion_r362687405", "createdAt": "2020-01-03T01:40:07Z", "author": {"login": "minwoox"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/UnaryGrpcClient.java", "diffHunk": "@@ -59,7 +59,7 @@\n      * Constructs a {@link UnaryGrpcClient} for the given {@link WebClient}.\n      */\n     // TODO(anuraaga): We would ideally use our standard client building pattern, i.e.,\n-    // new ClientBuilder(...).build(UnaryGrpcClient.class), but that requires mapping protocol schemes to media\n+    // Client.builder(...).build(UnaryGrpcClient.class), but that requires mapping protocol schemes to media", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac9b80f9c8ff15f6fd74bcf05118e2adf47041a2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTU1NjcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/WebClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMTo0ODozN1rOFZ4vXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMTo0ODozN1rOFZ4vXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY4ODM0OA==", "bodyText": "Could you add a small example for this case please?", "url": "https://github.com/line/armeria/pull/2361#discussion_r362688348", "createdAt": "2020-01-03T01:48:37Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/WebClientBuilder.java", "diffHunk": "@@ -77,8 +85,15 @@ static boolean isUndefinedUri(URI uri) {\n         if (isUndefinedUri(uri)) {\n             this.uri = uri;\n         } else {\n-            validateScheme(requireNonNull(uri, \"uri\").getScheme());\n-            this.uri = URI.create(SerializationFormat.NONE + \"+\" + uri);\n+            final String givenScheme = requireNonNull(uri, \"uri\").getScheme();\n+            final Scheme scheme = validateScheme(givenScheme);\n+            if (scheme.uriText().equals(givenScheme)) {\n+                this.uri = uri;\n+            } else {\n+                // Replace the user-specified scheme with the normalized one.\n+                this.uri = URI.create(scheme.uriText() +\n+                                      uri.toString().substring(givenScheme.length()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac9b80f9c8ff15f6fd74bcf05118e2adf47041a2"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3044, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}