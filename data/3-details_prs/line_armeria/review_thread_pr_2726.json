{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NTk1Mzcy", "number": 2726, "reviewThreads": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjo0ODoxOFrOD9niww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjo0MjowOVrOD-2EWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTM3NjAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerDecision.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjo0ODoxOFrOGXN-Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjowNToxOFrOGX4xsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5OTMxNA==", "bodyText": "Can't we make this as enum?", "url": "https://github.com/line/armeria/pull/2726#discussion_r426999314", "createdAt": "2020-05-19T02:48:18Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerDecision.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * A {@link CircuitBreakerDecision} that determines whether a {@link CircuitBreakerRule} reports a response as\n+ * a {@link #success()}, {@link #failure()}, {@link #ignore()}s it.\n+ * {@link #next()} skips a {@link CircuitBreakerRule} and will lookup next {@link CircuitBreakerRule}s.\n+ */\n+public final class CircuitBreakerDecision {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyMDU3OA==", "bodyText": "Yeah, I intended to provide an API design similar to RetryDecision.\nHowever, enum is a good choice too.", "url": "https://github.com/line/armeria/pull/2726#discussion_r427020578", "createdAt": "2020-05-19T04:17:28Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerDecision.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * A {@link CircuitBreakerDecision} that determines whether a {@link CircuitBreakerRule} reports a response as\n+ * a {@link #success()}, {@link #failure()}, {@link #ignore()}s it.\n+ * {@link #next()} skips a {@link CircuitBreakerRule} and will lookup next {@link CircuitBreakerRule}s.\n+ */\n+public final class CircuitBreakerDecision {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5OTMxNA=="}, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyMzE4Nw==", "bodyText": "I think RetryDecision is not enum because of this:\nhttps://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/client/retry/RetryDecision.java#L35\nWhich is that a user might create a new instance with a different Backoff.\nBut for CircuitBreakerDecision, we don't have such use cases.", "url": "https://github.com/line/armeria/pull/2726#discussion_r427023187", "createdAt": "2020-05-19T04:28:59Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerDecision.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * A {@link CircuitBreakerDecision} that determines whether a {@link CircuitBreakerRule} reports a response as\n+ * a {@link #success()}, {@link #failure()}, {@link #ignore()}s it.\n+ * {@link #next()} skips a {@link CircuitBreakerRule} and will lookup next {@link CircuitBreakerRule}s.\n+ */\n+public final class CircuitBreakerDecision {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5OTMxNA=="}, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0NDM5MQ==", "bodyText": "I thought users might not be interested in this is enum or not.\nThe important thing is how to use those APIs. Some API should use next() and others are not.\nRetryDecision.next() \n// vs\nCircuitBreakerDecision.NEXT\n// vs\nCircuitBreakerDecision.next()\nBy the way, I'm not strong here. Let me migrate this to enum.", "url": "https://github.com/line/armeria/pull/2726#discussion_r427144391", "createdAt": "2020-05-19T09:02:01Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerDecision.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * A {@link CircuitBreakerDecision} that determines whether a {@link CircuitBreakerRule} reports a response as\n+ * a {@link #success()}, {@link #failure()}, {@link #ignore()}s it.\n+ * {@link #next()} skips a {@link CircuitBreakerRule} and will lookup next {@link CircuitBreakerRule}s.\n+ */\n+public final class CircuitBreakerDecision {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5OTMxNA=="}, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1MTQxMg==", "bodyText": "I'm not strong on this neither. \ud83d\ude06 If you think, the current implementation is better in terms of providing a similar API with RetryDecision then it's good as it is.", "url": "https://github.com/line/armeria/pull/2726#discussion_r427151412", "createdAt": "2020-05-19T09:13:02Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerDecision.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * A {@link CircuitBreakerDecision} that determines whether a {@link CircuitBreakerRule} reports a response as\n+ * a {@link #success()}, {@link #failure()}, {@link #ignore()}s it.\n+ * {@link #next()} skips a {@link CircuitBreakerRule} and will lookup next {@link CircuitBreakerRule}s.\n+ */\n+public final class CircuitBreakerDecision {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5OTMxNA=="}, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwMDY1OQ==", "bodyText": "Then let me keep the current implementation.\ud83d\ude09", "url": "https://github.com/line/armeria/pull/2726#discussion_r427700659", "createdAt": "2020-05-20T02:05:18Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerDecision.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * A {@link CircuitBreakerDecision} that determines whether a {@link CircuitBreakerRule} reports a response as\n+ * a {@link #success()}, {@link #failure()}, {@link #ignore()}s it.\n+ * {@link #next()} skips a {@link CircuitBreakerRule} and will lookup next {@link CircuitBreakerRule}s.\n+ */\n+public final class CircuitBreakerDecision {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5OTMxNA=="}, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTM3OTM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjo1MDoyN1rOGXOADw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjo1MDoyN1rOGXOADw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5OTgyMw==", "bodyText": "Let's check null for the circuitBreaker", "url": "https://github.com/line/armeria/pull/2726#discussion_r426999823", "createdAt": "2020-05-19T02:50:27Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.java", "diffHunk": "@@ -32,16 +37,44 @@\n public class CircuitBreakerClient extends AbstractCircuitBreakerClient<HttpRequest, HttpResponse>\n         implements HttpClient {\n \n+    /**\n+     * Creates a new decorator using the specified {@link CircuitBreaker} instance and\n+     * {@link CircuitBreakerRule}.\n+     *\n+     * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for\n+     * unrelated services.\n+     */\n+    public static Function<? super HttpClient, CircuitBreakerClient>\n+    newDecorator(CircuitBreaker circuitBreaker, CircuitBreakerRule rule) {\n+        return newDecorator((ctx, req) -> circuitBreaker, rule);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTM4MDMwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjo1MDo1OFrOGXOAmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjo1MDo1OFrOGXOAmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5OTk2Mw==", "bodyText": "I think we should check null out of lambda.", "url": "https://github.com/line/armeria/pull/2726#discussion_r426999963", "createdAt": "2020-05-19T02:50:58Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.java", "diffHunk": "@@ -32,16 +37,44 @@\n public class CircuitBreakerClient extends AbstractCircuitBreakerClient<HttpRequest, HttpResponse>\n         implements HttpClient {\n \n+    /**\n+     * Creates a new decorator using the specified {@link CircuitBreaker} instance and\n+     * {@link CircuitBreakerRule}.\n+     *\n+     * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for\n+     * unrelated services.\n+     */\n+    public static Function<? super HttpClient, CircuitBreakerClient>\n+    newDecorator(CircuitBreaker circuitBreaker, CircuitBreakerRule rule) {\n+        return newDecorator((ctx, req) -> circuitBreaker, rule);\n+    }\n+\n     /**\n      * Creates a new decorator using the specified {@link CircuitBreaker} instance and\n      * {@link CircuitBreakerStrategy}.\n      *\n      * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for\n      * unrelated services.\n+     *\n+     * @deprecated Use {@link #newDecorator(CircuitBreaker, CircuitBreakerRule)}.\n      */\n+    @Deprecated\n     public static Function<? super HttpClient, CircuitBreakerClient>\n     newDecorator(CircuitBreaker circuitBreaker, CircuitBreakerStrategy strategy) {\n-        return newDecorator((ctx, req) -> circuitBreaker, strategy);\n+        requireNonNull(strategy, \"strategy\");\n+        return newDecorator(circuitBreaker, fromCircuitBreakerStrategy(strategy));\n+    }\n+\n+    /**\n+     * Creates a new decorator with the specified {@link CircuitBreakerMapping} and\n+     * {@link CircuitBreakerRule}.\n+     *\n+     * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for\n+     * unrelated services.\n+     */\n+    public static Function<? super HttpClient, CircuitBreakerClient>\n+    newDecorator(CircuitBreakerMapping mapping, CircuitBreakerRule rule) {\n+        return delegate -> new CircuitBreakerClient(delegate, mapping, rule);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTM4NTYyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjo1NDoyM1rOGXOD8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNTo1NDozOVrOGXQ05g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwMDgxOA==", "bodyText": "I guess passing HttpResponse.ofFailure(cause) instead of null is for the backward compatibility with the strategy. Should we pass null after the strategy is gone?", "url": "https://github.com/line/armeria/pull/2726#discussion_r427000818", "createdAt": "2020-05-19T02:54:23Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.java", "diffHunk": "@@ -145,29 +257,31 @@ protected HttpResponse doExecute(ClientRequestContext ctx, HttpRequest req, Circ\n         try {\n             response = delegate().execute(ctx, req);\n         } catch (Throwable cause) {\n-            if (needsContentInStrategy) {\n-                reportSuccessOrFailure(circuitBreaker, strategyWithContent().shouldReportAsSuccess(\n-                        ctx, HttpResponse.ofFailure(cause)));\n+            if (needsContentInRule) {\n+                reportSuccessOrFailure(circuitBreaker, ruleWithContent().shouldReportAsSuccess(\n+                        ctx, HttpResponse.ofFailure(cause), cause));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyNjMwMQ==", "bodyText": "Yes. the content should not be null yet. If a user set CircuitBreakerStrategyWithContent, the content is passed to it via CircuitBreakerRuleWithContent\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleUtil.java\n    \n    \n         Line 68\n      in\n      27958cc\n    \n    \n    \n    \n\n        \n          \n           return (ctx, content, cause) -> strategy.shouldReportAsSuccess(ctx, content).thenApply(result -> {", "url": "https://github.com/line/armeria/pull/2726#discussion_r427026301", "createdAt": "2020-05-19T04:42:02Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.java", "diffHunk": "@@ -145,29 +257,31 @@ protected HttpResponse doExecute(ClientRequestContext ctx, HttpRequest req, Circ\n         try {\n             response = delegate().execute(ctx, req);\n         } catch (Throwable cause) {\n-            if (needsContentInStrategy) {\n-                reportSuccessOrFailure(circuitBreaker, strategyWithContent().shouldReportAsSuccess(\n-                        ctx, HttpResponse.ofFailure(cause)));\n+            if (needsContentInRule) {\n+                reportSuccessOrFailure(circuitBreaker, ruleWithContent().shouldReportAsSuccess(\n+                        ctx, HttpResponse.ofFailure(cause), cause));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwMDgxOA=="}, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0NjExOA==", "bodyText": "By the way, I realized null content is passed to RetryStrategyWithContent. \ud83d\ude31\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java\n    \n    \n        Lines 329 to 336\n      in\n      ac3440b\n    \n    \n    \n    \n\n        \n          \n           if (needsContentInRule) { \n        \n\n        \n          \n               retryRule = fromRetryRuleWithContent(); \n        \n\n        \n          \n           } else { \n        \n\n        \n          \n               retryRule = retryRule(); \n        \n\n        \n          \n           } \n        \n\n        \n          \n           final Runnable originalResClosingTask = \n        \n\n        \n          \n                   responseCause == null ? response::abort : () -> response.abort(responseCause); \n        \n\n        \n          \n           retryRule.shouldRetry(derivedCtx, responseCause)", "url": "https://github.com/line/armeria/pull/2726#discussion_r427046118", "createdAt": "2020-05-19T05:54:39Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.java", "diffHunk": "@@ -145,29 +257,31 @@ protected HttpResponse doExecute(ClientRequestContext ctx, HttpRequest req, Circ\n         try {\n             response = delegate().execute(ctx, req);\n         } catch (Throwable cause) {\n-            if (needsContentInStrategy) {\n-                reportSuccessOrFailure(circuitBreaker, strategyWithContent().shouldReportAsSuccess(\n-                        ctx, HttpResponse.ofFailure(cause)));\n+            if (needsContentInRule) {\n+                reportSuccessOrFailure(circuitBreaker, ruleWithContent().shouldReportAsSuccess(\n+                        ctx, HttpResponse.ofFailure(cause), cause));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwMDgxOA=="}, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 248}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTM4ODY4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjo1NjoyMlrOGXOF5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNDo0MzozN1rOGXPo-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwMTMxNg==", "bodyText": "Don't we need to check if the cause is null or not? so that we can just call\nshouldReportAsSuccess(ctx, null, cause) in that case?", "url": "https://github.com/line/armeria/pull/2726#discussion_r427001316", "createdAt": "2020-05-19T02:56:22Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.java", "diffHunk": "@@ -145,29 +257,31 @@ protected HttpResponse doExecute(ClientRequestContext ctx, HttpRequest req, Circ\n         try {\n             response = delegate().execute(ctx, req);\n         } catch (Throwable cause) {\n-            if (needsContentInStrategy) {\n-                reportSuccessOrFailure(circuitBreaker, strategyWithContent().shouldReportAsSuccess(\n-                        ctx, HttpResponse.ofFailure(cause)));\n+            if (needsContentInRule) {\n+                reportSuccessOrFailure(circuitBreaker, ruleWithContent().shouldReportAsSuccess(\n+                        ctx, HttpResponse.ofFailure(cause), cause));\n             } else {\n-                reportSuccessOrFailure(circuitBreaker, strategy().shouldReportAsSuccess(ctx, cause));\n+                reportSuccessOrFailure(circuitBreaker, rule().shouldReportAsSuccess(ctx, cause));\n             }\n             throw cause;\n         }\n \n-        if (needsContentInStrategy) {\n-            try (HttpResponseDuplicator duplicator =\n-                         response.toDuplicator(ctx.eventLoop(), ctx.maxResponseLength())) {\n-                reportSuccessOrFailure(circuitBreaker, strategyWithContent().shouldReportAsSuccess(\n-                        ctx, duplicator.duplicate()));\n-                return duplicator.duplicate();\n-            }\n-        }\n-\n-        ctx.log().whenAvailable(RequestLogProperty.RESPONSE_HEADERS).thenAccept(log -> {\n-            final Throwable cause =\n-                    log.isAvailable(RequestLogProperty.RESPONSE_CAUSE) ? log.responseCause() : null;\n-            reportSuccessOrFailure(circuitBreaker, strategy().shouldReportAsSuccess(ctx, cause));\n-        });\n-        return response;\n+        final CompletableFuture<HttpResponse> responseFuture =\n+                ctx.log().whenAvailable(RequestLogProperty.RESPONSE_HEADERS).thenApply(log -> {\n+                    if (needsContentInRule) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyNjY4Mg==", "bodyText": "Good point. But cannot pass null yet(#2726 (comment))\nLet me pass shouldReportAsSuccess(ctx, response, cause) without duplicator.", "url": "https://github.com/line/armeria/pull/2726#discussion_r427026682", "createdAt": "2020-05-19T04:43:37Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.java", "diffHunk": "@@ -145,29 +257,31 @@ protected HttpResponse doExecute(ClientRequestContext ctx, HttpRequest req, Circ\n         try {\n             response = delegate().execute(ctx, req);\n         } catch (Throwable cause) {\n-            if (needsContentInStrategy) {\n-                reportSuccessOrFailure(circuitBreaker, strategyWithContent().shouldReportAsSuccess(\n-                        ctx, HttpResponse.ofFailure(cause)));\n+            if (needsContentInRule) {\n+                reportSuccessOrFailure(circuitBreaker, ruleWithContent().shouldReportAsSuccess(\n+                        ctx, HttpResponse.ofFailure(cause), cause));\n             } else {\n-                reportSuccessOrFailure(circuitBreaker, strategy().shouldReportAsSuccess(ctx, cause));\n+                reportSuccessOrFailure(circuitBreaker, rule().shouldReportAsSuccess(ctx, cause));\n             }\n             throw cause;\n         }\n \n-        if (needsContentInStrategy) {\n-            try (HttpResponseDuplicator duplicator =\n-                         response.toDuplicator(ctx.eventLoop(), ctx.maxResponseLength())) {\n-                reportSuccessOrFailure(circuitBreaker, strategyWithContent().shouldReportAsSuccess(\n-                        ctx, duplicator.duplicate()));\n-                return duplicator.duplicate();\n-            }\n-        }\n-\n-        ctx.log().whenAvailable(RequestLogProperty.RESPONSE_HEADERS).thenAccept(log -> {\n-            final Throwable cause =\n-                    log.isAvailable(RequestLogProperty.RESPONSE_CAUSE) ? log.responseCause() : null;\n-            reportSuccessOrFailure(circuitBreaker, strategy().shouldReportAsSuccess(ctx, cause));\n-        });\n-        return response;\n+        final CompletableFuture<HttpResponse> responseFuture =\n+                ctx.log().whenAvailable(RequestLogProperty.RESPONSE_HEADERS).thenApply(log -> {\n+                    if (needsContentInRule) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwMTMxNg=="}, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTM5MDU5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRpcClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjo1Nzo0MlrOGXOHKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjo1Nzo0MlrOGXOHKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwMTY0MQ==", "bodyText": "ditto", "url": "https://github.com/line/armeria/pull/2726#discussion_r427001641", "createdAt": "2020-05-19T02:57:42Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRpcClient.java", "diffHunk": "@@ -32,6 +33,20 @@\n public final class CircuitBreakerRpcClient extends AbstractCircuitBreakerClient<RpcRequest, RpcResponse>\n         implements RpcClient {\n \n+    /**\n+     * Creates a new decorator using the specified {@link CircuitBreaker} instance and\n+     * {@link CircuitBreakerRule}.\n+     *\n+     * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for\n+     * unrelated services.\n+     *\n+     * @param circuitBreaker The {@link CircuitBreaker} instance to be used\n+     */\n+    public static Function<? super RpcClient, CircuitBreakerRpcClient>\n+    newDecorator(CircuitBreaker circuitBreaker, CircuitBreakerRuleWithContent<RpcResponse> rule) {\n+        return newDecorator((ctx, req) -> circuitBreaker, rule);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTM5MTY4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRpcClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjo1ODoxOFrOGXOHxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjo1ODoxOFrOGXOHxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwMTc5OQ==", "bodyText": "ditto we should check null before making the lambda expression.", "url": "https://github.com/line/armeria/pull/2726#discussion_r427001799", "createdAt": "2020-05-19T02:58:18Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRpcClient.java", "diffHunk": "@@ -40,10 +55,26 @@\n      * unrelated services.\n      *\n      * @param circuitBreaker The {@link CircuitBreaker} instance to be used\n+     *\n+     * @deprecated Use {@link #newDecorator(CircuitBreaker, CircuitBreakerRuleWithContent)}.\n      */\n+    @Deprecated\n     public static Function<? super RpcClient, CircuitBreakerRpcClient>\n     newDecorator(CircuitBreaker circuitBreaker, CircuitBreakerStrategyWithContent<RpcResponse> strategy) {\n-        return newDecorator((ctx, req) -> circuitBreaker, strategy);\n+        requireNonNull(strategy, \"strategy\");\n+        return newDecorator(circuitBreaker, fromCircuitBreakerStrategyWithContent(strategy));\n+    }\n+\n+    /**\n+     * Creates a new decorator with the specified {@link CircuitBreakerMapping} and\n+     * {@link CircuitBreakerRule}.\n+     *\n+     * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for\n+     * unrelated services.\n+     */\n+    public static Function<? super RpcClient, CircuitBreakerRpcClient>\n+    newDecorator(CircuitBreakerMapping mapping, CircuitBreakerRuleWithContent<RpcResponse> rule) {\n+        return delegate -> new CircuitBreakerRpcClient(delegate, mapping, rule);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTQwNjM4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRule.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMzowODoyMVrOGXOQ7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNDozNDoxOFrOGXPgCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwNDE0MA==", "bodyText": "I think the default should be thenIgnore for onUnprocessed.", "url": "https://github.com/line/armeria/pull/2726#discussion_r427004140", "createdAt": "2020-05-19T03:08:21Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRule.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a {@link Response} should be reported as a success or a failure to a\n+ * {@link CircuitBreaker}. If you need to determine whether the request was successful by looking into the\n+ * {@link Response} content, use {@link CircuitBreakerRuleWithContent}.\n+ *\n+ * <p>Note that the last {@link CircuitBreakerRule} completes with {@link CircuitBreakerDecision#next()} or\n+ * a {@link Response} is not matched with {@link CircuitBreakerRule}s, the {@link Response} will be reported as\n+ * a success.\n+ *\n+ * <p>For example:\n+ * <pre>{@code\n+ * // If a response status is 500(Interval Server Error), the response will be reported as a failure.\n+ * // Otherwise, the response will be reported as a success.\n+ * CircuitBreakerRule.onStatus(HttpStatus.INTERNAL_SERVER_ERROR);\n+ *\n+ * // A response will be reported as a success if no exception is raised.\n+ * CircuitBreakerRule.onException();\n+ *\n+ * // A CircuitBreakerRule that reports a response as a failure except that a response status code is 2xx.\n+ * CircuitBreakerRule.of(\n+ *                       // Report as a success if the class of a response status is 2xx\n+ *                       CircuitBreakerRule.builder()\n+ *                                         .onStatusClass(HttpStatusClass.SUCCESS)\n+ *                                         .thenSuccess(),\n+ *                       // Everything else is reported as a failure\n+ *                       ClientBreakerRule.builder().thenFailure());\n+ * }\n+ * </pre>\n+ */\n+@FunctionalInterface\n+public interface CircuitBreakerRule {\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    static CircuitBreakerRule onStatusClass(HttpStatusClass statusClass) {\n+        return builder().onStatusClass(statusClass).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    static CircuitBreakerRule onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        return builder().onStatusClass(statusClasses).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    static CircuitBreakerRule onServerErrorStatus() {\n+        return builder().onServerErrorStatus().thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    static CircuitBreakerRule onStatus(HttpStatus... statuses) {\n+        return builder().onStatus(statuses).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    static CircuitBreakerRule onStatus(Iterable<HttpStatus> statuses) {\n+        return builder().onStatus(statuses).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the specified {@code statusFilter} returns {@code true}.\n+     */\n+    static CircuitBreakerRule onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        return builder().onStatus(statusFilter).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if an {@link Exception} is raised and that is instance of the specified {@code exception}.\n+     */\n+    static CircuitBreakerRule onException(Class<? extends Throwable> exception) {\n+        return builder().onException(exception).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if an {@link Exception} is raised and the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    static CircuitBreakerRule onException(Predicate<? super Throwable> exceptionFilter) {\n+        return builder().onException(exceptionFilter).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if an {@link Exception} is raised.\n+     */\n+    static CircuitBreakerRule onException() {\n+        return builder().onException().thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if an {@link UnprocessedRequestException} which means that the request has not been processed by\n+     * the server is raised.\n+     */\n+    static CircuitBreakerRule onUnprocessed() {\n+        return builder().onUnprocessed().thenFailure();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyMzI1Ng==", "bodyText": "Ignoring on unprocessed seems default behavior.\nHowever, other factory methods build a rule with thenFailure().\nProbably better to remove this factory to reduce confusion?", "url": "https://github.com/line/armeria/pull/2726#discussion_r427023256", "createdAt": "2020-05-19T04:29:15Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRule.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a {@link Response} should be reported as a success or a failure to a\n+ * {@link CircuitBreaker}. If you need to determine whether the request was successful by looking into the\n+ * {@link Response} content, use {@link CircuitBreakerRuleWithContent}.\n+ *\n+ * <p>Note that the last {@link CircuitBreakerRule} completes with {@link CircuitBreakerDecision#next()} or\n+ * a {@link Response} is not matched with {@link CircuitBreakerRule}s, the {@link Response} will be reported as\n+ * a success.\n+ *\n+ * <p>For example:\n+ * <pre>{@code\n+ * // If a response status is 500(Interval Server Error), the response will be reported as a failure.\n+ * // Otherwise, the response will be reported as a success.\n+ * CircuitBreakerRule.onStatus(HttpStatus.INTERNAL_SERVER_ERROR);\n+ *\n+ * // A response will be reported as a success if no exception is raised.\n+ * CircuitBreakerRule.onException();\n+ *\n+ * // A CircuitBreakerRule that reports a response as a failure except that a response status code is 2xx.\n+ * CircuitBreakerRule.of(\n+ *                       // Report as a success if the class of a response status is 2xx\n+ *                       CircuitBreakerRule.builder()\n+ *                                         .onStatusClass(HttpStatusClass.SUCCESS)\n+ *                                         .thenSuccess(),\n+ *                       // Everything else is reported as a failure\n+ *                       ClientBreakerRule.builder().thenFailure());\n+ * }\n+ * </pre>\n+ */\n+@FunctionalInterface\n+public interface CircuitBreakerRule {\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    static CircuitBreakerRule onStatusClass(HttpStatusClass statusClass) {\n+        return builder().onStatusClass(statusClass).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    static CircuitBreakerRule onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        return builder().onStatusClass(statusClasses).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    static CircuitBreakerRule onServerErrorStatus() {\n+        return builder().onServerErrorStatus().thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    static CircuitBreakerRule onStatus(HttpStatus... statuses) {\n+        return builder().onStatus(statuses).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    static CircuitBreakerRule onStatus(Iterable<HttpStatus> statuses) {\n+        return builder().onStatus(statuses).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the specified {@code statusFilter} returns {@code true}.\n+     */\n+    static CircuitBreakerRule onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        return builder().onStatus(statusFilter).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if an {@link Exception} is raised and that is instance of the specified {@code exception}.\n+     */\n+    static CircuitBreakerRule onException(Class<? extends Throwable> exception) {\n+        return builder().onException(exception).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if an {@link Exception} is raised and the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    static CircuitBreakerRule onException(Predicate<? super Throwable> exceptionFilter) {\n+        return builder().onException(exceptionFilter).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if an {@link Exception} is raised.\n+     */\n+    static CircuitBreakerRule onException() {\n+        return builder().onException().thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if an {@link UnprocessedRequestException} which means that the request has not been processed by\n+     * the server is raised.\n+     */\n+    static CircuitBreakerRule onUnprocessed() {\n+        return builder().onUnprocessed().thenFailure();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwNDE0MA=="}, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyNDM5NA==", "bodyText": "+1 for removing. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2726#discussion_r427024394", "createdAt": "2020-05-19T04:34:18Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRule.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a {@link Response} should be reported as a success or a failure to a\n+ * {@link CircuitBreaker}. If you need to determine whether the request was successful by looking into the\n+ * {@link Response} content, use {@link CircuitBreakerRuleWithContent}.\n+ *\n+ * <p>Note that the last {@link CircuitBreakerRule} completes with {@link CircuitBreakerDecision#next()} or\n+ * a {@link Response} is not matched with {@link CircuitBreakerRule}s, the {@link Response} will be reported as\n+ * a success.\n+ *\n+ * <p>For example:\n+ * <pre>{@code\n+ * // If a response status is 500(Interval Server Error), the response will be reported as a failure.\n+ * // Otherwise, the response will be reported as a success.\n+ * CircuitBreakerRule.onStatus(HttpStatus.INTERNAL_SERVER_ERROR);\n+ *\n+ * // A response will be reported as a success if no exception is raised.\n+ * CircuitBreakerRule.onException();\n+ *\n+ * // A CircuitBreakerRule that reports a response as a failure except that a response status code is 2xx.\n+ * CircuitBreakerRule.of(\n+ *                       // Report as a success if the class of a response status is 2xx\n+ *                       CircuitBreakerRule.builder()\n+ *                                         .onStatusClass(HttpStatusClass.SUCCESS)\n+ *                                         .thenSuccess(),\n+ *                       // Everything else is reported as a failure\n+ *                       ClientBreakerRule.builder().thenFailure());\n+ * }\n+ * </pre>\n+ */\n+@FunctionalInterface\n+public interface CircuitBreakerRule {\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    static CircuitBreakerRule onStatusClass(HttpStatusClass statusClass) {\n+        return builder().onStatusClass(statusClass).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    static CircuitBreakerRule onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        return builder().onStatusClass(statusClasses).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    static CircuitBreakerRule onServerErrorStatus() {\n+        return builder().onServerErrorStatus().thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    static CircuitBreakerRule onStatus(HttpStatus... statuses) {\n+        return builder().onStatus(statuses).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    static CircuitBreakerRule onStatus(Iterable<HttpStatus> statuses) {\n+        return builder().onStatus(statuses).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the specified {@code statusFilter} returns {@code true}.\n+     */\n+    static CircuitBreakerRule onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        return builder().onStatus(statusFilter).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if an {@link Exception} is raised and that is instance of the specified {@code exception}.\n+     */\n+    static CircuitBreakerRule onException(Class<? extends Throwable> exception) {\n+        return builder().onException(exception).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if an {@link Exception} is raised and the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    static CircuitBreakerRule onException(Predicate<? super Throwable> exceptionFilter) {\n+        return builder().onException(exceptionFilter).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if an {@link Exception} is raised.\n+     */\n+    static CircuitBreakerRule onException() {\n+        return builder().onException().thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if an {@link UnprocessedRequestException} which means that the request has not been processed by\n+     * the server is raised.\n+     */\n+    static CircuitBreakerRule onUnprocessed() {\n+        return builder().onUnprocessed().thenFailure();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwNDE0MA=="}, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTQxMjA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMzoxMjoyNlrOGXOUnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMzoxMjoyNlrOGXOUnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwNTA4NQ==", "bodyText": "Let's remove <p>", "url": "https://github.com/line/armeria/pull/2726#discussion_r427005085", "createdAt": "2020-05-19T03:12:26Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRule.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a {@link Response} should be reported as a success or a failure to a\n+ * {@link CircuitBreaker}. If you need to determine whether the request was successful by looking into the\n+ * {@link Response} content, use {@link CircuitBreakerRuleWithContent}.\n+ *\n+ * <p>Note that the last {@link CircuitBreakerRule} completes with {@link CircuitBreakerDecision#next()} or\n+ * a {@link Response} is not matched with {@link CircuitBreakerRule}s, the {@link Response} will be reported as\n+ * a success.\n+ *\n+ * <p>For example:\n+ * <pre>{@code\n+ * // If a response status is 500(Interval Server Error), the response will be reported as a failure.\n+ * // Otherwise, the response will be reported as a success.\n+ * CircuitBreakerRule.onStatus(HttpStatus.INTERNAL_SERVER_ERROR);\n+ *\n+ * // A response will be reported as a success if no exception is raised.\n+ * CircuitBreakerRule.onException();\n+ *\n+ * // A CircuitBreakerRule that reports a response as a failure except that a response status code is 2xx.\n+ * CircuitBreakerRule.of(\n+ *                       // Report as a success if the class of a response status is 2xx\n+ *                       CircuitBreakerRule.builder()\n+ *                                         .onStatusClass(HttpStatusClass.SUCCESS)\n+ *                                         .thenSuccess(),\n+ *                       // Everything else is reported as a failure\n+ *                       ClientBreakerRule.builder().thenFailure());\n+ * }\n+ * </pre>\n+ */\n+@FunctionalInterface\n+public interface CircuitBreakerRule {\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    static CircuitBreakerRule onStatusClass(HttpStatusClass statusClass) {\n+        return builder().onStatusClass(statusClass).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    static CircuitBreakerRule onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        return builder().onStatusClass(statusClasses).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    static CircuitBreakerRule onServerErrorStatus() {\n+        return builder().onServerErrorStatus().thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    static CircuitBreakerRule onStatus(HttpStatus... statuses) {\n+        return builder().onStatus(statuses).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    static CircuitBreakerRule onStatus(Iterable<HttpStatus> statuses) {\n+        return builder().onStatus(statuses).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the specified {@code statusFilter} returns {@code true}.\n+     */\n+    static CircuitBreakerRule onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        return builder().onStatus(statusFilter).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if an {@link Exception} is raised and that is instance of the specified {@code exception}.\n+     */\n+    static CircuitBreakerRule onException(Class<? extends Throwable> exception) {\n+        return builder().onException(exception).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if an {@link Exception} is raised and the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    static CircuitBreakerRule onException(Predicate<? super Throwable> exceptionFilter) {\n+        return builder().onException(exceptionFilter).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if an {@link Exception} is raised.\n+     */\n+    static CircuitBreakerRule onException() {\n+        return builder().onException().thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if an {@link UnprocessedRequestException} which means that the request has not been processed by\n+     * the server is raised.\n+     */\n+    static CircuitBreakerRule onUnprocessed() {\n+        return builder().onUnprocessed().thenFailure();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link CircuitBreakerRuleBuilder}.\n+     */\n+    static CircuitBreakerRuleBuilder builder() {\n+        return builder(HttpMethod.knownMethods());\n+    }\n+\n+    /**\n+     * Returns a newly created {@link CircuitBreakerRuleBuilder} with the specified {@link HttpMethod}s.\n+     */\n+    static CircuitBreakerRuleBuilder builder(HttpMethod... methods) {\n+        requireNonNull(methods, \"methods\");\n+        return builder(ImmutableSet.copyOf(methods));\n+    }\n+\n+    /**\n+     * Returns a newly created {@link CircuitBreakerRuleBuilder} with the specified {@link HttpMethod}s.\n+     */\n+    static CircuitBreakerRuleBuilder builder(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        checkArgument(!Iterables.isEmpty(methods), \"method can't be empty.\");\n+        final ImmutableSet<HttpMethod> httpMethods = Sets.immutableEnumSet(methods);\n+        return builder(headers -> httpMethods.contains(headers.method()));\n+    }\n+\n+    /**\n+     * Returns a newly created {@link CircuitBreakerRuleBuilder} with the specified\n+     * {@code requestHeadersFilter}.\n+     */\n+    static CircuitBreakerRuleBuilder builder(Predicate<? super RequestHeaders> requestHeadersFilter) {\n+        return new CircuitBreakerRuleBuilder(requireNonNull(requestHeadersFilter, \"requestHeadersFilter\"));\n+    }\n+\n+    /**\n+     * Returns a {@link CircuitBreakerRule} that combines the specified {@code circuitBreakerRules}.\n+     */\n+    static CircuitBreakerRule of(CircuitBreakerRule... circuitBreakerRules) {\n+        requireNonNull(circuitBreakerRules, \"circuitBreakerRules\");\n+        checkArgument(circuitBreakerRules.length > 0, \"circuitBreakerRules can't be empty.\");\n+        if (circuitBreakerRules.length == 1) {\n+            return circuitBreakerRules[0];\n+        }\n+        return of(ImmutableList.copyOf(circuitBreakerRules));\n+    }\n+\n+    /**\n+     * Returns a {@link CircuitBreakerRule} that combines all the {@link CircuitBreakerRule} of\n+     * the {@code circuitBreakerRules}.\n+     */\n+    @SuppressWarnings(\"OptionalGetWithoutIsPresent\")\n+    static CircuitBreakerRule of(Iterable<? extends CircuitBreakerRule> circuitBreakerRules) {\n+        requireNonNull(circuitBreakerRules, \"circuitBreakerRules\");\n+        checkArgument(!Iterables.isEmpty(circuitBreakerRules), \"circuitBreakerRules can't be empty.\");\n+        if (Iterables.size(circuitBreakerRules) == 1) {\n+            return Iterables.get(circuitBreakerRules, 0);\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        final Iterable<CircuitBreakerRule> cast = (Iterable<CircuitBreakerRule>) circuitBreakerRules;\n+        return Streams.stream(cast).reduce(CircuitBreakerRule::orElse).get();\n+    }\n+\n+    /**\n+     * Returns a composed {@link CircuitBreakerRule} that represents a logical OR of\n+     * this {@link CircuitBreakerRule} and another. If this {@link CircuitBreakerRule} completes with\n+     * {@link CircuitBreakerDecision#next()}, then other {@link CircuitBreakerRule} is evaluated.\n+     */\n+    default CircuitBreakerRule orElse(CircuitBreakerRule other) {\n+        return CircuitBreakerRuleUtil.orElse(this, requireNonNull(other, \"other\"));\n+    }\n+\n+    /**\n+     * Returns a {@link CompletionStage} that contains {@link CircuitBreakerDecision} which indicates\n+     * a {@link Response} is successful or not. If {@link CircuitBreakerDecision#success()} is returned,\n+     * {@link CircuitBreaker#onSuccess()} is called so that the {@link CircuitBreaker} increases its success\n+     * count and uses it to make a decision to close or open the circuit.\n+     * If {@link CircuitBreakerDecision#failure()} is returned, it works\n+     * the other way around. If {@link CircuitBreakerDecision#ignore()} is returned, the {@link CircuitBreaker}\n+     * ignores it. If {@link CircuitBreakerDecision#next()} is returned, a next {@link CircuitBreakerRule} will\n+     * be evaluated.\n+     *\n+     * <p>Note that the last {@link CircuitBreakerRule} completes with {@link CircuitBreakerDecision#next()} or\n+     * a {@link Response} is not matched with the given {@link CircuitBreakerRule}s, the {@link Response} will\n+     * be reported as a success.\n+     *\n+     * <p>To retrieve the {@link ResponseHeaders}, you can use the specified {@link ClientRequestContext}:\n+     *\n+     * <p><pre>{@code", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 242}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTQzODA1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/client/AbstractRuleBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMzoyOTowOFrOGXOkdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNDozMDowNVrOGXPcQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwOTE0MA==", "bodyText": "This class is not just for RetryRule anymore.", "url": "https://github.com/line/armeria/pull/2726#discussion_r427009140", "createdAt": "2020-05-19T03:29:08Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/AbstractRuleBuilder.java", "diffHunk": "@@ -52,16 +51,19 @@\n     @Nullable\n     private Predicate<Throwable> exceptionFilter;\n \n+    /**\n+     * Creates a new instance with the specified {@code requestHeadersFilter}.\n+     */\n     @SuppressWarnings(\"unchecked\")\n-    AbstractRetryRuleBuilder(Predicate<? super RequestHeaders> requestHeadersFilter) {\n+    protected AbstractRuleBuilder(Predicate<? super RequestHeaders> requestHeadersFilter) {\n         this.requestHeadersFilter = (Predicate<RequestHeaders>) requestHeadersFilter;\n     }\n \n     /**\n      * Adds the specified {@code responseHeadersFilter} for a {@link RetryRule} which will retry", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyMzQyNg==", "bodyText": "Yeap, I cleaned up Javadoc.", "url": "https://github.com/line/armeria/pull/2726#discussion_r427023426", "createdAt": "2020-05-19T04:30:05Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/AbstractRuleBuilder.java", "diffHunk": "@@ -52,16 +51,19 @@\n     @Nullable\n     private Predicate<Throwable> exceptionFilter;\n \n+    /**\n+     * Creates a new instance with the specified {@code requestHeadersFilter}.\n+     */\n     @SuppressWarnings(\"unchecked\")\n-    AbstractRetryRuleBuilder(Predicate<? super RequestHeaders> requestHeadersFilter) {\n+    protected AbstractRuleBuilder(Predicate<? super RequestHeaders> requestHeadersFilter) {\n         this.requestHeadersFilter = (Predicate<RequestHeaders>) requestHeadersFilter;\n     }\n \n     /**\n      * Adds the specified {@code responseHeadersFilter} for a {@link RetryRule} which will retry", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwOTE0MA=="}, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTQ0MjcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/client/AbstractRuleBuilderUtil.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMzozMTozOFrOGXOnGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTowOTozMVrOGXXHzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwOTgxOA==", "bodyText": "requestHeadersFilter != null?", "url": "https://github.com/line/armeria/pull/2726#discussion_r427009818", "createdAt": "2020-05-19T03:31:38Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/AbstractRuleBuilderUtil.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.Predicate;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+public final class AbstractRuleBuilderUtil {\n+\n+    /**\n+     * Merges the filters of {@link AbstractRuleBuilder} into one that returns whether\n+     * if the rules of the specified {@link AbstractRuleBuilder} is matched with\n+     * the given {@link ClientRequestContext} and {@link Throwable}.\n+     */\n+    public static BiFunction<? super ClientRequestContext, ? super Throwable, Boolean>\n+    buildFilter(AbstractRuleBuilder builder) {\n+        final Predicate<RequestHeaders> requestHeadersFilter = builder.requestHeadersFilter();\n+        final Predicate<ResponseHeaders> responseHeadersFilter = builder.responseHeadersFilter();\n+        final Predicate<Throwable> exceptionFilter = builder.exceptionFilter();\n+        return (ctx, cause) -> {\n+            if (ctx.log().isAvailable(RequestLogProperty.REQUEST_HEADERS)) {\n+                final RequestHeaders requestHeaders = ctx.log().partial().requestHeaders();\n+                if (!requestHeadersFilter.test(requestHeaders)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAxOTA1NA==", "bodyText": "requestHeadersFilter is not null  because it always contains HTTP methods filter.", "url": "https://github.com/line/armeria/pull/2726#discussion_r427019054", "createdAt": "2020-05-19T04:10:08Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/AbstractRuleBuilderUtil.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.Predicate;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+public final class AbstractRuleBuilderUtil {\n+\n+    /**\n+     * Merges the filters of {@link AbstractRuleBuilder} into one that returns whether\n+     * if the rules of the specified {@link AbstractRuleBuilder} is matched with\n+     * the given {@link ClientRequestContext} and {@link Throwable}.\n+     */\n+    public static BiFunction<? super ClientRequestContext, ? super Throwable, Boolean>\n+    buildFilter(AbstractRuleBuilder builder) {\n+        final Predicate<RequestHeaders> requestHeadersFilter = builder.requestHeadersFilter();\n+        final Predicate<ResponseHeaders> responseHeadersFilter = builder.responseHeadersFilter();\n+        final Predicate<Throwable> exceptionFilter = builder.exceptionFilter();\n+        return (ctx, cause) -> {\n+            if (ctx.log().isAvailable(RequestLogProperty.REQUEST_HEADERS)) {\n+                final RequestHeaders requestHeaders = ctx.log().partial().requestHeaders();\n+                if (!requestHeadersFilter.test(requestHeaders)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwOTgxOA=="}, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAxOTY3Ng==", "bodyText": "Then we can remove the line 48, right?", "url": "https://github.com/line/armeria/pull/2726#discussion_r427019676", "createdAt": "2020-05-19T04:13:09Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/AbstractRuleBuilderUtil.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.Predicate;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+public final class AbstractRuleBuilderUtil {\n+\n+    /**\n+     * Merges the filters of {@link AbstractRuleBuilder} into one that returns whether\n+     * if the rules of the specified {@link AbstractRuleBuilder} is matched with\n+     * the given {@link ClientRequestContext} and {@link Throwable}.\n+     */\n+    public static BiFunction<? super ClientRequestContext, ? super Throwable, Boolean>\n+    buildFilter(AbstractRuleBuilder builder) {\n+        final Predicate<RequestHeaders> requestHeadersFilter = builder.requestHeadersFilter();\n+        final Predicate<ResponseHeaders> responseHeadersFilter = builder.responseHeadersFilter();\n+        final Predicate<Throwable> exceptionFilter = builder.exceptionFilter();\n+        return (ctx, cause) -> {\n+            if (ctx.log().isAvailable(RequestLogProperty.REQUEST_HEADERS)) {\n+                final RequestHeaders requestHeaders = ctx.log().partial().requestHeaders();\n+                if (!requestHeadersFilter.test(requestHeaders)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwOTgxOA=="}, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0OTI2MA==", "bodyText": "It is a fast path. The bug was fixed. #2726 (comment)", "url": "https://github.com/line/armeria/pull/2726#discussion_r427149260", "createdAt": "2020-05-19T09:09:31Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/AbstractRuleBuilderUtil.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.Predicate;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+public final class AbstractRuleBuilderUtil {\n+\n+    /**\n+     * Merges the filters of {@link AbstractRuleBuilder} into one that returns whether\n+     * if the rules of the specified {@link AbstractRuleBuilder} is matched with\n+     * the given {@link ClientRequestContext} and {@link Throwable}.\n+     */\n+    public static BiFunction<? super ClientRequestContext, ? super Throwable, Boolean>\n+    buildFilter(AbstractRuleBuilder builder) {\n+        final Predicate<RequestHeaders> requestHeadersFilter = builder.requestHeadersFilter();\n+        final Predicate<ResponseHeaders> responseHeadersFilter = builder.responseHeadersFilter();\n+        final Predicate<Throwable> exceptionFilter = builder.exceptionFilter();\n+        return (ctx, cause) -> {\n+            if (ctx.log().isAvailable(RequestLogProperty.REQUEST_HEADERS)) {\n+                final RequestHeaders requestHeaders = ctx.log().partial().requestHeaders();\n+                if (!requestHeadersFilter.test(requestHeaders)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwOTgxOA=="}, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTQ0NDQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/client/AbstractRuleBuilderUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMzozMjoyOVrOGXOoDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNDozMzowNlrOGXPfDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAxMDA2Mg==", "bodyText": "Or are these always non null?", "url": "https://github.com/line/armeria/pull/2726#discussion_r427010062", "createdAt": "2020-05-19T03:32:29Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/AbstractRuleBuilderUtil.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.Predicate;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+public final class AbstractRuleBuilderUtil {\n+\n+    /**\n+     * Merges the filters of {@link AbstractRuleBuilder} into one that returns whether\n+     * if the rules of the specified {@link AbstractRuleBuilder} is matched with\n+     * the given {@link ClientRequestContext} and {@link Throwable}.\n+     */\n+    public static BiFunction<? super ClientRequestContext, ? super Throwable, Boolean>\n+    buildFilter(AbstractRuleBuilder builder) {\n+        final Predicate<RequestHeaders> requestHeadersFilter = builder.requestHeadersFilter();\n+        final Predicate<ResponseHeaders> responseHeadersFilter = builder.responseHeadersFilter();\n+        final Predicate<Throwable> exceptionFilter = builder.exceptionFilter();\n+        return (ctx, cause) -> {\n+            if (ctx.log().isAvailable(RequestLogProperty.REQUEST_HEADERS)) {\n+                final RequestHeaders requestHeaders = ctx.log().partial().requestHeaders();\n+                if (!requestHeadersFilter.test(requestHeaders)) {\n+                    return false;\n+                }\n+            }\n+\n+            if (requestHeadersFilter == null && responseHeadersFilter == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyNDE0MQ==", "bodyText": "Oops... It is a bug. It should be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (requestHeadersFilter == null && responseHeadersFilter == null) {\n          \n          \n            \n                        if (exceptionFilter == null && responseHeadersFilter == null) {", "url": "https://github.com/line/armeria/pull/2726#discussion_r427024141", "createdAt": "2020-05-19T04:33:06Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/AbstractRuleBuilderUtil.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.Predicate;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+public final class AbstractRuleBuilderUtil {\n+\n+    /**\n+     * Merges the filters of {@link AbstractRuleBuilder} into one that returns whether\n+     * if the rules of the specified {@link AbstractRuleBuilder} is matched with\n+     * the given {@link ClientRequestContext} and {@link Throwable}.\n+     */\n+    public static BiFunction<? super ClientRequestContext, ? super Throwable, Boolean>\n+    buildFilter(AbstractRuleBuilder builder) {\n+        final Predicate<RequestHeaders> requestHeadersFilter = builder.requestHeadersFilter();\n+        final Predicate<ResponseHeaders> responseHeadersFilter = builder.responseHeadersFilter();\n+        final Predicate<Throwable> exceptionFilter = builder.exceptionFilter();\n+        return (ctx, cause) -> {\n+            if (ctx.log().isAvailable(RequestLogProperty.REQUEST_HEADERS)) {\n+                final RequestHeaders requestHeaders = ctx.log().partial().requestHeaders();\n+                if (!requestHeadersFilter.test(requestHeaders)) {\n+                    return false;\n+                }\n+            }\n+\n+            if (requestHeadersFilter == null && responseHeadersFilter == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAxMDA2Mg=="}, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTQ0NTMwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/client/AbstractRuleWithContentBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMzozMjo1MFrOGXOogA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMzozMjo1MFrOGXOogA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAxMDE3Ng==", "bodyText": "a -> an", "url": "https://github.com/line/armeria/pull/2726#discussion_r427010176", "createdAt": "2020-05-19T03:32:50Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/AbstractRuleWithContentBuilder.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import com.linecorp.armeria.client.circuitbreaker.CircuitBreakerRuleWithContent;\n+import com.linecorp.armeria.client.retry.RetryRuleWithContent;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpResponseDuplicator;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * A skeletal builder implementation for {@link RetryRuleWithContent} and {@link CircuitBreakerRuleWithContent}.\n+ * @param <T> the response type\n+ */\n+public abstract class AbstractRuleWithContentBuilder<T extends Response> extends AbstractRuleBuilder {\n+\n+    @Nullable\n+    private Function<? super T, ? extends CompletionStage<Boolean>> responseFilter;\n+\n+    protected AbstractRuleWithContentBuilder(\n+            Predicate<? super RequestHeaders> requestHeadersFilter) {\n+        super(requestHeadersFilter);\n+    }\n+\n+    /**\n+     * Adds the specified {@code responseFilter} for a {@link AbstractRuleWithContentBuilder}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b71ce3cd78e535172c325805175867083205c70"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDA5MTI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoxMzoyNFrOGXU22A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoxMzoyNFrOGXU22A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExMjE1Mg==", "bodyText": "How about just removing for a ... or ...?", "url": "https://github.com/line/armeria/pull/2726#discussion_r427112152", "createdAt": "2020-05-19T08:13:24Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleBuilder.java", "diffHunk": "@@ -52,16 +52,18 @@\n     @Nullable\n     private Predicate<Throwable> exceptionFilter;\n \n+    /**\n+     * Creates a new instance with the specified {@code requestHeadersFilter}.\n+     */\n     @SuppressWarnings(\"unchecked\")\n-    AbstractRetryRuleBuilder(Predicate<? super RequestHeaders> requestHeadersFilter) {\n+    protected AbstractRuleBuilder(Predicate<? super RequestHeaders> requestHeadersFilter) {\n         this.requestHeadersFilter = (Predicate<RequestHeaders>) requestHeadersFilter;\n     }\n \n     /**\n-     * Adds the specified {@code responseHeadersFilter} for a {@link RetryRule} which will retry\n-     * if the {@code responseHeadersFilter} returns {@code true}.\n+     * Adds the specified {@code responseHeadersFilter} for a {@link RetryRule} or {@link CircuitBreakerRule}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cc0b04f12cdb9805ec64436c760f3881dac867e"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDA5NzE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoxNTowMlrOGXU60w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoxNTowMlrOGXU60w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExMzE3MQ==", "bodyText": "A skeletal builder implementation for ... and ...? (like AbstractRuleWithContentBuilder)", "url": "https://github.com/line/armeria/pull/2726#discussion_r427113171", "createdAt": "2020-05-19T08:15:02Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleBuilder.java", "diffHunk": "@@ -29,21 +28,22 @@\n import com.google.common.collect.Iterables;\n import com.google.common.collect.Sets;\n \n-import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.client.circuitbreaker.CircuitBreakerRule;\n+import com.linecorp.armeria.client.circuitbreaker.CircuitBreakerRuleWithContent;\n+import com.linecorp.armeria.client.retry.RetryRule;\n+import com.linecorp.armeria.client.retry.RetryRuleWithContent;\n import com.linecorp.armeria.common.HttpStatus;\n import com.linecorp.armeria.common.HttpStatusClass;\n import com.linecorp.armeria.common.RequestHeaders;\n import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.util.UnstableApi;\n \n /**\n- * An abstract builder class which creates a {@link RetryRule} or a {@link RetryRuleWithContent}.\n+ * An abstract builder class which creates a {@link RetryRule}, a {@link RetryRuleWithContent},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cc0b04f12cdb9805ec64436c760f3881dac867e"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDA5OTEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleWithContentBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoxNToyOVrOGXU8CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoxNToyOVrOGXU8CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExMzQ4MA==", "bodyText": "Ditto - Could remove for ...", "url": "https://github.com/line/armeria/pull/2726#discussion_r427113480", "createdAt": "2020-05-19T08:15:29Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleWithContentBuilder.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import com.linecorp.armeria.client.circuitbreaker.CircuitBreakerRuleWithContent;\n+import com.linecorp.armeria.client.retry.RetryRuleWithContent;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpResponseDuplicator;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+/**\n+ * A skeletal builder implementation for {@link RetryRuleWithContent} and {@link CircuitBreakerRuleWithContent}.\n+ * @param <T> the response type\n+ */\n+@UnstableApi\n+public abstract class AbstractRuleWithContentBuilder<T extends Response> extends AbstractRuleBuilder {\n+\n+    @Nullable\n+    private Function<? super T, ? extends CompletionStage<Boolean>> responseFilter;\n+\n+    protected AbstractRuleWithContentBuilder(\n+            Predicate<? super RequestHeaders> requestHeadersFilter) {\n+        super(requestHeadersFilter);\n+    }\n+\n+    /**\n+     * Adds the specified {@code responseFilter} for a {@link AbstractRuleWithContentBuilder}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cc0b04f12cdb9805ec64436c760f3881dac867e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDExNzI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyMDoyNlrOGXVHvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyMDoyNlrOGXVHvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExNjQ3OA==", "bodyText": ".. and close <p> here", "url": "https://github.com/line/armeria/pull/2726#discussion_r427116478", "createdAt": "2020-05-19T08:20:26Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRule.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a {@link Response} should be reported as a success or a failure to a\n+ * {@link CircuitBreaker}. If you need to determine whether the request was successful by looking into the\n+ * {@link Response} content, use {@link CircuitBreakerRuleWithContent}.\n+ *\n+ * <p>Note that the last {@link CircuitBreakerRule} completes with {@link CircuitBreakerDecision#next()} or\n+ * a {@link Response} is not matched with {@link CircuitBreakerRule}s, the {@link Response} will be reported as\n+ * a success.\n+ *\n+ * <p>For example:\n+ * <pre>{@code\n+ * // If a response status is 500(Interval Server Error), the response will be reported as a failure.\n+ * // Otherwise, the response will be reported as a success.\n+ * CircuitBreakerRule.onStatus(HttpStatus.INTERNAL_SERVER_ERROR);\n+ *\n+ * // A response will be reported as a success if no exception is raised.\n+ * CircuitBreakerRule.onException();\n+ *\n+ * // A CircuitBreakerRule that reports a response as a failure except that a response status code is 2xx.\n+ * CircuitBreakerRule.of(\n+ *                       // Report as a success if the class of a response status is 2xx\n+ *                       CircuitBreakerRule.builder()\n+ *                                         .onStatusClass(HttpStatusClass.SUCCESS)\n+ *                                         .thenSuccess(),\n+ *                       // Everything else is reported as a failure\n+ *                       ClientBreakerRule.builder().thenFailure());\n+ * }\n+ * </pre>\n+ */\n+@FunctionalInterface\n+public interface CircuitBreakerRule {\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    static CircuitBreakerRule onStatusClass(HttpStatusClass statusClass) {\n+        return builder().onStatusClass(statusClass).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the class of the response status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    static CircuitBreakerRule onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        return builder().onStatusClass(statusClasses).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the class of the response status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    static CircuitBreakerRule onServerErrorStatus() {\n+        return builder().onServerErrorStatus().thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    static CircuitBreakerRule onStatus(HttpStatus... statuses) {\n+        return builder().onStatus(statuses).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the response status is one of the specified {@link HttpStatus}es.\n+     */\n+    static CircuitBreakerRule onStatus(Iterable<HttpStatus> statuses) {\n+        return builder().onStatus(statuses).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if the specified {@code statusFilter} returns {@code true}.\n+     */\n+    static CircuitBreakerRule onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        return builder().onStatus(statusFilter).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if an {@link Exception} is raised and that is instance of the specified {@code exception}.\n+     */\n+    static CircuitBreakerRule onException(Class<? extends Throwable> exception) {\n+        return builder().onException(exception).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if an {@link Exception} is raised and the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    static CircuitBreakerRule onException(Predicate<? super Throwable> exceptionFilter) {\n+        return builder().onException(exceptionFilter).thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if an {@link Exception} is raised.\n+     */\n+    static CircuitBreakerRule onException() {\n+        return builder().onException().thenFailure();\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that will report a {@link Response} as a failure,\n+     * if an {@link UnprocessedRequestException} which means that the request has not been processed by\n+     * the server is raised.\n+     */\n+    static CircuitBreakerRule onUnprocessed() {\n+        return builder().onUnprocessed().thenFailure();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link CircuitBreakerRuleBuilder}.\n+     */\n+    static CircuitBreakerRuleBuilder builder() {\n+        return builder(HttpMethod.knownMethods());\n+    }\n+\n+    /**\n+     * Returns a newly created {@link CircuitBreakerRuleBuilder} with the specified {@link HttpMethod}s.\n+     */\n+    static CircuitBreakerRuleBuilder builder(HttpMethod... methods) {\n+        requireNonNull(methods, \"methods\");\n+        return builder(ImmutableSet.copyOf(methods));\n+    }\n+\n+    /**\n+     * Returns a newly created {@link CircuitBreakerRuleBuilder} with the specified {@link HttpMethod}s.\n+     */\n+    static CircuitBreakerRuleBuilder builder(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        checkArgument(!Iterables.isEmpty(methods), \"method can't be empty.\");\n+        final ImmutableSet<HttpMethod> httpMethods = Sets.immutableEnumSet(methods);\n+        return builder(headers -> httpMethods.contains(headers.method()));\n+    }\n+\n+    /**\n+     * Returns a newly created {@link CircuitBreakerRuleBuilder} with the specified\n+     * {@code requestHeadersFilter}.\n+     */\n+    static CircuitBreakerRuleBuilder builder(Predicate<? super RequestHeaders> requestHeadersFilter) {\n+        return new CircuitBreakerRuleBuilder(requireNonNull(requestHeadersFilter, \"requestHeadersFilter\"));\n+    }\n+\n+    /**\n+     * Returns a {@link CircuitBreakerRule} that combines the specified {@code circuitBreakerRules}.\n+     */\n+    static CircuitBreakerRule of(CircuitBreakerRule... circuitBreakerRules) {\n+        requireNonNull(circuitBreakerRules, \"circuitBreakerRules\");\n+        checkArgument(circuitBreakerRules.length > 0, \"circuitBreakerRules can't be empty.\");\n+        if (circuitBreakerRules.length == 1) {\n+            return circuitBreakerRules[0];\n+        }\n+        return of(ImmutableList.copyOf(circuitBreakerRules));\n+    }\n+\n+    /**\n+     * Returns a {@link CircuitBreakerRule} that combines all the {@link CircuitBreakerRule} of\n+     * the {@code circuitBreakerRules}.\n+     */\n+    @SuppressWarnings(\"OptionalGetWithoutIsPresent\")\n+    static CircuitBreakerRule of(Iterable<? extends CircuitBreakerRule> circuitBreakerRules) {\n+        requireNonNull(circuitBreakerRules, \"circuitBreakerRules\");\n+        checkArgument(!Iterables.isEmpty(circuitBreakerRules), \"circuitBreakerRules can't be empty.\");\n+        if (Iterables.size(circuitBreakerRules) == 1) {\n+            return Iterables.get(circuitBreakerRules, 0);\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        final Iterable<CircuitBreakerRule> cast = (Iterable<CircuitBreakerRule>) circuitBreakerRules;\n+        return Streams.stream(cast).reduce(CircuitBreakerRule::orElse).get();\n+    }\n+\n+    /**\n+     * Returns a composed {@link CircuitBreakerRule} that represents a logical OR of\n+     * this {@link CircuitBreakerRule} and another. If this {@link CircuitBreakerRule} completes with\n+     * {@link CircuitBreakerDecision#next()}, then other {@link CircuitBreakerRule} is evaluated.\n+     */\n+    default CircuitBreakerRule orElse(CircuitBreakerRule other) {\n+        return CircuitBreakerRuleUtil.orElse(this, requireNonNull(other, \"other\"));\n+    }\n+\n+    /**\n+     * Returns a {@link CompletionStage} that contains {@link CircuitBreakerDecision} which indicates\n+     * a {@link Response} is successful or not. If {@link CircuitBreakerDecision#success()} is returned,\n+     * {@link CircuitBreaker#onSuccess()} is called so that the {@link CircuitBreaker} increases its success\n+     * count and uses it to make a decision to close or open the circuit.\n+     * If {@link CircuitBreakerDecision#failure()} is returned, it works\n+     * the other way around. If {@link CircuitBreakerDecision#ignore()} is returned, the {@link CircuitBreaker}\n+     * ignores it. If {@link CircuitBreakerDecision#next()} is returned, a next {@link CircuitBreakerRule} will\n+     * be evaluated.\n+     *\n+     * <p>Note that the last {@link CircuitBreakerRule} completes with {@link CircuitBreakerDecision#next()} or\n+     * a {@link Response} is not matched with the given {@link CircuitBreakerRule}s, the {@link Response} will\n+     * be reported as a success.\n+     *\n+     * <p>To retrieve the {@link ResponseHeaders}, you can use the specified {@link ClientRequestContext}:\n+     *\n+     * <p><pre>{@code\n+     * > CompletionStage<CircuitBreakerDecision> shouldReportAsSuccess(ClientRequestContext ctx,\n+     * >                                                               @Nullable Throwable cause) {\n+     * >     if (cause != null) {\n+     * >         return CompletableFuture.completedFuture(CircuitBreakerDecision.failure());\n+     * >     }\n+     *\n+     * >     ResponseHeaders responseHeaders = ctx.log().responseHeaders();\n+     * >     if (responseHeaders.status().codeClass() == HttpStatusClass.SERVER_ERROR) {\n+     * >         return CompletableFuture.completedFuture(CircuitBreakerDecision.failure());\n+     * >     }\n+     * >     ...\n+     * >     return CompletableFuture.completedFuture(CircuitBreakerDecision.success())\n+     * > }\n+     * }</pre>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cc0b04f12cdb9805ec64436c760f3881dac867e"}, "originalPosition": 256}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDEyMzQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyMjowN1rOGXVL0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyMjowN1rOGXVL0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExNzUyMg==", "bodyText": "Could you rephrase as .... part? Not correct grammar.", "url": "https://github.com/line/armeria/pull/2726#discussion_r427117522", "createdAt": "2020-05-19T08:22:07Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleBuilder.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import static com.linecorp.armeria.client.circuitbreaker.CircuitBreakerRuleUtil.FAILURE_DECISION;\n+import static com.linecorp.armeria.client.circuitbreaker.CircuitBreakerRuleUtil.IGNORE_DECISION;\n+import static com.linecorp.armeria.client.circuitbreaker.CircuitBreakerRuleUtil.NEXT_DECISION;\n+import static com.linecorp.armeria.client.circuitbreaker.CircuitBreakerRuleUtil.SUCCESS_DECISION;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.BiFunction;\n+import java.util.function.Predicate;\n+\n+import com.linecorp.armeria.client.AbstractRuleBuilder;\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.internal.client.AbstractRuleBuilderUtil;\n+\n+/**\n+ * A builder class that creates {@link CircuitBreakerRule}.\n+ */\n+public final class CircuitBreakerRuleBuilder extends AbstractRuleBuilder {\n+\n+    CircuitBreakerRuleBuilder(Predicate<? super RequestHeaders> requestHeadersFilter) {\n+        super(requestHeadersFilter);\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that determines whether a {@link Response} should be\n+     * reported as a success.\n+     */\n+    public CircuitBreakerRule thenSuccess() {\n+        return build(CircuitBreakerDecision.success());\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that determines whether a {@link Response} should be\n+     * reported as a failure.\n+     */\n+    public CircuitBreakerRule thenFailure() {\n+        return build(CircuitBreakerDecision.failure());\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that determines whether a {@link Response} should be\n+     * reported as a failure.\n+     */\n+    public CircuitBreakerRule thenIgnore() {\n+        return build(CircuitBreakerDecision.ignore());\n+    }\n+\n+    private CircuitBreakerRule build(CircuitBreakerDecision decision) {\n+        return build(this, decision);\n+    }\n+\n+    static CircuitBreakerRule build(AbstractRuleBuilder builder, CircuitBreakerDecision decision) {\n+        final BiFunction<? super ClientRequestContext, ? super Throwable, Boolean> filter =\n+                AbstractRuleBuilderUtil.buildFilter(builder);\n+\n+        final CompletableFuture<CircuitBreakerDecision> decisionFuture;\n+        if (decision == CircuitBreakerDecision.success()) {\n+            decisionFuture = SUCCESS_DECISION;\n+        } else if (decision == CircuitBreakerDecision.failure()) {\n+            decisionFuture = FAILURE_DECISION;\n+        } else if (decision == CircuitBreakerDecision.ignore()) {\n+            decisionFuture = IGNORE_DECISION;\n+        } else {\n+            decisionFuture = NEXT_DECISION;\n+        }\n+\n+        return filter.andThen(matched -> matched ? decisionFuture : NEXT_DECISION)::apply;\n+    }\n+\n+    // Override the return type and Javadoc of chaining methods in superclass.\n+\n+    /**\n+     * Adds the specified {@code responseHeadersFilter} for a {@link CircuitBreakerRule} which will\n+     * report a {@link Response} as a success, failure or ignore it according tothe build methods -\n+     * {@link #thenSuccess()}, {@link #thenFailure()} and {@link #thenIgnore()}, if the specified\n+     * {@code responseHeadersFilter} completes with {@code true}.\n+     */\n+    @Override\n+    public CircuitBreakerRuleBuilder onResponseHeaders(\n+            Predicate<? super ResponseHeaders> responseHeadersFilter) {\n+        return (CircuitBreakerRuleBuilder) super.onResponseHeaders(responseHeadersFilter);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link CircuitBreakerRuleWithContent} which will\n+     * report a {@link Response} as a success, failure or ignore it according to the build methods -\n+     * {@link #thenSuccess()}, {@link #thenFailure()} and {@link #thenIgnore()}, if the class of the response\n+     * status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    @Override\n+    public CircuitBreakerRuleBuilder onStatusClass(HttpStatusClass... statusClasses) {\n+        return (CircuitBreakerRuleBuilder) super.onStatusClass(statusClasses);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link CircuitBreakerRuleWithContent} which will\n+     * report a {@link Response} as a success, failure or ignore it according to the build methods -\n+     * {@link #thenSuccess()}, {@link #thenFailure()} and {@link #thenIgnore()}, if the class of the response\n+     * status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    @Override\n+    public CircuitBreakerRuleBuilder onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        return (CircuitBreakerRuleBuilder) super.onStatusClass(statusClasses);\n+    }\n+\n+    /**\n+     * Adds the {@link HttpStatusClass#SERVER_ERROR} for a {@link CircuitBreakerRuleWithContent} which will\n+     * report a {@link Response} as a success, failure or ignore it according to the build methods -\n+     * {@link #thenSuccess()}, {@link #thenFailure()} and {@link #thenIgnore()}, if the class of the response\n+     * status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    @Override\n+    public CircuitBreakerRuleBuilder onServerErrorStatus() {\n+        return (CircuitBreakerRuleBuilder) super.onServerErrorStatus();\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link CircuitBreakerRuleWithContent} which will report\n+     * a {@link Response} as a success, failure or ignore it according to the build methods -\n+     * {@link #thenSuccess()}, {@link #thenFailure()} and {@link #thenIgnore()}, if the response status is\n+     * one of the specified {@link HttpStatus}es.\n+     */\n+    @Override\n+    public CircuitBreakerRuleBuilder onStatus(HttpStatus... statuses) {\n+        return (CircuitBreakerRuleBuilder) super.onStatus(statuses);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link CircuitBreakerRuleWithContent} which will report\n+     * a {@link Response} as a success, failure or ignore it according to the build methods -\n+     * {@link #thenSuccess()}, {@link #thenFailure()} and {@link #thenIgnore()}, if the response status is\n+     * one of the specified {@link HttpStatus}es.\n+     */\n+    @Override\n+    public CircuitBreakerRuleBuilder onStatus(Iterable<HttpStatus> statuses) {\n+        return (CircuitBreakerRuleBuilder) super.onStatus(statuses);\n+    }\n+\n+    /**\n+     * Adds the specified {@code statusFilter} for a {@link CircuitBreakerRule} which will report\n+     * a {@link Response} as a success, failure or ignore it according to the build methods -\n+     * {@link #thenSuccess()}, {@link #thenFailure()} and {@link #thenIgnore()}, if the response status matches\n+     * the specified {@code statusFilter}.\n+     */\n+    @Override\n+    public CircuitBreakerRuleBuilder onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        return (CircuitBreakerRuleBuilder) super.onStatus(statusFilter);\n+    }\n+\n+    /**\n+     * Adds the specified exception type for a {@link CircuitBreakerRule} which will report a {@link Response}\n+     * as a success, failure or ignore it according to the build methods - {@link #thenSuccess()},\n+     * {@link #thenFailure()} and {@link #thenIgnore()}, if an {@link Exception} is\n+     * raised and that is instance of the specified {@code exception}.\n+     */\n+    @Override\n+    public CircuitBreakerRuleBuilder onException(Class<? extends Throwable> exception) {\n+        return (CircuitBreakerRuleBuilder) super.onException(exception);\n+    }\n+\n+    /**\n+     * Adds the specified {@code exceptionFilter} for a {@link CircuitBreakerRule} which will report\n+     * a {@link Response} as a success, failure or ignore it according to the build methods -\n+     * {@link #thenSuccess()}, {@link #thenFailure()} and {@link #thenIgnore()}, if an {@link Exception} is\n+     * raised and the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    @Override\n+    public CircuitBreakerRuleBuilder onException(Predicate<? super Throwable> exceptionFilter) {\n+        return (CircuitBreakerRuleBuilder) super.onException(exceptionFilter);\n+    }\n+\n+    /**\n+     * Makes a {@link CircuitBreakerRuleWithContent} report a {@link Response} as a success, failure or\n+     * ignore it according to the build methods - {@link #thenSuccess()}, {@link #thenFailure()} and\n+     * {@link #thenIgnore()} if an {@link Exception} is raised.\n+     */\n+    @Override\n+    public CircuitBreakerRuleBuilder onException() {\n+        return (CircuitBreakerRuleBuilder) super.onException();\n+    }\n+\n+    /**\n+     * Makes a {@link CircuitBreakerRule} report a {@link Response} as a success, failure or ignore it\n+     * according to the build methods - {@link #thenSuccess()}, {@link #thenFailure()} and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cc0b04f12cdb9805ec64436c760f3881dac867e"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDEyNzg1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyMjo1OFrOGXVORg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyMjo1OFrOGXVORg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExODE1MA==", "bodyText": "Insert a comma before which and is for readability.", "url": "https://github.com/line/armeria/pull/2726#discussion_r427118150", "createdAt": "2020-05-19T08:22:58Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleBuilder.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import static com.linecorp.armeria.client.circuitbreaker.CircuitBreakerRuleUtil.FAILURE_DECISION;\n+import static com.linecorp.armeria.client.circuitbreaker.CircuitBreakerRuleUtil.IGNORE_DECISION;\n+import static com.linecorp.armeria.client.circuitbreaker.CircuitBreakerRuleUtil.NEXT_DECISION;\n+import static com.linecorp.armeria.client.circuitbreaker.CircuitBreakerRuleUtil.SUCCESS_DECISION;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.BiFunction;\n+import java.util.function.Predicate;\n+\n+import com.linecorp.armeria.client.AbstractRuleBuilder;\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.internal.client.AbstractRuleBuilderUtil;\n+\n+/**\n+ * A builder class that creates {@link CircuitBreakerRule}.\n+ */\n+public final class CircuitBreakerRuleBuilder extends AbstractRuleBuilder {\n+\n+    CircuitBreakerRuleBuilder(Predicate<? super RequestHeaders> requestHeadersFilter) {\n+        super(requestHeadersFilter);\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that determines whether a {@link Response} should be\n+     * reported as a success.\n+     */\n+    public CircuitBreakerRule thenSuccess() {\n+        return build(CircuitBreakerDecision.success());\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that determines whether a {@link Response} should be\n+     * reported as a failure.\n+     */\n+    public CircuitBreakerRule thenFailure() {\n+        return build(CircuitBreakerDecision.failure());\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRule} that determines whether a {@link Response} should be\n+     * reported as a failure.\n+     */\n+    public CircuitBreakerRule thenIgnore() {\n+        return build(CircuitBreakerDecision.ignore());\n+    }\n+\n+    private CircuitBreakerRule build(CircuitBreakerDecision decision) {\n+        return build(this, decision);\n+    }\n+\n+    static CircuitBreakerRule build(AbstractRuleBuilder builder, CircuitBreakerDecision decision) {\n+        final BiFunction<? super ClientRequestContext, ? super Throwable, Boolean> filter =\n+                AbstractRuleBuilderUtil.buildFilter(builder);\n+\n+        final CompletableFuture<CircuitBreakerDecision> decisionFuture;\n+        if (decision == CircuitBreakerDecision.success()) {\n+            decisionFuture = SUCCESS_DECISION;\n+        } else if (decision == CircuitBreakerDecision.failure()) {\n+            decisionFuture = FAILURE_DECISION;\n+        } else if (decision == CircuitBreakerDecision.ignore()) {\n+            decisionFuture = IGNORE_DECISION;\n+        } else {\n+            decisionFuture = NEXT_DECISION;\n+        }\n+\n+        return filter.andThen(matched -> matched ? decisionFuture : NEXT_DECISION)::apply;\n+    }\n+\n+    // Override the return type and Javadoc of chaining methods in superclass.\n+\n+    /**\n+     * Adds the specified {@code responseHeadersFilter} for a {@link CircuitBreakerRule} which will\n+     * report a {@link Response} as a success, failure or ignore it according tothe build methods -\n+     * {@link #thenSuccess()}, {@link #thenFailure()} and {@link #thenIgnore()}, if the specified\n+     * {@code responseHeadersFilter} completes with {@code true}.\n+     */\n+    @Override\n+    public CircuitBreakerRuleBuilder onResponseHeaders(\n+            Predicate<? super ResponseHeaders> responseHeadersFilter) {\n+        return (CircuitBreakerRuleBuilder) super.onResponseHeaders(responseHeadersFilter);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link CircuitBreakerRuleWithContent} which will\n+     * report a {@link Response} as a success, failure or ignore it according to the build methods -\n+     * {@link #thenSuccess()}, {@link #thenFailure()} and {@link #thenIgnore()}, if the class of the response\n+     * status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    @Override\n+    public CircuitBreakerRuleBuilder onStatusClass(HttpStatusClass... statusClasses) {\n+        return (CircuitBreakerRuleBuilder) super.onStatusClass(statusClasses);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link CircuitBreakerRuleWithContent} which will\n+     * report a {@link Response} as a success, failure or ignore it according to the build methods -\n+     * {@link #thenSuccess()}, {@link #thenFailure()} and {@link #thenIgnore()}, if the class of the response\n+     * status is one of the specified {@link HttpStatusClass}es.\n+     */\n+    @Override\n+    public CircuitBreakerRuleBuilder onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        return (CircuitBreakerRuleBuilder) super.onStatusClass(statusClasses);\n+    }\n+\n+    /**\n+     * Adds the {@link HttpStatusClass#SERVER_ERROR} for a {@link CircuitBreakerRuleWithContent} which will\n+     * report a {@link Response} as a success, failure or ignore it according to the build methods -\n+     * {@link #thenSuccess()}, {@link #thenFailure()} and {@link #thenIgnore()}, if the class of the response\n+     * status is {@link HttpStatusClass#SERVER_ERROR}.\n+     */\n+    @Override\n+    public CircuitBreakerRuleBuilder onServerErrorStatus() {\n+        return (CircuitBreakerRuleBuilder) super.onServerErrorStatus();\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link CircuitBreakerRuleWithContent} which will report\n+     * a {@link Response} as a success, failure or ignore it according to the build methods -\n+     * {@link #thenSuccess()}, {@link #thenFailure()} and {@link #thenIgnore()}, if the response status is\n+     * one of the specified {@link HttpStatus}es.\n+     */\n+    @Override\n+    public CircuitBreakerRuleBuilder onStatus(HttpStatus... statuses) {\n+        return (CircuitBreakerRuleBuilder) super.onStatus(statuses);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link CircuitBreakerRuleWithContent} which will report\n+     * a {@link Response} as a success, failure or ignore it according to the build methods -\n+     * {@link #thenSuccess()}, {@link #thenFailure()} and {@link #thenIgnore()}, if the response status is\n+     * one of the specified {@link HttpStatus}es.\n+     */\n+    @Override\n+    public CircuitBreakerRuleBuilder onStatus(Iterable<HttpStatus> statuses) {\n+        return (CircuitBreakerRuleBuilder) super.onStatus(statuses);\n+    }\n+\n+    /**\n+     * Adds the specified {@code statusFilter} for a {@link CircuitBreakerRule} which will report\n+     * a {@link Response} as a success, failure or ignore it according to the build methods -\n+     * {@link #thenSuccess()}, {@link #thenFailure()} and {@link #thenIgnore()}, if the response status matches\n+     * the specified {@code statusFilter}.\n+     */\n+    @Override\n+    public CircuitBreakerRuleBuilder onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        return (CircuitBreakerRuleBuilder) super.onStatus(statusFilter);\n+    }\n+\n+    /**\n+     * Adds the specified exception type for a {@link CircuitBreakerRule} which will report a {@link Response}\n+     * as a success, failure or ignore it according to the build methods - {@link #thenSuccess()},\n+     * {@link #thenFailure()} and {@link #thenIgnore()}, if an {@link Exception} is\n+     * raised and that is instance of the specified {@code exception}.\n+     */\n+    @Override\n+    public CircuitBreakerRuleBuilder onException(Class<? extends Throwable> exception) {\n+        return (CircuitBreakerRuleBuilder) super.onException(exception);\n+    }\n+\n+    /**\n+     * Adds the specified {@code exceptionFilter} for a {@link CircuitBreakerRule} which will report\n+     * a {@link Response} as a success, failure or ignore it according to the build methods -\n+     * {@link #thenSuccess()}, {@link #thenFailure()} and {@link #thenIgnore()}, if an {@link Exception} is\n+     * raised and the specified {@code exceptionFilter} returns {@code true}.\n+     */\n+    @Override\n+    public CircuitBreakerRuleBuilder onException(Predicate<? super Throwable> exceptionFilter) {\n+        return (CircuitBreakerRuleBuilder) super.onException(exceptionFilter);\n+    }\n+\n+    /**\n+     * Makes a {@link CircuitBreakerRuleWithContent} report a {@link Response} as a success, failure or\n+     * ignore it according to the build methods - {@link #thenSuccess()}, {@link #thenFailure()} and\n+     * {@link #thenIgnore()} if an {@link Exception} is raised.\n+     */\n+    @Override\n+    public CircuitBreakerRuleBuilder onException() {\n+        return (CircuitBreakerRuleBuilder) super.onException();\n+    }\n+\n+    /**\n+     * Makes a {@link CircuitBreakerRule} report a {@link Response} as a success, failure or ignore it\n+     * according to the build methods - {@link #thenSuccess()}, {@link #thenFailure()} and\n+     * {@link #thenIgnore()}, if an {@link UnprocessedRequestException} which means that the request has not\n+     * been processed by the server is raised.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cc0b04f12cdb9805ec64436c760f3881dac867e"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDEzMDQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyMzozNlrOGXVP2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyMzozNlrOGXVP2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExODU1NQ==", "bodyText": "public could be removed?", "url": "https://github.com/line/armeria/pull/2726#discussion_r427118555", "createdAt": "2020-05-19T08:23:36Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleUtil.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpResponseDuplicator;\n+import com.linecorp.armeria.common.Response;\n+\n+final class CircuitBreakerRuleUtil {\n+\n+    public static final CompletableFuture<CircuitBreakerDecision> SUCCESS_DECISION =\n+            CompletableFuture.completedFuture(CircuitBreakerDecision.success());\n+    public static final CompletableFuture<CircuitBreakerDecision> FAILURE_DECISION =\n+            CompletableFuture.completedFuture(CircuitBreakerDecision.failure());\n+    public static final CompletableFuture<CircuitBreakerDecision> IGNORE_DECISION =\n+            CompletableFuture.completedFuture(CircuitBreakerDecision.ignore());\n+    public static final CompletableFuture<CircuitBreakerDecision> NEXT_DECISION =\n+            CompletableFuture.completedFuture(CircuitBreakerDecision.next());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cc0b04f12cdb9805ec64436c760f3881dac867e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDE0MTIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleWithContent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyNjoxM1rOGXVWpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyNjoxM1rOGXVWpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyMDI5NQ==", "bodyText": "combines the specified {@link CircuitBreakerRuleWithContent}s?", "url": "https://github.com/line/armeria/pull/2726#discussion_r427120295", "createdAt": "2020-05-19T08:26:13Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleWithContent.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Determines whether a {@link Response} should be reported as a success or a failure to a\n+ * {@link CircuitBreaker} using the content of a {@link Response}. If you just need the HTTP headers\n+ * to make a decision, use {@link CircuitBreakerRule} for efficiency.\n+ *\n+ * @param <T> the response type\n+ */\n+@FunctionalInterface\n+public interface CircuitBreakerRuleWithContent<T extends Response> {\n+\n+    /**\n+     * Returns a newly created {@link CircuitBreakerRuleWithContent} that will report a {@link Response} as\n+     * a failure if the specified {@code responseFilter} completes with {@code true}.\n+     */\n+    static <T extends Response> CircuitBreakerRuleWithContent<T> onResponse(\n+            Function<? super T, ? extends CompletionStage<Boolean>> responseFilter) {\n+        return CircuitBreakerRuleWithContent.<T>builder().onResponse(responseFilter).thenFailure();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link CircuitBreakerRuleWithContentBuilder}.\n+     */\n+    static <T extends Response> CircuitBreakerRuleWithContentBuilder<T> builder() {\n+        return builder(HttpMethod.knownMethods());\n+    }\n+\n+    /**\n+     * Returns a newly created {@link CircuitBreakerRuleWithContentBuilder} with the specified\n+     * {@link HttpMethod}s.\n+     */\n+    static <T extends Response> CircuitBreakerRuleWithContentBuilder<T> builder(HttpMethod... methods) {\n+        return builder(ImmutableSet.copyOf(requireNonNull(methods, \"methods\")));\n+    }\n+\n+    /**\n+     * Returns a newly created {@link CircuitBreakerRuleWithContentBuilder} with the specified\n+     * {@link HttpMethod}s.\n+     */\n+    static <T extends Response> CircuitBreakerRuleWithContentBuilder<T> builder(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        checkArgument(!Iterables.isEmpty(methods), \"methods can't be empty.\");\n+        final ImmutableSet<HttpMethod> httpMethods = Sets.immutableEnumSet(methods);\n+        return builder(headers -> httpMethods.contains(headers.method()));\n+    }\n+\n+    /**\n+     * Returns a newly created {@link CircuitBreakerRuleWithContentBuilder} with the specified\n+     * {@code requestHeadersFilter}.\n+     */\n+    static <T extends Response> CircuitBreakerRuleWithContentBuilder<T> builder(\n+            Predicate<? super RequestHeaders> requestHeadersFilter) {\n+        requireNonNull(requestHeadersFilter, \"requestHeadersFilter\");\n+        return new CircuitBreakerRuleWithContentBuilder<>(requestHeadersFilter);\n+    }\n+\n+    /**\n+     * Returns a {@link CircuitBreakerRuleWithContent} that combines the specified {@code circuitBreakerRules}.\n+     */\n+    @SafeVarargs\n+    static <T extends Response> CircuitBreakerRuleWithContent<T> of(\n+            CircuitBreakerRuleWithContent<T>... circuitBreakerRules) {\n+        requireNonNull(circuitBreakerRules, \"circuitBreakerRules\");\n+        checkArgument(circuitBreakerRules.length > 0, \"circuitBreakerRules can't be empty.\");\n+        if (circuitBreakerRules.length == 1) {\n+            return circuitBreakerRules[0];\n+        }\n+        return of(ImmutableList.copyOf(circuitBreakerRules));\n+    }\n+\n+    /**\n+     * Returns a {@link CircuitBreakerRuleWithContent} that combines all the\n+     * {@link CircuitBreakerRuleWithContent} of the {@code circuitBreakerRules}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cc0b04f12cdb9805ec64436c760f3881dac867e"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDE0MTQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleWithContent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyNjoxN1rOGXVW0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyNjoxN1rOGXVW0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyMDMzOA==", "bodyText": "combines the specified {@link CircuitBreakerRuleWithContent}s?", "url": "https://github.com/line/armeria/pull/2726#discussion_r427120338", "createdAt": "2020-05-19T08:26:17Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleWithContent.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.Response;\n+\n+/**\n+ * Determines whether a {@link Response} should be reported as a success or a failure to a\n+ * {@link CircuitBreaker} using the content of a {@link Response}. If you just need the HTTP headers\n+ * to make a decision, use {@link CircuitBreakerRule} for efficiency.\n+ *\n+ * @param <T> the response type\n+ */\n+@FunctionalInterface\n+public interface CircuitBreakerRuleWithContent<T extends Response> {\n+\n+    /**\n+     * Returns a newly created {@link CircuitBreakerRuleWithContent} that will report a {@link Response} as\n+     * a failure if the specified {@code responseFilter} completes with {@code true}.\n+     */\n+    static <T extends Response> CircuitBreakerRuleWithContent<T> onResponse(\n+            Function<? super T, ? extends CompletionStage<Boolean>> responseFilter) {\n+        return CircuitBreakerRuleWithContent.<T>builder().onResponse(responseFilter).thenFailure();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link CircuitBreakerRuleWithContentBuilder}.\n+     */\n+    static <T extends Response> CircuitBreakerRuleWithContentBuilder<T> builder() {\n+        return builder(HttpMethod.knownMethods());\n+    }\n+\n+    /**\n+     * Returns a newly created {@link CircuitBreakerRuleWithContentBuilder} with the specified\n+     * {@link HttpMethod}s.\n+     */\n+    static <T extends Response> CircuitBreakerRuleWithContentBuilder<T> builder(HttpMethod... methods) {\n+        return builder(ImmutableSet.copyOf(requireNonNull(methods, \"methods\")));\n+    }\n+\n+    /**\n+     * Returns a newly created {@link CircuitBreakerRuleWithContentBuilder} with the specified\n+     * {@link HttpMethod}s.\n+     */\n+    static <T extends Response> CircuitBreakerRuleWithContentBuilder<T> builder(Iterable<HttpMethod> methods) {\n+        requireNonNull(methods, \"methods\");\n+        checkArgument(!Iterables.isEmpty(methods), \"methods can't be empty.\");\n+        final ImmutableSet<HttpMethod> httpMethods = Sets.immutableEnumSet(methods);\n+        return builder(headers -> httpMethods.contains(headers.method()));\n+    }\n+\n+    /**\n+     * Returns a newly created {@link CircuitBreakerRuleWithContentBuilder} with the specified\n+     * {@code requestHeadersFilter}.\n+     */\n+    static <T extends Response> CircuitBreakerRuleWithContentBuilder<T> builder(\n+            Predicate<? super RequestHeaders> requestHeadersFilter) {\n+        requireNonNull(requestHeadersFilter, \"requestHeadersFilter\");\n+        return new CircuitBreakerRuleWithContentBuilder<>(requestHeadersFilter);\n+    }\n+\n+    /**\n+     * Returns a {@link CircuitBreakerRuleWithContent} that combines the specified {@code circuitBreakerRules}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cc0b04f12cdb9805ec64436c760f3881dac867e"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDE0NDk1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleWithContentBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyNzowOVrOGXVZFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyNzowOVrOGXVZFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyMDkxOA==", "bodyText": "creates a", "url": "https://github.com/line/armeria/pull/2726#discussion_r427120918", "createdAt": "2020-05-19T08:27:09Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleWithContentBuilder.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import static com.linecorp.armeria.client.circuitbreaker.CircuitBreakerRuleUtil.NEXT_DECISION;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import com.linecorp.armeria.client.AbstractRuleWithContentBuilder;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * A builder that creates {@link CircuitBreakerRuleWithContent}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cc0b04f12cdb9805ec64436c760f3881dac867e"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDE0NjE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleWithContentBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyNzoyOFrOGXVZ3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyNzoyOFrOGXVZ3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyMTExNw==", "bodyText": "Many missing a/an", "url": "https://github.com/line/armeria/pull/2726#discussion_r427121117", "createdAt": "2020-05-19T08:27:28Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleWithContentBuilder.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import static com.linecorp.armeria.client.circuitbreaker.CircuitBreakerRuleUtil.NEXT_DECISION;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import com.linecorp.armeria.client.AbstractRuleWithContentBuilder;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * A builder that creates {@link CircuitBreakerRuleWithContent}.\n+ * @param <T> the response type\n+ */\n+public class CircuitBreakerRuleWithContentBuilder<T extends Response>\n+        extends AbstractRuleWithContentBuilder<T> {\n+\n+    CircuitBreakerRuleWithContentBuilder(Predicate<? super RequestHeaders> requestHeadersFilter) {\n+        super(requestHeadersFilter);\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRuleWithContent} that determines whether a {@link Response}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cc0b04f12cdb9805ec64436c760f3881dac867e"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDE1MTAyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleWithContentBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyODozOFrOGXVc2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyODozOFrOGXVc2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyMTg4Mg==", "bodyText": "determines a {@link Response} as a success when the rule matches.", "url": "https://github.com/line/armeria/pull/2726#discussion_r427121882", "createdAt": "2020-05-19T08:28:38Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleWithContentBuilder.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import static com.linecorp.armeria.client.circuitbreaker.CircuitBreakerRuleUtil.NEXT_DECISION;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import com.linecorp.armeria.client.AbstractRuleWithContentBuilder;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * A builder that creates {@link CircuitBreakerRuleWithContent}.\n+ * @param <T> the response type\n+ */\n+public class CircuitBreakerRuleWithContentBuilder<T extends Response>\n+        extends AbstractRuleWithContentBuilder<T> {\n+\n+    CircuitBreakerRuleWithContentBuilder(Predicate<? super RequestHeaders> requestHeadersFilter) {\n+        super(requestHeadersFilter);\n+    }\n+\n+    /**\n+     * Returns newly created {@link CircuitBreakerRuleWithContent} that determines whether a {@link Response}\n+     * should be reported as a success.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cc0b04f12cdb9805ec64436c760f3881dac867e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODEyODUyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjoyMjowN1rOGYkDkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjoyMjowN1rOGYkDkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwOTc0Ng==", "bodyText": "I realized this class can be used for building CircuitBreakerRule(WithContent).", "url": "https://github.com/line/armeria/pull/2726#discussion_r428409746", "createdAt": "2020-05-21T02:22:07Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleBuilder.java", "diffHunk": "@@ -29,21 +28,19 @@\n import com.google.common.collect.Iterables;\n import com.google.common.collect.Sets;\n \n-import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.client.retry.RetryRule;\n+import com.linecorp.armeria.client.retry.RetryRuleWithContent;\n import com.linecorp.armeria.common.HttpStatus;\n import com.linecorp.armeria.common.HttpStatusClass;\n import com.linecorp.armeria.common.RequestHeaders;\n import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.util.UnstableApi;\n \n /**\n- * An abstract builder class which creates a {@link RetryRule} or a {@link RetryRuleWithContent}.\n+ * A skeletal builder implementation for {@link RetryRule} and {@link RetryRuleWithContent}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dafbda8c277e0d288f518c540bb6d86e82f7fe"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODEzNTY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjoyNzowNFrOGYkH_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjoyNzowNFrOGYkH_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMDg3OQ==", "bodyText": "Grammar?", "url": "https://github.com/line/armeria/pull/2726#discussion_r428410879", "createdAt": "2020-05-21T02:27:04Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRule.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Sets;\n+import com.google.common.collect.Streams;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * Determines whether a {@link Response} should be reported as a success or failure to a\n+ * {@link CircuitBreaker}. If you need to determine whether the request was successful by looking into the\n+ * {@link Response} content, use {@link CircuitBreakerRuleWithContent}.\n+ *\n+ * <p>Note that the last {@link CircuitBreakerRule} completes with {@link CircuitBreakerDecision#next()} or\n+ * a {@link Response} is not matched with the {@link CircuitBreakerRule}s, the {@link Response} will be\n+ * reported as a success.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dafbda8c277e0d288f518c540bb6d86e82f7fe"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODEzOTg0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleWithContentBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjoyOTo1N1rOGYkKkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjoyOTo1N1rOGYkKkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMTUzNg==", "bodyText": "and that is -> and it is an", "url": "https://github.com/line/armeria/pull/2726#discussion_r428411536", "createdAt": "2020-05-21T02:29:57Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleWithContentBuilder.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import static com.linecorp.armeria.client.circuitbreaker.CircuitBreakerRuleUtil.NEXT_DECISION;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import com.linecorp.armeria.client.AbstractRuleWithContentBuilder;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.HttpStatusClass;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+\n+/**\n+ * A builder for creating a new {@link CircuitBreakerRuleWithContent}.\n+ * @param <T> the response type\n+ */\n+public class CircuitBreakerRuleWithContentBuilder<T extends Response>\n+        extends AbstractRuleWithContentBuilder<T> {\n+\n+    CircuitBreakerRuleWithContentBuilder(Predicate<? super RequestHeaders> requestHeadersFilter) {\n+        super(requestHeadersFilter);\n+    }\n+\n+    /**\n+     * Returns a newly created {@link CircuitBreakerRuleWithContent} that determines a {@link Response} as\n+     * a success when the rule matches.\n+     */\n+    public CircuitBreakerRuleWithContent<T> thenSuccess() {\n+        return build(CircuitBreakerDecision.success());\n+    }\n+\n+    /**\n+     * Returns a newly created {@link CircuitBreakerRuleWithContent} that determines a {@link Response} as\n+     * a failure when the rule matches.\n+     */\n+    public CircuitBreakerRuleWithContent<T> thenFailure() {\n+        return build(CircuitBreakerDecision.failure());\n+    }\n+\n+    /**\n+     * Returns a newly created {@link CircuitBreakerRuleWithContent} that ignores a {@link Response} when\n+     * the rule matches.\n+     */\n+    public CircuitBreakerRuleWithContent<T> thenIgnore() {\n+        return build(CircuitBreakerDecision.ignore());\n+    }\n+\n+    private CircuitBreakerRuleWithContent<T> build(CircuitBreakerDecision decision) {\n+        final Function<? super T, ? extends CompletionStage<Boolean>> responseFilter = responseFilter();\n+        final boolean hasResponseFilter = responseFilter != null;\n+        final CircuitBreakerRule first = CircuitBreakerRuleBuilder.build(this, decision, hasResponseFilter);\n+        if (!hasResponseFilter) {\n+            return CircuitBreakerRuleUtil.fromCircuitBreakerRule(first);\n+        }\n+\n+        final CircuitBreakerRuleWithContent<T> second = (ctx, content, cause) -> {\n+            if (content == null) {\n+                return NEXT_DECISION;\n+            }\n+            return responseFilter.apply(content)\n+                                 .handle((matched, cause0) -> {\n+                                     if (cause0 != null) {\n+                                         return CircuitBreakerDecision.next();\n+                                     }\n+                                     return matched ? decision : CircuitBreakerDecision.next();\n+                                 });\n+        };\n+        return CircuitBreakerRuleUtil.orElse(first, second);\n+    }\n+\n+    // Override the return type and Javadoc of chaining methods in superclass.\n+\n+    /**\n+     * Adds the specified {@code responseFilter} for a {@link CircuitBreakerRuleWithContent}.\n+     * If the specified {@code responseFilter} completes with {@code true},\n+     * depending on the build methods({@link #thenSuccess()}, {@link #thenFailure()} and {@link #thenIgnore()}),\n+     * a {@link Response} is reported as a success or failure to a {@link CircuitBreaker} or ignored.\n+     */\n+    @Override\n+    public CircuitBreakerRuleWithContentBuilder<T> onResponse(\n+            Function<? super T, ? extends CompletionStage<Boolean>> responseFilter) {\n+        return (CircuitBreakerRuleWithContentBuilder<T>) super.onResponse(responseFilter);\n+    }\n+\n+    /**\n+     * Adds the specified {@code responseHeadersFilter} for a {@link CircuitBreakerRuleWithContent}.\n+     * If the specified {@code responseHeadersFilter} returns {@code true},\n+     * depending on the build methods({@link #thenSuccess()}, {@link #thenFailure()} and {@link #thenIgnore()}),\n+     * a {@link Response} is reported as a success or failure to a {@link CircuitBreaker} or ignored.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public CircuitBreakerRuleWithContentBuilder<T> onResponseHeaders(\n+            Predicate<? super ResponseHeaders> responseHeadersFilter) {\n+        return (CircuitBreakerRuleWithContentBuilder<T>) super.onResponseHeaders(responseHeadersFilter);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link CircuitBreakerRuleWithContent}.\n+     * If the class of the response status is one of the specified {@link HttpStatusClass}es,\n+     * depending on the build methods({@link #thenSuccess()}, {@link #thenFailure()} and {@link #thenIgnore()}),\n+     * a {@link Response} is reported as a success or failure to a {@link CircuitBreaker} or ignored.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public CircuitBreakerRuleWithContentBuilder<T> onStatusClass(HttpStatusClass... statusClasses) {\n+        return (CircuitBreakerRuleWithContentBuilder<T>) super.onStatusClass(statusClasses);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatusClass}es for a {@link CircuitBreakerRuleWithContent}.\n+     * If the class of the response status is one of the specified {@link HttpStatusClass}es,\n+     * depending on the build methods({@link #thenSuccess()}, {@link #thenFailure()} and {@link #thenIgnore()}),\n+     * a {@link Response} is reported as a success or failure to a {@link CircuitBreaker} or ignored.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public CircuitBreakerRuleWithContentBuilder<T> onStatusClass(Iterable<HttpStatusClass> statusClasses) {\n+        return (CircuitBreakerRuleWithContentBuilder<T>) super.onStatusClass(statusClasses);\n+    }\n+\n+    /**\n+     * Adds the {@link HttpStatusClass#SERVER_ERROR} for a {@link CircuitBreakerRuleWithContent}.\n+     * If the class of the response status is {@link HttpStatusClass#SERVER_ERROR},\n+     * depending on the build methods({@link #thenSuccess()}, {@link #thenFailure()} and {@link #thenIgnore()}),\n+     * a {@link Response} is reported as a success or failure to a {@link CircuitBreaker} or ignored.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public CircuitBreakerRuleWithContentBuilder<T> onServerErrorStatus() {\n+        return (CircuitBreakerRuleWithContentBuilder<T>) super.onServerErrorStatus();\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link CircuitBreakerRuleWithContent}.\n+     * If the response status is one of the specified {@link HttpStatus}es,\n+     * depending on the build methods({@link #thenSuccess()}, {@link #thenFailure()} and {@link #thenIgnore()}),\n+     * a {@link Response} is reported as a success or failure to a {@link CircuitBreaker} or ignored.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public CircuitBreakerRuleWithContentBuilder<T> onStatus(HttpStatus... statuses) {\n+        return (CircuitBreakerRuleWithContentBuilder<T>) super.onStatus(statuses);\n+    }\n+\n+    /**\n+     * Adds the specified {@link HttpStatus}es for a {@link CircuitBreakerRuleWithContent}.\n+     * If the response status is one of the specified {@link HttpStatus}es,\n+     * depending on the build methods({@link #thenSuccess()}, {@link #thenFailure()} and {@link #thenIgnore()}),\n+     * a {@link Response} is reported as a success or failure to a {@link CircuitBreaker} or ignored.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public CircuitBreakerRuleWithContentBuilder<T> onStatus(Iterable<HttpStatus> statuses) {\n+        return (CircuitBreakerRuleWithContentBuilder<T>) super.onStatus(statuses);\n+    }\n+\n+    /**\n+     * Adds the specified {@code statusFilter} for a {@link CircuitBreakerRuleWithContent}.\n+     * If the response status matches the specified {@code statusFilter},\n+     * depending on the build methods({@link #thenSuccess()}, {@link #thenFailure()} and {@link #thenIgnore()}),\n+     * a {@link Response} is reported as a success or failure to a {@link CircuitBreaker} or ignored.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public CircuitBreakerRuleWithContentBuilder<T> onStatus(Predicate<? super HttpStatus> statusFilter) {\n+        return (CircuitBreakerRuleWithContentBuilder<T>) super.onStatus(statusFilter);\n+    }\n+\n+    /**\n+     * Adds the specified exception type for a {@link CircuitBreakerRuleWithContent}.\n+     * If an {@link Exception} is raised and that is instance of the specified {@code exception},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dafbda8c277e0d288f518c540bb6d86e82f7fe"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODE1Mzk0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjozOTowOVrOGYkTTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjo1NTozMlrOGYkjLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMzc3Mg==", "bodyText": "protected?", "url": "https://github.com/line/armeria/pull/2726#discussion_r428413772", "createdAt": "2020-05-21T02:39:09Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleBuilder.java", "diffHunk": "@@ -160,32 +151,39 @@ public AbstractRetryRuleBuilder onException(Predicate<? super Throwable> excepti\n     }\n \n     /**\n-     * Makes a {@link RetryRule} retry on any {@link Exception}.\n+     * Adds any {@link Exception}.\n      */\n-    public AbstractRetryRuleBuilder onException() {\n+    public AbstractRuleBuilder onException() {\n         return onException(unused -> true);\n     }\n \n     /**\n-     * Makes a {@link RetryRule} retry on an {@link UnprocessedRequestException} which means that the request\n-     * has not been processed by the server. Therefore, you can safely retry the request without worrying about\n-     * the idempotency of the request.\n+     * Adds an {@link UnprocessedRequestException}.\n      */\n-    public AbstractRetryRuleBuilder onUnprocessed() {\n+    public AbstractRuleBuilder onUnprocessed() {\n         return onException(UnprocessedRequestException.class);\n     }\n \n-    Predicate<RequestHeaders> requestHeadersFilter() {\n+    /**\n+     * Returns the {@link Predicate} of a {@link RequestHeaders}.\n+     */\n+    public final Predicate<RequestHeaders> requestHeadersFilter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dafbda8c277e0d288f518c540bb6d86e82f7fe"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxNzQ3OQ==", "bodyText": "These getters are used in internal.client.AbstractRuleBuilderUtil. \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2726#discussion_r428417479", "createdAt": "2020-05-21T02:54:11Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleBuilder.java", "diffHunk": "@@ -160,32 +151,39 @@ public AbstractRetryRuleBuilder onException(Predicate<? super Throwable> excepti\n     }\n \n     /**\n-     * Makes a {@link RetryRule} retry on any {@link Exception}.\n+     * Adds any {@link Exception}.\n      */\n-    public AbstractRetryRuleBuilder onException() {\n+    public AbstractRuleBuilder onException() {\n         return onException(unused -> true);\n     }\n \n     /**\n-     * Makes a {@link RetryRule} retry on an {@link UnprocessedRequestException} which means that the request\n-     * has not been processed by the server. Therefore, you can safely retry the request without worrying about\n-     * the idempotency of the request.\n+     * Adds an {@link UnprocessedRequestException}.\n      */\n-    public AbstractRetryRuleBuilder onUnprocessed() {\n+    public AbstractRuleBuilder onUnprocessed() {\n         return onException(UnprocessedRequestException.class);\n     }\n \n-    Predicate<RequestHeaders> requestHeadersFilter() {\n+    /**\n+     * Returns the {@link Predicate} of a {@link RequestHeaders}.\n+     */\n+    public final Predicate<RequestHeaders> requestHeadersFilter() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMzc3Mg=="}, "originalCommit": {"oid": "19dafbda8c277e0d288f518c540bb6d86e82f7fe"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxNzgzNg==", "bodyText": "Let me refactor it.", "url": "https://github.com/line/armeria/pull/2726#discussion_r428417836", "createdAt": "2020-05-21T02:55:32Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleBuilder.java", "diffHunk": "@@ -160,32 +151,39 @@ public AbstractRetryRuleBuilder onException(Predicate<? super Throwable> excepti\n     }\n \n     /**\n-     * Makes a {@link RetryRule} retry on any {@link Exception}.\n+     * Adds any {@link Exception}.\n      */\n-    public AbstractRetryRuleBuilder onException() {\n+    public AbstractRuleBuilder onException() {\n         return onException(unused -> true);\n     }\n \n     /**\n-     * Makes a {@link RetryRule} retry on an {@link UnprocessedRequestException} which means that the request\n-     * has not been processed by the server. Therefore, you can safely retry the request without worrying about\n-     * the idempotency of the request.\n+     * Adds an {@link UnprocessedRequestException}.\n      */\n-    public AbstractRetryRuleBuilder onUnprocessed() {\n+    public AbstractRuleBuilder onUnprocessed() {\n         return onException(UnprocessedRequestException.class);\n     }\n \n-    Predicate<RequestHeaders> requestHeadersFilter() {\n+    /**\n+     * Returns the {@link Predicate} of a {@link RequestHeaders}.\n+     */\n+    public final Predicate<RequestHeaders> requestHeadersFilter() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMzc3Mg=="}, "originalCommit": {"oid": "19dafbda8c277e0d288f518c540bb6d86e82f7fe"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODE1NDI1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjozOToyM1rOGYkTeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjozOToyM1rOGYkTeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMzgxNw==", "bodyText": "protected?", "url": "https://github.com/line/armeria/pull/2726#discussion_r428413817", "createdAt": "2020-05-21T02:39:23Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleBuilder.java", "diffHunk": "@@ -160,32 +151,39 @@ public AbstractRetryRuleBuilder onException(Predicate<? super Throwable> excepti\n     }\n \n     /**\n-     * Makes a {@link RetryRule} retry on any {@link Exception}.\n+     * Adds any {@link Exception}.\n      */\n-    public AbstractRetryRuleBuilder onException() {\n+    public AbstractRuleBuilder onException() {\n         return onException(unused -> true);\n     }\n \n     /**\n-     * Makes a {@link RetryRule} retry on an {@link UnprocessedRequestException} which means that the request\n-     * has not been processed by the server. Therefore, you can safely retry the request without worrying about\n-     * the idempotency of the request.\n+     * Adds an {@link UnprocessedRequestException}.\n      */\n-    public AbstractRetryRuleBuilder onUnprocessed() {\n+    public AbstractRuleBuilder onUnprocessed() {\n         return onException(UnprocessedRequestException.class);\n     }\n \n-    Predicate<RequestHeaders> requestHeadersFilter() {\n+    /**\n+     * Returns the {@link Predicate} of a {@link RequestHeaders}.\n+     */\n+    public final Predicate<RequestHeaders> requestHeadersFilter() {\n         return requestHeadersFilter;\n     }\n \n+    /**\n+     * Returns the {@link Predicate} of a {@link ResponseHeaders}.\n+     */\n     @Nullable\n-    Predicate<ResponseHeaders> responseHeadersFilter() {\n+    public final Predicate<ResponseHeaders> responseHeadersFilter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dafbda8c277e0d288f518c540bb6d86e82f7fe"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODE1NDQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjozOToyOFrOGYkTmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjozOToyOFrOGYkTmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMzg0OA==", "bodyText": "protected?", "url": "https://github.com/line/armeria/pull/2726#discussion_r428413848", "createdAt": "2020-05-21T02:39:28Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleBuilder.java", "diffHunk": "@@ -160,32 +151,39 @@ public AbstractRetryRuleBuilder onException(Predicate<? super Throwable> excepti\n     }\n \n     /**\n-     * Makes a {@link RetryRule} retry on any {@link Exception}.\n+     * Adds any {@link Exception}.\n      */\n-    public AbstractRetryRuleBuilder onException() {\n+    public AbstractRuleBuilder onException() {\n         return onException(unused -> true);\n     }\n \n     /**\n-     * Makes a {@link RetryRule} retry on an {@link UnprocessedRequestException} which means that the request\n-     * has not been processed by the server. Therefore, you can safely retry the request without worrying about\n-     * the idempotency of the request.\n+     * Adds an {@link UnprocessedRequestException}.\n      */\n-    public AbstractRetryRuleBuilder onUnprocessed() {\n+    public AbstractRuleBuilder onUnprocessed() {\n         return onException(UnprocessedRequestException.class);\n     }\n \n-    Predicate<RequestHeaders> requestHeadersFilter() {\n+    /**\n+     * Returns the {@link Predicate} of a {@link RequestHeaders}.\n+     */\n+    public final Predicate<RequestHeaders> requestHeadersFilter() {\n         return requestHeadersFilter;\n     }\n \n+    /**\n+     * Returns the {@link Predicate} of a {@link ResponseHeaders}.\n+     */\n     @Nullable\n-    Predicate<ResponseHeaders> responseHeadersFilter() {\n+    public final Predicate<ResponseHeaders> responseHeadersFilter() {\n         return responseHeadersFilter;\n     }\n \n+    /**\n+     * Returns the {@link Predicate} of an {@link Exception}.\n+     */\n     @Nullable\n-    Predicate<Throwable> exceptionFilter() {\n+    public final Predicate<Throwable> exceptionFilter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dafbda8c277e0d288f518c540bb6d86e82f7fe"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODE1NDk4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleWithContentBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjozOTo0OFrOGYkT-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjozOTo0OFrOGYkT-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMzk0NQ==", "bodyText": "protected?", "url": "https://github.com/line/armeria/pull/2726#discussion_r428413945", "createdAt": "2020-05-21T02:39:48Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleWithContentBuilder.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import com.linecorp.armeria.client.circuitbreaker.CircuitBreakerRuleWithContent;\n+import com.linecorp.armeria.client.retry.RetryRuleWithContent;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpResponseDuplicator;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.Response;\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+/**\n+ * A skeletal builder implementation for {@link RetryRuleWithContent} and {@link CircuitBreakerRuleWithContent}.\n+ * @param <T> the response type\n+ */\n+@UnstableApi\n+public abstract class AbstractRuleWithContentBuilder<T extends Response> extends AbstractRuleBuilder {\n+\n+    @Nullable\n+    private Function<? super T, ? extends CompletionStage<Boolean>> responseFilter;\n+\n+    /**\n+     * Creates a new instance with the specified {@code requestHeadersFilter}.\n+     */\n+    protected AbstractRuleWithContentBuilder(Predicate<? super RequestHeaders> requestHeadersFilter) {\n+        super(requestHeadersFilter);\n+    }\n+\n+    /**\n+     * Adds the specified {@code responseFilter}.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public AbstractRuleWithContentBuilder<T> onResponse(\n+            Function<? super T, ? extends CompletionStage<Boolean>> responseFilter) {\n+        requireNonNull(responseFilter, \"responseFilter\");\n+\n+        if (this.responseFilter == null) {\n+            this.responseFilter = responseFilter;\n+        } else {\n+            final Function<? super T, ? extends CompletionStage<Boolean>> first = this.responseFilter;\n+            this.responseFilter = content -> {\n+                if (content instanceof HttpResponse) {\n+                    final HttpResponseDuplicator duplicator = ((HttpResponse) content).toDuplicator();\n+                    final CompletionStage<Boolean> result = first.apply((T) duplicator.duplicate());\n+\n+                    return result.thenCompose(matched -> {\n+                        if (matched) {\n+                            return result;\n+                        } else {\n+                            return responseFilter.apply((T) duplicator.duplicate());\n+                        }\n+                    }).whenComplete((unused1, unused2) -> duplicator.close());\n+                } else {\n+                    final CompletionStage<Boolean> result = first.apply(content);\n+                    return result.thenCompose(matched -> {\n+                        if (matched) {\n+                            return result;\n+                        } else {\n+                            return responseFilter.apply(content);\n+                        }\n+                    });\n+                }\n+            };\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the {@code responseFilter}.\n+     */\n+    @Nullable\n+    protected final Function<? super T, ? extends CompletionStage<Boolean>> responseFilter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dafbda8c277e0d288f518c540bb6d86e82f7fe"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjA5NTQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingClientBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNToxOTozM1rOGZK-Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjo1MzozMlrOGZMk4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0NzM1OA==", "bodyText": "I think we should guide to use builder(...) not the deprecated one.", "url": "https://github.com/line/armeria/pull/2726#discussion_r429047358", "createdAt": "2020-05-22T05:19:33Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingClientBuilder.java", "diffHunk": "@@ -75,35 +86,54 @@ public RetryingClientBuilder useRetryAfter(boolean useRetryAfter) {\n      * Sets the length of content required to determine whether to retry or not. If the total length of content\n      * exceeds this length and there's no retry condition matched, it will hand over the stream to the client.\n      * Note that this property is useful only if you specified {@link RetryRuleWithContent} when calling\n-     * this builder's constructor. The default value of this property is\n-     * {@value #DEFAULT_CONTENT_PREVIEW_LENGTH}.\n+     * this builder's constructor. The default value of this property is {@value #DEFAULT_MAX_CONTENT_LENGTH}.\n      *\n-     * @param contentPreviewLength the content length to preview. {@code 0} does not disable the length limit.\n+     * @throws IllegalStateException if this builder is created with a {@link RetryRule} rather than\n+     *                               {@link RetryRuleWithContent}\n+     * @throws IllegalArgumentException if the specified {@code maxContentLength} is equal to or\n+     *                                  less than {@code 0}\n      *\n-     * @return {@link RetryingClientBuilder} to support method chaining\n+     * @deprecated Use {@link RetryingClient#builder(RetryRuleWithContent, int)}.\n+     */\n+    @Deprecated\n+    public RetryingClientBuilder maxContentLength(int maxContentLength) {\n+        checkState(!isMaxContentLengthSet, \"maxContentLength is already set by \" +\n+                                           \"RetryingClient.builder(RetryRuleWithContent, maxContentLength)\");\n+        checkState(needsContentInRule, \"cannot set maxContentLength when RetryRule is used; \" +\n+                                       \"Use RetryRuleWithContent to enable this feature.\");\n+        checkArgument(maxContentLength > 0,\n+                      \"maxContentLength: %s (expected: > 0)\", maxContentLength);\n+        this.maxContentLength = maxContentLength;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the length of content required to determine whether to retry or not. If the total length of content\n+     * exceeds this length and there's no retry condition matched, it will hand over the stream to the client.\n+     * Note that this property is useful only if you specified {@link RetryRuleWithContent} when calling\n+     * this builder's constructor. The default value of this property is {@value #DEFAULT_MAX_CONTENT_LENGTH}.\n+     *\n+     * @param contentPreviewLength the content length to preview. {@code 0} does not disable the length limit.\n      *\n      * @throws IllegalStateException if this builder is created with a {@link RetryRule} rather than\n      *                               {@link RetryRuleWithContent}\n-     * @throws IllegalArgumentException if the specified {@code contentPreviewLength} is equal to or\n+     * @throws IllegalArgumentException if the specified {@code maxContentLength} is equal to or\n      *                                  less than {@code 0}\n+     *\n+     * @deprecated Use {@link #maxContentLength(int)}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2ea22d4854eaff80a37e1ab3899ad0295712660"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3MzYzMg==", "bodyText": "Oops, I should remove maxContentLength(int) method.\n// Will use default max content length value\nRetryClient.builder(RetryRuleWithContent);\n// Will use the specified value\nRetryClient.builder(RetryRuleWithContent, maxContentLength); \n\n// Deprecated\nRetryClient.builder(RetryRuleWithContent).contentPreviewLength(maxContentLength);", "url": "https://github.com/line/armeria/pull/2726#discussion_r429073632", "createdAt": "2020-05-22T06:53:32Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingClientBuilder.java", "diffHunk": "@@ -75,35 +86,54 @@ public RetryingClientBuilder useRetryAfter(boolean useRetryAfter) {\n      * Sets the length of content required to determine whether to retry or not. If the total length of content\n      * exceeds this length and there's no retry condition matched, it will hand over the stream to the client.\n      * Note that this property is useful only if you specified {@link RetryRuleWithContent} when calling\n-     * this builder's constructor. The default value of this property is\n-     * {@value #DEFAULT_CONTENT_PREVIEW_LENGTH}.\n+     * this builder's constructor. The default value of this property is {@value #DEFAULT_MAX_CONTENT_LENGTH}.\n      *\n-     * @param contentPreviewLength the content length to preview. {@code 0} does not disable the length limit.\n+     * @throws IllegalStateException if this builder is created with a {@link RetryRule} rather than\n+     *                               {@link RetryRuleWithContent}\n+     * @throws IllegalArgumentException if the specified {@code maxContentLength} is equal to or\n+     *                                  less than {@code 0}\n      *\n-     * @return {@link RetryingClientBuilder} to support method chaining\n+     * @deprecated Use {@link RetryingClient#builder(RetryRuleWithContent, int)}.\n+     */\n+    @Deprecated\n+    public RetryingClientBuilder maxContentLength(int maxContentLength) {\n+        checkState(!isMaxContentLengthSet, \"maxContentLength is already set by \" +\n+                                           \"RetryingClient.builder(RetryRuleWithContent, maxContentLength)\");\n+        checkState(needsContentInRule, \"cannot set maxContentLength when RetryRule is used; \" +\n+                                       \"Use RetryRuleWithContent to enable this feature.\");\n+        checkArgument(maxContentLength > 0,\n+                      \"maxContentLength: %s (expected: > 0)\", maxContentLength);\n+        this.maxContentLength = maxContentLength;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the length of content required to determine whether to retry or not. If the total length of content\n+     * exceeds this length and there's no retry condition matched, it will hand over the stream to the client.\n+     * Note that this property is useful only if you specified {@link RetryRuleWithContent} when calling\n+     * this builder's constructor. The default value of this property is {@value #DEFAULT_MAX_CONTENT_LENGTH}.\n+     *\n+     * @param contentPreviewLength the content length to preview. {@code 0} does not disable the length limit.\n      *\n      * @throws IllegalStateException if this builder is created with a {@link RetryRule} rather than\n      *                               {@link RetryRuleWithContent}\n-     * @throws IllegalArgumentException if the specified {@code contentPreviewLength} is equal to or\n+     * @throws IllegalArgumentException if the specified {@code maxContentLength} is equal to or\n      *                                  less than {@code 0}\n+     *\n+     * @deprecated Use {@link #maxContentLength(int)}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0NzM1OA=="}, "originalCommit": {"oid": "b2ea22d4854eaff80a37e1ab3899ad0295712660"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjA5NTcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNToxOTo0NVrOGZK-Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNToxOTo0NVrOGZK-Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0NzM5NQ==", "bodyText": "Then, we can remove this.", "url": "https://github.com/line/armeria/pull/2726#discussion_r429047395", "createdAt": "2020-05-22T05:19:45Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingClientBuilder.java", "diffHunk": "@@ -75,35 +86,54 @@ public RetryingClientBuilder useRetryAfter(boolean useRetryAfter) {\n      * Sets the length of content required to determine whether to retry or not. If the total length of content\n      * exceeds this length and there's no retry condition matched, it will hand over the stream to the client.\n      * Note that this property is useful only if you specified {@link RetryRuleWithContent} when calling\n-     * this builder's constructor. The default value of this property is\n-     * {@value #DEFAULT_CONTENT_PREVIEW_LENGTH}.\n+     * this builder's constructor. The default value of this property is {@value #DEFAULT_MAX_CONTENT_LENGTH}.\n      *\n-     * @param contentPreviewLength the content length to preview. {@code 0} does not disable the length limit.\n+     * @throws IllegalStateException if this builder is created with a {@link RetryRule} rather than\n+     *                               {@link RetryRuleWithContent}\n+     * @throws IllegalArgumentException if the specified {@code maxContentLength} is equal to or\n+     *                                  less than {@code 0}\n      *\n-     * @return {@link RetryingClientBuilder} to support method chaining\n+     * @deprecated Use {@link RetryingClient#builder(RetryRuleWithContent, int)}.\n+     */\n+    @Deprecated\n+    public RetryingClientBuilder maxContentLength(int maxContentLength) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2ea22d4854eaff80a37e1ab3899ad0295712660"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjEwMjY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/client/AbstractRuleBuilderUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNToyNDoxNVrOGZLCag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNToyNDoxNVrOGZLCag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0ODQyNg==", "bodyText": "We can just check !hasResponseFilter or add @Nullable to parmaters.", "url": "https://github.com/line/armeria/pull/2726#discussion_r429048426", "createdAt": "2020-05-22T05:24:15Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/AbstractRuleBuilderUtil.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.Predicate;\n+\n+import com.linecorp.armeria.client.AbstractRuleBuilder;\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+public final class AbstractRuleBuilderUtil {\n+\n+    /**\n+     * Merges the filters of {@link AbstractRuleBuilder} that returns {@code true}\n+     * if all rules in the {@link AbstractRuleBuilder} match\n+     * a given {@link ClientRequestContext} and {@link Throwable}.\n+     */\n+    public static BiFunction<? super ClientRequestContext, ? super Throwable, Boolean>\n+    buildFilter(Predicate<RequestHeaders> requestHeadersFilter,\n+                Predicate<ResponseHeaders> responseHeadersFilter,\n+                Predicate<Throwable> exceptionFilter, boolean hasResponseFilter) {\n+        return (ctx, cause) -> {\n+            if (ctx.log().isAvailable(RequestLogProperty.REQUEST_HEADERS)) {\n+                final RequestHeaders requestHeaders = ctx.log().partial().requestHeaders();\n+                if (!requestHeadersFilter.test(requestHeaders)) {\n+                    return false;\n+                }\n+            }\n+\n+            // Safe to return true since no filters are set\n+            if (exceptionFilter == null && responseHeadersFilter == null && !hasResponseFilter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2ea22d4854eaff80a37e1ab3899ad0295712660"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjEwMjg3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/client/AbstractRuleBuilderUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNToyNDoyOFrOGZLCkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNToyNDoyOFrOGZLCkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0ODQ2NQ==", "bodyText": "ditto for exceptionFilter", "url": "https://github.com/line/armeria/pull/2726#discussion_r429048465", "createdAt": "2020-05-22T05:24:28Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/AbstractRuleBuilderUtil.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.Predicate;\n+\n+import com.linecorp.armeria.client.AbstractRuleBuilder;\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+public final class AbstractRuleBuilderUtil {\n+\n+    /**\n+     * Merges the filters of {@link AbstractRuleBuilder} that returns {@code true}\n+     * if all rules in the {@link AbstractRuleBuilder} match\n+     * a given {@link ClientRequestContext} and {@link Throwable}.\n+     */\n+    public static BiFunction<? super ClientRequestContext, ? super Throwable, Boolean>\n+    buildFilter(Predicate<RequestHeaders> requestHeadersFilter,\n+                Predicate<ResponseHeaders> responseHeadersFilter,\n+                Predicate<Throwable> exceptionFilter, boolean hasResponseFilter) {\n+        return (ctx, cause) -> {\n+            if (ctx.log().isAvailable(RequestLogProperty.REQUEST_HEADERS)) {\n+                final RequestHeaders requestHeaders = ctx.log().partial().requestHeaders();\n+                if (!requestHeadersFilter.test(requestHeaders)) {\n+                    return false;\n+                }\n+            }\n+\n+            // Safe to return true since no filters are set\n+            if (exceptionFilter == null && responseHeadersFilter == null && !hasResponseFilter) {\n+                return true;\n+            }\n+\n+            if (cause != null && exceptionFilter != null && exceptionFilter.test(Exceptions.peel(cause))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2ea22d4854eaff80a37e1ab3899ad0295712660"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjEwMzM0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/client/AbstractRuleBuilderUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNToyNDo0NFrOGZLC1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNToyNDo0NFrOGZLC1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0ODUzMg==", "bodyText": "ditto for responseHeadersFilter", "url": "https://github.com/line/armeria/pull/2726#discussion_r429048532", "createdAt": "2020-05-22T05:24:44Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/AbstractRuleBuilderUtil.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.Predicate;\n+\n+import com.linecorp.armeria.client.AbstractRuleBuilder;\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+public final class AbstractRuleBuilderUtil {\n+\n+    /**\n+     * Merges the filters of {@link AbstractRuleBuilder} that returns {@code true}\n+     * if all rules in the {@link AbstractRuleBuilder} match\n+     * a given {@link ClientRequestContext} and {@link Throwable}.\n+     */\n+    public static BiFunction<? super ClientRequestContext, ? super Throwable, Boolean>\n+    buildFilter(Predicate<RequestHeaders> requestHeadersFilter,\n+                Predicate<ResponseHeaders> responseHeadersFilter,\n+                Predicate<Throwable> exceptionFilter, boolean hasResponseFilter) {\n+        return (ctx, cause) -> {\n+            if (ctx.log().isAvailable(RequestLogProperty.REQUEST_HEADERS)) {\n+                final RequestHeaders requestHeaders = ctx.log().partial().requestHeaders();\n+                if (!requestHeadersFilter.test(requestHeaders)) {\n+                    return false;\n+                }\n+            }\n+\n+            // Safe to return true since no filters are set\n+            if (exceptionFilter == null && responseHeadersFilter == null && !hasResponseFilter) {\n+                return true;\n+            }\n+\n+            if (cause != null && exceptionFilter != null && exceptionFilter.test(Exceptions.peel(cause))) {\n+                return true;\n+            }\n+\n+            if (ctx.log().isAvailable(RequestLogProperty.RESPONSE_HEADERS)) {\n+                final ResponseHeaders responseHeaders = ctx.log().partial().responseHeaders();\n+                if (responseHeadersFilter != null && responseHeadersFilter.test(responseHeaders)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2ea22d4854eaff80a37e1ab3899ad0295712660"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjI0MTUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpMessageAggregator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjo0MjowOVrOGZMWAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjo0MjowOVrOGZMWAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2OTgyNw==", "bodyText": "If onComplete() is called multiple times, this method throws a null pointer exception at 92 line.\n// All items in contentList was set to null in the previous `onComplete()` call\nfinal HttpData data = contentList.set(i, null); \n// data is null\nfinal int dataLength = data.length();", "url": "https://github.com/line/armeria/pull/2726#discussion_r429069827", "createdAt": "2020-05-22T06:42:09Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpMessageAggregator.java", "diffHunk": "@@ -62,6 +62,10 @@ public final void onError(Throwable t) {\n \n     @Override\n     public final void onComplete() {\n+        if (future.isDone()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53026b645944a3ee2d913346cc77d51c1dda9256"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2640, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}