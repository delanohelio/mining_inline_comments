{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyODEwNDE5", "number": 2620, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOToxOTowMVrODq74uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo0NzoxMFrODrDeIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzQ3OTYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpHeadersUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOToxOTowMlrOF6_hKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMDozODo0MFrOF7INYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwMjQxMA==", "bodyText": "Can we remove this empty check? \ud83e\udd14\nIt seems additionalHeaders is always not empty here.", "url": "https://github.com/line/armeria/pull/2620#discussion_r397402410", "createdAt": "2020-03-24T19:19:02Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpHeadersUtil.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_REQUEST_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_RESPONSE_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.isTrailerBlacklisted;\n+\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpHeadersBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.ResponseHeadersBuilder;\n+\n+import io.netty.util.AsciiString;\n+\n+// This class will be removed after introducing CompositeHeaders.\n+public final class HttpHeadersUtil {\n+\n+    public static ResponseHeaders composeResponseHeaders(ResponseHeaders headers,\n+                                                         HttpHeaders additionalHeaders) {\n+        if (additionalHeaders.isEmpty()) {\n+            return headers;\n+        }\n+\n+        final ResponseHeadersBuilder builder = headers.toBuilder();\n+        if (!additionalHeaders.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab018403bfef8b9a350e30872a848b4a332c5bb4"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0NDgwMA==", "bodyText": "Yes, we can. \ud83d\ude04 Thanks!", "url": "https://github.com/line/armeria/pull/2620#discussion_r397544800", "createdAt": "2020-03-25T00:38:40Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpHeadersUtil.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_REQUEST_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_RESPONSE_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.isTrailerBlacklisted;\n+\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpHeadersBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.ResponseHeadersBuilder;\n+\n+import io.netty.util.AsciiString;\n+\n+// This class will be removed after introducing CompositeHeaders.\n+public final class HttpHeadersUtil {\n+\n+    public static ResponseHeaders composeResponseHeaders(ResponseHeaders headers,\n+                                                         HttpHeaders additionalHeaders) {\n+        if (additionalHeaders.isEmpty()) {\n+            return headers;\n+        }\n+\n+        final ResponseHeadersBuilder builder = headers.toBuilder();\n+        if (!additionalHeaders.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwMjQxMA=="}, "originalCommit": {"oid": "ab018403bfef8b9a350e30872a848b4a332c5bb4"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzQ4MTY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpHeadersUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOToxOTozNFrOF6_icQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOToxOTozNFrOF6_icQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwMjczNw==", "bodyText": "ditto : Can we remove this empty check? \ud83e\udd14\nIt seems additionalHeaders is always not empty here.", "url": "https://github.com/line/armeria/pull/2620#discussion_r397402737", "createdAt": "2020-03-24T19:19:34Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpHeadersUtil.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_REQUEST_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_RESPONSE_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.isTrailerBlacklisted;\n+\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpHeadersBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.ResponseHeadersBuilder;\n+\n+import io.netty.util.AsciiString;\n+\n+// This class will be removed after introducing CompositeHeaders.\n+public final class HttpHeadersUtil {\n+\n+    public static ResponseHeaders composeResponseHeaders(ResponseHeaders headers,\n+                                                         HttpHeaders additionalHeaders) {\n+        if (additionalHeaders.isEmpty()) {\n+            return headers;\n+        }\n+\n+        final ResponseHeadersBuilder builder = headers.toBuilder();\n+        if (!additionalHeaders.isEmpty()) {\n+            for (AsciiString name : additionalHeaders.names()) {\n+                if (!ADDITIONAL_RESPONSE_HEADER_BLACKLIST.contains(name)) {\n+                    builder.remove(name);\n+                    additionalHeaders.forEachValue(name, value -> builder.add(name, value));\n+                }\n+            }\n+        }\n+        return builder.build();\n+    }\n+\n+    public static RequestHeaders composeRequestHeaders(RequestHeaders headers,\n+                                                       HttpHeaders additionalHeaders) {\n+        if (additionalHeaders.isEmpty()) {\n+            return headers;\n+        }\n+\n+        final RequestHeadersBuilder builder = headers.toBuilder();\n+        if (!additionalHeaders.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab018403bfef8b9a350e30872a848b4a332c5bb4"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzUyNTk4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/client/ClientHttpObjectEncoder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTozMjoyMlrOF6_-Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMDozODoyMVrOF7INBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwOTgxNQ==", "bodyText": "Question :\nan is correct? This is so confusing to me \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2620#discussion_r397409815", "createdAt": "2020-03-24T19:32:22Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/ClientHttpObjectEncoder.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.ClosedSessionException;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.internal.common.HttpObjectEncoder;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+\n+/**\n+ * Converts an {@link HttpObject} into a protocol-specific object and writes it into a {@link Channel}.\n+ */\n+public interface ClientHttpObjectEncoder extends HttpObjectEncoder {\n+\n+    /**\n+     * Writes an {@link RequestHeaders}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab018403bfef8b9a350e30872a848b4a332c5bb4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0NDcwOQ==", "bodyText": "It's a. \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2620#discussion_r397544709", "createdAt": "2020-03-25T00:38:21Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/ClientHttpObjectEncoder.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.common.ClosedSessionException;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.internal.common.HttpObjectEncoder;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+\n+/**\n+ * Converts an {@link HttpObject} into a protocol-specific object and writes it into a {@link Channel}.\n+ */\n+public interface ClientHttpObjectEncoder extends HttpObjectEncoder {\n+\n+    /**\n+     * Writes an {@link RequestHeaders}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwOTgxNQ=="}, "originalCommit": {"oid": "ab018403bfef8b9a350e30872a848b4a332c5bb4"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzYwNDc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpHeadersUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTo1NTo1N1rOF7AwXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMDozODo1NVrOF7INrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyMjY4NQ==", "bodyText": "what about additionalHeaders to additionalTrailers \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2620#discussion_r397422685", "createdAt": "2020-03-24T19:55:57Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpHeadersUtil.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_REQUEST_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_RESPONSE_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.isTrailerBlacklisted;\n+\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpHeadersBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.ResponseHeadersBuilder;\n+\n+import io.netty.util.AsciiString;\n+\n+// This class will be removed after introducing CompositeHeaders.\n+public final class HttpHeadersUtil {\n+\n+    public static ResponseHeaders composeResponseHeaders(ResponseHeaders headers,\n+                                                         HttpHeaders additionalHeaders) {\n+        if (additionalHeaders.isEmpty()) {\n+            return headers;\n+        }\n+\n+        final ResponseHeadersBuilder builder = headers.toBuilder();\n+        if (!additionalHeaders.isEmpty()) {\n+            for (AsciiString name : additionalHeaders.names()) {\n+                if (!ADDITIONAL_RESPONSE_HEADER_BLACKLIST.contains(name)) {\n+                    builder.remove(name);\n+                    additionalHeaders.forEachValue(name, value -> builder.add(name, value));\n+                }\n+            }\n+        }\n+        return builder.build();\n+    }\n+\n+    public static RequestHeaders composeRequestHeaders(RequestHeaders headers,\n+                                                       HttpHeaders additionalHeaders) {\n+        if (additionalHeaders.isEmpty()) {\n+            return headers;\n+        }\n+\n+        final RequestHeadersBuilder builder = headers.toBuilder();\n+        if (!additionalHeaders.isEmpty()) {\n+            for (AsciiString name : additionalHeaders.names()) {\n+                if (!ADDITIONAL_REQUEST_HEADER_BLACKLIST.contains(name)) {\n+                    builder.remove(name);\n+                    additionalHeaders.forEachValue(name, value -> builder.add(name, value));\n+                }\n+            }\n+        }\n+        return builder.build();\n+    }\n+\n+    public static HttpHeaders composeTrailers(HttpHeaders headers, HttpHeaders additionalHeaders) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab018403bfef8b9a350e30872a848b4a332c5bb4"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0NDg3Nw==", "bodyText": "Fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2620#discussion_r397544877", "createdAt": "2020-03-25T00:38:55Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpHeadersUtil.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_REQUEST_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_RESPONSE_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.isTrailerBlacklisted;\n+\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpHeadersBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.ResponseHeadersBuilder;\n+\n+import io.netty.util.AsciiString;\n+\n+// This class will be removed after introducing CompositeHeaders.\n+public final class HttpHeadersUtil {\n+\n+    public static ResponseHeaders composeResponseHeaders(ResponseHeaders headers,\n+                                                         HttpHeaders additionalHeaders) {\n+        if (additionalHeaders.isEmpty()) {\n+            return headers;\n+        }\n+\n+        final ResponseHeadersBuilder builder = headers.toBuilder();\n+        if (!additionalHeaders.isEmpty()) {\n+            for (AsciiString name : additionalHeaders.names()) {\n+                if (!ADDITIONAL_RESPONSE_HEADER_BLACKLIST.contains(name)) {\n+                    builder.remove(name);\n+                    additionalHeaders.forEachValue(name, value -> builder.add(name, value));\n+                }\n+            }\n+        }\n+        return builder.build();\n+    }\n+\n+    public static RequestHeaders composeRequestHeaders(RequestHeaders headers,\n+                                                       HttpHeaders additionalHeaders) {\n+        if (additionalHeaders.isEmpty()) {\n+            return headers;\n+        }\n+\n+        final RequestHeadersBuilder builder = headers.toBuilder();\n+        if (!additionalHeaders.isEmpty()) {\n+            for (AsciiString name : additionalHeaders.names()) {\n+                if (!ADDITIONAL_REQUEST_HEADER_BLACKLIST.contains(name)) {\n+                    builder.remove(name);\n+                    additionalHeaders.forEachValue(name, value -> builder.add(name, value));\n+                }\n+            }\n+        }\n+        return builder.build();\n+    }\n+\n+    public static HttpHeaders composeTrailers(HttpHeaders headers, HttpHeaders additionalHeaders) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyMjY4NQ=="}, "originalCommit": {"oid": "ab018403bfef8b9a350e30872a848b4a332c5bb4"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDQ2ODM0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpHeadersUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMToyMDowOFrOF7I6tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMToyMDowOFrOF7I6tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1NjQwNA==", "bodyText": "nit: // TODO(minwoox): Replace this class with CompositeHeaders.", "url": "https://github.com/line/armeria/pull/2620#discussion_r397556404", "createdAt": "2020-03-25T01:20:08Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpHeadersUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_REQUEST_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_RESPONSE_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.isTrailerBlacklisted;\n+\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpHeadersBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.ResponseHeadersBuilder;\n+\n+import io.netty.util.AsciiString;\n+\n+// This class will be removed after introducing CompositeHeaders.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd7738b673baac68d7f790c5d592e14660238d2"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDQ2OTA1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpHeadersUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMToyMDozMlrOF7I7Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjoxMjo1OFrOF7JxSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1NjUxMA==", "bodyText": "compose -> merge?", "url": "https://github.com/line/armeria/pull/2620#discussion_r397556510", "createdAt": "2020-03-25T01:20:32Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpHeadersUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_REQUEST_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_RESPONSE_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.isTrailerBlacklisted;\n+\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpHeadersBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.ResponseHeadersBuilder;\n+\n+import io.netty.util.AsciiString;\n+\n+// This class will be removed after introducing CompositeHeaders.\n+public final class HttpHeadersUtil {\n+\n+    public static ResponseHeaders composeResponseHeaders(ResponseHeaders headers,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd7738b673baac68d7f790c5d592e14660238d2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3MDM3Ng==", "bodyText": "Fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2620#discussion_r397570376", "createdAt": "2020-03-25T02:12:58Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpHeadersUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_REQUEST_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.ADDITIONAL_RESPONSE_HEADER_BLACKLIST;\n+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.isTrailerBlacklisted;\n+\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpHeadersBuilder;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestHeadersBuilder;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.ResponseHeadersBuilder;\n+\n+import io.netty.util.AsciiString;\n+\n+// This class will be removed after introducing CompositeHeaders.\n+public final class HttpHeadersUtil {\n+\n+    public static ResponseHeaders composeResponseHeaders(ResponseHeaders headers,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1NjUxMA=="}, "originalCommit": {"oid": "efd7738b673baac68d7f790c5d592e14660238d2"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDQ3Mzk0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMToyMzoyMFrOF7I97g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjoxMjo0N1rOF7JxDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1NzIzMA==", "bodyText": "Probably better reusing a single instance for the case where endOfStream is false?", "url": "https://github.com/line/armeria/pull/2620#discussion_r397557230", "createdAt": "2020-03-25T01:23:20Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -135,20 +144,33 @@ public void onNext(HttpObject o) {\n \n                 final ResponseHeaders headers = (ResponseHeaders) o;\n                 final HttpStatus status = headers.status();\n+                final ResponseHeaders composedHeaders;\n                 if (status.isInformational()) {\n-                    // Needs non-informational headers.\n-                    break;\n-                }\n-\n-                if (req.method() == HttpMethod.HEAD) {\n-                    endOfStream = true;\n-                } else if (status.isContentAlwaysEmpty()) {\n-                    state = State.NEEDS_TRAILERS;\n+                    if (endOfStream) {\n+                        failAndRespond(new IllegalStateException(\n+                                \"published an informational headers whose endOfStream is true: \" + o +\n+                                \" (service: \" + service() + ')'));\n+                        return;\n+                    }\n+                    composedHeaders = headers;\n                 } else {\n-                    state = State.NEEDS_DATA_OR_TRAILERS;\n+                    if (req.method() == HttpMethod.HEAD) {\n+                        endOfStream = true;\n+                    } else if (status.isContentAlwaysEmpty()) {\n+                        state = State.NEEDS_TRAILERS;\n+                    } else {\n+                        state = State.NEEDS_DATA_OR_TRAILERS;\n+                    }\n+                    if (endOfStream) {\n+                        setDone();\n+                    }\n+                    composedHeaders = composeResponseHeaders(headers, reqCtx.additionalResponseHeaders());\n+                    logBuilder().responseHeaders(composedHeaders);\n                 }\n \n-                logBuilder().responseHeaders(headers);\n+                responseEncoder.writeHeaders(req.id(), req.streamId(), composedHeaders, endOfStream,\n+                                             reqCtx.additionalResponseTrailers().isEmpty())\n+                               .addListener(new WriteHeadersFutureListener(endOfStream));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd7738b673baac68d7f790c5d592e14660238d2"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1NzMwNw==", "bodyText": "(.. because a user can send many informational headers)", "url": "https://github.com/line/armeria/pull/2620#discussion_r397557307", "createdAt": "2020-03-25T01:23:40Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -135,20 +144,33 @@ public void onNext(HttpObject o) {\n \n                 final ResponseHeaders headers = (ResponseHeaders) o;\n                 final HttpStatus status = headers.status();\n+                final ResponseHeaders composedHeaders;\n                 if (status.isInformational()) {\n-                    // Needs non-informational headers.\n-                    break;\n-                }\n-\n-                if (req.method() == HttpMethod.HEAD) {\n-                    endOfStream = true;\n-                } else if (status.isContentAlwaysEmpty()) {\n-                    state = State.NEEDS_TRAILERS;\n+                    if (endOfStream) {\n+                        failAndRespond(new IllegalStateException(\n+                                \"published an informational headers whose endOfStream is true: \" + o +\n+                                \" (service: \" + service() + ')'));\n+                        return;\n+                    }\n+                    composedHeaders = headers;\n                 } else {\n-                    state = State.NEEDS_DATA_OR_TRAILERS;\n+                    if (req.method() == HttpMethod.HEAD) {\n+                        endOfStream = true;\n+                    } else if (status.isContentAlwaysEmpty()) {\n+                        state = State.NEEDS_TRAILERS;\n+                    } else {\n+                        state = State.NEEDS_DATA_OR_TRAILERS;\n+                    }\n+                    if (endOfStream) {\n+                        setDone();\n+                    }\n+                    composedHeaders = composeResponseHeaders(headers, reqCtx.additionalResponseHeaders());\n+                    logBuilder().responseHeaders(composedHeaders);\n                 }\n \n-                logBuilder().responseHeaders(headers);\n+                responseEncoder.writeHeaders(req.id(), req.streamId(), composedHeaders, endOfStream,\n+                                             reqCtx.additionalResponseTrailers().isEmpty())\n+                               .addListener(new WriteHeadersFutureListener(endOfStream));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1NzIzMA=="}, "originalCommit": {"oid": "efd7738b673baac68d7f790c5d592e14660238d2"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3MDMxOA==", "bodyText": "Yeah, I think it's better too. Also, added for streaming data.", "url": "https://github.com/line/armeria/pull/2620#discussion_r397570318", "createdAt": "2020-03-25T02:12:47Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -135,20 +144,33 @@ public void onNext(HttpObject o) {\n \n                 final ResponseHeaders headers = (ResponseHeaders) o;\n                 final HttpStatus status = headers.status();\n+                final ResponseHeaders composedHeaders;\n                 if (status.isInformational()) {\n-                    // Needs non-informational headers.\n-                    break;\n-                }\n-\n-                if (req.method() == HttpMethod.HEAD) {\n-                    endOfStream = true;\n-                } else if (status.isContentAlwaysEmpty()) {\n-                    state = State.NEEDS_TRAILERS;\n+                    if (endOfStream) {\n+                        failAndRespond(new IllegalStateException(\n+                                \"published an informational headers whose endOfStream is true: \" + o +\n+                                \" (service: \" + service() + ')'));\n+                        return;\n+                    }\n+                    composedHeaders = headers;\n                 } else {\n-                    state = State.NEEDS_DATA_OR_TRAILERS;\n+                    if (req.method() == HttpMethod.HEAD) {\n+                        endOfStream = true;\n+                    } else if (status.isContentAlwaysEmpty()) {\n+                        state = State.NEEDS_TRAILERS;\n+                    } else {\n+                        state = State.NEEDS_DATA_OR_TRAILERS;\n+                    }\n+                    if (endOfStream) {\n+                        setDone();\n+                    }\n+                    composedHeaders = composeResponseHeaders(headers, reqCtx.additionalResponseHeaders());\n+                    logBuilder().responseHeaders(composedHeaders);\n                 }\n \n-                logBuilder().responseHeaders(headers);\n+                responseEncoder.writeHeaders(req.id(), req.streamId(), composedHeaders, endOfStream,\n+                                             reqCtx.additionalResponseTrailers().isEmpty())\n+                               .addListener(new WriteHeadersFutureListener(endOfStream));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1NzIzMA=="}, "originalCommit": {"oid": "efd7738b673baac68d7f790c5d592e14660238d2"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDQ4MTQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMToyNzoyOFrOF7JCTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjowMDo1N1rOF7Jldg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1ODM0OA==", "bodyText": "Would it be possible to piggy-bag this into addCallbackAndFlush(), so that we keep the number of listeners minimal?", "url": "https://github.com/line/armeria/pull/2620#discussion_r397558348", "createdAt": "2020-03-25T01:27:28Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -389,9 +371,28 @@ private void failAndRespond(Throwable cause, AggregatedHttpResponse res, Http2Er\n         addCallbackAndFlush(cause, oldState, future);\n     }\n \n+    private void maybeLogFirstResponseBytesTransferred(ChannelFuture future) {\n+        future.addListener((ChannelFuture f) -> {\n+            if (f.isSuccess()) {\n+                maybeLogFirstResponseBytesTransferred();\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd7738b673baac68d7f790c5d592e14660238d2"}, "originalPosition": 385}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2NzM1MA==", "bodyText": "Ah that's a good idea. I didn't put this logic in addCallbackAndFlush because this shouldn't be called after writing reset.\nBut, if it's resetting that means that loggedResponseHeadersFirstBytesTransferred is already set, so I didn't have to worry about it.", "url": "https://github.com/line/armeria/pull/2620#discussion_r397567350", "createdAt": "2020-03-25T02:00:57Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -389,9 +371,28 @@ private void failAndRespond(Throwable cause, AggregatedHttpResponse res, Http2Er\n         addCallbackAndFlush(cause, oldState, future);\n     }\n \n+    private void maybeLogFirstResponseBytesTransferred(ChannelFuture future) {\n+        future.addListener((ChannelFuture f) -> {\n+            if (f.isSuccess()) {\n+                maybeLogFirstResponseBytesTransferred();\n+            }\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1ODM0OA=="}, "originalCommit": {"oid": "efd7738b673baac68d7f790c5d592e14660238d2"}, "originalPosition": 385}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDYwOTA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjo0MDoxM1rOF7KMyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjo0MDoxM1rOF7KMyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3NzQxOA==", "bodyText": "nit\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final RequestHeaders composed = mergeRequestHeaders(firstHeaders, ctx.additionalRequestHeaders());\n          \n          \n            \n                    final RequestHeaders merged = mergeRequestHeaders(firstHeaders, ctx.additionalRequestHeaders());", "url": "https://github.com/line/armeria/pull/2620#discussion_r397577418", "createdAt": "2020-03-25T02:40:13Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -192,16 +158,16 @@ private void writeFirstHeader(HttpSession session) {\n \n         final SessionProtocol protocol = session.protocol();\n         assert protocol != null;\n-        logBuilder.requestHeaders(firstHeaders);\n-\n         if (request.isEmpty()) {\n             state = State.DONE;\n         } else {\n             state = State.NEEDS_DATA_OR_TRAILERS;\n         }\n-        final ChannelFuture future = encoder.writeHeaders(id, streamId(), firstHeaders, request.isEmpty(),\n-                                                          ctx.additionalRequestHeaders(), HttpHeaders.of());\n-        future.addListener(this);\n+\n+        final RequestHeaders composed = mergeRequestHeaders(firstHeaders, ctx.additionalRequestHeaders());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eede2ebd48086a8644d99e4fa63e41667caf989b"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDY5NDUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzoyODo1M1rOF7K-nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNTo0OTo1NlrOF7M6iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5MDE3Mw==", "bodyText": "Couldn't we use loggedRequestFirstBytesTransferred for UnprocessedRequestException?", "url": "https://github.com/line/armeria/pull/2620#discussion_r397590173", "createdAt": "2020-03-25T03:28:53Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -370,4 +334,68 @@ private boolean cancelTimeout() {\n         this.timeoutFuture = null;\n         return timeoutFuture.cancel(false);\n     }\n+\n+    private WriteFutureListener writeFutureListener(boolean isRequestHeadersFuture) {\n+        if (!isRequestHeadersFuture) {\n+            // Reuse in case sending streaming requests.\n+            if (cachedWriteFutureListener == null) {\n+                cachedWriteFutureListener = new WriteFutureListener(false);\n+            }\n+            return cachedWriteFutureListener;\n+        }\n+        return new WriteFutureListener(true);\n+    }\n+\n+    private class WriteFutureListener implements ChannelFutureListener {\n+\n+        private final boolean isRequestHeadersFuture;\n+\n+        WriteFutureListener(boolean isRequestHeadersFuture) {\n+            this.isRequestHeadersFuture = isRequestHeadersFuture;\n+        }\n+\n+        @Override\n+        public void operationComplete(ChannelFuture future) throws Exception {\n+            // If a message has been sent out, cancel the timeout for starting a request.\n+            cancelTimeout();\n+\n+            try (SafeCloseable ignored = RequestContextUtil.pop()) {\n+                if (future.isSuccess()) {\n+                    // The first write is always the first headers, so log that we finished our first transfer\n+                    // over the wire.\n+                    if (!loggedRequestFirstBytesTransferred) {\n+                        logBuilder.requestFirstBytesTransferred();\n+                        loggedRequestFirstBytesTransferred = true;\n+                    }\n+\n+                    if (state == State.DONE) {\n+                        logBuilder.endRequest();\n+                        // Successfully sent the request; schedule the response timeout.\n+                        assert responseWrapper != null;\n+                        responseWrapper.initTimeout();\n+                    }\n+\n+                    // Request more messages regardless whether the state is DONE. It makes the producer have\n+                    // a chance to produce the last call such as 'onComplete' and 'onError' when there are\n+                    // no more messages it can produce.\n+                    if (!isSubscriptionCompleted) {\n+                        assert subscription != null;\n+                        subscription.request(1);\n+                    }\n+                    return;\n+                }\n+\n+                if (isRequestHeadersFuture) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fd2a759f61efd3f82aaaff1910049b0f0f56c57"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyMTg5Ng==", "bodyText": "Oops, thanks for finding this.", "url": "https://github.com/line/armeria/pull/2620#discussion_r397621896", "createdAt": "2020-03-25T05:49:56Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -370,4 +334,68 @@ private boolean cancelTimeout() {\n         this.timeoutFuture = null;\n         return timeoutFuture.cancel(false);\n     }\n+\n+    private WriteFutureListener writeFutureListener(boolean isRequestHeadersFuture) {\n+        if (!isRequestHeadersFuture) {\n+            // Reuse in case sending streaming requests.\n+            if (cachedWriteFutureListener == null) {\n+                cachedWriteFutureListener = new WriteFutureListener(false);\n+            }\n+            return cachedWriteFutureListener;\n+        }\n+        return new WriteFutureListener(true);\n+    }\n+\n+    private class WriteFutureListener implements ChannelFutureListener {\n+\n+        private final boolean isRequestHeadersFuture;\n+\n+        WriteFutureListener(boolean isRequestHeadersFuture) {\n+            this.isRequestHeadersFuture = isRequestHeadersFuture;\n+        }\n+\n+        @Override\n+        public void operationComplete(ChannelFuture future) throws Exception {\n+            // If a message has been sent out, cancel the timeout for starting a request.\n+            cancelTimeout();\n+\n+            try (SafeCloseable ignored = RequestContextUtil.pop()) {\n+                if (future.isSuccess()) {\n+                    // The first write is always the first headers, so log that we finished our first transfer\n+                    // over the wire.\n+                    if (!loggedRequestFirstBytesTransferred) {\n+                        logBuilder.requestFirstBytesTransferred();\n+                        loggedRequestFirstBytesTransferred = true;\n+                    }\n+\n+                    if (state == State.DONE) {\n+                        logBuilder.endRequest();\n+                        // Successfully sent the request; schedule the response timeout.\n+                        assert responseWrapper != null;\n+                        responseWrapper.initTimeout();\n+                    }\n+\n+                    // Request more messages regardless whether the state is DONE. It makes the producer have\n+                    // a chance to produce the last call such as 'onComplete' and 'onError' when there are\n+                    // no more messages it can produce.\n+                    if (!isSubscriptionCompleted) {\n+                        assert subscription != null;\n+                        subscription.request(1);\n+                    }\n+                    return;\n+                }\n+\n+                if (isRequestHeadersFuture) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5MDE3Mw=="}, "originalCommit": {"oid": "8fd2a759f61efd3f82aaaff1910049b0f0f56c57"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDcyMDgyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo0NjoxN1rOF7LOUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo0NjoxN1rOF7LOUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NDE5Mg==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            final ResponseHeaders composedHeaders;\n          \n          \n            \n                            final ResponseHeaders mergedHeaders;", "url": "https://github.com/line/armeria/pull/2620#discussion_r397594192", "createdAt": "2020-03-25T03:46:17Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -135,20 +150,33 @@ public void onNext(HttpObject o) {\n \n                 final ResponseHeaders headers = (ResponseHeaders) o;\n                 final HttpStatus status = headers.status();\n+                final ResponseHeaders composedHeaders;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fd2a759f61efd3f82aaaff1910049b0f0f56c57"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDcyMjI0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo0NzoxMFrOF7LPFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo0NzoxMFrOF7LPFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NDM4OA==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                final HttpHeaders composed = mergeTrailers(trailers, reqCtx.additionalResponseTrailers());\n          \n          \n            \n                                final HttpHeaders merged = mergeTrailers(trailers, reqCtx.additionalResponseTrailers());", "url": "https://github.com/line/armeria/pull/2620#discussion_r397594388", "createdAt": "2020-03-25T03:47:10Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -169,14 +197,29 @@ public void onNext(HttpObject o) {\n                                 \" (service: \" + service() + ')'));\n                         return;\n                     }\n-                    logBuilder().responseTrailers(trailers);\n-\n-                    // Trailers always end the stream even if not explicitly set.\n-                    endOfStream = true;\n-                } else if (endOfStream) { // Last DATA frame\n-                    if (!additionalTrailers.isEmpty()) {\n-                        write(o, false);\n-                        o = HttpHeaders.of();\n+                    setDone();\n+                    final HttpHeaders composed = mergeTrailers(trailers, reqCtx.additionalResponseTrailers());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fd2a759f61efd3f82aaaff1910049b0f0f56c57"}, "originalPosition": 130}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2807, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}