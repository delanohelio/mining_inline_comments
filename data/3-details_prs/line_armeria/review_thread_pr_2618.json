{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxOTU1NjA4", "number": 2618, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNDozNToxMlrODqIL7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNzo1NDowMlrODvAkkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTAwOTEwOnYy", "diffSide": "RIGHT", "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNDozNToxMlrOF5tMSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNDozNToxMlrOF5tMSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1MzU3Ng==", "bodyText": "I tried status exception with cause, but that eats the causes message in favor of the generic message from the status code.", "url": "https://github.com/line/armeria/pull/2618#discussion_r396053576", "createdAt": "2020-03-22T04:35:12Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,23 +78,63 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            // TODO: how do we set status 503 and also retain the cause's message?\n+            throw new IllegalStateException(\"not ready\");\n+        });\n+        sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future ->\n+            // TODO: how do we set status 503 and also retain the cause's message?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc26eb658ebf8d3d67d3940d76e15d69dbc3aa09"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTAxMTAyOnYy", "diffSide": "RIGHT", "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNDo0MDoxMlrOF5tNQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNDo0MDoxMlrOF5tNQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1MzgyNg==", "bodyText": "chatted about this with @anuraaga.. maybe we can share the clock used for the log timestamps in armeria with brave perhaps..", "url": "https://github.com/line/armeria/pull/2618#discussion_r396053826", "createdAt": "2020-03-22T04:40:12Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,23 +78,63 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            // TODO: how do we set status 503 and also retain the cause's message?\n+            throw new IllegalStateException(\"not ready\");\n+        });\n+        sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future ->\n+            // TODO: how do we set status 503 and also retain the cause's message?\n+            future.completeExceptionally(new IllegalStateException(\"not ready\"))));\n+\n+        sb.service(\"/items/:itemId\",\n                    (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n-                                                 String.valueOf(req.headers().get(EXTRA_KEY))));\n-        sb.service(\"/badrequest\", (ctx, req) -> HttpResponse.of(BAD_REQUEST));\n+                                                 String.valueOf(ctx.pathParam(\"itemId\"))));\n+        sb.service(\"/async_items/:itemId\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n+                                                String.valueOf(ctx.pathParam(\"itemId\"))))));\n+        // TODO: how do we mount \"/items/:itemId\" under the prefix \"/nested\"?\n+\n         sb.service(\"/child\", (ctx, req) -> {\n+            // TODO: this fails because the timestamp is out of range, eventhough it finishes before\n+            // the response is returned.\n             Tracing.currentTracer().nextSpan().name(\"child\").start().finish();\n             return HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"happy\");\n         });\n-        sb.service(\"/exception\", (ctx, req) -> {\n-            throw new Exception(\"not ready\");\n+        sb.service(\"/extra\",\n+            (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n+                String.valueOf(req.headers().get(EXTRA_KEY))));\n+        sb.service(\"/badrequest\", (ctx, req) -> HttpResponse.of(BAD_REQUEST));\n+        sb.service(\"/child\", (ctx, req) -> {\n+            Tracing.currentTracer().nextSpan().name(\"child\").start().finish();\n+            return HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"happy\");\n         });\n+\n         sb.decorator(BraveService.newDecorator(httpTracing));\n \n         server = sb.build();\n         server.start().join();\n     }\n \n+    HttpResponse asyncResponse(Consumer<CompletableFuture<HttpResponse>> completeResponse) {\n+        final CompletableFuture<HttpResponse> responseFuture = new CompletableFuture<>();\n+        final HttpResponse res = HttpResponse.from(responseFuture);\n+        executorService.submit(() -> completeResponse.accept(responseFuture));\n+        return res;\n+    }\n+\n+    @Override\n+    @Test\n+    public void createsChildSpan() {\n+        // Armeria uses different timings than Tracing.clock(context) provided by Brave. This means", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc26eb658ebf8d3d67d3940d76e15d69dbc3aa09"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTkyMjgxOnYy", "diffSide": "RIGHT", "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMTo1Njo0N1rOF508Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODowMzo1MlrOGBMGFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4MDUwMw==", "bodyText": "throw HttpResponseException.of(HttpResponse.of(HttpStatus.SERVICE_UNAVAILABLE, \"not ready\")) ?", "url": "https://github.com/line/armeria/pull/2618#discussion_r396180503", "createdAt": "2020-03-23T01:56:47Z", "author": {"login": "trustin"}, "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,23 +78,63 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            // TODO: how do we set status 503 and also retain the cause's message?\n+            throw new IllegalStateException(\"not ready\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc26eb658ebf8d3d67d3940d76e15d69dbc3aa09"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MzI1Mg==", "bodyText": "this doesn't set the exception message, only the http body (and that isn't used as the message..)", "url": "https://github.com/line/armeria/pull/2618#discussion_r402673252", "createdAt": "2020-04-03T00:36:21Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,23 +78,63 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            // TODO: how do we set status 503 and also retain the cause's message?\n+            throw new IllegalStateException(\"not ready\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4MDUwMw=="}, "originalCommit": {"oid": "cc26eb658ebf8d3d67d3940d76e15d69dbc3aa09"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MzUyNg==", "bodyText": "usually there's a way to set status independent of the throwable, but this can work if we can control the message of the HttpResponseException (ex by adding a parameter) currently it has null message.", "url": "https://github.com/line/armeria/pull/2618#discussion_r402673526", "createdAt": "2020-04-03T00:37:28Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,23 +78,63 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            // TODO: how do we set status 503 and also retain the cause's message?\n+            throw new IllegalStateException(\"not ready\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4MDUwMw=="}, "originalCommit": {"oid": "cc26eb658ebf8d3d67d3940d76e15d69dbc3aa09"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg4NjYzNg==", "bodyText": "Actually, just throwing an exception was the right way to do in this case. Sorry about the noise.", "url": "https://github.com/line/armeria/pull/2618#discussion_r403886636", "createdAt": "2020-04-06T07:39:38Z", "author": {"login": "trustin"}, "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,23 +78,63 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            // TODO: how do we set status 503 and also retain the cause's message?\n+            throw new IllegalStateException(\"not ready\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4MDUwMw=="}, "originalCommit": {"oid": "cc26eb658ebf8d3d67d3940d76e15d69dbc3aa09"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg5OTkyNw==", "bodyText": "but I do want to control the status code on error.. this helps show if a default of 500 isn't accidentally assumed.", "url": "https://github.com/line/armeria/pull/2618#discussion_r403899927", "createdAt": "2020-04-06T08:03:52Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,23 +78,63 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            // TODO: how do we set status 503 and also retain the cause's message?\n+            throw new IllegalStateException(\"not ready\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4MDUwMw=="}, "originalCommit": {"oid": "cc26eb658ebf8d3d67d3940d76e15d69dbc3aa09"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTkyOTA1OnYy", "diffSide": "LEFT", "path": "brave/src/test/java/com/linecorp/armeria/client/brave/BraveClientIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjowMjo0MlrOF50_0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjowMjo0MlrOF50_0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4MTQ1OQ==", "bodyText": "Nice! \ud83d\ude00", "url": "https://github.com/line/armeria/pull/2618#discussion_r396181459", "createdAt": "2020-03-23T02:02:42Z", "author": {"login": "ikhoon"}, "path": "brave/src/test/java/com/linecorp/armeria/client/brave/BraveClientIntegrationTest.java", "diffHunk": "@@ -53,9 +49,6 @@\n @RunWith(Parameterized.class)\n public class BraveClientIntegrationTest extends ITHttpAsyncClient<WebClient> {\n \n-    @Rule(order = Integer.MAX_VALUE)\n-    public TestRule globalTimeout = new DisableOnDebug(Timeout.seconds(15));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc26eb658ebf8d3d67d3940d76e15d69dbc3aa09"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzQ4MjQxOnYy", "diffSide": "RIGHT", "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMTo0Mjo1NFrOGACTZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMTo0Mjo1NFrOGACTZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MDkxNg==", "bodyText": "can we get a constructor like this please? it will help with testing to know difference between throwable message and http body.", "url": "https://github.com/line/armeria/pull/2618#discussion_r402690916", "createdAt": "2020-04-03T01:42:54Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,34 +82,123 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            // TODO: HttpResponseException.of(status, \"not ready\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15c22d4b88cbc5219507b70b1fd1cd85ff11ddd3"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzQ4MjkwOnYy", "diffSide": "RIGHT", "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMTo0MzoxNFrOGACTsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowMTowOVrOGAJXfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MDk5Mw==", "bodyText": "anything obvious here? the body is not in the server context.", "url": "https://github.com/line/armeria/pull/2618#discussion_r402690993", "createdAt": "2020-04-03T01:43:14Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,34 +82,123 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            throw HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE);\n+        });\n+        sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future ->\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            future.completeExceptionally(HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE))));\n+\n+        sb.service(\"/items/:itemId\",\n                    (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n-                                                 String.valueOf(req.headers().get(EXTRA_KEY))));\n+                                                 String.valueOf(ctx.pathParam(\"itemId\"))));\n+        sb.service(\"/async_items/:itemId\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n+                                                String.valueOf(ctx.pathParam(\"itemId\"))))));\n+        // TODO: how do we mount \"/items/:itemId\" under the prefix \"/nested\"?\n+\n+        // TODO: these fail because the context isn't here for some reason?\n+        sb.service(\"/child\", (ctx, req) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15c22d4b88cbc5219507b70b1fd1cd85ff11ddd3"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MzIyNA==", "bodyText": "I mean this lambda cannot see the trace context... neither does the one for baggage", "url": "https://github.com/line/armeria/pull/2618#discussion_r402693224", "createdAt": "2020-04-03T01:51:49Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,34 +82,123 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            throw HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE);\n+        });\n+        sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future ->\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            future.completeExceptionally(HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE))));\n+\n+        sb.service(\"/items/:itemId\",\n                    (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n-                                                 String.valueOf(req.headers().get(EXTRA_KEY))));\n+                                                 String.valueOf(ctx.pathParam(\"itemId\"))));\n+        sb.service(\"/async_items/:itemId\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n+                                                String.valueOf(ctx.pathParam(\"itemId\"))))));\n+        // TODO: how do we mount \"/items/:itemId\" under the prefix \"/nested\"?\n+\n+        // TODO: these fail because the context isn't here for some reason?\n+        sb.service(\"/child\", (ctx, req) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MDk5Mw=="}, "originalCommit": {"oid": "15c22d4b88cbc5219507b70b1fd1cd85ff11ddd3"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0MjE4OA==", "bodyText": "Actually I'm surprised this doesn't fail, I thought we have some validation for duplicate paths /cc @minwoox @ikhoon\nWhile I'm not sure, I suspect the issue is having two services mounted at the same path /child, which I think is messing with the decoration logic.", "url": "https://github.com/line/armeria/pull/2618#discussion_r402742188", "createdAt": "2020-04-03T05:19:32Z", "author": {"login": "anuraaga"}, "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,34 +82,123 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            throw HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE);\n+        });\n+        sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future ->\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            future.completeExceptionally(HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE))));\n+\n+        sb.service(\"/items/:itemId\",\n                    (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n-                                                 String.valueOf(req.headers().get(EXTRA_KEY))));\n+                                                 String.valueOf(ctx.pathParam(\"itemId\"))));\n+        sb.service(\"/async_items/:itemId\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n+                                                String.valueOf(ctx.pathParam(\"itemId\"))))));\n+        // TODO: how do we mount \"/items/:itemId\" under the prefix \"/nested\"?\n+\n+        // TODO: these fail because the context isn't here for some reason?\n+        sb.service(\"/child\", (ctx, req) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MDk5Mw=="}, "originalCommit": {"oid": "15c22d4b88cbc5219507b70b1fd1cd85ff11ddd3"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0NjgyMQ==", "bodyText": "I thought we have some validation for duplicate paths\n\nThe default is just warning. https://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java#L199\nWe should set another handler for different behavior.", "url": "https://github.com/line/armeria/pull/2618#discussion_r402746821", "createdAt": "2020-04-03T05:38:46Z", "author": {"login": "minwoox"}, "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,34 +82,123 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            throw HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE);\n+        });\n+        sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future ->\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            future.completeExceptionally(HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE))));\n+\n+        sb.service(\"/items/:itemId\",\n                    (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n-                                                 String.valueOf(req.headers().get(EXTRA_KEY))));\n+                                                 String.valueOf(ctx.pathParam(\"itemId\"))));\n+        sb.service(\"/async_items/:itemId\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n+                                                String.valueOf(ctx.pathParam(\"itemId\"))))));\n+        // TODO: how do we mount \"/items/:itemId\" under the prefix \"/nested\"?\n+\n+        // TODO: these fail because the context isn't here for some reason?\n+        sb.service(\"/child\", (ctx, req) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MDk5Mw=="}, "originalCommit": {"oid": "15c22d4b88cbc5219507b70b1fd1cd85ff11ddd3"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0NzYzNw==", "bodyText": "Ah thanks now I remember, probably was a warning here then :)", "url": "https://github.com/line/armeria/pull/2618#discussion_r402747637", "createdAt": "2020-04-03T05:42:01Z", "author": {"login": "anuraaga"}, "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,34 +82,123 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            throw HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE);\n+        });\n+        sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future ->\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            future.completeExceptionally(HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE))));\n+\n+        sb.service(\"/items/:itemId\",\n                    (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n-                                                 String.valueOf(req.headers().get(EXTRA_KEY))));\n+                                                 String.valueOf(ctx.pathParam(\"itemId\"))));\n+        sb.service(\"/async_items/:itemId\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n+                                                String.valueOf(ctx.pathParam(\"itemId\"))))));\n+        // TODO: how do we mount \"/items/:itemId\" under the prefix \"/nested\"?\n+\n+        // TODO: these fail because the context isn't here for some reason?\n+        sb.service(\"/child\", (ctx, req) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MDk5Mw=="}, "originalCommit": {"oid": "15c22d4b88cbc5219507b70b1fd1cd85ff11ddd3"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4MDc0Nw==", "bodyText": "this test is a single child household. the other will be sold off for medical experiments", "url": "https://github.com/line/armeria/pull/2618#discussion_r402780747", "createdAt": "2020-04-03T07:16:45Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,34 +82,123 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            throw HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE);\n+        });\n+        sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future ->\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            future.completeExceptionally(HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE))));\n+\n+        sb.service(\"/items/:itemId\",\n                    (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n-                                                 String.valueOf(req.headers().get(EXTRA_KEY))));\n+                                                 String.valueOf(ctx.pathParam(\"itemId\"))));\n+        sb.service(\"/async_items/:itemId\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n+                                                String.valueOf(ctx.pathParam(\"itemId\"))))));\n+        // TODO: how do we mount \"/items/:itemId\" under the prefix \"/nested\"?\n+\n+        // TODO: these fail because the context isn't here for some reason?\n+        sb.service(\"/child\", (ctx, req) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MDk5Mw=="}, "originalCommit": {"oid": "15c22d4b88cbc5219507b70b1fd1cd85ff11ddd3"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNjY1Mg==", "bodyText": "this duplicate made the other things fail!", "url": "https://github.com/line/armeria/pull/2618#discussion_r402806652", "createdAt": "2020-04-03T08:01:09Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,34 +82,123 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            throw HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE);\n+        });\n+        sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future ->\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            future.completeExceptionally(HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE))));\n+\n+        sb.service(\"/items/:itemId\",\n                    (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n-                                                 String.valueOf(req.headers().get(EXTRA_KEY))));\n+                                                 String.valueOf(ctx.pathParam(\"itemId\"))));\n+        sb.service(\"/async_items/:itemId\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n+                                                String.valueOf(ctx.pathParam(\"itemId\"))))));\n+        // TODO: how do we mount \"/items/:itemId\" under the prefix \"/nested\"?\n+\n+        // TODO: these fail because the context isn't here for some reason?\n+        sb.service(\"/child\", (ctx, req) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MDk5Mw=="}, "originalCommit": {"oid": "15c22d4b88cbc5219507b70b1fd1cd85ff11ddd3"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzQ4MzcxOnYy", "diffSide": "RIGHT", "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMTo0Mzo0MVrOGACUKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoxOTozNVrOGAPa0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MTExMg==", "bodyText": "any hint on how to forward \"/items/:itemId\" under /nested?", "url": "https://github.com/line/armeria/pull/2618#discussion_r402691112", "createdAt": "2020-04-03T01:43:41Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,34 +82,123 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            throw HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE);\n+        });\n+        sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future ->\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            future.completeExceptionally(HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE))));\n+\n+        sb.service(\"/items/:itemId\",\n                    (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n-                                                 String.valueOf(req.headers().get(EXTRA_KEY))));\n+                                                 String.valueOf(ctx.pathParam(\"itemId\"))));\n+        sb.service(\"/async_items/:itemId\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n+                                                String.valueOf(ctx.pathParam(\"itemId\"))))));\n+        // TODO: how do we mount \"/items/:itemId\" under the prefix \"/nested\"?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15c22d4b88cbc5219507b70b1fd1cd85ff11ddd3"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNTgxMA==", "bodyText": "there's no subrouting feature so I'll leave this one out.", "url": "https://github.com/line/armeria/pull/2618#discussion_r402905810", "createdAt": "2020-04-03T10:19:35Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,34 +82,123 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            throw HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE);\n+        });\n+        sb.service(\"/exceptionAsync\", (ctx, req) -> asyncResponse(future ->\n+            // TODO: HttpResponseException.of(status, \"not ready\")\n+            future.completeExceptionally(HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE))));\n+\n+        sb.service(\"/items/:itemId\",\n                    (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n-                                                 String.valueOf(req.headers().get(EXTRA_KEY))));\n+                                                 String.valueOf(ctx.pathParam(\"itemId\"))));\n+        sb.service(\"/async_items/:itemId\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8,\n+                                                String.valueOf(ctx.pathParam(\"itemId\"))))));\n+        // TODO: how do we mount \"/items/:itemId\" under the prefix \"/nested\"?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MTExMg=="}, "originalCommit": {"oid": "15c22d4b88cbc5219507b70b1fd1cd85ff11ddd3"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODk4MTU5OnYy", "diffSide": "RIGHT", "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDozNDo1OFrOGAP5mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDozNDo1OFrOGAP5mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMzY4OQ==", "bodyText": "this doesn't end up as ServiceRequestContext.responseCause()", "url": "https://github.com/line/armeria/pull/2618#discussion_r402913689", "createdAt": "2020-04-03T10:34:58Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,25 +69,49 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            throw HttpResponseException.of(HttpStatus.SERVICE_UNAVAILABLE, \"not ready\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc5ab3d725f5e403e9e9410146b9fd380060fb43"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTAxNjUxOnYy", "diffSide": "RIGHT", "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDo0NTozN1rOGAQOXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDo0NTozN1rOGAQOXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxOTAwNQ==", "bodyText": "there's a code change needed to HttpServerHandler to set the HttpResponseException's cause to the context responseCause. Any hints or help appreciated! cc @trustin", "url": "https://github.com/line/armeria/pull/2618#discussion_r402919005", "createdAt": "2020-04-03T10:45:37Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,25 +69,52 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future ->\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"))));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            IllegalStateException ex = new IllegalStateException(\"not ready\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a312b4d5296afe2b6a658f3cffaed44b93c6e68c"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjE5MDI2OnYy", "diffSide": "RIGHT", "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNzo1NDowMlrOGBLwtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNzo1NDowMlrOGBLwtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg5NDQ1NA==", "bodyText": "I don't see how we are setting the status code 503, though.. we should put a TODO until we do?", "url": "https://github.com/line/armeria/pull/2618#discussion_r403894454", "createdAt": "2020-04-06T07:54:02Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java", "diffHunk": "@@ -65,34 +67,63 @@ protected void init() {\n             return HttpResponse.of(HttpStatus.NOT_FOUND);\n         });\n         sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n-        sb.service(\"/extra\",\n+        sb.service(\"/async\", (ctx, req) -> asyncResponse(future -> {\n+            future.complete(HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, \"bar\"));\n+        }));\n+\n+        sb.service(\"/exception\", (ctx, req) -> {\n+            throw new IllegalStateException(\"not ready\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58e1f1678749f7c9aaa352ca1c6f27b177a10370"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2802, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}