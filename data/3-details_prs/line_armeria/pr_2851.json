{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMzMzODA0", "number": 2851, "title": "Add `ClientRequestContext` to the filters of RetryRule and CircuitBre\u2026", "bodyText": "\u2026akerRule\nMotivation:\nIt is useful to use ClientRequestContext information to build a complex RetryRule{WithContent} and CircuitBreakerRule{WithContent}.\nFor example, if you apply a RetryRule only to a specific RPC method,\nthen you need to check the current served method using ClientRequestContext#rpcRequest()\nAlthough it could be possible by implementing RetryRule, RetryRuleBuilder would be more convenient.\nBackoff backoff = ...\nRetryRuleWithContent<RpcResponse> rule = (ctx, response, cause) -> {\n    \n    if (ctx.log().isAvailable(RequestLogProperty.REQUEST_HEADERS)) {\n        ...\n    }\n\n    final RpcRequest request = ctx.rpcRequest();\n    if (request != null && !safeMethods.contains(request.method())) {\n        if (isRetryableException(cause)) {\n            return CompletableFuture.completedFuture(RetryDecision.retry(backoff));\n        }\n    }\n    return CompletableFuture.completedFuture(RetryDecision.next());\n};\n\n// Versus:\nRetryRuleWithContent.<RpcResponse>builder()\n                    .onServerErrorStatus()\n                    .onException((ctx, ex) -> {\n                        RpcRequest request = ctx.rpcRequest();\n                        if (request != null && !safeMethods.contains(request.method())) {\n                            return isRetryableException(throwable);\n                        } else {\n                            return false;\n                        }\n                    })\n                    .thenBackoff(backoff);\nModifications:\n\nAdd new methods that take BiPredicate<ClientRequestContext, ?> as a predicate.\nDeprecate on*(Predicate) methods in the followings in favor of `on*(BiPredicate)`:\n\nRetryRule and RetryRuleBuilder\nRetryRuleWithContent and RetryRuleWithContentBuilder\nCircuitBreakerRule and CircuitBreakerRuleBuilder\nCircuitBreakerRuleWithContent and CircuitBreakerRuleWithContentBuilder\n\n\n\nResult:\nYou can now use ClientRequestContext to build a complex RetyRule and CircuitBreakerRule.", "createdAt": "2020-06-29T11:20:58Z", "url": "https://github.com/line/armeria/pull/2851", "merged": true, "mergeCommit": {"oid": "de25688cbdfcdcc7b44d26ef4001654fa153195b"}, "closed": true, "closedAt": "2020-06-30T08:54:55Z", "author": {"login": "ikhoon"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcv-t7QAH2gAyNDQxMzMzODA0OmNlN2E5OTM2NTBkNzE2NzgyMTNlNjViNzYwYjkyYmRmOGY1YWYwNjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwRjWtgFqTQzOTc5NzgzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ce7a993650d71678213e65b760b92bdf8f5af060", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/ce7a993650d71678213e65b760b92bdf8f5af060", "committedDate": "2020-06-29T10:44:48Z", "message": "Add `ClientRequestContext` to the filters of RetryRule and CircuitBreakerRule\n\nMotivation:\nIt is useful to use `ClientRequestContext` information to build a complex RetryRule{WithContent} and CircuitBreakerRule{WithContent}.\nFor example, if you apply a `RetryRule` only to a specific RPC method,\nthen you need to check the current served method using `ClientRequestContext#rpcRequest()`\nAlthough it could be possible by implementing `RetryRule`, `RetryRuleBuilder` would be more convenient.\n```java\nBackoff backoff = ...\nCompletableFuture<RetryDecision> retryDecisionFuture =\n     CompletableFuture.completedFuture(RetryDecision.retry(backoff));\nCompletableFuture<RetryDecision> nextDecisionFuture =\n     CompletableFuture.completedFuture(RetryDecision.next());\n\nRetryRuleWithContent<RpcResponse> rule = (ctx, response, cause) -> {\n    final RpcRequest request = ctx.rpcRequest();\n    if (request != null && !safeMethods.contains(request.method())) {\n        if (isRetryableException(cause)) {\n            return retryDecisionFuture;\n        }\n    }\n    return nextDecisionFuture;\n};\n\n// Versus:\nBackoff backoff = ...\nRetryRuleWithContent.<RpcResponse>builder()\n                    .onException((ctx, ex) -> {\n                        RpcRequest request = ctx.rpcRequest();\n                        if (request != null && !safeMethods.contains(request.method())) {\n                            return isRetryableException(throwable);\n                        } else {\n                            return false;\n                        }\n                    })\n                    .thenBackoff(backoff);\n```\n\nModifications:\n\n- Add new methods that take `BiPredicate<ClientRequestContext, ?>` as a predicate.\n- Deprecate on*(Predicate<?>) methods in the followings in favor of `on*(BiPredicate<ClientRequestContext, ?>)`:\n  - RetryRule and RetryRuleBuilder\n  - RetryRuleWithContent and RetryRuleWithContentBuilder\n  - CircuitBreakerRule and CircuitBreakerRuleBuilder\n  - CircuitBreakerRuleWithContent and CircuitBreakerRuleWithContentBuilder\n\nResult:\n\nYou can now use ClientRequestContext to build a complex RetyRule and CircuitBreakerRule."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NzAxMzIx", "url": "https://github.com/line/armeria/pull/2851#pullrequestreview-439701321", "createdAt": "2020-06-30T06:21:13Z", "commit": {"oid": "ce7a993650d71678213e65b760b92bdf8f5af060"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoyMToxM1rOGqtWyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoyMToxM1rOGqtWyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzNjQ4OA==", "bodyText": "How about BiPredicates.second()?", "url": "https://github.com/line/armeria/pull/2851#discussion_r447436488", "createdAt": "2020-06-30T06:21:13Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleBuilder.java", "diffHunk": "@@ -46,55 +48,90 @@\n @UnstableApi\n public abstract class AbstractRuleBuilder {\n \n-    private final Predicate<RequestHeaders> requestHeadersFilter;\n+    private final BiPredicate<ClientRequestContext, RequestHeaders> requestHeadersFilter;\n \n     @Nullable\n-    private Predicate<ResponseHeaders> responseHeadersFilter;\n+    private BiPredicate<ClientRequestContext, ResponseHeaders> responseHeadersFilter;\n     @Nullable\n-    private Predicate<HttpHeaders> responseTrailersFilter;\n+    private BiPredicate<ClientRequestContext, HttpHeaders> responseTrailersFilter;\n     @Nullable\n-    private Predicate<Throwable> exceptionFilter;\n+    private BiPredicate<ClientRequestContext, Throwable> exceptionFilter;\n \n     /**\n      * Creates a new instance with the specified {@code requestHeadersFilter}.\n      */\n     @SuppressWarnings(\"unchecked\")\n+    protected AbstractRuleBuilder(\n+            BiPredicate<? super ClientRequestContext, ? super RequestHeaders> requestHeadersFilter) {\n+        this.requestHeadersFilter = (BiPredicate<ClientRequestContext, RequestHeaders>) requestHeadersFilter;\n+    }\n+\n+    /**\n+     * Creates a new instance with the specified {@code requestHeadersFilter}.\n+     *\n+     * @deprecated Use {@link #AbstractRuleBuilder(BiPredicate)}.\n+     */\n+    @Deprecated\n     protected AbstractRuleBuilder(Predicate<? super RequestHeaders> requestHeadersFilter) {\n-        this.requestHeadersFilter = (Predicate<RequestHeaders>) requestHeadersFilter;\n+        this(toBiPredicateForSecond(requireNonNull(requestHeadersFilter, \"requestHeadersFilter\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce7a993650d71678213e65b760b92bdf8f5af060"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5Nzk3ODMw", "url": "https://github.com/line/armeria/pull/2851#pullrequestreview-439797830", "createdAt": "2020-06-30T08:41:27Z", "commit": {"oid": "ce7a993650d71678213e65b760b92bdf8f5af060"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 324, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}