{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3MjMwODUy", "number": 3161, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMDozNjo1NlrOE2d8Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwMzoxNzozNVrOE2l1ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTQ5MTE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMDozNjo1NlrOHvSJXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwMzoxMTo1OVrOHvdp_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM0MjQyOQ==", "bodyText": "Somehow block list seems a bit different - blocking requests with these headers is what came to mind first. Perhaps FILTERED_*/ ALLOWED_ is a good pattern?", "url": "https://github.com/line/armeria/pull/3161#discussion_r519342429", "createdAt": "2020-11-08T10:36:56Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java", "diffHunk": "@@ -139,82 +139,82 @@ public boolean equals(AsciiString a, AsciiString b) {\n     /**\n      * The set of headers that should not be directly copied when converting headers from HTTP/1 to HTTP/2.\n      */\n-    private static final CharSequenceMap HTTP_TO_HTTP2_HEADER_BLACKLIST = new CharSequenceMap();\n+    private static final CharSequenceMap HTTP_TO_HTTP2_HEADER_BLOCKLIST = new CharSequenceMap();\n \n     /**\n      * The set of headers that should not be directly copied when converting headers from HTTP/2 to HTTP/1.\n      */\n-    private static final CharSequenceMap HTTP2_TO_HTTP_HEADER_BLACKLIST = new CharSequenceMap();\n+    private static final CharSequenceMap HTTP2_TO_HTTP_HEADER_BLOCKLIST = new CharSequenceMap();\n \n     /**\n      * The set of headers that must not be directly copied when converting trailers.\n      */\n-    private static final CharSequenceMap HTTP_TRAILER_BLACKLIST = new CharSequenceMap();\n+    private static final CharSequenceMap HTTP_TRAILER_BLOCKLIST = new CharSequenceMap();\n \n     static {\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(HttpHeaderNames.CONNECTION, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(HEADER_NAME_KEEP_ALIVE, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(HEADER_NAME_PROXY_CONNECTION, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(HttpHeaderNames.TRANSFER_ENCODING, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(HttpHeaderNames.UPGRADE, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(ExtensionHeaderNames.STREAM_ID.text(), EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(ExtensionHeaderNames.SCHEME.text(), EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(ExtensionHeaderNames.PATH.text(), EMPTY_STRING);\n+        HTTP_TO_HTTP2_HEADER_BLOCKLIST.add(HttpHeaderNames.CONNECTION, EMPTY_STRING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c63d5d224427f5a3228c43cca462615e43b4cc3c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUxNTI2Mg==", "bodyText": "It seems like a better idea. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3161#discussion_r519515262", "createdAt": "2020-11-09T01:57:09Z", "author": {"login": "heowc"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java", "diffHunk": "@@ -139,82 +139,82 @@ public boolean equals(AsciiString a, AsciiString b) {\n     /**\n      * The set of headers that should not be directly copied when converting headers from HTTP/1 to HTTP/2.\n      */\n-    private static final CharSequenceMap HTTP_TO_HTTP2_HEADER_BLACKLIST = new CharSequenceMap();\n+    private static final CharSequenceMap HTTP_TO_HTTP2_HEADER_BLOCKLIST = new CharSequenceMap();\n \n     /**\n      * The set of headers that should not be directly copied when converting headers from HTTP/2 to HTTP/1.\n      */\n-    private static final CharSequenceMap HTTP2_TO_HTTP_HEADER_BLACKLIST = new CharSequenceMap();\n+    private static final CharSequenceMap HTTP2_TO_HTTP_HEADER_BLOCKLIST = new CharSequenceMap();\n \n     /**\n      * The set of headers that must not be directly copied when converting trailers.\n      */\n-    private static final CharSequenceMap HTTP_TRAILER_BLACKLIST = new CharSequenceMap();\n+    private static final CharSequenceMap HTTP_TRAILER_BLOCKLIST = new CharSequenceMap();\n \n     static {\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(HttpHeaderNames.CONNECTION, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(HEADER_NAME_KEEP_ALIVE, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(HEADER_NAME_PROXY_CONNECTION, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(HttpHeaderNames.TRANSFER_ENCODING, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(HttpHeaderNames.UPGRADE, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(ExtensionHeaderNames.STREAM_ID.text(), EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(ExtensionHeaderNames.SCHEME.text(), EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(ExtensionHeaderNames.PATH.text(), EMPTY_STRING);\n+        HTTP_TO_HTTP2_HEADER_BLOCKLIST.add(HttpHeaderNames.CONNECTION, EMPTY_STRING);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM0MjQyOQ=="}, "originalCommit": {"oid": "c63d5d224427f5a3228c43cca462615e43b4cc3c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzMTAwNg==", "bodyText": "DISALLOWED_ also sounds good to me.", "url": "https://github.com/line/armeria/pull/3161#discussion_r519531006", "createdAt": "2020-11-09T03:11:59Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java", "diffHunk": "@@ -139,82 +139,82 @@ public boolean equals(AsciiString a, AsciiString b) {\n     /**\n      * The set of headers that should not be directly copied when converting headers from HTTP/1 to HTTP/2.\n      */\n-    private static final CharSequenceMap HTTP_TO_HTTP2_HEADER_BLACKLIST = new CharSequenceMap();\n+    private static final CharSequenceMap HTTP_TO_HTTP2_HEADER_BLOCKLIST = new CharSequenceMap();\n \n     /**\n      * The set of headers that should not be directly copied when converting headers from HTTP/2 to HTTP/1.\n      */\n-    private static final CharSequenceMap HTTP2_TO_HTTP_HEADER_BLACKLIST = new CharSequenceMap();\n+    private static final CharSequenceMap HTTP2_TO_HTTP_HEADER_BLOCKLIST = new CharSequenceMap();\n \n     /**\n      * The set of headers that must not be directly copied when converting trailers.\n      */\n-    private static final CharSequenceMap HTTP_TRAILER_BLACKLIST = new CharSequenceMap();\n+    private static final CharSequenceMap HTTP_TRAILER_BLOCKLIST = new CharSequenceMap();\n \n     static {\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(HttpHeaderNames.CONNECTION, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(HEADER_NAME_KEEP_ALIVE, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(HEADER_NAME_PROXY_CONNECTION, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(HttpHeaderNames.TRANSFER_ENCODING, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(HttpHeaderNames.UPGRADE, EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(ExtensionHeaderNames.STREAM_ID.text(), EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(ExtensionHeaderNames.SCHEME.text(), EMPTY_STRING);\n-        HTTP_TO_HTTP2_HEADER_BLACKLIST.add(ExtensionHeaderNames.PATH.text(), EMPTY_STRING);\n+        HTTP_TO_HTTP2_HEADER_BLOCKLIST.add(HttpHeaderNames.CONNECTION, EMPTY_STRING);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM0MjQyOQ=="}, "originalCommit": {"oid": "c63d5d224427f5a3228c43cca462615e43b4cc3c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Njc3MzkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/IgnoreHostsTrustManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwMzoxMDoyN1rOHvdoxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzoyMjo0MlrOHvhpTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzMDY5NA==", "bodyText": "There is no verb 'allowlist'. How about: the list of allowed hosts?", "url": "https://github.com/line/armeria/pull/3161#discussion_r519530694", "createdAt": "2020-11-09T03:10:27Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/IgnoreHostsTrustManager.java", "diffHunk": "@@ -49,7 +49,7 @@\n import com.google.common.collect.ImmutableSet;\n \n /**\n- * An implementation of {@link X509ExtendedTrustManager} that skips verification on whitelisted hosts.\n+ * An implementation of {@link X509ExtendedTrustManager} that skips verification on allowlisted hosts.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c63d5d224427f5a3228c43cca462615e43b4cc3c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU5NjM2Nw==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/3161#discussion_r519596367", "createdAt": "2020-11-09T07:22:42Z", "author": {"login": "heowc"}, "path": "core/src/main/java/com/linecorp/armeria/client/IgnoreHostsTrustManager.java", "diffHunk": "@@ -49,7 +49,7 @@\n import com.google.common.collect.ImmutableSet;\n \n /**\n- * An implementation of {@link X509ExtendedTrustManager} that skips verification on whitelisted hosts.\n+ * An implementation of {@link X509ExtendedTrustManager} that skips verification on allowlisted hosts.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzMDY5NA=="}, "originalCommit": {"oid": "c63d5d224427f5a3228c43cca462615e43b4cc3c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Njc4MjE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwMzoxNToyOVrOHvdtKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNDozMTozMVrOHvepTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzMTgxNw==", "bodyText": "Blocklisted -> Disallowed?", "url": "https://github.com/line/armeria/pull/3161#discussion_r519531817", "createdAt": "2020-11-09T03:15:29Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java", "diffHunk": "@@ -881,11 +881,11 @@ private static void toNettyHttp2Client(HttpHeaders inputHeaders, Http2Headers ou\n         for (Entry<AsciiString, String> entry : inputHeaders) {\n             final AsciiString name = entry.getKey();\n             final String value = entry.getValue();\n-            if (HTTP_TO_HTTP2_HEADER_BLACKLIST.contains(name)) {\n+            if (HTTP_TO_HTTP2_HEADER_BLOCKLIST.contains(name)) {\n                 continue;\n             }\n \n-            if (isTrailer && isTrailerBlacklisted(name)) {\n+            if (isTrailer && isTrailerBlocklisted(name)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c63d5d224427f5a3228c43cca462615e43b4cc3c"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzNDQ0MA==", "bodyText": "Forbidden also sounds good, but I'm not sure if it's too \"strict\".", "url": "https://github.com/line/armeria/pull/3161#discussion_r519534440", "createdAt": "2020-11-09T03:27:58Z", "author": {"login": "KarboniteKream"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java", "diffHunk": "@@ -881,11 +881,11 @@ private static void toNettyHttp2Client(HttpHeaders inputHeaders, Http2Headers ou\n         for (Entry<AsciiString, String> entry : inputHeaders) {\n             final AsciiString name = entry.getKey();\n             final String value = entry.getValue();\n-            if (HTTP_TO_HTTP2_HEADER_BLACKLIST.contains(name)) {\n+            if (HTTP_TO_HTTP2_HEADER_BLOCKLIST.contains(name)) {\n                 continue;\n             }\n \n-            if (isTrailer && isTrailerBlacklisted(name)) {\n+            if (isTrailer && isTrailerBlocklisted(name)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzMTgxNw=="}, "originalCommit": {"oid": "c63d5d224427f5a3228c43cca462615e43b4cc3c"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU0NzIxNQ==", "bodyText": "That sounds good to me as well.", "url": "https://github.com/line/armeria/pull/3161#discussion_r519547215", "createdAt": "2020-11-09T04:31:31Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java", "diffHunk": "@@ -881,11 +881,11 @@ private static void toNettyHttp2Client(HttpHeaders inputHeaders, Http2Headers ou\n         for (Entry<AsciiString, String> entry : inputHeaders) {\n             final AsciiString name = entry.getKey();\n             final String value = entry.getValue();\n-            if (HTTP_TO_HTTP2_HEADER_BLACKLIST.contains(name)) {\n+            if (HTTP_TO_HTTP2_HEADER_BLOCKLIST.contains(name)) {\n                 continue;\n             }\n \n-            if (isTrailer && isTrailerBlacklisted(name)) {\n+            if (isTrailer && isTrailerBlocklisted(name)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzMTgxNw=="}, "originalCommit": {"oid": "c63d5d224427f5a3228c43cca462615e43b4cc3c"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Njc4NDk5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/client/ClientOptionsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwMzoxNzozNVrOHvdu5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwMzoxNzozNVrOHvdu5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzMjI2MA==", "bodyText": "testSetDisallowedHeader ?", "url": "https://github.com/line/armeria/pull/3161#discussion_r519532260", "createdAt": "2020-11-09T03:17:35Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/client/ClientOptionsTest.java", "diffHunk": "@@ -66,7 +66,7 @@ void testSetHeader() {\n     }\n \n     @Test\n-    void testSetBlackListHeader() {\n+    void testSetBlockListHeader() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c63d5d224427f5a3228c43cca462615e43b4cc3c"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2007, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}