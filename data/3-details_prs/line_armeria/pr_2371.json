{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MjI1NjA0", "number": 2371, "title": "Replace `Optional` with a nullable value", "bodyText": "Motivation:\nThe early API such as Scheme.tryParse() and Server.activePort()\nreturns an Optional while more recent APIs just return null.\nGiven that Optional tends to make user code verbose and JDK will not\nmake Optional a value type due to backward compatibility, I think it's\nbetter just using a nullable value in our API.\nModifications:\n\n(Breaking) Replace all Optional usages with @Nullable.\nAdd MediaType.charset(Charset defaultCharset) because\nMediaType.charset().orElse(UTF_8) seems pretty common.\n(Breaking) ClientOptions.get() now throws a NoSuchElementException\nwhen there's no option value set.\n\nAdded ClientOptions.getOrNull() as an alternative.\n\n\nAdd ClientFactoryOptions.get(), getOrNull() and getOrElse(),\nwhich seems like we forgot to add before.\n\nResult:\n\nFixes #2362\n(Breaking) Our public API does not expose Optional anymore.\nClientOptions.getOrNull()\nClientFactoryOptions.get(), getOrNull() and getOrElse()", "createdAt": "2020-01-04T16:13:04Z", "url": "https://github.com/line/armeria/pull/2371", "merged": true, "mergeCommit": {"oid": "bd28eb2499c9149613098de17bc1479919dc3fd7"}, "closed": true, "closedAt": "2020-01-06T13:21:23Z", "author": {"login": "trustin"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb3FRQKAH2gAyMzU5MjI1NjA0Ojk5YmNmZjU3NDhjYTgxNjVhMGUyN2VmZDM0ZDA2N2JmMTc2YWJlYjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb3r1ulAH2gAyMzU5MjI1NjA0OjgxY2E2MGJiN2M5YmZjMjRkMWVmZmFkNmJjMWE5YTM0NTgyZDI1MzE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "99bcff5748ca8165a0e27efd34d067bf176abeb5", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/99bcff5748ca8165a0e27efd34d067bf176abeb5", "committedDate": "2020-01-04T16:09:08Z", "message": "Replace `Optional` with a nullable value\n\nMotivation:\n\nThe early API such as `Scheme.tryParse()` and `Server.activePort()`\nreturns an `Optional` while more recent APIs just return `null`.\n\nGiven that `Optional` tends to make user code verbose and JDK will not\nmake `Optional` a value type due to backward compatibility, I think it's\nbetter just using a nullable value in our API.\n\nModifications:\n\n- Replace all `Optional` usages with `@Nullable`.\n- Add `MediaType.charset(Charset defaultCharset)` because\n  `MediaType.charset().orElse(UTF_8)` seems pretty common.\n\nResult:\n\n- Fixes #2362\n- (Breaking) Our public API does not expose `Optional` anymore."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MzgwOTk2", "url": "https://github.com/line/armeria/pull/2371#pullrequestreview-338380996", "createdAt": "2020-01-05T05:01:19Z", "commit": {"oid": "99bcff5748ca8165a0e27efd34d067bf176abeb5"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwNTowMToxOVrOFaQBLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwNToxMjowOFrOFaQCfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2OTc0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the object of the specified {@code type} if found. {@code null} if not found.\n          \n          \n            \n                 * @return the object of the specified {@code type} if found, or {@code null} if not found.\n          \n      \n    \n    \n  \n\nWhile we're here", "url": "https://github.com/line/armeria/pull/2371#discussion_r363069742", "createdAt": "2020-01-05T05:01:19Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/Client.java", "diffHunk": "@@ -59,22 +57,22 @@\n      *                             .decorator(LoggingClient.newDecorator())\n      *                             .build();\n      *\n-     * LoggingClient unwrapped = client.as(LoggingClient.class).get();\n+     * LoggingClient unwrapped = client.as(LoggingClient.class);\n      *\n      * // You can also use Clients.unwrap(), which is useful especially for\n      * // Thrift and gRPC where the client object does not implement the 'as()' method.\n-     * LoggingClient unwrapped2 = Clients.unwrap(client, LoggingClient.class).get();\n+     * LoggingClient unwrapped2 = Clients.unwrap(client, LoggingClient.class);\n      * }</pre>\n      *\n      * @param type the type of the object to return\n-     * @return the object of the specified {@code type} if found. {@link Optional#empty()} if not found.\n+     * @return the object of the specified {@code type} if found. {@code null} if not found.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99bcff5748ca8165a0e27efd34d067bf176abeb5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2OTc0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the object of the specified {@code type} if found. {@code null} if not found.\n          \n          \n            \n                 * @return the object of the specified {@code type} if found, or {@code null} if not found.", "url": "https://github.com/line/armeria/pull/2371#discussion_r363069749", "createdAt": "2020-01-05T05:01:30Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactory.java", "diffHunk": "@@ -254,26 +254,27 @@ static void disableShutdownHook() {\n      *                             .decorator(LoggingClient.newDecorator())\n      *                             .build();\n      *\n-     * LoggingClient unwrapped = clientFactory.unwrap(client, LoggingClient.class).get();\n+     * LoggingClient unwrapped = clientFactory.unwrap(client, LoggingClient.class);\n      *\n      * // If the client implements Unwrappable, you can just use the 'as()' method.\n-     * LoggingClient unwrapped2 = client.as(LoggingClient.class).get();\n+     * LoggingClient unwrapped2 = client.as(LoggingClient.class);\n      * }</pre>\n      *\n      * @param client the client object\n      * @param type the type of the object to return\n-     * @return the object of the specified {@code type} if found. {@link Optional#empty()} if not found.\n+     * @return the object of the specified {@code type} if found. {@code null} if not found.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99bcff5748ca8165a0e27efd34d067bf176abeb5"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2OTc3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the object of the specified {@code type} if found. {@code null} if not found.\n          \n          \n            \n                 * @return the object of the specified {@code type} if found, or {@code null} if not found.", "url": "https://github.com/line/armeria/pull/2371#discussion_r363069777", "createdAt": "2020-01-05T05:01:55Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/client/Clients.java", "diffHunk": "@@ -587,26 +588,27 @@ private static ClientBuilderParams builderParams(Object client) {\n      *                             .decorator(LoggingClient.newDecorator())\n      *                             .build();\n      *\n-     * LoggingClient unwrapped = Clients.unwrap(client, LoggingClient.class).get();\n+     * LoggingClient unwrapped = Clients.unwrap(client, LoggingClient.class);\n      *\n      * // If the client implements Unwrappable, you can just use the 'as()' method.\n-     * LoggingClient unwrapped2 = client.as(LoggingClient.class).get();\n+     * LoggingClient unwrapped2 = client.as(LoggingClient.class);\n      * }</pre>\n      *\n      * @param type the type of the object to return\n-     * @return the object of the specified {@code type} if found. {@link Optional#empty()} if not found.\n+     * @return the object of the specified {@code type} if found. {@code null} if not found.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99bcff5748ca8165a0e27efd34d067bf176abeb5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2OTg0Mw==", "bodyText": "I think I saw this pattern in another PR and found it a bit weird, and now am reconsidering it again. Is it clearer to use throw newInvalidSchemeException(uri) so it's easy to see that this line is throwing an exception, without much change in verbosity (actually guess less characters / bytecode)?", "url": "https://github.com/line/armeria/pull/2371#discussion_r363069843", "createdAt": "2020-01-05T05:04:29Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/AbstractRequestContextBuilder.java", "diffHunk": "@@ -149,6 +139,27 @@ protected AbstractRequestContextBuilder(boolean server, RpcRequest rpcReq, URI u\n         query = pathAndQuery.query();\n     }\n \n+    private static SessionProtocol getSessionProtocol(URI uri) {\n+        final String schemeStr = uri.getScheme();\n+        if (schemeStr != null && schemeStr.indexOf('+') < 0) {\n+            final SessionProtocol parsed = SessionProtocol.find(schemeStr);\n+            if (parsed == null) {\n+                return reportInvalidScheme(uri);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99bcff5748ca8165a0e27efd34d067bf176abeb5"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2OTk2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the object of the specified {@code type} if found. {@code null} if not found.\n          \n          \n            \n                 * @return the object of the specified {@code type} if found, or {@code null} if not found.", "url": "https://github.com/line/armeria/pull/2371#discussion_r363069969", "createdAt": "2020-01-05T05:08:51Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/Service.java", "diffHunk": "@@ -69,12 +68,12 @@ default void serviceAdded(ServiceConfig cfg) throws Exception {}\n      * }</pre>\n      *\n      * @param type the type of the object to return\n-     * @return the object of the specified {@code type} if found. {@link Optional#empty()} if not found.\n+     * @return the object of the specified {@code type} if found. {@code null} if not found.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99bcff5748ca8165a0e27efd34d067bf176abeb5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2OTk3MQ==", "bodyText": "Feels a bit odd to have two Return / @return in a single javadoc.", "url": "https://github.com/line/armeria/pull/2371#discussion_r363069971", "createdAt": "2020-01-05T05:09:12Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/Server.java", "diffHunk": "@@ -171,11 +170,12 @@ public String defaultHostname() {\n      * Returns the primary {@link ServerPort} that this {@link Server} is listening to. This method is useful\n      * when a {@link Server} listens to only one {@link ServerPort}.\n      *\n-     * @return {@link Optional#empty()} if this {@link Server} did not start\n+     * @return {@code null} if this {@link Server} did not start", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99bcff5748ca8165a0e27efd34d067bf176abeb5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3MDAwOQ==", "bodyText": "Here especially, I'd expect just , or {@code null}... inlined with the first line.", "url": "https://github.com/line/armeria/pull/2371#discussion_r363070009", "createdAt": "2020-01-05T05:10:42Z", "author": {"login": "anuraaga"}, "path": "tomcat/src/main/java/com/linecorp/armeria/server/tomcat/TomcatServiceConfig.java", "diffHunk": "@@ -106,10 +106,11 @@ Path docBase() {\n     /**\n      * Returns the path to the root directory of a web application inside a JAR/WAR.\n      *\n-     * @return {@link Optional#empty()} if {@link #docBase()} is not a JAR/WAR file\n+     * @return {@code null} if {@link #docBase()} is not a JAR/WAR file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99bcff5748ca8165a0e27efd34d067bf176abeb5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3MDA3OQ==", "bodyText": "I think IntelliJ refactor might have un-static imported the assertions. Though is migrating to junit5 also the time to migrate to assertj? ;)", "url": "https://github.com/line/armeria/pull/2371#discussion_r363070079", "createdAt": "2020-01-05T05:12:08Z", "author": {"login": "anuraaga"}, "path": "thrift/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTServletIntegrationTest.java", "diffHunk": "@@ -191,20 +189,20 @@ public static void destroyServer() throws Exception {\n         });\n     }\n \n-    @Before\n-    public void setUp() {\n+    @BeforeEach\n+    void setUp() {\n         SessionProtocolNegotiationCache.clear();\n         sendConnectionClose.set(false);\n     }\n \n     @Test\n-    public void sendHelloViaHttp1() throws Exception {\n+    void sendHelloViaHttp1() throws Exception {\n         final AtomicReference<SessionProtocol> sessionProtocol = new AtomicReference<>();\n         final HelloService.Iface client = newSchemeCapturingClient(http1uri(HTTP), sessionProtocol);\n \n         for (int i = 0; i <= MAX_RETRIES; i++) {\n             try {\n-                assertEquals(\"Hello, old world!\", client.hello(\"old world\"));\n+                Assertions.assertEquals(\"Hello, old world!\", client.hello(\"old world\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99bcff5748ca8165a0e27efd34d067bf176abeb5"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aae37f1c105276e588b0d66e710959a14f9a3866", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/aae37f1c105276e588b0d66e710959a14f9a3866", "committedDate": "2020-01-06T07:17:57Z", "message": "Address the comments from @anuraaga"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4NDk2Nzc4", "url": "https://github.com/line/armeria/pull/2371#pullrequestreview-338496778", "createdAt": "2020-01-06T07:19:55Z", "commit": {"oid": "aae37f1c105276e588b0d66e710959a14f9a3866"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59ade1bb065bf03ed8025f7d1c9c031895585d7c", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/59ade1bb065bf03ed8025f7d1c9c031895585d7c", "committedDate": "2020-01-06T07:36:11Z", "message": "Use AssertJ's `Assertions` instead of Jupiter's"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1e7c60d04dfff396b7d34fd43e58a621089ae23", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/f1e7c60d04dfff396b7d34fd43e58a621089ae23", "committedDate": "2020-01-06T07:39:08Z", "message": "Indentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd7303466a06387625536e9861af07daa2cdf0ab", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/dd7303466a06387625536e9861af07daa2cdf0ab", "committedDate": "2020-01-06T07:54:24Z", "message": "throw -> return"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4NTc4NzM4", "url": "https://github.com/line/armeria/pull/2371#pullrequestreview-338578738", "createdAt": "2020-01-06T10:49:08Z", "commit": {"oid": "dd7303466a06387625536e9861af07daa2cdf0ab"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxMDo0OTowOVrOFaasEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxMDo1MToxMFrOFaauzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI0NDU2MQ==", "bodyText": "Let's make this consistent. or {@code null} otherwise.", "url": "https://github.com/line/armeria/pull/2371#discussion_r363244561", "createdAt": "2020-01-06T10:49:09Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/EventCounter.java", "diffHunk": "@@ -28,16 +28,16 @@\n     /**\n      * Counts success events.\n      *\n-     * @return An {@link Optional} containing the current {@link EventCount} if it has been updated,\n-     *         or else an empty {@link Optional}.\n+     * @return the current {@link EventCount} if it has been updated, or else {@code null}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd7303466a06387625536e9861af07daa2cdf0ab"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI0NDYxNg==", "bodyText": "ditto", "url": "https://github.com/line/armeria/pull/2371#discussion_r363244616", "createdAt": "2020-01-06T10:49:20Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/EventCounter.java", "diffHunk": "@@ -28,16 +28,16 @@\n     /**\n      * Counts success events.\n      *\n-     * @return An {@link Optional} containing the current {@link EventCount} if it has been updated,\n-     *         or else an empty {@link Optional}.\n+     * @return the current {@link EventCount} if it has been updated, or else {@code null}.\n      */\n-    Optional<EventCount> onSuccess();\n+    @Nullable\n+    EventCount onSuccess();\n \n     /**\n      * Counts failure events.\n      *\n-     * @return An {@link Optional} containing the current {@link EventCount} if it has been updated,\n-     *         or else an empty {@link Optional}.\n+     * @return the current {@link EventCount} if it has been updated, or else {@code null}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd7303466a06387625536e9861af07daa2cdf0ab"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI0NDY3OA==", "bodyText": "ditto", "url": "https://github.com/line/armeria/pull/2371#discussion_r363244678", "createdAt": "2020-01-06T10:49:32Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/retry/Backoff.java", "diffHunk": "@@ -146,12 +145,12 @@ static Backoff of(String specification) {\n      *\n      * @param type the type of the desired {@link Backoff}\n      * @return the {@link Backoff} which is an instance of {@code type} if this {@link Backoff}\n-     *         decorated such a {@link Backoff}. {@link Optional#empty()} otherwise.\n+     *         decorated such a {@link Backoff}. {@code null} otherwise.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd7303466a06387625536e9861af07daa2cdf0ab"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI0NTI2Mw==", "bodyText": "indentation?", "url": "https://github.com/line/armeria/pull/2371#discussion_r363245263", "createdAt": "2020-01-06T10:51:10Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/MediaType.java", "diffHunk": "@@ -648,31 +667,49 @@ public String subtype() {\n     }\n \n     /**\n-     * Returns an optional charset for the value of the charset parameter if it is specified.\n+     * Returns a {@link Charset} for the value of the charset parameter if it is specified.\n+     *\n+     * @return the {@link Charset}, or {@code null} if the charset parameter is not specified.\n      *\n      * @throws IllegalStateException if multiple charset values have been set for this media type\n      * @throws IllegalCharsetNameException if a charset value is present, but illegal\n      * @throws UnsupportedCharsetException if a charset value is present, but no support is available\n      *     in this instance of the Java virtual machine\n      */\n-    public Optional<Charset> charset() {\n+    @Nullable\n+    public Charset charset() {\n         // racy single-check idiom, this is safe because Optional is immutable.\n-        Optional<Charset> local = parsedCharset;\n+        Charset local = parsedCharset;\n         if (local == null) {\n             String value = null;\n-            local = Optional.empty();\n+            local = NO_CHARSET;\n             for (String currentValue : parameters.get(CHARSET_ATTRIBUTE)) {\n                 if (value == null) {\n                     value = currentValue;\n-                    local = Optional.of(Charset.forName(value));\n+                    local = Charset.forName(value);\n                 } else if (!value.equals(currentValue)) {\n                     throw new IllegalStateException(\n                             \"Multiple charset values defined: \" + value + \", \" + currentValue);\n                 }\n             }\n             parsedCharset = local;\n         }\n-        return local;\n+        return local != NO_CHARSET ? local : null;\n+    }\n+\n+    /**\n+     * Returns a {@link Charset} for the value of the charset parameter if it is specified.\n+     *\n+     * @return the {@link Charset}, or {@code defaultCharset} if the charset parameter is not specified.\n+     *\n+     * @throws IllegalStateException if multiple charset values have been set for this media type\n+     * @throws IllegalCharsetNameException if a charset value is present, but illegal\n+     * @throws UnsupportedCharsetException if a charset value is present, but no support is available\n+     *     in this instance of the Java virtual machine", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd7303466a06387625536e9861af07daa2cdf0ab"}, "originalPosition": 128}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4NjIxNTY1", "url": "https://github.com/line/armeria/pull/2371#pullrequestreview-338621565", "createdAt": "2020-01-06T12:41:16Z", "commit": {"oid": "dd7303466a06387625536e9861af07daa2cdf0ab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b02e3659ca0b7dc09fc2724ff6c25fcb7892449", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/9b02e3659ca0b7dc09fc2724ff6c25fcb7892449", "committedDate": "2020-01-06T13:01:34Z", "message": "Address the comments from @minwoox"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81ca60bb7c9bfc24d1effad6bc1a9a34582d2531", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/81ca60bb7c9bfc24d1effad6bc1a9a34582d2531", "committedDate": "2020-01-06T13:05:22Z", "message": "Merge branch 'master' into bye_bye_optional"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 797, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}