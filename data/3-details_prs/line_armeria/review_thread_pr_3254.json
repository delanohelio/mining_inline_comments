{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2ODM5Nzk4", "number": 3254, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwMToxMzowNVrOFKM9lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMzo0ODo0OFrOFNgosQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MjQyNDUyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/multipart/CancelledSubscription.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwMToxMzowNlrOIM36Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwMToxMzowNlrOIM36Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM2OTg5NQ==", "bodyText": "We have NoopSubscription. How about using it?", "url": "https://github.com/line/armeria/pull/3254#discussion_r550369895", "createdAt": "2020-12-31T01:13:06Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/multipart/CancelledSubscription.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.linecorp.armeria.common.multipart;\n+\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Helper enum with a singleton cancellation indicator and utility methods to perform\n+ * atomic actions on {@link Subscription}s.\n+ */\n+enum CancelledSubscription implements Subscription {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf3199f837fc58886ce146555707be66d1d41d5"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MjQzOTY4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/multipart/ConcatArrayStreamMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwMToyNzozMFrOIM4B6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwODo0MDoyM1rOINpReA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM3MTgxNg==", "bodyText": "Question: is it guaranteed that only one subscriber subscribes to this?", "url": "https://github.com/line/armeria/pull/3254#discussion_r550371816", "createdAt": "2020-12-31T01:27:30Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/multipart/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.linecorp.armeria.common.multipart;\n+\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    // Forked from https://github.com/oracle/helidon/blob/28cb3e8a34bda691c035d21f90b6278c6a42007c/common\n+    // /reactive/src/main/java/io/helidon/common/reactive/MultiConcatArray.java\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {\n+        this.sources = sources;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (source.isOpen()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (!source.isEmpty()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public long demand() {\n+        if (parent == null) {\n+            return 0;\n+        }\n+        return sources[parent.index].demand();\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return sources[sources.length - 1].whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor) {\n+        subscribe(subscriber, executor, EMPTY_OPTIONS);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor,\n+                          SubscriptionOption... options) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        requireNonNull(executor, \"executor\");\n+        requireNonNull(options, \"options\");\n+        parent = new ConcatArraySubscriber<>(subscriber, sources, executor, options);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf3199f837fc58886ce146555707be66d1d41d5"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE3ODYxNg==", "bodyText": "It is not. Let me add a flag for that.", "url": "https://github.com/line/armeria/pull/3254#discussion_r551178616", "createdAt": "2021-01-04T08:40:23Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/multipart/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.linecorp.armeria.common.multipart;\n+\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    // Forked from https://github.com/oracle/helidon/blob/28cb3e8a34bda691c035d21f90b6278c6a42007c/common\n+    // /reactive/src/main/java/io/helidon/common/reactive/MultiConcatArray.java\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {\n+        this.sources = sources;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (source.isOpen()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (!source.isEmpty()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public long demand() {\n+        if (parent == null) {\n+            return 0;\n+        }\n+        return sources[parent.index].demand();\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return sources[sources.length - 1].whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor) {\n+        subscribe(subscriber, executor, EMPTY_OPTIONS);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor,\n+                          SubscriptionOption... options) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        requireNonNull(executor, \"executor\");\n+        requireNonNull(options, \"options\");\n+        parent = new ConcatArraySubscriber<>(subscriber, sources, executor, options);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM3MTgxNg=="}, "originalCommit": {"oid": "7bf3199f837fc58886ce146555707be66d1d41d5"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MjQ0Mjk2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/multipart/ConcatArrayStreamMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwMTozMToyNVrOIM4DkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwMTozMToyNVrOIM4DkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM3MjI0MA==", "bodyText": "shouldn't we abort other unsubscribed stream messages?", "url": "https://github.com/line/armeria/pull/3254#discussion_r550372240", "createdAt": "2020-12-31T01:31:25Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/multipart/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.linecorp.armeria.common.multipart;\n+\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    // Forked from https://github.com/oracle/helidon/blob/28cb3e8a34bda691c035d21f90b6278c6a42007c/common\n+    // /reactive/src/main/java/io/helidon/common/reactive/MultiConcatArray.java\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {\n+        this.sources = sources;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (source.isOpen()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (!source.isEmpty()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public long demand() {\n+        if (parent == null) {\n+            return 0;\n+        }\n+        return sources[parent.index].demand();\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return sources[sources.length - 1].whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor) {\n+        subscribe(subscriber, executor, EMPTY_OPTIONS);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor,\n+                          SubscriptionOption... options) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        requireNonNull(executor, \"executor\");\n+        requireNonNull(options, \"options\");\n+        parent = new ConcatArraySubscriber<>(subscriber, sources, executor, options);\n+        subscriber.onSubscribe(parent);\n+        parent.nextSource();\n+    }\n+\n+    @Override\n+    public void abort() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            source.abort();\n+        }\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        requireNonNull(cause, \"cause\");\n+        for (StreamMessage<? extends T> source : sources) {\n+            source.abort(cause);\n+        }\n+    }\n+\n+    private static final class ConcatArraySubscriber<T> extends SubscriptionArbiter implements Subscriber<T> {\n+\n+        private static final long serialVersionUID = -9184116713095894096L;\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicIntegerFieldUpdater<ConcatArraySubscriber> cancelledUpdater =\n+                AtomicIntegerFieldUpdater.newUpdater(ConcatArraySubscriber.class, \"cancelled\");\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicIntegerFieldUpdater<ConcatArraySubscriber> wipUpdater =\n+                AtomicIntegerFieldUpdater.newUpdater(ConcatArraySubscriber.class, \"wip\");\n+\n+        private Subscriber<? super T> downstream;\n+        private final StreamMessage<? extends T>[] sources;\n+        private final EventExecutor executor;\n+        private final SubscriptionOption[] options;\n+\n+        private long produced;\n+\n+        private volatile int index;\n+        private volatile int wip;\n+        private volatile int cancelled;\n+\n+        ConcatArraySubscriber(Subscriber<? super T> downstream, StreamMessage<? extends T>[] sources,\n+                              EventExecutor executor, SubscriptionOption... options) {\n+            this.downstream = downstream;\n+            this.sources = sources;\n+            this.executor = executor;\n+            this.options = options;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            if (cancelled != 0) {\n+                subscription.cancel();\n+            } else {\n+                setSubscription(subscription);\n+            }\n+        }\n+\n+        @Override\n+        public void onNext(T item) {\n+            requireNonNull(item, \"item\");\n+            produced++;\n+            downstream.onNext(item);\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable) {\n+            downstream.onError(throwable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf3199f837fc58886ce146555707be66d1d41d5"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MjQ0OTY2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/multipart/ConcatArrayStreamMessage.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwMTozODowNVrOIM4G_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjoxNzoxOVrOINvp_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM3MzExNg==", "bodyText": "Is this for the case where nextSource() is called twice concurrently?\nThen, is it okay to call sources[0].subscribe(...) and sources[1].subscribe(...) together?\nAren't the elements from onNext mixed?", "url": "https://github.com/line/armeria/pull/3254#discussion_r550373116", "createdAt": "2020-12-31T01:38:05Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/multipart/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.linecorp.armeria.common.multipart;\n+\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    // Forked from https://github.com/oracle/helidon/blob/28cb3e8a34bda691c035d21f90b6278c6a42007c/common\n+    // /reactive/src/main/java/io/helidon/common/reactive/MultiConcatArray.java\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {\n+        this.sources = sources;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (source.isOpen()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (!source.isEmpty()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public long demand() {\n+        if (parent == null) {\n+            return 0;\n+        }\n+        return sources[parent.index].demand();\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return sources[sources.length - 1].whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor) {\n+        subscribe(subscriber, executor, EMPTY_OPTIONS);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor,\n+                          SubscriptionOption... options) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        requireNonNull(executor, \"executor\");\n+        requireNonNull(options, \"options\");\n+        parent = new ConcatArraySubscriber<>(subscriber, sources, executor, options);\n+        subscriber.onSubscribe(parent);\n+        parent.nextSource();\n+    }\n+\n+    @Override\n+    public void abort() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            source.abort();\n+        }\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        requireNonNull(cause, \"cause\");\n+        for (StreamMessage<? extends T> source : sources) {\n+            source.abort(cause);\n+        }\n+    }\n+\n+    private static final class ConcatArraySubscriber<T> extends SubscriptionArbiter implements Subscriber<T> {\n+\n+        private static final long serialVersionUID = -9184116713095894096L;\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicIntegerFieldUpdater<ConcatArraySubscriber> cancelledUpdater =\n+                AtomicIntegerFieldUpdater.newUpdater(ConcatArraySubscriber.class, \"cancelled\");\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicIntegerFieldUpdater<ConcatArraySubscriber> wipUpdater =\n+                AtomicIntegerFieldUpdater.newUpdater(ConcatArraySubscriber.class, \"wip\");\n+\n+        private Subscriber<? super T> downstream;\n+        private final StreamMessage<? extends T>[] sources;\n+        private final EventExecutor executor;\n+        private final SubscriptionOption[] options;\n+\n+        private long produced;\n+\n+        private volatile int index;\n+        private volatile int wip;\n+        private volatile int cancelled;\n+\n+        ConcatArraySubscriber(Subscriber<? super T> downstream, StreamMessage<? extends T>[] sources,\n+                              EventExecutor executor, SubscriptionOption... options) {\n+            this.downstream = downstream;\n+            this.sources = sources;\n+            this.executor = executor;\n+            this.options = options;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            if (cancelled != 0) {\n+                subscription.cancel();\n+            } else {\n+                setSubscription(subscription);\n+            }\n+        }\n+\n+        @Override\n+        public void onNext(T item) {\n+            requireNonNull(item, \"item\");\n+            produced++;\n+            downstream.onNext(item);\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable) {\n+            downstream.onError(throwable);\n+        }\n+\n+        @Override\n+        public void onComplete() {\n+            final long produced = this.produced;\n+            if (produced != 0L) {\n+                this.produced = 0L;\n+                produced(produced);\n+            }\n+            nextSource();\n+        }\n+\n+        void nextSource() {\n+            if (wipUpdater.getAndIncrement(this) == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf3199f837fc58886ce146555707be66d1d41d5"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE4Mjc5OQ==", "bodyText": "Is this for the case where nextSource() is called twice concurrently?\n\nI don't think so. The nextSource() should be called only when a source is completed.", "url": "https://github.com/line/armeria/pull/3254#discussion_r551182799", "createdAt": "2021-01-04T08:50:07Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/multipart/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.linecorp.armeria.common.multipart;\n+\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    // Forked from https://github.com/oracle/helidon/blob/28cb3e8a34bda691c035d21f90b6278c6a42007c/common\n+    // /reactive/src/main/java/io/helidon/common/reactive/MultiConcatArray.java\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {\n+        this.sources = sources;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (source.isOpen()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (!source.isEmpty()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public long demand() {\n+        if (parent == null) {\n+            return 0;\n+        }\n+        return sources[parent.index].demand();\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return sources[sources.length - 1].whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor) {\n+        subscribe(subscriber, executor, EMPTY_OPTIONS);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor,\n+                          SubscriptionOption... options) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        requireNonNull(executor, \"executor\");\n+        requireNonNull(options, \"options\");\n+        parent = new ConcatArraySubscriber<>(subscriber, sources, executor, options);\n+        subscriber.onSubscribe(parent);\n+        parent.nextSource();\n+    }\n+\n+    @Override\n+    public void abort() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            source.abort();\n+        }\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        requireNonNull(cause, \"cause\");\n+        for (StreamMessage<? extends T> source : sources) {\n+            source.abort(cause);\n+        }\n+    }\n+\n+    private static final class ConcatArraySubscriber<T> extends SubscriptionArbiter implements Subscriber<T> {\n+\n+        private static final long serialVersionUID = -9184116713095894096L;\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicIntegerFieldUpdater<ConcatArraySubscriber> cancelledUpdater =\n+                AtomicIntegerFieldUpdater.newUpdater(ConcatArraySubscriber.class, \"cancelled\");\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicIntegerFieldUpdater<ConcatArraySubscriber> wipUpdater =\n+                AtomicIntegerFieldUpdater.newUpdater(ConcatArraySubscriber.class, \"wip\");\n+\n+        private Subscriber<? super T> downstream;\n+        private final StreamMessage<? extends T>[] sources;\n+        private final EventExecutor executor;\n+        private final SubscriptionOption[] options;\n+\n+        private long produced;\n+\n+        private volatile int index;\n+        private volatile int wip;\n+        private volatile int cancelled;\n+\n+        ConcatArraySubscriber(Subscriber<? super T> downstream, StreamMessage<? extends T>[] sources,\n+                              EventExecutor executor, SubscriptionOption... options) {\n+            this.downstream = downstream;\n+            this.sources = sources;\n+            this.executor = executor;\n+            this.options = options;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            if (cancelled != 0) {\n+                subscription.cancel();\n+            } else {\n+                setSubscription(subscription);\n+            }\n+        }\n+\n+        @Override\n+        public void onNext(T item) {\n+            requireNonNull(item, \"item\");\n+            produced++;\n+            downstream.onNext(item);\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable) {\n+            downstream.onError(throwable);\n+        }\n+\n+        @Override\n+        public void onComplete() {\n+            final long produced = this.produced;\n+            if (produced != 0L) {\n+                this.produced = 0L;\n+                produced(produced);\n+            }\n+            nextSource();\n+        }\n+\n+        void nextSource() {\n+            if (wipUpdater.getAndIncrement(this) == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM3MzExNg=="}, "originalCommit": {"oid": "7bf3199f837fc58886ce146555707be66d1d41d5"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyNjYzMQ==", "bodyText": "If so, I think we don't need wipUpdater. Do we?", "url": "https://github.com/line/armeria/pull/3254#discussion_r551226631", "createdAt": "2021-01-04T10:17:50Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/multipart/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.linecorp.armeria.common.multipart;\n+\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    // Forked from https://github.com/oracle/helidon/blob/28cb3e8a34bda691c035d21f90b6278c6a42007c/common\n+    // /reactive/src/main/java/io/helidon/common/reactive/MultiConcatArray.java\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {\n+        this.sources = sources;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (source.isOpen()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (!source.isEmpty()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public long demand() {\n+        if (parent == null) {\n+            return 0;\n+        }\n+        return sources[parent.index].demand();\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return sources[sources.length - 1].whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor) {\n+        subscribe(subscriber, executor, EMPTY_OPTIONS);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor,\n+                          SubscriptionOption... options) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        requireNonNull(executor, \"executor\");\n+        requireNonNull(options, \"options\");\n+        parent = new ConcatArraySubscriber<>(subscriber, sources, executor, options);\n+        subscriber.onSubscribe(parent);\n+        parent.nextSource();\n+    }\n+\n+    @Override\n+    public void abort() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            source.abort();\n+        }\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        requireNonNull(cause, \"cause\");\n+        for (StreamMessage<? extends T> source : sources) {\n+            source.abort(cause);\n+        }\n+    }\n+\n+    private static final class ConcatArraySubscriber<T> extends SubscriptionArbiter implements Subscriber<T> {\n+\n+        private static final long serialVersionUID = -9184116713095894096L;\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicIntegerFieldUpdater<ConcatArraySubscriber> cancelledUpdater =\n+                AtomicIntegerFieldUpdater.newUpdater(ConcatArraySubscriber.class, \"cancelled\");\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicIntegerFieldUpdater<ConcatArraySubscriber> wipUpdater =\n+                AtomicIntegerFieldUpdater.newUpdater(ConcatArraySubscriber.class, \"wip\");\n+\n+        private Subscriber<? super T> downstream;\n+        private final StreamMessage<? extends T>[] sources;\n+        private final EventExecutor executor;\n+        private final SubscriptionOption[] options;\n+\n+        private long produced;\n+\n+        private volatile int index;\n+        private volatile int wip;\n+        private volatile int cancelled;\n+\n+        ConcatArraySubscriber(Subscriber<? super T> downstream, StreamMessage<? extends T>[] sources,\n+                              EventExecutor executor, SubscriptionOption... options) {\n+            this.downstream = downstream;\n+            this.sources = sources;\n+            this.executor = executor;\n+            this.options = options;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            if (cancelled != 0) {\n+                subscription.cancel();\n+            } else {\n+                setSubscription(subscription);\n+            }\n+        }\n+\n+        @Override\n+        public void onNext(T item) {\n+            requireNonNull(item, \"item\");\n+            produced++;\n+            downstream.onNext(item);\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable) {\n+            downstream.onError(throwable);\n+        }\n+\n+        @Override\n+        public void onComplete() {\n+            final long produced = this.produced;\n+            if (produced != 0L) {\n+                this.produced = 0L;\n+                produced(produced);\n+            }\n+            nextSource();\n+        }\n+\n+        void nextSource() {\n+            if (wipUpdater.getAndIncrement(this) == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM3MzExNg=="}, "originalCommit": {"oid": "7bf3199f837fc58886ce146555707be66d1d41d5"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MzE5Ng==", "bodyText": "wipUpdater could be removed. However, we still need wip counter because of an empty publisher that will call onComplete() while subscribing.", "url": "https://github.com/line/armeria/pull/3254#discussion_r551283196", "createdAt": "2021-01-04T12:17:19Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/multipart/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.linecorp.armeria.common.multipart;\n+\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    // Forked from https://github.com/oracle/helidon/blob/28cb3e8a34bda691c035d21f90b6278c6a42007c/common\n+    // /reactive/src/main/java/io/helidon/common/reactive/MultiConcatArray.java\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {\n+        this.sources = sources;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (source.isOpen()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (!source.isEmpty()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public long demand() {\n+        if (parent == null) {\n+            return 0;\n+        }\n+        return sources[parent.index].demand();\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return sources[sources.length - 1].whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor) {\n+        subscribe(subscriber, executor, EMPTY_OPTIONS);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor,\n+                          SubscriptionOption... options) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        requireNonNull(executor, \"executor\");\n+        requireNonNull(options, \"options\");\n+        parent = new ConcatArraySubscriber<>(subscriber, sources, executor, options);\n+        subscriber.onSubscribe(parent);\n+        parent.nextSource();\n+    }\n+\n+    @Override\n+    public void abort() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            source.abort();\n+        }\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        requireNonNull(cause, \"cause\");\n+        for (StreamMessage<? extends T> source : sources) {\n+            source.abort(cause);\n+        }\n+    }\n+\n+    private static final class ConcatArraySubscriber<T> extends SubscriptionArbiter implements Subscriber<T> {\n+\n+        private static final long serialVersionUID = -9184116713095894096L;\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicIntegerFieldUpdater<ConcatArraySubscriber> cancelledUpdater =\n+                AtomicIntegerFieldUpdater.newUpdater(ConcatArraySubscriber.class, \"cancelled\");\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicIntegerFieldUpdater<ConcatArraySubscriber> wipUpdater =\n+                AtomicIntegerFieldUpdater.newUpdater(ConcatArraySubscriber.class, \"wip\");\n+\n+        private Subscriber<? super T> downstream;\n+        private final StreamMessage<? extends T>[] sources;\n+        private final EventExecutor executor;\n+        private final SubscriptionOption[] options;\n+\n+        private long produced;\n+\n+        private volatile int index;\n+        private volatile int wip;\n+        private volatile int cancelled;\n+\n+        ConcatArraySubscriber(Subscriber<? super T> downstream, StreamMessage<? extends T>[] sources,\n+                              EventExecutor executor, SubscriptionOption... options) {\n+            this.downstream = downstream;\n+            this.sources = sources;\n+            this.executor = executor;\n+            this.options = options;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            if (cancelled != 0) {\n+                subscription.cancel();\n+            } else {\n+                setSubscription(subscription);\n+            }\n+        }\n+\n+        @Override\n+        public void onNext(T item) {\n+            requireNonNull(item, \"item\");\n+            produced++;\n+            downstream.onNext(item);\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable) {\n+            downstream.onError(throwable);\n+        }\n+\n+        @Override\n+        public void onComplete() {\n+            final long produced = this.produced;\n+            if (produced != 0L) {\n+                this.produced = 0L;\n+                produced(produced);\n+            }\n+            nextSource();\n+        }\n+\n+        void nextSource() {\n+            if (wipUpdater.getAndIncrement(this) == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM3MzExNg=="}, "originalCommit": {"oid": "7bf3199f837fc58886ce146555707be66d1d41d5"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MjQ1NjMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/multipart/ConcatArrayStreamMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwMTo0NToyNVrOIM4KUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTowMzowNVrOINp33A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM3Mzk2OQ==", "bodyText": "What happens to the unsubscribed stream messages?", "url": "https://github.com/line/armeria/pull/3254#discussion_r550373969", "createdAt": "2020-12-31T01:45:25Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/multipart/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.linecorp.armeria.common.multipart;\n+\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    // Forked from https://github.com/oracle/helidon/blob/28cb3e8a34bda691c035d21f90b6278c6a42007c/common\n+    // /reactive/src/main/java/io/helidon/common/reactive/MultiConcatArray.java\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {\n+        this.sources = sources;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (source.isOpen()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (!source.isEmpty()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public long demand() {\n+        if (parent == null) {\n+            return 0;\n+        }\n+        return sources[parent.index].demand();\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return sources[sources.length - 1].whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor) {\n+        subscribe(subscriber, executor, EMPTY_OPTIONS);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor,\n+                          SubscriptionOption... options) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        requireNonNull(executor, \"executor\");\n+        requireNonNull(options, \"options\");\n+        parent = new ConcatArraySubscriber<>(subscriber, sources, executor, options);\n+        subscriber.onSubscribe(parent);\n+        parent.nextSource();\n+    }\n+\n+    @Override\n+    public void abort() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            source.abort();\n+        }\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        requireNonNull(cause, \"cause\");\n+        for (StreamMessage<? extends T> source : sources) {\n+            source.abort(cause);\n+        }\n+    }\n+\n+    private static final class ConcatArraySubscriber<T> extends SubscriptionArbiter implements Subscriber<T> {\n+\n+        private static final long serialVersionUID = -9184116713095894096L;\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicIntegerFieldUpdater<ConcatArraySubscriber> cancelledUpdater =\n+                AtomicIntegerFieldUpdater.newUpdater(ConcatArraySubscriber.class, \"cancelled\");\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicIntegerFieldUpdater<ConcatArraySubscriber> wipUpdater =\n+                AtomicIntegerFieldUpdater.newUpdater(ConcatArraySubscriber.class, \"wip\");\n+\n+        private Subscriber<? super T> downstream;\n+        private final StreamMessage<? extends T>[] sources;\n+        private final EventExecutor executor;\n+        private final SubscriptionOption[] options;\n+\n+        private long produced;\n+\n+        private volatile int index;\n+        private volatile int wip;\n+        private volatile int cancelled;\n+\n+        ConcatArraySubscriber(Subscriber<? super T> downstream, StreamMessage<? extends T>[] sources,\n+                              EventExecutor executor, SubscriptionOption... options) {\n+            this.downstream = downstream;\n+            this.sources = sources;\n+            this.executor = executor;\n+            this.options = options;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            if (cancelled != 0) {\n+                subscription.cancel();\n+            } else {\n+                setSubscription(subscription);\n+            }\n+        }\n+\n+        @Override\n+        public void onNext(T item) {\n+            requireNonNull(item, \"item\");\n+            produced++;\n+            downstream.onNext(item);\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable) {\n+            downstream.onError(throwable);\n+        }\n+\n+        @Override\n+        public void onComplete() {\n+            final long produced = this.produced;\n+            if (produced != 0L) {\n+                this.produced = 0L;\n+                produced(produced);\n+            }\n+            nextSource();\n+        }\n+\n+        void nextSource() {\n+            if (wipUpdater.getAndIncrement(this) == 0) {\n+                do {\n+                    final int index = this.index;\n+                    if (index == sources.length) {\n+                        downstream.onComplete();\n+                    } else {\n+                        this.index++;\n+                        sources[index].subscribe(this, executor, options);\n+                    }\n+                } while (wipUpdater.decrementAndGet(this) != 0);\n+            }\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (n <= 0) {\n+                downstream.onError(new IllegalArgumentException(\n+                        \"Rule \u00a73.9 violated: non-positive requests are forbidden\"));\n+            } else {\n+                super.request(n);\n+            }\n+        }\n+\n+        @Override\n+        public void cancel() {\n+            if (cancelledUpdater.compareAndSet(this, 0, 1)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf3199f837fc58886ce146555707be66d1d41d5"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE4ODQ0NA==", "bodyText": "Did you mean that downstream is null?\nIgnore this comment. I understand it now. \ud83d\ude05", "url": "https://github.com/line/armeria/pull/3254#discussion_r551188444", "createdAt": "2021-01-04T09:03:05Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/multipart/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.linecorp.armeria.common.multipart;\n+\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    // Forked from https://github.com/oracle/helidon/blob/28cb3e8a34bda691c035d21f90b6278c6a42007c/common\n+    // /reactive/src/main/java/io/helidon/common/reactive/MultiConcatArray.java\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {\n+        this.sources = sources;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (source.isOpen()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (!source.isEmpty()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public long demand() {\n+        if (parent == null) {\n+            return 0;\n+        }\n+        return sources[parent.index].demand();\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return sources[sources.length - 1].whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor) {\n+        subscribe(subscriber, executor, EMPTY_OPTIONS);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor,\n+                          SubscriptionOption... options) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        requireNonNull(executor, \"executor\");\n+        requireNonNull(options, \"options\");\n+        parent = new ConcatArraySubscriber<>(subscriber, sources, executor, options);\n+        subscriber.onSubscribe(parent);\n+        parent.nextSource();\n+    }\n+\n+    @Override\n+    public void abort() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            source.abort();\n+        }\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        requireNonNull(cause, \"cause\");\n+        for (StreamMessage<? extends T> source : sources) {\n+            source.abort(cause);\n+        }\n+    }\n+\n+    private static final class ConcatArraySubscriber<T> extends SubscriptionArbiter implements Subscriber<T> {\n+\n+        private static final long serialVersionUID = -9184116713095894096L;\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicIntegerFieldUpdater<ConcatArraySubscriber> cancelledUpdater =\n+                AtomicIntegerFieldUpdater.newUpdater(ConcatArraySubscriber.class, \"cancelled\");\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicIntegerFieldUpdater<ConcatArraySubscriber> wipUpdater =\n+                AtomicIntegerFieldUpdater.newUpdater(ConcatArraySubscriber.class, \"wip\");\n+\n+        private Subscriber<? super T> downstream;\n+        private final StreamMessage<? extends T>[] sources;\n+        private final EventExecutor executor;\n+        private final SubscriptionOption[] options;\n+\n+        private long produced;\n+\n+        private volatile int index;\n+        private volatile int wip;\n+        private volatile int cancelled;\n+\n+        ConcatArraySubscriber(Subscriber<? super T> downstream, StreamMessage<? extends T>[] sources,\n+                              EventExecutor executor, SubscriptionOption... options) {\n+            this.downstream = downstream;\n+            this.sources = sources;\n+            this.executor = executor;\n+            this.options = options;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            if (cancelled != 0) {\n+                subscription.cancel();\n+            } else {\n+                setSubscription(subscription);\n+            }\n+        }\n+\n+        @Override\n+        public void onNext(T item) {\n+            requireNonNull(item, \"item\");\n+            produced++;\n+            downstream.onNext(item);\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable) {\n+            downstream.onError(throwable);\n+        }\n+\n+        @Override\n+        public void onComplete() {\n+            final long produced = this.produced;\n+            if (produced != 0L) {\n+                this.produced = 0L;\n+                produced(produced);\n+            }\n+            nextSource();\n+        }\n+\n+        void nextSource() {\n+            if (wipUpdater.getAndIncrement(this) == 0) {\n+                do {\n+                    final int index = this.index;\n+                    if (index == sources.length) {\n+                        downstream.onComplete();\n+                    } else {\n+                        this.index++;\n+                        sources[index].subscribe(this, executor, options);\n+                    }\n+                } while (wipUpdater.decrementAndGet(this) != 0);\n+            }\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (n <= 0) {\n+                downstream.onError(new IllegalArgumentException(\n+                        \"Rule \u00a73.9 violated: non-positive requests are forbidden\"));\n+            } else {\n+                super.request(n);\n+            }\n+        }\n+\n+        @Override\n+        public void cancel() {\n+            if (cancelledUpdater.compareAndSet(this, 0, 1)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM3Mzk2OQ=="}, "originalCommit": {"oid": "7bf3199f837fc58886ce146555707be66d1d41d5"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MjQ3NDAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/multipart/StreamMessages.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwMjowMzoxN1rOIM4TEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwMjowMzoxN1rOIM4TEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM3NjIxMA==", "bodyText": "Can remove this because we have SafeVarargs?", "url": "https://github.com/line/armeria/pull/3254#discussion_r550376210", "createdAt": "2020-12-31T02:03:17Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/multipart/StreamMessages.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.multipart;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import org.reactivestreams.Publisher;\n+\n+import com.linecorp.armeria.common.stream.PublisherBasedStreamMessage;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+\n+final class StreamMessages {\n+\n+    /**\n+     * Concatenates an array of source {@link StreamMessage}s by relaying items\n+     * in order, non-overlappingly, one after the other finishes.\n+     */\n+    @SafeVarargs\n+    @SuppressWarnings(\"varargs\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf3199f837fc58886ce146555707be66d1d41d5"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjM5NTE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNTo1NTowMlrOIOK9_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNTo1NTowMlrOIOK9_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTczMDY4Nw==", "bodyText": "Thanks! \ud83d\ude47", "url": "https://github.com/line/armeria/pull/3254#discussion_r551730687", "createdAt": "2021-01-05T05:55:02Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java", "diffHunk": "@@ -203,7 +203,10 @@ public void invoke(PooledChannel pooledChannel, ClientRequestContext ctx,\n         final HttpRequestSubscriber reqSubscriber =\n                 new HttpRequestSubscriber(channel, requestEncoder, responseDecoder,\n                                           req, res, ctx, writeTimeoutMillis);\n-        req.subscribe(reqSubscriber, channel.eventLoop(), SubscriptionOption.WITH_POOLED_OBJECTS);\n+        // StreamMessage of an request body uses RequestContext to get the default SubscriberExecutor.\n+        try (SafeCloseable ignored = ctx.push()) {\n+            req.subscribe(reqSubscriber, channel.eventLoop(), SubscriptionOption.WITH_POOLED_OBJECTS);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2aaebdb43fd854e6e66ccdd2d08c5163d2ce44f6"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjQwMjY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/multipart/ConcatArrayStreamMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNTo1ODoyMlrOIOLB9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNTozMDo0NFrOIObu3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTczMTcwMQ==", "bodyText": "Should we accept an empty sources?", "url": "https://github.com/line/armeria/pull/3254#discussion_r551731701", "createdAt": "2021-01-05T05:58:22Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/multipart/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.linecorp.armeria.common.multipart;\n+\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    // Forked from https://github.com/oracle/helidon/blob/28cb3e8a34bda691c035d21f90b6278c6a42007c/common\n+    // /reactive/src/main/java/io/helidon/common/reactive/MultiConcatArray.java\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<ConcatArrayStreamMessage> subscribedUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(ConcatArrayStreamMessage.class, \"subscribed\");\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    private volatile int subscribed;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {\n+        this.sources = sources;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2aaebdb43fd854e6e66ccdd2d08c5163d2ce44f6"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAwNTM0Mw==", "bodyText": "Nope. It is checked by StreamMessages.concat(...)", "url": "https://github.com/line/armeria/pull/3254#discussion_r552005343", "createdAt": "2021-01-05T15:30:44Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/multipart/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.linecorp.armeria.common.multipart;\n+\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    // Forked from https://github.com/oracle/helidon/blob/28cb3e8a34bda691c035d21f90b6278c6a42007c/common\n+    // /reactive/src/main/java/io/helidon/common/reactive/MultiConcatArray.java\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<ConcatArrayStreamMessage> subscribedUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(ConcatArrayStreamMessage.class, \"subscribed\");\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    private volatile int subscribed;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {\n+        this.sources = sources;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTczMTcwMQ=="}, "originalCommit": {"oid": "2aaebdb43fd854e6e66ccdd2d08c5163d2ce44f6"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjQwMzc1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/multipart/ConcatArrayStreamMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNTo1ODo1NFrOIOLCjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNTo1ODo1NFrOIOLCjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTczMTg1Mg==", "bodyText": "Should we just delegate to abort(Throwable) with AbortedStreamException.get(), so that AbortedStreamException.get() is not invoked multiple times?", "url": "https://github.com/line/armeria/pull/3254#discussion_r551731852", "createdAt": "2021-01-05T05:58:54Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/multipart/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.linecorp.armeria.common.multipart;\n+\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    // Forked from https://github.com/oracle/helidon/blob/28cb3e8a34bda691c035d21f90b6278c6a42007c/common\n+    // /reactive/src/main/java/io/helidon/common/reactive/MultiConcatArray.java\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<ConcatArrayStreamMessage> subscribedUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(ConcatArrayStreamMessage.class, \"subscribed\");\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    private volatile int subscribed;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {\n+        this.sources = sources;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (source.isOpen()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (!source.isEmpty()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public long demand() {\n+        if (parent == null) {\n+            return 0;\n+        }\n+        return sources[parent.index].demand();\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return sources[sources.length - 1].whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor) {\n+        subscribe(subscriber, executor, EMPTY_OPTIONS);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor,\n+                          SubscriptionOption... options) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        requireNonNull(executor, \"executor\");\n+        requireNonNull(options, \"options\");\n+\n+        if (subscribedUpdater.compareAndSet(this, 0, 1)) {\n+            parent = new ConcatArraySubscriber<>(subscriber, sources, executor, options);\n+            subscriber.onSubscribe(parent);\n+            if (executor.inEventLoop()) {\n+                parent.nextSource();\n+            } else {\n+                executor.execute(() -> parent.nextSource());\n+            }\n+        } else {\n+            subscriber.onSubscribe(NoopSubscription.get());\n+            subscriber.onError(new IllegalStateException(\"subscribed by other subscriber already\"));\n+        }\n+    }\n+\n+    @Override\n+    public void abort() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            source.abort();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2aaebdb43fd854e6e66ccdd2d08c5163d2ce44f6"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjQxOTQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/multipart/StreamMessages.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNjowNzowOVrOIOLLMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNjowNzowOVrOIOLLMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTczNDA2NQ==", "bodyText": "Should we move the methods in this class to StreamMessage? Like we have HttpResponse.of(Publisher<? extends HttpObject>), we could have:\n\nStreamMessage.of(Publisher<...>)\nStreamMessage.of(Publisher<...>...)\nStreamMessage.of(StreamMessage<...>)\nStreamMessage.of(StreamMessage<...>...)\n\nAnd maybe in a separate PR:\n\nHttpResponse.of(StreamMessage<? extends HttpObject>)\nHttpResponse.of(StreamMessage<? extends HttpObject>...)", "url": "https://github.com/line/armeria/pull/3254#discussion_r551734065", "createdAt": "2021-01-05T06:07:09Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/multipart/StreamMessages.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.multipart;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import org.reactivestreams.Publisher;\n+\n+import com.linecorp.armeria.common.stream.PublisherBasedStreamMessage;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+\n+final class StreamMessages {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2aaebdb43fd854e6e66ccdd2d08c5163d2ce44f6"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjQyOTk3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/multipart/SubscriptionArbiter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNjoxMzowNVrOIOLRHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNjoxMzowNVrOIOLRHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTczNTU4MQ==", "bodyText": "We could make all Atomic* fields volatile with Atomic*FieldUpdater.\nSimilarly, we don't need to extend AtomicInteger.", "url": "https://github.com/line/armeria/pull/3254#discussion_r551735581", "createdAt": "2021-01-05T06:13:05Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/multipart/SubscriptionArbiter.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.linecorp.armeria.common.multipart;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscription;\n+\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+/**\n+ * Allows changing the subscription, tracking requests and item\n+ * production in concurrent source-switching scenarios.\n+ * <p>\n+ *     {@code this} is the work-in-progress indicator for the\n+ *     subscriber-request-produced trampolining.\n+ * </p>\n+ * <p>\n+ *     Please override {@link #request(long)} and perform the n &lt;= 0L\n+ *     check in the context of the implementor because the TCK requires\n+ *     an onError signal and the arbiter has no contextual knowledge how\n+ *     and when to signal it.\n+ * </p>\n+ */\n+class SubscriptionArbiter extends AtomicInteger implements Subscription {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2aaebdb43fd854e6e66ccdd2d08c5163d2ce44f6"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzE0NDk1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOToyNDoxN1rOIO3bMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOToyNDoxN1rOIO3bMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ1OTA1Nw==", "bodyText": "Should we return an empty stream instead?", "url": "https://github.com/line/armeria/pull/3254#discussion_r552459057", "createdAt": "2021-01-06T09:24:17Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java", "diffHunk": "@@ -123,6 +127,50 @@\n         }\n     }\n \n+    /**\n+     * Creates a new {@link StreamMessage} from the specified {@link Publisher}.\n+     */\n+    static <T> StreamMessage<T> of(Publisher<? extends T> publisher) {\n+        requireNonNull(publisher, \"publisher\");\n+\n+        if (publisher instanceof StreamMessage) {\n+            @SuppressWarnings(\"unchecked\")\n+            final StreamMessage<T> cast = (StreamMessage<T>) publisher;\n+            return cast;\n+        } else {\n+            return new PublisherBasedStreamMessage<>(publisher);\n+        }\n+    }\n+\n+    /**\n+     * Returns a concatenated {@link StreamMessage} which relays items of the specified array of\n+     * {@link Publisher}s in order, non-overlappingly, one after the other finishes.\n+     */\n+    @SafeVarargs\n+    static <T> StreamMessage<T> of(Publisher<? extends T>... publishers) {\n+        requireNonNull(publishers, \"publishers\");\n+        checkArgument(publishers.length > 0, \"publishers is empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c688c077feaade195869c8318caf97506c2d64ae"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzE0NTI0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOToyNDoyNVrOIO3bYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOToyNDoyNVrOIO3bYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ1OTEwNQ==", "bodyText": "Ditto", "url": "https://github.com/line/armeria/pull/3254#discussion_r552459105", "createdAt": "2021-01-06T09:24:25Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java", "diffHunk": "@@ -123,6 +127,50 @@\n         }\n     }\n \n+    /**\n+     * Creates a new {@link StreamMessage} from the specified {@link Publisher}.\n+     */\n+    static <T> StreamMessage<T> of(Publisher<? extends T> publisher) {\n+        requireNonNull(publisher, \"publisher\");\n+\n+        if (publisher instanceof StreamMessage) {\n+            @SuppressWarnings(\"unchecked\")\n+            final StreamMessage<T> cast = (StreamMessage<T>) publisher;\n+            return cast;\n+        } else {\n+            return new PublisherBasedStreamMessage<>(publisher);\n+        }\n+    }\n+\n+    /**\n+     * Returns a concatenated {@link StreamMessage} which relays items of the specified array of\n+     * {@link Publisher}s in order, non-overlappingly, one after the other finishes.\n+     */\n+    @SafeVarargs\n+    static <T> StreamMessage<T> of(Publisher<? extends T>... publishers) {\n+        requireNonNull(publishers, \"publishers\");\n+        checkArgument(publishers.length > 0, \"publishers is empty\");\n+        @SuppressWarnings(\"unchecked\")\n+        final StreamMessage<? extends T>[] streamMessages = ImmutableList.copyOf(publishers)\n+                                                                         .stream()\n+                                                                         .map(StreamMessage::of)\n+                                                                         .toArray(StreamMessage[]::new);\n+        return new ConcatArrayStreamMessage<>(streamMessages);\n+    }\n+\n+    /**\n+     * Returns a concatenated {@link StreamMessage} which relays items of the specified array of\n+     * {@link StreamMessage}s in order, non-overlappingly, one after the other finishes.\n+     */\n+    @SafeVarargs\n+    static <T> StreamMessage<T> of(StreamMessage<? extends T>... streamMessages) {\n+        requireNonNull(streamMessages, \"streamMessages\");\n+        checkArgument(streamMessages.length > 0, \"streamMessages is empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c688c077feaade195869c8318caf97506c2d64ae"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzE1NjUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/stream/ConcatArrayStreamMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOToyNzozN1rOIO3iDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOToyNzozN1rOIO3iDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2MDgxMg==", "bodyText": "How about adding an assertion?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.sources = sources;\n          \n          \n            \n                    assert sources.length != 0;\n          \n          \n            \n                    this.sources = sources;", "url": "https://github.com/line/armeria/pull/3254#discussion_r552460812", "createdAt": "2021-01-06T09:27:37Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/*\n+ * Copyright 2021 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.linecorp.armeria.common.stream;\n+\n+import static com.linecorp.armeria.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    // Forked from https://github.com/oracle/helidon/blob/28cb3e8a34bda691c035d21f90b6278c6a42007c/common\n+    // /reactive/src/main/java/io/helidon/common/reactive/MultiConcatArray.java\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<ConcatArrayStreamMessage> subscribedUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(ConcatArrayStreamMessage.class, \"subscribed\");\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    private volatile int subscribed;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {\n+        this.sources = sources;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c688c077feaade195869c8318caf97506c2d64ae"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NzA3MDIzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/stream/ConcatArrayStreamMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMzozODowOVrOIRwaqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMzozODowOVrOIRwaqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ4OTk2Mw==", "bodyText": "nit: how about setUpstreamSubscription?", "url": "https://github.com/line/armeria/pull/3254#discussion_r555489963", "createdAt": "2021-01-12T03:38:09Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2021 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.linecorp.armeria.common.stream;\n+\n+import static com.linecorp.armeria.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<ConcatArrayStreamMessage> subscribedUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(ConcatArrayStreamMessage.class, \"subscribed\");\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    private volatile int subscribed;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {\n+        assert sources.length != 0;\n+        this.sources = sources;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (source.isOpen()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (!source.isEmpty()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public long demand() {\n+        if (parent == null) {\n+            return 0;\n+        }\n+        return sources[parent.index].demand();\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return sources[sources.length - 1].whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor) {\n+        subscribe(subscriber, executor, EMPTY_OPTIONS);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor,\n+                          SubscriptionOption... options) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        requireNonNull(executor, \"executor\");\n+        requireNonNull(options, \"options\");\n+\n+        if (subscribedUpdater.compareAndSet(this, 0, 1)) {\n+            parent = new ConcatArraySubscriber<>(subscriber, sources, executor, options);\n+            subscriber.onSubscribe(parent);\n+            if (executor.inEventLoop()) {\n+                parent.nextSource();\n+            } else {\n+                executor.execute(() -> parent.nextSource());\n+            }\n+        } else {\n+            subscriber.onSubscribe(NoopSubscription.get());\n+            subscriber.onError(new IllegalStateException(\"subscribed by other subscriber already\"));\n+        }\n+    }\n+\n+    @Override\n+    public void abort() {\n+        abort(AbortedStreamException.get());\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        requireNonNull(cause, \"cause\");\n+        for (StreamMessage<? extends T> source : sources) {\n+            source.abort(cause);\n+        }\n+    }\n+\n+    private static final class ConcatArraySubscriber<T> extends SubscriptionArbiter implements Subscriber<T> {\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicIntegerFieldUpdater<ConcatArraySubscriber> cancelledUpdater =\n+                AtomicIntegerFieldUpdater.newUpdater(ConcatArraySubscriber.class, \"cancelled\");\n+\n+        private Subscriber<? super T> downstream;\n+        private final StreamMessage<? extends T>[] sources;\n+        private final EventExecutor executor;\n+        private final SubscriptionOption[] options;\n+\n+        private long produced;\n+\n+        private volatile int index;\n+        private volatile int cancelled;\n+\n+        ConcatArraySubscriber(Subscriber<? super T> downstream, StreamMessage<? extends T>[] sources,\n+                              EventExecutor executor, SubscriptionOption... options) {\n+            this.downstream = downstream;\n+            this.sources = sources;\n+            this.executor = executor;\n+            this.options = options;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            if (cancelled()) {\n+                subscription.cancel();\n+            } else {\n+                setSubscription(subscription);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4660467718ced4cc6ce84f05c63d9153f5ecd37f"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NzA3NTEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMzo0MTowMVrOIRwdZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwNzoyNTo1MFrOITSqqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ5MDY2Mg==", "bodyText": "How about just casting if the publisher is a StreamMessage?", "url": "https://github.com/line/armeria/pull/3254#discussion_r555490662", "createdAt": "2021-01-12T03:41:01Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java", "diffHunk": "@@ -123,6 +126,55 @@\n         }\n     }\n \n+    /**\n+     * Creates a new {@link StreamMessage} from the specified {@link Publisher}.\n+     */\n+    static <T> StreamMessage<T> of(Publisher<? extends T> publisher) {\n+        requireNonNull(publisher, \"publisher\");\n+\n+        if (publisher instanceof StreamMessage) {\n+            @SuppressWarnings(\"unchecked\")\n+            final StreamMessage<T> cast = (StreamMessage<T>) publisher;\n+            return cast;\n+        } else {\n+            return new PublisherBasedStreamMessage<>(publisher);\n+        }\n+    }\n+\n+    /**\n+     * Returns a concatenated {@link StreamMessage} which relays items of the specified array of\n+     * {@link Publisher}s in order, non-overlappingly, one after the other finishes.\n+     */\n+    @SafeVarargs\n+    static <T> StreamMessage<T> of(Publisher<? extends T>... publishers) {\n+        requireNonNull(publishers, \"publishers\");\n+        if (publishers.length == 0) {\n+            return of();\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        final StreamMessage<? extends T>[] streamMessages = ImmutableList.copyOf(publishers)\n+                                                                         .stream()\n+                                                                         .map(StreamMessage::of)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4660467718ced4cc6ce84f05c63d9153f5ecd37f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzA4MzMxNw==", "bodyText": "StreamMessage.of() already checks the Publisher is an instance of StreamMessage.", "url": "https://github.com/line/armeria/pull/3254#discussion_r557083317", "createdAt": "2021-01-14T07:06:21Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java", "diffHunk": "@@ -123,6 +126,55 @@\n         }\n     }\n \n+    /**\n+     * Creates a new {@link StreamMessage} from the specified {@link Publisher}.\n+     */\n+    static <T> StreamMessage<T> of(Publisher<? extends T> publisher) {\n+        requireNonNull(publisher, \"publisher\");\n+\n+        if (publisher instanceof StreamMessage) {\n+            @SuppressWarnings(\"unchecked\")\n+            final StreamMessage<T> cast = (StreamMessage<T>) publisher;\n+            return cast;\n+        } else {\n+            return new PublisherBasedStreamMessage<>(publisher);\n+        }\n+    }\n+\n+    /**\n+     * Returns a concatenated {@link StreamMessage} which relays items of the specified array of\n+     * {@link Publisher}s in order, non-overlappingly, one after the other finishes.\n+     */\n+    @SafeVarargs\n+    static <T> StreamMessage<T> of(Publisher<? extends T>... publishers) {\n+        requireNonNull(publishers, \"publishers\");\n+        if (publishers.length == 0) {\n+            return of();\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        final StreamMessage<? extends T>[] streamMessages = ImmutableList.copyOf(publishers)\n+                                                                         .stream()\n+                                                                         .map(StreamMessage::of)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ5MDY2Mg=="}, "originalCommit": {"oid": "4660467718ced4cc6ce84f05c63d9153f5ecd37f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzA5OTY4OQ==", "bodyText": "Ah thanks, I missed it. \ud83d\ude05", "url": "https://github.com/line/armeria/pull/3254#discussion_r557099689", "createdAt": "2021-01-14T07:25:50Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java", "diffHunk": "@@ -123,6 +126,55 @@\n         }\n     }\n \n+    /**\n+     * Creates a new {@link StreamMessage} from the specified {@link Publisher}.\n+     */\n+    static <T> StreamMessage<T> of(Publisher<? extends T> publisher) {\n+        requireNonNull(publisher, \"publisher\");\n+\n+        if (publisher instanceof StreamMessage) {\n+            @SuppressWarnings(\"unchecked\")\n+            final StreamMessage<T> cast = (StreamMessage<T>) publisher;\n+            return cast;\n+        } else {\n+            return new PublisherBasedStreamMessage<>(publisher);\n+        }\n+    }\n+\n+    /**\n+     * Returns a concatenated {@link StreamMessage} which relays items of the specified array of\n+     * {@link Publisher}s in order, non-overlappingly, one after the other finishes.\n+     */\n+    @SafeVarargs\n+    static <T> StreamMessage<T> of(Publisher<? extends T>... publishers) {\n+        requireNonNull(publishers, \"publishers\");\n+        if (publishers.length == 0) {\n+            return of();\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        final StreamMessage<? extends T>[] streamMessages = ImmutableList.copyOf(publishers)\n+                                                                         .stream()\n+                                                                         .map(StreamMessage::of)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ5MDY2Mg=="}, "originalCommit": {"oid": "4660467718ced4cc6ce84f05c63d9153f5ecd37f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NzA4MjE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/stream/ConcatArrayStreamMessage.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMzo0NDowOFrOIRwhlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwNzoyNjozMFrOITSs0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ5MTczMw==", "bodyText": "We usually take Iterable or List instead of array. How about changing for consistency?", "url": "https://github.com/line/armeria/pull/3254#discussion_r555491733", "createdAt": "2021-01-12T03:44:08Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2021 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.linecorp.armeria.common.stream;\n+\n+import static com.linecorp.armeria.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<ConcatArrayStreamMessage> subscribedUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(ConcatArrayStreamMessage.class, \"subscribed\");\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    private volatile int subscribed;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4660467718ced4cc6ce84f05c63d9153f5ecd37f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzA4Njg0Mg==", "bodyText": "OK, let me pick List.", "url": "https://github.com/line/armeria/pull/3254#discussion_r557086842", "createdAt": "2021-01-14T07:10:52Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2021 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.linecorp.armeria.common.stream;\n+\n+import static com.linecorp.armeria.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<ConcatArrayStreamMessage> subscribedUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(ConcatArrayStreamMessage.class, \"subscribed\");\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    private volatile int subscribed;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ5MTczMw=="}, "originalCommit": {"oid": "4660467718ced4cc6ce84f05c63d9153f5ecd37f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzA5NDgxOA==", "bodyText": "I realized that RegularFixedStreamMessage internally hold objects as an array.", "url": "https://github.com/line/armeria/pull/3254#discussion_r557094818", "createdAt": "2021-01-14T07:20:30Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2021 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.linecorp.armeria.common.stream;\n+\n+import static com.linecorp.armeria.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<ConcatArrayStreamMessage> subscribedUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(ConcatArrayStreamMessage.class, \"subscribed\");\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    private volatile int subscribed;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ5MTczMw=="}, "originalCommit": {"oid": "4660467718ced4cc6ce84f05c63d9153f5ecd37f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzEwMDI0Mg==", "bodyText": "Ah then it's fine as it is. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3254#discussion_r557100242", "createdAt": "2021-01-14T07:26:30Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2021 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.linecorp.armeria.common.stream;\n+\n+import static com.linecorp.armeria.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<ConcatArrayStreamMessage> subscribedUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(ConcatArrayStreamMessage.class, \"subscribed\");\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    private volatile int subscribed;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ5MTczMw=="}, "originalCommit": {"oid": "4660467718ced4cc6ce84f05c63d9153f5ecd37f"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NzEwNTEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/stream/SubscriptionArbiter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMzo0ODo0OFrOIRwwhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwNzoxMjo0MFrOITR9iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ5NTU1Nw==", "bodyText": "missing copyright of this file?", "url": "https://github.com/line/armeria/pull/3254#discussion_r555495557", "createdAt": "2021-01-12T03:48:48Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/SubscriptionArbiter.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2021 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.stream;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscription;\n+\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+/**\n+ * Allows changing the subscription, tracking requests and item\n+ * production in concurrent source-switching scenarios.\n+ * <p>\n+ *     {@code this} is the work-in-progress indicator for the\n+ *     subscriber-request-produced trampolining.\n+ * </p>\n+ * <p>\n+ *     Please override {@link #request(long)} and perform the n &lt;= 0L\n+ *     check in the context of the implementor because the TCK requires\n+ *     an onError signal and the arbiter has no contextual knowledge how\n+ *     and when to signal it.\n+ * </p>\n+ */\n+class SubscriptionArbiter implements Subscription {\n+\n+    // Forked from https://github.com/oracle/helidon/blob/b64be21a5f5c7bbdecd6acf35339c6ee15da0af6/common\n+    // /reactive/src/main/java/io/helidon/common/reactive/SubscriptionArbiter.java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4660467718ced4cc6ce84f05c63d9153f5ecd37f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzA4ODEzOQ==", "bodyText": "Oops... IntelliJ removes the duplicate copyright if the file is refactored. \ud83d\ude05", "url": "https://github.com/line/armeria/pull/3254#discussion_r557088139", "createdAt": "2021-01-14T07:12:40Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/SubscriptionArbiter.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2021 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.stream;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscription;\n+\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+/**\n+ * Allows changing the subscription, tracking requests and item\n+ * production in concurrent source-switching scenarios.\n+ * <p>\n+ *     {@code this} is the work-in-progress indicator for the\n+ *     subscriber-request-produced trampolining.\n+ * </p>\n+ * <p>\n+ *     Please override {@link #request(long)} and perform the n &lt;= 0L\n+ *     check in the context of the implementor because the TCK requires\n+ *     an onError signal and the arbiter has no contextual knowledge how\n+ *     and when to signal it.\n+ * </p>\n+ */\n+class SubscriptionArbiter implements Subscription {\n+\n+    // Forked from https://github.com/oracle/helidon/blob/b64be21a5f5c7bbdecd6acf35339c6ee15da0af6/common\n+    // /reactive/src/main/java/io/helidon/common/reactive/SubscriptionArbiter.java", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ5NTU1Nw=="}, "originalCommit": {"oid": "4660467718ced4cc6ce84f05c63d9153f5ecd37f"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1842, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}