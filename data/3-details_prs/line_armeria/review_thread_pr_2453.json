{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMTkzNDI5", "number": 2453, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNjowMToxMlrODdOD6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNjowMToxMlrODdOD6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTY1NjcyOnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/FramedGrpcService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNjowMToxMlrOFlsmvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNjoxNjoyM1rOFlsy8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA3MjQ0Ng==", "bodyText": "Question: Do we need this builder() method? This class is package-private and this method doesn't use anywhere.", "url": "https://github.com/line/armeria/pull/2453#discussion_r375072446", "createdAt": "2020-02-05T06:01:12Z", "author": {"login": "ikhoon"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/FramedGrpcService.java", "diffHunk": "@@ -0,0 +1,393 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.grpc;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.linecorp.armeria.common.stream.SubscriptionOption.WITH_POOLED_OBJECTS;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.AbstractMap.SimpleImmutableEntry;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import org.curioswitch.common.protobuf.json.MessageMarshaller;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpResponseWriter;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.ResponseHeadersBuilder;\n+import com.linecorp.armeria.common.SerializationFormat;\n+import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;\n+import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer;\n+import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+import com.linecorp.armeria.internal.common.grpc.GrpcJsonUtil;\n+import com.linecorp.armeria.internal.common.grpc.GrpcStatus;\n+import com.linecorp.armeria.internal.common.grpc.MetadataUtil;\n+import com.linecorp.armeria.internal.common.grpc.TimeoutHeaderUtil;\n+import com.linecorp.armeria.server.AbstractHttpService;\n+import com.linecorp.armeria.server.Route;\n+import com.linecorp.armeria.server.ServiceConfig;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import io.grpc.Codec.Identity;\n+import io.grpc.CompressorRegistry;\n+import io.grpc.DecompressorRegistry;\n+import io.grpc.Metadata;\n+import io.grpc.MethodDescriptor;\n+import io.grpc.Server;\n+import io.grpc.ServerCall;\n+import io.grpc.ServerMethodDefinition;\n+import io.grpc.ServerServiceDefinition;\n+import io.grpc.Status;\n+import io.grpc.protobuf.services.ProtoReflectionService;\n+\n+/**\n+ * The framed {@link GrpcService} implementation.\n+ */\n+final class FramedGrpcService extends AbstractHttpService implements GrpcService {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(FramedGrpcService.class);\n+\n+    /**\n+     * Returns a new {@link GrpcServiceBuilder}.\n+     */\n+    public static GrpcServiceBuilder builder() {\n+        return new GrpcServiceBuilder();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb40bcf69416c8e8aa31d5c4ffdb5c781f48d9b"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA3NTU3MA==", "bodyText": "Fixed", "url": "https://github.com/line/armeria/pull/2453#discussion_r375075570", "createdAt": "2020-02-05T06:16:23Z", "author": {"login": "trustin"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/FramedGrpcService.java", "diffHunk": "@@ -0,0 +1,393 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.grpc;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.linecorp.armeria.common.stream.SubscriptionOption.WITH_POOLED_OBJECTS;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.AbstractMap.SimpleImmutableEntry;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import org.curioswitch.common.protobuf.json.MessageMarshaller;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpResponseWriter;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.ResponseHeadersBuilder;\n+import com.linecorp.armeria.common.SerializationFormat;\n+import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;\n+import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer;\n+import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+import com.linecorp.armeria.internal.common.grpc.GrpcJsonUtil;\n+import com.linecorp.armeria.internal.common.grpc.GrpcStatus;\n+import com.linecorp.armeria.internal.common.grpc.MetadataUtil;\n+import com.linecorp.armeria.internal.common.grpc.TimeoutHeaderUtil;\n+import com.linecorp.armeria.server.AbstractHttpService;\n+import com.linecorp.armeria.server.Route;\n+import com.linecorp.armeria.server.ServiceConfig;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import io.grpc.Codec.Identity;\n+import io.grpc.CompressorRegistry;\n+import io.grpc.DecompressorRegistry;\n+import io.grpc.Metadata;\n+import io.grpc.MethodDescriptor;\n+import io.grpc.Server;\n+import io.grpc.ServerCall;\n+import io.grpc.ServerMethodDefinition;\n+import io.grpc.ServerServiceDefinition;\n+import io.grpc.Status;\n+import io.grpc.protobuf.services.ProtoReflectionService;\n+\n+/**\n+ * The framed {@link GrpcService} implementation.\n+ */\n+final class FramedGrpcService extends AbstractHttpService implements GrpcService {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(FramedGrpcService.class);\n+\n+    /**\n+     * Returns a new {@link GrpcServiceBuilder}.\n+     */\n+    public static GrpcServiceBuilder builder() {\n+        return new GrpcServiceBuilder();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA3MjQ0Ng=="}, "originalCommit": {"oid": "0fb40bcf69416c8e8aa31d5c4ffdb5c781f48d9b"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2982, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}