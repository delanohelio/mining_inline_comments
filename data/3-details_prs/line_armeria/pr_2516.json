{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MjI5Mzk3", "number": 2516, "title": "Exclude default options when merging two `Client*Options`", "bodyText": "Motivation:\nAfter Armeria 0.98.0, WebClientBuilder and ClientBuilder can set ClientOptions and ClientFactory easily.\nUnfortunately, the factory set to the client gets overridden by ClientOption.FACTORY of options\neven though a user did not specify the factory in ClientOption.\nWebClient.builder()\n         .fatory(factory) // Set custom factory\n         .options(options) // The custom factory gets overridden by ClientFactory.ofDefault()\n         .build();\nClients.builder(uri)\n       .factory(factory)\n       .options(options)\n       .build();\nBecuase the ClientOption has ClientOption.FACTORY by default.\nIt confuses users who use the client builders.\nModifications:\n\nDo not set DEFAULT options when building Client*Options\nMake AbstractOptions implement Iterable\nClient*Options.get* has a priority in order of own and DEFAULT\nBreaking\n\nasMap() in ClientOptions and ClientFactoryOptions does not return default options anymore.\nClientOption.DEFAULT has been removed in favor of ClientOption.of()\n\n\n\nResult:\nAbstractOptions set by users don't get overridden by default options.\nFixes: #2493", "createdAt": "2020-02-19T15:27:02Z", "url": "https://github.com/line/armeria/pull/2516", "merged": true, "mergeCommit": {"oid": "25556b79569a937d9b793432932d09f14900e927"}, "closed": true, "closedAt": "2020-02-21T08:26:21Z", "author": {"login": "ikhoon"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcF4ZglgH2gAyMzc3MjI5Mzk3OjUzMWZkNzM3MjJlNDE3YTViOThkNzdlMjhkMzVlN2E4YWI5YzM3YTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGa-BLAFqTM2MjQ1MDAyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "531fd73722e417a5b98d77e28d35e7a8ab9c37a0", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/531fd73722e417a5b98d77e28d35e7a8ab9c37a0", "committedDate": "2020-02-19T15:38:15Z", "message": "Exclude default options when merging two `Client*Options`\n\nMotivation:\nAfter Armeria 0.98.0, `WebClientBuilder` and `ClientBuilder` can set `ClientOptions` and `ClientFactory` easily.\n```java\nWebClient.builder()\n         .fatory(factory) // Set custom factory\n         .options(options) // The custom factory gets overridden by ClientFactory.ofDefault()\n         .build();\nClients.builder(uri)\n       .factory(factory)\n       .options(options)\n       .build();\n```\nUnfortunately, the `factory` set to client get overridden by `ClientOption.FACTORY` of `options`\neven though a user did not specifity the factory in `ClientOption`.\nBecuase the `ClientOption` has `ClientOption.FACTORY` by default.\nIt confuses users who use the client builders.\n\nModification:\n* Do not set `DEFAULT` options when building `Client*Options`\n* Add `Client*Options.OPTIONS` for accessing all options\n* Add `valueMap` to `Client*Options` for getting own options.\n* `Client*Options.get*` has priority in order of own, parent and `DEFAULT`\n* Breaking\n  * `asMap()` in `ClientOptions` and `ClientFactoryOptions` has been\n    removed without replacement.\n  * `ClientOption.DEFAULT` has been removed in favor of `ClientOption.of()`\n\nResult:\nThe default client factory in `ClientOptions` doesn't override the `ClientFactory` you specify.\nFixes: #2493"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c9148629d7ee8b56e2c8975c67f7d9ba46ccb5f1", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/c9148629d7ee8b56e2c8975c67f7d9ba46ccb5f1", "committedDate": "2020-02-19T15:19:47Z", "message": "Exclude default options when merging two `Client*Options`\n\nMotivation:\nAfter Armeria 0.98.0, `WebClientBuilder` and `ClientBuilder` can set `ClientOptions` and `ClientFactory` easily.\n```java\nWebClient.builder()\n         .fatory(factory) // Set custom factory\n         .options(options) // The custom factory gets overridden by ClientFactory.ofDefault()\n         .build();\nClients.builder(uri)\n       .factory(factory)\n       .options(options)\n       .build();\n```\nUnfortunately, the `factory` set to client get overridden by `ClientOption.FACTORY` of `options`\neven though a user did not specifity the factory in `ClientOption`.\nBecuase the `ClientOption` has `ClientOption.FACTORY` by default.\nIt confuses users who use the client builders.\n\nModification:\n* Do not set `DEFAULT` options when building `Client*Options`\n* Add `Client*Options.OPTIONS` for accessing all options\n* Add `valueMap` to `Client*Options` for getting own options.\n* `Client*Options.get*` has priority in order of own, parent and `DEFAULT`\n* Breaking\n  * `asMap()` in `ClientOptions` and `ClientFactoryOptions` has been\n    removed without replacement.\n  * `ClientOption.DEFAULT` has been removed in favor of `ClientOption.of()`\n\nResult:\nThe default client factory in `ClientOptions` doesn't override the `ClientFactory` you specify.\nFixes: #2493"}, "afterCommit": {"oid": "531fd73722e417a5b98d77e28d35e7a8ab9c37a0", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/531fd73722e417a5b98d77e28d35e7a8ab9c37a0", "committedDate": "2020-02-19T15:38:15Z", "message": "Exclude default options when merging two `Client*Options`\n\nMotivation:\nAfter Armeria 0.98.0, `WebClientBuilder` and `ClientBuilder` can set `ClientOptions` and `ClientFactory` easily.\n```java\nWebClient.builder()\n         .fatory(factory) // Set custom factory\n         .options(options) // The custom factory gets overridden by ClientFactory.ofDefault()\n         .build();\nClients.builder(uri)\n       .factory(factory)\n       .options(options)\n       .build();\n```\nUnfortunately, the `factory` set to client get overridden by `ClientOption.FACTORY` of `options`\neven though a user did not specifity the factory in `ClientOption`.\nBecuase the `ClientOption` has `ClientOption.FACTORY` by default.\nIt confuses users who use the client builders.\n\nModification:\n* Do not set `DEFAULT` options when building `Client*Options`\n* Add `Client*Options.OPTIONS` for accessing all options\n* Add `valueMap` to `Client*Options` for getting own options.\n* `Client*Options.get*` has priority in order of own, parent and `DEFAULT`\n* Breaking\n  * `asMap()` in `ClientOptions` and `ClientFactoryOptions` has been\n    removed without replacement.\n  * `ClientOption.DEFAULT` has been removed in favor of `ClientOption.of()`\n\nResult:\nThe default client factory in `ClientOptions` doesn't override the `ClientFactory` you specify.\nFixes: #2493"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5e66b188150e96e82c9872f417746f2b26f5da4", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/a5e66b188150e96e82c9872f417746f2b26f5da4", "committedDate": "2020-02-19T15:48:37Z", "message": "Revert blank line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72ab3739f86ee8c375256661d979908da80c18d8", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/72ab3739f86ee8c375256661d979908da80c18d8", "committedDate": "2020-02-19T16:21:49Z", "message": "Remove Client*Option.OPTIONS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba7fcef6f48ca768ba3d5092b6bc6455a525634e", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/ba7fcef6f48ca768ba3d5092b6bc6455a525634e", "committedDate": "2020-02-20T05:50:22Z", "message": "Change ImmutableSet.copyOf to Collections.unmodifiableSet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1dbb8d3401f14ba12c48f0e397dd437c3320ac9", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/a1dbb8d3401f14ba12c48f0e397dd437c3320ac9", "committedDate": "2020-02-20T05:54:58Z", "message": "Revert EMTPY to of()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNjUxNDEz", "url": "https://github.com/line/armeria/pull/2516#pullrequestreview-361651413", "createdAt": "2020-02-20T06:05:54Z", "commit": {"oid": "a1dbb8d3401f14ba12c48f0e397dd437c3320ac9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjowNTo1NVrOFsGfEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjowNTo1NVrOFsGfEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc4NzkyMw==", "bodyText": "This is not very efficient because we have to do a lookup for each option. How about making AbstractOptions implement Iterable<AbstractOptionValue>?\npublic abstract class AbstractOptions<T extends AbstractOptionValue<?, ?>>\n        implements Iterable<T>", "url": "https://github.com/line/armeria/pull/2516#discussion_r381787923", "createdAt": "2020-02-20T06:05:55Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/AbstractClientOptionsBuilder.java", "diffHunk": "@@ -60,7 +60,12 @@ protected AbstractClientOptionsBuilder(ClientOptions options) {\n      */\n     public AbstractClientOptionsBuilder options(ClientOptions options) {\n         requireNonNull(options, \"options\");\n-        options.asMap().values().forEach(this::option);\n+        for (ClientOption<Object> option : options.options()) {\n+            final Object value = options.getOrNull(option, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1dbb8d3401f14ba12c48f0e397dd437c3320ac9"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "656b71970498869723d41a05742cc416a6144cd9", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/656b71970498869723d41a05742cc416a6144cd9", "committedDate": "2020-02-20T07:26:57Z", "message": "Remove valueMap and releted code in subclases of `AbstractOptions`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21c4072289cdf8038c68f6f827254e403c3c70cb", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/21c4072289cdf8038c68f6f827254e403c3c70cb", "committedDate": "2020-02-20T09:13:33Z", "message": "Address comments by @trustin / Remove `options()` and implements `Iterable`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxOTUzNjgz", "url": "https://github.com/line/armeria/pull/2516#pullrequestreview-361953683", "createdAt": "2020-02-20T14:39:31Z", "commit": {"oid": "21c4072289cdf8038c68f6f827254e403c3c70cb"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDozOTozMlrOFsV2xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDo1MjowOVrOFsWYLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAzOTc1MA==", "bodyText": "Returns an empty singleton {@link ClientFactoryOptions}.", "url": "https://github.com/line/armeria/pull/2516#discussion_r382039750", "createdAt": "2020-02-20T14:39:32Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java", "diffHunk": "@@ -99,13 +99,16 @@\n             ClientFactoryOption.METER_REGISTRY.newValue(Metrics.globalRegistry)\n     };\n \n-    private static final ClientFactoryOptions DEFAULT = new ClientFactoryOptions(DEFAULT_OPTIONS);\n+    @VisibleForTesting\n+    static final ClientFactoryOptions DEFAULT = new ClientFactoryOptions(DEFAULT_OPTIONS);\n+\n+    private static final ClientFactoryOptions EMPTY = new ClientFactoryOptions();\n \n     /**\n      * The default {@link ClientFactoryOptions}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21c4072289cdf8038c68f6f827254e403c3c70cb"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0MzEzMA==", "bodyText": "Could we make sure first and second have the same type parameter?\nMissing Javadoc", "url": "https://github.com/line/armeria/pull/2516#discussion_r382043130", "createdAt": "2020-02-20T14:44:23Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/util/AbstractOptions.java", "diffHunk": "@@ -19,31 +19,60 @@\n \n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.IdentityHashMap;\n+import java.util.Iterator;\n import java.util.Map;\n import java.util.NoSuchElementException;\n \n import javax.annotation.Nullable;\n \n+import com.google.common.collect.Iterators;\n+\n /**\n  * A set of configuration options and their respective values.\n  *\n  * @see AbstractOption\n  * @see AbstractOptionValue\n  */\n-public abstract class AbstractOptions {\n+public abstract class AbstractOptions<T extends AbstractOptionValue<?, ?>> implements Iterable<T> {\n+\n+    protected static <V> V get(AbstractOptions<?> first, AbstractOptions<?> second, AbstractOption<V> option) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21c4072289cdf8038c68f6f827254e403c3c70cb"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0NDE4NQ==", "bodyText": "Not necessarily part of this PR, but how about rewriting this method with MoreObjects.toStringHelper?", "url": "https://github.com/line/armeria/pull/2516#discussion_r382044185", "createdAt": "2020-02-20T14:46:05Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/util/AbstractOptions.java", "diffHunk": "@@ -188,37 +201,14 @@ protected AbstractOptions(AbstractOptions baseOptions, AbstractOptions additiona\n         return optionValue != null ? optionValue.value() : null;\n     }\n \n-    /**\n-     * Returns the value of the specified {@code option}.\n-     *\n-     * @param <O> the type of the option\n-     * @param <V> the type of the value\n-     * @return the value of the specified {@code option}. {@code defaultValue} if there's no such option.\n-     */\n-    protected final <O extends AbstractOption<V>, V> V getOrElse0(O option, V defaultValue) {\n-        requireNonNull(defaultValue, \"defaultValue\");\n-        final V value = getOrNull0(option);\n-        if (value != null) {\n-            return value;\n-        } else {\n-            return defaultValue;\n-        }\n-    }\n-\n-    /**\n-     * Returns the {@link Map} whose key is {@link AbstractOption} and value is {@link AbstractOptionValue}.\n-     *\n-     * @param <K> the type of the options\n-     * @param <V> the type of the option values\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    protected final <K extends AbstractOption<?>, V extends AbstractOptionValue<K, ?>> Map<K, V> asMap0() {\n-        return Collections.unmodifiableMap((Map<? extends K, ? extends V>) valueMap);\n+    @Override\n+    public Iterator<T> iterator() {\n+        return Iterators.unmodifiableIterator(valueMap.values().iterator());\n     }\n \n     @Override\n     public String toString() {\n-        return toString(asMap0().values());\n+        return toString(valueMap.values());\n     }\n \n     static String toString(Collection<?> values) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21c4072289cdf8038c68f6f827254e403c3c70cb"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0NTU3Mg==", "bodyText": "Could use: https://joel-costigliola.github.io/assertj/core/api/org/assertj/core/api/AbstractIterableAssert.html#isEmpty() ?", "url": "https://github.com/line/armeria/pull/2516#discussion_r382045572", "createdAt": "2020-02-20T14:48:04Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/client/ClientFactoryOptionsTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+import static com.linecorp.armeria.client.ClientFactoryOption.ADDRESS_RESOLVER_GROUP_FACTORY;\n+import static com.linecorp.armeria.client.ClientFactoryOption.CHANNEL_OPTIONS;\n+import static com.linecorp.armeria.client.ClientFactoryOption.CONNECTION_POOL_LISTENER;\n+import static com.linecorp.armeria.client.ClientFactoryOption.EVENT_LOOP_SCHEDULER_FACTORY;\n+import static com.linecorp.armeria.client.ClientFactoryOption.HTTP1_MAX_CHUNK_SIZE;\n+import static com.linecorp.armeria.client.ClientFactoryOption.HTTP1_MAX_HEADER_SIZE;\n+import static com.linecorp.armeria.client.ClientFactoryOption.HTTP1_MAX_INITIAL_LINE_LENGTH;\n+import static com.linecorp.armeria.client.ClientFactoryOption.HTTP2_INITIAL_CONNECTION_WINDOW_SIZE;\n+import static com.linecorp.armeria.client.ClientFactoryOption.HTTP2_INITIAL_STREAM_WINDOW_SIZE;\n+import static com.linecorp.armeria.client.ClientFactoryOption.HTTP2_MAX_FRAME_SIZE;\n+import static com.linecorp.armeria.client.ClientFactoryOption.HTTP2_MAX_HEADER_LIST_SIZE;\n+import static com.linecorp.armeria.client.ClientFactoryOption.IDLE_TIMEOUT_MILLIS;\n+import static com.linecorp.armeria.client.ClientFactoryOption.METER_REGISTRY;\n+import static com.linecorp.armeria.client.ClientFactoryOption.SHUTDOWN_WORKER_GROUP_ON_CLOSE;\n+import static com.linecorp.armeria.client.ClientFactoryOption.USE_HTTP1_PIPELINING;\n+import static com.linecorp.armeria.client.ClientFactoryOption.USE_HTTP2_PREFACE;\n+import static com.linecorp.armeria.client.ClientFactoryOption.WORKER_GROUP;\n+import static com.linecorp.armeria.client.ClientOptionsTest.getAllPublicStaticFinal;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.ArgumentsProvider;\n+import org.junit.jupiter.params.provider.ArgumentsSource;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Streams;\n+import com.google.common.util.concurrent.MoreExecutors;\n+\n+import com.linecorp.armeria.common.util.AbstractOptionValue;\n+import com.linecorp.armeria.common.util.EventLoopGroups;\n+\n+import io.micrometer.core.instrument.Metrics;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.resolver.AddressResolverGroup;\n+\n+class ClientFactoryOptionsTest {\n+\n+    static EventLoopGroup executors;\n+\n+    @BeforeAll\n+    static void setUp() {\n+        executors = EventLoopGroups.newEventLoopGroup(1);\n+    }\n+\n+    @AfterAll\n+    static void tearDown() {\n+        assertThat(MoreExecutors.shutdownAndAwaitTermination(executors, 10, TimeUnit.SECONDS)).isTrue();\n+    }\n+\n+    @Test\n+    void allDefaultOptionsArePresent() throws Exception {\n+        @SuppressWarnings(\"rawtypes\")\n+        final Set<ClientFactoryOption> options = getAllPublicStaticFinal(ClientFactoryOption.class);\n+        final Set<ClientFactoryOption<?>> defaults = Streams.stream(ClientFactoryOptions.DEFAULT)\n+                                                            .map(AbstractOptionValue::option)\n+                                                            .collect(toImmutableSet());\n+\n+        assertThat(defaults).isEqualTo(options);\n+        assertThat(Iterables.size(ClientFactoryOptions.of())).isZero();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21c4072289cdf8038c68f6f827254e403c3c70cb"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0NjY1Nw==", "bodyText": "Indentation", "url": "https://github.com/line/armeria/pull/2516#discussion_r382046657", "createdAt": "2020-02-20T14:49:42Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/client/WebClientBuilderTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class WebClientBuilderTest {\n+\n+    @Test\n+    void keepCustomFactory() {\n+        final ClientFactory factory = ClientFactory.builder()\n+                                                   .option(ClientFactoryOption.HTTP1_MAX_CHUNK_SIZE, 100)\n+                                                   .build();\n+        final ClientOptions options = ClientOptions.of(ClientOption.RESPONSE_TIMEOUT_MILLIS.newValue(200L));\n+        final WebClient webClient = WebClient.builder(\"http://foo\")\n+                                             .factory(factory)\n+                                             .options(options)\n+                                             .build();\n+\n+        final ClientOptions clientOptions = webClient.options();\n+        assertThat(clientOptions.get(ClientOption.RESPONSE_TIMEOUT_MILLIS)).isEqualTo(200);\n+        final ClientFactory clientFactory = clientOptions.factory();\n+        assertThat(clientFactory.options().get(ClientFactoryOption.HTTP1_MAX_CHUNK_SIZE)).isEqualTo(100);\n+    }\n+\n+    @Test\n+    void keepLastFactory_by_options() {\n+        final ClientFactory optionClientFactory = ClientFactory.builder()\n+                                                    .option(ClientFactoryOption.HTTP1_MAX_CHUNK_SIZE, 200)\n+                                                    .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21c4072289cdf8038c68f6f827254e403c3c70cb"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0Njk2NQ==", "bodyText": "Indentation", "url": "https://github.com/line/armeria/pull/2516#discussion_r382046965", "createdAt": "2020-02-20T14:50:10Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/client/WebClientBuilderTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class WebClientBuilderTest {\n+\n+    @Test\n+    void keepCustomFactory() {\n+        final ClientFactory factory = ClientFactory.builder()\n+                                                   .option(ClientFactoryOption.HTTP1_MAX_CHUNK_SIZE, 100)\n+                                                   .build();\n+        final ClientOptions options = ClientOptions.of(ClientOption.RESPONSE_TIMEOUT_MILLIS.newValue(200L));\n+        final WebClient webClient = WebClient.builder(\"http://foo\")\n+                                             .factory(factory)\n+                                             .options(options)\n+                                             .build();\n+\n+        final ClientOptions clientOptions = webClient.options();\n+        assertThat(clientOptions.get(ClientOption.RESPONSE_TIMEOUT_MILLIS)).isEqualTo(200);\n+        final ClientFactory clientFactory = clientOptions.factory();\n+        assertThat(clientFactory.options().get(ClientFactoryOption.HTTP1_MAX_CHUNK_SIZE)).isEqualTo(100);\n+    }\n+\n+    @Test\n+    void keepLastFactory_by_options() {\n+        final ClientFactory optionClientFactory = ClientFactory.builder()\n+                                                    .option(ClientFactoryOption.HTTP1_MAX_CHUNK_SIZE, 200)\n+                                                    .build();\n+        final ClientOptions options = ClientOptions.of(ClientOption.RESPONSE_TIMEOUT_MILLIS.newValue(200L),\n+                                                       ClientOption.FACTORY.newValue(optionClientFactory));\n+\n+        final ClientFactory factory = ClientFactory.builder()\n+                                                    .option(ClientFactoryOption.HTTP1_MAX_CHUNK_SIZE, 100)\n+                                                    .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21c4072289cdf8038c68f6f827254e403c3c70cb"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0NzA4Nw==", "bodyText": "Indentation", "url": "https://github.com/line/armeria/pull/2516#discussion_r382047087", "createdAt": "2020-02-20T14:50:22Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/client/WebClientBuilderTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class WebClientBuilderTest {\n+\n+    @Test\n+    void keepCustomFactory() {\n+        final ClientFactory factory = ClientFactory.builder()\n+                                                   .option(ClientFactoryOption.HTTP1_MAX_CHUNK_SIZE, 100)\n+                                                   .build();\n+        final ClientOptions options = ClientOptions.of(ClientOption.RESPONSE_TIMEOUT_MILLIS.newValue(200L));\n+        final WebClient webClient = WebClient.builder(\"http://foo\")\n+                                             .factory(factory)\n+                                             .options(options)\n+                                             .build();\n+\n+        final ClientOptions clientOptions = webClient.options();\n+        assertThat(clientOptions.get(ClientOption.RESPONSE_TIMEOUT_MILLIS)).isEqualTo(200);\n+        final ClientFactory clientFactory = clientOptions.factory();\n+        assertThat(clientFactory.options().get(ClientFactoryOption.HTTP1_MAX_CHUNK_SIZE)).isEqualTo(100);\n+    }\n+\n+    @Test\n+    void keepLastFactory_by_options() {\n+        final ClientFactory optionClientFactory = ClientFactory.builder()\n+                                                    .option(ClientFactoryOption.HTTP1_MAX_CHUNK_SIZE, 200)\n+                                                    .build();\n+        final ClientOptions options = ClientOptions.of(ClientOption.RESPONSE_TIMEOUT_MILLIS.newValue(200L),\n+                                                       ClientOption.FACTORY.newValue(optionClientFactory));\n+\n+        final ClientFactory factory = ClientFactory.builder()\n+                                                    .option(ClientFactoryOption.HTTP1_MAX_CHUNK_SIZE, 100)\n+                                                    .build();\n+\n+        final WebClient webClient = WebClient.builder(\"http://foo\")\n+                                             .factory(factory)\n+                                             .options(options)\n+                                             .build();\n+\n+        final ClientOptions clientOptions = webClient.options();\n+        assertThat(clientOptions.get(ClientOption.RESPONSE_TIMEOUT_MILLIS)).isEqualTo(200);\n+        final ClientFactory clientFactory = clientOptions.factory();\n+        assertThat(clientFactory.options().get(ClientFactoryOption.HTTP1_MAX_CHUNK_SIZE)).isEqualTo(200);\n+    }\n+\n+    @Test\n+    void keepLastFactory_by_factory() {\n+        final ClientFactory optionClientFactory = ClientFactory.builder()\n+                                                    .option(ClientFactoryOption.HTTP1_MAX_CHUNK_SIZE, 200)\n+                                                    .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21c4072289cdf8038c68f6f827254e403c3c70cb"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0NzE1NQ==", "bodyText": "Indentation", "url": "https://github.com/line/armeria/pull/2516#discussion_r382047155", "createdAt": "2020-02-20T14:50:28Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/client/WebClientBuilderTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class WebClientBuilderTest {\n+\n+    @Test\n+    void keepCustomFactory() {\n+        final ClientFactory factory = ClientFactory.builder()\n+                                                   .option(ClientFactoryOption.HTTP1_MAX_CHUNK_SIZE, 100)\n+                                                   .build();\n+        final ClientOptions options = ClientOptions.of(ClientOption.RESPONSE_TIMEOUT_MILLIS.newValue(200L));\n+        final WebClient webClient = WebClient.builder(\"http://foo\")\n+                                             .factory(factory)\n+                                             .options(options)\n+                                             .build();\n+\n+        final ClientOptions clientOptions = webClient.options();\n+        assertThat(clientOptions.get(ClientOption.RESPONSE_TIMEOUT_MILLIS)).isEqualTo(200);\n+        final ClientFactory clientFactory = clientOptions.factory();\n+        assertThat(clientFactory.options().get(ClientFactoryOption.HTTP1_MAX_CHUNK_SIZE)).isEqualTo(100);\n+    }\n+\n+    @Test\n+    void keepLastFactory_by_options() {\n+        final ClientFactory optionClientFactory = ClientFactory.builder()\n+                                                    .option(ClientFactoryOption.HTTP1_MAX_CHUNK_SIZE, 200)\n+                                                    .build();\n+        final ClientOptions options = ClientOptions.of(ClientOption.RESPONSE_TIMEOUT_MILLIS.newValue(200L),\n+                                                       ClientOption.FACTORY.newValue(optionClientFactory));\n+\n+        final ClientFactory factory = ClientFactory.builder()\n+                                                    .option(ClientFactoryOption.HTTP1_MAX_CHUNK_SIZE, 100)\n+                                                    .build();\n+\n+        final WebClient webClient = WebClient.builder(\"http://foo\")\n+                                             .factory(factory)\n+                                             .options(options)\n+                                             .build();\n+\n+        final ClientOptions clientOptions = webClient.options();\n+        assertThat(clientOptions.get(ClientOption.RESPONSE_TIMEOUT_MILLIS)).isEqualTo(200);\n+        final ClientFactory clientFactory = clientOptions.factory();\n+        assertThat(clientFactory.options().get(ClientFactoryOption.HTTP1_MAX_CHUNK_SIZE)).isEqualTo(200);\n+    }\n+\n+    @Test\n+    void keepLastFactory_by_factory() {\n+        final ClientFactory optionClientFactory = ClientFactory.builder()\n+                                                    .option(ClientFactoryOption.HTTP1_MAX_CHUNK_SIZE, 200)\n+                                                    .build();\n+        final ClientOptions options = ClientOptions.of(ClientOption.RESPONSE_TIMEOUT_MILLIS.newValue(200L),\n+                                                       ClientOption.FACTORY.newValue(optionClientFactory));\n+\n+        final ClientFactory factory = ClientFactory.builder()\n+                                                    .option(ClientFactoryOption.HTTP1_MAX_CHUNK_SIZE, 100)\n+                                                    .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21c4072289cdf8038c68f6f827254e403c3c70cb"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0ODE1Nw==", "bodyText": "Unused?", "url": "https://github.com/line/armeria/pull/2516#discussion_r382048157", "createdAt": "2020-02-20T14:51:55Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java", "diffHunk": "@@ -223,7 +226,16 @@ private ClientFactoryOptions(ClientFactoryOptions baseOptions,\n      */\n     @Nullable\n     public <T> T getOrNull(ClientFactoryOption<T> option) {\n-        return getOrNull0(option);\n+        return getOrNull(this, DEFAULT, option);\n+    }\n+\n+    @Nullable\n+    <T> T getOrNull(ClientFactoryOption<T> option, boolean includeDefault) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21c4072289cdf8038c68f6f827254e403c3c70cb"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0ODMwMg==", "bodyText": "Unused?", "url": "https://github.com/line/armeria/pull/2516#discussion_r382048302", "createdAt": "2020-02-20T14:52:09Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientOptions.java", "diffHunk": "@@ -262,7 +254,16 @@ private ClientOptions(ClientOptions baseOptions, ClientOptions additionalOptions\n      */\n     @Nullable\n     public <T> T getOrNull(ClientOption<T> option) {\n-        return getOrNull0(option);\n+        return getOrNull(this, DEFAULT, option);\n+    }\n+\n+    @Nullable\n+    <T> T getOrNull(ClientOption<T> option, boolean includeDefault) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21c4072289cdf8038c68f6f827254e403c3c70cb"}, "originalPosition": 121}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f5003f01301aff804a3fd526fb652c46c2d3ca8", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/2f5003f01301aff804a3fd526fb652c46c2d3ca8", "committedDate": "2020-02-20T15:42:02Z", "message": "Address comments by @trustin\n\n- Add missing Javadoc\n- Remove unused code\n- Fix indent\n- Add additional type parameter for get(first, second...)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59056cf802ea74456fb3f11a85512dc70889bed7", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/59056cf802ea74456fb3f11a85512dc70889bed7", "committedDate": "2020-02-20T15:56:40Z", "message": "Clean up Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a312690ab9523740bc79aba61e4a83633208001", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/9a312690ab9523740bc79aba61e4a83633208001", "committedDate": "2020-02-21T02:00:45Z", "message": "Clean up Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32e885e12f3648fda2b6046956562d59cf7d5bad", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/32e885e12f3648fda2b6046956562d59cf7d5bad", "committedDate": "2020-02-21T05:42:51Z", "message": "Revive 'AbstractOptions.asMap()'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adf958d1406318f2fd79936242f8b9e6d134d09e", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/adf958d1406318f2fd79936242f8b9e6d134d09e", "committedDate": "2020-02-21T06:33:34Z", "message": "Fix return type of 'asMap()'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e2fc1e0af4fb2bb5b9623e16ed9b2b4833575e5", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/4e2fc1e0af4fb2bb5b9623e16ed9b2b4833575e5", "committedDate": "2020-02-21T07:54:03Z", "message": "Update ClientFactoryOptionsTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9a9b09c29df7ae703884221bc50a58c343be413", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/f9a9b09c29df7ae703884221bc50a58c343be413", "committedDate": "2020-02-21T07:54:28Z", "message": "Update ClientOptionsTest.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNDUwMDI2", "url": "https://github.com/line/armeria/pull/2516#pullrequestreview-362450026", "createdAt": "2020-02-21T07:54:54Z", "commit": {"oid": "f9a9b09c29df7ae703884221bc50a58c343be413"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 582, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}