{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNDg0NjY2", "number": 3015, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoxMzoyOFrOEa2jhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoxMzoyOFrOEa2jhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTkyMjYxOnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/1.0.0.mdx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoxMzoyOFrOHEhliw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoyNDozMlrOHEiLag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNjYzNQ==", "bodyText": "nit: need to use \"", "url": "https://github.com/line/armeria/pull/3015#discussion_r474506635", "createdAt": "2020-08-21T08:13:28Z", "author": {"login": "minwoox"}, "path": "site/src/pages/release-notes/1.0.0.mdx", "diffHunk": "@@ -0,0 +1,211 @@\n+---\n+date: 2020-08-21\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now check whether a <type://RequestContext> contains an attribute or not conveniently using\n+  <type://RequestContext#hasAttr(AttributeKey)> and <type://RequestContext#hasOwnAttr(AttributeKey)>. #3014\n+- You can now specify the default service and log name programmatically for an annotated service. #2979\n+  - It was previously only possible to specify a service name with <type://@ServiceName> annotation.\n+  ```java\n+  Server.builder()\n+        .annotatedService().defaultServiceName(\"my-service\")\n+                           .build(myAnnotatedService);\n+  ```\n+- Annotated services now support [Kotlin coroutines](https://kotlinlang.org/docs/reference/coroutines-overview.html).\n+  #2983 #3010 #3011\n+  - See [Kotlin coroutines support](/docs/server-annotated-service#kotlin-coroutines-support) for more\n+    information.\n+  ```kotlin\n+  class MyAnnotatedService {\n+      @Get(\"/users/{name}\")\n+      suspend fun getUserToken(@Param name: String): String {\n+          val user = myReactiveRepository.findByName(name).await()\n+          return user.token\n+      }\n+  }\n+  ```\n+- You can now get the current <type://ServiceRequestContext> from the Kotlin coroutine context when using\n+  [grpc-kotlin](https://github.com/grpc/grpc-kotlin). #3001\n+- You can now use <type://GrpcMeterIdPrefixFunction> to create meters with a `grpc-status` tag for gRPC clients\n+  and servers. #2762 #2971\n+  ```java\n+  Server.builder()\n+        .route().defaultServiceName(\"my-grpc-services\")\n+                .build(GrpcService.builder()\n+                                  .addService(serviceFoo)\n+                                  .addService(serviceBar)\n+                                  .build()\n+                                  .decorate(MetricCollectingService.newDecorator(\n+                                      GrpcMeterIdPrefixFunction.of('my.grpc.svcs'))))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c3b0cf386cf287d2181f07580e4824cb11cf0b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxNjMzMA==", "bodyText": "Oops! Too much JS/TS recently \ud83d\ude05", "url": "https://github.com/line/armeria/pull/3015#discussion_r474516330", "createdAt": "2020-08-21T08:24:32Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/1.0.0.mdx", "diffHunk": "@@ -0,0 +1,211 @@\n+---\n+date: 2020-08-21\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now check whether a <type://RequestContext> contains an attribute or not conveniently using\n+  <type://RequestContext#hasAttr(AttributeKey)> and <type://RequestContext#hasOwnAttr(AttributeKey)>. #3014\n+- You can now specify the default service and log name programmatically for an annotated service. #2979\n+  - It was previously only possible to specify a service name with <type://@ServiceName> annotation.\n+  ```java\n+  Server.builder()\n+        .annotatedService().defaultServiceName(\"my-service\")\n+                           .build(myAnnotatedService);\n+  ```\n+- Annotated services now support [Kotlin coroutines](https://kotlinlang.org/docs/reference/coroutines-overview.html).\n+  #2983 #3010 #3011\n+  - See [Kotlin coroutines support](/docs/server-annotated-service#kotlin-coroutines-support) for more\n+    information.\n+  ```kotlin\n+  class MyAnnotatedService {\n+      @Get(\"/users/{name}\")\n+      suspend fun getUserToken(@Param name: String): String {\n+          val user = myReactiveRepository.findByName(name).await()\n+          return user.token\n+      }\n+  }\n+  ```\n+- You can now get the current <type://ServiceRequestContext> from the Kotlin coroutine context when using\n+  [grpc-kotlin](https://github.com/grpc/grpc-kotlin). #3001\n+- You can now use <type://GrpcMeterIdPrefixFunction> to create meters with a `grpc-status` tag for gRPC clients\n+  and servers. #2762 #2971\n+  ```java\n+  Server.builder()\n+        .route().defaultServiceName(\"my-grpc-services\")\n+                .build(GrpcService.builder()\n+                                  .addService(serviceFoo)\n+                                  .addService(serviceBar)\n+                                  .build()\n+                                  .decorate(MetricCollectingService.newDecorator(\n+                                      GrpcMeterIdPrefixFunction.of('my.grpc.svcs'))))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNjYzNQ=="}, "originalCommit": {"oid": "c4c3b0cf386cf287d2181f07580e4824cb11cf0b"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2274, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}