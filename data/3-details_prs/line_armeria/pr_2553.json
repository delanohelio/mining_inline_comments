{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MTQ3NDg1", "number": 2553, "title": "Handle exceptions from Subscribers", "bodyText": "Motivation:\nAn exception raised by a Subscriber's onNext() or other handler methods can cause an unexpected connection drop.\nWe should handle it.\nModifications:\n\nCatch the exception thrown by onSubscribe() and onNext() from Subscribers.\n\nAabort the stream or call onError with the cause.\n\n\nCatch the exception thrown by onComplete() and onError(), and log it.\nFork CompositeException from RxJava.\n\nResult:\n\nClose #2475\nThe connection is not closed by unhandled exceptions from Subscribers anymore.", "createdAt": "2020-03-05T09:01:18Z", "url": "https://github.com/line/armeria/pull/2553", "merged": true, "mergeCommit": {"oid": "32b3d5a5caf18fb1ea0b1d8b29ade61d18935d05"}, "closed": true, "closedAt": "2020-03-10T04:47:30Z", "author": {"login": "minwoox"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKl2yHgH2gAyMzg0MTQ3NDg1OmQwODU3Y2U2OWMyMjk0ZWYzNjA4MjRiMWNiNzA5MGE0N2IwYTNjYjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMK_bJAFqTM3MTY3ODUyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d0857ce69c2294ef360824b1cb7090a47b0a3cb7", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/d0857ce69c2294ef360824b1cb7090a47b0a3cb7", "committedDate": "2020-03-05T06:51:39Z", "message": "Handle exceptions from Subscribers\nMotivation:\nAn exception raised by a `Subscriber`'s `onNext()` or other handler methods can cause an unexpected connection drop.\nWe should handle it.\n\nModifications:\n- Catch the exception thrown by `onSubscribe()` and `onNext()` from `Subscriber`s.\n  - Aabort the stream or call `onError` with the cause.\n- Catch the exception thrown by `onComplete()` and `onError()`, and log it.\n\nResult:\n- Close #2475\n- The connection is not closed by unhandled exceptions from `Subscriber`s anymore."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NTYxNzgx", "url": "https://github.com/line/armeria/pull/2553#pullrequestreview-369561781", "createdAt": "2020-03-05T13:22:49Z", "commit": {"oid": "d0857ce69c2294ef360824b1cb7090a47b0a3cb7"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzoyMjo0OVrOFyTQ-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzozNDowNFrOFyToKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4ODc2MQ==", "bodyText": "Maybe handleLateSubscriber()?", "url": "https://github.com/line/armeria/pull/2553#discussion_r388288761", "createdAt": "2020-03-05T13:22:49Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessage.java", "diffHunk": "@@ -145,16 +149,23 @@ static void failLateSubscriber(SubscriptionImpl subscription, Subscriber<?> late\n         final Throwable cause = abortedOrLate(oldSubscriber);\n \n         if (subscription.needsDirectInvocation()) {\n-            lateSubscriber.onSubscribe(NoopSubscription.INSTANCE);\n-            lateSubscriber.onError(cause);\n+            lateSubscriber(lateSubscriber, cause);\n         } else {\n             subscription.executor().execute(() -> {\n-                lateSubscriber.onSubscribe(NoopSubscription.INSTANCE);\n-                lateSubscriber.onError(cause);\n+                lateSubscriber(lateSubscriber, cause);\n             });\n         }\n     }\n \n+    private static void lateSubscriber(Subscriber<?> lateSubscriber, Throwable cause) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0857ce69c2294ef360824b1cb7090a47b0a3cb7"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4OTIzNw==", "bodyText": "Global comment: Should we catch a Throwable?", "url": "https://github.com/line/armeria/pull/2553#discussion_r388289237", "createdAt": "2020-03-05T13:23:45Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessage.java", "diffHunk": "@@ -145,16 +149,23 @@ static void failLateSubscriber(SubscriptionImpl subscription, Subscriber<?> late\n         final Throwable cause = abortedOrLate(oldSubscriber);\n \n         if (subscription.needsDirectInvocation()) {\n-            lateSubscriber.onSubscribe(NoopSubscription.INSTANCE);\n-            lateSubscriber.onError(cause);\n+            lateSubscriber(lateSubscriber, cause);\n         } else {\n             subscription.executor().execute(() -> {\n-                lateSubscriber.onSubscribe(NoopSubscription.INSTANCE);\n-                lateSubscriber.onError(cause);\n+                lateSubscriber(lateSubscriber, cause);\n             });\n         }\n     }\n \n+    private static void lateSubscriber(Subscriber<?> lateSubscriber, Throwable cause) {\n+        try {\n+            lateSubscriber.onSubscribe(NoopSubscription.INSTANCE);\n+            lateSubscriber.onError(cause);\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0857ce69c2294ef360824b1cb7090a47b0a3cb7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5MDY4OQ==", "bodyText": "Probably OK without 0?", "url": "https://github.com/line/armeria/pull/2553#discussion_r388290689", "createdAt": "2020-03-05T13:26:29Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java", "diffHunk": "@@ -228,110 +232,124 @@ private void doCancel() {\n \n     @Override\n     SubscriptionImpl subscribe(SubscriptionImpl subscription) {\n-        if (!subscriptionUpdater.compareAndSet(this, null, subscription)) {\n-            final SubscriptionImpl oldSubscription = this.subscription;\n+        if (!downstreamSubscriptionUpdater.compareAndSet(this, null, subscription)) {\n+            final SubscriptionImpl oldSubscription = downstreamSubscription;\n             assert oldSubscription != null;\n             return oldSubscription;\n         }\n \n         final Subscriber<Object> subscriber = subscription.subscriber();\n         if (subscription.needsDirectInvocation()) {\n-            subscriber.onSubscribe(subscription);\n-            safeOnSubscribeToDelegate();\n+            subscribe0(subscription, subscriber);\n         } else {\n             subscription.executor().execute(() -> {\n-                subscriber.onSubscribe(subscription);\n-                safeOnSubscribeToDelegate();\n+                subscribe0(subscription, subscriber);\n             });\n         }\n \n         return subscription;\n     }\n \n-    private void safeOnSubscribeToDelegate() {\n-        if (delegate == null || subscription == null) {\n+    private void subscribe0(SubscriptionImpl subscription, Subscriber<Object> subscriber) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0857ce69c2294ef360824b1cb7090a47b0a3cb7"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5MjQyNQ==", "bodyText": "Could you explain why we need to pass them? Can't we access them via downstreamSubscription, since ForwardingSubscriber is not a static class?", "url": "https://github.com/line/armeria/pull/2553#discussion_r388292425", "createdAt": "2020-03-05T13:29:46Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java", "diffHunk": "@@ -228,110 +232,124 @@ private void doCancel() {\n \n     @Override\n     SubscriptionImpl subscribe(SubscriptionImpl subscription) {\n-        if (!subscriptionUpdater.compareAndSet(this, null, subscription)) {\n-            final SubscriptionImpl oldSubscription = this.subscription;\n+        if (!downstreamSubscriptionUpdater.compareAndSet(this, null, subscription)) {\n+            final SubscriptionImpl oldSubscription = downstreamSubscription;\n             assert oldSubscription != null;\n             return oldSubscription;\n         }\n \n         final Subscriber<Object> subscriber = subscription.subscriber();\n         if (subscription.needsDirectInvocation()) {\n-            subscriber.onSubscribe(subscription);\n-            safeOnSubscribeToDelegate();\n+            subscribe0(subscription, subscriber);\n         } else {\n             subscription.executor().execute(() -> {\n-                subscriber.onSubscribe(subscription);\n-                safeOnSubscribeToDelegate();\n+                subscribe0(subscription, subscriber);\n             });\n         }\n \n         return subscription;\n     }\n \n-    private void safeOnSubscribeToDelegate() {\n-        if (delegate == null || subscription == null) {\n+    private void subscribe0(SubscriptionImpl subscription, Subscriber<Object> subscriber) {\n+        try {\n+            subscriber.onSubscribe(subscription);\n+        } catch (Exception e) {\n+            abort(e);\n+            return;\n+        }\n+        safeOnSubscribeToUpstream();\n+    }\n+\n+    private void safeOnSubscribeToUpstream() {\n+        final StreamMessage<T> upstream = this.upstream;\n+        final SubscriptionImpl downstreamSubscription = this.downstreamSubscription;\n+        if (upstream == null || downstreamSubscription == null) {\n             return;\n         }\n \n-        if (!subscribedToDelegateUpdater.compareAndSet(this, 0, 1)) {\n+        if (!subscribedToUpstreamUpdater.compareAndSet(this, 0, 1)) {\n             return;\n         }\n \n         final Builder<SubscriptionOption> builder = ImmutableList.builder();\n-        if (subscription.withPooledObjects()) {\n+        if (downstreamSubscription.withPooledObjects()) {\n             builder.add(SubscriptionOption.WITH_POOLED_OBJECTS);\n         }\n-        if (subscription.notifyCancellation()) {\n+        if (downstreamSubscription.notifyCancellation()) {\n             builder.add(SubscriptionOption.NOTIFY_CANCELLATION);\n         }\n \n-        delegate.subscribe(new ForwardingSubscriber(),\n-                           subscription.executor(),\n+        upstream.subscribe(new ForwardingSubscriber(downstreamSubscription.subscriber()),\n+                           downstreamSubscription.executor(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0857ce69c2294ef360824b1cb7090a47b0a3cb7"}, "originalPosition": 277}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5MjU5NQ==", "bodyText": "Ditto - 0 could be removed?", "url": "https://github.com/line/armeria/pull/2553#discussion_r388292595", "createdAt": "2020-03-05T13:30:07Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/FixedStreamMessage.java", "diffHunk": "@@ -112,14 +112,23 @@ final SubscriptionImpl subscribe(SubscriptionImpl subscription) {\n \n         final Subscriber<Object> subscriber = subscription.subscriber();\n         if (subscription.needsDirectInvocation()) {\n-            subscriber.onSubscribe(subscription);\n+            subscribe0(subscription, subscriber);\n         } else {\n-            subscription.executor().execute(() -> subscriber.onSubscribe(subscription));\n+            subscription.executor().execute(() -> subscribe0(subscription, subscriber));\n         }\n \n         return subscription;\n     }\n \n+    private void subscribe0(SubscriptionImpl subscription, Subscriber<Object> subscriber) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0857ce69c2294ef360824b1cb7090a47b0a3cb7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NDY5Nw==", "bodyText": "I wonder if we should move the tests to StreamMessageVerification.", "url": "https://github.com/line/armeria/pull/2553#discussion_r388294697", "createdAt": "2020-03-05T13:34:04Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/stream/SubscriberThrowingExceptionTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.stream;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.internal.testing.AnticipatedException;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.UnpooledByteBufAllocator;\n+import io.netty.util.concurrent.ImmediateEventExecutor;\n+\n+class SubscriberThrowingExceptionTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0857ce69c2294ef360824b1cb7090a47b0a3cb7"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e131ab1f81c276b8bc595b29bb722c58cbdf00fd", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/e131ab1f81c276b8bc595b29bb722c58cbdf00fd", "committedDate": "2020-03-06T05:47:56Z", "message": "Address comments by @trustin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMTUxODE3", "url": "https://github.com/line/armeria/pull/2553#pullrequestreview-370151817", "createdAt": "2020-03-06T08:30:02Z", "commit": {"oid": "e131ab1f81c276b8bc595b29bb722c58cbdf00fd"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwODozMDowMlrOFywnDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwODozNDo0NFrOFywudw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc2OTU0OA==", "bodyText": "I think there are Error that aren't fatal, so better to catch Throwable and we may need a propagateIfFatal like in zipkin\n// Taken from RxJava throwIfFatal, which was taken from scala\n  public static void propagateIfFatal(Throwable t) {\n    if (t instanceof VirtualMachineError) {\n      throw (VirtualMachineError) t;\n    } else if (t instanceof ThreadDeath) {\n      throw (ThreadDeath) t;\n    } else if (t instanceof LinkageError) {\n      throw (LinkageError) t;\n    }\n  }", "url": "https://github.com/line/armeria/pull/2553#discussion_r388769548", "createdAt": "2020-03-06T08:30:02Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessage.java", "diffHunk": "@@ -145,16 +149,23 @@ static void failLateSubscriber(SubscriptionImpl subscription, Subscriber<?> late\n         final Throwable cause = abortedOrLate(oldSubscriber);\n \n         if (subscription.needsDirectInvocation()) {\n-            lateSubscriber.onSubscribe(NoopSubscription.INSTANCE);\n-            lateSubscriber.onError(cause);\n+            lateSubscriber(lateSubscriber, cause);\n         } else {\n             subscription.executor().execute(() -> {\n-                lateSubscriber.onSubscribe(NoopSubscription.INSTANCE);\n-                lateSubscriber.onError(cause);\n+                lateSubscriber(lateSubscriber, cause);\n             });\n         }\n     }\n \n+    private static void lateSubscriber(Subscriber<?> lateSubscriber, Throwable cause) {\n+        try {\n+            lateSubscriber.onSubscribe(NoopSubscription.INSTANCE);\n+            lateSubscriber.onError(cause);\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4OTIzNw=="}, "originalCommit": {"oid": "d0857ce69c2294ef360824b1cb7090a47b0a3cb7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MTMyNw==", "bodyText": "I think we should complete completionFuture with this error instead of treating this as a success scenario.", "url": "https://github.com/line/armeria/pull/2553#discussion_r388771327", "createdAt": "2020-03-06T08:34:24Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessage.java", "diffHunk": "@@ -291,6 +295,9 @@ void notifySubscriber(SubscriptionImpl subscription, CompletableFuture<?> comple\n             if (cause == null) {\n                 try {\n                     subscriber.onComplete();\n+                } catch (Exception e) {\n+                    logger.warn(\"Subscriber.onComplete() should not raise an exception. subscriber: {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e131ab1f81c276b8bc595b29bb722c58cbdf00fd"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MTQ0Nw==", "bodyText": "We can probably create an exception that wraps cause and complete the future with it for this case so the exception isn't lost.", "url": "https://github.com/line/armeria/pull/2553#discussion_r388771447", "createdAt": "2020-03-06T08:34:44Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessage.java", "diffHunk": "@@ -299,6 +306,9 @@ void notifySubscriber(SubscriptionImpl subscription, CompletableFuture<?> comple\n                     if (subscription.notifyCancellation || !(cause instanceof CancelledSubscriptionException)) {\n                         subscriber.onError(cause);\n                     }\n+                } catch (Exception e) {\n+                    logger.warn(\"Subscriber.onError() should not raise an exception. subscriber: {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e131ab1f81c276b8bc595b29bb722c58cbdf00fd"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3a464142074ed2f92f3c60f192ffd32549448ea", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/f3a464142074ed2f92f3c60f192ffd32549448ea", "committedDate": "2020-03-06T13:01:16Z", "message": "Address comments by @anuraaga"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMDExNTQw", "url": "https://github.com/line/armeria/pull/2553#pullrequestreview-371011540", "createdAt": "2020-03-09T09:21:56Z", "commit": {"oid": "f3a464142074ed2f92f3c60f192ffd32549448ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOToyMTo1N1rOFzfprA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOToyMTo1N1rOFzfprA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0MDI2OA==", "bodyText": "What about OutOfMemoryError?", "url": "https://github.com/line/armeria/pull/2553#discussion_r389540268", "createdAt": "2020-03-09T09:21:57Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/util/Exceptions.java", "diffHunk": "@@ -222,6 +222,38 @@ public static boolean isStreamCancelling(Throwable cause) {\n         return null; // Never reaches here.\n     }\n \n+    // This is copied from\n+    // https://github.com/ReactiveX/RxJava/blob/v3.0.0/src/main/java/io/reactivex/rxjava3/exceptions/Exceptions.java\n+\n+    /**\n+     * Throws a particular {@code Throwable} only if it belongs to a set of \"fatal\" error varieties. These\n+     * varieties are as follows:\n+     * <ul>\n+     * <li>{@code VirtualMachineError}</li>\n+     * <li>{@code ThreadDeath}</li>\n+     * <li>{@code LinkageError}</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3a464142074ed2f92f3c60f192ffd32549448ea"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMDEyODMy", "url": "https://github.com/line/armeria/pull/2553#pullrequestreview-371012832", "createdAt": "2020-03-09T09:23:55Z", "commit": {"oid": "f3a464142074ed2f92f3c60f192ffd32549448ea"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMDEzMzk5", "url": "https://github.com/line/armeria/pull/2553#pullrequestreview-371013399", "createdAt": "2020-03-09T09:24:47Z", "commit": {"oid": "f3a464142074ed2f92f3c60f192ffd32549448ea"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOToyNDo0N1rOFzfvZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOToyNToyM1rOFzfwmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0MTczMw==", "bodyText": "2020", "url": "https://github.com/line/armeria/pull/2553#discussion_r389541733", "createdAt": "2020-03-09T09:24:47Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/util/CompositeException.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Copyright 2016 LINE Corporation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3a464142074ed2f92f3c60f192ffd32549448ea"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0MjA0MQ==", "bodyText": "Could you update NOTICE.txt and licenses/ directory?", "url": "https://github.com/line/armeria/pull/2553#discussion_r389542041", "createdAt": "2020-03-09T09:25:23Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/util/CompositeException.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c) 2016-present, RxJava Contributors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3a464142074ed2f92f3c60f192ffd32549448ea"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f2b07612ad4b41d78497a14ec3d979c6462926b", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/1f2b07612ad4b41d78497a14ec3d979c6462926b", "committedDate": "2020-03-09T09:38:43Z", "message": "Address comments by @trustin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b3e5ddf3c02382b8200039c0ae396281b6038b4", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/7b3e5ddf3c02382b8200039c0ae396281b6038b4", "committedDate": "2020-03-09T09:41:50Z", "message": "Add to notice.txt"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMDkyNjM1", "url": "https://github.com/line/armeria/pull/2553#pullrequestreview-371092635", "createdAt": "2020-03-09T11:36:27Z", "commit": {"oid": "f3a464142074ed2f92f3c60f192ffd32549448ea"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMTozNjoyN1rOFzjprg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjowNDo1NlrOFzkZ7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYwNTgwNg==", "bodyText": "This seems dead code.", "url": "https://github.com/line/armeria/pull/2553#discussion_r389605806", "createdAt": "2020-03-09T11:36:27Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java", "diffHunk": "@@ -43,21 +45,23 @@\n @UnstableApi\n public class DeferredStreamMessage<T> extends AbstractStreamMessage<T> {\n \n+    private static final Logger logger = LoggerFactory.getLogger(DeferredStreamMessage.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3a464142074ed2f92f3c60f192ffd32549448ea"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYwODIyNA==", "bodyText": "nit: not related to this PR\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Builder<SubscriptionOption> builder = ImmutableList.builder();\n          \n          \n            \n                    final ImmutableList.Builder<SubscriptionOption> builder = ImmutableList.builder();", "url": "https://github.com/line/armeria/pull/2553#discussion_r389608224", "createdAt": "2020-03-09T11:41:58Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java", "diffHunk": "@@ -228,110 +232,124 @@ private void doCancel() {\n \n     @Override\n     SubscriptionImpl subscribe(SubscriptionImpl subscription) {\n-        if (!subscriptionUpdater.compareAndSet(this, null, subscription)) {\n-            final SubscriptionImpl oldSubscription = this.subscription;\n+        if (!downstreamSubscriptionUpdater.compareAndSet(this, null, subscription)) {\n+            final SubscriptionImpl oldSubscription = downstreamSubscription;\n             assert oldSubscription != null;\n             return oldSubscription;\n         }\n \n         final Subscriber<Object> subscriber = subscription.subscriber();\n         if (subscription.needsDirectInvocation()) {\n-            subscriber.onSubscribe(subscription);\n-            safeOnSubscribeToDelegate();\n+            subscribe(subscription, subscriber);\n         } else {\n             subscription.executor().execute(() -> {\n-                subscriber.onSubscribe(subscription);\n-                safeOnSubscribeToDelegate();\n+                subscribe(subscription, subscriber);\n             });\n         }\n \n         return subscription;\n     }\n \n-    private void safeOnSubscribeToDelegate() {\n-        if (delegate == null || subscription == null) {\n+    private void subscribe(SubscriptionImpl subscription, Subscriber<Object> subscriber) {\n+        try {\n+            subscriber.onSubscribe(subscription);\n+        } catch (Exception e) {\n+            abort(e);\n+            return;\n+        }\n+        safeOnSubscribeToUpstream();\n+    }\n+\n+    private void safeOnSubscribeToUpstream() {\n+        final StreamMessage<T> upstream = this.upstream;\n+        final SubscriptionImpl downstreamSubscription = this.downstreamSubscription;\n+        if (upstream == null || downstreamSubscription == null) {\n             return;\n         }\n \n-        if (!subscribedToDelegateUpdater.compareAndSet(this, 0, 1)) {\n+        if (!subscribedToUpstreamUpdater.compareAndSet(this, 0, 1)) {\n             return;\n         }\n \n         final Builder<SubscriptionOption> builder = ImmutableList.builder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3a464142074ed2f92f3c60f192ffd32549448ea"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxMjY0OQ==", "bodyText": "Join two lines?", "url": "https://github.com/line/armeria/pull/2553#discussion_r389612649", "createdAt": "2020-03-09T11:52:18Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/util/CompositeException.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c) 2016-present, RxJava Contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.common.util;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.IdentityHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Represents an exception that is a composite of one or more other exceptions. A {@code CompositeException}\n+ * does not modify the structure of any exception it wraps, but at print-time it iterates through the list of\n+ * Throwables contained in the composite in order to print them all.\n+ *\n+ * <p>Its invariant is to contain an immutable, ordered (by insertion order), unique list of non-composite\n+ * exceptions. You can retrieve individual exceptions in this list with {@link #getExceptions()}.\n+ *\n+ * <p>The {@link #printStackTrace()} implementation handles the StackTrace in a customized way instead of using\n+ * {@code getCause()} so that it can avoid circular references.\n+ *\n+ * <p>If you invoke {@link #getCause()}, it will lazily create the causal chain but will stop if it finds any\n+ * Throwable in the chain that it has already seen.\n+ */\n+public final class CompositeException extends RuntimeException {\n+\n+    // Forked from RxJava 3.0.0 at e793bc1d1a29dca18be795cf4a7628e2d44a4234\n+\n+    private static final long serialVersionUID = 3026362227162912146L;\n+\n+    private final List<Throwable> exceptions;\n+    private final String message;\n+\n+    @Nullable\n+    private Throwable cause;\n+\n+    /**\n+     * Constructs a CompositeException with the given array of Throwables as the\n+     * list of suppressed exceptions.\n+     * @param exceptions the Throwables to have as initially suppressed exceptions\n+     *\n+     * @throws IllegalArgumentException if <code>exceptions</code> is empty.\n+     */\n+    public CompositeException(Throwable... exceptions) {\n+        this(ImmutableList.copyOf(requireNonNull(exceptions, \"exceptions\")));\n+    }\n+\n+    /**\n+     * Constructs a CompositeException with the given array of Throwables as the\n+     * list of suppressed exceptions.\n+     * @param errors the Throwables to have as initially suppressed exceptions\n+     *\n+     * @throws IllegalArgumentException if <code>errors</code> is empty.\n+     */\n+    public CompositeException(Iterable<? extends Throwable> errors) {\n+        requireNonNull(errors, \"errors\");\n+        final Set<Throwable> deDupedExceptions = new LinkedHashSet<>();\n+        for (Throwable ex : errors) {\n+            if (ex instanceof CompositeException) {\n+                deDupedExceptions.addAll(((CompositeException) ex).getExceptions());\n+            } else if (ex != null) {\n+                deDupedExceptions.add(ex);\n+            } else {\n+                deDupedExceptions.add(new NullPointerException(\"Throwable was null!\"));\n+            }\n+        }\n+        if (deDupedExceptions.isEmpty()) {\n+            throw new IllegalArgumentException(\"errors is empty\");\n+        }\n+        final List<Throwable> localExceptions = new ArrayList<>(deDupedExceptions);\n+        exceptions = Collections.unmodifiableList(localExceptions);\n+        message = exceptions.size() + \" exceptions occurred. \";\n+    }\n+\n+    /**\n+     * Retrieves the list of exceptions that make up the {@code CompositeException}.\n+     *\n+     * @return the exceptions that make up the {@code CompositeException},\n+     *         as a {@link List} of {@link Throwable}s\n+     */\n+    public List<Throwable> getExceptions() {\n+        return exceptions;\n+    }\n+\n+    @Override\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    @Override\n+    public synchronized Throwable getCause() { // NOPMD\n+        if (cause == null) {\n+            final String separator = System.getProperty(\"line.separator\");\n+            if (exceptions.size() > 1) {\n+                final Map<Throwable, Boolean> seenCauses = new IdentityHashMap<>();\n+\n+                final StringBuilder aggregateMessage = new StringBuilder();\n+                aggregateMessage.append(\"Multiple exceptions (\").append(exceptions.size()).append(')').append(\n+                        separator);\n+\n+                for (Throwable inner : exceptions) {\n+                    int depth = 0;\n+                    while (inner != null) {\n+                        for (int i = 0; i < depth; i++) {\n+                            aggregateMessage.append(\"  \");\n+                        }\n+                        aggregateMessage.append(\"|-- \");\n+                        aggregateMessage.append(inner.getClass().getCanonicalName()).append(\": \");\n+                        final String innerMessage = inner.getMessage();\n+                        if (innerMessage != null && innerMessage.contains(separator)) {\n+                            aggregateMessage.append(separator);\n+                            for (String line : innerMessage.split(separator)) {\n+                                for (int i = 0; i < depth + 2; i++) {\n+                                    aggregateMessage.append(\"  \");\n+                                }\n+                                aggregateMessage.append(line).append(separator);\n+                            }\n+                        } else {\n+                            aggregateMessage.append(innerMessage);\n+                            aggregateMessage.append(separator);\n+                        }\n+\n+                        for (int i = 0; i < depth + 2; i++) {\n+                            aggregateMessage.append(\"  \");\n+                        }\n+                        final StackTraceElement[] st = inner.getStackTrace();\n+                        if (st.length > 0) {\n+                            aggregateMessage.append(\"at \").append(st[0]).append(separator);\n+                        }\n+\n+                        if (!seenCauses.containsKey(inner)) {\n+                            seenCauses.put(inner, true);\n+\n+                            inner = inner.getCause();\n+                            depth++;\n+                        } else {\n+                            inner = inner.getCause();\n+                            if (inner != null) {\n+                                for (int i = 0; i < depth + 2; i++) {\n+                                    aggregateMessage.append(\"  \");\n+                                }\n+                                aggregateMessage.append(\"|-- \");\n+                                aggregateMessage.append(\"(cause not expanded again) \");\n+                                aggregateMessage.append(inner.getClass().getCanonicalName()).append(\": \");\n+                                aggregateMessage.append(inner.getMessage());\n+                                aggregateMessage.append(separator);\n+                            }\n+                            break;\n+                        }\n+                    }\n+                }\n+\n+                cause = new ExceptionOverview(aggregateMessage.toString().trim());\n+            } else {\n+                cause = exceptions.get(0);\n+            }\n+        }\n+        return cause;\n+    }\n+\n+    /**\n+     * All of the following {@code printStackTrace} functionality is derived from JDK {@link Throwable}\n+     * {@code printStackTrace}. In particular, the {@code PrintStreamOrWriter} abstraction is copied wholesale.\n+     *\n+     * <p>Changes from the official JDK implementation:<ul>\n+     * <li>no infinite loop detection</li>\n+     * <li>smaller critical section holding {@link PrintStream} lock</li>\n+     * <li>explicit knowledge about the exceptions {@link List} that this loops through</li>\n+     * </ul>\n+     */\n+    @Override\n+    public void printStackTrace() {\n+        printStackTrace(System.err);\n+    }\n+\n+    @Override\n+    public void printStackTrace(PrintStream s) {\n+        printStackTrace(new WrappedPrintStream(s));\n+    }\n+\n+    @Override\n+    public void printStackTrace(PrintWriter s) {\n+        printStackTrace(new WrappedPrintWriter(s));\n+    }\n+\n+    /**\n+     * Special handling for printing out a {@code CompositeException}.\n+     * Loops through all inner exceptions and prints them out.\n+     *\n+     * @param s\n+     *            stream to print to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3a464142074ed2f92f3c60f192ffd32549448ea"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxNDQyMg==", "bodyText": "Could replace with?:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final List<Throwable> localExceptions = new ArrayList<>(deDupedExceptions);\n          \n          \n            \n                    exceptions = Collections.unmodifiableList(localExceptions);\n          \n          \n            \n                    exceptions = ImmutableList.copyOf(deDupedExceptions);", "url": "https://github.com/line/armeria/pull/2553#discussion_r389614422", "createdAt": "2020-03-09T11:56:27Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/util/CompositeException.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c) 2016-present, RxJava Contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.common.util;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.IdentityHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Represents an exception that is a composite of one or more other exceptions. A {@code CompositeException}\n+ * does not modify the structure of any exception it wraps, but at print-time it iterates through the list of\n+ * Throwables contained in the composite in order to print them all.\n+ *\n+ * <p>Its invariant is to contain an immutable, ordered (by insertion order), unique list of non-composite\n+ * exceptions. You can retrieve individual exceptions in this list with {@link #getExceptions()}.\n+ *\n+ * <p>The {@link #printStackTrace()} implementation handles the StackTrace in a customized way instead of using\n+ * {@code getCause()} so that it can avoid circular references.\n+ *\n+ * <p>If you invoke {@link #getCause()}, it will lazily create the causal chain but will stop if it finds any\n+ * Throwable in the chain that it has already seen.\n+ */\n+public final class CompositeException extends RuntimeException {\n+\n+    // Forked from RxJava 3.0.0 at e793bc1d1a29dca18be795cf4a7628e2d44a4234\n+\n+    private static final long serialVersionUID = 3026362227162912146L;\n+\n+    private final List<Throwable> exceptions;\n+    private final String message;\n+\n+    @Nullable\n+    private Throwable cause;\n+\n+    /**\n+     * Constructs a CompositeException with the given array of Throwables as the\n+     * list of suppressed exceptions.\n+     * @param exceptions the Throwables to have as initially suppressed exceptions\n+     *\n+     * @throws IllegalArgumentException if <code>exceptions</code> is empty.\n+     */\n+    public CompositeException(Throwable... exceptions) {\n+        this(ImmutableList.copyOf(requireNonNull(exceptions, \"exceptions\")));\n+    }\n+\n+    /**\n+     * Constructs a CompositeException with the given array of Throwables as the\n+     * list of suppressed exceptions.\n+     * @param errors the Throwables to have as initially suppressed exceptions\n+     *\n+     * @throws IllegalArgumentException if <code>errors</code> is empty.\n+     */\n+    public CompositeException(Iterable<? extends Throwable> errors) {\n+        requireNonNull(errors, \"errors\");\n+        final Set<Throwable> deDupedExceptions = new LinkedHashSet<>();\n+        for (Throwable ex : errors) {\n+            if (ex instanceof CompositeException) {\n+                deDupedExceptions.addAll(((CompositeException) ex).getExceptions());\n+            } else if (ex != null) {\n+                deDupedExceptions.add(ex);\n+            } else {\n+                deDupedExceptions.add(new NullPointerException(\"Throwable was null!\"));\n+            }\n+        }\n+        if (deDupedExceptions.isEmpty()) {\n+            throw new IllegalArgumentException(\"errors is empty\");\n+        }\n+        final List<Throwable> localExceptions = new ArrayList<>(deDupedExceptions);\n+        exceptions = Collections.unmodifiableList(localExceptions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3a464142074ed2f92f3c60f192ffd32549448ea"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxNTg1Mw==", "bodyText": "nit: Merge two lines?", "url": "https://github.com/line/armeria/pull/2553#discussion_r389615853", "createdAt": "2020-03-09T11:59:28Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/util/Exceptions.java", "diffHunk": "@@ -222,6 +222,38 @@ public static boolean isStreamCancelling(Throwable cause) {\n         return null; // Never reaches here.\n     }\n \n+    // This is copied from\n+    // https://github.com/ReactiveX/RxJava/blob/v3.0.0/src/main/java/io/reactivex/rxjava3/exceptions/Exceptions.java\n+\n+    /**\n+     * Throws a particular {@code Throwable} only if it belongs to a set of \"fatal\" error varieties. These\n+     * varieties are as follows:\n+     * <ul>\n+     * <li>{@code VirtualMachineError}</li>\n+     * <li>{@code ThreadDeath}</li>\n+     * <li>{@code LinkageError}</li>\n+     * </ul>\n+     * This can be useful if you are writing an operator that calls user-supplied code, and you want to\n+     * notify subscribers of errors encountered in that code by calling their {@code onError} methods, but only\n+     * if the errors are not so catastrophic that such a call would be futile, in which case you simply want to\n+     * rethrow the error.\n+     *\n+     * @param t\n+     *         the {@code Throwable} to test and perhaps throw", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3a464142074ed2f92f3c60f192ffd32549448ea"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxODE1Ng==", "bodyText": "I'm not strong. I think we don't need to check null here. Because a user might not expect NPE here.", "url": "https://github.com/line/armeria/pull/2553#discussion_r389618156", "createdAt": "2020-03-09T12:04:56Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/util/Exceptions.java", "diffHunk": "@@ -222,6 +222,38 @@ public static boolean isStreamCancelling(Throwable cause) {\n         return null; // Never reaches here.\n     }\n \n+    // This is copied from\n+    // https://github.com/ReactiveX/RxJava/blob/v3.0.0/src/main/java/io/reactivex/rxjava3/exceptions/Exceptions.java\n+\n+    /**\n+     * Throws a particular {@code Throwable} only if it belongs to a set of \"fatal\" error varieties. These\n+     * varieties are as follows:\n+     * <ul>\n+     * <li>{@code VirtualMachineError}</li>\n+     * <li>{@code ThreadDeath}</li>\n+     * <li>{@code LinkageError}</li>\n+     * </ul>\n+     * This can be useful if you are writing an operator that calls user-supplied code, and you want to\n+     * notify subscribers of errors encountered in that code by calling their {@code onError} methods, but only\n+     * if the errors are not so catastrophic that such a call would be futile, in which case you simply want to\n+     * rethrow the error.\n+     *\n+     * @param t\n+     *         the {@code Throwable} to test and perhaps throw\n+     * @see <a href=\"https://github.com/ReactiveX/RxJava/issues/748#issuecomment-32471495\">\n+     *     RxJava: StackOverflowError is swallowed (Issue #748)</a>\n+     */\n+    public static void throwIfFatal(Throwable t) {\n+        requireNonNull(t, \"t\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3a464142074ed2f92f3c60f192ffd32549448ea"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e2d5861207a3bec461e8ef4c47d4bd56785d696", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/3e2d5861207a3bec461e8ef4c47d4bd56785d696", "committedDate": "2020-03-10T01:24:04Z", "message": "Address comments by @ikhoon and @trustin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8893ee68857a79c51ac171fd7e9a178fb6d26cef", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/8893ee68857a79c51ac171fd7e9a178fb6d26cef", "committedDate": "2020-03-10T01:54:57Z", "message": "Address comments by @ikhoon"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjQ5MjE1", "url": "https://github.com/line/armeria/pull/2553#pullrequestreview-371649215", "createdAt": "2020-03-10T02:46:53Z", "commit": {"oid": "3e2d5861207a3bec461e8ef4c47d4bd56785d696"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMjo0Njo1M1rOFz_x9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMjo0Njo1M1rOFz_x9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2NjY3Ng==", "bodyText": "Revert?", "url": "https://github.com/line/armeria/pull/2553#discussion_r390066676", "createdAt": "2020-03-10T02:46:53Z", "author": {"login": "trustin"}, "path": "NOTICE.txt", "diffHunk": "@@ -277,10 +282,10 @@ This product depends on Retrofit, distributed by Square:\n   * License: licenses/LICENSE.retrofit.al20.txt (Apache License v2.0)\n   * Homepage: https://square.github.io/retrofit/\n \n-  This product depends on RxJava, distributed by RxJava Contributors:\n+This product depends on RxJava, distributed by RxJava Contributors:\n \n-    * License: licenses/LICENSE.rxjava.al20.txt (Apache License v2.0)\n-    * Homepage: https://github.com/ReactiveX/RxJava\n+  * License: licenses/LICENSE.rxjava.al20.txt (Apache License v2.0)\n+  * Homepage: https://github.com/ReactiveX/RxJava", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e2d5861207a3bec461e8ef4c47d4bd56785d696"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjc4NTI1", "url": "https://github.com/line/armeria/pull/2553#pullrequestreview-371678525", "createdAt": "2020-03-10T04:41:30Z", "commit": {"oid": "8893ee68857a79c51ac171fd7e9a178fb6d26cef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 648, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}