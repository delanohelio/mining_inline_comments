{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMjA1MjAw", "number": 2965, "title": "Ignore CancelledSubscription when handling HTTP HEAD", "bodyText": "Motivation:\nWhen HTTP HEAD request is handled by Spring WebFlux's RouterFunction and\nRouterFunction returns ServerResponse without body,\n(like route(HEAD(\"/monitor/l7check\"), request -> ok().build()))\nCancelledSubscriptionException is exposed to application leaving error logs like below.\n2020-08-03 22:41:31.310 DEBUG 69471 --- [-worker-nio-2-1] o.s.w.s.adapter.HttpWebHandlerAdapter    : [1fa05b2c8118e6cf] HTTP HEAD \"/monitor/l7check\"\n2020-08-03 22:41:31.356 DEBUG 69471 --- [-worker-nio-2-1] o.s.w.r.f.s.s.RouterFunctionMapping      : [1fa05b2c8118e6cf] Mapped to org.springframework.web.reactive.function.server.RouterFunctionDsl$HEAD$1@2bd0af50\n2020-08-03 22:41:31.393 ERROR 69471 --- [-worker-nio-2-1] o.s.w.s.adapter.HttpWebHandlerAdapter    : [1fa05b2c8118e6cf] Error [com.linecorp.armeria.common.stream.CancelledSubscriptionException] for HTTP HEAD \"/monitor/l7check\", but ServerHttpResponse already committed (200 OK)\n\nCause\nSubscription is cancelled even though a HTTP HEAD response does not have message-body,\nand CancelledSubscriptionException can't be ignored at ArmeriaServerHttpResponse#write() done at\nPR: Ignore CancelledSubscriptionException and AbortedStreamException  defect\nbecause ArmeriaServerHttpResponse#write() is never invoked when response has no message-body.\n(-> that's why response with body can ignore CancelledSubscriptionException)\nRelated PR\nIgnore CancelledSubscriptionException and AbortedStreamException  defect\nModifications:\nAS-IS:\nSubscription is cancelled at the first HttpResponseSubscriber#onNext(), when HttpHeader is published by response.\nbut CancelledSubscriptionException is not ignored by ArmeriaServerHttpResponse#cleanup\nTO-BE:\nIgnore CancelledSubscriptionException generated when HttpResponseSubscriber#onNext cancels subscription for HTTP HEAD\nResult:\nCancelledSubscriptionException does not occur for HTTP HEAD request, not leaving error logs", "createdAt": "2020-08-03T14:17:24Z", "url": "https://github.com/line/armeria/pull/2965", "merged": true, "mergeCommit": {"oid": "fbd9fc72b8f5d715072d1d71d8e485f78c0fb306"}, "closed": true, "closedAt": "2020-08-06T08:00:11Z", "author": {"login": "eunchan-kim"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7Sx98gBqjM2MTYxMzkyMDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8LHhzgFqTQ2MjI3MzkzOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "13e6e123c949a621877c3706be0ea562ecfd2bd3", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/13e6e123c949a621877c3706be0ea562ecfd2bd3", "committedDate": "2020-08-03T13:29:00Z", "message": "Fix not to propagate CancelledSubscription to Spring when handling HTTP HEAD"}, "afterCommit": {"oid": "108010745f9118a00a597319cd07cc9af6538900", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/108010745f9118a00a597319cd07cc9af6538900", "committedDate": "2020-08-03T14:20:11Z", "message": "Fix not to propagate CancelledSubscription when handling HTTP HEAD"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "108010745f9118a00a597319cd07cc9af6538900", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/108010745f9118a00a597319cd07cc9af6538900", "committedDate": "2020-08-03T14:20:11Z", "message": "Fix not to propagate CancelledSubscription when handling HTTP HEAD"}, "afterCommit": {"oid": "5f71647c5c65981825b4982d3f09b44472099ade", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/5f71647c5c65981825b4982d3f09b44472099ade", "committedDate": "2020-08-03T14:21:13Z", "message": "Fix not to generate CancelledSubscription when handling HTTP HEAD"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f71647c5c65981825b4982d3f09b44472099ade", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/5f71647c5c65981825b4982d3f09b44472099ade", "committedDate": "2020-08-03T14:21:13Z", "message": "Fix not to generate CancelledSubscription when handling HTTP HEAD"}, "afterCommit": {"oid": "ef164fc58b2396e2848bb74f6d5e59cf2ca6c61b", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/ef164fc58b2396e2848bb74f6d5e59cf2ca6c61b", "committedDate": "2020-08-03T14:23:20Z", "message": "Fix not to generate CancelledSubscription when handling HTTP HEAD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2b7f3cb48a0194ffa870531b1454a087e02d037", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/a2b7f3cb48a0194ffa870531b1454a087e02d037", "committedDate": "2020-08-04T02:06:44Z", "message": "Fix not to generate CancelledSubscription when handling HTTP HEAD"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef164fc58b2396e2848bb74f6d5e59cf2ca6c61b", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/ef164fc58b2396e2848bb74f6d5e59cf2ca6c61b", "committedDate": "2020-08-03T14:23:20Z", "message": "Fix not to generate CancelledSubscription when handling HTTP HEAD"}, "afterCommit": {"oid": "a2b7f3cb48a0194ffa870531b1454a087e02d037", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/a2b7f3cb48a0194ffa870531b1454a087e02d037", "committedDate": "2020-08-04T02:06:44Z", "message": "Fix not to generate CancelledSubscription when handling HTTP HEAD"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDU2ODUx", "url": "https://github.com/line/armeria/pull/2965#pullrequestreview-460456851", "createdAt": "2020-08-04T02:37:08Z", "commit": {"oid": "a2b7f3cb48a0194ffa870531b1454a087e02d037"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjozNzowOFrOG7O9Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjozNzowOFrOG7O9Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2NDIwNw==", "bodyText": "I wanted to assert that HttpWebHandlerAdapter#handleUnresolvedError is never invoked due to CancelledSubscriptionException,\nbut couldn't find an appropriate way to test it...\n(I looked for a way to test logEvent of HttpWebHandlerAdapter's log, but failed to do that)\nIt would be very helpful if I can get some advices here", "url": "https://github.com/line/armeria/pull/2965#discussion_r464764207", "createdAt": "2020-08-04T02:37:08Z", "author": {"login": "eunchan-kim"}, "path": "spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ReactiveWebServerLoadBalancerInteropTest.java", "diffHunk": "@@ -46,46 +54,91 @@\n     static class TestConfiguration {\n         @RestController\n         static class TestController {\n-            @GetMapping(\"/api/ping\")\n+            @GetMapping(\"/controller/api/ping\")\n             Mono<String> ping() {\n                 return Mono.just(\"PONG\");\n             }\n         }\n+\n+        @Bean\n+        RouterFunction<ServerResponse> routerFunction() {\n+            return route(GET(\"/router/api/poke\"), request -> ok().build())\n+                    .and(route(HEAD(\"/router/api/poke\"), request -> ok().build()))\n+                    .and(route(HEAD(\"/router/api/ping\"), request -> ok().body(fromValue(\"PONG\"))));\n+        }\n     }\n \n     @LocalServerPort\n     int port;\n \n     @Test\n-    void get() throws Exception {\n-        try (Socket s = new Socket(NetUtil.LOCALHOST4, port)) {\n-            s.setSoTimeout(10000);\n-            final InputStream in = s.getInputStream();\n-            final OutputStream out = s.getOutputStream();\n-            out.write(\"GET /api/ping HTTP/1.0\\r\\n\\r\\n\".getBytes(StandardCharsets.US_ASCII));\n-\n-            // Should not be chunked.\n-            assertThat(new String(ByteStreams.toByteArray(in))).isEqualTo(\n-                    \"HTTP/1.1 200 OK\\r\\n\" +\n-                    \"content-type: text/plain;charset=UTF-8\\r\\n\" +\n-                    \"content-length: 4\\r\\n\\r\\n\" +\n-                    \"PONG\");\n-        }\n+    void getToController() throws Exception {\n+        // TODO: Need to assert that CancelledSubscriptionException is not propagated to HttpWebHandlerAdapter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b7f3cb48a0194ffa870531b1454a087e02d037"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDc4MjU5", "url": "https://github.com/line/armeria/pull/2965#pullrequestreview-460478259", "createdAt": "2020-08-04T03:53:50Z", "commit": {"oid": "a2b7f3cb48a0194ffa870531b1454a087e02d037"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzo1Mzo1MFrOG7QH9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzo1Mzo1MFrOG7QH9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4MzM1MQ==", "bodyText": "GET and HEAD request can have a body, although it's not used often, so this fix is not correct. We should perhaps touch the WebFlux side.", "url": "https://github.com/line/armeria/pull/2965#discussion_r464783351", "createdAt": "2020-08-04T03:53:50Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java", "diffHunk": "@@ -155,9 +155,7 @@ public void onNext(HttpObject o) {\n                     }\n                     merged = headers;\n                 } else {\n-                    if (req.method() == HttpMethod.HEAD) {\n-                        endOfStream = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b7f3cb48a0194ffa870531b1454a087e02d037"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f646e85b50d016b6e665c1ec6f3f5ca061b67f4", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/3f646e85b50d016b6e665c1ec6f3f5ca061b67f4", "committedDate": "2020-08-05T07:59:54Z", "message": "Additional test cases for HEAD with H1C and H2C"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1e625ec20f6c1071ad40d474d646dda7b7bbf68", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/c1e625ec20f6c1071ad40d474d646dda7b7bbf68", "committedDate": "2020-08-05T07:55:16Z", "message": "Let ArmeriaServerHttpResponse ignore CancelledSubscriptionException"}, "afterCommit": {"oid": "6cfdf9ce11972a763669357d8ed96d4ea4ed9711", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/6cfdf9ce11972a763669357d8ed96d4ea4ed9711", "committedDate": "2020-08-05T08:00:17Z", "message": "Let ArmeriaServerHttpResponse ignore CancelledSubscriptionException"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNTQ0NzM3", "url": "https://github.com/line/armeria/pull/2965#pullrequestreview-461544737", "createdAt": "2020-08-05T10:43:23Z", "commit": {"oid": "6cfdf9ce11972a763669357d8ed96d4ea4ed9711"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDo0MzoyNFrOG8EJVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDo0MzoyNFrOG8EJVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNTY2OA==", "bodyText": "Don't we need to check ctx.request().method() == HttpMethod.HEAD?", "url": "https://github.com/line/armeria/pull/2965#discussion_r465635668", "createdAt": "2020-08-05T10:43:24Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponse.java", "diffHunk": "@@ -287,7 +287,18 @@ public HttpHeaders getHeaders() {\n         final HttpResponse response = HttpResponse.of(buildResponseHeaders());\n         future.complete(response);\n         logger.debug(\"{} Response future has been completed with an HttpResponse\", ctx);\n-        return Mono.fromFuture(response.whenComplete());\n+\n+        final CompletableFuture<Void> monoFuture = new CompletableFuture<>();\n+        response.whenComplete().handle((unused, cause1) -> {\n+            if (cause1 != null && !(cause1 instanceof CancelledSubscriptionException)) {\n+                monoFuture.completeExceptionally(cause1);\n+            } else {\n+                // ignore CancelledSubscriptionException created when handling HTTP HEAD request", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cfdf9ce11972a763669357d8ed96d4ea4ed9711"}, "originalPosition": 11}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6cfdf9ce11972a763669357d8ed96d4ea4ed9711", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/6cfdf9ce11972a763669357d8ed96d4ea4ed9711", "committedDate": "2020-08-05T08:00:17Z", "message": "Let ArmeriaServerHttpResponse ignore CancelledSubscriptionException"}, "afterCommit": {"oid": "27fb366d5ec7cb22de93409e40e3affde411b00b", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/27fb366d5ec7cb22de93409e40e3affde411b00b", "committedDate": "2020-08-05T11:09:22Z", "message": "Let ArmeriaServerHttpResponse ignore CancelledSubscriptionException for HEAD"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "27fb366d5ec7cb22de93409e40e3affde411b00b", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/27fb366d5ec7cb22de93409e40e3affde411b00b", "committedDate": "2020-08-05T11:09:22Z", "message": "Let ArmeriaServerHttpResponse ignore CancelledSubscriptionException for HEAD"}, "afterCommit": {"oid": "6e0dbc34e9a617176eb1027e3355e5a8f2e43163", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/6e0dbc34e9a617176eb1027e3355e5a8f2e43163", "committedDate": "2020-08-05T11:10:57Z", "message": "Let ArmeriaServerHttpResponse ignore CancelledSubscriptionException for HEAD"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e0dbc34e9a617176eb1027e3355e5a8f2e43163", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/6e0dbc34e9a617176eb1027e3355e5a8f2e43163", "committedDate": "2020-08-05T11:10:57Z", "message": "Let ArmeriaServerHttpResponse ignore CancelledSubscriptionException for HEAD"}, "afterCommit": {"oid": "23d8ff8fbd9ce1f446fe94a6e98d73f93ab2013d", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/23d8ff8fbd9ce1f446fe94a6e98d73f93ab2013d", "committedDate": "2020-08-06T02:35:31Z", "message": "Let ArmeriaServerHttpResponse ignore CancelledSubscriptionException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e028eee0def72a380bac1ce16f27d4d2138bb6fc", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/e028eee0def72a380bac1ce16f27d4d2138bb6fc", "committedDate": "2020-08-06T03:03:11Z", "message": "Let ArmeriaServerHttpResponse ignore CancelledSubscriptionException"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "23d8ff8fbd9ce1f446fe94a6e98d73f93ab2013d", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/23d8ff8fbd9ce1f446fe94a6e98d73f93ab2013d", "committedDate": "2020-08-06T02:35:31Z", "message": "Let ArmeriaServerHttpResponse ignore CancelledSubscriptionException"}, "afterCommit": {"oid": "e028eee0def72a380bac1ce16f27d4d2138bb6fc", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/e028eee0def72a380bac1ce16f27d4d2138bb6fc", "committedDate": "2020-08-06T03:03:11Z", "message": "Let ArmeriaServerHttpResponse ignore CancelledSubscriptionException"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTU3NjAw", "url": "https://github.com/line/armeria/pull/2965#pullrequestreview-462157600", "createdAt": "2020-08-06T03:12:21Z", "commit": {"oid": "e028eee0def72a380bac1ce16f27d4d2138bb6fc"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzoxMjoyMlrOG8hsIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzoxMjoyMlrOG8hsIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjExOTcxNQ==", "bodyText": "nit: extra space in { }.", "url": "https://github.com/line/armeria/pull/2965#discussion_r466119715", "createdAt": "2020-08-06T03:12:22Z", "author": {"login": "minwoox"}, "path": "spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponseTest.java", "diffHunk": "@@ -171,6 +172,30 @@ void returnHeadersAndBody() throws Exception {\n         await().until(() -> httpResponse.whenComplete().isDone());\n     }\n \n+    @Test\n+    void ignoreCancelledSubscriptionException() throws Exception {\n+        final ServiceRequestContext ctx = ServiceRequestContext.of(HttpRequest.of(HttpMethod.HEAD, \"/\"));\n+\n+        final CompletableFuture<HttpResponse> future = new CompletableFuture<>();\n+        final ArmeriaServerHttpResponse response = response(ctx, future);\n+\n+        response.setStatusCode(HttpStatus.OK);\n+        response.getHeaders().add(\"Armeria\", \"awesome\");\n+        assertThat(future.isDone()).isFalse();\n+\n+        StepVerifier.create(Mono.defer(response::setComplete))\n+                    .then(() -> {\n+                        try {\n+                            // throw CancelledSubscriptionException as HttpResponseSubscriber\n+                            // cancels subscription for HTTP HEAD\n+                            final HttpResponse httpResponse = future.get();\n+                            httpResponse.whenComplete()\n+                                        .completeExceptionally(CancelledSubscriptionException.get());\n+                        } catch (Throwable ignored) { }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e028eee0def72a380bac1ce16f27d4d2138bb6fc"}, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e4bb91de989b8fcae404c9071cf5278a0f2a04a4", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/e4bb91de989b8fcae404c9071cf5278a0f2a04a4", "committedDate": "2020-08-06T03:29:01Z", "message": "Add newline to unused catch block"}, "afterCommit": {"oid": "b65b3c956fdf34c7c6a5fa4a2cd5466b3d3bab81", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/b65b3c956fdf34c7c6a5fa4a2cd5466b3d3bab81", "committedDate": "2020-08-06T05:05:10Z", "message": "Add new line to unused catch block"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77a5352d064068810aa13cc35653d869c0980f9e", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/77a5352d064068810aa13cc35653d869c0980f9e", "committedDate": "2020-08-06T05:26:06Z", "message": "Add newline to unused catch block"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b65b3c956fdf34c7c6a5fa4a2cd5466b3d3bab81", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/b65b3c956fdf34c7c6a5fa4a2cd5466b3d3bab81", "committedDate": "2020-08-06T05:05:10Z", "message": "Add new line to unused catch block"}, "afterCommit": {"oid": "77a5352d064068810aa13cc35653d869c0980f9e", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/77a5352d064068810aa13cc35653d869c0980f9e", "committedDate": "2020-08-06T05:26:06Z", "message": "Add newline to unused catch block"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTk2MzU5", "url": "https://github.com/line/armeria/pull/2965#pullrequestreview-462196359", "createdAt": "2020-08-06T05:25:51Z", "commit": {"oid": "b65b3c956fdf34c7c6a5fa4a2cd5466b3d3bab81"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNToyNTo1MVrOG8jxLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNTozNDo1NVrOG8j7ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1Mzc3Mg==", "bodyText": "nit: Could use HttpHeaderNames.CONTENT_LENGTH", "url": "https://github.com/line/armeria/pull/2965#discussion_r466153772", "createdAt": "2020-08-06T05:25:51Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ReactiveWebServerLoadBalancerInteropTest.java", "diffHunk": "@@ -46,46 +62,91 @@\n     static class TestConfiguration {\n         @RestController\n         static class TestController {\n-            @GetMapping(\"/api/ping\")\n+            @GetMapping(\"/controller/api/ping\")\n             Mono<String> ping() {\n                 return Mono.just(\"PONG\");\n             }\n         }\n+\n+        @Bean\n+        RouterFunction<ServerResponse> routerFunction() {\n+            return route(GET(\"/router/api/ping\"), request -> ok().body(fromValue(\"PONG\")))\n+                    .and(route(HEAD(\"/router/api/ping\"), request -> ok().body(fromValue(\"PONG\")))\n+                    .and(route(HEAD(\"/router/api/poke\"), request -> ok().build())));\n+        }\n     }\n \n     @LocalServerPort\n     int port;\n \n-    @Test\n-    void get() throws Exception {\n-        try (Socket s = new Socket(NetUtil.LOCALHOST4, port)) {\n-            s.setSoTimeout(10000);\n-            final InputStream in = s.getInputStream();\n-            final OutputStream out = s.getOutputStream();\n-            out.write(\"GET /api/ping HTTP/1.0\\r\\n\\r\\n\".getBytes(StandardCharsets.US_ASCII));\n-\n-            // Should not be chunked.\n-            assertThat(new String(ByteStreams.toByteArray(in))).isEqualTo(\n-                    \"HTTP/1.1 200 OK\\r\\n\" +\n-                    \"content-type: text/plain;charset=UTF-8\\r\\n\" +\n-                    \"content-length: 4\\r\\n\\r\\n\" +\n-                    \"PONG\");\n-        }\n+    Logger httpWebHandlerAdapterLogger;\n+    final ListAppender<ILoggingEvent> logAppender = new ListAppender<>();\n+\n+    @BeforeEach\n+    public void attachAppender() {\n+        httpWebHandlerAdapterLogger = (Logger) LoggerFactory.getLogger(HttpWebHandlerAdapter.class);\n+        logAppender.start();\n+        httpWebHandlerAdapterLogger.addAppender(logAppender);\n     }\n \n-    @Test\n-    void head() throws Exception {\n-        try (Socket s = new Socket(NetUtil.LOCALHOST4, port)) {\n-            s.setSoTimeout(10000);\n-            final InputStream in = s.getInputStream();\n-            final OutputStream out = s.getOutputStream();\n-            out.write(\"HEAD /api/ping HTTP/1.0\\r\\n\\r\\n\".getBytes(StandardCharsets.US_ASCII));\n-\n-            // Should neither be chunked nor have content.\n-            assertThat(new String(ByteStreams.toByteArray(in))).isEqualTo(\n-                    \"HTTP/1.1 200 OK\\r\\n\" +\n-                    \"content-type: text/plain;charset=UTF-8\\r\\n\" +\n-                    \"content-length: 4\\r\\n\\r\\n\");\n+    @AfterEach\n+    public void detachAppender() {\n+        httpWebHandlerAdapterLogger.detachAppender(logAppender);\n+        logAppender.list.clear();\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource({\n+            \"H1C, /controller/api/ping\",\n+            \"H2C, /router/api/ping\"\n+    })\n+    void testGet(SessionProtocol sessionProtocol, String path) {\n+        final String uri = sessionProtocol.uriText() + \"://127.0.0.1:\" + port;\n+        final WebClient webClient = WebClient.of(uri);\n+        final AggregatedHttpResponse res = webClient.get(path).aggregate().join();\n+\n+        assertThat(res.status()).isSameAs(HttpStatus.OK);\n+        assertThat(res.contentType()).isSameAs(MediaType.PLAIN_TEXT_UTF_8);\n+        assertThat(res.headers().get(\"content-length\")).isEqualTo(\"4\");\n+        assertThat(res.content().toStringUtf8()).isEqualTo(\"PONG\");\n+        assertNoErrorLogByHttpWebHandlerAdapter();\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource({\n+            \"H1C, /controller/api/ping, 4\",\n+            \"H2C, /controller/api/ping, 4\",\n+            \"H1C, /router/api/ping, 4\",\n+            \"H2C, /router/api/ping, 4\",\n+            \"H2C, /router/api/poke, 0\",\n+            \"H1C, /router/api/poke, 0\"\n+    })\n+    void testHead(SessionProtocol sessionProtocol, String path, int contentLength) {\n+        final String uri = sessionProtocol.uriText() + \"://127.0.0.1:\" + port;\n+        final WebClient webClient = WebClient.of(uri);\n+        final AggregatedHttpResponse res = webClient.head(path).aggregate().join();\n+\n+        assertThat(res.status()).isSameAs(HttpStatus.OK);\n+        assertThat(res.content().isEmpty()).isTrue();\n+\n+        if (contentLength > 0) {\n+            assertThat(res.contentType()).isSameAs(MediaType.PLAIN_TEXT_UTF_8);\n+            assertThat(res.headers().get(\"content-length\")).isEqualTo(String.valueOf(contentLength));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b65b3c956fdf34c7c6a5fa4a2cd5466b3d3bab81"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NDIzMQ==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .hasSize(0);\n          \n          \n            \n                            .isEmpty();", "url": "https://github.com/line/armeria/pull/2965#discussion_r466154231", "createdAt": "2020-08-06T05:27:32Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ReactiveWebServerLoadBalancerInteropTest.java", "diffHunk": "@@ -46,46 +62,91 @@\n     static class TestConfiguration {\n         @RestController\n         static class TestController {\n-            @GetMapping(\"/api/ping\")\n+            @GetMapping(\"/controller/api/ping\")\n             Mono<String> ping() {\n                 return Mono.just(\"PONG\");\n             }\n         }\n+\n+        @Bean\n+        RouterFunction<ServerResponse> routerFunction() {\n+            return route(GET(\"/router/api/ping\"), request -> ok().body(fromValue(\"PONG\")))\n+                    .and(route(HEAD(\"/router/api/ping\"), request -> ok().body(fromValue(\"PONG\")))\n+                    .and(route(HEAD(\"/router/api/poke\"), request -> ok().build())));\n+        }\n     }\n \n     @LocalServerPort\n     int port;\n \n-    @Test\n-    void get() throws Exception {\n-        try (Socket s = new Socket(NetUtil.LOCALHOST4, port)) {\n-            s.setSoTimeout(10000);\n-            final InputStream in = s.getInputStream();\n-            final OutputStream out = s.getOutputStream();\n-            out.write(\"GET /api/ping HTTP/1.0\\r\\n\\r\\n\".getBytes(StandardCharsets.US_ASCII));\n-\n-            // Should not be chunked.\n-            assertThat(new String(ByteStreams.toByteArray(in))).isEqualTo(\n-                    \"HTTP/1.1 200 OK\\r\\n\" +\n-                    \"content-type: text/plain;charset=UTF-8\\r\\n\" +\n-                    \"content-length: 4\\r\\n\\r\\n\" +\n-                    \"PONG\");\n-        }\n+    Logger httpWebHandlerAdapterLogger;\n+    final ListAppender<ILoggingEvent> logAppender = new ListAppender<>();\n+\n+    @BeforeEach\n+    public void attachAppender() {\n+        httpWebHandlerAdapterLogger = (Logger) LoggerFactory.getLogger(HttpWebHandlerAdapter.class);\n+        logAppender.start();\n+        httpWebHandlerAdapterLogger.addAppender(logAppender);\n     }\n \n-    @Test\n-    void head() throws Exception {\n-        try (Socket s = new Socket(NetUtil.LOCALHOST4, port)) {\n-            s.setSoTimeout(10000);\n-            final InputStream in = s.getInputStream();\n-            final OutputStream out = s.getOutputStream();\n-            out.write(\"HEAD /api/ping HTTP/1.0\\r\\n\\r\\n\".getBytes(StandardCharsets.US_ASCII));\n-\n-            // Should neither be chunked nor have content.\n-            assertThat(new String(ByteStreams.toByteArray(in))).isEqualTo(\n-                    \"HTTP/1.1 200 OK\\r\\n\" +\n-                    \"content-type: text/plain;charset=UTF-8\\r\\n\" +\n-                    \"content-length: 4\\r\\n\\r\\n\");\n+    @AfterEach\n+    public void detachAppender() {\n+        httpWebHandlerAdapterLogger.detachAppender(logAppender);\n+        logAppender.list.clear();\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource({\n+            \"H1C, /controller/api/ping\",\n+            \"H2C, /router/api/ping\"\n+    })\n+    void testGet(SessionProtocol sessionProtocol, String path) {\n+        final String uri = sessionProtocol.uriText() + \"://127.0.0.1:\" + port;\n+        final WebClient webClient = WebClient.of(uri);\n+        final AggregatedHttpResponse res = webClient.get(path).aggregate().join();\n+\n+        assertThat(res.status()).isSameAs(HttpStatus.OK);\n+        assertThat(res.contentType()).isSameAs(MediaType.PLAIN_TEXT_UTF_8);\n+        assertThat(res.headers().get(\"content-length\")).isEqualTo(\"4\");\n+        assertThat(res.content().toStringUtf8()).isEqualTo(\"PONG\");\n+        assertNoErrorLogByHttpWebHandlerAdapter();\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource({\n+            \"H1C, /controller/api/ping, 4\",\n+            \"H2C, /controller/api/ping, 4\",\n+            \"H1C, /router/api/ping, 4\",\n+            \"H2C, /router/api/ping, 4\",\n+            \"H2C, /router/api/poke, 0\",\n+            \"H1C, /router/api/poke, 0\"\n+    })\n+    void testHead(SessionProtocol sessionProtocol, String path, int contentLength) {\n+        final String uri = sessionProtocol.uriText() + \"://127.0.0.1:\" + port;\n+        final WebClient webClient = WebClient.of(uri);\n+        final AggregatedHttpResponse res = webClient.head(path).aggregate().join();\n+\n+        assertThat(res.status()).isSameAs(HttpStatus.OK);\n+        assertThat(res.content().isEmpty()).isTrue();\n+\n+        if (contentLength > 0) {\n+            assertThat(res.contentType()).isSameAs(MediaType.PLAIN_TEXT_UTF_8);\n+            assertThat(res.headers().get(\"content-length\")).isEqualTo(String.valueOf(contentLength));\n         }\n+        assertNoErrorLogByHttpWebHandlerAdapter();\n+    }\n+\n+    private void assertNoErrorLogByHttpWebHandlerAdapter() {\n+        // Example error log for CancelledSubscriptionException by HttpWebHandlerAdapter:\n+        //\n+        // Error [com.linecorp.armeria.common.stream.CancelledSubscriptionException] for\n+        // HTTP HEAD \"/router/api/poke\", but ServerHttpResponse already committed (200 OK)\n+        final String errorLogSubString =\n+                \"Error [com.linecorp.armeria.common.stream.CancelledSubscriptionException] for HTTP HEAD\";\n+        assertThat(logAppender.list\n+                           .stream()\n+                           .filter(event -> event.getFormattedMessage().contains(errorLogSubString))\n+                           .collect(Collectors.toList()))\n+                .hasSize(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77a5352d064068810aa13cc35653d869c0980f9e"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NDU4NA==", "bodyText": "Could simplify with:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(future.isDone()).isFalse();\n          \n          \n            \n                    assertThat(future).isNotDone();", "url": "https://github.com/line/armeria/pull/2965#discussion_r466154584", "createdAt": "2020-08-06T05:28:40Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponseTest.java", "diffHunk": "@@ -171,6 +172,31 @@ void returnHeadersAndBody() throws Exception {\n         await().until(() -> httpResponse.whenComplete().isDone());\n     }\n \n+    @Test\n+    void ignoreCancelledSubscriptionException() throws Exception {\n+        final ServiceRequestContext ctx = ServiceRequestContext.of(HttpRequest.of(HttpMethod.HEAD, \"/\"));\n+\n+        final CompletableFuture<HttpResponse> future = new CompletableFuture<>();\n+        final ArmeriaServerHttpResponse response = response(ctx, future);\n+\n+        response.setStatusCode(HttpStatus.OK);\n+        response.getHeaders().add(\"Armeria\", \"awesome\");\n+        assertThat(future.isDone()).isFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77a5352d064068810aa13cc35653d869c0980f9e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NjQ3NA==", "bodyText": "nit: Indent?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Mono.fromFuture(response.whenComplete())\n          \n          \n            \n                            .onErrorResume(CancelledSubscriptionException.class, e -> Mono.empty());\n          \n          \n            \n                    return Mono.fromFuture(response.whenComplete())\n          \n          \n            \n                               .onErrorResume(CancelledSubscriptionException.class, e -> Mono.empty());", "url": "https://github.com/line/armeria/pull/2965#discussion_r466156474", "createdAt": "2020-08-06T05:34:55Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponse.java", "diffHunk": "@@ -287,7 +287,9 @@ public HttpHeaders getHeaders() {\n         final HttpResponse response = HttpResponse.of(buildResponseHeaders());\n         future.complete(response);\n         logger.debug(\"{} Response future has been completed with an HttpResponse\", ctx);\n-        return Mono.fromFuture(response.whenComplete());\n+\n+        return Mono.fromFuture(response.whenComplete())\n+                .onErrorResume(CancelledSubscriptionException.class, e -> Mono.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77a5352d064068810aa13cc35653d869c0980f9e"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "345db8923c2da120e791930a418c21ac660ad76f", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/345db8923c2da120e791930a418c21ac660ad76f", "committedDate": "2020-08-06T05:57:59Z", "message": "Apply comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f6b97261844dcb46ceea1f569f835998c51fed2c", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/f6b97261844dcb46ceea1f569f835998c51fed2c", "committedDate": "2020-08-06T05:51:30Z", "message": "Apply comments"}, "afterCommit": {"oid": "345db8923c2da120e791930a418c21ac660ad76f", "author": {"user": {"login": "eunchan-kim", "name": "Eunchan Kim"}}, "url": "https://github.com/line/armeria/commit/345db8923c2da120e791930a418c21ac660ad76f", "committedDate": "2020-08-06T05:57:59Z", "message": "Apply comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMjczOTM5", "url": "https://github.com/line/armeria/pull/2965#pullrequestreview-462273939", "createdAt": "2020-08-06T07:58:43Z", "commit": {"oid": "345db8923c2da120e791930a418c21ac660ad76f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4997, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}