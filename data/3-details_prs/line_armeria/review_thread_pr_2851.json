{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMzMzODA0", "number": 2851, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoyMToxM1rOEJ8q4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoyMToxM1rOEJ8q4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODY2NjU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleBuilder.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoyMToxM1rOGqtWyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODo0NTozOVrOGqyTNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzNjQ4OA==", "bodyText": "How about BiPredicates.second()?", "url": "https://github.com/line/armeria/pull/2851#discussion_r447436488", "createdAt": "2020-06-30T06:21:13Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleBuilder.java", "diffHunk": "@@ -46,55 +48,90 @@\n @UnstableApi\n public abstract class AbstractRuleBuilder {\n \n-    private final Predicate<RequestHeaders> requestHeadersFilter;\n+    private final BiPredicate<ClientRequestContext, RequestHeaders> requestHeadersFilter;\n \n     @Nullable\n-    private Predicate<ResponseHeaders> responseHeadersFilter;\n+    private BiPredicate<ClientRequestContext, ResponseHeaders> responseHeadersFilter;\n     @Nullable\n-    private Predicate<HttpHeaders> responseTrailersFilter;\n+    private BiPredicate<ClientRequestContext, HttpHeaders> responseTrailersFilter;\n     @Nullable\n-    private Predicate<Throwable> exceptionFilter;\n+    private BiPredicate<ClientRequestContext, Throwable> exceptionFilter;\n \n     /**\n      * Creates a new instance with the specified {@code requestHeadersFilter}.\n      */\n     @SuppressWarnings(\"unchecked\")\n+    protected AbstractRuleBuilder(\n+            BiPredicate<? super ClientRequestContext, ? super RequestHeaders> requestHeadersFilter) {\n+        this.requestHeadersFilter = (BiPredicate<ClientRequestContext, RequestHeaders>) requestHeadersFilter;\n+    }\n+\n+    /**\n+     * Creates a new instance with the specified {@code requestHeadersFilter}.\n+     *\n+     * @deprecated Use {@link #AbstractRuleBuilder(BiPredicate)}.\n+     */\n+    @Deprecated\n     protected AbstractRuleBuilder(Predicate<? super RequestHeaders> requestHeadersFilter) {\n-        this.requestHeadersFilter = (Predicate<RequestHeaders>) requestHeadersFilter;\n+        this(toBiPredicateForSecond(requireNonNull(requestHeadersFilter, \"requestHeadersFilter\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce7a993650d71678213e65b760b92bdf8f5af060"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwNTA3Nw==", "bodyText": "I thought that names too. I was not sure that the second() expresses the behavior. \ud83e\udd14\n\nFunctions.second() returns a BiFunction that returns its second arguments.\nBiPredicates.second(Predicate) that returns a BiPredicate that uses only the second argument to evaluate the predicate.\n\nHow about BiPredicates.ofSecond(Predicate) at least to indicate the method is a factory?", "url": "https://github.com/line/armeria/pull/2851#discussion_r447505077", "createdAt": "2020-06-30T08:27:20Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleBuilder.java", "diffHunk": "@@ -46,55 +48,90 @@\n @UnstableApi\n public abstract class AbstractRuleBuilder {\n \n-    private final Predicate<RequestHeaders> requestHeadersFilter;\n+    private final BiPredicate<ClientRequestContext, RequestHeaders> requestHeadersFilter;\n \n     @Nullable\n-    private Predicate<ResponseHeaders> responseHeadersFilter;\n+    private BiPredicate<ClientRequestContext, ResponseHeaders> responseHeadersFilter;\n     @Nullable\n-    private Predicate<HttpHeaders> responseTrailersFilter;\n+    private BiPredicate<ClientRequestContext, HttpHeaders> responseTrailersFilter;\n     @Nullable\n-    private Predicate<Throwable> exceptionFilter;\n+    private BiPredicate<ClientRequestContext, Throwable> exceptionFilter;\n \n     /**\n      * Creates a new instance with the specified {@code requestHeadersFilter}.\n      */\n     @SuppressWarnings(\"unchecked\")\n+    protected AbstractRuleBuilder(\n+            BiPredicate<? super ClientRequestContext, ? super RequestHeaders> requestHeadersFilter) {\n+        this.requestHeadersFilter = (BiPredicate<ClientRequestContext, RequestHeaders>) requestHeadersFilter;\n+    }\n+\n+    /**\n+     * Creates a new instance with the specified {@code requestHeadersFilter}.\n+     *\n+     * @deprecated Use {@link #AbstractRuleBuilder(BiPredicate)}.\n+     */\n+    @Deprecated\n     protected AbstractRuleBuilder(Predicate<? super RequestHeaders> requestHeadersFilter) {\n-        this.requestHeadersFilter = (Predicate<RequestHeaders>) requestHeadersFilter;\n+        this(toBiPredicateForSecond(requireNonNull(requestHeadersFilter, \"requestHeadersFilter\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzNjQ4OA=="}, "originalCommit": {"oid": "ce7a993650d71678213e65b760b92bdf8f5af060"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxMTczOA==", "bodyText": "We're probably gonna remove it once the deprecated methods are gone, so.. maybe OK not to care about naming? \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2851#discussion_r447511738", "createdAt": "2020-06-30T08:37:13Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleBuilder.java", "diffHunk": "@@ -46,55 +48,90 @@\n @UnstableApi\n public abstract class AbstractRuleBuilder {\n \n-    private final Predicate<RequestHeaders> requestHeadersFilter;\n+    private final BiPredicate<ClientRequestContext, RequestHeaders> requestHeadersFilter;\n \n     @Nullable\n-    private Predicate<ResponseHeaders> responseHeadersFilter;\n+    private BiPredicate<ClientRequestContext, ResponseHeaders> responseHeadersFilter;\n     @Nullable\n-    private Predicate<HttpHeaders> responseTrailersFilter;\n+    private BiPredicate<ClientRequestContext, HttpHeaders> responseTrailersFilter;\n     @Nullable\n-    private Predicate<Throwable> exceptionFilter;\n+    private BiPredicate<ClientRequestContext, Throwable> exceptionFilter;\n \n     /**\n      * Creates a new instance with the specified {@code requestHeadersFilter}.\n      */\n     @SuppressWarnings(\"unchecked\")\n+    protected AbstractRuleBuilder(\n+            BiPredicate<? super ClientRequestContext, ? super RequestHeaders> requestHeadersFilter) {\n+        this.requestHeadersFilter = (BiPredicate<ClientRequestContext, RequestHeaders>) requestHeadersFilter;\n+    }\n+\n+    /**\n+     * Creates a new instance with the specified {@code requestHeadersFilter}.\n+     *\n+     * @deprecated Use {@link #AbstractRuleBuilder(BiPredicate)}.\n+     */\n+    @Deprecated\n     protected AbstractRuleBuilder(Predicate<? super RequestHeaders> requestHeadersFilter) {\n-        this.requestHeadersFilter = (Predicate<RequestHeaders>) requestHeadersFilter;\n+        this(toBiPredicateForSecond(requireNonNull(requestHeadersFilter, \"requestHeadersFilter\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzNjQ4OA=="}, "originalCommit": {"oid": "ce7a993650d71678213e65b760b92bdf8f5af060"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxNjkyNw==", "bodyText": "We're probably gonna remove it once the deprecated methods are gone, so.. maybe OK not to care about naming? \ud83d\ude05\n\nYes, the BiPredicates class will be removed eventually.", "url": "https://github.com/line/armeria/pull/2851#discussion_r447516927", "createdAt": "2020-06-30T08:44:51Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleBuilder.java", "diffHunk": "@@ -46,55 +48,90 @@\n @UnstableApi\n public abstract class AbstractRuleBuilder {\n \n-    private final Predicate<RequestHeaders> requestHeadersFilter;\n+    private final BiPredicate<ClientRequestContext, RequestHeaders> requestHeadersFilter;\n \n     @Nullable\n-    private Predicate<ResponseHeaders> responseHeadersFilter;\n+    private BiPredicate<ClientRequestContext, ResponseHeaders> responseHeadersFilter;\n     @Nullable\n-    private Predicate<HttpHeaders> responseTrailersFilter;\n+    private BiPredicate<ClientRequestContext, HttpHeaders> responseTrailersFilter;\n     @Nullable\n-    private Predicate<Throwable> exceptionFilter;\n+    private BiPredicate<ClientRequestContext, Throwable> exceptionFilter;\n \n     /**\n      * Creates a new instance with the specified {@code requestHeadersFilter}.\n      */\n     @SuppressWarnings(\"unchecked\")\n+    protected AbstractRuleBuilder(\n+            BiPredicate<? super ClientRequestContext, ? super RequestHeaders> requestHeadersFilter) {\n+        this.requestHeadersFilter = (BiPredicate<ClientRequestContext, RequestHeaders>) requestHeadersFilter;\n+    }\n+\n+    /**\n+     * Creates a new instance with the specified {@code requestHeadersFilter}.\n+     *\n+     * @deprecated Use {@link #AbstractRuleBuilder(BiPredicate)}.\n+     */\n+    @Deprecated\n     protected AbstractRuleBuilder(Predicate<? super RequestHeaders> requestHeadersFilter) {\n-        this.requestHeadersFilter = (Predicate<RequestHeaders>) requestHeadersFilter;\n+        this(toBiPredicateForSecond(requireNonNull(requestHeadersFilter, \"requestHeadersFilter\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzNjQ4OA=="}, "originalCommit": {"oid": "ce7a993650d71678213e65b760b92bdf8f5af060"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxNzQ5Mg==", "bodyText": "If so, then it's fine as it is. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2851#discussion_r447517492", "createdAt": "2020-06-30T08:45:39Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleBuilder.java", "diffHunk": "@@ -46,55 +48,90 @@\n @UnstableApi\n public abstract class AbstractRuleBuilder {\n \n-    private final Predicate<RequestHeaders> requestHeadersFilter;\n+    private final BiPredicate<ClientRequestContext, RequestHeaders> requestHeadersFilter;\n \n     @Nullable\n-    private Predicate<ResponseHeaders> responseHeadersFilter;\n+    private BiPredicate<ClientRequestContext, ResponseHeaders> responseHeadersFilter;\n     @Nullable\n-    private Predicate<HttpHeaders> responseTrailersFilter;\n+    private BiPredicate<ClientRequestContext, HttpHeaders> responseTrailersFilter;\n     @Nullable\n-    private Predicate<Throwable> exceptionFilter;\n+    private BiPredicate<ClientRequestContext, Throwable> exceptionFilter;\n \n     /**\n      * Creates a new instance with the specified {@code requestHeadersFilter}.\n      */\n     @SuppressWarnings(\"unchecked\")\n+    protected AbstractRuleBuilder(\n+            BiPredicate<? super ClientRequestContext, ? super RequestHeaders> requestHeadersFilter) {\n+        this.requestHeadersFilter = (BiPredicate<ClientRequestContext, RequestHeaders>) requestHeadersFilter;\n+    }\n+\n+    /**\n+     * Creates a new instance with the specified {@code requestHeadersFilter}.\n+     *\n+     * @deprecated Use {@link #AbstractRuleBuilder(BiPredicate)}.\n+     */\n+    @Deprecated\n     protected AbstractRuleBuilder(Predicate<? super RequestHeaders> requestHeadersFilter) {\n-        this.requestHeadersFilter = (Predicate<RequestHeaders>) requestHeadersFilter;\n+        this(toBiPredicateForSecond(requireNonNull(requestHeadersFilter, \"requestHeadersFilter\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzNjQ4OA=="}, "originalCommit": {"oid": "ce7a993650d71678213e65b760b92bdf8f5af060"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2453, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}