{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NzQwMDMw", "number": 2804, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMTozMDowMVrOEGTzOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzoxNDo0M1rOEGWBmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDUxMzIyOnYy", "diffSide": "RIGHT", "path": "site/build.gradle", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMTozMDowMVrOGlBj9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMTozODoxNlrOGlcsMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ3NjA4Ng==", "bodyText": "How about using regular expression?", "url": "https://github.com/line/armeria/pull/2804#discussion_r441476086", "createdAt": "2020-06-17T11:30:01Z", "author": {"login": "trustin"}, "path": "site/build.gradle", "diffHunk": "@@ -126,16 +126,41 @@ class ApiIndexTask extends DefaultTask {\n             def href = \"https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/${relativePath}\"\n \n             def result = []\n-            def name = fqcn\n-            for (;;) {\n-                result.add([name, href])\n-                def dotIndex = name.indexOf('.')\n-                if (dotIndex < 0) {\n-                    break\n+            result.add([fqcn, href])\n+\n+            def simpleClassName = fqcn.substring(fqcn.lastIndexOf('.') + 1)\n+            result.add([simpleClassName, href])\n+\n+            def br = new BufferedReader(new FileReader(path.toFile()))\n+            def line = br.readLine()\n+            // Read a file to retrieve the links of methods.\n+            while (line != null) {\n+                if (line.startsWith('<h3><a id=\"')) {\n+                    // The length of `<h3><a id=\"` is 10\n+                    def methodSignatureEndingIndex = line.indexOf('\"', 11)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01546ef7a82db60e073245493dc9b5d5a60db070"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxODkyNQ==", "bodyText": "Or How about using Jsoup? https://jsoup.org/cookbook/input/load-document-from-file\nWe could get the method names using CSS Selector easily. It is fast to parse local HTML(tested it locally).\n// in buildscript.dependencies\nclasspath 'org.jsoup:jsoup:1.13.1'\n\nDocument doc = Jsoup.parse(path.toFile(), \"UTF-8\")\ndoc.select(\"h3 > a\").each {\n    println it.text()  // get method names\n}", "url": "https://github.com/line/armeria/pull/2804#discussion_r441518925", "createdAt": "2020-06-17T12:49:56Z", "author": {"login": "ikhoon"}, "path": "site/build.gradle", "diffHunk": "@@ -126,16 +126,41 @@ class ApiIndexTask extends DefaultTask {\n             def href = \"https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/${relativePath}\"\n \n             def result = []\n-            def name = fqcn\n-            for (;;) {\n-                result.add([name, href])\n-                def dotIndex = name.indexOf('.')\n-                if (dotIndex < 0) {\n-                    break\n+            result.add([fqcn, href])\n+\n+            def simpleClassName = fqcn.substring(fqcn.lastIndexOf('.') + 1)\n+            result.add([simpleClassName, href])\n+\n+            def br = new BufferedReader(new FileReader(path.toFile()))\n+            def line = br.readLine()\n+            // Read a file to retrieve the links of methods.\n+            while (line != null) {\n+                if (line.startsWith('<h3><a id=\"')) {\n+                    // The length of `<h3><a id=\"` is 10\n+                    def methodSignatureEndingIndex = line.indexOf('\"', 11)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ3NjA4Ng=="}, "originalCommit": {"oid": "01546ef7a82db60e073245493dc9b5d5a60db070"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2ODMwOA==", "bodyText": "I think that will include other lines such as\n<h3>Methods inherited from class&nbsp;java.lang.<a href= ...\n\nSo I guess I have to stick with <h3><a id=\" this expression.\nLet me use regex. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2804#discussion_r441568308", "createdAt": "2020-06-17T14:00:40Z", "author": {"login": "minwoox"}, "path": "site/build.gradle", "diffHunk": "@@ -126,16 +126,41 @@ class ApiIndexTask extends DefaultTask {\n             def href = \"https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/${relativePath}\"\n \n             def result = []\n-            def name = fqcn\n-            for (;;) {\n-                result.add([name, href])\n-                def dotIndex = name.indexOf('.')\n-                if (dotIndex < 0) {\n-                    break\n+            result.add([fqcn, href])\n+\n+            def simpleClassName = fqcn.substring(fqcn.lastIndexOf('.') + 1)\n+            result.add([simpleClassName, href])\n+\n+            def br = new BufferedReader(new FileReader(path.toFile()))\n+            def line = br.readLine()\n+            // Read a file to retrieve the links of methods.\n+            while (line != null) {\n+                if (line.startsWith('<h3><a id=\"')) {\n+                    // The length of `<h3><a id=\"` is 10\n+                    def methodSignatureEndingIndex = line.indexOf('\"', 11)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ3NjA4Ng=="}, "originalCommit": {"oid": "01546ef7a82db60e073245493dc9b5d5a60db070"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYxOTA4OA==", "bodyText": "Just out of curiosity, .detail > h3 > a:not([id^=<init>]) works. \ud83e\udd23", "url": "https://github.com/line/armeria/pull/2804#discussion_r441619088", "createdAt": "2020-06-17T15:07:16Z", "author": {"login": "ikhoon"}, "path": "site/build.gradle", "diffHunk": "@@ -126,16 +126,41 @@ class ApiIndexTask extends DefaultTask {\n             def href = \"https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/${relativePath}\"\n \n             def result = []\n-            def name = fqcn\n-            for (;;) {\n-                result.add([name, href])\n-                def dotIndex = name.indexOf('.')\n-                if (dotIndex < 0) {\n-                    break\n+            result.add([fqcn, href])\n+\n+            def simpleClassName = fqcn.substring(fqcn.lastIndexOf('.') + 1)\n+            result.add([simpleClassName, href])\n+\n+            def br = new BufferedReader(new FileReader(path.toFile()))\n+            def line = br.readLine()\n+            // Read a file to retrieve the links of methods.\n+            while (line != null) {\n+                if (line.startsWith('<h3><a id=\"')) {\n+                    // The length of `<h3><a id=\"` is 10\n+                    def methodSignatureEndingIndex = line.indexOf('\"', 11)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ3NjA4Ng=="}, "originalCommit": {"oid": "01546ef7a82db60e073245493dc9b5d5a60db070"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkyMDU2MA==", "bodyText": "Oh didn't know I can do it in that way. Let me try. Thanks!", "url": "https://github.com/line/armeria/pull/2804#discussion_r441920560", "createdAt": "2020-06-18T01:38:16Z", "author": {"login": "minwoox"}, "path": "site/build.gradle", "diffHunk": "@@ -126,16 +126,41 @@ class ApiIndexTask extends DefaultTask {\n             def href = \"https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/${relativePath}\"\n \n             def result = []\n-            def name = fqcn\n-            for (;;) {\n-                result.add([name, href])\n-                def dotIndex = name.indexOf('.')\n-                if (dotIndex < 0) {\n-                    break\n+            result.add([fqcn, href])\n+\n+            def simpleClassName = fqcn.substring(fqcn.lastIndexOf('.') + 1)\n+            result.add([simpleClassName, href])\n+\n+            def br = new BufferedReader(new FileReader(path.toFile()))\n+            def line = br.readLine()\n+            // Read a file to retrieve the links of methods.\n+            while (line != null) {\n+                if (line.startsWith('<h3><a id=\"')) {\n+                    // The length of `<h3><a id=\"` is 10\n+                    def methodSignatureEndingIndex = line.indexOf('\"', 11)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ3NjA4Ng=="}, "originalCommit": {"oid": "01546ef7a82db60e073245493dc9b5d5a60db070"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDg3NzcxOnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/advanced-zookeeper.mdx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzoxNDo0M1rOGlFJPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjozMDozMlrOGlhUgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzNDc4MA==", "bodyText": "nit: Sort alphabetically?", "url": "https://github.com/line/armeria/pull/2804#discussion_r441534780", "createdAt": "2020-06-17T13:14:43Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/docs/advanced-zookeeper.mdx", "diffHunk": "@@ -1,85 +1,112 @@\n # Service discovery with ZooKeeper\n \n-You can put the list of available <typeplural://Endpoint> into a zNode in\n-[Apache ZooKeeper](https://zookeeper.apache.org/) cluster as a node tree, like the following:\n-\n-```yaml\n-# Note: Only child node values are used. i.e. Child node names are ignored.\n-- /myProductionEndpoints\n-  - /192.168.1.10_8080: 192.168.1.10:8080\n-  - /192.168.1.11_8080: 192.168.1.11:8080:100\n-```\n-\n-In the examples above, `192.168.1.10` and other IP strings are your servers' IP addresses, `8080` is a\n-service port number and `100` is a weight value. You can omit a weight value as it is optional.\n+## Automatic service registration\n \n-Create a <type://ZooKeeperEndpointGroup> to retrieve this information:\n+Use <type://ZooKeeperUpdatingListener> and <type://ZooKeeperRegistrationSpec> to register your server\n+to a ZooKeeper cluster:\n \n ```java\n-import com.linecorp.armeria.client.endpoint.EndpointGroup;\n-import com.linecorp.armeria.client.zookeeper.ZooKeeperEndpointGroup;\n-\n-EndpointGroup myEndpointGroup =\n-        ZooKeeperEndpointGroup.builder(/* zkConnectionStr */ \"myZooKeeperHost:2181\",\n-                                       /* zNodePath       */ \"/myProductionEndpoints\")\n-                              .customizer(builder ->  builder.sessionTimeoutMs(10000))\n-                              .build();\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.zookeeper.ZooKeeperRegistrationSpec;\n+import com.linecorp.armeria.server.zookeeper.ZooKeeperUpdatingListener;\n+\n+String zkConnectionStr = \"myZooKeeperHost:2181\";\n+String znodePath = \"/myProductionEndpoints\";\n+String serviceName = \"catalog\";\n+ZooKeeperRegistrationSpec registrationSpec =\n+        ZooKeeperRegistrationSpec.curator(serviceName);\n+ZooKeeperUpdatingListener listener =\n+        ZooKeeperUpdatingListener.builder(zkConnectionStr, znodePath, registrationSpec)\n+                                 .sessionTimeoutMillis(10000)\n+                                 .build();\n+Server server = ...\n+server.addListener(listener);\n+server.start();\n ```\n \n-And then specify it when you build a client:\n+The <type://ZooKeeperRegistrationSpec> is used to convert the information of your server to a binary\n+representation. The <type://ZooKeeperUpdatingListener> registers the binary representation to the specified\n+znode as a member of the cluster when your server starts up. Each server will represent itself as\n+[an EPHEMERAL node](https://zookeeper.apache.org/doc/r3.4.10/zookeeperOver.html#Nodes+and+ephemeral+nodes),\n+which means when a server stops or a network partition between your server and ZooKeeper cluster occurs,\n+the node of the server that became unreachable will be deleted automatically by ZooKeeper.\n+\n+<type://ZooKeeperRegistrationSpec#curator(String)> uses the format of\n+[Curator Service Discovery](https://curator.apache.org/curator-x-discovery/index.html) which is compatible\n+with [Spring Cloud Zookeeper](https://cloud.spring.io/spring-cloud-zookeeper/reference/html/).\n+You can use <type://ZooKeeperRegistrationSpec#serverSets()> that applies the format of\n+[Finagle ServerSets](https://twitter.github.io/finagle/docs/com/twitter/serverset.html).\n+If you want to use your own format, you can implement the <type://ZooKeeperRegistrationSpec>.\n+\n+In the example above, we used the ZooKeeper connection string(`\"myZooKeeperHost:2181\"`) to connect to\n+the ZooKeeper cluster. Instead, you can use an existing\n+[CuratorFramework](https://curator.apache.org/apidocs/org/apache/curator/framework/CuratorFramework.html)\n+instance.\n \n ```java\n-HelloService.Iface helloClient =\n-        Clients.builder(\"tbinary+http\", myEndpointGroup, \"/hello\")\n-               .build(HelloService.Iface.class);\n+import org.apache.curator.framework.CuratorFramework;\n+\n+CuratorFramework client = ...\n+String znodePath = ...\n+ZooKeeperRegistrationSpec registrationSpec = ...\n+ZooKeeperUpdatingListener listener =\n+        ZooKeeperUpdatingListener.builder(client, znodePath, registrationSpec)\n+                                 .build();\n+Server server = ...\n+server.addListener(listener);\n+server.start();\n ```\n \n For more information, please refer to the API documentation of the\n [com.linecorp.armeria.server.zookeeper](https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/zookeeper/package-summary.html) package.\n \n-## Automatic service registration\n+## Service discovery\n \n-Use <type://ZooKeeperUpdatingListenerBuilder> to register your server to a ZooKeeper cluster:\n+Use <type://ZooKeeperEndpointGroup> and <type://ZooKeeperDiscoverySpec> to retrieve the information of servers:\n \n ```java\n-import com.linecorp.armeria.server.ServerListener;\n-import com.linecorp.armeria.server.zookeeper.ZooKeeperUpdatingListenerBuilder;\n-\n-ZooKeeperUpdatingListener listener =\n-        ZooKeeperUpdatingListener.builder(\"myZooKeeperHost:2181\", \"/myProductionEndpoints\")\n-                                 .sessionTimeout(10000)\n-                                 .build();\n-server.addListener(listener);\n-server.start();\n-...\n+import com.linecorp.armeria.client.zookeeper.ZooKeeperEndpointGroup;\n+import com.linecorp.armeria.client.zookeeper.ZooKeeperDiscoverySpec;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01546ef7a82db60e073245493dc9b5d5a60db070"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NjQxOA==", "bodyText": "Oops fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2804#discussion_r441996418", "createdAt": "2020-06-18T06:30:32Z", "author": {"login": "minwoox"}, "path": "site/src/pages/docs/advanced-zookeeper.mdx", "diffHunk": "@@ -1,85 +1,112 @@\n # Service discovery with ZooKeeper\n \n-You can put the list of available <typeplural://Endpoint> into a zNode in\n-[Apache ZooKeeper](https://zookeeper.apache.org/) cluster as a node tree, like the following:\n-\n-```yaml\n-# Note: Only child node values are used. i.e. Child node names are ignored.\n-- /myProductionEndpoints\n-  - /192.168.1.10_8080: 192.168.1.10:8080\n-  - /192.168.1.11_8080: 192.168.1.11:8080:100\n-```\n-\n-In the examples above, `192.168.1.10` and other IP strings are your servers' IP addresses, `8080` is a\n-service port number and `100` is a weight value. You can omit a weight value as it is optional.\n+## Automatic service registration\n \n-Create a <type://ZooKeeperEndpointGroup> to retrieve this information:\n+Use <type://ZooKeeperUpdatingListener> and <type://ZooKeeperRegistrationSpec> to register your server\n+to a ZooKeeper cluster:\n \n ```java\n-import com.linecorp.armeria.client.endpoint.EndpointGroup;\n-import com.linecorp.armeria.client.zookeeper.ZooKeeperEndpointGroup;\n-\n-EndpointGroup myEndpointGroup =\n-        ZooKeeperEndpointGroup.builder(/* zkConnectionStr */ \"myZooKeeperHost:2181\",\n-                                       /* zNodePath       */ \"/myProductionEndpoints\")\n-                              .customizer(builder ->  builder.sessionTimeoutMs(10000))\n-                              .build();\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.zookeeper.ZooKeeperRegistrationSpec;\n+import com.linecorp.armeria.server.zookeeper.ZooKeeperUpdatingListener;\n+\n+String zkConnectionStr = \"myZooKeeperHost:2181\";\n+String znodePath = \"/myProductionEndpoints\";\n+String serviceName = \"catalog\";\n+ZooKeeperRegistrationSpec registrationSpec =\n+        ZooKeeperRegistrationSpec.curator(serviceName);\n+ZooKeeperUpdatingListener listener =\n+        ZooKeeperUpdatingListener.builder(zkConnectionStr, znodePath, registrationSpec)\n+                                 .sessionTimeoutMillis(10000)\n+                                 .build();\n+Server server = ...\n+server.addListener(listener);\n+server.start();\n ```\n \n-And then specify it when you build a client:\n+The <type://ZooKeeperRegistrationSpec> is used to convert the information of your server to a binary\n+representation. The <type://ZooKeeperUpdatingListener> registers the binary representation to the specified\n+znode as a member of the cluster when your server starts up. Each server will represent itself as\n+[an EPHEMERAL node](https://zookeeper.apache.org/doc/r3.4.10/zookeeperOver.html#Nodes+and+ephemeral+nodes),\n+which means when a server stops or a network partition between your server and ZooKeeper cluster occurs,\n+the node of the server that became unreachable will be deleted automatically by ZooKeeper.\n+\n+<type://ZooKeeperRegistrationSpec#curator(String)> uses the format of\n+[Curator Service Discovery](https://curator.apache.org/curator-x-discovery/index.html) which is compatible\n+with [Spring Cloud Zookeeper](https://cloud.spring.io/spring-cloud-zookeeper/reference/html/).\n+You can use <type://ZooKeeperRegistrationSpec#serverSets()> that applies the format of\n+[Finagle ServerSets](https://twitter.github.io/finagle/docs/com/twitter/serverset.html).\n+If you want to use your own format, you can implement the <type://ZooKeeperRegistrationSpec>.\n+\n+In the example above, we used the ZooKeeper connection string(`\"myZooKeeperHost:2181\"`) to connect to\n+the ZooKeeper cluster. Instead, you can use an existing\n+[CuratorFramework](https://curator.apache.org/apidocs/org/apache/curator/framework/CuratorFramework.html)\n+instance.\n \n ```java\n-HelloService.Iface helloClient =\n-        Clients.builder(\"tbinary+http\", myEndpointGroup, \"/hello\")\n-               .build(HelloService.Iface.class);\n+import org.apache.curator.framework.CuratorFramework;\n+\n+CuratorFramework client = ...\n+String znodePath = ...\n+ZooKeeperRegistrationSpec registrationSpec = ...\n+ZooKeeperUpdatingListener listener =\n+        ZooKeeperUpdatingListener.builder(client, znodePath, registrationSpec)\n+                                 .build();\n+Server server = ...\n+server.addListener(listener);\n+server.start();\n ```\n \n For more information, please refer to the API documentation of the\n [com.linecorp.armeria.server.zookeeper](https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/zookeeper/package-summary.html) package.\n \n-## Automatic service registration\n+## Service discovery\n \n-Use <type://ZooKeeperUpdatingListenerBuilder> to register your server to a ZooKeeper cluster:\n+Use <type://ZooKeeperEndpointGroup> and <type://ZooKeeperDiscoverySpec> to retrieve the information of servers:\n \n ```java\n-import com.linecorp.armeria.server.ServerListener;\n-import com.linecorp.armeria.server.zookeeper.ZooKeeperUpdatingListenerBuilder;\n-\n-ZooKeeperUpdatingListener listener =\n-        ZooKeeperUpdatingListener.builder(\"myZooKeeperHost:2181\", \"/myProductionEndpoints\")\n-                                 .sessionTimeout(10000)\n-                                 .build();\n-server.addListener(listener);\n-server.start();\n-...\n+import com.linecorp.armeria.client.zookeeper.ZooKeeperEndpointGroup;\n+import com.linecorp.armeria.client.zookeeper.ZooKeeperDiscoverySpec;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzNDc4MA=="}, "originalCommit": {"oid": "01546ef7a82db60e073245493dc9b5d5a60db070"}, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2356, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}